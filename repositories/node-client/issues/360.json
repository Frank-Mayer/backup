{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "# TLDR\r\n\r\nThere seems to be lots of testing frameworks for vim scripts:\r\n\r\n* https://github.com/cdelledonne/vim-utest\r\n* https://github.com/dhruvasagar/vim-testify\r\n* https://github.com/LucHermitte/vim-UT\r\n* https://github.com/junegunn/vader.vim\r\n* https://github.com/google/vroom\r\n* https://github.com/kana/vim-vspec\r\n* https://github.com/thinca/vim-themis\r\n* ...\r\n\r\nShould I use one of them and just call my node exported test function from vim script? If so, how do I get the test results output?\r\n\r\nShould I use a technique similar to what node-client is doing instead, see https://github.com/neovim/node-client/tree/master/packages/integration-tests ? If so, how do I get the test results output?\r\n\r\nAny pointers or help is appreciated. \r\n\r\n# This is how I currently test my neovim node plugin locally\r\n\r\nI've got a [neovim node plugin](https://github.com/saidelike/cursorless/tree/a9ad4879267b662cf6e45420d40f1da2eff4bf2f/packages/cursorless-neovim) that exposes a [test framework entry point](https://github.com/saidelike/cursorless/blob/a9ad4879267b662cf6e45420d40f1da2eff4bf2f/packages/test-harness/src/index.ts#L29). This function ends up calling into [mocha](https://mochajs.org/) in order to run all the [tests](https://github.com/saidelike/cursorless/blob/a9ad4879267b662cf6e45420d40f1da2eff4bf2f/packages/cursorless-neovim-e2e/src/suite/recorded.neovim.test.ts#L42).\r\n\r\nI am able to run the tests nicely from a local environment after neovim starts by calling the test framework entry point from [the neovim config](https://github.com/saidelike/cursorless/blob/a9ad4879267b662cf6e45420d40f1da2eff4bf2f/cursorless.nvim/lua/cursorless/init.lua#L21). And I can read the output from the log file that is written thanks to the `NVIM_NODE_LOG_FILE` environment variable. \r\n\r\n```\r\n2024-05-14 21:16:47 INF     ✔ [[1,3],4,2]\r\n2024-05-14 21:16:47 INF     ✔ [[0,2],1]\r\n2024-05-14 21:16:47 INF     ✔ [[0,2],1,0]\r\n2024-05-14 21:16:47 INF\r\n2024-05-14 21:16:47 INF\r\n2024-05-14 21:16:47 INF   4130 passing (19s)\r\n2024-05-14 21:16:47 INF   2881 pending\r\n2024-05-14 21:16:47 INF   1 failing\r\n2024-05-14 21:16:47 INF\r\n2024-05-14 21:16:47 INF   1) recorded test cases\r\n       recorded/actions/copySecondToken:\r\n\r\n      Unexpected final state\r\n      + expected - actual\r\n\r\n       {\r\n      -  \"clipboard\": \"\"\r\n      +  \"clipboard\": \"value\"\r\n         \"documentContents\": \"\\nconst value = \\\"Hello world\\\";\\n\"\r\n         \"selections\": [\r\n           {\r\n             \"active\": {\r\n\r\n      at runTest (packages\\test-harness\\dist\\cursorless-neovim-e2e\\src\\suite\\recorded.neovim.test.cjs:28661:12)\r\n      at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\r\n```\r\n\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "We should document this (probably in `:help remote-plugin` too), I'll keep this open to track that.\r\n\r\n> Should I use one of them and just call my node exported test function from vim script? If so, how do I get the test results output?\r\n\r\nIf getting test results in a structured format like TAP or XML is important, I would use [busted](https://github.com/lunarmodules/busted).\r\n\r\nOtherwise I wouldn't use a test framework. I would just write tests in a Lua script and use `assert()`. \r\n\r\n- The script can use `os.exit()` or `:cquit` to exit with an error code.\r\n- If you run the script with `nvim -l` it can accept CLI arguments, see `:help lua-args`.\r\n- You will need to pass the location of your node-client module so that your Lua test script can start it (`jobstart()`).\r\n\r\nThat's assuming you are testing a *plugin* (Lua code that invokes RPC methods on your node-client module), so testing end-to-end is a good idea.  But f your Lua plugin code is minimal, you could skip that part and write tests directly against your node module like any other node project.\r\n\r\n> Should I use a technique similar to what node-client is doing instead, see https://github.com/neovim/node-client/tree/master/packages/integration-tests ? If so, how do I get the test results output?\r\n\r\nThe only purpose of that sub-package is to run a separate process to fully isolate the test runner from the node-client module being tested. But if you use the end-to-end approach described above, driven by Lua, then you don't need the `packages/integration-tests` structure (which is for a node-based test runner).\r\n\r\n> I've got a [neovim node plugin](https://github.com/saidelike/cursorless/tree/a9ad4879267b662cf6e45420d40f1da2eff4bf2f/packages/cursorless-neovim) that exposes a [test framework entry point](https://github.com/saidelike/cursorless/blob/a9ad4879267b662cf6e45420d40f1da2eff4bf2f/packages/test-harness/src/index.ts#L29). This function ends up calling into [mocha](https://mochajs.org/) in order to run all the [tests](https://github.com/saidelike/cursorless/blob/a9ad4879267b662cf6e45420d40f1da2eff4bf2f/packages/cursorless-neovim-e2e/src/suite/recorded.neovim.test.ts#L42).\r\n\r\nLGTM. Though `NvimPlugin` [will be deprecated](https://github.com/neovim/node-client/issues/356#issuecomment-2094840393) pretty soon. Instead you will just define handlers that are called by your Lua (or Vimscript) plugin.",
            "created_at": "2024-05-15T12:15:04Z",
            "html_url": "https://github.com/neovim/node-client/issues/360#issuecomment-2112369368",
            "id": 2112369368,
            "issue_url": "https://api.github.com/repos/neovim/node-client/issues/360",
            "node_id": "IC_kwDOAdOzk8596DLY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/node-client/issues/comments/2112369368/reactions"
            },
            "updated_at": "2024-05-15T12:15:04Z",
            "url": "https://api.github.com/repos/neovim/node-client/issues/comments/2112369368",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "NONE",
            "body": "@justinmk Thanks for all your insights, definitely helpful.\r\n\r\nI have a single exported node function `TestHarnessRun()` being called from lua to do all the tests (since mocha is invoked by node to run all the tests directly from node). I tried to make this node function `TestHarnessRun()` synchronous but it results in a dead lock where each test can't run properly. I think it is due to lua being single threaded and so an async node function can't be executed if executed from a sync lua function. So I am back to using `TestHarnessRun()` async and I can't really use a lua/vim test suite if I can't retrieve its return value. (Maybe another issue should be created to discuss this behaviour but we basically can't call an \"async node function\" from a \"sync lua function\" without a deadlock)\r\n\r\nAm I understanding it correctly that writing tests in lua with `assert()` makes sense if most of the plugin code is in lua and it only calls into the node code for certain features? In my case, most of the plugin code is in node, so using `assert()` in lua means I would basically only have ONE `assert()`. And as discussed above, another problem is I don't see how this is doable with node calling into async functions. \r\n\r\n",
            "created_at": "2024-05-15T14:19:31Z",
            "html_url": "https://github.com/neovim/node-client/issues/360#issuecomment-2112680519",
            "id": 2112680519,
            "issue_url": "https://api.github.com/repos/neovim/node-client/issues/360",
            "node_id": "IC_kwDOAdOzk8597PJH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/node-client/issues/comments/2112680519/reactions"
            },
            "updated_at": "2024-05-15T14:19:31Z",
            "url": "https://api.github.com/repos/neovim/node-client/issues/comments/2112680519",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/387346?v=4",
                "events_url": "https://api.github.com/users/saidelike/events{/privacy}",
                "followers_url": "https://api.github.com/users/saidelike/followers",
                "following_url": "https://api.github.com/users/saidelike/following{/other_user}",
                "gists_url": "https://api.github.com/users/saidelike/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/saidelike",
                "id": 387346,
                "login": "saidelike",
                "node_id": "MDQ6VXNlcjM4NzM0Ng==",
                "organizations_url": "https://api.github.com/users/saidelike/orgs",
                "received_events_url": "https://api.github.com/users/saidelike/received_events",
                "repos_url": "https://api.github.com/users/saidelike/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/saidelike/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/saidelike/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/saidelike"
            }
        },
        {
            "author_association": "NONE",
            "body": "I think the issue with running the tests synchronously is that during the execution of the node test, we exercise code that calls from node back to lua, eg to modify editors / run neovim commands. I'm guessing that the lua execution context is single-threaded, so if it is hanging waiting for the tests to finish, it's not able to respond to the requests from the node process, so node just hangs, and we effectively have a deadlock. Does that make sense?",
            "created_at": "2024-05-15T15:43:33Z",
            "html_url": "https://github.com/neovim/node-client/issues/360#issuecomment-2112893936",
            "id": 2112893936,
            "issue_url": "https://api.github.com/repos/neovim/node-client/issues/360",
            "node_id": "IC_kwDOAdOzk8598DPw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/node-client/issues/comments/2112893936/reactions"
            },
            "updated_at": "2024-05-15T15:43:33Z",
            "url": "https://api.github.com/repos/neovim/node-client/issues/comments/2112893936",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/755842?v=4",
                "events_url": "https://api.github.com/users/pokey/events{/privacy}",
                "followers_url": "https://api.github.com/users/pokey/followers",
                "following_url": "https://api.github.com/users/pokey/following{/other_user}",
                "gists_url": "https://api.github.com/users/pokey/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pokey",
                "id": 755842,
                "login": "pokey",
                "node_id": "MDQ6VXNlcjc1NTg0Mg==",
                "organizations_url": "https://api.github.com/users/pokey/orgs",
                "received_events_url": "https://api.github.com/users/pokey/received_events",
                "repos_url": "https://api.github.com/users/pokey/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pokey/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pokey/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pokey"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I'm guessing that the lua execution context is single-threaded, so if it is hanging waiting for the tests to finish, it's not able to respond to the requests from the node process, so node just hangs, and we effectively have a deadlock. Does that make sense?\r\n\r\nYes. If if it wasn't \"single threaded\", what would you expect the result to be? Doing  roundtrips in a *single request*, between processes  that are inspecting state of each process, can't have any reasonable behavior, in mutable systems. ",
            "created_at": "2024-05-15T22:31:11Z",
            "html_url": "https://github.com/neovim/node-client/issues/360#issuecomment-2113590543",
            "id": 2113590543,
            "issue_url": "https://api.github.com/repos/neovim/node-client/issues/360",
            "node_id": "IC_kwDOAdOzk859-tUP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/node-client/issues/comments/2113590543/reactions"
            },
            "updated_at": "2024-05-15T22:31:11Z",
            "url": "https://api.github.com/repos/neovim/node-client/issues/comments/2113590543",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comments": 4,
    "comments_url": "https://api.github.com/repos/neovim/node-client/issues/360/comments",
    "created_at": "2024-05-15T08:49:08Z",
    "events_url": "https://api.github.com/repos/neovim/node-client/issues/360/events",
    "html_url": "https://github.com/neovim/node-client/issues/360",
    "id": 2297254707,
    "labels": [
        {
            "color": "C5DEF5",
            "default": true,
            "description": "",
            "id": 5741349845,
            "name": "documentation",
            "node_id": "LA_kwDOAdOzk88AAAABVjYL1Q",
            "url": "https://api.github.com/repos/neovim/node-client/labels/documentation"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/node-client/issues/360/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAdOzk86I7VMz",
    "number": 360,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/node-client/issues/360/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/node-client",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/neovim/node-client/issues/360/timeline",
    "title": "docs: recommended way to test a node plugin on GitHub CI?",
    "updated_at": "2024-05-15T22:31:12Z",
    "url": "https://api.github.com/repos/neovim/node-client/issues/360",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/387346?v=4",
        "events_url": "https://api.github.com/users/saidelike/events{/privacy}",
        "followers_url": "https://api.github.com/users/saidelike/followers",
        "following_url": "https://api.github.com/users/saidelike/following{/other_user}",
        "gists_url": "https://api.github.com/users/saidelike/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/saidelike",
        "id": 387346,
        "login": "saidelike",
        "node_id": "MDQ6VXNlcjM4NzM0Ng==",
        "organizations_url": "https://api.github.com/users/saidelike/orgs",
        "received_events_url": "https://api.github.com/users/saidelike/received_events",
        "repos_url": "https://api.github.com/users/saidelike/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/saidelike/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/saidelike/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/saidelike"
    }
}