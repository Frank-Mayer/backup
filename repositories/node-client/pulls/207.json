{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/node-client/issues/207/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/node-client/pulls/207/commits"
        },
        "html": {
            "href": "https://github.com/neovim/node-client/pull/207"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/node-client/issues/207"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/node-client/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/node-client/pulls/207/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/node-client/pulls/207"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/node-client/statuses/760cc93e096ec4c721ea92979e74f1b80c337b5b"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/node-client/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/node-client/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/node-client/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/node-client/branches{/branch}",
            "clone_url": "https://github.com/neovim/node-client.git",
            "collaborators_url": "https://api.github.com/repos/neovim/node-client/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/node-client/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/node-client/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/node-client/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/node-client/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/node-client/contributors",
            "created_at": "2015-02-11T14:23:57Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/node-client/deployments",
            "description": "Nvim Node.js client and plugin host",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/node-client/downloads",
            "events_url": "https://api.github.com/repos/neovim/node-client/events",
            "fork": false,
            "forks": 46,
            "forks_count": 46,
            "forks_url": "https://api.github.com/repos/neovim/node-client/forks",
            "full_name": "neovim/node-client",
            "git_commits_url": "https://api.github.com/repos/neovim/node-client/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/node-client/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/node-client/git/tags{/sha}",
            "git_url": "git://github.com/neovim/node-client.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": true,
            "has_projects": false,
            "has_wiki": false,
            "homepage": "https://neovim.io/node-client/",
            "hooks_url": "https://api.github.com/repos/neovim/node-client/hooks",
            "html_url": "https://github.com/neovim/node-client",
            "id": 30651283,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/node-client/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/node-client/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/node-client/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/node-client/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/node-client/labels{/name}",
            "language": "TypeScript",
            "languages_url": "https://api.github.com/repos/neovim/node-client/languages",
            "license": {
                "key": "mit",
                "name": "MIT License",
                "node_id": "MDc6TGljZW5zZTEz",
                "spdx_id": "MIT",
                "url": "https://api.github.com/licenses/mit"
            },
            "merges_url": "https://api.github.com/repos/neovim/node-client/merges",
            "milestones_url": "https://api.github.com/repos/neovim/node-client/milestones{/number}",
            "mirror_url": null,
            "name": "node-client",
            "node_id": "MDEwOlJlcG9zaXRvcnkzMDY1MTI4Mw==",
            "notifications_url": "https://api.github.com/repos/neovim/node-client/notifications{?since,all,participating}",
            "open_issues": 12,
            "open_issues_count": 12,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/node-client/pulls{/number}",
            "pushed_at": "2024-02-12T06:52:44Z",
            "releases_url": "https://api.github.com/repos/neovim/node-client/releases{/id}",
            "size": 2972,
            "ssh_url": "git@github.com:neovim/node-client.git",
            "stargazers_count": 445,
            "stargazers_url": "https://api.github.com/repos/neovim/node-client/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/node-client/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/node-client/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/node-client/subscription",
            "svn_url": "https://github.com/neovim/node-client",
            "tags_url": "https://api.github.com/repos/neovim/node-client/tags",
            "teams_url": "https://api.github.com/repos/neovim/node-client/teams",
            "topics": [
                "neovim",
                "nodejs",
                "nvim",
                "rpc",
                "typescript",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/node-client/git/trees{/sha}",
            "updated_at": "2024-02-05T10:02:49Z",
            "url": "https://api.github.com/repos/neovim/node-client",
            "visibility": "public",
            "watchers": 445,
            "watchers_count": 445,
            "web_commit_signoff_required": false
        },
        "sha": "ebb96730744bb91ca06e5d33753d39071ee75561",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "closes #146 \r\n\r\nI'm still working on it.\r\n\r\nThe version comparison is currently just a placeholder for the correct implementation.\r\n\r\nI would appreciate any feedback to know if I'm on the right path here. @justinmk\r\n",
    "closed_at": "2023-07-17T22:23:49Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/node-client/pull/207#discussion_r1264587606"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/node-client/pulls/207"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/node-client/pulls/comments/1264587606"
                }
            },
            "author_association": "MEMBER",
            "body": "`nvim --api-info` returns a msgpack object that includes a `version` dict. That avoids needing to parse `nvim --version` though I suppose that output isn't likely to change.",
            "commit_id": "760cc93e096ec4c721ea92979e74f1b80c337b5b",
            "created_at": "2023-07-16T00:26:31Z",
            "diff_hunk": "@@ -0,0 +1,133 @@\n+import { execSync } from 'child_process';\n+import { join, delimiter } from 'path';\n+import { constants, existsSync, accessSync } from 'fs';\n+\n+export interface NvimVersion {\n+  nvimVersion: string;\n+  path: string;\n+  buildType: string;\n+  luaJitVersion: string;\n+}\n+\n+const versionRegex = /^(\\d+)\\.(\\d+)\\.(\\d+)(?:-(.+))?$/;\n+const nvimVersionRegex = /^NVIM\\s+v(.+)$/m;\n+const buildTypeRegex = /^Build\\s+type:\\s+(.+)$/m;\n+const luaJitVersionRegex = /^LuaJIT\\s+(.+)$/m;\n+const windows = process.platform === 'win32';\n+\n+function parseVersion(version: string): (number | string)[] | null {\n+  const match = version.match(versionRegex);\n+  if (match === null) {\n+    return null;\n+  }\n+\n+  const [, major, minor, patch, prerelease] = match;\n+  const majorNumber = Number(major);\n+  if (Number.isNaN(majorNumber)) {\n+    throw new Error('Invalid version format: major is not a number');\n+  }\n+\n+  const minorNumber = Number(minor);\n+  if (Number.isNaN(minorNumber)) {\n+    throw new Error('Invalid version format: minor is not a number');\n+  }\n+\n+  const patchNumber = Number(patch);\n+  if (Number.isNaN(patchNumber)) {\n+    throw new Error('Invalid version format: patch is not a number');\n+  }\n+\n+  const versionParts: Array<number | string> = [\n+    majorNumber,\n+    minorNumber,\n+    patchNumber,\n+  ];\n+  if (prerelease !== undefined) {\n+    versionParts.push(prerelease);\n+  } else {\n+    versionParts.push('zzz');\n+  }\n+  return versionParts;\n+}\n+\n+/**\n+ * Compare two versions.\n+ * @param a - The first version to compare.\n+ * @param b - The second version to compare.\n+ * @returns -1 if a < b, 0 if a == b, 1 if a > b.\n+ * @throws {Error} If the versions are not valid.\n+ *\n+ * Format could be:\n+ * - 0.9.1\n+ * - 0.10.0-dev-658+g06694203e-Homebrew\n+ */\n+export function compareVersions(a: string, b: string): number {\n+  const versionA = parseVersion(a);\n+  const versionB = parseVersion(b);\n+  const length = Math.min(versionA.length, versionB.length);\n+\n+  for (let i = 0; i < length; i = i + 1) {\n+    const partA = versionA[i];\n+    const partB = versionB[i];\n+    if (partA < partB) {\n+      return -1;\n+    }\n+    if (partA > partB) {\n+      return 1;\n+    }\n+  }\n+\n+  if (versionB.length > versionA.length) {\n+    return -1;\n+  }\n+\n+  return 0;\n+}\n+\n+/**\n+ * Get the highest matching nvim version from the environment.\n+ */\n+export function getNvimFromEnv(minVersion?: string): NvimVersion | null {\n+  const paths = process.env.PATH.split(delimiter);\n+  const pathLength = paths.length;\n+  let highestMatchingVersion: NvimVersion | null = null;\n+  for (let i = 0; i !== pathLength; i = i + 1) {\n+    const possibleNvimPath = join(paths[i], windows ? 'nvim.exe' : 'nvim');\n+    if (existsSync(possibleNvimPath)) {\n+      try {\n+        accessSync(possibleNvimPath, constants.X_OK);\n+        const nvimVersionFull = execSync(\n+          `${possibleNvimPath} --version`\n+        ).toString();",
            "html_url": "https://github.com/neovim/node-client/pull/207#discussion_r1264587606",
            "id": 1264587606,
            "line": 161,
            "node_id": "PRRC_kwDOAdOzk85LYBNW",
            "original_commit_id": "7d26a233752e31b929c4af3a3a0eb2223df5ee52",
            "original_line": 101,
            "original_position": 101,
            "original_start_line": null,
            "path": "packages/neovim/src/utils/getNvimFromEnv.ts",
            "position": 161,
            "pull_request_review_id": 1531642310,
            "pull_request_url": "https://api.github.com/repos/neovim/node-client/pulls/207",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/node-client/pulls/comments/1264587606/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-16T00:26:31Z",
            "url": "https://api.github.com/repos/neovim/node-client/pulls/comments/1264587606",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/node-client/pull/207#discussion_r1264587700"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/node-client/pulls/207"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/node-client/pulls/comments/1264587700"
                }
            },
            "author_association": "MEMBER",
            "body": "The \"find the highest\" version logic seems nice, but it might be worth dropping it to simplify the code. Instead, if the first `nvim` found doesn't meet the minimum version, the caller can simply report this to the user (mentioning the found `nvim` path and version).\r\n\r\nfwiw, Nvim 0.9+ includes `vim.version.parse()`. Could eventually use that to avoid rolling our own semver parsing here.",
            "commit_id": "760cc93e096ec4c721ea92979e74f1b80c337b5b",
            "created_at": "2023-07-16T00:28:33Z",
            "diff_hunk": "@@ -0,0 +1,133 @@\n+import { execSync } from 'child_process';\n+import { join, delimiter } from 'path';\n+import { constants, existsSync, accessSync } from 'fs';\n+\n+export interface NvimVersion {\n+  nvimVersion: string;\n+  path: string;\n+  buildType: string;\n+  luaJitVersion: string;\n+}\n+\n+const versionRegex = /^(\\d+)\\.(\\d+)\\.(\\d+)(?:-(.+))?$/;\n+const nvimVersionRegex = /^NVIM\\s+v(.+)$/m;\n+const buildTypeRegex = /^Build\\s+type:\\s+(.+)$/m;\n+const luaJitVersionRegex = /^LuaJIT\\s+(.+)$/m;\n+const windows = process.platform === 'win32';\n+\n+function parseVersion(version: string): (number | string)[] | null {\n+  const match = version.match(versionRegex);\n+  if (match === null) {\n+    return null;\n+  }\n+\n+  const [, major, minor, patch, prerelease] = match;\n+  const majorNumber = Number(major);\n+  if (Number.isNaN(majorNumber)) {\n+    throw new Error('Invalid version format: major is not a number');\n+  }\n+\n+  const minorNumber = Number(minor);\n+  if (Number.isNaN(minorNumber)) {\n+    throw new Error('Invalid version format: minor is not a number');\n+  }\n+\n+  const patchNumber = Number(patch);\n+  if (Number.isNaN(patchNumber)) {\n+    throw new Error('Invalid version format: patch is not a number');\n+  }\n+\n+  const versionParts: Array<number | string> = [\n+    majorNumber,\n+    minorNumber,\n+    patchNumber,\n+  ];\n+  if (prerelease !== undefined) {\n+    versionParts.push(prerelease);\n+  } else {\n+    versionParts.push('zzz');\n+  }\n+  return versionParts;\n+}\n+\n+/**\n+ * Compare two versions.\n+ * @param a - The first version to compare.\n+ * @param b - The second version to compare.\n+ * @returns -1 if a < b, 0 if a == b, 1 if a > b.\n+ * @throws {Error} If the versions are not valid.\n+ *\n+ * Format could be:\n+ * - 0.9.1\n+ * - 0.10.0-dev-658+g06694203e-Homebrew\n+ */\n+export function compareVersions(a: string, b: string): number {\n+  const versionA = parseVersion(a);\n+  const versionB = parseVersion(b);\n+  const length = Math.min(versionA.length, versionB.length);\n+\n+  for (let i = 0; i < length; i = i + 1) {\n+    const partA = versionA[i];\n+    const partB = versionB[i];\n+    if (partA < partB) {\n+      return -1;\n+    }\n+    if (partA > partB) {\n+      return 1;\n+    }\n+  }\n+\n+  if (versionB.length > versionA.length) {\n+    return -1;\n+  }\n+\n+  return 0;\n+}\n+\n+/**\n+ * Get the highest matching nvim version from the environment.",
            "html_url": "https://github.com/neovim/node-client/pull/207#discussion_r1264587700",
            "id": 1264587700,
            "line": 144,
            "node_id": "PRRC_kwDOAdOzk85LYBO0",
            "original_commit_id": "7d26a233752e31b929c4af3a3a0eb2223df5ee52",
            "original_line": 88,
            "original_position": 88,
            "original_start_line": null,
            "path": "packages/neovim/src/utils/getNvimFromEnv.ts",
            "position": 144,
            "pull_request_review_id": 1531642418,
            "pull_request_url": "https://api.github.com/repos/neovim/node-client/pulls/207",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/node-client/pulls/comments/1264587700/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-03T22:03:38Z",
            "url": "https://api.github.com/repos/neovim/node-client/pulls/comments/1264587700",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/node-client/pull/207#discussion_r1264588113"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/node-client/pulls/207"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/node-client/pulls/comments/1264588113"
                }
            },
            "author_association": "MEMBER",
            "body": "Should at least log something (mentioning the path that failed, if any)?\r\n\r\nOr instead: collect exceptions in a list. And log a single \"batched\" message after leaving the for-loop.",
            "commit_id": "760cc93e096ec4c721ea92979e74f1b80c337b5b",
            "created_at": "2023-07-16T00:34:48Z",
            "diff_hunk": "@@ -0,0 +1,133 @@\n+import { execSync } from 'child_process';\n+import { join, delimiter } from 'path';\n+import { constants, existsSync, accessSync } from 'fs';\n+\n+export interface NvimVersion {\n+  nvimVersion: string;\n+  path: string;\n+  buildType: string;\n+  luaJitVersion: string;\n+}\n+\n+const versionRegex = /^(\\d+)\\.(\\d+)\\.(\\d+)(?:-(.+))?$/;\n+const nvimVersionRegex = /^NVIM\\s+v(.+)$/m;\n+const buildTypeRegex = /^Build\\s+type:\\s+(.+)$/m;\n+const luaJitVersionRegex = /^LuaJIT\\s+(.+)$/m;\n+const windows = process.platform === 'win32';\n+\n+function parseVersion(version: string): (number | string)[] | null {\n+  const match = version.match(versionRegex);\n+  if (match === null) {\n+    return null;\n+  }\n+\n+  const [, major, minor, patch, prerelease] = match;\n+  const majorNumber = Number(major);\n+  if (Number.isNaN(majorNumber)) {\n+    throw new Error('Invalid version format: major is not a number');\n+  }\n+\n+  const minorNumber = Number(minor);\n+  if (Number.isNaN(minorNumber)) {\n+    throw new Error('Invalid version format: minor is not a number');\n+  }\n+\n+  const patchNumber = Number(patch);\n+  if (Number.isNaN(patchNumber)) {\n+    throw new Error('Invalid version format: patch is not a number');\n+  }\n+\n+  const versionParts: Array<number | string> = [\n+    majorNumber,\n+    minorNumber,\n+    patchNumber,\n+  ];\n+  if (prerelease !== undefined) {\n+    versionParts.push(prerelease);\n+  } else {\n+    versionParts.push('zzz');\n+  }\n+  return versionParts;\n+}\n+\n+/**\n+ * Compare two versions.\n+ * @param a - The first version to compare.\n+ * @param b - The second version to compare.\n+ * @returns -1 if a < b, 0 if a == b, 1 if a > b.\n+ * @throws {Error} If the versions are not valid.\n+ *\n+ * Format could be:\n+ * - 0.9.1\n+ * - 0.10.0-dev-658+g06694203e-Homebrew\n+ */\n+export function compareVersions(a: string, b: string): number {\n+  const versionA = parseVersion(a);\n+  const versionB = parseVersion(b);\n+  const length = Math.min(versionA.length, versionB.length);\n+\n+  for (let i = 0; i < length; i = i + 1) {\n+    const partA = versionA[i];\n+    const partB = versionB[i];\n+    if (partA < partB) {\n+      return -1;\n+    }\n+    if (partA > partB) {\n+      return 1;\n+    }\n+  }\n+\n+  if (versionB.length > versionA.length) {\n+    return -1;\n+  }\n+\n+  return 0;\n+}\n+\n+/**\n+ * Get the highest matching nvim version from the environment.\n+ */\n+export function getNvimFromEnv(minVersion?: string): NvimVersion | null {\n+  const paths = process.env.PATH.split(delimiter);\n+  const pathLength = paths.length;\n+  let highestMatchingVersion: NvimVersion | null = null;\n+  for (let i = 0; i !== pathLength; i = i + 1) {\n+    const possibleNvimPath = join(paths[i], windows ? 'nvim.exe' : 'nvim');\n+    if (existsSync(possibleNvimPath)) {\n+      try {\n+        accessSync(possibleNvimPath, constants.X_OK);\n+        const nvimVersionFull = execSync(\n+          `${possibleNvimPath} --version`\n+        ).toString();\n+        const nvimVersionMatch = nvimVersionRegex.exec(nvimVersionFull);\n+        const buildTypeMatch = buildTypeRegex.exec(nvimVersionFull);\n+        const luaJitVersionMatch = luaJitVersionRegex.exec(nvimVersionFull);\n+        if (\n+          // if all the regexes matched\n+          nvimVersionMatch &&\n+          buildTypeMatch &&\n+          luaJitVersionMatch &&\n+          // and the version is greater than the minimum version or there is no minimum version\n+          (minVersion === undefined ||\n+            compareVersions(minVersion, nvimVersionMatch[1]) !== 1) &&\n+          // and the version is greater than the current highest version or there is no current highest version\n+          (highestMatchingVersion === null ||\n+            compareVersions(\n+              highestMatchingVersion.nvimVersion,\n+              nvimVersionMatch[1]\n+            ) === -1)\n+        ) {\n+          highestMatchingVersion = {\n+            nvimVersion: nvimVersionMatch[1],\n+            path: possibleNvimPath,\n+            buildType: buildTypeMatch[1],\n+            luaJitVersion: luaJitVersionMatch[1],\n+          };\n+        }\n+      } catch {\n+        // ignore",
            "html_url": "https://github.com/neovim/node-client/pull/207#discussion_r1264588113",
            "id": 1264588113,
            "line": null,
            "node_id": "PRRC_kwDOAdOzk85LYBVR",
            "original_commit_id": "7d26a233752e31b929c4af3a3a0eb2223df5ee52",
            "original_line": 128,
            "original_position": 128,
            "original_start_line": null,
            "path": "packages/neovim/src/utils/getNvimFromEnv.ts",
            "position": null,
            "pull_request_review_id": 1531642756,
            "pull_request_url": "https://api.github.com/repos/neovim/node-client/pulls/207",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/node-client/pulls/comments/1264588113/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-16T00:36:11Z",
            "url": "https://api.github.com/repos/neovim/node-client/pulls/comments/1264588113",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/node-client/pull/207#discussion_r1264588718"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/node-client/pulls/207"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/node-client/pulls/comments/1264588718"
                }
            },
            "author_association": "MEMBER",
            "body": "Would be useful to get all results, not only the best result. Let's return a list of all found items, sorted by highest version.\r\n\r\n- callers can do `getNvimFromEnv()[0]` if they only care about the best result\r\n- if all nvims are too old, the caller can show the user a message saying the found locations and their versions\r\n\r\nMinor disadvantage: the caller needs to do its own \"version check\".\r\n\r\n\r\n```suggestion\r\nexport function getNvimFromEnv(minVersion?: string): NvimVersion[] | null {\r\n```",
            "commit_id": "760cc93e096ec4c721ea92979e74f1b80c337b5b",
            "created_at": "2023-07-16T00:42:56Z",
            "diff_hunk": "@@ -0,0 +1,133 @@\n+import { execSync } from 'child_process';\n+import { join, delimiter } from 'path';\n+import { constants, existsSync, accessSync } from 'fs';\n+\n+export interface NvimVersion {\n+  nvimVersion: string;\n+  path: string;\n+  buildType: string;\n+  luaJitVersion: string;\n+}\n+\n+const versionRegex = /^(\\d+)\\.(\\d+)\\.(\\d+)(?:-(.+))?$/;\n+const nvimVersionRegex = /^NVIM\\s+v(.+)$/m;\n+const buildTypeRegex = /^Build\\s+type:\\s+(.+)$/m;\n+const luaJitVersionRegex = /^LuaJIT\\s+(.+)$/m;\n+const windows = process.platform === 'win32';\n+\n+function parseVersion(version: string): (number | string)[] | null {\n+  const match = version.match(versionRegex);\n+  if (match === null) {\n+    return null;\n+  }\n+\n+  const [, major, minor, patch, prerelease] = match;\n+  const majorNumber = Number(major);\n+  if (Number.isNaN(majorNumber)) {\n+    throw new Error('Invalid version format: major is not a number');\n+  }\n+\n+  const minorNumber = Number(minor);\n+  if (Number.isNaN(minorNumber)) {\n+    throw new Error('Invalid version format: minor is not a number');\n+  }\n+\n+  const patchNumber = Number(patch);\n+  if (Number.isNaN(patchNumber)) {\n+    throw new Error('Invalid version format: patch is not a number');\n+  }\n+\n+  const versionParts: Array<number | string> = [\n+    majorNumber,\n+    minorNumber,\n+    patchNumber,\n+  ];\n+  if (prerelease !== undefined) {\n+    versionParts.push(prerelease);\n+  } else {\n+    versionParts.push('zzz');\n+  }\n+  return versionParts;\n+}\n+\n+/**\n+ * Compare two versions.\n+ * @param a - The first version to compare.\n+ * @param b - The second version to compare.\n+ * @returns -1 if a < b, 0 if a == b, 1 if a > b.\n+ * @throws {Error} If the versions are not valid.\n+ *\n+ * Format could be:\n+ * - 0.9.1\n+ * - 0.10.0-dev-658+g06694203e-Homebrew\n+ */\n+export function compareVersions(a: string, b: string): number {\n+  const versionA = parseVersion(a);\n+  const versionB = parseVersion(b);\n+  const length = Math.min(versionA.length, versionB.length);\n+\n+  for (let i = 0; i < length; i = i + 1) {\n+    const partA = versionA[i];\n+    const partB = versionB[i];\n+    if (partA < partB) {\n+      return -1;\n+    }\n+    if (partA > partB) {\n+      return 1;\n+    }\n+  }\n+\n+  if (versionB.length > versionA.length) {\n+    return -1;\n+  }\n+\n+  return 0;\n+}\n+\n+/**\n+ * Get the highest matching nvim version from the environment.\n+ */\n+export function getNvimFromEnv(minVersion?: string): NvimVersion | null {",
            "html_url": "https://github.com/neovim/node-client/pull/207#discussion_r1264588718",
            "id": 1264588718,
            "line": null,
            "node_id": "PRRC_kwDOAdOzk85LYBeu",
            "original_commit_id": "7d26a233752e31b929c4af3a3a0eb2223df5ee52",
            "original_line": 90,
            "original_position": 90,
            "original_start_line": null,
            "path": "packages/neovim/src/utils/getNvimFromEnv.ts",
            "position": null,
            "pull_request_review_id": 1531643239,
            "pull_request_url": "https://api.github.com/repos/neovim/node-client/pulls/207",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/node-client/pulls/comments/1264588718/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-16T00:43:21Z",
            "url": "https://api.github.com/repos/neovim/node-client/pulls/comments/1264588718",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/node-client/pull/207#discussion_r1265953052"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/node-client/pulls/207"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/node-client/pulls/comments/1265953052"
                }
            },
            "author_association": "MEMBER",
            "body": "$PATH is likely not sufficient, especially for applications such as https://github.com/vscode-neovim/vscode-neovim which are started in GUI contexts and often (macOS, at least) the user's terminal $PATH is much different than whatever GUI apps are started with.\r\n\r\nThus we also need to search \"common locations\". These are the ones I know of:\r\n\r\n```\r\n/usr/local/bin/\r\n/usr/bin\r\n/opt/homebrew/bin\r\n/home/linuxbrew/.linuxbrew/bin\r\n$HOME/.linuxbrew/bin\r\n$HOME/bin\r\n```\r\n\r\nIronically on Windows I _think_ we can depend on $PATH. I assume that [winget](https://github.com/microsoft/winget-cli) and [scoop](https://scoop.sh/) setup $PATH, which gets broadcast to GUI programs on Windows. Else we may also need to add those locations. But that could be improved later.",
            "commit_id": "760cc93e096ec4c721ea92979e74f1b80c337b5b",
            "created_at": "2023-07-17T22:13:40Z",
            "diff_hunk": "@@ -0,0 +1,202 @@\n+import { execSync } from 'child_process';\n+import { join, delimiter } from 'path';\n+import { constants, existsSync, accessSync } from 'fs';\n+\n+export type NvimVersion = {\n+  readonly nvimVersion: string;\n+  readonly path: string;\n+  readonly buildType: string;\n+  readonly luaJitVersion: string;\n+};\n+\n+export type GetNvimFromEnvOptions = {\n+  /**\n+   * The minimum version of nvim to get. This is optional.\n+   *\n+   * - Example: `'0.5.0'`\n+   * - Note: This is inclusive.\n+   * - Note: If this is not set, then there is no minimum version.\n+   */\n+  readonly minVersion?: string;\n+  /**\n+   * The order to return the nvim versions in. This is optional.\n+   *\n+   * - `latest_nvim_first` - The latest version of nvim will be first. This is the default.\n+   *   - Example: `['0.5.0', '0.4.4', '0.4.3']`\n+   *   - Note: This will be slower than `latest_nvim_first`.\n+   * - `keep_path` - The order of the nvim versions will be the same as the order of the paths in the `PATH` environment variable.\n+   *   - Example: `['0.4.4', '0.5.0', '0.4.3']`\n+   *   - Note: This will be faster than `latest_nvim_first`.\n+   *   - this is the default.\n+   */\n+  readonly orderBy?: 'latest_nvim_first' | 'keep_path';\n+};\n+\n+export type GetNvimFromEnvError = {\n+  /** The executeable path that failed. */\n+  readonly path: string;\n+  /** The catched error */\n+  readonly exception: Readonly<Error>;\n+};\n+\n+export type GetNvimFromEnvResult = {\n+  /**\n+   * A list of nvim versions that match the minimum version.\n+   * This will be empty if no matching versions were found.\n+   * This will be sorted in the order specified by `orderBy`.\n+   */\n+  readonly matches: ReadonlyArray<NvimVersion>;\n+  /**\n+   * A list of nvim versions that do not match the minimum version.\n+   * This will be empty if all versions match the minimum version or if no minimum version was specified.\n+   * This will not be sorted (it will be in the order of the paths in the `PATH` environment variable).\n+   */\n+  readonly unmatchedVersions: ReadonlyArray<NvimVersion>;\n+  /**\n+   * A list of errors that occurred while trying to get the nvim versions.\n+   * This will be empty if no errors occurred.\n+   * This will not be sorted (it will be in the order of the paths in the `PATH` environment variable).\n+   * Unmatched versions are not treated as errors.\n+   */\n+  readonly errors: ReadonlyArray<GetNvimFromEnvError>;\n+};\n+\n+const versionRegex = /^(\\d+)\\.(\\d+)\\.(\\d+)(?:-(.+))?$/;\n+const nvimVersionRegex = /^NVIM\\s+v(.+)$/m;\n+const buildTypeRegex = /^Build\\s+type:\\s+(.+)$/m;\n+const luaJitVersionRegex = /^LuaJIT\\s+(.+)$/m;\n+const windows = process.platform === 'win32';\n+\n+export function parseVersion(version: string): (number | string)[] | null {\n+  if (typeof version !== 'string') {\n+    throw new Error('Invalid version format: not a string');\n+  }\n+\n+  const match = version.match(versionRegex);\n+  if (match === null) {\n+    return null;\n+  }\n+\n+  const [, major, minor, patch, prerelease] = match;\n+  const majorNumber = Number(major);\n+  if (Number.isNaN(majorNumber)) {\n+    throw new Error('Invalid version format: major is not a number');\n+  }\n+\n+  const minorNumber = Number(minor);\n+  if (Number.isNaN(minorNumber)) {\n+    throw new Error('Invalid version format: minor is not a number');\n+  }\n+\n+  const patchNumber = Number(patch);\n+  if (Number.isNaN(patchNumber)) {\n+    throw new Error('Invalid version format: patch is not a number');\n+  }\n+\n+  const versionParts: Array<number | string> = [\n+    majorNumber,\n+    minorNumber,\n+    patchNumber,\n+  ];\n+  if (prerelease !== undefined) {\n+    versionParts.push(prerelease);\n+  } else {\n+    versionParts.push('zzz');\n+  }\n+  return versionParts;\n+}\n+\n+/**\n+ * Compare two versions.\n+ * @param a - The first version to compare.\n+ * @param b - The second version to compare.\n+ * @returns -1 if a < b, 0 if a == b, 1 if a > b.\n+ * @throws {Error} If the versions are not valid.\n+ *\n+ * Format could be:\n+ * - 0.9.1\n+ * - 0.10.0-dev-658+g06694203e-Homebrew\n+ */\n+export function compareVersions(a: string, b: string): number {\n+  const versionA = parseVersion(a);\n+  const versionB = parseVersion(b);\n+  const length = Math.min(versionA.length, versionB.length);\n+\n+  for (let i = 0; i < length; i = i + 1) {\n+    const partA = versionA[i];\n+    const partB = versionB[i];\n+    if (partA < partB) {\n+      return -1;\n+    }\n+    if (partA > partB) {\n+      return 1;\n+    }\n+  }\n+\n+  if (versionB.length > versionA.length) {\n+    return -1;\n+  }\n+\n+  return 0;\n+}\n+\n+/**\n+ * Get the highest matching nvim version from the environment.\n+ */\n+export function getNvimFromEnv(\n+  opt: GetNvimFromEnvOptions = {}\n+): Readonly<GetNvimFromEnvResult> {\n+  const paths = process.env.PATH.split(delimiter);",
            "html_url": "https://github.com/neovim/node-client/pull/207#discussion_r1265953052",
            "id": 1265953052,
            "line": 149,
            "node_id": "PRRC_kwDOAdOzk85LdOkc",
            "original_commit_id": "760cc93e096ec4c721ea92979e74f1b80c337b5b",
            "original_line": 149,
            "original_position": 149,
            "original_start_line": null,
            "path": "packages/neovim/src/utils/getNvimFromEnv.ts",
            "position": 149,
            "pull_request_review_id": 1533780590,
            "pull_request_url": "https://api.github.com/repos/neovim/node-client/pulls/207",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/node-client/pulls/comments/1265953052/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-17T22:17:24Z",
            "url": "https://api.github.com/repos/neovim/node-client/pulls/comments/1265953052",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "`api/Buffer.test.ts` sometimes fails on macos 11 with node 14. However, I don't see any connection with my changes.",
            "created_at": "2023-07-12T22:35:27Z",
            "html_url": "https://github.com/neovim/node-client/pull/207#issuecomment-1633294141",
            "id": 1633294141,
            "issue_url": "https://api.github.com/repos/neovim/node-client/issues/207",
            "node_id": "IC_kwDOAdOzk85hWhc9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/node-client/issues/comments/1633294141/reactions"
            },
            "updated_at": "2023-07-12T22:35:27Z",
            "url": "https://api.github.com/repos/neovim/node-client/issues/comments/1633294141",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/53651857?v=4",
                "events_url": "https://api.github.com/users/Frank-Mayer/events{/privacy}",
                "followers_url": "https://api.github.com/users/Frank-Mayer/followers",
                "following_url": "https://api.github.com/users/Frank-Mayer/following{/other_user}",
                "gists_url": "https://api.github.com/users/Frank-Mayer/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Frank-Mayer",
                "id": 53651857,
                "login": "Frank-Mayer",
                "node_id": "MDQ6VXNlcjUzNjUxODU3",
                "organizations_url": "https://api.github.com/users/Frank-Mayer/orgs",
                "received_events_url": "https://api.github.com/users/Frank-Mayer/received_events",
                "repos_url": "https://api.github.com/users/Frank-Mayer/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Frank-Mayer/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Frank-Mayer/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Frank-Mayer"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Is it worth adding a dependency like [msgpackr](https://www.npmjs.com/package/msgpackr) to use the `--api-info` option instead of `--version`?\r\n\r\nWe have no control over the code in a dependency like this. This would bypass our linter rules.\r\n\r\nI could write a more lightweight version of this that only does what we need here, but I don't think this is worth the effort.",
            "created_at": "2023-07-16T12:10:09Z",
            "html_url": "https://github.com/neovim/node-client/pull/207#issuecomment-1637067789",
            "id": 1637067789,
            "issue_url": "https://api.github.com/repos/neovim/node-client/issues/207",
            "node_id": "IC_kwDOAdOzk85hk6wN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/node-client/issues/comments/1637067789/reactions"
            },
            "updated_at": "2023-07-16T12:10:09Z",
            "url": "https://api.github.com/repos/neovim/node-client/issues/comments/1637067789",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/53651857?v=4",
                "events_url": "https://api.github.com/users/Frank-Mayer/events{/privacy}",
                "followers_url": "https://api.github.com/users/Frank-Mayer/followers",
                "following_url": "https://api.github.com/users/Frank-Mayer/following{/other_user}",
                "gists_url": "https://api.github.com/users/Frank-Mayer/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Frank-Mayer",
                "id": 53651857,
                "login": "Frank-Mayer",
                "node_id": "MDQ6VXNlcjUzNjUxODU3",
                "organizations_url": "https://api.github.com/users/Frank-Mayer/orgs",
                "received_events_url": "https://api.github.com/users/Frank-Mayer/received_events",
                "repos_url": "https://api.github.com/users/Frank-Mayer/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Frank-Mayer/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Frank-Mayer/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Frank-Mayer"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Is it worth adding a dependency like [msgpackr](https://www.npmjs.com/package/msgpackr) to use the `--api-info` option instead of `--version`?\r\n\r\nNot worth adding a new dependency. But maybe (separate PR) worth replacing our old dependency (which was not particularly fast)? https://github.com/neovim/node-client/blob/c4ba03108dbf5360d17205f43f17a717de95cfa7/packages/neovim/package.json#L47",
            "created_at": "2023-07-16T13:46:57Z",
            "html_url": "https://github.com/neovim/node-client/pull/207#issuecomment-1637088933",
            "id": 1637088933,
            "issue_url": "https://api.github.com/repos/neovim/node-client/issues/207",
            "node_id": "IC_kwDOAdOzk85hk_6l",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/node-client/issues/comments/1637088933/reactions"
            },
            "updated_at": "2023-07-16T13:46:57Z",
            "url": "https://api.github.com/repos/neovim/node-client/issues/comments/1637088933",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "The currently used `msgpack` causes problems. I would add the feature using `--api-info` later.",
            "created_at": "2023-07-16T16:58:04Z",
            "html_url": "https://github.com/neovim/node-client/pull/207#issuecomment-1637138311",
            "id": 1637138311,
            "issue_url": "https://api.github.com/repos/neovim/node-client/issues/207",
            "node_id": "IC_kwDOAdOzk85hlL-H",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/node-client/issues/comments/1637138311/reactions"
            },
            "updated_at": "2023-07-16T16:58:04Z",
            "url": "https://api.github.com/repos/neovim/node-client/issues/comments/1637138311",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/53651857?v=4",
                "events_url": "https://api.github.com/users/Frank-Mayer/events{/privacy}",
                "followers_url": "https://api.github.com/users/Frank-Mayer/followers",
                "following_url": "https://api.github.com/users/Frank-Mayer/following{/other_user}",
                "gists_url": "https://api.github.com/users/Frank-Mayer/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Frank-Mayer",
                "id": 53651857,
                "login": "Frank-Mayer",
                "node_id": "MDQ6VXNlcjUzNjUxODU3",
                "organizations_url": "https://api.github.com/users/Frank-Mayer/orgs",
                "received_events_url": "https://api.github.com/users/Frank-Mayer/received_events",
                "repos_url": "https://api.github.com/users/Frank-Mayer/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Frank-Mayer/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Frank-Mayer/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Frank-Mayer"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Is there anything else you want me to change so this PR can be merged @justinmk ?",
            "created_at": "2023-07-16T16:59:52Z",
            "html_url": "https://github.com/neovim/node-client/pull/207#issuecomment-1637138653",
            "id": 1637138653,
            "issue_url": "https://api.github.com/repos/neovim/node-client/issues/207",
            "node_id": "IC_kwDOAdOzk85hlMDd",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/node-client/issues/comments/1637138653/reactions"
            },
            "updated_at": "2023-07-16T16:59:52Z",
            "url": "https://api.github.com/repos/neovim/node-client/issues/comments/1637138653",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/53651857?v=4",
                "events_url": "https://api.github.com/users/Frank-Mayer/events{/privacy}",
                "followers_url": "https://api.github.com/users/Frank-Mayer/followers",
                "following_url": "https://api.github.com/users/Frank-Mayer/following{/other_user}",
                "gists_url": "https://api.github.com/users/Frank-Mayer/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Frank-Mayer",
                "id": 53651857,
                "login": "Frank-Mayer",
                "node_id": "MDQ6VXNlcjUzNjUxODU3",
                "organizations_url": "https://api.github.com/users/Frank-Mayer/orgs",
                "received_events_url": "https://api.github.com/users/Frank-Mayer/received_events",
                "repos_url": "https://api.github.com/users/Frank-Mayer/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Frank-Mayer/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Frank-Mayer/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Frank-Mayer"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Great work, thanks!\r\n\r\nMerging, but I think the \"common locations\" will be needed for this to be maximally useful. https://github.com/neovim/node-client/issues/267",
            "created_at": "2023-07-17T22:24:56Z",
            "html_url": "https://github.com/neovim/node-client/pull/207#issuecomment-1638971024",
            "id": 1638971024,
            "issue_url": "https://api.github.com/repos/neovim/node-client/issues/207",
            "node_id": "IC_kwDOAdOzk85hsLaQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/node-client/issues/comments/1638971024/reactions"
            },
            "updated_at": "2024-02-06T16:33:12Z",
            "url": "https://api.github.com/repos/neovim/node-client/issues/comments/1638971024",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/node-client/issues/207/comments",
    "commits_url": "https://api.github.com/repos/neovim/node-client/pulls/207/commits",
    "created_at": "2023-07-11T11:34:59Z",
    "diff_url": "https://github.com/neovim/node-client/pull/207.diff",
    "draft": false,
    "head": {
        "label": "Frank-Mayer:get_nvim_from_env",
        "ref": "get_nvim_from_env",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/Frank-Mayer/node-client/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/Frank-Mayer/node-client/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/Frank-Mayer/node-client/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/Frank-Mayer/node-client/branches{/branch}",
            "clone_url": "https://github.com/Frank-Mayer/node-client.git",
            "collaborators_url": "https://api.github.com/repos/Frank-Mayer/node-client/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/Frank-Mayer/node-client/comments{/number}",
            "commits_url": "https://api.github.com/repos/Frank-Mayer/node-client/commits{/sha}",
            "compare_url": "https://api.github.com/repos/Frank-Mayer/node-client/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/Frank-Mayer/node-client/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/Frank-Mayer/node-client/contributors",
            "created_at": "2023-07-10T11:04:38Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/Frank-Mayer/node-client/deployments",
            "description": "Nvim Node.js client and plugin host",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/Frank-Mayer/node-client/downloads",
            "events_url": "https://api.github.com/repos/Frank-Mayer/node-client/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/Frank-Mayer/node-client/forks",
            "full_name": "Frank-Mayer/node-client",
            "git_commits_url": "https://api.github.com/repos/Frank-Mayer/node-client/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/Frank-Mayer/node-client/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/Frank-Mayer/node-client/git/tags{/sha}",
            "git_url": "git://github.com/Frank-Mayer/node-client.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": false,
            "homepage": "https://neovim.io/node-client/",
            "hooks_url": "https://api.github.com/repos/Frank-Mayer/node-client/hooks",
            "html_url": "https://github.com/Frank-Mayer/node-client",
            "id": 664610093,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/Frank-Mayer/node-client/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/Frank-Mayer/node-client/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/Frank-Mayer/node-client/issues{/number}",
            "keys_url": "https://api.github.com/repos/Frank-Mayer/node-client/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/Frank-Mayer/node-client/labels{/name}",
            "language": "TypeScript",
            "languages_url": "https://api.github.com/repos/Frank-Mayer/node-client/languages",
            "license": {
                "key": "mit",
                "name": "MIT License",
                "node_id": "MDc6TGljZW5zZTEz",
                "spdx_id": "MIT",
                "url": "https://api.github.com/licenses/mit"
            },
            "merges_url": "https://api.github.com/repos/Frank-Mayer/node-client/merges",
            "milestones_url": "https://api.github.com/repos/Frank-Mayer/node-client/milestones{/number}",
            "mirror_url": null,
            "name": "node-client",
            "node_id": "R_kgDOJ50lLQ",
            "notifications_url": "https://api.github.com/repos/Frank-Mayer/node-client/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/53651857?v=4",
                "events_url": "https://api.github.com/users/Frank-Mayer/events{/privacy}",
                "followers_url": "https://api.github.com/users/Frank-Mayer/followers",
                "following_url": "https://api.github.com/users/Frank-Mayer/following{/other_user}",
                "gists_url": "https://api.github.com/users/Frank-Mayer/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Frank-Mayer",
                "id": 53651857,
                "login": "Frank-Mayer",
                "node_id": "MDQ6VXNlcjUzNjUxODU3",
                "organizations_url": "https://api.github.com/users/Frank-Mayer/orgs",
                "received_events_url": "https://api.github.com/users/Frank-Mayer/received_events",
                "repos_url": "https://api.github.com/users/Frank-Mayer/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Frank-Mayer/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Frank-Mayer/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Frank-Mayer"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/Frank-Mayer/node-client/pulls{/number}",
            "pushed_at": "2023-07-17T21:26:45Z",
            "releases_url": "https://api.github.com/repos/Frank-Mayer/node-client/releases{/id}",
            "size": 2091,
            "ssh_url": "git@github.com:Frank-Mayer/node-client.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/Frank-Mayer/node-client/stargazers",
            "statuses_url": "https://api.github.com/repos/Frank-Mayer/node-client/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/Frank-Mayer/node-client/subscribers",
            "subscription_url": "https://api.github.com/repos/Frank-Mayer/node-client/subscription",
            "svn_url": "https://github.com/Frank-Mayer/node-client",
            "tags_url": "https://api.github.com/repos/Frank-Mayer/node-client/tags",
            "teams_url": "https://api.github.com/repos/Frank-Mayer/node-client/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/Frank-Mayer/node-client/git/trees{/sha}",
            "updated_at": "2023-07-11T08:56:41Z",
            "url": "https://api.github.com/repos/Frank-Mayer/node-client",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "760cc93e096ec4c721ea92979e74f1b80c337b5b",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/53651857?v=4",
            "events_url": "https://api.github.com/users/Frank-Mayer/events{/privacy}",
            "followers_url": "https://api.github.com/users/Frank-Mayer/followers",
            "following_url": "https://api.github.com/users/Frank-Mayer/following{/other_user}",
            "gists_url": "https://api.github.com/users/Frank-Mayer/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/Frank-Mayer",
            "id": 53651857,
            "login": "Frank-Mayer",
            "node_id": "MDQ6VXNlcjUzNjUxODU3",
            "organizations_url": "https://api.github.com/users/Frank-Mayer/orgs",
            "received_events_url": "https://api.github.com/users/Frank-Mayer/received_events",
            "repos_url": "https://api.github.com/users/Frank-Mayer/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/Frank-Mayer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Frank-Mayer/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/Frank-Mayer"
        }
    },
    "html_url": "https://github.com/neovim/node-client/pull/207",
    "id": 1429279270,
    "issue_url": "https://api.github.com/repos/neovim/node-client/issues/207",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "b5456fc9a6fb3c243605f5e344420fc6aa8c54a9",
    "merged_at": "2023-07-17T22:23:49Z",
    "milestone": null,
    "node_id": "PR_kwDOAdOzk85VMRIm",
    "number": 207,
    "patch_url": "https://github.com/neovim/node-client/pull/207.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/node-client/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/node-client/pulls/207/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/node-client/statuses/760cc93e096ec4c721ea92979e74f1b80c337b5b",
    "title": "nvim version from env",
    "updated_at": "2024-02-06T16:33:12Z",
    "url": "https://api.github.com/repos/neovim/node-client/pulls/207",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/53651857?v=4",
        "events_url": "https://api.github.com/users/Frank-Mayer/events{/privacy}",
        "followers_url": "https://api.github.com/users/Frank-Mayer/followers",
        "following_url": "https://api.github.com/users/Frank-Mayer/following{/other_user}",
        "gists_url": "https://api.github.com/users/Frank-Mayer/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/Frank-Mayer",
        "id": 53651857,
        "login": "Frank-Mayer",
        "node_id": "MDQ6VXNlcjUzNjUxODU3",
        "organizations_url": "https://api.github.com/users/Frank-Mayer/orgs",
        "received_events_url": "https://api.github.com/users/Frank-Mayer/received_events",
        "repos_url": "https://api.github.com/users/Frank-Mayer/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/Frank-Mayer/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Frank-Mayer/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/Frank-Mayer"
    }
}