{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\nStopping an LSP client does not clear the diagnostics for unattached buffers. \n\n### Steps to reproduce using \"nvim -u minimal_init.lua\"\n\n1. Create the file structure with the following files\r\n```\r\n./\r\n  minimal_init.lua\r\n  lsp_test/\r\n    bad_lua1.lua\r\n    bad_lua2.lua\r\n    .luarc.json\r\n```\r\n\r\nminimal_init.lua\r\n```lua\r\nlocal cmd = { \"lua-language-server\" }\r\n\r\nlocal root_markers = { \".luarc.json\" }\r\n\r\nlocal settings = vim.empty_dict()\r\n\r\nvim.api.nvim_create_autocmd(\"FileType\", {\r\n\tpattern = \"lua\",\r\n\tcallback = function(args)\r\n\t\tlocal match = vim.fs.find(root_markers, { path = args.file, upward = true })[1]\r\n\t\tlocal root_dir = match and vim.fn.fnamemodify(match, \":p:h\") or nil\r\n\t\tvim.lsp.start({\r\n\t\t\tname = \"lua_ls\",\r\n\t\t\tcmd = cmd,\r\n\t\t\troot_dir = root_dir,\r\n\t\t\tsettings = settings,\r\n\t\t})\r\n\t\tvim.notify(\"Lsp root_dir: \" .. root_dir)\r\n\tend,\r\n})\r\n\r\n--Notify when Lsp is attached\r\nvim.api.nvim_create_autocmd(\"LspAttach\", {\r\n\tgroup = vim.api.nvim_create_augroup(\"lsp_attach\", { clear = true }),\r\n\tdesc = \"lsp on_attach\",\r\n\tcallback = function(event)\r\n\t\tvim.notify(\"Attached Lsp client \" .. event.data.client_id)\r\n\tend,\r\n})\r\n\r\nvim.api.nvim_create_user_command(\"Test\", function(_)\r\n\tvim.diagnostic.setqflist()\r\nend, {\r\n\tdesc = \"Set qf list with diagnostics\",\r\n})\r\n\r\nvim.api.nvim_create_user_command(\"LspStop\", function(_)\r\n\tfor _, client in ipairs(vim.lsp.get_clients()) do\r\n\t\tclient.stop()\r\n\tend\r\nend, {\r\n\tdesc = \"Stops all lsp clients\",\r\n})\r\n\r\nvim.api.nvim_create_user_command(\"LspStop\", function(_)\r\n\tfor _, client in ipairs(vim.lsp.get_clients()) do\r\n\t\tclient.stop()\r\n\tend\r\nend, {\r\n\tdesc = \"Stops all lsp clients\",\r\n})\r\n\r\nvim.api.nvim_create_user_command(\"LspStart\", function(_)\r\n\tlocal current_buf_file_name = vim.api.nvim_buf_get_name(0)\r\n\r\n\tlocal match = vim.fs.find(root_markers, { path = current_buf_file_name, upward = true })[1]\r\n\tlocal root_dir = match and vim.fn.fnamemodify(match, \":p:h\") or nil\r\n\tvim.lsp.start({\r\n\t\tname = \"lua_ls\",\r\n\t\tcmd = cmd,\r\n\t\troot_dir = root_dir,\r\n\t\tsettings = settings,\r\n\t})\r\n\tvim.notify(\"Lsp lua_ls started at root_dir: \" .. root_dir)\r\nend, {\r\n\tdesc = \"Start lua_ls lsp client\",\r\n})\r\n```\r\n\r\nbad_lua1.lua\r\n```lua\r\n---@type string\r\nlocal a = 5\r\n```\r\n\r\nbad_lua2.lua\r\n```lua\r\n---@type integer\r\nlocal b = \"definitely an integer\" \r\n```\r\n\r\n.luarc.json\r\n```json\r\n{\r\n  \"$schema\": \"https://raw.githubusercontent.com/sumneko/vscode-lua/master/setting/schema.json\",\r\n  \"diagnostics\": {\r\n    \"groupFileStatus\": {\r\n      \"type-check\": \"Any\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n2. From the directory with the minimal_init.lua file, run `nvim ./lsp_test -u ./minimal_init.lua`.\r\n3. Using netrw, open file `bad_lua1.lua`.\r\n4. Wait for message notification that the lua language server started.\r\n5. Run command `:Test` to open quickfix list with the lsp diagnostics. \r\n6. Visually verify that quick fix list has diagnostics for both the file `bad_lua1.lua` and `bad_lua2.lua`.\r\n7. Run command `:LspStop`.\r\n8. Run command `:Test` to open quickfix list with the new list of lsp diagnostics. \r\n9. Verify that only diagnostics for `bad_lua2.lua` remain in the quick fix list.\n\n### Expected behavior\n\nOn the final step, the quickfix list should be empty instead of listing diagnostics for the file `bad_lua2.lua`.\n\n### Neovim version (nvim -v)\n\nv0.11.0-dev\n\n### Language server name/version\n\n3.7.4\n\n### Operating system/version\n\nUbuntu 22.04.2 LTS\n\n### Log file\n\n_No response_",
    "closed_at": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/29048/comments",
    "created_at": "2024-05-27T19:27:19Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/29048/events",
    "html_url": "https://github.com/neovim/neovim/issues/29048",
    "id": 2319682060,
    "labels": [
        {
            "color": "f9d0c4",
            "default": true,
            "description": "issues reporting wrong behavior",
            "id": 77997474,
            "name": "bug",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3NA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/29048/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6KQ4oM",
    "number": 29048,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/29048/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/29048/timeline",
    "title": "LSP diagnostics not cleared on client stop for unattached buffers",
    "updated_at": "2024-05-27T19:27:30Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/29048",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/51029315?v=4",
        "events_url": "https://api.github.com/users/crwebb85/events{/privacy}",
        "followers_url": "https://api.github.com/users/crwebb85/followers",
        "following_url": "https://api.github.com/users/crwebb85/following{/other_user}",
        "gists_url": "https://api.github.com/users/crwebb85/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/crwebb85",
        "id": 51029315,
        "login": "crwebb85",
        "node_id": "MDQ6VXNlcjUxMDI5MzE1",
        "organizations_url": "https://api.github.com/users/crwebb85/orgs",
        "received_events_url": "https://api.github.com/users/crwebb85/received_events",
        "repos_url": "https://api.github.com/users/crwebb85/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/crwebb85/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/crwebb85/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/crwebb85"
    }
}