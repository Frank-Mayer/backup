{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "Half of `lua.txt` is manually maintained, and half of it is generated via doxygen. More modules should be generated with the source docs moving to the implementation.\r\n\r\nThis will further the goal of #329\r\n\r\n### Files to target:\r\n- `_meta.lua`\r\n- `src/nvim/lua/*.lua` (`vim.diff`, `vim.mpack`, etc)\r\n\r\n### Problems to solve\r\n\r\n#### Support Lua-C functions\r\n\r\ne.g. `nlua_xdl_diff` maps to `vim.diff`, however there is currently no (easy) way give this information to doxygen.\r\n\r\nWe can implement doxygen filter which renames the function. e.g. `int nlua_xdl_diff(lua_State *lstate)` -> `vim.diff(a, b, opts)`. This will be very similar to what `lua2dox.lua` does currently.\r\n\r\n#### Support other things than functions\r\n\r\nlua2dox currently only supports documenting functions. We can add support so it can document any lua object for things like `vim.bo`, `vim.g`, `vim.wo`, etc.",
    "closed_at": "2023-07-31T08:43:30Z",
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Do we need to go through doxygen? It starts sounding like our own custom translator (that only supports the features we need, not all of doxygen) would be the simpler and more maintainable option.",
            "created_at": "2022-10-10T11:52:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/20571#issuecomment-1273199971",
            "id": 1273199971,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20571",
            "node_id": "IC_kwDOAPphoM5L431j",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1273199971/reactions"
            },
            "updated_at": "2022-10-10T11:52:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1273199971",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Either that or switch to something else.\r\n\r\nOne of the things good about doxygen is that it parses the comments pretty well into xml, which is most of the heavy lifting of `gen_vimdoc.py`.",
            "created_at": "2022-10-10T11:56:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/20571#issuecomment-1273205061",
            "id": 1273205061,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20571",
            "node_id": "IC_kwDOAPphoM5L45FF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1273205061/reactions"
            },
            "updated_at": "2022-10-10T11:56:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1273205061",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I can't find any standard comment parser which would be a good alternative to doxygen. So if we want to use something else, the only Idea I have would be to create an emmy TS parser which can be injected into comments of any language. This would be a fair amount of work but would give us absolute flexibility.",
            "created_at": "2022-10-10T12:16:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/20571#issuecomment-1273226354",
            "id": 1273226354,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20571",
            "node_id": "IC_kwDOAPphoM5L4-Ry",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1273226354/reactions"
            },
            "updated_at": "2022-10-10T12:16:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1273226354",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> an emmy TS parser which can be injected into comments of any language.\r\n\r\nThat sounds indeed like a worthwhile and very useful alternative. Note that there is already a [tree-sitter-comment parser](https://github.com/stsewd/tree-sitter-comment) which nvim-treesitter uses for injections and could be extended in this direction.\r\n\r\nSpecifically for Lua, there's of course https://github.com/tjdevries/tree-sitter-lua, which has an explicit focus on docgen.\r\n\r\n(Not saying that this is the direction we should be pursuing, and now, mind you!)",
            "created_at": "2022-10-10T12:28:00Z",
            "html_url": "https://github.com/neovim/neovim/issues/20571#issuecomment-1273239729",
            "id": 1273239729,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20571",
            "node_id": "IC_kwDOAPphoM5L5Bix",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1273239729/reactions"
            },
            "updated_at": "2022-10-10T12:29:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1273239729",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "We could create `runtime/lua/types.lua`. This file would never actually be `required`. We could even add an `error` on top to be sure.\r\n\r\nIn that file, we can then add the manual docs from `lua.txt` with the correct functions.\r\n\r\nDoing it this way, we have:\r\n- a good way to document those functions\r\n- `lua-language-server` can pick up those annotations and provide completions\r\n\r\nWould definitely make my work with [lua-dev.nvim](https://github.com/folke/lua-dev.nvim) easier.\r\n\r\nRight now, I'm parsing the `doc/lua.txt` files and then regenerate the lua source automatcially. (with a lot of limitations)\r\n\r\nSee the generated file below. Could be a good starting point, since it literally includes the docs from `doc/lua.txt`.\r\n\r\nThese are only the functions that don't actually exist in the lua code, so the manual ones from `doc/lua.txt`\r\n\r\n<details>\r\n<summary>types/lua.lua</summary>\r\n\r\n```lua\r\n---@meta\r\n\r\n--# selene: allow(unused_variable)\r\n---@diagnostic disable: unused-local\r\n\r\n-- Execute Vim script commands.\r\n--\r\n-- Note that `vim.cmd` can be indexed with a command name to return a\r\n-- callable function to the command.\r\n--\r\n-- Example:\r\n-- ```lua\r\n--\r\n--    vim.cmd('echo 42')\r\n--    vim.cmd([[\r\n--      augroup My_group\r\n--        autocmd!\r\n--        autocmd FileType c setlocal cindent\r\n--      augroup END\r\n--    ]])\r\n--\r\n--    -- Ex command :echo \"foo\"\r\n--    -- Note string literals need to be double quoted.\r\n--    vim.cmd('echo \"foo\"')\r\n--    vim.cmd { cmd = 'echo', args = { '\"foo\"' } }\r\n--    vim.cmd.echo({ args = { '\"foo\"' } })\r\n--    vim.cmd.echo('\"foo\"')\r\n--\r\n--    -- Ex command :write! myfile.txt\r\n--    vim.cmd('write! myfile.txt')\r\n--    vim.cmd { cmd = 'write', args = { \"myfile.txt\" }, bang = true }\r\n--    vim.cmd.write { args = { \"myfile.txt\" }, bang = true }\r\n--    vim.cmd.write { \"myfile.txt\", bang = true }\r\n--\r\n--    -- Ex command :colorscheme blue\r\n--    vim.cmd('colorscheme blue')\r\n--    vim.cmd.colorscheme('blue')\r\n--\r\n-- ```\r\n--- @see |ex-cmd-index|\r\n--- @param command any # string|table Command(s) to execute. If a string, executes\r\n--                multiple lines of Vim script at once. In this case, it is\r\n--                an alias to |nvim_exec()|, where `output` is set to false.\r\n--                Thus it works identical to |:source|. If a table, executes\r\n--                a single command. In this case, it is an alias to\r\n--                |nvim_cmd()| where `opts` is empty.\r\nfunction vim.cmd(command) end\r\n\r\n-- Return a human-readable representation of the given object.\r\n--- @see https://github.com/kikito/inspect.lua\r\n--- @see https://github.com/mpeterv/vinspect\r\n--- @param options table<string, any>\r\nfunction vim.inspect(object, options) end\r\n\r\n-- Invokes |vim-function| or |user-function| {func} with arguments {...}.\r\n--     See also |vim.fn|.\r\n--     Equivalent to: >\r\n--         vim.fn[func]({...})\r\n--- @param func fun()\r\nfunction vim.call(func, ...) end\r\n\r\n-- Run diff on strings {a} and {b}. Any indices returned by this function,\r\n--     either directly or via callback arguments, are 1-based.\r\n--\r\n--     Examples: >\r\n--\r\n--         vim.diff('a\\n', 'b\\nc\\n')\r\n--         -->\r\n--         @@ -1 +1,2 @@\r\n--         -a\r\n--         +b\r\n--         +c\r\n--\r\n--         vim.diff('a\\n', 'b\\nc\\n', {result_type = 'indices'})\r\n--         -->\r\n--         {\r\n--             {1, 1, 1, 2}\r\n--         }\r\n-- <\r\n--     Parameters: ~\r\n--         {a}      First string to compare\r\n--         {b}      Second string to compare\r\n--         {opts}   Optional parameters:\r\n--                  • `on_hunk` (callback):\r\n--                    Invoked for each hunk in the diff. Return a negative number\r\n--                    to cancel the callback for any remaining hunks.\r\n--                    Args:\r\n--                    • `start_a` (integer): Start line of hunk in {a}.\r\n--                    • `count_a` (integer): Hunk size in {a}.\r\n--                    • `start_b` (integer): Start line of hunk in {b}.\r\n--                    • `count_b` (integer): Hunk size in {b}.\r\n--                  • `result_type` (string): Form of the returned diff:\r\n--                    • \"unified\": (default) String in unified format.\r\n--                    • \"indices\": Array of hunk locations.\r\n--                    Note: This option is ignored if `on_hunk` is used.\r\n--                  • `algorithm` (string):\r\n--                    Diff algorithm to use. Values:\r\n--                    • \"myers\"      the default algorithm\r\n--                    • \"minimal\"    spend extra time to generate the\r\n--                                   smallest possible diff\r\n--                    • \"patience\"   patience diff algorithm\r\n--                    • \"histogram\"  histogram diff algorithm\r\n--                  • `ctxlen` (integer): Context length\r\n--                  • `interhunkctxlen` (integer):\r\n--                    Inter hunk context length\r\n--                  • `ignore_whitespace` (boolean):\r\n--                    Ignore whitespace\r\n--                  • `ignore_whitespace_change` (boolean):\r\n--                    Ignore whitespace change\r\n--                  • `ignore_whitespace_change_at_eol` (boolean)\r\n--                    Ignore whitespace change at end-of-line.\r\n--                  • `ignore_cr_at_eol` (boolean)\r\n--                    Ignore carriage return at end-of-line\r\n--                  • `ignore_blank_lines` (boolean)\r\n--                    Ignore blank lines\r\n--                  • `indent_heuristic` (boolean):\r\n--                    Use the indent heuristic for the internal\r\n--                    diff library.\r\n--\r\n--     Return: ~\r\n--         See {opts.result_type}. nil if {opts.on_hunk} is given.\r\n--- @param opts table<string, any>\r\nfunction vim.diff(a, b, opts) end\r\n\r\n-- The result is a String, which is the text {str} converted from\r\n--         encoding {from} to encoding {to}. When the conversion fails `nil` is\r\n--         returned.  When some characters could not be converted they\r\n--         are replaced with \"?\".\r\n--         The encoding names are whatever the iconv() library function\r\n--         can accept, see \":Man 3 iconv\".\r\n--\r\n--         Parameters: ~\r\n--             {str}   (string) Text to convert\r\n--             {from}  (string) Encoding of {str}\r\n--             {to}    (string) Target encoding\r\n--\r\n--         Returns: ~\r\n--             Converted string if conversion succeeds, `nil` otherwise.\r\n--- @param str string\r\n--- @param from number\r\n--- @param to number\r\n--- @param opts? table<string, any>\r\nfunction vim.iconv(str, from, to, opts) end\r\n\r\n-- Returns true if the code is executing as part of a \"fast\" event handler,\r\n--     where most of the API is disabled. These are low-level events (e.g.\r\n--     |lua-loop-callbacks|) which can be invoked whenever Nvim polls for input.\r\n--     When this is `false` most API functions are callable (but may be subject\r\n--     to other restrictions such as |textlock|).\r\nfunction vim.in_fast_event() end\r\n\r\n-- Decodes (or \"unpacks\") the msgpack-encoded {str} to a Lua object.\r\n--- @param str string\r\nfunction vim.mpack.decode(str) end\r\n\r\n-- Encodes (or \"packs\") Lua object {obj} as msgpack in a Lua string.\r\nfunction vim.mpack.encode(obj) end\r\n\r\n-- Parse the Vim regex {re} and return a regex object. Regexes are \"magic\"\r\n--     and case-sensitive by default, regardless of 'magic' and 'ignorecase'.\r\n--     They can be controlled with flags, see |/magic| and |/ignorecase|.\r\nfunction vim.regex(re) end\r\n\r\n-- Sends {event} to {channel} via |RPC| and returns immediately. If {channel}\r\n--     is 0, the event is broadcast to all channels.\r\n--\r\n--     This function also works in a fast callback |lua-loop-callbacks|.\r\n--- @param args? table<string, any>\r\nfunction vim.rpcnotify(channel, method, args) end\r\n\r\n-- Sends a request to {channel} to invoke {method} via |RPC| and blocks until\r\n--     a response is received.\r\n--\r\n--     Note: NIL values as part of the return value is represented as |vim.NIL|\r\n--     special value\r\n--- @param args? table<string, any>\r\nfunction vim.rpcrequest(channel, method, args) end\r\n\r\n-- Schedules {callback} to be invoked soon by the main event-loop. Useful\r\n--     to avoid |textlock| or other temporary restrictions.\r\n--- @param callback fun()\r\nfunction vim.schedule(callback) end\r\n\r\n-- Check {str} for spelling errors. Similar to the Vimscript function\r\n--     |spellbadword()|.\r\n--\r\n--     Note: The behaviour of this function is dependent on: 'spelllang',\r\n--     'spellfile', 'spellcapcheck' and 'spelloptions' which can all be local to\r\n--     the buffer. Consider calling this with |nvim_buf_call()|.\r\n--\r\n--     Example: >\r\n--\r\n--         vim.spell.check(\"the quik brown fox\")\r\n--         -->\r\n--         {\r\n--             {'quik', 'bad', 4}\r\n--         }\r\n-- <\r\n--     Parameters: ~\r\n--         {str}    String to spell check.\r\n--\r\n--     Return: ~\r\n--       List of tuples with three items:\r\n--         - The badly spelled word.\r\n--         - The type of the spelling error:\r\n--             \"bad\"   spelling mistake\r\n--             \"rare\"  rare word\r\n--             \"local\" word only valid in another region\r\n--             \"caps\"  word should start with Capital\r\n--         - The position in {str} where the word begins.\r\n--- @param str string\r\nfunction vim.spell.check(str) end\r\n\r\n-- Convert UTF-32 or UTF-16 {index} to byte index. If {use_utf16} is not\r\n--     supplied, it defaults to false (use UTF-32). Returns the byte index.\r\n--\r\n--     Invalid UTF-8 and NUL is treated like by |vim.str_byteindex()|.\r\n--     An {index} in the middle of a UTF-16 sequence is rounded upwards to\r\n--     the end of that sequence.\r\n--- @param str string\r\n--- @param index number\r\n--- @param use_utf16? any\r\nfunction vim.str_byteindex(str, index, use_utf16) end\r\n\r\n-- Convert byte index to UTF-32 and UTF-16 indices. If {index} is not\r\n--     supplied, the length of the string is used. All indices are zero-based.\r\n--     Returns two values: the UTF-32 and UTF-16 indices respectively.\r\n--\r\n--     Embedded NUL bytes are treated as terminating the string. Invalid UTF-8\r\n--     bytes, and embedded surrogates are counted as one code point each. An\r\n--     {index} in the middle of a UTF-8 sequence is rounded upwards to the end of\r\n--     that sequence.\r\n--- @param str string\r\n--- @param index? number\r\nfunction vim.str_utfindex(str, index) end\r\n\r\n-- Compares strings case-insensitively. Returns 0, 1 or -1 if strings are\r\n--     equal, {a} is greater than {b} or {a} is lesser than {b}, respectively.\r\nfunction vim.stricmp(a, b) end\r\n\r\n-- Attach to ui events, similar to |nvim_ui_attach()| but receive events\r\n--     as lua callback. Can be used to implement screen elements like\r\n--     popupmenu or message handling in lua.\r\n--\r\n--     {options} should be a dictionary-like table, where `ext_...` options should\r\n--     be set to true to receive events for the respective external element.\r\n--\r\n--     {callback} receives event name plus additional parameters. See |ui-popupmenu|\r\n--     and the sections below for event format for respective events.\r\n--\r\n--     WARNING: This api is considered experimental.  Usability will vary for\r\n--     different screen elements. In particular `ext_messages` behavior is subject\r\n--     to further changes and usability improvements.  This is expected to be\r\n--     used to handle messages when setting 'cmdheight' to zero (which is\r\n--     likewise experimental).\r\n--\r\n--     Example (stub for a |ui-popupmenu| implementation): >\r\n--\r\n--       ns = vim.api.nvim_create_namespace('my_fancy_pum')\r\n--\r\n--       vim.ui_attach(ns, {ext_popupmenu=true}, function(event, ...)\r\n--         if event == \"popupmenu_show\" then\r\n--           local items, selected, row, col, grid = ...\r\n--           print(\"display pum \", #items)\r\n--         elseif event == \"popupmenu_select\" then\r\n--           local selected = ...\r\n--           print(\"selected\", selected)\r\n--         elseif event == \"popupmenu_hide\" then\r\n--           print(\"FIN\")\r\n--         end\r\n--       end)\r\n--- @param ns number\r\n--- @param options table<string, any>\r\n--- @param callback fun()\r\nfunction vim.ui_attach(ns, options, callback) end\r\n\r\n-- Detach a callback previously attached with |vim.ui_attach()| for the\r\n--     given namespace {ns}.\r\n--- @param ns number\r\nfunction vim.ui_detach(ns) end\r\n\r\n-- Gets the version of the current Nvim build.\r\nfunction vim.version() end\r\n\r\n-- Wait for {time} in milliseconds until {callback} returns `true`.\r\n--\r\n--     Executes {callback} immediately and at approximately {interval}\r\n--     milliseconds (default 200). Nvim still processes other events during\r\n--     this time.\r\n--\r\n--     Parameters: ~\r\n--         {time}      Number of milliseconds to wait\r\n--         {callback}  Optional callback. Waits until {callback} returns true\r\n--         {interval}  (Approximate) number of milliseconds to wait between polls\r\n--         {fast_only} If true, only |api-fast| events will be processed.\r\n--                         If called from while in an |api-fast| event, will\r\n--                         automatically be set to `true`.\r\n--\r\n--     Returns: ~\r\n--         If {callback} returns `true` during the {time}:\r\n--             `true, nil`\r\n--\r\n--         If {callback} never returns `true` during the {time}:\r\n--             `false, -1`\r\n--\r\n--         If {callback} is interrupted during the {time}:\r\n--             `false, -2`\r\n--\r\n--         If {callback} errors, the error is raised.\r\n--\r\n--         Examples: >\r\n--\r\n--     ---\r\n--     -- Wait for 100 ms, allowing other events to process\r\n--     vim.wait(100, function() end)\r\n--\r\n--     ---\r\n--     -- Wait for 100 ms or until global variable set.\r\n--     vim.wait(100, function() return vim.g.waiting_for_var end)\r\n--\r\n--     ---\r\n--     -- Wait for 1 second or until global variable set, checking every ~500 ms\r\n--     vim.wait(1000, function() return vim.g.waiting_for_var end, 500)\r\n--\r\n--     ---\r\n--     -- Schedule a function to set a value in 100ms\r\n--     vim.defer_fn(function() vim.g.timer_result = true end, 100)\r\n--\r\n--     -- Would wait ten seconds if results blocked. Actually only waits  100 ms\r\n--     if vim.wait(10000, function() return vim.g.timer_result end) then\r\n--       print('Only waiting a little bit of time!')\r\n--     end\r\n-- <\r\n--- @param callback? fun()\r\n--- @param interval? any\r\n--- @param fast_only? any\r\nfunction vim.wait(time, callback, interval, fast_only) end\r\n```\r\n\r\n</details>\r\n\r\nSimilar files are created for `vim.fn`, `vim.api`, `vim options`, `vim.uv`",
            "created_at": "2022-10-10T17:21:21Z",
            "html_url": "https://github.com/neovim/neovim/issues/20571#issuecomment-1273615944",
            "id": 1273615944,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20571",
            "node_id": "IC_kwDOAPphoM5L6dZI",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1273615944/reactions"
            },
            "updated_at": "2022-10-10T17:27:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1273615944",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Avoiding doxygen is orthogonal to the original topic here. \r\n\r\n> Right now, I'm parsing the doc/lua.txt files and then regenerate the lua source automatcially. (with a lot of limitations)\r\n\r\n- fwiw, this may be useful: https://github.com/neovim/tree-sitter-vimdoc\r\n    - this is used by [gen_help_html.lua](https://github.com/neovim/neovim/blob/master/scripts/gen_help_html.lua) which generates the HTML docs: https://neovim.io/doc/user\r\n\r\n> See the generated file below. Could be a good starting point, since it literally includes the docs from `doc/lua.txt`.\r\n\r\nyeah, that is similar to this dummy function for the similar purpose: https://github.com/neovim/neovim/blob/26c653718097955dc4dfbeb45ab602c8dbe9dea5/runtime/lua/vim/shared.lua#L20\r\n\r\nseems like a fine way to go. It keeps the docs well-formatted. Manually writing :help docs should be avoided for APIs. And :help as a format should \"wither on the vine\" as we increment towards https://github.com/neovim/neovim/issues/329 .\r\n\r\n",
            "created_at": "2022-10-11T00:21:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/20571#issuecomment-1273936680",
            "id": 1273936680,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20571",
            "node_id": "IC_kwDOAPphoM5L7rso",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1273936680/reactions"
            },
            "updated_at": "2022-10-11T00:23:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1273936680",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I would like to have a go with this. Couple questions before I start:\r\n\r\n1. Will we use @folke's approach?\r\n2. do we want to split  `vim.fn`, `vim.api`, `vim options`, `vim.uv` in multiple files or put it all in one (`types.lua`)?\r\n3. Is it the goal to move all documentation in `runtime/doc/lua.txt` to `.lua` files? Such that `lua.txt` can be completely generated?\r\n\r\nI now see that `neodev.nvim` basically already has these lua files. Would it be possible to use these?",
            "created_at": "2023-03-27T10:35:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/20571#issuecomment-1484906246",
            "id": 1484906246,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20571",
            "node_id": "IC_kwDOAPphoM5Ygd8G",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1484906246/reactions"
            },
            "updated_at": "2023-03-27T10:40:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1484906246",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
                "events_url": "https://api.github.com/users/yochem/events{/privacy}",
                "followers_url": "https://api.github.com/users/yochem/followers",
                "following_url": "https://api.github.com/users/yochem/following{/other_user}",
                "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/yochem",
                "id": 23235841,
                "login": "yochem",
                "node_id": "MDQ6VXNlcjIzMjM1ODQx",
                "organizations_url": "https://api.github.com/users/yochem/orgs",
                "received_events_url": "https://api.github.com/users/yochem/received_events",
                "repos_url": "https://api.github.com/users/yochem/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/yochem"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "We need to develop a custom parser so we can extract the documentation from source. AFAIK there aren't any good open source ones so I think we need a custom one.\r\n\r\nThe current approach uses doxygen + gen_help.py + lua2dox all of which have limitations.\r\n\r\nI'm currently working on an lpeg parser which can replace much of the fragile pattern logic in lua2dox. Once that's in place, we'd be in a much stronger position to heavily refactor and simplify the doxygen + gen_help.py flow (and maybe even replace it), as it would be easy enough to extend that to C.\r\n\r\nAs mentioned above, the other alternative is to use a treesitter based solution, however I think that's a little less straight forward and might be less flexible.\r\n\r\n> I now see that neodev.nvim basically already has these lua files. Would it be possible to use these?\r\n\r\nI not sure how usable that is, some of it might be.",
            "created_at": "2023-03-27T10:46:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/20571#issuecomment-1484919020",
            "id": 1484919020,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20571",
            "node_id": "IC_kwDOAPphoM5YghDs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1484919020/reactions"
            },
            "updated_at": "2023-03-27T10:46:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1484919020",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "fwiw I already created an emmylua parser for [lemmy-help](https://github.com/numToStr/lemmy-help) (vimdoc generator). IDK how useful it is to nvim-core in its current state, but I am willing to work on it to adapt to the needs.",
            "created_at": "2023-03-27T12:46:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/20571#issuecomment-1485059879",
            "id": 1485059879,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20571",
            "node_id": "IC_kwDOAPphoM5YhDcn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1485059879/reactions"
            },
            "updated_at": "2023-03-27T12:46:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1485059879",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24727447?v=4",
                "events_url": "https://api.github.com/users/numToStr/events{/privacy}",
                "followers_url": "https://api.github.com/users/numToStr/followers",
                "following_url": "https://api.github.com/users/numToStr/following{/other_user}",
                "gists_url": "https://api.github.com/users/numToStr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/numToStr",
                "id": 24727447,
                "login": "numToStr",
                "node_id": "MDQ6VXNlcjI0NzI3NDQ3",
                "organizations_url": "https://api.github.com/users/numToStr/orgs",
                "received_events_url": "https://api.github.com/users/numToStr/received_events",
                "repos_url": "https://api.github.com/users/numToStr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/numToStr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/numToStr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/numToStr"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I did take a look at that, however I don't think we can use it since it's implemented in rust.\n\nI'm currently aiming for an lpeg based solution since lpeg is pretty good and flexible and we're already using it for the API dispatch.",
            "created_at": "2023-03-27T13:13:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/20571#issuecomment-1485075419",
            "id": 1485075419,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20571",
            "node_id": "IC_kwDOAPphoM5YhHPb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1485075419/reactions"
            },
            "updated_at": "2023-03-27T13:15:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1485075419",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@lewis6991 there's also the new https://github.com/amaanq/tree-sitter-luadoc by @amaanq.\r\n\r\nI'm pretty sure it has everything that's needed for doc gen",
            "created_at": "2023-03-29T17:16:15Z",
            "html_url": "https://github.com/neovim/neovim/issues/20571#issuecomment-1488999302",
            "id": 1488999302,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20571",
            "node_id": "IC_kwDOAPphoM5YwFOG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1488999302/reactions"
            },
            "updated_at": "2023-03-29T17:16:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1488999302",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/292349?v=4",
                "events_url": "https://api.github.com/users/folke/events{/privacy}",
                "followers_url": "https://api.github.com/users/folke/followers",
                "following_url": "https://api.github.com/users/folke/following{/other_user}",
                "gists_url": "https://api.github.com/users/folke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/folke",
                "id": 292349,
                "login": "folke",
                "node_id": "MDQ6VXNlcjI5MjM0OQ==",
                "organizations_url": "https://api.github.com/users/folke/orgs",
                "received_events_url": "https://api.github.com/users/folke/received_events",
                "repos_url": "https://api.github.com/users/folke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/folke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/folke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/folke"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "We also need to support C",
            "created_at": "2023-03-29T17:55:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/20571#issuecomment-1489052220",
            "id": 1489052220,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20571",
            "node_id": "IC_kwDOAPphoM5YwSI8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1489052220/reactions"
            },
            "updated_at": "2023-03-29T17:55:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1489052220",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Is it still doxygen? I can write a parser for that",
            "created_at": "2023-03-29T18:11:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/20571#issuecomment-1489075619",
            "id": 1489075619,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20571",
            "node_id": "IC_kwDOAPphoM5YwX2j",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1489075619/reactions"
            },
            "updated_at": "2023-03-29T18:11:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1489075619",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29718261?v=4",
                "events_url": "https://api.github.com/users/amaanq/events{/privacy}",
                "followers_url": "https://api.github.com/users/amaanq/followers",
                "following_url": "https://api.github.com/users/amaanq/following{/other_user}",
                "gists_url": "https://api.github.com/users/amaanq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/amaanq",
                "id": 29718261,
                "login": "amaanq",
                "node_id": "MDQ6VXNlcjI5NzE4MjYx",
                "organizations_url": "https://api.github.com/users/amaanq/orgs",
                "received_events_url": "https://api.github.com/users/amaanq/received_events",
                "repos_url": "https://api.github.com/users/amaanq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/amaanq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/amaanq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/amaanq"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Done in #24363.\r\n\r\nFor now we will just manually maintain files in `runtime/lua/vim/_meta`.",
            "created_at": "2023-07-31T08:43:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/20571#issuecomment-1657930322",
            "id": 1657930322,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20571",
            "node_id": "IC_kwDOAPphoM5i0gJS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1657930322/reactions"
            },
            "updated_at": "2023-07-31T08:43:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1657930322",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        }
    ],
    "comments": 14,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/20571/comments",
    "created_at": "2022-10-10T11:48:16Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/20571/events",
    "html_url": "https://github.com/neovim/neovim/issues/20571",
    "id": 1403045004,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": true,
            "description": "",
            "id": 84744038,
            "name": "documentation",
            "node_id": "MDU6TGFiZWw4NDc0NDAzOA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/documentation"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/20571/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 569,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk"
        },
        "description": "Low priority. Not planned for the current target, may be reassigned.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 411,
        "state": "open",
        "title": "backlog",
        "updated_at": "2023-08-01T09:59:58Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "I_kwDOAPphoM5ToMSM",
    "number": 20571,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/20571/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/20571/timeline",
    "title": "Migrate manual docs in `lua.txt` into doxygen.",
    "updated_at": "2023-07-31T08:43:30Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/20571",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
        "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
        "followers_url": "https://api.github.com/users/lewis6991/followers",
        "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
        "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/lewis6991",
        "id": 7904185,
        "login": "lewis6991",
        "node_id": "MDQ6VXNlcjc5MDQxODU=",
        "organizations_url": "https://api.github.com/users/lewis6991/orgs",
        "received_events_url": "https://api.github.com/users/lewis6991/received_events",
        "repos_url": "https://api.github.com/users/lewis6991/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/lewis6991"
    }
}