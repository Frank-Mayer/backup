{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "# Problem\r\n\r\n- There are various different ways of representing a position (e.g. `:help api-indexing`).\r\n    - https://github.com/neovim/neovim/issues/25272#issuecomment-1729294143\r\n- Comparing or reasoning about positions requires boilerplate / utility functions such as:\r\n    - [get_range_from_mark](https://github.com/neovim/neovim/pull/25301#discussion_r1334298996)\r\n    - [make_line_range_params](https://github.com/neovim/neovim/pull/25194#discussion_r1328985155)\r\n    - [compare_position](https://github.com/vscode-neovim/vscode-neovim/pull/1490/files#diff-356c71d28d1ad83654bec96ec39481938dd06e6589a05d781ed2ab028d9296b6R70-R84)\r\n\r\nCopying @mfussenegger summary:\r\n\r\n> cursor/position related functions:\r\n> \r\n> * `vim.region(..., pos1, pos2, ...)`\r\n>   * pos1 & pos2: `integer[] (line, column)` `(0,0)` indexed byte positions\r\n> * `vim.inspect_pos(..., row, col, ...)` 0 based\r\n> * `vim.show_pos(..., row, col, ...)` 0 based\r\n> * `vim.highlight.range(... start, finish, ...)` - `{line, col}` tuple, doesn't mention if `(0, 0)` or something else?\r\n> * `vim.treesitter.get_node_text(node, ...)`\r\n> * `vim.fn.cursor(lnum, col, off)` `(1, 1)` - With `0` meaning stay in current line or column\r\n> * `vim.fn.getpos(expr)` - result is `[bufnr, lnum, col, off]` (1, 1) based;\r\n> * `vim.fn.getcurpos([{winid}])` like ^ but with an extra `curswant` in the result.\r\n> * `vim.fn.getline(lnum, end)` - 1 based\r\n> * `nvim_win_set_cursor(win, pos)` -  `pos` is `(row, col)` tuple  with `(1, 0)` indexing\r\n> * `nvim_win_get_cursor(win)` - Mirrors `nvim_win_set_cursor`\r\n> * `nvim_buf_get_lines(..., start, end, ...)` - 0 based, end-exclusive\r\n> * `nvim_buf_get_lines(..., start_row, start_col, end_row, end_col...)` - 0 based, row indices end-inclusive, column indices end-exclusive\r\n> \r\n> LSP structures:\r\n> \r\n> ```\r\n> Position\r\n>    line: integer 0 based\r\n>    character: integer 0 base  (but encoding dependent\r\n> ```\r\n> \r\n> ```\r\n> Range\r\n>     start: Position\r\n>     end: Position\r\n> ```\r\n\r\n# Proposal\r\n\r\nImplement `vim.pos` module for representing and working with normalized positions.\r\n\r\n- `vim.pos(row, col)` creates a `vim.pos.Pos` position using \"normalized\" indexing (TBD).\r\n    - `vim.pos(expr: string)` takes a [getpos()-like expression](https://neovim.io/doc/user/builtin.html#line()).\r\n- `vim.pos.Pos` structure is defined as:\r\n  ```\r\n  vim.pos.Pos: {\r\n    kind?: 'mark' | 'extmark' | 'cursor' | ...\r\n    col: number\r\n    row: number\r\n    buf?: number -- Buffer id.\r\n\r\n    -- TODO: do we need these fields?\r\n    -- row_offset?: number\r\n    -- col_offset?: number\r\n    -- vcol?: number  -- virtual column\r\n    -- vrow?: number  -- virtual row\r\n  }\r\n  ```\r\n- `vim.pos.cmp()` compares positions (analogous to `vim.version.cmp()`)\r\n- For integration with legacy interfaces it can _accept_ and _produce_ any kind of position. Interface proposal:\r\n  ```\r\n  vim.pos.mark(row,col)       -- Creates a position from a mark-like row/col.\r\n  vim.pos.extmark(row,col)    -- Creates a position from a extmark-like row/col.\r\n  vim.pos.cursor(row,col)     -- Creates a position from a cursor-like row/col.\r\n  vim.pos.mark(pos)           -- Converts `pos` to a mark-like position.\r\n  vim.pos.extmark(pos)        -- Converts `pos` to a extmark-like position.\r\n  vim.pos.cursor(pos)         -- Converts `pos` to a cursor-like position.\r\n  ```",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Since the title but not the description mentions ranges, for the sake of completeness: Treesitter has a \r\n* `Range2`: `(start_row, end_row)`\r\n* `Range4`: `(start_row, start_col, end_row, end_col)`\r\n* `Range6`: `(start_row, start_col, start_byte, end_row, end_col, end_byte)`\r\n\r\nwhich should play nice with a `vim.range()` object -- possibly refactored into pairs of `vim.pos.Pos`. This (and probably other use cases) would require a `Pos2` and `Pos3`, though (both created via `vim.pos()` of course, depending on the arguments).\r\n\r\nThere's also `vim.region`, which is a table of ranges (necessary to represent block selections) that should similarly be folded into this API.",
            "created_at": "2023-10-05T09:40:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/25509#issuecomment-1748497296",
            "id": 1748497296,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25509",
            "node_id": "IC_kwDOAPphoM5oN_OQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1748497296/reactions"
            },
            "updated_at": "2023-10-05T09:51:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1748497296",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> would require a `Pos4` and `Pos6`\r\n\r\nWhat would those look like?",
            "created_at": "2023-10-05T09:47:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/25509#issuecomment-1748507553",
            "id": 1748507553,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25509",
            "node_id": "IC_kwDOAPphoM5oOBuh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1748507553/reactions"
            },
            "updated_at": "2023-10-05T09:47:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1748507553",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Sorry, division by two is hard... That should of course have been `Pos2` (row,col)  and `Pos3` (row,col,byte).",
            "created_at": "2023-10-05T09:52:05Z",
            "html_url": "https://github.com/neovim/neovim/issues/25509#issuecomment-1748514136",
            "id": 1748514136,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25509",
            "node_id": "IC_kwDOAPphoM5oODVY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1748514136/reactions"
            },
            "updated_at": "2023-10-05T09:52:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1748514136",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Would we actually need separate classes or could `Pos` have optional fields?",
            "created_at": "2023-10-05T14:49:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/25509#issuecomment-1749064223",
            "id": 1749064223,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25509",
            "node_id": "IC_kwDOAPphoM5oQJof",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1749064223/reactions"
            },
            "updated_at": "2023-10-05T14:49:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1749064223",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think that should be an implementation detail and not exposed to `vim.pos()`. Separate classes are used (and useful) for type checking; I expect Lewis added them based on painful experience with the previous, untyped, treesitter code.",
            "created_at": "2023-10-05T14:54:18Z",
            "html_url": "https://github.com/neovim/neovim/issues/25509#issuecomment-1749072826",
            "id": 1749072826,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25509",
            "node_id": "IC_kwDOAPphoM5oQLu6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1749072826/reactions"
            },
            "updated_at": "2023-10-05T14:54:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1749072826",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> vim.pos(row, col) creates a vim.pos.Pos position using \"normalized\" indexing (TBD).\r\n\r\nMaybe optionally overload it to take an `expr` from `getpos()`\r\nI think I've copied a variant of:\r\n\r\n```lua\r\n    local start = vim.fn.getpos('v')\r\n    local end_ = vim.fn.getpos('.')\r\n\r\n    local start_row = start[2]\r\n    local start_col = start[3]\r\n\r\n    local end_row = end_[2]\r\n    local end_col = end_[3]\r\n\r\n    if start_row == end_row and end_col < start_col then\r\n      end_col, start_col = start_col, end_col\r\n    elseif end_row < start_row then\r\n      start_row, end_row = end_row, start_row\r\n      start_col, end_col = end_col, start_col\r\n    end\r\n    -- buf_get_text is 0-indexed; end-col is exclusive\r\n    local lines = api.nvim_buf_get_text(0, start_row - 1, start_col - 1, end_row - 1, end_col, {})\r\n    return table.concat(lines, '\\n')\r\n\r\n```\r\n\r\nAround in 3 plugins now, would be cool if that could be shortened to something like:\r\n\r\n\r\n```lua\r\nvim.range('v', '.'):normalize():text(bufnr)\r\n                    ^^^^^^^^^^^\r\n                    Ensures start is before end\r\n```\r\n\r\n> Would we actually need separate classes or could Pos have optional fields?\r\n\r\nMaybe something to keep in mind: If we went with different metatables to carry additional information, the raw table `{x, y}` could be passed without conversion as argument to functions that take a tuple as a parameter.\r\n\r\nAlthough it looks like that's currently only `nvim_win_set_cursor(win, pos)` and that uses (1, 0) indexing instead of (0, 0)\r\n\r\n---\r\n\r\nAlso highlighting one LSP use-case: Encoding specific column conversion.\r\nE.g. LSP uses utf-16 columns. But translating unfortunately depends on the line contents. I'm not sure how that would fit into a `vim.pos` (maybe we'll need a `lsp.to_pos(lsp.Position, buffer, encoding)`)",
            "created_at": "2023-10-05T16:10:19Z",
            "html_url": "https://github.com/neovim/neovim/issues/25509#issuecomment-1749224055",
            "id": 1749224055,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25509",
            "node_id": "IC_kwDOAPphoM5oQwp3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1749224055/reactions"
            },
            "updated_at": "2023-10-05T16:10:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1749224055",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        }
    ],
    "comments": 6,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/25509/comments",
    "created_at": "2023-10-05T09:24:33Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/25509/events",
    "html_url": "https://github.com/neovim/neovim/issues/25509",
    "id": 1927801948,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/25509/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 586,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk"
        },
        "description": "Low priority. Not planned for the current target, may be reassigned.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 411,
        "state": "open",
        "title": "backlog",
        "updated_at": "2023-10-05T09:24:47Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "I_kwDOAPphoM5y5-xc",
    "number": 25509,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 2,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 2,
        "url": "https://api.github.com/repos/neovim/neovim/issues/25509/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/25509/timeline",
    "title": "Lua: Position / Range abstraction (vim.pos.Pos)",
    "updated_at": "2023-10-05T16:22:31Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/25509",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk"
    }
}