{
    "active_lock_reason": "resolved",
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "With the new plugin structure and things like the MessagePack API, it becomes much easier to have external plugins; one thing that is still awkward is the coloring of information.\n\nI'm thinking about a plugin here (slimv, to be exact, although many others would have the same issue) that wants to have its own buffer to display arbitrary information. To get some highlightning (of \"active\" fields and other parts), there have to be syntax rules that operate via string matching - and that is\n- cumbersome (needs separators that don't exist in the text)\n- not nice re cursor movement (think `concealcursor`, `conceallevel`)\n- slow (for big buffers)\n- unnecessary.\n\nHow about being able to specify \"classes\" for (parts of) text, so that the syntax coloring rules can be applied directly without needing the RE engine inbetween? I imagine sending not a plain string for a line, but something like `[\"a string \", { class: \"Error\", text: \"some error string\"}, \"more plain text\"]`.\n\nIf that could be stored in Neovim directly it should make lots of things easier - especially for the plugins if they could store (some) arbitrary information in the dictionary as well! (Currently such things have to be put into the line, concealed in some way, and then matched and parsed out again, which is awful.)\n\nTo give a specific example - currently a line looks like this:\n\n```\n{[10] \"types\" []} = {[11] #<HASH-TABLE :TEST EQUALP :COUNT 3 {1009D95AD3}> []} {<3> [remove entry] <>}\n```\n\nwhile the visual display is\n\n```\n\"types\"  = #<HASH-TABLE :TEST EQUALP :COUNT 3 {1009D95AD3}>  [remove entry]\n```\n\n(and includes colors, of course).\n",
    "closed_at": "2024-03-22T07:49:02Z",
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "> How about being able to specify \"classes\" for (parts of) text, so that the syntax coloring rules can be applied directly without needing the RE engine\n\nhttps://github.com/neovim/neovim/issues/719#issuecomment-52933748 mentions scintillua, which looks like a very good alternative to regex for describing syntax.\n\nIt doesn't solve your more general request, which I interpret as \"text properties\". Text properties are very important but will require careful design, and won't be possible until we achieve more fundamental changes such as abstracting the buffer structure. Currently in the n/vim core, a buffer is basically a character array (memline.c); trying to bolt-on text properties will result in terrible performance.\n",
            "created_at": "2015-01-03T16:54:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-68601326",
            "id": 68601326,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjAxMzI2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68601326/reactions"
            },
            "updated_at": "2015-01-03T16:55:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68601326",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "[vis](https://github.com/martanne/vis)'s basic data structure (a piece chain) [seems good](https://www.cs.unm.edu/~crowley/papers/sds.pdf) for this kind of thing, but moving to that could require a major rewrite of the regexp engine. \n",
            "created_at": "2015-01-03T19:09:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-68605714",
            "id": 68605714,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjA1NzE0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68605714/reactions"
            },
            "updated_at": "2015-01-03T19:09:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68605714",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/221465?v=4",
                "events_url": "https://api.github.com/users/fmoralesc/events{/privacy}",
                "followers_url": "https://api.github.com/users/fmoralesc/followers",
                "following_url": "https://api.github.com/users/fmoralesc/following{/other_user}",
                "gists_url": "https://api.github.com/users/fmoralesc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fmoralesc",
                "id": 221465,
                "login": "fmoralesc",
                "node_id": "MDQ6VXNlcjIyMTQ2NQ==",
                "organizations_url": "https://api.github.com/users/fmoralesc/orgs",
                "received_events_url": "https://api.github.com/users/fmoralesc/received_events",
                "repos_url": "https://api.github.com/users/fmoralesc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fmoralesc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fmoralesc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fmoralesc"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> vis's basic data structure (a piece chain) seems good for this kind of thing, but moving to that could require a major rewrite of the regexp engine.\n\nI saw vis appear on HN too, and it intrigues me a lot. Though at some points in the description I thought: we can't omit that (feature) as he has done, (n)vim needs it.\n\nBeing able to mmap files into the memory pace is really really cool, but already breaks down when input conversion needs to be done, as said by @martanne (plus the fact that vim currently scans over the entire file to determine the encoding, which is cool since it has to read it into allocated memory anyway).\n",
            "created_at": "2015-01-03T20:28:39Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-68608348",
            "id": 68608348,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjA4MzQ4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68608348/reactions"
            },
            "updated_at": "2015-01-03T20:28:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68608348",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@aktau If a buffer is opened with `:e ++enc=utf8` we could avoid conversion and scanning. And we could provide a user option that says \"always assume utf8\".\n",
            "created_at": "2015-01-03T20:35:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-68608575",
            "id": 68608575,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjA4NTc1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68608575/reactions"
            },
            "updated_at": "2015-01-03T20:35:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68608575",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> @aktau If a buffer is opened with :e ++enc=utf8 we could avoid conversion and scanning. And we could provide a user option that says \"always assume utf8\".\n\nYes, if the `fenc` (forced or not) is the same as `enc`, then a read-only mmap could be done. Otherwise not so much.\n\nMost likely this is the majority case. But for example this would break down when opening binary files which are likely to fail the utf-8 test, which is usually when people really need large file support.\n\nI'm also not sure of the impact of such a split-up on the manageability of the code. As I understand it, the current mem{line,file} combo is actually quite clean.\n",
            "created_at": "2015-01-03T20:38:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-68608674",
            "id": 68608674,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjA4Njc0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68608674/reactions"
            },
            "updated_at": "2015-01-03T20:38:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68608674",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "NONE",
            "body": "@aktau as soon as there's a NUL byte in the first few kBytes, the encoding should be seen as \"binary\", so the UTF8 test shouldn't matter here.\n",
            "created_at": "2015-01-03T20:39:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-68608720",
            "id": 68608720,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjA4NzIw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68608720/reactions"
            },
            "updated_at": "2015-01-03T20:39:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68608720",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/496570?v=4",
                "events_url": "https://api.github.com/users/phmarek/events{/privacy}",
                "followers_url": "https://api.github.com/users/phmarek/followers",
                "following_url": "https://api.github.com/users/phmarek/following{/other_user}",
                "gists_url": "https://api.github.com/users/phmarek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/phmarek",
                "id": 496570,
                "login": "phmarek",
                "node_id": "MDQ6VXNlcjQ5NjU3MA==",
                "organizations_url": "https://api.github.com/users/phmarek/orgs",
                "received_events_url": "https://api.github.com/users/phmarek/received_events",
                "repos_url": "https://api.github.com/users/phmarek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/phmarek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/phmarek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/phmarek"
            }
        },
        {
            "author_association": "NONE",
            "body": "Well, it's equally possible to keep that memory layout, and \"just\" have an additional map (array or hash or tree or whatever) that can deliver additional details for parts of a line... don't know whether that's the same kind of rewrite, though.\n",
            "created_at": "2015-01-03T20:41:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-68608772",
            "id": 68608772,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjA4Nzcy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68608772/reactions"
            },
            "updated_at": "2015-01-03T20:41:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68608772",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/496570?v=4",
                "events_url": "https://api.github.com/users/phmarek/events{/privacy}",
                "followers_url": "https://api.github.com/users/phmarek/followers",
                "following_url": "https://api.github.com/users/phmarek/following{/other_user}",
                "gists_url": "https://api.github.com/users/phmarek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/phmarek",
                "id": 496570,
                "login": "phmarek",
                "node_id": "MDQ6VXNlcjQ5NjU3MA==",
                "organizations_url": "https://api.github.com/users/phmarek/orgs",
                "received_events_url": "https://api.github.com/users/phmarek/received_events",
                "repos_url": "https://api.github.com/users/phmarek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/phmarek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/phmarek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/phmarek"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> @aktau as soon as there's a NUL byte in the first few kBytes, the encoding should be seen as \"binary\", so the UTF8 test shouldn't matter here.\n\nAs far as I can remember (got an unfinished blog post about this), if `enc` is utf-8 (which it most likely is), and `fenc` is something else, conversion will take place. I'm not even sure if `binary` is a vim encoding, I don't think so.\n",
            "created_at": "2015-01-03T20:41:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-68608782",
            "id": 68608782,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjA4Nzgy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68608782/reactions"
            },
            "updated_at": "2015-01-03T21:10:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68608782",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Well, it's equally possible to keep that memory layout, and \"just\" have an additional map (array or hash or tree or whatever) that can deliver additional details for parts of a line... don't know whether that's the same kind of rewrite, though.\n\nLike some sort of _conversion overlay_, you mean. This would work well for latin-X to utf-8 or the reverse, but more distincts encodings would probably suffer.\n",
            "created_at": "2015-01-03T20:43:05Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-68608835",
            "id": 68608835,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjA4ODM1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68608835/reactions"
            },
            "updated_at": "2015-01-03T20:43:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68608835",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "All that said, I think perhaps an on-the-fly _conversion overlay_ could work. It only being generated when a certain piece of the buffer is actually requested. I shudder at the thought of implementing this without any crazy bugs though. The thought-stuff sure is enticing.\n",
            "created_at": "2015-01-03T21:08:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-68609624",
            "id": 68609624,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjA5NjI0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68609624/reactions"
            },
            "updated_at": "2015-01-03T21:08:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68609624",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "On the other hand, large files support seems like yet another concept that could be added on as a plugin.  In the case of binary files, syntax/highlighting is obviously not needed, so a \"view\" of a file could be fed to `nvim` and the usual motions and non-syntax plugins could work on the partial buffer.\n\nIn the case of a large log file, for which syntax/highlighting would be needed, nothing is lost because vim already has `maxlines` and `synmaxcol` values which limit the lines evaluated by the syntax engine.\n\nSome problems I can think of with this \"view\" approach:\n- in-file search (`/`) and `:vimgrep` won't work. We would need to fall back to an external search tool (which likely wouldn't support vim-style regex).\n- we would need to modify nvim core to understand the concept of \"deferred content\". E.g., we only send the current view, but let nvim know the _actual_ line/column count (and other parameters I haven't thought of)\n\nPersonally I really prefer trying to leverage robust external solutions and only enhancing the core by adding hooks.\n",
            "created_at": "2015-01-03T21:34:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-68610505",
            "id": 68610505,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjEwNTA1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68610505/reactions"
            },
            "updated_at": "2015-01-03T21:34:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68610505",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Another reason I like the plugin approach is that in the common case, loading the file in memory is not really a problem and avoids complication. When people load large files they are unhappy about one of two things:\n- too slow\n- not enough features\n\nIf you load a giant C# (10 MB) file in Visual Studio, it will buckle (I know this for a fact). Add ReSharper and you might as well get some coffee. So you must either choose fast or good, and that means it is reasonable to disable some features (vim regex, whole-file analysis) on very large files.\n\nI am interested to hear other cases that I am missing which would break with the \"partial view\" approach.\n",
            "created_at": "2015-01-03T21:39:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-68610655",
            "id": 68610655,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjEwNjU1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68610655/reactions"
            },
            "updated_at": "2015-01-03T21:48:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68610655",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> f you load a giant C# (10 MB) file in Visual Studio, it will buckle (I know this for a fact). Add ReSharper and you might as well get some coffee. So you must either choose fast or good, and that means it is reasonable to disable some features (vim regex, whole-file analys) on very large files.\n\nI wasn't actually thinking about 10MB files as large. It sounds like peanuts. I was more thinking of 1-50GB size files. Which would have trouble fitting in main memory. Off the top my head, I don't know how well (n)vim does with a 10MB source file (syntax highlighted and all), but I would consider it a failure if we don't solve that (in case it has issues).\n",
            "created_at": "2015-01-03T21:43:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-68610787",
            "id": 68610787,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjEwNzg3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68610787/reactions"
            },
            "updated_at": "2015-01-03T21:43:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68610787",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "n/vim (with syntax highlighting and neocomplete) has no problem at all on the same 10 MB C# file (obviously VS/ReSharper are doing a lot more work on that file, so I don't mean to compare the two). I only raised that example to point out that one cannot expect all features in all scenarios.\n\nMigrating the buffer data structure of n/vim is pretty close to a total rewrite. I find it much more interesting to see how far we can get with alternative solutions.\n",
            "created_at": "2015-01-03T22:27:31Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-68612143",
            "id": 68612143,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjEyMTQz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68612143/reactions"
            },
            "updated_at": "2015-01-03T22:27:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68612143",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "NONE",
            "body": "Hmm, to get back to my original request ... how about providing some kind of rich text buffer with some restrictions?\n- readonly, ie. only modifyable via replacing whole lines\n- highlightning only valid within line, so needs to be repeated for each line in a paragraph\n- cannot be saved or loaded\n",
            "created_at": "2015-01-04T14:02:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-68633838",
            "id": 68633838,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjMzODM4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68633838/reactions"
            },
            "updated_at": "2015-01-04T14:02:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68633838",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/496570?v=4",
                "events_url": "https://api.github.com/users/phmarek/events{/privacy}",
                "followers_url": "https://api.github.com/users/phmarek/followers",
                "following_url": "https://api.github.com/users/phmarek/following{/other_user}",
                "gists_url": "https://api.github.com/users/phmarek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/phmarek",
                "id": 496570,
                "login": "phmarek",
                "node_id": "MDQ6VXNlcjQ5NjU3MA==",
                "organizations_url": "https://api.github.com/users/phmarek/orgs",
                "received_events_url": "https://api.github.com/users/phmarek/received_events",
                "repos_url": "https://api.github.com/users/phmarek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/phmarek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/phmarek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/phmarek"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Is text properties not a correct interpretation of your original request? I don't understand what is new in the rich text buffer you describe.\n",
            "created_at": "2015-01-04T14:48:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-68635223",
            "id": 68635223,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjM1MjIz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68635223/reactions"
            },
            "updated_at": "2015-01-04T14:48:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68635223",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "NONE",
            "body": "Yeah, _text properties_ might be a good name for it, too.\n\nI'd need not only the highlighning class name, though - storing arbitrary data as well would be nice.\n",
            "created_at": "2015-01-04T14:53:40Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-68635392",
            "id": 68635392,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjM1Mzky",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68635392/reactions"
            },
            "updated_at": "2015-01-04T14:53:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68635392",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/496570?v=4",
                "events_url": "https://api.github.com/users/phmarek/events{/privacy}",
                "followers_url": "https://api.github.com/users/phmarek/followers",
                "following_url": "https://api.github.com/users/phmarek/following{/other_user}",
                "gists_url": "https://api.github.com/users/phmarek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/phmarek",
                "id": 496570,
                "login": "phmarek",
                "node_id": "MDQ6VXNlcjQ5NjU3MA==",
                "organizations_url": "https://api.github.com/users/phmarek/orgs",
                "received_events_url": "https://api.github.com/users/phmarek/received_events",
                "repos_url": "https://api.github.com/users/phmarek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/phmarek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/phmarek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/phmarek"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Storing arbitrary data in association with a piece of text, and that association follows the text as edits are made. I believe the existing marks logic could be extended to do this, though it may not be scalable.\n",
            "created_at": "2015-01-04T15:23:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-68636410",
            "id": 68636410,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjM2NDEw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68636410/reactions"
            },
            "updated_at": "2015-01-04T15:23:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68636410",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Storing arbitrary data in association with a piece of text, and that\n> association follows the text as edits are made.\n> Sounds right, although for my use case no (user-)edits are needed.\n> I'd just replace whole lines via RPC.\n\nAs for an easy example, think about netrw directory listings with \ncoloring, like `ls` does.\nPerhaps with optional other highlightning, eg. files newer than an hour, \nfiles bigger than X, or something like that, to get more colorized items \nin a line.\n",
            "created_at": "2015-01-04T16:09:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-68637945",
            "id": 68637945,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjM3OTQ1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68637945/reactions"
            },
            "updated_at": "2015-01-04T16:09:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68637945",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/496570?v=4",
                "events_url": "https://api.github.com/users/phmarek/events{/privacy}",
                "followers_url": "https://api.github.com/users/phmarek/followers",
                "following_url": "https://api.github.com/users/phmarek/following{/other_user}",
                "gists_url": "https://api.github.com/users/phmarek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/phmarek",
                "id": 496570,
                "login": "phmarek",
                "node_id": "MDQ6VXNlcjQ5NjU3MA==",
                "organizations_url": "https://api.github.com/users/phmarek/orgs",
                "received_events_url": "https://api.github.com/users/phmarek/received_events",
                "repos_url": "https://api.github.com/users/phmarek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/phmarek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/phmarek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/phmarek"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "How about allowing arbitrary key/value pairs in the `:highlight` command(eg: `:highlight SomeGroup rgba=#e1e1e1cc`) and simplify association of highlight groups with arbitrary ranges? These arbitrary key/value pairs are consumed only by UIs that are interested\n\nThe advantage is that we reuse the existing mechanism for decorating text\n",
            "created_at": "2015-01-04T16:19:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-68638340",
            "id": 68638340,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjM4MzQw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68638340/reactions"
            },
            "updated_at": "2015-01-04T16:32:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68638340",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@phmarek If you can compute the position of the text to highlight since it is static, shouldn't it be possible to use `matchaddpos()`? That said, it seems to me that would be even more cumbersome than what we currently have; I use the concealed tags method in [vim-pad](https://github.com/fmoralesc/vim-pad) and I know what you mean about it being not as clean as one would want. \n\nPerhaps introducing a virtual key to tag separators (let's say `<HSep>`, like `<SNR>`) would help that, so instead of \n\n```\n {[10] \"types\" []} = {[11] #<HASH-TABLE :TEST EQUALP :COUNT 3 {1009D95AD3}> []} {<3> [remove entry] <>}\n```\n\nyou could have\n\n```\n<Hsep>10 \"types\" 10<Hsep> = <Hsep>11 #<HASH-TABLE :TEST EQUALP :COUNT 3 {1009D95AD3}> 11<Hsep> <Hsep>3 [remove entry] 3<Hsep>\n```\n\n@tarruda That would be quite helpful, and not only for UIs.\n",
            "created_at": "2015-01-04T17:52:05Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-68641763",
            "id": 68641763,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjQxNzYz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68641763/reactions"
            },
            "updated_at": "2015-01-04T17:52:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68641763",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/221465?v=4",
                "events_url": "https://api.github.com/users/fmoralesc/events{/privacy}",
                "followers_url": "https://api.github.com/users/fmoralesc/followers",
                "following_url": "https://api.github.com/users/fmoralesc/following{/other_user}",
                "gists_url": "https://api.github.com/users/fmoralesc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fmoralesc",
                "id": 221465,
                "login": "fmoralesc",
                "node_id": "MDQ6VXNlcjIyMTQ2NQ==",
                "organizations_url": "https://api.github.com/users/fmoralesc/orgs",
                "received_events_url": "https://api.github.com/users/fmoralesc/received_events",
                "repos_url": "https://api.github.com/users/fmoralesc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fmoralesc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fmoralesc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fmoralesc"
            }
        },
        {
            "author_association": "NONE",
            "body": "@fmoralesc  That might be an option, too, but not much cleaner IMO.\n\nAnd, in the long run, I'd like to shoot for having a \"text\" property named `img`, to have inline images, and this here would be an \"easy\" first step  ;P\n",
            "created_at": "2015-01-04T18:04:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-68642174",
            "id": 68642174,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjQyMTc0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68642174/reactions"
            },
            "updated_at": "2015-01-04T18:04:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68642174",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/496570?v=4",
                "events_url": "https://api.github.com/users/phmarek/events{/privacy}",
                "followers_url": "https://api.github.com/users/phmarek/followers",
                "following_url": "https://api.github.com/users/phmarek/following{/other_user}",
                "gists_url": "https://api.github.com/users/phmarek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/phmarek",
                "id": 496570,
                "login": "phmarek",
                "node_id": "MDQ6VXNlcjQ5NjU3MA==",
                "organizations_url": "https://api.github.com/users/phmarek/orgs",
                "received_events_url": "https://api.github.com/users/phmarek/received_events",
                "repos_url": "https://api.github.com/users/phmarek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/phmarek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/phmarek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/phmarek"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "`matchaddpos` works good for e.g. a read-only output buffer, but it's a little bit inconvenient since it only modifies the current window. In a plugin I want to dynamically highlight an output buffer that need not be the current window. Switching current window back and forth kind-of works, but is not entirely reliable. Also it would be more convenient if the added highlighting were associated with a buffer and not a window (if the window is closed and the buffer then reopened, the matches need not be re-added). A bufferwise `matchaddpos` is perhaps something to consider?\n",
            "created_at": "2015-01-04T18:09:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-68642381",
            "id": 68642381,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjQyMzgx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68642381/reactions"
            },
            "updated_at": "2015-01-04T18:09:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68642381",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@phmarek Sure, I was only thinking of the issue of having to specify different separators depending on the contents of the region, which that would solve.\n\nI think @tarruda's suggestion could help for implementing `img`. Actually, _already_ nothing should stop a UI to interpret text like\n\n```\n  ![image](path)\n```\n\n to be displayed as a image, it's just that all UIs currently assume a grid of text. Expanding the `:hi` command would allow providing hints to UIs about this:\n\n```\n syn match cmImage /![.\\+](.\\+)/ \n hi cmImage type=img\n```\n\nI've thought a mechanism like this could allow plugins like NerdTree to be displayed as native lists (like [this](http://opensourcehacker.com/wp-content/uploads/2012/05/Screen-shot-2012-05-11-at-2.03.02-AM.png)), and special buffers to be displayed using non-fixed with fonts.\n\n@bfredl :+1: \n",
            "created_at": "2015-01-04T18:22:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-68642834",
            "id": 68642834,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjQyODM0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68642834/reactions"
            },
            "updated_at": "2015-01-04T18:22:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68642834",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/221465?v=4",
                "events_url": "https://api.github.com/users/fmoralesc/events{/privacy}",
                "followers_url": "https://api.github.com/users/fmoralesc/followers",
                "following_url": "https://api.github.com/users/fmoralesc/following{/other_user}",
                "gists_url": "https://api.github.com/users/fmoralesc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fmoralesc",
                "id": 221465,
                "login": "fmoralesc",
                "node_id": "MDQ6VXNlcjIyMTQ2NQ==",
                "organizations_url": "https://api.github.com/users/fmoralesc/orgs",
                "received_events_url": "https://api.github.com/users/fmoralesc/received_events",
                "repos_url": "https://api.github.com/users/fmoralesc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fmoralesc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fmoralesc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fmoralesc"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Not sure highlight is the right mechanism, rather `:syntax`. But extending vimscript seems unnecessary to me in this case. We should only reuse the internal structures, but expose the functionality via the API only.\n",
            "created_at": "2015-01-04T18:44:21Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-68643600",
            "id": 68643600,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjQzNjAw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68643600/reactions"
            },
            "updated_at": "2015-01-04T18:44:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68643600",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@justinmk Probably. Extending _both_ would be helpful.\n\n(As to extending `:syntax`, I was thinking of adding a `conceahhl` attr to it, to allow highlighting different conceals differently, which has been a pain for me for a while at vim-pandoc-syntax).\n\nExtending vimscript can also benefit vanilla vim, if the code could be proposed to `vim_dev` (I know...)\n",
            "created_at": "2015-01-04T18:54:11Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-68643976",
            "id": 68643976,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjQzOTc2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68643976/reactions"
            },
            "updated_at": "2015-01-04T18:54:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68643976",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/221465?v=4",
                "events_url": "https://api.github.com/users/fmoralesc/events{/privacy}",
                "followers_url": "https://api.github.com/users/fmoralesc/followers",
                "following_url": "https://api.github.com/users/fmoralesc/following{/other_user}",
                "gists_url": "https://api.github.com/users/fmoralesc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fmoralesc",
                "id": 221465,
                "login": "fmoralesc",
                "node_id": "MDQ6VXNlcjIyMTQ2NQ==",
                "organizations_url": "https://api.github.com/users/fmoralesc/orgs",
                "received_events_url": "https://api.github.com/users/fmoralesc/received_events",
                "repos_url": "https://api.github.com/users/fmoralesc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fmoralesc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fmoralesc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fmoralesc"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Sure if vim_dev accepts, but otherwise extending vimscript really complicates the burden of compatibility (or managing, documenting, and providing solutions for incompatibility) and always requires difficult, time-hungry decisions. Incompatibility is always an option (and sometimes we will choose it), but we can also work on making our API really nice to work with (from vimscript, too, using `rpcnotify()` and friends).\n",
            "created_at": "2015-01-04T23:23:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-68654517",
            "id": 68654517,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjU0NTE3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68654517/reactions"
            },
            "updated_at": "2015-01-04T23:23:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68654517",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> But extending vimscript seems unnecessary to me in this case. We should only reuse the internal structures, but expose the functionality via the API only.\n\nThe vimscript changes are minimal, all I'm proposing is to allow arbitrary key/value pairs after the `:highlight GROUP` command(as opposed to allowing only fixed keys such as guifg, ctermfg, etc). Highlight group data would be stored and passed as dictionaries, and UIs will only extract the information they support. \n\nFor example, if a TUI and a GUI are connected to the same instance and need to display a highlight group, the TUI would check for ctermfg/ctermbg while the GUI would check for guifg/guibg and even richer information such as alpha level or images as suggested by @fmoralesc suggested. \n\nFor associating the highlight information with arbitrary positions, I vote for @bfredl suggestion: a buffer-aware`matchaddpos()`\n\nBesides being backwards compatible and allowing arbitrary formatting to be associated with text, this has the advantage of simplifying code (I estimate about 40% of syntax.c could be removed).\n",
            "created_at": "2015-01-05T00:15:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-68656372",
            "id": 68656372,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjU2Mzcy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68656372/reactions"
            },
            "updated_at": "2015-01-05T00:15:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68656372",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">  allow arbitrary key/value pairs after the :highlight GROUP command\n\nOk, ~~but storing arbitrary information (including data that has nothing to do with highlighting, e.g. the value of a variable, or a contextual error message) via `highlight` sounds messy~~. I hope that we will also provide a proper API call to steer new plugins away from using `:highlight` for non-highlight purposes.\n",
            "created_at": "2015-01-05T15:08:20Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-68719969",
            "id": 68719969,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NzE5OTY5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68719969/reactions"
            },
            "updated_at": "2015-09-23T05:33:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/68719969",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "NONE",
            "body": "Just as a reference what I'm talking about: The \"inspect\" buffer in the video at http://malisper.me/2015/07/14/debugging-lisp-part-2-inspecting/ is a good example.\n",
            "created_at": "2015-07-15T13:59:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-121624389",
            "id": 121624389,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDEyMTYyNDM4OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/121624389/reactions"
            },
            "updated_at": "2015-07-15T13:59:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/121624389",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/496570?v=4",
                "events_url": "https://api.github.com/users/phmarek/events{/privacy}",
                "followers_url": "https://api.github.com/users/phmarek/followers",
                "following_url": "https://api.github.com/users/phmarek/following{/other_user}",
                "gists_url": "https://api.github.com/users/phmarek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/phmarek",
                "id": 496570,
                "login": "phmarek",
                "node_id": "MDQ6VXNlcjQ5NjU3MA==",
                "organizations_url": "https://api.github.com/users/phmarek/orgs",
                "received_events_url": "https://api.github.com/users/phmarek/received_events",
                "repos_url": "https://api.github.com/users/phmarek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/phmarek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/phmarek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/phmarek"
            }
        },
        {
            "author_association": "NONE",
            "body": "Coming back to that, having _some_ data stored in the syntax definition might be okay; but for multiple \"buttons\" in a menu these buttons would need to store per-button arbitrary data.\n\nKinda like HTML, ya know ;)\n\nSorry, I didn't follow the recent changes... does Neovim already have \"rich\" text?\n",
            "created_at": "2015-09-23T05:28:24Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-142498047",
            "id": 142498047,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDE0MjQ5ODA0Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/142498047/reactions"
            },
            "updated_at": "2015-09-23T05:28:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/142498047",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/496570?v=4",
                "events_url": "https://api.github.com/users/phmarek/events{/privacy}",
                "followers_url": "https://api.github.com/users/phmarek/followers",
                "following_url": "https://api.github.com/users/phmarek/following{/other_user}",
                "gists_url": "https://api.github.com/users/phmarek/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/phmarek",
                "id": 496570,
                "login": "phmarek",
                "node_id": "MDQ6VXNlcjQ5NjU3MA==",
                "organizations_url": "https://api.github.com/users/phmarek/orgs",
                "received_events_url": "https://api.github.com/users/phmarek/received_events",
                "repos_url": "https://api.github.com/users/phmarek/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/phmarek/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/phmarek/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/phmarek"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I retract my objection to storing text annotation/metadata in `:highlight` structures. `:highlight` is a reasonable place for metadata/annotations. But of course this should be API-driven.\n\n> does Neovim already have \"rich\" text?\n\nNo.\n",
            "created_at": "2015-09-23T05:35:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-142498819",
            "id": 142498819,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDE0MjQ5ODgxOQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/142498819/reactions"
            },
            "updated_at": "2015-09-23T05:35:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/142498819",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "[tree-sitter](https://github.com/tree-sitter) (see also [video](https://youtu.be/a1rC79DHpmY)) looks like a viable option.\r\n\r\n- C lib with minimal dependencies\r\n- more momentum (and more grammars) than scintillua just by association with Atom editor\r\n- advanced features like incremental parsing and error recovery (not sure if scintillua has those)\r\n",
            "created_at": "2017-12-23T14:26:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-353728712",
            "id": 353728712,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzcyODcxMg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 37,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 11,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 48,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/353728712/reactions"
            },
            "updated_at": "2017-12-23T14:27:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/353728712",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "NONE",
            "body": "The recent version of Atom editor [has switched on tree-sitter by default][1]. Do you think this might be a signal to start evaluating it for NeoVim as well? Tree-sitter's feature set described in [this talk from the Strange Loop][2] looks very promising.\r\n\r\n[1]: http://blog.atom.io/2018/10/23/atom-1-32.html\r\n[2]: https://www.youtube.com/watch?v=Jes3bD6P0To",
            "created_at": "2018-11-02T13:39:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-435383095",
            "id": 435383095,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTM4MzA5NQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/435383095/reactions"
            },
            "updated_at": "2018-11-02T13:39:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/435383095",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/88045?v=4",
                "events_url": "https://api.github.com/users/narqo/events{/privacy}",
                "followers_url": "https://api.github.com/users/narqo/followers",
                "following_url": "https://api.github.com/users/narqo/following{/other_user}",
                "gists_url": "https://api.github.com/users/narqo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/narqo",
                "id": 88045,
                "login": "narqo",
                "node_id": "MDQ6VXNlcjg4MDQ1",
                "organizations_url": "https://api.github.com/users/narqo/orgs",
                "received_events_url": "https://api.github.com/users/narqo/received_events",
                "repos_url": "https://api.github.com/users/narqo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/narqo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/narqo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/narqo"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@narqo I'm in the process of evaluating it. The idea is to expose the tree to in-process lua plugins.",
            "created_at": "2018-11-02T13:50:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-435386279",
            "id": 435386279,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTM4NjI3OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 9,
                "laugh": 0,
                "rocket": 0,
                "total_count": 12,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/435386279/reactions"
            },
            "updated_at": "2018-11-02T13:50:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/435386279",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "NONE",
            "body": "I'm also thinking for quite some time how tree-sitter could be implemented in such a way that it is flexible enough to provide advanced features like the following:\r\n* multiple languages/ASTs in one file/buffer like described here: http://tree-sitter.github.io/tree-sitter/using-parsers#multi-language-documents\r\n* (possibly multiple) ASTs via MessagePack API to provide a convenient/faster way for e.g. linting, semantic (code) completion, concealing, advanced code navigation, folding etc.\r\n   * This might be quite difficult to do performantly (don't send the whole AST all the time over the API, possibly differential/incremental updates)\r\n* syntax highlighting/styling via MessagePack API?\r\n    * I had in mind to implement a plugin(?) that uses a simple query based language like CSS to select nodes in the AST to allow advanced conditional styling (e.g. function parameter identifiers can look different than identifiers in a block statement)\r\n\r\nI'm not sure if it is a good idea to do most of the stuff via the MessagePack API, as it could be quite challenging to do it performantly. On the other hand it would provide a lot of freedom for developers to implement all kinds of plugins in their language.\r\nIn-process plugins would make it of course quite a lot simpler.\r\n\r\nIn general tree-sitter seems to be a well implemented API that is pretty fast (parsed the whole screen.c of this repo in about 25 ms on a little bit older i7-4870hq, changes should be pretty fast with incremental parsing).\r\n\r\n@bfredl could you explain in more detail how you would do the in-process lua plugins?",
            "created_at": "2018-11-02T16:52:24Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-435442809",
            "id": 435442809,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTQ0MjgwOQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/435442809/reactions"
            },
            "updated_at": "2018-11-02T16:52:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/435442809",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9267430?v=4",
                "events_url": "https://api.github.com/users/Philipp-M/events{/privacy}",
                "followers_url": "https://api.github.com/users/Philipp-M/followers",
                "following_url": "https://api.github.com/users/Philipp-M/following{/other_user}",
                "gists_url": "https://api.github.com/users/Philipp-M/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Philipp-M",
                "id": 9267430,
                "login": "Philipp-M",
                "node_id": "MDQ6VXNlcjkyNjc0MzA=",
                "organizations_url": "https://api.github.com/users/Philipp-M/orgs",
                "received_events_url": "https://api.github.com/users/Philipp-M/received_events",
                "repos_url": "https://api.github.com/users/Philipp-M/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Philipp-M/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Philipp-M/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Philipp-M"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@phmarek In my view tree-sitter should be for the things that are \"fast enough, so it even doesn't need to be async\", while LSP (and other RPC processes) covers the slower, but more semantic stuff.\r\n\r\nThere is no exact plan, but my aim is to do stuff in lua/luajit as much as possible and add core extension points where needed, #9170 is the first example. I would also like to experiment with callback-driven highlighting, like nvim invoking a lua function per line (or per viewport, for somewhat lower overhead), which returns some kind of display list (highlight of existing byte ranges + perhaps virtual text). If it turns out to be too slow, we can of course do everything in C, but adding these kind of extension points are still useful.",
            "created_at": "2018-11-02T17:45:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-435457239",
            "id": 435457239,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTQ1NzIzOQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 5,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/435457239/reactions"
            },
            "updated_at": "2018-11-02T17:45:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/435457239",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "NONE",
            "body": "@bfredl \r\nOk the developer of Tree-sitter\r\nactually says similar things: https://news.ycombinator.com/item?id=18349488\r\nSo it's probably really a little bit over the top to use tree-sitter for all the features I proposed.\r\n\r\nAs I think we should keep neovim as modular as possible, is it possible to write in-process plugins in C that are not compiled within neovim that may access the tree-sitter-tree(s) directly? I have searched quite a bit but couldn't find anything regarding it (maybe an issue worth itself)\r\n\r\nI think especially with the \"fast enough, so it even doesn't need to be async\" strategy (which I support) we should keep in mind that Lua may not be fast enough for a Syntax API for different features, or we have to carefully design this Lua-tree-sitter API so that the main work will still be done by the neovim binary.\r\nBut I guess it's a good idea to start with Lua, and test how well it behaves.",
            "created_at": "2018-11-04T11:17:34Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-435661014",
            "id": 435661014,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTY2MTAxNA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/435661014/reactions"
            },
            "updated_at": "2018-11-04T11:18:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/435661014",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9267430?v=4",
                "events_url": "https://api.github.com/users/Philipp-M/events{/privacy}",
                "followers_url": "https://api.github.com/users/Philipp-M/followers",
                "following_url": "https://api.github.com/users/Philipp-M/following{/other_user}",
                "gists_url": "https://api.github.com/users/Philipp-M/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Philipp-M",
                "id": 9267430,
                "login": "Philipp-M",
                "node_id": "MDQ6VXNlcjkyNjc0MzA=",
                "organizations_url": "https://api.github.com/users/Philipp-M/orgs",
                "received_events_url": "https://api.github.com/users/Philipp-M/received_events",
                "repos_url": "https://api.github.com/users/Philipp-M/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Philipp-M/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Philipp-M/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Philipp-M"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> As I think we should keep neovim as modular as possible, is it possible to write in-process plugins in C that are not compiled within neovim that may access the tree-sitter-tree(s) directly?  I have searched quite a bit but couldn't find anything regarding it (maybe an issue worth itself)\r\n\r\nTree-sitter has `TSTree *ts_tree_copy(const TSTree *)` which can be used to safely share a otherwise lua-managed tree with some C code (even on a separate thread). \r\n\r\n> I think especially with the \"fast enough, so it even doesn't need to be async\" strategy (which I support) we should keep in mind that Lua may not be fast enough for a Syntax API for different features, or we have to carefully design this Lua-tree-sitter API so that the main work will still be done by the neovim binary.\r\nBut I guess it's a good idea to start with Lua, and test how well it behaves.\r\n\r\nDon't worry, I will use detailed profiling and comparison with the existing regex syntax highlighting (which easily can take 40% of redraw time of nvim core+TUI). The main reason for using lua, is that luajit FFI + a basic lua REPL plugin effectively gives me a REPL for the TS API for quick (but unsafe) experimenting and prototyping. This of course needs to be replaced eventually by at least safe lua C wrappers with proper GC support.",
            "created_at": "2018-11-04T11:50:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-435663052",
            "id": 435663052,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTY2MzA1Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/435663052/reactions"
            },
            "updated_at": "2018-11-04T11:50:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/435663052",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Awesome to see this being worked on! 😄 🎉 Re performance and sync/async, I recalled this blog post by the author of YouCompleteMe: https://plus.google.com/u/1/+StrahinjaMarkovi%C4%87/posts/Zmr5uf2jCHm. His conclusion was that serializing 100kb of text to JSON, shipping back and forth with HTTP and deserializing again took **3 ms** => RPC was a none-issue. The author of Xi, which is probably the most perfomance-oriented editor ever made, has reached the same conclusion and uses JSON RPC for the API: https://youtu.be/4FbQre9VQLI?t=664.\r\n\r\ntl;dr let's not count out MessagePack RPC as too slow before it's actually been tested and benchmarked, the results might be surprising! 🙂 ",
            "created_at": "2018-11-05T12:58:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-435864932",
            "id": 435864932,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTg2NDkzMg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/435864932/reactions"
            },
            "updated_at": "2018-11-05T12:58:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/435864932",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3405586?v=4",
                "events_url": "https://api.github.com/users/schmee/events{/privacy}",
                "followers_url": "https://api.github.com/users/schmee/followers",
                "following_url": "https://api.github.com/users/schmee/following{/other_user}",
                "gists_url": "https://api.github.com/users/schmee/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/schmee",
                "id": 3405586,
                "login": "schmee",
                "node_id": "MDQ6VXNlcjM0MDU1ODY=",
                "organizations_url": "https://api.github.com/users/schmee/orgs",
                "received_events_url": "https://api.github.com/users/schmee/received_events",
                "repos_url": "https://api.github.com/users/schmee/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/schmee/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/schmee/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/schmee"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "The reason to not use RPC here is not that RPC is too slow - it rather just that tree-sitter is fast enough that we can do TS syntax highlighting in the main thread. There would be no reason to not _combine_ sync  _syntax_ highlighting (say typenames and struct members, like in the TS demo video) with async _semantic_ highlighing from LSP (say to distinguish function-local, static and global names without syntactic difference), or other async source.",
            "created_at": "2018-11-05T13:27:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-435872917",
            "id": 435872917,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTg3MjkxNw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/435872917/reactions"
            },
            "updated_at": "2018-11-05T13:27:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/435872917",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think I've got incremental parsing basically working. Here is a small demo (follow node at cursor position, lookup parents recursively, best-guess recovery with syntax error):\r\n[![asciicast](https://asciinema.org/a/qjRVAwEOFh6KzhIN9TDHDDjWr.svg)](https://asciinema.org/a/qjRVAwEOFh6KzhIN9TDHDDjWr?t=5&speed=0.7&)\r\n\r\nCode coming soon (just need to fix the build/link story to not be positively insane)...",
            "created_at": "2018-11-05T16:10:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-435932649",
            "id": 435932649,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTkzMjY0OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 31,
                "laugh": 0,
                "rocket": 0,
                "total_count": 31,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/435932649/reactions"
            },
            "updated_at": "2018-11-05T16:10:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/435932649",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "NONE",
            "body": "@bfredl That’s pretty exciting!\r\n\r\nThis may be a dumb question, but where does the knowledge behind 'use of undeclared identifier’ come from? Doesn’t that require looking into all the included header files?",
            "created_at": "2018-11-05T17:12:20Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-435955791",
            "id": 435955791,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTk1NTc5MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/435955791/reactions"
            },
            "updated_at": "2018-11-05T17:12:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/435955791",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/378760?v=4",
                "events_url": "https://api.github.com/users/cormacrelf/events{/privacy}",
                "followers_url": "https://api.github.com/users/cormacrelf/followers",
                "following_url": "https://api.github.com/users/cormacrelf/following{/other_user}",
                "gists_url": "https://api.github.com/users/cormacrelf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cormacrelf",
                "id": 378760,
                "login": "cormacrelf",
                "node_id": "MDQ6VXNlcjM3ODc2MA==",
                "organizations_url": "https://api.github.com/users/cormacrelf/orgs",
                "received_events_url": "https://api.github.com/users/cormacrelf/received_events",
                "repos_url": "https://api.github.com/users/cormacrelf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cormacrelf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cormacrelf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/cormacrelf"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "That is actually LSP/clangd. I first thought I should turn if off, then I thought maybe not, to showcase the point I tried to make above: combine fast sync stuff with slow async stuff (notice the longer lag until clangd had time to emit the error).",
            "created_at": "2018-11-05T17:18:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-435957741",
            "id": 435957741,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTk1Nzc0MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 4,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/435957741/reactions"
            },
            "updated_at": "2018-11-05T17:18:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/435957741",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@bfredl very cool! 😄 a question: is the syntax highlighting in the example also coming from TS?",
            "created_at": "2018-11-05T17:26:29Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-435960725",
            "id": 435960725,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTk2MDcyNQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/435960725/reactions"
            },
            "updated_at": "2018-11-05T17:26:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/435960725",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/3405586?v=4",
                "events_url": "https://api.github.com/users/schmee/events{/privacy}",
                "followers_url": "https://api.github.com/users/schmee/followers",
                "following_url": "https://api.github.com/users/schmee/following{/other_user}",
                "gists_url": "https://api.github.com/users/schmee/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/schmee",
                "id": 3405586,
                "login": "schmee",
                "node_id": "MDQ6VXNlcjM0MDU1ODY=",
                "organizations_url": "https://api.github.com/users/schmee/orgs",
                "received_events_url": "https://api.github.com/users/schmee/received_events",
                "repos_url": "https://api.github.com/users/schmee/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/schmee/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/schmee/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/schmee"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "No I'm not that far yet :sweat_smile: Only the matchparen-like limits and the node name in the message area.",
            "created_at": "2018-11-05T17:27:53Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-435961219",
            "id": 435961219,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTk2MTIxOQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/435961219/reactions"
            },
            "updated_at": "2018-11-05T17:27:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/435961219",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "NONE",
            "body": "@bfredl how is your tree-sitter work coming along? I had to open some multi-megabyte HTML files (terms and conditions) and had to switch highlighting off to move the cursor. That is how I stumbled here! ",
            "created_at": "2019-09-05T07:06:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-528230152",
            "id": 528230152,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyODIzMDE1Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 4,
                "rocket": 0,
                "total_count": 6,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/528230152/reactions"
            },
            "updated_at": "2019-09-05T07:06:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/528230152",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1850188?v=4",
                "events_url": "https://api.github.com/users/felipesere/events{/privacy}",
                "followers_url": "https://api.github.com/users/felipesere/followers",
                "following_url": "https://api.github.com/users/felipesere/following{/other_user}",
                "gists_url": "https://api.github.com/users/felipesere/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/felipesere",
                "id": 1850188,
                "login": "felipesere",
                "node_id": "MDQ6VXNlcjE4NTAxODg=",
                "organizations_url": "https://api.github.com/users/felipesere/orgs",
                "received_events_url": "https://api.github.com/users/felipesere/received_events",
                "repos_url": "https://api.github.com/users/felipesere/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/felipesere/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/felipesere/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/felipesere"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@felipesere It will be one of my priorities after 0.4 is released (very soon, hopefully).",
            "created_at": "2019-09-05T10:00:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-528292672",
            "id": 528292672,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyODI5MjY3Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 23,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 23,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/528292672/reactions"
            },
            "updated_at": "2019-09-05T10:00:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/528292672",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "NONE",
            "body": "I'm not sure if this is off-topic but https://github.com/neovim/neovim/issues/1767#issuecomment-435932649 got me thinking:  Will it be possible, once the tree-sitter branch is merged, to use language-specific syntax objects like `identifier`, `function_definition` directly from VimScript?  I'm thinking of cases where for instance `iskeyword` option isn't precise enough (think e.g. Rust with it's `foo!()` and `foo!` being a keyword if `foo` is a macro, but `!foo` not being a keyword in `if !foo {}`).  I see a huge potential in this.  It always struck me as odd that movements like `(` don't make much sense in almost any programming language, only when writing prose.  With tree-sitter merged in, there could be language-specific, *precise* text objects available under a single key in Vim!  Another example is [targets.vim](https://github.com/wellle/targets.vim) implementing function argument text object.  It easily gets confused when there are commas within a function argument text object.  I believe tree-sitter has the potential to fix that shortcoming.",
            "created_at": "2019-10-24T19:34:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-546069553",
            "id": 546069553,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU0NjA2OTU1Mw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 4,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/546069553/reactions"
            },
            "updated_at": "2019-10-24T19:34:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/546069553",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/165678?v=4",
                "events_url": "https://api.github.com/users/adaszko/events{/privacy}",
                "followers_url": "https://api.github.com/users/adaszko/followers",
                "following_url": "https://api.github.com/users/adaszko/following{/other_user}",
                "gists_url": "https://api.github.com/users/adaszko/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/adaszko",
                "id": 165678,
                "login": "adaszko",
                "node_id": "MDQ6VXNlcjE2NTY3OA==",
                "organizations_url": "https://api.github.com/users/adaszko/orgs",
                "received_events_url": "https://api.github.com/users/adaszko/received_events",
                "repos_url": "https://api.github.com/users/adaszko/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/adaszko/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/adaszko/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/adaszko"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Will it be possible, once the tree-sitter branch is merged, to use language-specific syntax objects like `identifier`, `function_definition` directly from VimScript\r\n\r\nYes. Directly from Lua, which is accessible from Vimscript. Initially however, we will provide only a query API. We will document patterns for using the API to query syntax, which can be used to create mappings. Later, we will think about adding first-class Normal-mode commands for common cases like \"around Function\" (`af`, `if`), etc.",
            "created_at": "2019-10-30T19:58:05Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-548086376",
            "id": 548086376,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODA4NjM3Ng==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 11,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 15,
                "hooray": 7,
                "laugh": 0,
                "rocket": 9,
                "total_count": 42,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/548086376/reactions"
            },
            "updated_at": "2019-10-30T19:58:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/548086376",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "A lot of work has been done in this area. more focused issues / drafts are tracking pieces that are missing.",
            "created_at": "2024-03-22T07:49:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/1767#issuecomment-2014525812",
            "id": 2014525812,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1767",
            "node_id": "IC_kwDOAPphoM54Ezl0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2014525812/reactions"
            },
            "updated_at": "2024-03-22T07:49:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2014525812",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        }
    ],
    "comments": 51,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/1767/comments",
    "created_at": "2015-01-03T14:47:07Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/1767/events",
    "html_url": "https://github.com/neovim/neovim/issues/1767",
    "id": 53305723,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "regex syntax or non-regex parsing, lpeg, grammars",
            "id": 531600085,
            "name": "syntax",
            "node_id": "MDU6TGFiZWw1MzE2MDAwODU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/syntax"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "extmarks, decorations, virtual text, namespaces",
            "id": 1680119719,
            "name": "extmarks",
            "node_id": "MDU6TGFiZWwxNjgwMTE5NzE5",
            "url": "https://api.github.com/repos/neovim/neovim/labels/extmarks"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1799626557,
            "name": "treesitter",
            "node_id": "MDU6TGFiZWwxNzk5NjI2NTU3",
            "url": "https://api.github.com/repos/neovim/neovim/labels/treesitter"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/1767/labels{/name}",
    "locked": true,
    "milestone": {
        "closed_at": null,
        "closed_issues": 343,
        "created_at": "2023-02-02T14:11:43Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
            "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
            "followers_url": "https://api.github.com/users/bfredl/followers",
            "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
            "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bfredl",
            "id": 1363104,
            "login": "bfredl",
            "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
            "organizations_url": "https://api.github.com/users/bfredl/orgs",
            "received_events_url": "https://api.github.com/users/bfredl/received_events",
            "repos_url": "https://api.github.com/users/bfredl/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bfredl"
        },
        "description": "",
        "due_on": "2024-05-01T07:00:00Z",
        "html_url": "https://github.com/neovim/neovim/milestone/36",
        "id": 8997654,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/36/labels",
        "node_id": "MI_kwDOAPphoM4AiUsW",
        "number": 36,
        "open_issues": 38,
        "state": "open",
        "title": "0.10",
        "updated_at": "2024-04-01T11:13:57Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/36"
    },
    "node_id": "MDU6SXNzdWU1MzMwNTcyMw==",
    "number": 1767,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 13,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 13,
        "url": "https://api.github.com/repos/neovim/neovim/issues/1767/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/1767/timeline",
    "title": "structured/\"rich\" text, text annotations/overlay",
    "updated_at": "2024-03-28T01:48:47Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/1767",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/496570?v=4",
        "events_url": "https://api.github.com/users/phmarek/events{/privacy}",
        "followers_url": "https://api.github.com/users/phmarek/followers",
        "following_url": "https://api.github.com/users/phmarek/following{/other_user}",
        "gists_url": "https://api.github.com/users/phmarek/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/phmarek",
        "id": 496570,
        "login": "phmarek",
        "node_id": "MDQ6VXNlcjQ5NjU3MA==",
        "organizations_url": "https://api.github.com/users/phmarek/orgs",
        "received_events_url": "https://api.github.com/users/phmarek/received_events",
        "repos_url": "https://api.github.com/users/phmarek/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/phmarek/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/phmarek/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/phmarek"
    }
}