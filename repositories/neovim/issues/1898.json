{
    "active_lock_reason": "resolved",
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "The 'vim' module exposed to python calls appears to be missing a few classes/functions/methods compared to Vim (at least) 7.4. This results in errors when attempting to use the [powerline](https://github.com/powerline/powerline) plugin for Vim.\n\n```\nError detected while processing function provider#python#Call:\nline    1:\nAttributeError(\"'Nvim' object has no attribute 'bindeval'\",)\n```\n\nExecuting `:python import vim; print dir(vim)` gets you the following output:\n\nIn ordinary Vim:\n\n```\n['Buffer', 'Dictionary', 'Function', 'List', 'Options', 'Range', 'TabPage',\n'VAR_DEF_SCOPE', 'VAR_FIXED', 'VAR_LOCKED', 'VAR_SCOPE', 'VIM_SPECIAL_PATH',\n'Window', '_Loader', '__doc__', '__name__', '__package__', '_chdir', '_fchdir',\n'_find_module', '_get_paths', '_getcwd', '_load_module', 'bindeval', 'buffers',\n'chdir', 'command', 'current', 'error', 'eval', 'fchdir', 'find_module',\n'foreach_rtp', 'options', 'os', 'path_hook', 'strwidth', 'tabpages', 'vars',\n'vvars', 'windows']\n```\n\nIn NeoVim:\n\n```\n['__class__', '__delattr__', '__dict__', '__doc__', '__format__',\n'__getattribute__', '__hash__', '__init__', '__module__', '__new__',\n'__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__',\n'__str__', '__subclasshook__', '__weakref__', '_session', 'buffers',\n'channel_id', 'chdir', 'command', 'current', 'err_write', 'error', 'eval',\n'fchdir', 'feedkeys', 'foreach_rtp', 'from_session', 'input',\n'list_runtime_paths', 'metadata', 'options', 'out_write', 'quit',\n'replace_termcodes', 'session', 'strwidth', 'subscribe', 'tabpages',\n'ui_attach', 'ui_detach', 'ui_try_resize', 'unsubscribe', 'vars', 'vvars',\n'windows', 'with_hook']\n```\n\nI'm not entirely sure if the need for any/all of these is obviated by some of the NeoVim changes, but at least the powerline plugin explicitly relies on \"bindeval,\" which NeoVim does not expose.\n",
    "closed_at": "2024-10-01T15:26:53Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk"
    },
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "From [`:help nvim-python-intro`](http://neovim.org/doc/user/nvim_python.html#nvim-python-intro):\n\n> For now only the old Vim 7.3 API is supported.\n\nSo this has just not been implemented yet; I don't know when this will happen, though.\n",
            "created_at": "2015-01-27T19:07:15Z",
            "html_url": "https://github.com/neovim/neovim/issues/1898#issuecomment-71707332",
            "id": 71707332,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1898",
            "node_id": "MDEyOklzc3VlQ29tbWVudDcxNzA3MzMy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/71707332/reactions"
            },
            "updated_at": "2015-01-27T19:08:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/71707332",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/339435?v=4",
                "events_url": "https://api.github.com/users/fwalch/events{/privacy}",
                "followers_url": "https://api.github.com/users/fwalch/followers",
                "following_url": "https://api.github.com/users/fwalch/following{/other_user}",
                "gists_url": "https://api.github.com/users/fwalch/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fwalch",
                "id": 339435,
                "login": "fwalch",
                "node_id": "MDQ6VXNlcjMzOTQzNQ==",
                "organizations_url": "https://api.github.com/users/fwalch/orgs",
                "received_events_url": "https://api.github.com/users/fwalch/received_events",
                "repos_url": "https://api.github.com/users/fwalch/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fwalch/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fwalch/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fwalch"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "AFAIR, bindeval is the only \"important\" thing that is missing. Most common Python plugins out there run without problems, unless they use bindeval (which most of them don't). \nNow that plugin arch has stabilized, maybe @tarruda could comment if support for bindeval is feasible. Would be a pity having to advertise neovim as 7.3 API only just because of that. \n",
            "created_at": "2015-01-27T20:24:19Z",
            "html_url": "https://github.com/neovim/neovim/issues/1898#issuecomment-71720917",
            "id": 71720917,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1898",
            "node_id": "MDEyOklzc3VlQ29tbWVudDcxNzIwOTE3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/71720917/reactions"
            },
            "updated_at": "2015-01-27T20:24:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/71720917",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/135757?v=4",
                "events_url": "https://api.github.com/users/elmart/events{/privacy}",
                "followers_url": "https://api.github.com/users/elmart/followers",
                "following_url": "https://api.github.com/users/elmart/following{/other_user}",
                "gists_url": "https://api.github.com/users/elmart/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/elmart",
                "id": 135757,
                "login": "elmart",
                "node_id": "MDQ6VXNlcjEzNTc1Nw==",
                "organizations_url": "https://api.github.com/users/elmart/orgs",
                "received_events_url": "https://api.github.com/users/elmart/received_events",
                "repos_url": "https://api.github.com/users/elmart/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/elmart/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/elmart/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/elmart"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Both `bindeval()` and the Neovim python client are new. Isn't it reasonable to expect plugin authors to choose one or the other? After all, choosing `bindeval()` is a choice not to support vim 7.3. (or to add separate logic that does support it). If plugin authors are willing to support vim 7.3. and 7.4, they can support neovim too, or instead.\n",
            "created_at": "2015-01-27T21:21:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/1898#issuecomment-71730378",
            "id": 71730378,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1898",
            "node_id": "MDEyOklzc3VlQ29tbWVudDcxNzMwMzc4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/71730378/reactions"
            },
            "updated_at": "2015-01-27T21:21:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/71730378",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> So, if there's a strong reason not to support bindeval, then it's ok. But if not, then I would support it, even if non-optimal. In other words, we should try to make writing neovim-specific code something optional, as far as we can.\n\nHere are some reasons for not implementing bindeval:\n- Main reason: bindeval was introduced in 7.4 and does not seem to have widespread usage, so I don't think its worth the effort\n- It would be very complex to correctly maintain reference count across process for garbage collection. The most sensible approach would be to use weak references in the python host(which does not fully emulate the current bindeval behavior)\n- It would make the API more complex(we would need reference types for vimscript lists and dicts and methods to operate on those) just for the sake of maintaing 100% compatibility with python/lua APIs\n- IMO there's little reason for the existence of bindeval, I've done some benchmarks, and its possible to transfer more data than any plugin should ever need without noticeable delay(and that would be even faster for vim-python since its everything in the same process). If for some other reason one absolutely needs to manipulate vimscript objects directly, its possible to do so with vimscript functions that are called from python.\n\nWith that said, it may be possible to emulate bindeval without changes to the API by including some support vimscript that is called from python. For example, consider this vimscript code:\n\n``` vim\nlet s:objects = {}\nlet s:id = 1\n\nfunction! BindEval(str)\n  let id = s:id\n  let s:id += 1\n  let s:objects[id] = eval(str)\n  return id\nendfunction\n\nfunction! Unref(id)\n  call remove(s:objects, a:id)\nendfunction\n\nfunction! DictGet(id, key)\n  let object = s:objects[a:id]\n  if type(object) != type({})\n    throw 'Not a dict'\n  endif\n  return object[a:key] \nendfunction\n\n\" Plus some other functions to manipulate dicts/lists\n```\n\nClearly the above approach still would have to solve problems of resource leak(when should a remote reference be freed?), but at least no changes to the C API are required. As I said, I haven't done this yet because I don't think its worth the effort(I never used any plugin that depends on bindeval), but anyone is welcome to do so.\n",
            "created_at": "2015-01-28T02:53:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/1898#issuecomment-71772649",
            "id": 71772649,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1898",
            "node_id": "MDEyOklzc3VlQ29tbWVudDcxNzcyNjQ5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/71772649/reactions"
            },
            "updated_at": "2015-01-28T02:53:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/71772649",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> IMO there's little reason for the existence of bindeval, I've done some benchmarks, and its possible to transfer more data than any plugin should ever need without noticeable delay(and that would be even faster for vim-python since its everything in the same process). If for some other reason one absolutely needs to manipulate vimscript objects directly, its possible to do so with vimscript functions that are called from python.\n\nInput:\n1. A few KiB of _binary_ data.\n2. Using usual NL-used-for-Nul encoding within list of strings (i.e. what `readfile(, 'b')` returns).\n3. Pure Python and VimL implementation.\n\nThe second and third condition leads to the very expensive operation of dumping the data into a string coded in Python compared to `json.dumps` coded in C. This did a noticeable increase of performance in aurum, though I do not remember exact numbers (something like a one third of time cut). Though maybe it is possible to write `json.dumps` replacement the other way in Python so it is more performant.\n\n`vim.bindeval` gets rids of both the serialising and deserialising steps with conversion as simple as replacing Nuls with NLs (done by `str.replace`, not by bindings themselves).\n\nI am pretty sure that if you try Powerline in NeoVim unchanged with code for vim-7.0 (yes, this is supported) there will be greater problems then absense of bindeval: due to IPC and lots of blocking requests over it that are being made for a single &stl evaluation this is not going to work well I guess.\n",
            "created_at": "2015-01-28T05:59:18Z",
            "html_url": "https://github.com/neovim/neovim/issues/1898#issuecomment-71785409",
            "id": 71785409,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1898",
            "node_id": "MDEyOklzc3VlQ29tbWVudDcxNzg1NDA5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/71785409/reactions"
            },
            "updated_at": "2015-01-28T05:59:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/71785409",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@tarruda Ok. I still don't fully understand the ins and outs of this, but I'll take your word for it.\n\n@ZyX-I I'm not very sure about the meaning of your previous message. In any case: You're the main contributor to powerline. It has become a pretty popular plugin. So, having it not working with neovim is for sure taking many users away from us. You're also a very important contributor here. Then, have you got plans to add neovim support to poweline?\n",
            "created_at": "2015-01-28T09:20:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/1898#issuecomment-71803374",
            "id": 71803374,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1898",
            "node_id": "MDEyOklzc3VlQ29tbWVudDcxODAzMzc0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/71803374/reactions"
            },
            "updated_at": "2015-01-28T09:20:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/71803374",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/135757?v=4",
                "events_url": "https://api.github.com/users/elmart/events{/privacy}",
                "followers_url": "https://api.github.com/users/elmart/followers",
                "following_url": "https://api.github.com/users/elmart/following{/other_user}",
                "gists_url": "https://api.github.com/users/elmart/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/elmart",
                "id": 135757,
                "login": "elmart",
                "node_id": "MDQ6VXNlcjEzNTc1Nw==",
                "organizations_url": "https://api.github.com/users/elmart/orgs",
                "received_events_url": "https://api.github.com/users/elmart/received_events",
                "repos_url": "https://api.github.com/users/elmart/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/elmart/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/elmart/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/elmart"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> @tarruda Ok. I still don't fully understand the ins and outs of this, but I'll take your word for it.\n\nHere's some background on `vim.eval` and `vim.bindeval` to help understand:\n- `vim.eval`: Evaluate vim expression, recursively convert to a python object and pass to python code. There's no link between the converted and the original objects.\n- `vim.bindeval`: Evaluate vim expression, wrap into a python native class and return it, also increasing the reference count to the original vim object. The native class implements methods that operate directly on the original vim object(so when you do `d = vim.bindeval('{}'); d['key'] = 'value'` it is actually changing a vimscript dict, not a python dict) . When the python wrapper object is about to be garbage collected, the reference count to the vim object is decreased\n\n> I am pretty sure that if you try Powerline in NeoVim unchanged with code for vim-7.0 (yes, this is supported) there will be greater problems then absense of bindeval: due to IPC and lots of blocking requests over it that are being made for a single &stl evaluation this is not going to work well I guess.\n\nIs this only a guess or did you actually try it? YouCompleteMe constantly transfers the entire buffer between vim and python(not to mention to its daemon) and it still performs well even with big files such as eval.c\n",
            "created_at": "2015-01-28T11:13:39Z",
            "html_url": "https://github.com/neovim/neovim/issues/1898#issuecomment-71817463",
            "id": 71817463,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1898",
            "node_id": "MDEyOklzc3VlQ29tbWVudDcxODE3NDYz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/71817463/reactions"
            },
            "updated_at": "2015-01-28T11:13:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/71817463",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nOn January 28, 2015 2:13:45 PM EAT, Thiago de Arruda notifications@github.com wrote:\n\n> > @tarruda Ok. I still don't fully understand the ins and outs of this,\n> > but I'll take your word for it.\n> \n> Here's some background on `vim.eval` and `vim.bindeval` to help\n> understand:\n> - `vim.eval`: Evaluate vim expression, recursively convert to a python\n>   object and pass to python code. There's no link between the converted\n>   and the original objects.\n> - `vim.bindeval`: Evaluate vim expression, wrap into a python native\n>   class and return it, also increasing the reference count to the\n>   original vim object. The native class implements methods that operate\n>   directly on the original vim object(so when you do `d =\n>   vim.bindeval('{}'); d['key'] = 'value'` it is actually changing a\n>   vimscript dict, not a python dict) . When the python wrapper object is\n>   about to be garbage collected, the reference count to the vim object is\n>   decreased\n> \n> > I am pretty sure that if you try Powerline in NeoVim unchanged with\n> > code for vim-7.0 (yes, this is supported) there will be greater\n> > problems then absense of bindeval: due to IPC and lots of blocking\n> > requests over it that are being made for a single &stl evaluation this\n> > is not going to work well I guess.\n> \n> Is this only a guess or did you actually try it? YouCompleteMe\n> constantly transfers the entire buffer between vim and python(not to\n> mention to its daemon) and it still performs well even with big files\n> such as eval.c\n\nI have not. YCM is irrelevant because expected problem is _not_ data transfer rate and not even the speed of (de)serializing it like it was with aurum. Expected problem is an amount of context switches made by the processor. Each request (like vim.eval('&readonly')) makes process write to a socket and then wait for result and waiting ought to trigger switching to the next task. Also neovim is going to wait for :python to complete with the same result. And all this couples with switches made by the kernel for other reasons. Given that you can count for at least twenty requests per &statusline evaluation and that &statusline is evaluated at least once each time user presses a key (with a few exceptions) I do not need tests to have strong opinion this is not going to work well.\n\nAnd since opinion is rather strong I never actually tried to test. Do not think this will be too problematic: correct me if I am wrong, but API from around vim-7.0.112 (this is the first version with Python support which I was able to compile; it is now used in integration tests) is fully supported. I have a machine though where I almost never experience any performance problems with powerline, even though I sometimes get reports about them. If my opinion proves right even here the only reasonable variant will be a complete rewrite of Vim bindings.\n\n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/neovim/neovim/issues/1898#issuecomment-71817463\n\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niQJNBAEBCgA3BQJUyNg8MBwfMDI7PjIgHTg6PjswOSAQOzU6QTA9NEA+MjhHIDxr\ncC1wYXZAeWFuZGV4LnJ1PgAKCRBu+P2/AXZZIulKD/9fxyn9wxxRmkqw46QiVM9u\nRFluIjJMOsB5t8SLRBAx2HZwIbt5Y8nhIyCjOjl2gx+rsLBKHDFBujzjntrITuSG\nYsF3TBQPO77N1+rztCv/o+ZBgK4y1Y2gyaPdOnkUigasEtd5Kw45O5kZPHHneFAa\nIa87NuCiJMXr6VaouAs5irE8txUVue3njCdENGjjnQYQ3932TzPWIxhSPQZb91WO\nUrrYx1m/HdFX12RKvp2NOT6XVxqyyc+yl+TGH750MVAy2zprRHLcXr3335zx47X3\nppLqm05qva8k7WXiRfVPOjPo1IJQSztkD2aon4FR8fYUf4IeHWf0m37hfVbDcD2N\nV1ZpvyAy0XhG/8ZyJPQD4BsYI3ps1KOIXBVl5NlY4rhuLd7E7bYJZivXYj1QrVTB\n3eS/7VeZN8QKlLwsLEnBrccJMOOEKoLpxEvEJYk82BSxoKt97m6DnV2K3bqkcxS4\nBzeCDThPg7ODrnfo7wHKcaYxw1p1KBJKNqyOcijiI7zOQHz2pp935X4frXNeysnh\nNZhlYiyyBq88ljKOn867hk3uKDBlVGRZiSOCykrNjo0GwUjykfRb6qJzakL/5rWj\nHeogrJCFpmPdFBJpRq/1F7A4Qpz1GSEop0fRdbZYThOb+UxAwQkoGcaPiEtIEY2W\niV7z376fS25ogNvoaw4Yjg==\n=Vvg1\n-----END PGP SIGNATURE-----\n",
            "created_at": "2015-01-28T12:38:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/1898#issuecomment-71828573",
            "id": 71828573,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1898",
            "node_id": "MDEyOklzc3VlQ29tbWVudDcxODI4NTcz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/71828573/reactions"
            },
            "updated_at": "2015-01-28T12:38:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/71828573",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Yes, yes, I know about those. The part I don't fully understand is why new neovim plugin architecture plays bad with that. I can imagine, more or less, but haven't gone into the details.\n\nIts more a matter of not being worth the effort than limitations of the plugin architecture.\n\nThe problematic part is managing the lifetime of vim objects, which could be done by using weak references(when the vimscript refcount reaches 0, release the memory and throw an exception when the python code tries to access it later) but that is not 100% compatible with the current interface, and since compatibility would be the main goal this kinda becomes pointless.\n\nThe much more complex alternative would be to maintain references across the plugin host, but there are more cases to deal with(plugin host holding references is killed, for example).\n\nBoth approaches would require making the C API more complex, again for the sake of compatibility with very few plugins.\n",
            "created_at": "2015-01-28T14:33:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/1898#issuecomment-71843343",
            "id": 71843343,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1898",
            "node_id": "MDEyOklzc3VlQ29tbWVudDcxODQzMzQz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/71843343/reactions"
            },
            "updated_at": "2015-01-28T14:33:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/71843343",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> And since opinion is rather strong I never actually tried to test. Do not think this will be too problematic: correct me if I am wrong, but API from around vim-7.0.112 (this is the first version with Python support which I was able to compile; it is now used in integration tests) is fully supported. I have a machine though where I almost never experience any performance problems with powerline, even though I sometimes get reports about them. If my opinion proves right even here the only reasonable variant will be a complete rewrite of Vim bindings.\n\nI'm not sure if I understood you correctly, but are you suggesting a rewrite of neovim remote interface as the only reasonable choice for using powerline? If so, thats a very radical thought and I couldn't disagree more. Here are a couple of more reasonable approaches that comes to mind:\n- Adapt neovim-python compatibility layer to use a hack like I suggested in this [comment](https://github.com/neovim/neovim/issues/1898#issuecomment-71772649)\n- Adapt powerline code to not depend on bindeval(which can also be done by creating wrapper vim functions for accessing/modifying objects) and as an added bonus, make it compatible with vim 7.3\n\nEven if `bindeval` turns out to be an absolute requirement for powerline(according to your untested assumptions), I bet most other plugins can easily switch away from it without noticeable impact, [here's one](https://github.com/FelikZ/ctrlp-py-matcher/pull/11) that did it.\n\nAnother choice powerline users have is to switch to [vim-airline](https://github.com/bling/vim-airline) which seems to have a lot of powerline features without the python dependency.(Not sure if its a drop-in replacement for powerline, but it seems to be more popular)\n\nLet me conclude by reminding you that while the new remote plugin infrastructure won't have the same efficiency for marshaling data from/to nvim, I say it will be fast enough for 90% of the plugins out there. It also has the following advantages which I may already have mentioned:\n- Sandboxing: Plugins have a lesser chance of crashing the editor\n- Better threading support. Even if vim had thread-safe mechanisms for communicating with python threads, any signal delivered to vim could crash everything([ref](https://github.com/tarruda/vim/issues/5))\n- Support for plugins in programming languages that do not support embedding:\n  - [Golang](https://github.com/myitcv/neovim)\n  - [Haskell](https://github.com/osa1/neovim-hs/)\n  - [Elixir](https://github.com/awetzel/neovim-elixir)\n\nIMO the extra context switches and CPU cycles are heavily outweighted by these advantages.\n",
            "created_at": "2015-01-28T14:45:01Z",
            "html_url": "https://github.com/neovim/neovim/issues/1898#issuecomment-71845359",
            "id": 71845359,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1898",
            "node_id": "MDEyOklzc3VlQ29tbWVudDcxODQ1MzU5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/71845359/reactions"
            },
            "updated_at": "2015-01-28T14:45:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/71845359",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nOn January 28, 2015 5:45:06 PM EAT, Thiago de Arruda notifications@github.com wrote:\n\n> > And since opinion is rather strong I never actually tried to test. Do\n> > not think this will be too problematic: correct me if I am wrong, but\n> > API from around vim-7.0.112 (this is the first version with Python\n> > support which I was able to compile; it is now used in integration\n> > tests) is fully supported. I have a machine though where I almost never\n> > experience any performance problems with powerline, even though I\n> > sometimes get reports about them. If my opinion proves right even here\n> > the only reasonable variant will be a complete rewrite of Vim bindings.\n> \n> I'm not sure if I understood you correctly, but are you suggesting a\n> rewrite of neovim remote interface as the only reasonable choice for\n> using powerline? If so, thats a very radical thought and I couldn't\n\nNeoVim has an entity called \"Vim bindings\"? I have never heard of it. More details is in powerline issue tracker, powerline/powerline#1287.\n\n> disagree more. Here are a couple of more reasonable approaches that\n> comes to mind:\n> - Adapt neovim-python compatibility layer to use a hack like I\n>   suggested in this\n>   [comment](https://github.com/neovim/neovim/issues/1898#issuecomment-71772649)\n> - Adapt powerline code to not depend on bindeval(which can also be done\n>   by creating wrapper vim functions for accessing/modifying objects) and\n>   as an added bonus, make it compatible with vim 7.3\n> \n> Even if `bindeval` turns out to be an absolute requirement for\n> powerline(according to your untested assumptions), I bet most other\n> plugins can easily switch away from it without noticeable impact,\n> [here's one](https://github.com/FelikZ/ctrlp-py-matcher/pull/11) that\n> did it.\n> \n> Another choice powerline users have is to switch to\n> [vim-airline](https://github.com/bling/vim-airline) which seems to have\n> a lot of powerline features without the python dependency.(Not sure if\n> its a drop-in replacement for powerline, but it seems to be more\n> popular)\n> \n> Let me conclude by reminding you that while the new remote plugin\n> infrastructure won't have the same efficiency for marshaling data\n> from/to nvim, I say it will be fast enough for 90% of the plugins out\n> there. It also has the following advantages which I may already have\n> mentioned:\n> - Sandboxing: Plugins have a lesser chance of crashing the editor\n> - Better threading support. Even if vim had thread-safe mechanisms for\n>   communicating with python threads, any signal delivered to vim could\n>   crash everything([ref](https://github.com/tarruda/vim/issues/5))\n> - Support for plugins in programming languages that do not support\n>   embedding:\n>   - [Golang](https://github.com/myitcv/neovim)\n>   - [Haskell](https://github.com/osa1/neovim-hs/)\n>   - [Elixir](https://github.com/awetzel/neovim-elixir)\n> \n> IMO the extra context switches and CPU cycles are heavily outweighted\n> by these advantages.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/neovim/neovim/issues/1898#issuecomment-71845359\n\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niQJNBAEBCgA3BQJUyRBMMBwfMDI7PjIgHTg6PjswOSAQOzU6QTA9NEA+MjhHIDxr\ncC1wYXZAeWFuZGV4LnJ1PgAKCRBu+P2/AXZZIrLmD/oDEVMsviDFazm5aZ8kdcE8\n1A2TGDrysRVtKdyXARZIps13iAMMl2P+Cx0oW03oI3EZjVMbX3ksSPWmhWRPg2tE\nMS7BT3rm9kBX716KVh+kjY4074eUX4sQ6/I+x6+G0HNhY0SeJQRKSeabKx10ENAu\ntYffu7FCSsY9NZxJG6Qlef3bxSs6bS6ZYn6XJHGuXDHi50POWVbL21E+Bk69fDwS\nC2MTw7ORWSeftdrdNaCKos6sJRHblTptvA4tBkiFssP+KkE+YC1T+ET2cLfQszGv\nyD433YAljb4G1lRLnCpaX1RWXBJre79m/H8rXgn3LBYOlBIoobkiyqfW6/BX4qM8\naHFA5IMqSahY8Eo7oYwXf3pQI8tj1ZPs//Mgnv9pWeClW/BQQJe0eHZ12zSTkp8i\n9ZEVEoDJg7gPKX5+zG911asypOmGK1eieWftWuILimgmfazmTrYDP99Xba+up/aO\np6rAa2bOeRYRC1xxKNEMRVaQYs/F5gPhsryTwga8sFQkCvanIR2EVK2WLpuc/pMI\nAZI0cdAv8+fo3ms2/HdRwnDcp6vhggdboQ3J0fruEo8KVMTukbXKbAV+fTWXk/Lg\nZOL6Kl5/T/NWEFJX+d32uMz35Bigk4rY1LWsIcPPFlFZvM9djyknwW40ICEO0Cn+\nP+30pZJ67h1f9hTdwuHINQ==\n=1wf9\n-----END PGP SIGNATURE-----\n",
            "created_at": "2015-01-28T16:39:42Z",
            "html_url": "https://github.com/neovim/neovim/issues/1898#issuecomment-71867931",
            "id": 71867931,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1898",
            "node_id": "MDEyOklzc3VlQ29tbWVudDcxODY3OTMx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/71867931/reactions"
            },
            "updated_at": "2024-09-30T09:39:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/71867931",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I need weak reference for if_lua compatibilities.\nIt is not neovim's if_python problem.\n",
            "created_at": "2015-01-28T19:24:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/1898#issuecomment-71898028",
            "id": 71898028,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1898",
            "node_id": "MDEyOklzc3VlQ29tbWVudDcxODk4MDI4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/71898028/reactions"
            },
            "updated_at": "2015-01-28T19:24:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/71898028",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41495?v=4",
                "events_url": "https://api.github.com/users/Shougo/events{/privacy}",
                "followers_url": "https://api.github.com/users/Shougo/followers",
                "following_url": "https://api.github.com/users/Shougo/following{/other_user}",
                "gists_url": "https://api.github.com/users/Shougo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Shougo",
                "id": 41495,
                "login": "Shougo",
                "node_id": "MDQ6VXNlcjQxNDk1",
                "organizations_url": "https://api.github.com/users/Shougo/orgs",
                "received_events_url": "https://api.github.com/users/Shougo/received_events",
                "repos_url": "https://api.github.com/users/Shougo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Shougo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Shougo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Shougo"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Let me try to recap if I can follow the conversation. To support this, something like this would be needed in the C api:\n\n``` c\n/// references by external plugins (no sanity checks)\nint vim_ref(oid_t id) { return objmap[id].refcount++; }\nint vim_unref(oid_t id) { return objmap[id].refcount--; }\n\n/// returns kInvalidVimObject if there was a problem with the expression\noid_t vim_bindeval(const char *expr) {\n  // eval expression\n  oid_t id = ...;\n\n  int refcnt = vim_ref(id);\n  assert(refcnt == 1);\n\n  return id;\n}\n```\n\nWhere `objmap[]` would be (for efficiency's sake) a map storing only the vim variables that have been shared with external plugins.\n\n(this is likely horribly misguided, but I need a mental model and I'm not that well versed in our external API)\n\nA concern with this is that now plugins can \"crash\" neovim by referencing a lot of memory, dying (not dereferencing them) and then trying again until the OOM killer comes for neovim. Perhaps a per-plugin map is better, which could be cleaned whenever a plugin exists.\n\nAnyway, from @ZyX-I's explanation about the context switches that a socket read/write would provoke, I assume that the problem wouldn't be fixed even if `bindeval` where to implemented for Neovim. Every time the variable is read/written, it would need to send/recv on the socket anyway. In fact, I think the performance could be worse than just copying the entire object everytime (depending on object size, of course). In which case there would be only one send or recv per object per action.\n\nPlease correct me on everything.\n",
            "created_at": "2015-01-28T21:05:24Z",
            "html_url": "https://github.com/neovim/neovim/issues/1898#issuecomment-71915749",
            "id": 71915749,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1898",
            "node_id": "MDEyOklzc3VlQ29tbWVudDcxOTE1NzQ5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/71915749/reactions"
            },
            "updated_at": "2015-01-28T21:05:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/71915749",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@aktau I understand it this way:\n1. `Object vim_bindeval(String expr)` with `typedef struct { ObjectId id; ObjectType type; } ObjectReference;` that is one of the possible choices for union in `Object` (note: `vim_bindeval` may just as well return scalar values). This thing will increase the internal object reference counter by one and save object to `ObjectReferenceDetailed *objlist;` (`typedef struct { ObjectReference ref; void *object; } ObjectReferenceDetailed;`).\n2. Broadcasted message “please list all objects you currently posess”. If no client claims it posesses some object it is unreferenced and removed from `objlist`.\n3. API function `void vim_disown(ObjectReference objref);`.\n4. API function `void vim_hasobj(ObjectReference objref);` (this is being called in response to 2.).\n\nThe idea is that objects are normally obtained using `vim_bindeval` API function and deleted using `vim_disown` when needed. To prevent memory leaks when clients owning objects suddenly disconnected p. 2. is there. No `vim_ref`/`vim_unref` API functions provided: API knows only of one reference per `vim_bindeval` invocation just as it does in Vim now.\n",
            "created_at": "2015-01-29T04:04:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/1898#issuecomment-71965832",
            "id": 71965832,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1898",
            "node_id": "MDEyOklzc3VlQ29tbWVudDcxOTY1ODMy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/71965832/reactions"
            },
            "updated_at": "2015-01-29T04:04:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/71965832",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I tried to follow @ZyX-I explanation, but I don't see how implementing this in neovim would afford any _performance_ benefit. \n\n> `vim.bindeval`: Evaluate vim expression, wrap into a python native class and return it, also increasing the reference count to the original vim object. The native class implements methods that operate directly on the original vim object(so when you do d = `vim.bindeval('{}'); d['key'] = 'value'` it is actually changing a vimscript dict, not a python dict)\n\nSo this would provide a compatible behavior, but underneath it's still making the same msgpack calls that would otherwise be done without bindeval.\n\nIt could be quite confusing to plugin authors, if `bindeval()` is provided, yet it has no performance benefit. \n",
            "created_at": "2015-01-29T04:43:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/1898#issuecomment-71968579",
            "id": 71968579,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1898",
            "node_id": "MDEyOklzc3VlQ29tbWVudDcxOTY4NTc5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/71968579/reactions"
            },
            "updated_at": "2015-01-29T04:44:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/71968579",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "On January 29, 2015 7:43:46 AM EAT, \"Justin M. Keyes\" notifications@github.com wrote:\n\n> I tried to follow @ZyX-I explanation, but I don't see how implementing\n> this in neovim would afford any _performance_ benefit. \n> \n> > `vim.bindeval`: Evaluate vim expression, wrap into a python native\n> > class and return it, also increasing the reference count to the\n> > original vim object. The native class implements methods that operate\n> > directly on the original vim object(so when you do d =\n> > `vim.bindeval('{}'); d['key'] = 'value'` it is actually changing a\n> > vimscript dict, not a python dict)\n> \n> So this would provide a compatible behavior, but underneath it's still\n> making the same msgpack calls that would otherwise be done without\n> bindeval.\n> \n> It could be quite confusing to provide `bindeval()` if it has no\n> performance benefit.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/neovim/neovim/issues/1898#issuecomment-71968579\n\nvim.bindeval will only get rid of (de)serialization of objects required by pyeval, but at a cost of a few more msgpack calls. Benefit may be there only for long-living objects (additional calls are only needed at startup) and should be smaller then for Vim.\n\nActually just vim.call_func(funcname, _args, self=None) and vim.locals (which is something like the output of vim.bindeval('l:'), but without mechanics for keeping ref in Python, *always_ modifying only the current scope and returning non-binded Python objects on .**getitem**() or .values()/.items()) should be enough if you talk about performance: this is getting rid of unnecessary (de)serialisation (msgpack (de)serialisation stays, of course, but it will only be one, not like serialise to json then resulting string to msgpack) and is thus not more performant, but also more convenient.\n\nI was actually saying how to be compatible with bindeval, not how to increase performance.\n",
            "created_at": "2015-01-29T05:25:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/1898#issuecomment-71971102",
            "id": 71971102,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1898",
            "node_id": "MDEyOklzc3VlQ29tbWVudDcxOTcxMTAy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/71971102/reactions"
            },
            "updated_at": "2015-01-29T05:25:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/71971102",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I need weak reference for if_lua compatibilities.\n> It is not neovim's if_python problem.\n\n@Shougo I understand you need if_lua compatibility for your plugins, unfortunately I cant focus on this right now because there are higher priorities(UI refactor, terminal emulation for bang commands, windows support).\n\nIf you want to improve [lua-client](https://github.com/neovim/lua-client) to implement if_lua compatibility I can provide some guidance, but it may be better to write from the scratch using [luvit](https://luvit.io/) due to the better standard library and module system.\n",
            "created_at": "2015-01-29T11:03:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/1898#issuecomment-72006887",
            "id": 72006887,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1898",
            "node_id": "MDEyOklzc3VlQ29tbWVudDcyMDA2ODg3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/72006887/reactions"
            },
            "updated_at": "2015-01-29T11:03:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/72006887",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Anyway, from @ZyX-I's explanation about the context switches that a socket read/write would provoke, I assume that the problem wouldn't be fixed even if bindeval where to implemented for Neovim. Every time the variable is read/written, it would need to send/recv on the socket anyway. In fact, I think the performance could be worse than just copying the entire object everytime (depending on object size, of course). In which case there would be only one send or recv per object per action.\n> \n> Please correct me on everything.\n\nThats the big issue with implementing `bindeval`, it would add too much API complexity only for the sake of compatibility layer that would be sub-optimal for plugins running over msgpack-rpc. The only added advantage I can see is having direct access to deep/private objects. For example:\n\n``` python\nnested_list = vim.bindeval(\"g:dict1['dict2']['list']\")\nnested_list.append(1)\n```\n\nIt is simply not worth adding a bunch of C functions and types to the API just for this.\n\nHowever, it just ocurred to me that it may be possible to fully implement bindeval(with proper garbage collection) in pure vimscript, all we need to do is expose a `ChannelDestroyed` autocommand that can be used to delete all references made by a certain channel. It would certainly improve the cost of this compatibility layer.\n",
            "created_at": "2015-01-29T11:19:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/1898#issuecomment-72008836",
            "id": 72008836,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1898",
            "node_id": "MDEyOklzc3VlQ29tbWVudDcyMDA4ODM2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/72008836/reactions"
            },
            "updated_at": "2015-01-29T11:19:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/72008836",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Thank you. Can you provide the gidence?\n\nThe [lua client](https://github.com/neovim/lua-client) is very similar to the [python client](https://github.com/neovim/python-client) in how the code is organized, it has four main layers:\n\n```\n   Event loop(data connection to Neovim)\n                | ^\n                | |\n                | |\n                v |\n      msgpack parser/serializer               \n                | ^\n                | |\n                | |\n                v |\n         msgpack-rpc async session API\n                | ^\n                | |\n                | |\n                v |\n          msgpack-rpc sync session API(uses coroutines in lua and greenlets in python)\n```\n\nThe big difference is that the lua client event loop can only connect to a child nvim process(used for functional tests). There are 3 transport types that the lua client doesn't support yet:\n- TCP\n- Unix socket\n- stdin/stdout  <- This one is required for msgpack-rpc plugins.\n\nThese transport types must be added in the event loop layer(the rest doesn't need to be changed)\n\nSo you have two choices:\n- Modify the lua client to support stdin/stdout connection. This must be done in the [loop.c file](https://github.com/neovim/lua-client/blob/master/nvim/loop.c) because libuv API is used directly.\n- Create a new client from the scratch using a better platform such as [luvi](https://github.com/luvit/luvi). The advantages are:\n  - It has better standard library\n  - It already has libuv bindings so no C code is required.\n\nI recommend you to write from the scratch with luvi using the same code organization, its not a huge amount of work(the lua client has 600 loc, but 300 is for the libuv C bridge). If you do, read the lua/python client source code in top->bottom order:\n- sync session API: [python](https://github.com/neovim/python-client/blob/master/neovim/msgpack_rpc/session.py)/[lua](https://github.com/neovim/lua-client/blob/master/nvim/session.lua)\n- async session API: [python](https://github.com/neovim/python-client/blob/master/neovim/msgpack_rpc/async_session.py)/[lua](https://github.com/neovim/lua-client/blob/master/nvim/async_session.lua)\n- msgpack parser/deserializer [python](https://github.com/neovim/python-client/blob/master/neovim/msgpack_rpc/msgpack_stream.py)/[lua](https://github.com/neovim/lua-client/blob/master/nvim/msgpack_stream.lua)\n- event loop: [python](https://github.com/neovim/python-client/tree/master/neovim/msgpack_rpc/event_loop)(has two implementations)/[lua](https://github.com/neovim/lua-client/blob/master/nvim/loop.c)\n- connect all layers: [python](https://github.com/neovim/python-client/blob/master/neovim/msgpack_rpc/__init__.py#L16-L21)/[lua](https://github.com/neovim/neovim/blob/master/test/functional/helpers.lua#L159-L163)\n\nIf you have any questions, feel free to ask\n",
            "created_at": "2015-02-02T11:35:18Z",
            "html_url": "https://github.com/neovim/neovim/issues/1898#issuecomment-72442885",
            "id": 72442885,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1898",
            "node_id": "MDEyOklzc3VlQ29tbWVudDcyNDQyODg1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/72442885/reactions"
            },
            "updated_at": "2015-02-02T11:35:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/72442885",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "It appears that I cannot use Python client at all: it simply hangs whenever I do `:python import vim` or connect via `from neovim import attach; nvim = attach('socket', path='…')`.\n",
            "created_at": "2015-02-07T08:40:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/1898#issuecomment-73355773",
            "id": 73355773,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1898",
            "node_id": "MDEyOklzc3VlQ29tbWVudDczMzU1Nzcz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/73355773/reactions"
            },
            "updated_at": "2015-02-07T08:40:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/73355773",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@justinmk Problem solved: neovim is linking with mspack version that is different from the version it was compiled with. Strange it did neither cause dynamic linking failure nor a crash.\n",
            "created_at": "2015-02-08T16:37:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/1898#issuecomment-73418493",
            "id": 73418493,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1898",
            "node_id": "MDEyOklzc3VlQ29tbWVudDczNDE4NDkz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/73418493/reactions"
            },
            "updated_at": "2015-02-08T16:37:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/73418493",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "It is interesting that with the following modifications to powerline:\n\n``` Patch\ndiff --git a/powerline/bindings/vim/__init__.py b/powerline/bindings/vim/__init__.py\nindex e617943..2172bdb 100644\n--- a/powerline/bindings/vim/__init__.py\n+++ b/powerline/bindings/vim/__init__.py\n@@ -189,7 +189,10 @@ _vim_exists = vim_get_func('exists', rettype='int')\n\n # It may crash on some old vim versions and I do not remember in which patch \n # I fixed this crash.\n-if hasattr(vim, 'vvars') and vim.vvars[str('version')] > 703:\n+if (\n+   hasattr(vim, 'vvars') and vim.vvars[str('version')] > 703\n+   and hasattr(vim, 'bindeval') and hasattr(vim, 'vars')\n+):\n    _vim_to_python_types = {\n        getattr(vim, 'Dictionary', None) or type(vim.bindeval('{}')):\n            lambda value: dict((\n@@ -292,7 +295,7 @@ else:\n            option=option, value=python_to_vim(value)))\n\n\n-if hasattr(vim, 'tabpages'):\n+if hasattr(vim, 'tabpages') and hasattr(vim.current.tabpage, 'number'):\n    current_tabpage = lambda: vim.current.tabpage\n    list_tabpages = lambda: vim.tabpages\n\ndiff --git a/powerline/bindings/vim/plugin/powerline.vim b/powerline/bindings/vim/plugin/powerline.vim\nindex 11ec05e..53ca3e4 100644\n--- a/powerline/bindings/vim/plugin/powerline.vim\n+++ b/powerline/bindings/vim/plugin/powerline.vim\n@@ -60,7 +60,12 @@ function s:rcmd(s)\n    endif\n endfunction\n try\n-   let s:can_replace_pyeval = !exists('g:powerline_pyeval')\n+   let s:setup_args  = 'pyeval=vim.eval(\"s:pyeval\"), '\n+   let s:setup_args .= 'pycmd=vim.eval(\"s:pycmd\"),'\n+   let s:setup_args .= 'can_replace_pyeval='.!exists('g:powerline_pyeval').','\n+   if has('nvim')\n+       let s:setup_args .= 'main_dict=globals(),'\n+   endif\n    call s:rcmd('try:')\n    call s:rcmd('   powerline_appended_path = None')\n    call s:rcmd('   try:')\n@@ -72,19 +77,19 @@ try\n    call s:rcmd('       '.s:import_cmd.'')\n    call s:rcmd('   import vim')\n    call s:rcmd('   powerline_instance = VimPowerline()')\n-   call s:rcmd('   powerline_instance.setup(pyeval=vim.eval(\"s:pyeval\"), pycmd=vim.eval(\"s:pycmd\"), can_replace_pyeval=int(vim.eval(\"s:can_replace_pyeval\")))')\n+   call s:rcmd('   powerline_instance.setup('.s:setup_args.')')\n    call s:rcmd('   del VimPowerline')\n    call s:rcmd('   del powerline_instance')\n    call s:rcmd('except Exception:')\n    call s:rcmd('   import traceback, sys')\n    call s:rcmd('   traceback.print_exc(file=sys.stdout)')\n    call s:rcmd('   raise')\n+   unlet s:import_cmd\n+   unlet s:setup_args\n    execute s:pycmd s:pystr\n    unlet s:pystr\n    let s:launched = 1\n finally\n-   unlet s:can_replace_pyeval\n-   unlet s:import_cmd\n    if !exists('s:launched')\n        unlet s:pystr\n        echohl ErrorMsg\ndiff --git a/powerline/renderers/vim.py b/powerline/renderers/vim.py\nindex 281177c..fb6ef26 100644\n--- a/powerline/renderers/vim.py\n+++ b/powerline/renderers/vim.py\n@@ -89,7 +89,8 @@ class VimRenderer(Renderer):\n        '''Render all segments.'''\n        segment_info = self.segment_info.copy()\n\n-       if window is vim.current.window:\n+       current_winnr = int(vim.eval('winnr()'))\n+       if winnr == current_winnr:\n            mode = vim_mode()\n            mode = mode_translations.get(mode, mode)\n        else:\ndiff --git a/powerline/vim.py b/powerline/vim.py\nindex d4f5c2d..ba465cd 100644\n--- a/powerline/vim.py\n+++ b/powerline/vim.py\n@@ -154,8 +154,10 @@ class VimPowerline(Powerline):\n        except KeyError:\n            return super(VimPowerline, self).get_config_paths()\n\n-   def do_setup(self, pyeval=None, pycmd=None, can_replace_pyeval=True, _local_themes=()):\n-       import __main__\n+   def do_setup(self, pyeval=None, pycmd=None, can_replace_pyeval=True, main_dict=None, _local_themes=()):\n+       if not main_dict:\n+           import __main__\n+           main_dict = __main__.__dict__\n        if not pyeval:\n            pyeval = 'pyeval' if sys.version_info < (3,) else 'py3eval'\n            can_replace_pyeval = True\n@@ -177,7 +179,8 @@ class VimPowerline(Powerline):\n        self.window_statusline = '%!' + pyeval + '(\\'powerline.statusline({0})\\')'\n\n        self.update_renderer()\n-       __main__.powerline = self\n+       main_dict['powerline'] = self\n+       self.main_dict = main_dict\n\n        try:\n            if (\n@@ -246,6 +249,28 @@ class VimPowerline(Powerline):\n                if curwindow_id == window_id if window_id else window is vim.current.window:\n                    r = (window, curwindow_id, window.number)\n            return r\n+   elif not hasattr(vim.current.window, 'number'):\n+       # FIXME NeoVim\n+       _vim_getwinvar = staticmethod(vim_get_func('getwinvar'))\n+       _vim_setwinvar = staticmethod(vim_get_func('setwinvar'))\n+\n+       def win_idx(self, window_id):\n+           r = None\n+           current_winnr = int(vim.eval('winnr()'))\n+           for winnr, window in zip(count(1), vim.windows):\n+               curwindow_id = self._vim_getwinvar(winnr, 'powerline_window_id')\n+               if curwindow_id and not (r is not None and curwindow_id == window_id):\n+                   curwindow_id = int(curwindow_id)\n+               else:\n+                   curwindow_id = self.last_window_id\n+                   self.last_window_id += 1\n+                   self._vim_setwinvar(winnr, 'powerline_window_id', curwindow_id)\n+               statusline = self.window_statusline.format(curwindow_id)\n+               if self._vim_getwinvar(winnr, '&statusline') != statusline:\n+                   self._vim_setwinvar(winnr, '&statusline', statusline)\n+               if curwindow_id == window_id if window_id else current_winnr == winnr:\n+                   r = (window, curwindow_id, winnr)\n+           return r\n    else:\n        _vim_getwinvar = staticmethod(vim_get_func('getwinvar'))\n        _vim_setwinvar = staticmethod(vim_get_func('setwinvar'))\n@@ -279,15 +304,13 @@ class VimPowerline(Powerline):\n    def new_window(self):\n        return self.render(*self.win_idx(None))\n\n-   @staticmethod\n-   def do_pyeval():\n+   def do_pyeval(self):\n        '''Evaluate python string passed to PowerlinePyeval\n\n        Is here to reduce the number of requirements to __main__ globals to just \n        one powerline object (previously it required as well vim and json).\n        '''\n-       import __main__\n-       vim.command('return ' + json.dumps(eval(vim.eval('a:e'), __main__.__dict__)))\n+       vim.command('return ' + json.dumps(eval(vim.eval('a:e'), self.main_dict)))\n\n    def setup_components(self, components):\n        if components is None:\n```\n\nthe result is still usable, but in the second “usable” test I managed to open one file (`build/CMakeFiles/CMakeDirectoryInformation.cmake` if I am not mistaking) so that it heavily lagged and was not even receiving &modified status updates.\n\nIt also lags when I enable tabline, but this is no surprise (it lags in Vim too, but with less flickering on my machine).\n",
            "created_at": "2015-02-08T17:48:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/1898#issuecomment-73422054",
            "id": 73422054,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1898",
            "node_id": "MDEyOklzc3VlQ29tbWVudDczNDIyMDU0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/73422054/reactions"
            },
            "updated_at": "2015-02-08T17:48:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/73422054",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "NONE",
            "body": "A dirty solution to this, but I don't know whether it's a good idea or not. in `.vimrc`(if .nvimrc is the soft link of it), then:\n\n``` viml\nif has('nvim')\n    python import vim\n    python vim.bindeval = vim.eval\nendif\n```\n",
            "created_at": "2015-09-19T17:44:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/1898#issuecomment-141693052",
            "id": 141693052,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1898",
            "node_id": "MDEyOklzc3VlQ29tbWVudDE0MTY5MzA1Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/141693052/reactions"
            },
            "updated_at": "2015-09-19T17:44:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/141693052",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6101711?v=4",
                "events_url": "https://api.github.com/users/HuStmpHrrr/events{/privacy}",
                "followers_url": "https://api.github.com/users/HuStmpHrrr/followers",
                "following_url": "https://api.github.com/users/HuStmpHrrr/following{/other_user}",
                "gists_url": "https://api.github.com/users/HuStmpHrrr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/HuStmpHrrr",
                "id": 6101711,
                "login": "HuStmpHrrr",
                "node_id": "MDQ6VXNlcjYxMDE3MTE=",
                "organizations_url": "https://api.github.com/users/HuStmpHrrr/orgs",
                "received_events_url": "https://api.github.com/users/HuStmpHrrr/received_events",
                "repos_url": "https://api.github.com/users/HuStmpHrrr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/HuStmpHrrr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/HuStmpHrrr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/HuStmpHrrr"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@HuStmpHrrr No, it is absolutely bad idea. `bindeval` has very different semantics when it comes to returning container types. Also `vim.eval('10')` returns string 10, `vim.bindeval('10')` returns number 10, `vim.eval('function(\"tr\")')` is `None`, `vim.bindeval('function(\"tr\")')` is same thing as `vim.Function('tr')`.\n",
            "created_at": "2015-09-19T17:59:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/1898#issuecomment-141693789",
            "id": 141693789,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1898",
            "node_id": "MDEyOklzc3VlQ29tbWVudDE0MTY5Mzc4OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/141693789/reactions"
            },
            "updated_at": "2015-09-19T18:00:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/141693789",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "If we added bindeval the performance would be very poor, not to mention reliability (https://github.com/neovim/neovim/issues/1898#issuecomment-71772649). It is not possible. \n\nIt is, however, totally possible for powerline to avoid bindeval.\n",
            "created_at": "2016-03-04T17:16:26Z",
            "html_url": "https://github.com/neovim/neovim/issues/1898#issuecomment-192364173",
            "id": 192364173,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1898",
            "node_id": "MDEyOklzc3VlQ29tbWVudDE5MjM2NDE3Mw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/192364173/reactions"
            },
            "updated_at": "2016-03-04T17:25:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/192364173",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "NONE",
            "body": "Hi all,\nI'm plugin developer and I'm trying to make my plugin compatible with Neovim. The reason I'm currenly using `bindeval` is to modify a complex structure (array of nested dictionaries) in-place.\nSince the structure is not too big (1000 values at most), I have no problem to use `eval` but then I need to somehow assign the result it back to Vim variable, in Python code of course.\n\nIs there a way to do it?\n",
            "created_at": "2016-03-07T17:05:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/1898#issuecomment-193347908",
            "id": 193347908,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1898",
            "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzM0NzkwOA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/193347908/reactions"
            },
            "updated_at": "2016-03-07T17:05:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/193347908",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6907277?v=4",
                "events_url": "https://api.github.com/users/sergei-dyshel/events{/privacy}",
                "followers_url": "https://api.github.com/users/sergei-dyshel/followers",
                "following_url": "https://api.github.com/users/sergei-dyshel/following{/other_user}",
                "gists_url": "https://api.github.com/users/sergei-dyshel/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sergei-dyshel",
                "id": 6907277,
                "login": "sergei-dyshel",
                "node_id": "MDQ6VXNlcjY5MDcyNzc=",
                "organizations_url": "https://api.github.com/users/sergei-dyshel/orgs",
                "received_events_url": "https://api.github.com/users/sergei-dyshel/received_events",
                "repos_url": "https://api.github.com/users/sergei-dyshel/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sergei-dyshel/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sergei-dyshel/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sergei-dyshel"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I was actually considering to add bindeval support in #4411. Not because I think this will be fast as it was in Vim (though in #4411 performance will not be that poor), but because current if_lua _only_ has bindeval and nothing else.\n\nI now realized that there are another reasons to use bindeval besides performance:\n1. Under some limited circumstances bindeval has better performance: specifically if you need to modify structure, but do not need to read it. E.g. append to a list. Performance will always be worse when container needs to be read though, but write-only variants should be faster, as well as selecting a few parts of a big structure.\n2. As @sergei-dyshel, modifying structure in-place should it be needed (e.g. because structure is saved somewhere and checked using `is`) is rather complicated. You need to pass name of the variable to the Python code (normally you always do this because `pyeval()` does not have second argument like `luaeval()` does, so to pass something down you need to use `vim.[bind]eval()`) and track path used to reach the certain data.\n3. Currently msgpack API does not allow transferring self-referencing containers at all and containers containing other containers more then once correctly. First can be easily fixed by creating a new EXT value which says literally “this is the same container as 3 levels up”, but second problem is not so easy: `let l = [] | let ll = [l, l]` converted to msgpack will be `let ll = [[], []]`. Solvable (e.g. turn this into `ARRAY[ARRAY[EXT(type=tag, contents=1), ARRAY[]], EXT(type=anchor, contents=1)]`: turn each container that appears twice into a pair `[tag, actual value]`, but this complicates both dumper and parser a lot. `bindeval` does not have this problem by design.\n4. Lua in Vim does not have Python’s `vim.eval`, its `vim.eval` is Python’s `vim.bindeval`.\n\n---\n\nAbout actual implementation: it looks rather simple, but yet needs much work:\n1. New EXT type: 1 byte for type (dictionary, function, list), unspecified number of bytes for identifier. Let’s name that `Reference`. “Type” byte is needed to do type checking and select which API functions can be run with given reference on clients, server has its own records and does not care about that byte.\n2. APIs:\n   - `Object vim_bindeval(String expr, Error *err)`, `Boolean bound` in `*_get_var`\n   - `void vim_unref(Reference ref)`\n   - `Object vim_deref(Reference ref)` (turns Reference into a regular object as returned by `vim_eval`)\n   - `Object vim_remove_key(Reference ref, String key, Error *err)`, `Array vim_remove_slice(Reference ref, Integer start, Integer end, Error *err)`, `void vim_clear(Reference ref)` (does not do anything (including erroring out) with function references, other functions error out when reference is not found)\n   - `Object vim_get_key(Reference ref, String key, Error *err)`, `Array vim_get_slice(Reference ref, Integer start, Integer end, Error *err)`, `String vim_get_func_name(Reference ref, Error *err)` (I am not suggesting to expose function name directly because I am not planning to keep functions in the single namespace like they are currently, `vim_get_func_name` should be explicitly marked as function that gets name useful for debugging (error messages, `repr(reference)`))\n   - `void vim_del_function(String name, Error *err)` (this is what `vim_clear` does not do with function references)\n3. Reference is either an index in a vector (freed indexes are reused) or an integer key in a hash (only-incrementing) pointing to\n   \n   ```\n   typedef enum {\n     kRefUndefined = 0,\n     kRefDictionary,\n     kRefList,\n     kRefFunction,\n   } ReferenceType;\n   typedef struct {\n     ReferenceType type;\n     union {\n       dict_T *dict;\n       list_T *list;\n       char *func;\n     } data;\n   } ReferencedObject;\n   ```\n   \n   This is called “reference table”.\n4. References are deleted from reference table by calling `vim_unref`. Reference table is a part of a `Channel` structure, so all references are also deleted when channel is closed. It is a responsibility of client to invalidate all References when channel is closed.\n5. When reference is deleted proper `_unref` function is called. When reference is created referenced object’s reference count is incremented. `garbage_collect()` iterates over channels and visits containers in reference tables found there.\n\nI do not see where and why Python “weak references” can be used here (suggestion by @tarruda).\n",
            "created_at": "2016-03-07T18:23:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/1898#issuecomment-193381371",
            "id": 193381371,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1898",
            "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzM4MTM3MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/193381371/reactions"
            },
            "updated_at": "2016-03-07T18:23:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/193381371",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Though initial version of #4411 will still be written and tested with Pythonish `vim.eval`.\n",
            "created_at": "2016-03-07T18:24:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/1898#issuecomment-193382199",
            "id": 193382199,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1898",
            "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzM4MjE5OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/193382199/reactions"
            },
            "updated_at": "2016-03-07T18:24:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/193382199",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> References are deleted from reference table by calling vim_unref\n\nIs this client's responsibility/discretion? If client forgets to call `vim_unref`, it's essentially a memory leak?\n",
            "created_at": "2016-03-07T18:39:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/1898#issuecomment-193387230",
            "id": 193387230,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1898",
            "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzM4NzIzMA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/193387230/reactions"
            },
            "updated_at": "2016-03-07T18:39:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/193387230",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@justinmk When channel is closed everything is unreferenced. Otherwise how do you see this? Most languages with GC have something like `__del__` and this is rather reliable, providing something like remote weak references does not look fine for me.\n",
            "created_at": "2016-03-07T19:49:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/1898#issuecomment-193420362",
            "id": 193420362,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1898",
            "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzQyMDM2Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/193420362/reactions"
            },
            "updated_at": "2016-03-07T19:49:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/193420362",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "And I forgot functions\n\n```\nReference vim_new_dict(void)\nReference vim_new_list(void)\nReference vim_get_funcref(String name, Error *err)\n// self should be NIL, Reference (dict) or Dictionary\n// args should be Array or Reference (list)\nObject vim_call_funcref(Reference func, Object args, Object self, Error *err)\n```\n",
            "created_at": "2016-03-07T19:53:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/1898#issuecomment-193421951",
            "id": 193421951,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1898",
            "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzQyMTk1MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/193421951/reactions"
            },
            "updated_at": "2016-03-07T19:53:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/193421951",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "It is a separate usecase, but maybe relevant to this discussion: It would be useful also to be able to reference a viml variable also from the remote side. Consider  `vim_call_function`, it is not useful in a situation where `vim_eval` is used with some function argument (not only the funcref) that needs to be a viml dict/list by reference.\nIt would be useful to be able to do `vim.funcs.Myfunction(some_python_value, vim.ref(\"g:some_viml_reference\"))`. Now this could either just use bindeval (the EXT type suggested here) requiring a separate request to get the reference, or still with a single request with yet another EXT that implements a named reference (say to a global variable name or object-id + object variable name)\n",
            "created_at": "2016-03-07T20:00:18Z",
            "html_url": "https://github.com/neovim/neovim/issues/1898#issuecomment-193424674",
            "id": 193424674,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1898",
            "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzQyNDY3NA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/193424674/reactions"
            },
            "updated_at": "2016-03-07T20:00:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/193424674",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@bfredl Without reference table references will be very limited, even though this will be -1 request. In any case there were many times when I wanted to write `funcs.…` in tests, but had to write `eval(…)`.\n",
            "created_at": "2016-03-07T21:00:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/1898#issuecomment-193446667",
            "id": 193446667,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1898",
            "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzQ0NjY2Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/193446667/reactions"
            },
            "updated_at": "2016-03-07T21:00:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/193446667",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yes we definitely want the table in any case, this is just a possible addition. (Also, in the case of `vim.funcs(... ,async=True)` the number of required roundtrips drops from one to zero.)\n",
            "created_at": "2016-03-07T21:53:42Z",
            "html_url": "https://github.com/neovim/neovim/issues/1898#issuecomment-193471834",
            "id": 193471834,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1898",
            "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzQ3MTgzNA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/193471834/reactions"
            },
            "updated_at": "2016-03-07T21:53:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/193471834",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I actually need every method Vim defines for vim.List, vim.Dictionary and vim.Function in if_py_both, this is more than I have already listed. Guess this is better to be put into `src/nvim/api/ref.c`. And construct a structure like PyTypeObject in place of ReferenceType enum just in case (i.e. in extended-funcref my _Vim_ branch I AFAIR was converting Python callables into Vim function-like objects, and AFAIR I did plan something like this for lua functions in luaviml). Plus dummy channel for internal uses (i.e. lua compatibility interface, it needs to keep reference table somewhere).\n",
            "created_at": "2016-03-07T21:54:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/1898#issuecomment-193472134",
            "id": 193472134,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1898",
            "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzQ3MjEzNA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/193472134/reactions"
            },
            "updated_at": "2016-03-07T21:54:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/193472134",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "This is a known limitation of the Nvim RPC implementation of the Vim legacy `if_py` interface.\r\n\r\nLegacy `if_py` plugins are uncommon now, and going forward the positioning for Nvim is:\r\n\r\n- use in-process Lua for performance-sensitive code\r\n- use remote plugins (coprocesses) for integrating with node/python/etc. https://github.com/neovim/neovim/issues/27949\r\n- the legacy `if_py` / `if_ruby`/ etc interfaces will continue to be supported, with the known limitations described in this issue.\r\n    - `bindeval` is out of scope.",
            "created_at": "2024-10-01T15:26:53Z",
            "html_url": "https://github.com/neovim/neovim/issues/1898#issuecomment-2386326326",
            "id": 2386326326,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1898",
            "node_id": "IC_kwDOAPphoM6OPHM2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2386326326/reactions"
            },
            "updated_at": "2024-10-01T15:26:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2386326326",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comments": 36,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/1898/comments",
    "created_at": "2015-01-27T18:48:52Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/1898/events",
    "html_url": "https://github.com/neovim/neovim/issues/1898",
    "id": 55658126,
    "labels": [
        {
            "color": "e6e6e6",
            "default": false,
            "description": "current behavior is by design, and change is not desired",
            "id": 77997479,
            "name": "closed:wontfix",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3OQ==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/closed:wontfix"
        },
        {
            "color": "FEF2C0",
            "default": false,
            "description": "performance, latency, cpu/memory usage",
            "id": 101930601,
            "name": "performance",
            "node_id": "MDU6TGFiZWwxMDE5MzA2MDE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/performance"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "compatibility with Vim or older Neovim",
            "id": 109899712,
            "name": "compatibility",
            "node_id": "MDU6TGFiZWwxMDk4OTk3MTI=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/compatibility"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 144672485,
            "name": "provider",
            "node_id": "MDU6TGFiZWwxNDQ2NzI0ODU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/provider"
        },
        {
            "color": "c7def8",
            "default": false,
            "description": "channels, RPC, msgpack",
            "id": 242522707,
            "name": "channels-rpc",
            "node_id": "MDU6TGFiZWwyNDI1MjI3MDc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/channels-rpc"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/1898/labels{/name}",
    "locked": true,
    "milestone": {
        "closed_at": null,
        "closed_issues": 245,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 263,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2024-10-07T14:21:28Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "MDU6SXNzdWU1NTY1ODEyNg==",
    "number": 1898,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 2,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 2,
        "url": "https://api.github.com/repos/neovim/neovim/issues/1898/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "not_planned",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/1898/timeline",
    "title": "bindeval / funcrefs / if_py, if_lua",
    "updated_at": "2024-10-01T15:27:12Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/1898",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1497157?v=4",
        "events_url": "https://api.github.com/users/abstiles/events{/privacy}",
        "followers_url": "https://api.github.com/users/abstiles/followers",
        "following_url": "https://api.github.com/users/abstiles/following{/other_user}",
        "gists_url": "https://api.github.com/users/abstiles/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/abstiles",
        "id": 1497157,
        "login": "abstiles",
        "node_id": "MDQ6VXNlcjE0OTcxNTc=",
        "organizations_url": "https://api.github.com/users/abstiles/orgs",
        "received_events_url": "https://api.github.com/users/abstiles/received_events",
        "repos_url": "https://api.github.com/users/abstiles/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/abstiles/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/abstiles/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/abstiles"
    }
}