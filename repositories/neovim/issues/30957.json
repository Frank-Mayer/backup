{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\nI found an attempt to call `vim.lsp.semantic_tokens.start()` on nonexisting buffer and then found that it was a dummy buffer created by `vim.api.nvim_get_option_value('lisp', { filetype = 'lua' })` called by some plugin. The following part\n\nhttps://github.com/neovim/neovim/blob/25b53b593ef6f229fbec5b3dc205a7539579d13a/src/nvim/api/options.c#L103-L131 shows how such buffer is created. \n\nThe user may not know about such workarounds. On the other side it is a documented behavior, not a bug. \n\n### Expected behavior\n\nIn this case it would be good to include some hint how to detect such buffer and filter it out in `FileType` autocommand (probably within `:h FileType`). I have no better idea than using something like\n\n```lua\nlocal function isDummyFileTypeBuffer(buf)\n  local opts = vim.bo[buf]\n  return opts.buftype == 'nofile' and opts.bufhidden == 'hide' and opts.swapfile == false and opts.modeline == false\nend\n\n\nvim.api.nvim_create_autocmd('FileType', {\n  pattern = '*',\n  callback = function (args)\n    if args.file == args.match and isDummyFileTypeBuffer(args.buf) then\n      return\n    end\n    vim.print(args)\n  end,\n})\n\nvim.api.nvim_get_option_value('lisp', {filetype = 'php'})\n```\nbut I am aware that it depends on probability that there is no other such buffer (and on undocumented internals).",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/30957/comments",
    "created_at": "2024-10-27T11:38:30Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/30957/events",
    "html_url": "https://github.com/neovim/neovim/issues/30957",
    "id": 2616534121,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": true,
            "description": "",
            "id": 84744038,
            "name": "documentation",
            "node_id": "MDU6TGFiZWw4NDc0NDAzOA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/documentation"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/30957/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6b9SRp",
    "number": 30957,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/30957/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/30957/timeline",
    "title": "Document how to defend against side effects of `nvim_get_option_value()` with `filetype` option",
    "updated_at": "2024-10-27T11:42:51Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/30957",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/11404453?v=4",
        "events_url": "https://api.github.com/users/przepompownia/events{/privacy}",
        "followers_url": "https://api.github.com/users/przepompownia/followers",
        "following_url": "https://api.github.com/users/przepompownia/following{/other_user}",
        "gists_url": "https://api.github.com/users/przepompownia/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/przepompownia",
        "id": 11404453,
        "login": "przepompownia",
        "node_id": "MDQ6VXNlcjExNDA0NDUz",
        "organizations_url": "https://api.github.com/users/przepompownia/orgs",
        "received_events_url": "https://api.github.com/users/przepompownia/received_events",
        "repos_url": "https://api.github.com/users/przepompownia/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/przepompownia/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/przepompownia/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/przepompownia",
        "user_view_type": "public"
    }
}