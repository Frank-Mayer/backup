{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "# Problem\r\n\r\nThe \"remote plugin\" model currently is too complex, and 99% of the complexity provides very little benefit.\r\n\r\n- Lifecycle is complicated, unnecessarily hard to test, troubleshoot, and explain to plugin authors.\r\n- _Every_ \"remote plugin host\" must implement a 1000s of lines of code to solve the _same problem_ in _every API client_. This is a pointless waste of time.\r\n    - Example: _all of the code below_ is just for the \"remote plugin\" implementation in:\r\n        - `node-client`:\r\n            - [neovim/src/plugin/](https://github.com/neovim/node-client/tree/e03e409a5e61713259148cb5f83e1b85420a9343/packages/neovim/src/plugin)\r\n            - [decorators/src/plugin/](https://github.com/neovim/node-client/tree/e03e409a5e61713259148cb5f83e1b85420a9343/packages/decorators/src/plugin)\r\n            - [neovim/src/host/](https://github.com/neovim/node-client/tree/e03e409a5e61713259148cb5f83e1b85420a9343/packages/neovim/src/host)\r\n        - `go-client`:\r\n            - [nvim/plugin/](https://github.com/neovim/go-client/tree/2163acbdee29ae71daea9e154219de5bb3ef9dc7/nvim/plugin)\r\n    - The benefits of the extra code are\r\n        1. \"multi-tenancy\" (one node process for all node rplugins).\r\n        2. \"decorators\" can be used in the remote module to define Nvim commands/autocmds.\r\n- Too many moving parts, too many concepts.\r\n    - why is a \"plugin host\" needed?\r\n    - why can't I just call `vim.rplugin('node', 'path/to/index.js')`, then call functions defined in the remote process?\r\n    - why do I need \"decorators\" (`@pynvim.plugin`) ? why can't I just use Lua to define commands/events in `plugin/foo.lua`?\r\n        - `@pynvim.command('MyCommand', …)` vs Lua `vim.api.nvim_create_user_command('MyCommand', function(...) vim.rpcrequest('MyCommand', ...))`\r\n- `:UpdateRemotePlugins` and the \"manifest\" are extra state that must be resolved, refreshed, and healthchecked.\r\n\r\n# Solution\r\n\r\n- Reposition \"remote plugins\" as \"remote modules\". For example, a Node.js \"remote plugin\" is just a Node.js module that (1) imports [\"neovim\"](https://github.com/neovim/node-client/), (2) can be started as a Nvim RPC client, and (3) handles requests from Nvim.\r\n    - Users no longer need to globally install `neovim-node-host`.\r\n- Eliminate the \"host\" / \"client\" distinction. The client is the host (it can handle requests from Nvim).\r\n- Drop \"multi tenancy\". Each plugin starts its own client (\"host\"). Plugins do not share a \"host\".\r\n- Drop host-specific \"sugar\" for registering Nvim-side commands/autocmds (aka \"bindings\"). Plugins define commands/autocmds in Lua, like any other Nvim plugin. The commands call methods in the remote module.\r\n\r\n# Implementation\r\n\r\nFrom `doc/remote_plugin.txt`:\r\n\r\n> Plugin hosts ... take care of most boilerplate involved in defining commands, autocmds, and functions implemented over |RPC| connections. Hosts are loaded only when one of their registered plugins require it.\r\n\r\nWe can address the above use-cases as follows:\r\n\r\n1. Remote-plugins are just plain Lua plugins (`plugin/foo.lua`) that start API clients and call functions on the client.\r\n    - Eliminates all the unnecessary complexity of trying to find `foo.js`/`foo.py`/… plugin \"mains\".\r\n2. Make it easy from _Lua_ to start _any_ API client and treat it as a \"remote host\".\r\n    - One (API client) process per plugin.\r\n        - **Future:** Consider \"sharing\" client processes in the future. Out of scope for now.\r\n    - Eliminates all the redundant, per-platform (js/py/…) impls that implement a \"remote host\".\r\n    - Drop the concept of a \"plugin host\". We only need _plain old API clients_, not a \"plugin host\".\r\n    - Nvim Lua stdlib will provide (once—_not_ in every API client!) an ergonomic interface to:\r\n        1. start a \"known\" API client\r\n        2. allow the caller to specify the path to the remote-plugin \"module\" or \"main.\r\n        3. define commands/autocmds/functions that call remote functions.\r\n            - \"Decorators\" are not need for this! If it's painful to do this in Lua, _fix that once, in Nvim_ instead of \"fixing\" it N times in every API client!\r\n    - Examples (compare to `:help remote-plugin-example`):\r\n      - [go-client example](https://github.com/neovim/go-client/pull/172/files)\r\n      - pynvim example:\r\n        \"Remote\" Python code:\r\n        ```python\r\n        import pynvim\r\n\r\n        def main():\r\n            pynvim.setHandler('command_handler', command_handler)\r\n            pynvim.setHandler('autocmd_handler', autocmd_handler)\r\n            pynvim.setHandler('function_handler', function_handler)\r\n        main()\r\n        ```\r\n        \"Local\" Lua code:\r\n        ```lua\r\n        local rplugin = vim.rplugin('python', 'path/to/init.py')\r\n\r\n        vim.api.nvim_create_user_command('Cmd',\r\n          function(args)\r\n            vim.rpcrequest(rplugin.chan_id, 'command_handler', args.args, args.range)\r\n          end,\r\n          { nargs = '*' })\r\n        vim.api.nvim_create_autocmd({'BufEnter'}, {\r\n          pattern = {\"*.c\", \"*.h\"},\r\n          callback = function(ev)\r\n            vim.rpcrequest(rplugin.chan_id, 'autocmd_handler', ev.file)\r\n          end\r\n        })\r\n        function my_func(...)\r\n          vim.rpcrequest(rplugin.chan_id, 'function_handler', {...})\r\n        end\r\n        ```\r\n3. With the above design...\r\n    - ELIMINATES:\r\n        - a fuckton of redundant [documentation](https://github.com/neovim/node-client?tab=readme-ov-file#remote-plugin-api) explaining crap like decorators, the \"sync\" flag, Remote plugin manifest, `remote#host#RegisterPlugin`, \"bootstrapping\" details.\r\n        - a fuckton of code: [neovim/src/plugin](https://github.com/neovim/node-client/tree/e03e409a5e61713259148cb5f83e1b85420a9343/packages/neovim/src/plugin) [decorators/src/plugin](https://github.com/neovim/node-client/tree/e03e409a5e61713259148cb5f83e1b85420a9343/packages/decorators/src/plugin) [neovim/src/host](https://github.com/neovim/node-client/tree/e03e409a5e61713259148cb5f83e1b85420a9343/packages/neovim/src/host)\r\n        - `rplugin/node/` runtimepath directory\r\n        - \"registration\", `:UpdateRemotePlugins`, rplugin \"manifest\"\r\n        - `remote#host#PluginsForHost`\r\n        - `NvimPlugin.registerFunction`, `NvimPlugin.registerAutocmd`, `NvimPlugin.registerCommand`\r\n    - STILL NEEDED:\r\n        - instead of `NvimPlugin`, the remote plugin uses the exact same `NvimClient` type that is returned by `attach()`.\r\n          A remote plugin is just a library that operates on the same old `NvimClient` that any other API client operates on.\r\n        - `provider#Poll()`\r\n        - `detect()`\r\n        - `require()`\r\n    - GAINS:\r\n        - The \"bootstrapping\" is now extremely obvioius and the plugin implementor fully controls when to call `vim.rplugin()` from Lua.\r\n        - `vim.rplugin()` loads the plugin \"main\" and returns a channel:\r\n          1. find the platform interpreter (`node`, `python`, …)\r\n          2. start the interpreter with a stdio RPC channel, targeting the plugin \"main\" file.\r\n              - The plugin \"main\" file is expected to `attach()` to stdio, and use the resulting `NvimClient` to serve requests.\r\n          3. calls `provider#Poll()` until success.\r\n          4. returns a channel id.\r\n        - NO sugar for creating commands/functions/autocmds that connect to the remote plugin.\r\n          If creating commands/functions/autocmds is cumbersome we should fix that IN GENERAL, not only for remote plugins.\r\n          ```\r\n          vim.api.nvim_create_autocmd({'BufEnter'}, {\r\n            pattern = {\"*.c\", \"*.h\"},\r\n            callback = function(ev)\r\n              vim.rpcrequest(rplugin.chan_id, 'autocmd_handler', ev.file)\r\n            end\r\n          })\r\n          ```\r\n\r\n## FAQ\r\n\r\n- How does a plugin avoid loading the interpreter (slow) on startup?\r\n    - To \"share\" an API client we could add an optional `ns` (namespace) parameter to `vim.rplugin()`, then it could be called on-demand and re-uses the existing channel if found.\r\n        - This doesn't need to be solved right now. Just start a new process for each `vim.rplugin()` call.\r\n\r\n\r\n## Related\r\n\r\n- The above proposal has [similarities to nvim-yarp](https://github.com/neovim/neovim/issues/5532#issuecomment-336474810) cc @roxma\r\n    - But unlike nvim-yarp, we can go further and eliminate the concept of \"registering\" anything.\r\n\r\n\r\ncc @alexgenco @zchee",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Hi @justinmk. Following up from your [comment](https://github.com/neovim/neovim/issues/4439#issuecomment-2009774868) in a issue I was subscribed to.\r\n\r\n\r\nI will try to answer some of your questions, but please take it with a grain of salt as it has been 8 years since I worked on Neovim:\r\n\r\n\r\n> Lifecycle is complicated, unnecessarily hard to test, troubleshoot, and explain to plugin authors.\r\n\r\nCan you elaborate on this one? I don't remember and couldn't find anything in the docs.\r\n\r\n\r\n> Every \"remote plugin host\" must implement a 1000s of lines of code to solve the same problem in every API client. This is a pointless waste of time. \r\n> why is a \"plugin host\" needed?\r\n\r\n\r\nThe idea of a plugin host is to implement the necessary boilerplate code to communicate with Neovim. There should not be any need to write more than one plugin host per language (at least that was my goal at the time).\r\n\r\n\r\n> why can't I just call vim.rplugin('node', 'path/to/index.js'), then call functions defined in the remote process?\r\n\r\nHow would `path/to/index.js` expose functions? Neovim uses msgpack-rpc to do it, so at very least there should be some infrastructure that allows it to expose functions via RPC, which should be done by the plugin host.\r\n\r\n\r\n> why do I need \"decorators\" (@pynvim.plugin) ?\r\n\r\nIIRC, this decorator would be part of the python plugin host and an easy way to export functions to Neovim via RPC.\r\n\r\n\r\n> why can't I just use Lua to define commands/events in plugin/foo.lua? \r\n\r\nNot sure if I understood this question, but if you are writing Lua plugins, then it is not a remote plugin.\r\n\r\n\r\nIn hindsight, the idea of remote plugins might not have been that great. While in theory the ability to write plugins in any programming language is cool, in practice what happened is that the community ended up embracing Lua as the standard language for plugins (At least I haven't seen any major plugins written in anything other than Lua and vimscript).\r\n",
            "created_at": "2024-03-20T15:55:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/27949#issuecomment-2009915188",
            "id": 2009915188,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27949",
            "node_id": "IC_kwDOAPphoM53zN80",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 3,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2009915188/reactions"
            },
            "updated_at": "2024-03-20T15:55:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2009915188",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The idea of a plugin host is to implement the necessary boilerplate code to communicate with Neovim.\r\n\r\nI am distinguishing \"API client\" vs \"plugin host\". \r\n\r\n- The \"API client\" part of node-client is here:\r\n    - https://github.com/neovim/node-client/tree/master/packages/neovim/src/attach\r\n    - https://github.com/neovim/node-client/tree/master/packages/neovim/src/api\r\n- The \"plugin host\" part of node-client is here: \r\n    - https://github.com/neovim/node-client/tree/master/packages/neovim/src/host\r\n    - https://github.com/neovim/node-client/tree/master/packages/neovim/src/plugin\r\n\r\nThe \"plugin host\" is 99% just nice-to-have \"sugar\" that makes it possible to define Nvim commands/autocmds from the remote. None of that is really necessary, it's easy to do that from Lua (or we should improve that).\r\n\r\n> There should not be any need to write more than one plugin host per language\r\n\r\nBut implementing the \"remote host\" nice-to-have stuff in every language is a chore, and a source of extra bugs, and doubles the amount of code + docs needed in each API client.\r\n\r\n> How would path/to/index.js expose functions?\r\n\r\nThe remote host will need to handle `rpcrequest()` calls from Nvim and \"dispatch\" them. That will require some sort of initialization/declaration in the remote module. But that still avoids needing to register things in a manifest from the Nvim (client) side.\r\n\r\n> IIRC, this decorator would be part of the python plugin host and an easy way to export functions to Neovim via RPC.\r\n\r\nYes. Not worth the complexity and bugs.\r\n\r\n> Not sure if I understood this question, but if you are writing Lua plugins, then it is not a remote plugin.\r\n\r\nI'm proposing to move the _bindings_ logic to Lua:\r\n\r\n- start and manage an API client(s), from Lua\r\n- call remote functions, and setup remote handlers, from Lua\r\n\r\nbut the _business logic_ stays in the remote module.\r\n\r\nCurrently, trying to set up _bindings_ from the remote side is 99% of the complexity, but 1% of the value. The business logic (not bindings) is where remote plugins can be useful. Furthermore, with this simplified design, we get it nearly _for free_.\r\n\r\n> in practice what happened is that the community ended up embracing Lua \r\n\r\nThat's parially because creating a remote plugin is too complicated. This proposal fixes that. There are cases where I want to integrate with code that doesn't have a CLI but can be loaded as a node/python/etc module. ",
            "created_at": "2024-03-20T16:43:00Z",
            "html_url": "https://github.com/neovim/neovim/issues/27949#issuecomment-2010027909",
            "id": 2010027909,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27949",
            "node_id": "IC_kwDOAPphoM53zpeF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2010027909/reactions"
            },
            "updated_at": "2024-03-20T16:57:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2010027909",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Skeleton / proof of concept: https://github.com/neovim/node-client/pull/344",
            "created_at": "2024-03-26T16:05:26Z",
            "html_url": "https://github.com/neovim/neovim/issues/27949#issuecomment-2020842326",
            "id": 2020842326,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27949",
            "node_id": "IC_kwDOAPphoM54c5tW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 3,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2020842326/reactions"
            },
            "updated_at": "2024-03-26T16:05:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2020842326",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comments": 3,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/27949/comments",
    "created_at": "2024-03-20T14:47:06Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/27949/events",
    "html_url": "https://github.com/neovim/neovim/issues/27949",
    "id": 2197727769,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "plugins and Vim \"pack\"",
            "id": 117905553,
            "name": "plugin",
            "node_id": "MDU6TGFiZWwxMTc5MDU1NTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/plugin"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "plugins as RPC coprocesses (node.js, python, etc)",
            "id": 652698463,
            "name": "remote-plugin",
            "node_id": "MDU6TGFiZWw2NTI2OTg0NjM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/remote-plugin"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/27949/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 11,
        "created_at": "2023-12-07T23:09:35Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk"
        },
        "description": "",
        "due_on": "2024-10-31T07:00:00Z",
        "html_url": "https://github.com/neovim/neovim/milestone/41",
        "id": 10283236,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/41/labels",
        "node_id": "MI_kwDOAPphoM4AnOjk",
        "number": 41,
        "open_issues": 59,
        "state": "open",
        "title": "0.11",
        "updated_at": "2024-05-19T22:02:51Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/41"
    },
    "node_id": "I_kwDOAPphoM6C_qoZ",
    "number": 27949,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 8,
        "-1": 0,
        "confused": 0,
        "eyes": 6,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 7,
        "total_count": 21,
        "url": "https://api.github.com/repos/neovim/neovim/issues/27949/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/27949/timeline",
    "title": "simplify remote plugins, massively",
    "updated_at": "2024-05-14T12:48:58Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/27949",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk"
    }
}