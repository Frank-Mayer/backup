{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\nI was reading through `src/nvim/README.md`, which has a [recommended page for configuring nvim-dap for debugging](https://zignar.net/2023/02/17/debugging-neovim-with-neovim-and-nvim-dap). The connection fails for me with a \"waiting for v8 protocol on stdin/stdout\" message. It could be an issue with my configuration or the guide is out of date. Some advice would be appreciated\n\n### Steps to reproduce\n\ngdb version: `GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-120.el7`\r\nneovim (using DAP) version: `NVIM v0.9.0 Build type: RelWithDebInfo LuaJIT 2.1.0-beta3`\r\nneovim (to debug) version: `master branch, bc850ba2a090a9a4733a82a7555a5a70264ce1ac`\r\n\r\n\r\n### Setup\r\n```sh\r\ncd ~\r\nmkdir repositories\r\ncd repositories\r\ngit clone git@github.com:neovim/neovim.git --branch 9de157bce4b6eb055a0d7a39d1ed6b7a6e6c6545\r\n\r\nmkdir -p ~/sources/cpptools-linux-1.13.9\r\ncd ~/sources/cpptools-linux-1.13.9\r\n# download cpptools for your OS\r\nwget https://github.com/microsoft/vscode-cpptools/releases/download/1.13.9/cpptools-linux.vsix\r\nunzip cpptools-linux.vsix\r\nchmod +x extension/debugAdapters/bin/OpenDebugAD7\r\n```\r\n\r\n### Running\r\n<details>\r\n<summary>Get the reproduction.lua</summary>\r\n\r\n```lua\r\nlocal neovim_bin_path = os.getenv(\"HOME\") .. \"/repositories/neovim/build/bin/nvim\"  -- master branch, bc850ba2a090a9a4733a82a7555a5a70264ce1ac\r\nlocal neovim_cwd_path = os.getenv(\"HOME\") .. \"/repositories/neovim\"\r\nlocal cppdbg_bin_path = os.getenv(\"HOME\") .. \"/sources/cpptools-linux-1.13.9/extension/debugAdapters/bin/OpenDebugAD7\"\r\n\r\nlocal root = vim.fn.fnamemodify(\"./.repro\", \":p\")\r\n\r\nfor _, name in ipairs({ \"config\", \"data\", \"state\", \"cache\" }) do\r\n  vim.env[(\"XDG_%s_HOME\"):format(name:upper())] = root .. \"/\" .. name\r\nend\r\n\r\nlocal lazypath = root .. \"/plugins/lazy.nvim\"\r\n\r\nif not vim.loop.fs_stat(lazypath) then\r\n  vim.fn.system({ \"git\", \"clone\", \"--filter=blob:none\", \"https://github.com/folke/lazy.nvim.git\", lazypath, })\r\nend\r\n\r\nvim.opt.runtimepath:prepend(lazypath)\r\n\r\n\r\nlocal plugins = {\r\n    -- Debug adapter plug-in. Debug anything in Neovim\r\n    {\r\n        \"mfussenegger/nvim-dap\",\r\n        config = function()\r\n            local dap = require(\"dap\")\r\n\r\n            -- Reference: https://github.com/mfussenegger/nvim-dap/wiki/C-C---Rust-(gdb-via--vscode-cpptools)#ccrust-gdb-via--vscode-cpptools\r\n            if vim.fn.has(\"win32\") == 1\r\n            then\r\n                -- Note: Not tested. Just copied from the guide above\r\n                dap.adapters.cppdbg = {\r\n                    id = \"cppdbg\",\r\n                    type = \"executable\",\r\n                    command = cppdbg_bin_path,\r\n                    options = {\r\n                        detached = false,\r\n                    },\r\n                }\r\n            else\r\n                dap.adapters.cppdbg = {\r\n                    id = \"cppdbg\",\r\n                    type = \"executable\",\r\n                    command = cppdbg_bin_path,\r\n                }\r\n            end\r\n\r\n            dap.configurations.c = {\r\n                setmetatable(\r\n                    -- ⬇️ This first table is the same as before. It's the actual \"dap-configuration\"\r\n                    {\r\n                        name = \"Neovim\",\r\n                        type = \"cppdbg\",\r\n                        request = \"launch\",\r\n                        program = neovim_bin_path,\r\n                        cwd = neovim_cwd_path,\r\n                        externalConsole = true,\r\n                    },\r\n                    {\r\n                        __call = function(config)\r\n                            vim.fn.system(\"CMAKE_BUILD_TYPE=RelWithDebInfo make\")\r\n                            local key = \"a-unique-arbitrary-key\"\r\n\r\n                            dap.listeners.after.initialize[key] = function(session)\r\n                                dap.listeners.after.initialize[key] = nil\r\n\r\n                                session.on_close[key] = function()\r\n                                    for _, handler in pairs(dap.listeners.after) do\r\n                                        handler[key] = nil\r\n                                    end\r\n                                end\r\n                            end\r\n\r\n                            dap.listeners.after.event_process[key] = function(_, body)\r\n                                dap.listeners.after.event_process[key] = nil\r\n\r\n                                local ppid = body.systemProcessId\r\n                                vim.wait(\r\n                                    1000,\r\n                                    function()\r\n                                        return tonumber(vim.fn.system(\"ps -o pid= --ppid \" .. tostring(ppid))) ~= nil\r\n                                    end\r\n                                )\r\n                                local pid = tonumber(vim.fn.system(\"ps -o pid= --ppid \" .. tostring(ppid)))\r\n\r\n                                -- If we found it, spawn another debug session that attaches to the pid.\r\n                                if pid then\r\n                                    dap.run(\r\n                                        {\r\n                                            name = \"Neovim embedded\",\r\n                                            type = \"cppdbg\",\r\n                                            request = \"attach\",\r\n                                            processId = pid,\r\n                                            program = neovim_bin_path,\r\n                                            cwd = neovim_cwd_path,\r\n                                            externalConsole = false,\r\n                                        }\r\n                                    )\r\n                                end\r\n                            end\r\n\r\n                            return config\r\n                        end\r\n                    }\r\n                ),\r\n            }\r\n\r\n            -- Reference: https://zignar.net/2023/02/17/debugging-neovim-with-neovim-and-nvim-dap/\r\n            local dap = require(\"dap\")\r\n            dap.defaults.fallback.external_terminal = {\r\n                command = \"/usr/bin/bash\";\r\n                args = {\"-c\"};\r\n            }\r\n\r\n            vim.keymap.set(\r\n                \"n\",\r\n                \"<leader>d<space>\",\r\n                \":DapContinue<CR>\",\r\n                {desc=\"Continue through the debugger to the next breakpoint.\"}\r\n            )\r\n            vim.keymap.set(\r\n                \"n\",\r\n                \"<leader>dgt\",\r\n                \":lua require('dap').set_log_level('TRACE')<CR>\",\r\n                {desc=\"Set [d]ebu[g] to [t]race level logging.\"}\r\n            )\r\n            vim.keymap.set(\r\n                \"n\",\r\n                \"<leader>dge\",\r\n                function()\r\n                    vim.cmd(\":edit \" .. vim.fn.stdpath('cache') .. \"/dap.log\")\r\n                end,\r\n                {desc=\"Open the [d]ebu[g] [e]dit file.\"}\r\n            )\r\n        end,\r\n    },\r\n}\r\n\r\nrequire(\"lazy\").setup(plugins, { root = root .. \"/plugins\" })\r\n```\r\n</details>\r\n\r\n(The above configuration should match https://zignar.net/2023/02/17/debugging-neovim-with-neovim-and-nvim-dap except for the external_terminal. The page uses alacritty, I'm using bash)\r\n\r\n```sh\r\ncd ~/repositories/neovim\r\nnvim -u reproduction.lua src/nvim/main.c -c \":DapContinue\"\r\n```\r\n\r\nIt errors with this log:\r\n\r\n<details>\r\n<summary>Click to see the full log, with TRACE level enabled</summary>\r\n\r\n```\r\n\r\n[ DEBUG ] 2023-10-25T21:13:36Z-0700 ] ...ories/neovim/.repro/plugins/nvim-dap/lua/dap/session.lua:1366 ]\t\"Spawning debug adapter\"\t{\r\n  command = \"/home/selecaoone/sources/cpptools-linux-1.13.9/extension/debugAdapters/bin/OpenDebugAD7\",\r\n  id = \"cppdbg\",\r\n  type = \"executable\"\r\n}\r\n[ DEBUG ] 2023-10-25T21:13:36Z-0700 ] ...ories/neovim/.repro/plugins/nvim-dap/lua/dap/session.lua:1677 ]\t\"request\"\t{\r\n  arguments = {\r\n    adapterID = \"cppdbg\",\r\n    clientId = \"neovim\",\r\n    clientname = \"neovim\",\r\n    columnsStartAt1 = true,\r\n    linesStartAt1 = true,\r\n    locale = \"en_US.UTF-8\",\r\n    pathFormat = \"path\",\r\n    supportsProgressReporting = true,\r\n    supportsRunInTerminalRequest = true,\r\n    supportsStartDebuggingRequest = true,\r\n    supportsVariableType = true\r\n  },\r\n  command = \"initialize\",\r\n  seq = 0,\r\n  type = \"request\"\r\n}\r\n[ ERROR ] 2023-10-25T21:13:36Z-0700 ] ...ories/neovim/.repro/plugins/nvim-dap/lua/dap/session.lua:1431 ]\t\"stderr\"\t{\r\n  command = \"/home/selecaoone/sources/cpptools-linux-1.13.9/extension/debugAdapters/bin/OpenDebugAD7\",\r\n  id = \"cppdbg\",\r\n  type = \"executable\"\r\n}\t\"waiting for v8 protocol on stdin/stdout\\n\"\r\n[ DEBUG ] 2023-10-25T21:13:37Z-0700 ] ...ories/neovim/.repro/plugins/nvim-dap/lua/dap/session.lua:950 ]\t1\t{\r\n  body = {\r\n    completionTriggerCharacters = {},\r\n    exceptionBreakpointFilters = { {\r\n        conditionDescription = \"std::out_of_range,std::invalid_argument\",\r\n        default = false,\r\n        filter = \"all\",\r\n        label = \"All C++ Exceptions\",\r\n        supportsCondition = true\r\n      } },\r\n    supportedChecksumAlgorithms = {},\r\n    supportsClipboardContext = true,\r\n    supportsCompletionsRequest = true,\r\n    supportsConditionalBreakpoints = true,\r\n    supportsConfigurationDoneRequest = true,\r\n    supportsDataBreakpoints = true,\r\n    supportsDisassembleRequest = true,\r\n    supportsEvaluateForHovers = true,\r\n    supportsExceptionFilterOptions = true,\r\n    supportsFunctionBreakpoints = true,\r\n    supportsGotoTargetsRequest = true,\r\n    supportsInstructionBreakpoints = true,\r\n    supportsLogPoints = true,\r\n    supportsModulesRequest = true,\r\n    supportsReadMemoryRequest = true,\r\n    supportsSetExpression = true,\r\n    supportsSetVariable = true,\r\n    supportsSteppingGranularity = true,\r\n    supportsValueFormattingOptions = true\r\n  },\r\n  command = \"initialize\",\r\n  request_seq = 0,\r\n  seq = 1,\r\n  success = true,\r\n  type = \"response\"\r\n}\r\n[ DEBUG ] 2023-10-25T21:13:37Z-0700 ] ...ories/neovim/.repro/plugins/nvim-dap/lua/dap/session.lua:1677 ]\t\"request\"\t{\r\n  arguments = {\r\n    cwd = \"/home/selecaoone/repositories/neovim\",\r\n    externalConsole = true,\r\n    name = \"Neovim\",\r\n    program = \"/home/selecaoone/repositories/neovim/build/bin/nvim\",\r\n    request = \"launch\",\r\n    type = \"cppdbg\"\r\n  },\r\n  command = \"launch\",\r\n  seq = 1,\r\n  type = \"request\"\r\n}\r\n[ DEBUG ] 2023-10-25T21:13:37Z-0700 ] ...ories/neovim/.repro/plugins/nvim-dap/lua/dap/session.lua:950 ]\t1\t{\r\n  arguments = {\r\n    args = { \"/bin/sh\", \"/tmp/Microsoft-MIEngine-Cmd-qnac2hoa.4mx\" },\r\n    cwd = \"\",\r\n    env = vim.empty_dict(),\r\n    kind = \"external\",\r\n    title = \"cppdbg: nvim\"\r\n  },\r\n  command = \"runInTerminal\",\r\n  seq = 2,\r\n  type = \"request\"\r\n}\r\n[ DEBUG ] 2023-10-25T21:13:37Z-0700 ] ...ories/neovim/.repro/plugins/nvim-dap/lua/dap/session.lua:208 ]\t\"run_in_terminal\"\t{\r\n  args = { \"/bin/sh\", \"/tmp/Microsoft-MIEngine-Cmd-qnac2hoa.4mx\" },\r\n  cwd = \"\",\r\n  env = vim.empty_dict(),\r\n  kind = \"external\",\r\n  title = \"cppdbg: nvim\"\r\n}\r\n[ DEBUG ] 2023-10-25T21:13:37Z-0700 ] ...ories/neovim/.repro/plugins/nvim-dap/lua/dap/session.lua:1707 ]\t\"response\"\t{\r\n  body = {\r\n    processId = 16389\r\n  },\r\n  command = \"runInTerminal\",\r\n  request_seq = 2,\r\n  seq = 2,\r\n  success = true,\r\n  type = \"response\"\r\n}\r\n```\r\n</details>\r\n\r\n```\r\n[ ERROR ] 2023-10-25T21:13:36Z-0700 ] ...ories/neovim/.repro/plugins/nvim-dap/lua/dap/session.lua:1431 ]\t\"stderr\"\t{\r\n  command = \"/home/selecaoone/sources/cpptools-linux-1.13.9/extension/debugAdapters/bin/OpenDebugAD7\",\r\n  id = \"cppdbg\",\r\n  type = \"executable\"\r\n}\t\"waiting for v8 protocol on stdin/stdout\\n\"\r\n```\n\n### Expected behavior\n\nnvim-dap to connect Neovim for debugging without erroring\n\n### Neovim version (nvim -v)\n\nNVIM v0.9.0\n\n### Vim (not Nvim) behaves the same?\n\nn/a\n\n### Operating system/version\n\nCentOS Linux 7 (Core)\n\n### Terminal name/version\n\nbash 4.2.46(2)-release (x86_64-redhat-linux-gnu)\n\n### $TERM environment variable\n\nscreen-256color\n\n### Installation\n\nappimage --appimage-extract",
    "closed_at": "2023-10-26T07:59:14Z",
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "- bash is a shell, not a terminal. You can't use that as substitute for alacritty. You need to use something like kitty, ghostty, wezterm, ... \r\n- I recommend making sure nvim-dap works for you on a simple hello world first.  The linked post covers an advanced topic.\r\n- This is not a neovim bug,  but looks like an nvim-dap configuration issue. Judging from the log it breaks at the runInTerminal step,  likely due to the bash misconfiguration.  nvim-dap usage questions are better raised in https://github.com/mfussenegger/nvim-dap/discussions ",
            "created_at": "2023-10-26T07:59:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/25785#issuecomment-1780605877",
            "id": 1780605877,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25785",
            "node_id": "IC_kwDOAPphoM5qIeO1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1780605877/reactions"
            },
            "updated_at": "2023-10-26T08:04:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1780605877",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Oh awesome, I'm glad it was just simple user error.\r\n\r\nI replaced the posted reproduction.lua with \r\n\r\n```lua\r\nlocal dap = require(\"dap\")\r\ndap.defaults.fallback.external_terminal = {\r\n    command = \"/bin/konsole\";\r\n    args = {\"-e\"},\r\n}\r\n```\r\n\r\nAnd now it seems to be working. Thank you!",
            "created_at": "2023-10-26T15:17:29Z",
            "html_url": "https://github.com/neovim/neovim/issues/25785#issuecomment-1781335634",
            "id": 1781335634,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25785",
            "node_id": "IC_kwDOAPphoM5qLQZS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1781335634/reactions"
            },
            "updated_at": "2023-10-26T15:17:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1781335634",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10103049?v=4",
                "events_url": "https://api.github.com/users/ColinKennedy/events{/privacy}",
                "followers_url": "https://api.github.com/users/ColinKennedy/followers",
                "following_url": "https://api.github.com/users/ColinKennedy/following{/other_user}",
                "gists_url": "https://api.github.com/users/ColinKennedy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ColinKennedy",
                "id": 10103049,
                "login": "ColinKennedy",
                "node_id": "MDQ6VXNlcjEwMTAzMDQ5",
                "organizations_url": "https://api.github.com/users/ColinKennedy/orgs",
                "received_events_url": "https://api.github.com/users/ColinKennedy/received_events",
                "repos_url": "https://api.github.com/users/ColinKennedy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ColinKennedy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ColinKennedy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ColinKennedy"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/25785/comments",
    "created_at": "2023-10-26T04:20:26Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/25785/events",
    "html_url": "https://github.com/neovim/neovim/issues/25785",
    "id": 1962674733,
    "labels": [],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/25785/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM50_Aot",
    "number": 25785,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/25785/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "not_planned",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/25785/timeline",
    "title": "\"waiting for v8 protocol on stdin/stdout\" error - Debugging Neovim with Neovim and nvim-dap",
    "updated_at": "2023-10-26T21:58:28Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/25785",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/10103049?v=4",
        "events_url": "https://api.github.com/users/ColinKennedy/events{/privacy}",
        "followers_url": "https://api.github.com/users/ColinKennedy/followers",
        "following_url": "https://api.github.com/users/ColinKennedy/following{/other_user}",
        "gists_url": "https://api.github.com/users/ColinKennedy/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ColinKennedy",
        "id": 10103049,
        "login": "ColinKennedy",
        "node_id": "MDQ6VXNlcjEwMTAzMDQ5",
        "organizations_url": "https://api.github.com/users/ColinKennedy/orgs",
        "received_events_url": "https://api.github.com/users/ColinKennedy/received_events",
        "repos_url": "https://api.github.com/users/ColinKennedy/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ColinKennedy/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ColinKennedy/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ColinKennedy"
    }
}