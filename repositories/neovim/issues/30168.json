{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\nJust installed latest NVIM 0.10.1 and my plugins are broken\r\n\r\n```\r\nlocal vim = vim\r\nlocal Plug = vim.fn['plug#']\r\n\r\nvim.call('plug#begin')\r\n\r\n\tPlug('ggandor/leap.nvim')\r\n\tPlug('nvim-tree/nvim-tree.lua')\r\n\tPlug('neovim/nvim-lspconfig')\r\n\tPlug('hrsh7th/cmp-nvim-lsp')\r\n\tPlug('hrsh7th/cmp-buffer')\r\n\tPlug('hrsh7th/cmp-path')\r\n\tPlug('hrsh7th/cmp-cmdline')\r\n\tPlug('hrsh7th/nvim-cmp')\r\n\tPlug('neim-lua/plenary.nvim')\r\n\tPlug('nvim-telescope/telescope.nvim', {['branch'] = '0.1.x'}) --might want to update sometimes\t\r\n\t--REMEMBER TO INSTALL RIPGREP FOR TELESCOPE\r\n\tPlug('karb94/neoscroll.nvim')\r\n\tPlug('NLKNguyen/papercolor-theme')\r\n\r\nvim.call('plug#end')\r\n\r\nrequire('leap').create_default_mappings()\r\nrequire(\"nvim-tree\").setup()\r\nrequire('neoscroll').setup()\r\n\r\n-- TELESCOPE RELATED STUFF --------------------------------\r\n\r\nlocal builtin = require('telescope.builtin')\r\nvim.keymap.set('n', '<leader>ff', builtin.find_files, {})\r\nvim.keymap.set('n', '<leader>fg', builtin.live_grep, {})\r\nvim.keymap.set('n', '<leader>fb', builtin.buffers, {})\r\nvim.keymap.set('n', '<leader>fh', builtin.help_tags, {})\r\n\r\n-- AUTOCOMPLETE RELATED STUFF -----------------------------\r\nlocal cmp = require'cmp'\r\n\r\n  cmp.setup({\r\n    window = {\r\n      completion = cmp.config.window.bordered(),\r\n      documentation = cmp.config.window.bordered(),\r\n    },\r\n    mapping = cmp.mapping.preset.insert({\r\n      ['<C-Space>'] = cmp.mapping.complete(),\r\n      ['<C-e>'] = cmp.mapping.abort(),\r\n\t['<TAB>'] = cmp.mapping.select_next_item(),\r\n\t['<C-j>'] = cmp.mapping.select_next_item(),\r\n\t['<C-k>'] = cmp.mapping.select_prev_item(),\r\n      ['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.\r\n    }),\r\n    sources = cmp.config.sources({\r\n\t\t\t{ name = 'nvim_lsp' },\r\n    }, {\r\n      { name = 'buffer' },\r\n    }) \r\n  })\r\n\r\n  -- Set configuration for specific filetype.\r\n  cmp.setup.filetype('gitcommit', {\r\n    sources = cmp.config.sources({\r\n      { name = 'git' }, -- You can specify the `git` source if [you were installed it](https://github.com/petertriho/cmp-git).\r\n    }, {\r\n      { name = 'buffer' },\r\n    })\r\n  })\r\n\r\n  -- Use buffer source for `/` and `?` (if you enabled `native_menu`, this won't work anymore).\r\n\tcmp.setup.cmdline({ '/', '?' }, {\r\n    mapping = cmp.mapping.preset.cmdline(),\r\n    sources = {\r\n      { name = 'buffer' }\r\n    }\r\n  })\r\n  -- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).\r\n  cmp.setup.cmdline(':', {\r\n    mapping = cmp.mapping.preset.cmdline(),\r\n    sources = cmp.config.sources({\r\n      { name = 'path' }\r\n    }, {\r\n      { name = 'cmdline' }\r\n    })\r\n  })\r\n\r\n-- LSP RELATED STUFF ---------------------------------------\r\n\t\r\n\tlocal lspconfig = require('lspconfig') \r\n\tlocal capabilities = require('cmp_nvim_lsp').default_capabilities()\r\n\t\r\n\tlspconfig.html.setup {\r\n\t  capabilities = capabilities,\r\n\t}\r\n\tlspconfig.tsserver.setup{}\r\n\tlspconfig.gopls.setup{}\r\n\r\nvim.keymap.set('n', '<space>e', vim.diagnostic.open_float)\r\nvim.keymap.set('n', '[d', vim.diagnostic.goto_prev)\r\nvim.keymap.set('n', ']d', vim.diagnostic.goto_next)\r\nvim.keymap.set('n', '<space>q', vim.diagnostic.setloclist)\r\n\r\n-- Use LspAttach autocommand to only map the following keys\r\n-- after the language server attaches to the current buffer\r\nvim.api.nvim_create_autocmd('LspAttach', {\r\n  group = vim.api.nvim_create_augroup('UserLspConfig', {}),\r\n  callback = function(ev)\r\n    -- Enable completion triggered by <c-x><c-o>\r\n    vim.bo[ev.buf].omnifunc = 'v:lua.vim.lsp.omnifunc'\r\n\r\n    -- Buffer local mappings.\r\n    -- See `:help vim.lsp.*` for documentation on any of the below functions\r\n    local opts = { buffer = ev.buf }\r\n    vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, opts)\r\n    vim.keymap.set('n', 'gd', vim.lsp.buf.definition, opts)\r\n    vim.keymap.set('n', 'K', vim.lsp.buf.hover, opts)\r\n    vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, opts)\r\n    vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, opts)\r\n    vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, opts)\r\n    vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, opts)\r\n    vim.keymap.set('n', '<space>wl', function()\r\n      print(vim.inspect(vim.lsp.buf.list_workspace_folders()))\r\n    end, opts)\r\n    vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, opts)\r\n    vim.keymap.set('n', '<space>rn', vim.lsp.buf.rename, opts)\r\n    vim.keymap.set({ 'n', 'v' }, '<space>ca', vim.lsp.buf.code_action, opts)\r\n    vim.keymap.set('n', 'gr', vim.lsp.buf.references, opts)\r\n    vim.keymap.set('n', '<space>f', function()\r\n      vim.lsp.buf.format { async = true }\r\n    end, opts)\r\n  end,\r\n})\r\n\r\nvim.opt.shiftwidth = 4\r\nvim.opt.tabstop = 4\r\nvim.opt.number = true\r\nvim.wo.wrap = false\r\n\r\nvim.opt.background =  \"dark\"\r\nvim.cmd(\"colorscheme PaperColor\")\r\n```\r\n\r\nnvim leap no longer highlights matching text\r\ncolorscheme papercolor is not loading papercolor, but it works fine if the command is invoked manually.\n\n### Steps to reproduce\n\n-\n\n### Expected behavior\n\n-\n\n### Neovim version (nvim -v)\n\nNVIM v0.10.1 Build type: Release LuaJIT 2.1.1713484068\n\n### Vim (not Nvim) behaves the same?\n\ndont know\n\n### Operating system/version\n\nwinodws 11\n\n### Terminal name/version\n\nwindows terminal\n\n### $TERM environment variable\n\n-\n\n### Installation\n\ndownloaded from github release zip windows x64, installed manually",
    "closed_at": "2024-08-28T09:06:53Z",
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/30168/comments",
    "created_at": "2024-08-28T09:04:33Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/30168/events",
    "html_url": "https://github.com/neovim/neovim/issues/30168",
    "id": 2491507345,
    "labels": [],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/30168/labels{/name}",
    "locked": true,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6UgWKR",
    "number": 30168,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/30168/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/30168/timeline",
    "title": "Everything breaks",
    "updated_at": "2024-08-28T09:06:53Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/30168",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/106366188?v=4",
        "events_url": "https://api.github.com/users/NRicode/events{/privacy}",
        "followers_url": "https://api.github.com/users/NRicode/followers",
        "following_url": "https://api.github.com/users/NRicode/following{/other_user}",
        "gists_url": "https://api.github.com/users/NRicode/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/NRicode",
        "id": 106366188,
        "login": "NRicode",
        "node_id": "U_kgDOBlcE7A",
        "organizations_url": "https://api.github.com/users/NRicode/orgs",
        "received_events_url": "https://api.github.com/users/NRicode/received_events",
        "repos_url": "https://api.github.com/users/NRicode/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/NRicode/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/NRicode/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/NRicode"
    }
}