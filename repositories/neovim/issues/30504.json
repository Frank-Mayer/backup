{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\r\n\r\nI'm looking at implementing `vim`'s popup API in `lua` (actually adding missing pieces to `plenary.nvim/popup`). #30490 is targeted to the same goal and shares the problem with `focusable`/mouse-events. This issue is specifically about how to implement `close = click`.\r\n\r\nThe idea is to do something like\r\n```\r\nvim.keymap.set({'n', 'i'}, '<LeftRelease>', function()\r\n    mouse_click(\"buffer\")\r\nend, {buffer = popup_buffer})\r\n```\r\nThe use of `{buffer = popup_buffer}` is important to avoid interfering with other uses of `<LeftRelease>`. So the idea of examining all clicks in parent window is a non-starter.\r\n\r\nOne idea is to add a key to `nvim_open_win`, `mousable` or`mouse_enable` or `mouseevent` or ..., when true mouse events are delivered to/through the window. (`mouseevent` is similarly named to `mousemoveevent`). A simple way to define this flag's semantics are `mouseevent` defaults to the same value as `focusable`; `mouseevent` is used, not `focusable`, for deciding on whether or not to deliver mouse events. It interesting that with this, #30490 could be finessed without any changes to the `getmousepos()` API.\r\n\r\nYou can play with the interaction of `focusable` and click using this code.\r\n\r\n```lua\r\nlocal popup_wid\r\n\r\nlocal function mouse_click(tag)\r\n    local mp = vim.fn.getmousepos()\r\n    vim.print(string.format(\"CLICK %s: line %d, col %d\", tag, mp.screenrow, mp.screencol))\r\nend\r\n\r\nlocal xpos = 30\r\nlocal ypos = 6\r\nlocal function Pop1Any()\r\n    local bnr = vim.api.nvim_create_buf(false, true)\r\n    assert(bnr, \"Failed to create buffer\")\r\n    vim.api.nvim_buf_set_lines(bnr, 0, -1, true, {'simple', '=' .. tostring(ypos) .. '='})\r\n\r\n    vim.api.nvim_set_option_value(\"bufhidden\", \"wipe\", {buf = bnr})\r\n    vim.api.nvim_set_option_value(\"modifiable\", true, {buf = bnr})\r\n    popup_wid = vim.api.nvim_open_win(bnr, false, {\r\n        relative = \"editor\",\r\n        style = \"minimal\",\r\n        width = 10,\r\n        height = 2,\r\n        focusable = false, -- XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\n        col = xpos,\r\n        row = ypos,\r\n    })\r\n    xpos = xpos + 3\r\n    ypos = ypos + 3\r\n    vim.keymap.set({'n', 'i'}, '<LeftRelease>', function() mouse_click(\"buffer\") end, {buffer = bnr})\r\nend\r\n\r\nPop1Any()\r\n\r\nvim.keymap.set({'n', 'i'}, '<LeftRelease>', function() mouse_click(\"global\") end)\r\n```\r\n\r\n\r\n### Expected behavior\r\n\r\nSome way to get this to work.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "(So that's what needs-owner means) \r\n\r\nI am interested in working on this, and #30490. I'm assuming it's a relatively small PR, but involving code, spec, doc is a good introduction to `neovim` development. @justinmk  Other than simply stating this interest, is there a process ...\r\n\r\nThe idea is to introduce a window config flag [`mousable`](https://wiktionary.org/wiki/mouseable) and use it for handling mouse events and in `getmousepos()`. Are there other places where it's use would be applicable? The precise spec relates to some discussion in in #30507 and specifically from https://github.com/neovim/neovim/pull/30507#issuecomment-2374765534\r\n\r\n> In nvim_win_open if mousable is not explicitly set, it should be set to the the value of focusable. \r\n> If focusable and/or hide are changed, and mousable is not explicitly changed as well, what should happen?\r\n",
            "created_at": "2024-09-25T19:09:19Z",
            "html_url": "https://github.com/neovim/neovim/issues/30504#issuecomment-2374972321",
            "id": 2374972321,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30504",
            "node_id": "IC_kwDOAPphoM6NjzOh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2374972321/reactions"
            },
            "updated_at": "2024-09-25T19:09:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2374972321",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/20450427?v=4",
                "events_url": "https://api.github.com/users/errael/events{/privacy}",
                "followers_url": "https://api.github.com/users/errael/followers",
                "following_url": "https://api.github.com/users/errael/following{/other_user}",
                "gists_url": "https://api.github.com/users/errael/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/errael",
                "id": 20450427,
                "login": "errael",
                "node_id": "MDQ6VXNlcjIwNDUwNDI3",
                "organizations_url": "https://api.github.com/users/errael/orgs",
                "received_events_url": "https://api.github.com/users/errael/received_events",
                "repos_url": "https://api.github.com/users/errael/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/errael/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/errael/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/errael",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I can implement it, but the interface still needs some decision. The `mousable` name is strange. I think `mouseevent` is a better name. The field may also be simple named `mouse`.\r\n\r\nIn addition, the buffer-local mapping example won't work even if `getmousepos()` works for the floating window, as mappings are applied before mouse handling and use buffer-local mappings from the current buffer at that time.\r\n\r\nInstead, how about making the field also also accept a callback that\r\n- handles any mouse events (click, drag, move, scroll) on that window (unlike 'statusline' callbacks that only handle clicks)\r\n- can tell Nvim how to proceed with the mouse event via the return value (e.g. `nil` for no more handling, `false` to pass it to the next window in zindex order, `true` to use default handling in the window)\r\n\r\nSuch a field may even be applicable to non-floating windows.",
            "created_at": "2024-09-25T23:07:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/30504#issuecomment-2375424832",
            "id": 2375424832,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30504",
            "node_id": "IC_kwDOAPphoM6NlhtA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2375424832/reactions"
            },
            "updated_at": "2024-09-25T23:19:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2375424832",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I can implement it, but the interface still needs some decision. The `mousable` name is strange. I think `mouseevent` is a better name. The field may also be simple named `mouse`.\r\n\r\nI like `mouseevent`, especially if the field accepts a callback. `mousable`, an alternate spelling of `mouseable` is like `focusable`. I looked up `mouseable` and saw \"Capable of being navigated, clicked, etc. using a mouse\"...; but, as you say, the name is strange (probably part of its appeal to me).\r\n\r\n> In addition, the buffer-local mapping example won't work even if `getmousepos()` works for the floating window, as mappings are applied before mouse handling and use buffer-local mappings from the current buffer at that time.\r\n\r\nI don't entirely understand this comment. The code in the OP works when `focusable` is true. But doesn't matter when using the following approach of asking the window what it wants to do.\r\n\r\n> Instead, how about making the field also also accept a callback that\r\n> \r\n>     * handles any mouse events (click, drag, move, scroll) on that window (unlike 'statusline' callbacks that only handle clicks)\r\n> \r\n>     * can tell Nvim how to proceed with the mouse event via the return value (e.g. `nil` for no more handling, `false` to pass it to the next window in zindex order, `true` to use default handling in the window)\r\n\r\nWorks for me. Interestingly, in the callback could move the focus to a non-focusable window. I suppose there's no way for the callback to get the state of any keys, like Shift/Ctrl/Alt.\r\n\r\nDon't see how this has any applicability to `getmousepos()`. Unless the callback might be invoked with something like `getmouseposevent` and return `true`; or return \"use-this-window\" if `true` would mean skip the window.\r\n\r\n> Such a field may even be applicable to non-floating windows.\r\n",
            "created_at": "2024-09-26T01:27:24Z",
            "html_url": "https://github.com/neovim/neovim/issues/30504#issuecomment-2375556117",
            "id": 2375556117,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30504",
            "node_id": "IC_kwDOAPphoM6NmBwV",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2375556117/reactions"
            },
            "updated_at": "2024-09-26T01:27:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2375556117",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/20450427?v=4",
                "events_url": "https://api.github.com/users/errael/events{/privacy}",
                "followers_url": "https://api.github.com/users/errael/followers",
                "following_url": "https://api.github.com/users/errael/following{/other_user}",
                "gists_url": "https://api.github.com/users/errael/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/errael",
                "id": 20450427,
                "login": "errael",
                "node_id": "MDQ6VXNlcjIwNDUwNDI3",
                "organizations_url": "https://api.github.com/users/errael/orgs",
                "received_events_url": "https://api.github.com/users/errael/received_events",
                "repos_url": "https://api.github.com/users/errael/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/errael/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/errael/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/errael",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": ">  * can tell Nvim how to proceed with the mouse event via the return value (e.g. `nil` for no more handling, \r\n> `false` to pass it to the next window in zindex order, `true` to use default handling in the window)\r\n\r\nDoes the \"next window in zindex order\" includes hidden windows? (I'm not asking/hoping that it does)",
            "created_at": "2024-09-26T01:36:01Z",
            "html_url": "https://github.com/neovim/neovim/issues/30504#issuecomment-2375563995",
            "id": 2375563995,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30504",
            "node_id": "IC_kwDOAPphoM6NmDrb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2375563995/reactions"
            },
            "updated_at": "2024-09-26T01:36:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2375563995",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/20450427?v=4",
                "events_url": "https://api.github.com/users/errael/events{/privacy}",
                "followers_url": "https://api.github.com/users/errael/followers",
                "following_url": "https://api.github.com/users/errael/following{/other_user}",
                "gists_url": "https://api.github.com/users/errael/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/errael",
                "id": 20450427,
                "login": "errael",
                "node_id": "MDQ6VXNlcjIwNDUwNDI3",
                "organizations_url": "https://api.github.com/users/errael/orgs",
                "received_events_url": "https://api.github.com/users/errael/received_events",
                "repos_url": "https://api.github.com/users/errael/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/errael/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/errael/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/errael",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > In addition, the buffer-local mapping example won't work even if `getmousepos()` works for the floating window, as mappings are applied before mouse handling and use buffer-local mappings from the current buffer at that time.\r\n> \r\n> I don't entirely understand this comment. The code in the OP works when `focusable` is true.\r\n\r\nAh, for that to work, it will require the window to be focusable via a mouse click (i.e. mouse click switches to the window). That may actually not require an extra flag since it's still about focus, but can instead be enabled by allowing `focusable` to be a string (say `mouse`), which is much simpler.\r\n\r\nHowever, if you don't actually want the cursor to be moved to the window, with this approach you will need to move cursor back manually on `<LeftRelase>`, which is a bit complicated as `<LeftMouse>` and `<LeftRelease>` are two separate keys and anything can happen in between.",
            "created_at": "2024-09-26T02:19:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/30504#issuecomment-2375617633",
            "id": 2375617633,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30504",
            "node_id": "IC_kwDOAPphoM6NmQxh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2375617633/reactions"
            },
            "updated_at": "2024-09-26T02:26:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2375617633",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> > > In addition, the buffer-local mapping example won't work even if `getmousepos()` works for the floating window, as mappings are applied before mouse handling and use buffer-local mappings from the current buffer at that time.\r\n> > \r\n> > \r\n> > I don't entirely understand this comment. The code in the OP works when `focusable` is true.\r\n> \r\n> Ah, for that to work, it will require the window to be focusable via a mouse click (i.e. mouse click switches to the window). That may actually not require an extra flag since it's still about focus, but can instead be enabled by allowing `focusable` to be a string (say `mouse`), which is much simpler.\r\n> \r\n> However, if you don't actually want the cursor to be moved to the window, with this approach you will need to move cursor back manually on `<LeftRelase>`, which is a bit complicated as `<LeftMouse>` and `<LeftRelease>` are two separate keys and anything can happen in between.\r\n\r\nThanks,\r\nWith the window mouse callback. I have no need for this. Just curious to understand what is going on.",
            "created_at": "2024-09-26T03:30:40Z",
            "html_url": "https://github.com/neovim/neovim/issues/30504#issuecomment-2375782693",
            "id": 2375782693,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30504",
            "node_id": "IC_kwDOAPphoM6Nm5El",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2375782693/reactions"
            },
            "updated_at": "2024-09-27T16:54:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2375782693",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/20450427?v=4",
                "events_url": "https://api.github.com/users/errael/events{/privacy}",
                "followers_url": "https://api.github.com/users/errael/followers",
                "following_url": "https://api.github.com/users/errael/following{/other_user}",
                "gists_url": "https://api.github.com/users/errael/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/errael",
                "id": 20450427,
                "login": "errael",
                "node_id": "MDQ6VXNlcjIwNDUwNDI3",
                "organizations_url": "https://api.github.com/users/errael/orgs",
                "received_events_url": "https://api.github.com/users/errael/received_events",
                "repos_url": "https://api.github.com/users/errael/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/errael/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/errael/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/errael",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "The idea of having the controlling logic embedded in the window, with a mouse callback, avoids the problems with interactions as seen between `hide` and `focusable` and trying to handle it generally in the core.\r\n\r\n> Instead, how about making the field **also** accept a callback that\r\n\r\n\"Also\"? What might be other possibilities.\r\n\r\nOh, maybe bool value is a shorthand for something like: `function() return bool end`\r\n\r\n> * handles any mouse events (click, drag, move, scroll) on that window\r\n>    (unlike 'statusline' callbacks that only handle clicks)\r\n> \r\n> * can tell Nvim how to proceed with the mouse event via the return value\r\n>    `nil` for no more handling, \r\n>    `false` to pass it to the next window in zindex order, \r\n>    `true` to use default handling in the window\r\n\r\nWondering how this might work when there's multiple windows under the cursor.\r\n\r\nWindows are checked in `zindex` order. Are hidden included? If there's no `mouseevent` field is that the same as returning `false`, i.e. check the next window?\r\n\r\nI guess most callbacks would start with `if this_win.hide then return false end`.\r\n\r\nConsider the case where a popup, `{focusable=false,hide=false,}`, wants to close if it is clicked.\r\n\r\nIf there's a popup which is **partially** obscured by one or more normal windows `{focusable=true,hide=false,}` which have callback that returns `false`. The popup does not want to handle the click, unless the click is on a visible position in the popup. The question is `this_win:is_obscured_xy(x_mouse, y_mouse)`\r\n\r\nA window's mouse callback might want to know (maybe more, maybe less)\r\n- this_win\r\n- is_obscured_xy(x, y)\r\n- under_xy_list_win(), this_win_index\r\n- is_obscured_fully()\r\n",
            "created_at": "2024-09-27T02:15:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/30504#issuecomment-2378273781",
            "id": 2378273781,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30504",
            "node_id": "IC_kwDOAPphoM6NwZP1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2378273781/reactions"
            },
            "updated_at": "2024-09-27T02:15:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2378273781",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/20450427?v=4",
                "events_url": "https://api.github.com/users/errael/events{/privacy}",
                "followers_url": "https://api.github.com/users/errael/followers",
                "following_url": "https://api.github.com/users/errael/following{/other_user}",
                "gists_url": "https://api.github.com/users/errael/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/errael",
                "id": 20450427,
                "login": "errael",
                "node_id": "MDQ6VXNlcjIwNDUwNDI3",
                "organizations_url": "https://api.github.com/users/errael/orgs",
                "received_events_url": "https://api.github.com/users/errael/received_events",
                "repos_url": "https://api.github.com/users/errael/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/errael/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/errael/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/errael",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Some part of the suggestions above may be infeasible to implement when using a callback (e.g. checking the next window in zindex order after checking the callback's return value), and in that case a boolean value may be easier to implement. But anyway, I don't think mouse click position checking should include hidden windows, and it's kind of hard to include hidden windows there.",
            "created_at": "2024-09-27T02:22:07Z",
            "html_url": "https://github.com/neovim/neovim/issues/30504#issuecomment-2378279218",
            "id": 2378279218,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30504",
            "node_id": "IC_kwDOAPphoM6Nwaky",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2378279218/reactions"
            },
            "updated_at": "2024-09-27T02:57:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2378279218",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Some part of the suggestions above may be infeasible to implement when using a callback (e.g. checking the next window in zindex order after checking the callback's return value),\r\n\r\nI don't know the technical issues. I can imagine that if control is passed to a callback, then when the callback returns it is difficult, if not impossible, to know how the callback may have changed the state.\r\n\r\n> and in that case a boolean value may be easier to implement.\r\n\r\nIIUC, this won't handle the goal of this enhancement request as you say in https://github.com/neovim/neovim/issues/30504#issuecomment-2375424832. A key point for using a buffer mapping is that it doesn't interfere with other mappings and/or normal non-popup operation; see the end of this post for some discussion.\r\n\r\nSomething like `mouseevent = { \"click\" = callback, }` could work; or the simpler `mouseevent = callback`. The key point is that no further `nvim` mouse event processing after the callback returns. Specifying `mouseevent` means the event is consumed.\r\n\r\nThis is workable for the popup use case `{close = \"click\"}`. It seems like it would also work for the cases of dragging a popup (assuming the mouse doesn't go outside of the popup while dragging).\r\n\r\nIt's interesting to note that auto commands, unlike mappings, allow multiple listeners; but no way to consume the event.\r\n\r\n> But anyway, I don't think mouse click position checking should include hidden windows,\r\n\r\nMakes sense to me.\r\n\r\n> and it's kind of hard to include hidden windows there.\r\n\r\n-----\r\n\r\n**interference example**\r\n\r\nThe use case I'm looking at, providing vim's popup API for `neovim`, doesn't want to interfere with normal usage.\r\n\r\n\r\nFor example here's a case that is not about catching mouse events for a specific buffer, but shows the issues involved. Consider popup's `mousemoved = \"any\"` is \"close the popup if the cursor moved\". I've got an implementation that\r\n1. save the current state of `'mousemoveevent'` and `<MouseMove>` mapping.\r\n2. set up a `<MouseMove>` mapping that closes the popup\r\n3. when the popup closes for any reason, not just mouse move, restore the mapping.\r\n\r\nThis seems OK because only one mouse event is stolen before the mapping is restored. But other `mousemoved` conditions require continuous monitoring which is undesirable.\r\n\r\n",
            "created_at": "2024-09-28T20:04:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/30504#issuecomment-2380881480",
            "id": 2380881480,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30504",
            "node_id": "IC_kwDOAPphoM6N6V5I",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2380881480/reactions"
            },
            "updated_at": "2024-09-28T20:04:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2380881480",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/20450427?v=4",
                "events_url": "https://api.github.com/users/errael/events{/privacy}",
                "followers_url": "https://api.github.com/users/errael/followers",
                "following_url": "https://api.github.com/users/errael/following{/other_user}",
                "gists_url": "https://api.github.com/users/errael/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/errael",
                "id": 20450427,
                "login": "errael",
                "node_id": "MDQ6VXNlcjIwNDUwNDI3",
                "organizations_url": "https://api.github.com/users/errael/orgs",
                "received_events_url": "https://api.github.com/users/errael/received_events",
                "repos_url": "https://api.github.com/users/errael/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/errael/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/errael/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/errael",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Oops. Just noticed #30542; previous comment out of date before it was written. Still might find the \"interference example\" of interest.",
            "created_at": "2024-09-28T23:05:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/30504#issuecomment-2381018594",
            "id": 2381018594,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30504",
            "node_id": "IC_kwDOAPphoM6N63Xi",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2381018594/reactions"
            },
            "updated_at": "2024-09-28T23:05:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2381018594",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/20450427?v=4",
                "events_url": "https://api.github.com/users/errael/events{/privacy}",
                "followers_url": "https://api.github.com/users/errael/followers",
                "following_url": "https://api.github.com/users/errael/following{/other_user}",
                "gists_url": "https://api.github.com/users/errael/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/errael",
                "id": 20450427,
                "login": "errael",
                "node_id": "MDQ6VXNlcjIwNDUwNDI3",
                "organizations_url": "https://api.github.com/users/errael/orgs",
                "received_events_url": "https://api.github.com/users/errael/received_events",
                "repos_url": "https://api.github.com/users/errael/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/errael/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/errael/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/errael",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "With the following diff on top of this PR the popup code has `drag`, `dragall`, `close=\"click\"`, `close=\"button\"` implemented; in addition to almost all of `vim`'s popup functions. See https://github.com/errael/plenary.nvim/blob/PopupDrag/POPUP.md for a summary of what's implemented. `Filter` is done, but needs support, see #30741; also needs more tests.\n\nThe diff insures that drag and release mouse events are delivered to the  same window where the click occurred. It only handles the left button. Its structured so it can be easily extended to handle all the buttons. _I can do that if wanted; LMK._\n\nFYI, I checked interactions between multiple button actions during a drag. `Neovim` looks clean; I may not agree with the choices, but they make sense. Interestingly, `vim` is buggy. Here's a summary of behavior\n\n**neovim**\n\nLeft drag is prioritized; a left drag interrupts a right drag.\n\n- given: left-click, drag, right-click, drag, right-release, drag, left-release\n  `<LeftMouse <LeftDrag ... <RightMouse <LeftDrag ... <RightRelease <LeftDrag ... <LeftRelease`\n\n- given: right-click, drag, left-click, drag, left-release, drag, right-release\n  `<RightMouse <RightDrag ... <LeftMouse <LeftDrag ... <LeftRelease <RightDrag ... <RightRelease`\n\n**vim**\n\nNo drag priority, looses in progress drag after a release, missing release, unexpected mouse move events (and &mousemoveevent==false)\n\n- given: left-click, drag, right-click, drag, right-release, drag, left-release\n  `<LeftMouse <LeftDrag ... <RightMouse <RightDrag ... <RightRelease <MouseMove ...`\n\n- given: right-click, drag, left-click, drag, left-release, drag, right-release\n  `<RightMouse <RightDrag ... <LeftMouse <LeftDrag ... <LeftRelease <MouseMove ...`\n\n\n```diff\ndiff --git a/src/nvim/mouse.c b/src/nvim/mouse.c\n--- a/src/nvim/mouse.c\n+++ b/src/nvim/mouse.c\n@@ -225,27 +225,60 @@\n   got_click = false;\n }\n \n+static struct mouse_click_op {\n+    handle_T owner;\n+    int owned_click;\n+    int current_click;\n+} left_click;\n+\n+// Return the window that has a drag related operation in progress.\n+static win_T *drag_mouse(int c)\n+{\n+  if (c == K_LEFTDRAG || c == K_LEFTRELEASE) {\n+    Error err = ERROR_INIT;\n+    win_T *wp = find_window_by_handle(left_click.owner, &err);\n+    if (!ERROR_SET(&err) && wp != NULL && left_click.owned_click == left_click.current_click) {\n+      return wp;\n+    }\n+  }\n+  return NULL;\n+}\n+\n /// When clicking on a window with a mouse callback, invoke it.\n ///\n /// @return  whether to proceeded with mouse handling.\n-static bool invoke_mouse_cb(void)\n+static bool invoke_mouse_cb(int c)\n {\n   int grid = mouse_grid;\n   int row = mouse_row;\n   int col = mouse_col;\n \n+  if (c == K_LEFTMOUSE) {\n+      left_click.current_click++;\n+  }\n+\n   if (row < 0 || col < 0) {\n     return true;\n   }\n \n-  win_T *wp = mouse_find_win(&grid, &row, &col);\n+  win_T *wp;\n+  if ((wp = drag_mouse(c)) == NULL) {\n+    wp = mouse_find_win(&grid, &row, &col);\n+    if (wp != NULL && c == K_LEFTMOUSE) {\n+      left_click.owner = wp->handle;\n+      left_click.owned_click = left_click.current_click;\n+    }\n+  }\n+\n   if (wp == NULL || wp->w_config.mouse != kWinMouseCallback) {\n     return true;\n   }\n+  DLOG(\"c = %4x %s, click: %d, winid %d\", c&0xffff, get_special_key_name(c, 0),\n+       left_click.current_click, wp->handle);\n \n   Error err = ERROR_INIT;\n-  Object res = nlua_call_ref(wp->w_config.mouse_cb, NULL, (Array)ARRAY_DICT_INIT,\n-                             kRetNilBool, NULL, &err);\n+  Object res = nlua_call_ref(wp->w_config.mouse_cb, get_special_key_name(c, 0),\n+                             (Array)ARRAY_DICT_INIT, kRetNilBool, NULL, &err);\n   bool retval = LUARET_TRUTHY(res);\n   if (ERROR_SET(&err)) {\n     semsg_multiline(\"E5108: %s\", err.msg);\n@@ -403,7 +436,7 @@\n     break;\n   }\n \n-  if (!invoke_mouse_cb()) {\n+  if (!invoke_mouse_cb(c)) {\n     return false;\n   }\n \n@@ -1099,7 +1132,7 @@\n /// of the MSCR_ values.\n void ins_mousescroll(int dir)\n {\n-  if (!invoke_mouse_cb()) {\n+  if (!invoke_mouse_cb(0)) {\n     return;\n   }\n \n@@ -1612,7 +1645,7 @@\n /// \"cap->arg\", which is one of the MSCR_ values.\n void nv_mousescroll(cmdarg_T *cap)\n {\n-  if (!invoke_mouse_cb()) {\n+  if (!invoke_mouse_cb(0)) {\n     return;\n   }\n \n```\n",
            "created_at": "2024-10-16T03:08:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/30504#issuecomment-2415632851",
            "id": 2415632851,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30504",
            "node_id": "IC_kwDOAPphoM6P-6HT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2415632851/reactions"
            },
            "updated_at": "2024-10-16T03:08:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2415632851",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/20450427?v=4",
                "events_url": "https://api.github.com/users/errael/events{/privacy}",
                "followers_url": "https://api.github.com/users/errael/followers",
                "following_url": "https://api.github.com/users/errael/following{/other_user}",
                "gists_url": "https://api.github.com/users/errael/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/errael",
                "id": 20450427,
                "login": "errael",
                "node_id": "MDQ6VXNlcjIwNDUwNDI3",
                "organizations_url": "https://api.github.com/users/errael/orgs",
                "received_events_url": "https://api.github.com/users/errael/received_events",
                "repos_url": "https://api.github.com/users/errael/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/errael/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/errael/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/errael",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Left drag is prioritized; a left drag interrupts a right drag.\n\nI don't think Nvim is responsible for deciding the priority here. This priority is decided by the terminal emulator. Try running `printf '\\x1b[?1002h\\x1b[?1006h'; cat; printf '\\x1b[?1002l\\x1b[?1006l'` in a terminal emulator, and comparing the escape sequences shown during different kinds of drags.",
            "created_at": "2024-10-16T03:22:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/30504#issuecomment-2415645870",
            "id": 2415645870,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30504",
            "node_id": "IC_kwDOAPphoM6P-9Su",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2415645870/reactions"
            },
            "updated_at": "2024-10-16T03:22:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2415645870",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> > Left drag is prioritized; a left drag interrupts a right drag.\n> \n> I don't think Nvim is responsible for deciding the priority here. This priority is decided by the terminal emulator. ...\n\nI took a look at what comes through to quell any doubts that the scheme on directing events to a window's mouse handler wouldn't run into problems. I don't think the `neovim` behavior is wrong.\n\nBTW, that sequence is pretty cool. A preliminary look indicates those events are essentially passed through. For example, a right button drag is interrupted by left button drag and then the right drag resumes.",
            "created_at": "2024-10-16T04:51:42Z",
            "html_url": "https://github.com/neovim/neovim/issues/30504#issuecomment-2415727017",
            "id": 2415727017,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30504",
            "node_id": "IC_kwDOAPphoM6P_RGp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2415727017/reactions"
            },
            "updated_at": "2024-10-16T20:42:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2415727017",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/20450427?v=4",
                "events_url": "https://api.github.com/users/errael/events{/privacy}",
                "followers_url": "https://api.github.com/users/errael/followers",
                "following_url": "https://api.github.com/users/errael/following{/other_user}",
                "gists_url": "https://api.github.com/users/errael/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/errael",
                "id": 20450427,
                "login": "errael",
                "node_id": "MDQ6VXNlcjIwNDUwNDI3",
                "organizations_url": "https://api.github.com/users/errael/orgs",
                "received_events_url": "https://api.github.com/users/errael/received_events",
                "repos_url": "https://api.github.com/users/errael/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/errael/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/errael/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/errael",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 13,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/30504/comments",
    "created_at": "2024-09-25T00:11:53Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/30504/events",
    "html_url": "https://github.com/neovim/neovim/issues/30504",
    "id": 2546624130,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 646043375,
            "name": "mouse",
            "node_id": "MDU6TGFiZWw2NDYwNDMzNzU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/mouse"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "floating windows, popups, hover",
            "id": 3234818716,
            "name": "floatwin",
            "node_id": "MDU6TGFiZWwzMjM0ODE4NzE2",
            "url": "https://api.github.com/repos/neovim/neovim/labels/floatwin"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/30504/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 246,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 267,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2024-10-18T09:09:28Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "I_kwDOAPphoM6XymaC",
    "number": 30504,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/30504/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/30504/timeline",
    "title": "mouse event for buffer in non-focusable window",
    "updated_at": "2024-10-16T20:42:05Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/30504",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/20450427?v=4",
        "events_url": "https://api.github.com/users/errael/events{/privacy}",
        "followers_url": "https://api.github.com/users/errael/followers",
        "following_url": "https://api.github.com/users/errael/following{/other_user}",
        "gists_url": "https://api.github.com/users/errael/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/errael",
        "id": 20450427,
        "login": "errael",
        "node_id": "MDQ6VXNlcjIwNDUwNDI3",
        "organizations_url": "https://api.github.com/users/errael/orgs",
        "received_events_url": "https://api.github.com/users/errael/received_events",
        "repos_url": "https://api.github.com/users/errael/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/errael/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/errael/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/errael",
        "user_view_type": "public"
    }
}