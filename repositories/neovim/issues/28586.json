{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\nThere is a `tbl_get` api at the moment which can be used to obtain a key from a table, however it would be also useful if that function supports a dot notation such as - https://docs.oracle.com/en/database/oracle/oracle-database/19/adjsn/simple-dot-notation-access-to-json-data.html . Example\r\n\r\n```lua\r\nvim.tbl_get(t, \"first.second[1].third\")\r\n```\r\n\r\nFurther more a symmetric `tbl_set` should also exist to set a given key. \r\n\r\n```lua\r\nvim.tbl_set(t, \"first.second[1].third\", value)\r\n```\r\n\r\nI am aware of `defaulttable` however if a table is not `defaulttable` in the first place, and even if it is possible to convert a table to a defaulttable, we might desire NOT to modify/wrap the original table reference \n\n### Expected behavior\n\nWe should be able to easily set indirect keys on a table at any depth.",
    "closed_at": "2024-05-01T14:55:05Z",
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": ">  it would be also useful \r\n\r\nWhat for? What would it allow you to do that you can't do now?",
            "created_at": "2024-05-01T07:57:40Z",
            "html_url": "https://github.com/neovim/neovim/issues/28586#issuecomment-2088115026",
            "id": 2088115026,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28586",
            "node_id": "IC_kwDOAPphoM58dhtS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2088115026/reactions"
            },
            "updated_at": "2024-05-01T07:57:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2088115026",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I don't think we need this in core. Obviously feel free to provide one for yourself.",
            "created_at": "2024-05-01T14:55:01Z",
            "html_url": "https://github.com/neovim/neovim/issues/28586#issuecomment-2088584919",
            "id": 2088584919,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28586",
            "node_id": "IC_kwDOAPphoM58fUbX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2088584919/reactions"
            },
            "updated_at": "2024-05-01T14:55:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2088584919",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@asmodeus812 you might want to try https://github.com/neovim/neovim/pull/24597 , which provides this interface:\r\n\r\n    local t = { a = { b = { c = 'foo' } }}\r\n    local nested_item = vim.get(t).a.b.c()\r\n    -- Assignment also works:\r\n    vim.get(t).a.b.c = 'bar'\r\n\r\nThe one quirk is that `.c()` is required on the final access when doing a \"get\".\r\n\r\n> I don't think we need this in core.\r\n\r\nI don't really agree. Traversing data is very common and if we could improve it, we should. Though `vim.tbl_set` is not a great way to do it. If the compromises in #24597 could be fixed somehow, I don't see why we wouldn't include it.",
            "created_at": "2024-05-01T19:49:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/28586#issuecomment-2089007497",
            "id": 2089007497,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28586",
            "node_id": "IC_kwDOAPphoM58g7mJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2089007497/reactions"
            },
            "updated_at": "2024-05-01T19:52:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2089007497",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I haven't seen many pieces of code that are in desperate need of this. If this was that important it would be obvious.\n\nAre there any plugins you know of where this kind of pattern is typical? Or any examples of this in other programming languages where it is clearly valuable?\n\nPersonally I type and normalise all of my data structures and I find this kind of dynamic style quite an anti-pattern.\n\nEven `vim.tbl_get` is seldom used which suggests to me it probably shouldn't have been added to begin with.",
            "created_at": "2024-05-01T20:36:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/28586#issuecomment-2089093177",
            "id": 2089093177,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28586",
            "node_id": "IC_kwDOAPphoM58hQg5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2089093177/reactions"
            },
            "updated_at": "2024-05-01T20:42:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2089093177",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Are there any plugins you know of where this kind of pattern is typical?\r\n\r\nIt becomes obvious in any language that supports [optional chaining](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining). This kind of access pattern is common, and avoids having to check each child individually:\r\n\r\n    a?.b?.c\r\n\r\nIf you are asking about \"set\" specifically: that is the un-problematic part of https://github.com/neovim/neovim/pull/24597 so it needs much less justification. The use-case is similar, though not as common.",
            "created_at": "2024-05-01T20:46:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/28586#issuecomment-2089115379",
            "id": 2089115379,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28586",
            "node_id": "IC_kwDOAPphoM58hV7z",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2089115379/reactions"
            },
            "updated_at": "2024-05-01T20:48:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2089115379",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Of course JavaScript of all languages has something like that.\n\n> ```\n> a?.b?.c\n> ```\n\nHow about\n\n```\n((a or {}).b or {}).c\n```\n\nNot quite as pretty, but doesn't require anything special, is completely portable and can be well understood by LuaLS.\n\nI don't think there's enough code in the wild to justify adding convenience functions to sugar this.",
            "created_at": "2024-05-01T21:00:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/28586#issuecomment-2089132734",
            "id": 2089132734,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28586",
            "node_id": "IC_kwDOAPphoM58haK-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2089132734/reactions"
            },
            "updated_at": "2024-05-01T21:00:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2089132734",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> How about\r\n> \r\n> ```\r\n> ((a or {}).b or {}).c\r\n> ```\r\n\r\nI'm aware of that :)\r\n\r\n> Not quite as pretty, but doesn't require anything special, is completely portable and can be well understood by LuaLS.\r\n\r\nThere's really nothing special about https://github.com/neovim/neovim/pull/24597 (if it were matured / fully-formed). I don't see LuaLS as something that should block useful data traversal. \r\n\r\n> I don't think there's enough code in the wild \r\n\r\nThe \"ad hoc\" use case is very important. REPL-like usage may not end up in production code, but is at least as important.",
            "created_at": "2024-05-01T21:14:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/28586#issuecomment-2089150922",
            "id": 2089150922,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28586",
            "node_id": "IC_kwDOAPphoM58henK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2089150922/reactions"
            },
            "updated_at": "2024-05-01T21:14:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2089150922",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "#24597 is already using quite a lot of tools from the from the Lua toolbox. I'd be pleasantly surprised if that can be improved at all.\n\nI spent many hours/days trying to solve a similar problem (multi key set) with vim options, and came to the conclusion that it's not possible and we just need to accept the constraints given to us by Lua. As we've seen with `vim.iter`, plain Lua is often more readable and understandable than some elaborate API.\n\nAnd in general, and I don't say this enough, we need to stop inventing shit we \"think\" is useful and let the community do that for us who are dealing with the problems and all the nuances. Our role works best to promote and refine existing solutions. E.g. `vim.loader`, `vim.system`, built-in commenting, and hopefully some async interface in the future. If we develop solutions to problems from internal work then that's fine too, but there has to be non-hypothetical problems.\n\n> The \"ad hoc\" use case is very important. REPL-like usage may not end up in production code, but is at least as important.\n\nNot the most persuasive point, but maybe I just don't use the REPL enough (other than debug)?",
            "created_at": "2024-05-01T22:10:11Z",
            "html_url": "https://github.com/neovim/neovim/issues/28586#issuecomment-2089218589",
            "id": 2089218589,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28586",
            "node_id": "IC_kwDOAPphoM58hvId",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2089218589/reactions"
            },
            "updated_at": "2024-05-01T22:10:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2089218589",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> As we've seen with `vim.iter`, plain Lua is often more readable and understandable than some elaborate API.\r\n> \r\n> And in general, and I don't say this enough, we need to stop inventing shit we \"think\" is useful and let the community do that\r\n\r\nI 100% agree, of course. https://github.com/neovim/neovim/pull/24597 was driven by my own use-case and experience, not hypothetical. It seems clear to me that the main sticking point is about type safety, in this case.",
            "created_at": "2024-05-01T22:26:21Z",
            "html_url": "https://github.com/neovim/neovim/issues/28586#issuecomment-2089233792",
            "id": 2089233792,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28586",
            "node_id": "IC_kwDOAPphoM58hy2A",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2089233792/reactions"
            },
            "updated_at": "2024-05-01T22:26:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2089233792",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comments": 9,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/28586/comments",
    "created_at": "2024-05-01T06:17:29Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/28586/events",
    "html_url": "https://github.com/neovim/neovim/issues/28586",
    "id": 2273000881,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/28586/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6Hez2x",
    "number": 28586,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/28586/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "not_planned",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/28586/timeline",
    "title": "Extend indirect key access and mutation via tbl_get and add tbl_set",
    "updated_at": "2024-05-01T22:26:22Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/28586",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/15955811?v=4",
        "events_url": "https://api.github.com/users/asmodeus812/events{/privacy}",
        "followers_url": "https://api.github.com/users/asmodeus812/followers",
        "following_url": "https://api.github.com/users/asmodeus812/following{/other_user}",
        "gists_url": "https://api.github.com/users/asmodeus812/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/asmodeus812",
        "id": 15955811,
        "login": "asmodeus812",
        "node_id": "MDQ6VXNlcjE1OTU1ODEx",
        "organizations_url": "https://api.github.com/users/asmodeus812/orgs",
        "received_events_url": "https://api.github.com/users/asmodeus812/received_events",
        "repos_url": "https://api.github.com/users/asmodeus812/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/asmodeus812/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/asmodeus812/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/asmodeus812"
    }
}