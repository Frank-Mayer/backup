{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\nTreesitter `Query#iter_captures` yields correct metadata only for the first capture in a match.\r\n\r\nI encountered the issue while implementing injection formatting in Python files. I decided to use the newer injection syntax introduced in `0.9.0` (e.g. `@injection.content`) so, my query includes a `@_id` capture to check the assignment identifier name, `@injection.content` capture for the content itself, and the `(#set! injection.language \"...\")` directive.\r\n\r\nThe issue is when iterating over captures in code using the `Query:iter_captures` method, the metadata object containing the `injection.language` value is only properly available for the first capture in the match. And, as `@_id` capture appears earlier in the match than the `@injection.content` capture, it is not possible to do checks like this:\r\n\r\n```lua\r\n...\r\nif injections.captures[id] == \"injection.content\" and metadata[\"injection.language\"] == \"sql\" then\r\n  ...\r\nend\r\n...\r\n```\r\n\r\nUsing `Query#iter_matches` does, in fact, work as intended, as match metadata is decoupled from a capture. But the `Query#iter_matches` API is more cumbersome and requires 2 levels of nesting to use. I find the `Query#iter_captures` API better suited to solve the problem, at least in theory.\r\n\r\nI am not even sure if it is a bug, but it is surely the behavior that I was not expecting. From what I can see in the source code, all of the injection queries provided with `neovim` and `nvim-treesitter` only use single capture per match, and do not match against a broader context (such as variable names), so there is no way to verify the behavior using provided queries.\n\n### Steps to reproduce\n\nConsider the following Lua script:\r\n\r\n```lua\r\nlocal injections_query = [[\r\n;; query\r\n(assignment\r\n  left: (identifier) @_id\r\n  right: (string\r\n    string_content: (string_content) @injection.content)\r\n  (#set! injection.language \"sql\")\r\n  (#contains? @_id \"sql\"))\r\n\r\n(assignment\r\n  left: (identifier) @_id\r\n  right: (string\r\n    string_content: (string_content) @injection.content)\r\n  (#set! injection.language \"toml\")\r\n  (#contains? @_id \"toml\"))\r\n]]\r\n\r\nlocal injections = vim.treesitter.query.parse(\"python\", injections_query)\r\n\r\nlocal python_source = [[\r\nsql_blob = \"\"\"\r\nselect * from information_schema.tables\r\n\"\"\"\r\n\r\ntoml_blob = \"\"\"\r\n[owner]\r\nname = \"Tom Preston-Werner\"\r\ndob = 1979-05-27T07:32:00-08:00\r\n\"\"\"\r\n]]\r\n\r\nlocal parser = require(\"vim.treesitter.languagetree\").new(python_source, \"python\")\r\nlocal root = parser:parse()[1]:root()\r\n\r\n---@param id integer\r\n---@param node TSNode\r\n---@param metadata TSMetadata\r\nlocal function print_capture(id, node, metadata)\r\n  print(\"--- capture [\" .. tostring(id) .. \"] ---\")\r\n  print(\"capture name: [\" .. injections.captures[id] .. \"]\")\r\n  print(\"metadata: [\" .. vim.inspect(metadata) .. \"]\")\r\n  local is_content = injections.captures[id] == \"injection.content\"\r\n  local is_sql = metadata[\"injection.language\"] == \"sql\"\r\n  local is_toml = metadata[\"injection.language\"] == \"toml\"\r\n  if is_content and is_sql then\r\n    print(\"sql content: [\" .. vim.treesitter.get_node_text(node, python_source) .. \"]\")\r\n  end\r\n  if is_content and is_toml then\r\n    print(\"toml content: [\" .. vim.treesitter.get_node_text(node, python_source) .. \"]\")\r\n  end\r\nend\r\n\r\nprint \"----- iter_captures -----\"\r\nfor id, node, metadata in injections:iter_captures(root, python_source, 0, -1) do\r\n  print_capture(id, node, metadata)\r\nend\r\n\r\nprint \"----- iter_matches -----\"\r\nfor _, match, metadata in injections:iter_matches(root, python_source, 0, -1) do\r\n  for id, node in pairs(match) do\r\n    print_capture(id, node, metadata)\r\n  end\r\nend\r\n```\r\n\r\nRunning it requires a Treesitter parser for Python to be installed, so I find it the easiest to open the example in neovim, and `:source %`.\r\n\r\nOutput (with empathis):\r\n\r\n```\r\n----- iter_captures -----\r\n--- capture [1] ---\r\ncapture name: [_id]\r\nmetadata: [{\t\t\t\t\t\t\t\t<- First capture in the match contains metadata\r\n  [\"injection.language\"] = \"sql\"\r\n}]\r\n--- capture [2] ---\r\ncapture name: [injection.content]\r\nmetadata: [{}]\t\t\t\t\t\t\t\t<- Second capture in the match contains NO metadata\r\n--- capture [1] ---\r\ncapture name: [_id]\r\nmetadata: [{\r\n  [\"injection.language\"] = \"toml\"\r\n}]\r\n--- capture [2] ---\r\ncapture name: [injection.content]\r\nmetadata: [{}]\r\n\r\n----- iter_matches -----\r\n--- capture [1] ---\r\ncapture name: [_id]\r\nmetadata: [{\t\t\t\t\t\t\t\t<- First capture in the match contains metadata\r\n  [\"injection.language\"] = \"sql\"\r\n}]\r\n--- capture [2] ---\r\ncapture name: [injection.content]\r\nmetadata: [{\t\t\t\t\t\t\t\t<- Second capture in the match contains metadata\r\n  [\"injection.language\"] = \"sql\"\r\n}]\r\nsql content: [\t\t\t\t\t\t\t\t<- Capture content is correctly printed\r\nselect * from information_schema.tables\r\n]\r\n--- capture [1] ---\r\ncapture name: [_id]\r\nmetadata: [{\r\n  [\"injection.language\"] = \"toml\"\r\n}]\r\n--- capture [2] ---\r\ncapture name: [injection.content]\r\nmetadata: [{\r\n  [\"injection.language\"] = \"toml\"\r\n}]\r\ntoml content: [\r\n[owner]\r\nname = \"Tom Preston-Werner\"\r\ndob = 1979-05-27T07:32:00-08:00\r\n]\r\n```\n\n### Expected behavior\n\nI expect `Query#iter_captures` to yield correct metadata for every yielded capture. The output in the example script should be the same between `Query#iter_captures` and `Query#iter_matches`.\n\n### Neovim version (nvim -v)\n\nv0.9.0\n\n### Vim (not Nvim) behaves the same?\n\nno\n\n### Operating system/version\n\nWindows 10\n\n### Terminal name/version\n\nWindows Terminal\n\n### $TERM environment variable\n\nempty\n\n### Installation\n\nscoop",
    "closed_at": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/23664/comments",
    "created_at": "2023-05-17T13:47:53Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/23664/events",
    "html_url": "https://github.com/neovim/neovim/issues/23664",
    "id": 1713961455,
    "labels": [
        {
            "color": "f9d0c4",
            "default": true,
            "description": "issues reporting wrong behavior",
            "id": 77997474,
            "name": "bug",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3NA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1799626557,
            "name": "treesitter",
            "node_id": "MDU6TGFiZWwxNzk5NjI2NTU3",
            "url": "https://api.github.com/repos/neovim/neovim/labels/treesitter"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/23664/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM5mKPnv",
    "number": 23664,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 1,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 1,
        "url": "https://api.github.com/repos/neovim/neovim/issues/23664/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/23664/timeline",
    "title": "Treesitter `Query#iter_captures` yields correct metadata only for the first capture in a match",
    "updated_at": "2023-12-17T17:48:51Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/23664",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/17297726?v=4",
        "events_url": "https://api.github.com/users/yehorb/events{/privacy}",
        "followers_url": "https://api.github.com/users/yehorb/followers",
        "following_url": "https://api.github.com/users/yehorb/following{/other_user}",
        "gists_url": "https://api.github.com/users/yehorb/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/yehorb",
        "id": 17297726,
        "login": "yehorb",
        "node_id": "MDQ6VXNlcjE3Mjk3NzI2",
        "organizations_url": "https://api.github.com/users/yehorb/orgs",
        "received_events_url": "https://api.github.com/users/yehorb/received_events",
        "repos_url": "https://api.github.com/users/yehorb/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/yehorb/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/yehorb/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/yehorb"
    }
}