{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "This issue would be more like a discussion, only stating potential issues from the perspective of practical user experience without a clear solution yet.\r\n\r\nTL;DR) `vim.iter` have some *practical* problems when dealing with non-list tables (or *pseudo*-lists that contains `nil` as element), we might want to improve for better usability.\r\n\r\n\r\n\r\n## Problem\r\n\r\n`vim.tbl_flatten` has been deprecated since nvim 0.10+ in favor of `vim.iter`, but what is suggested --- `vim.iter(...):flatten():totable()` is NOT a exact drop-in replacement of `vim.tbl_flatten`.\r\n\r\nA corner case is when the table is \"not a list\", e.g. containing a `nil` values:\r\n\r\n```lua\r\n-- The table {1, nil, 3} is not a valid list (i.e. `vim.islist` returns false).\r\n-- Also equivalent to {[1] = 1, [3] = 3}\r\n\r\nvim.iter({ 1, nil, 3 }):flatten():totable()\r\n-- ERROR: flatten() requires a list-like table\r\n\r\nvim.tbl_flatten({ 1, nil, 3 })\r\n-- { 1, 3 }\r\n```\r\n\r\n... because `vim.iter` treats list-like tables and non-list-like tables (i.e. maps) differently:\r\n\r\n```lua\r\nvim.iter({ 1, nil, 3 }):totable()\r\n-- { {1, 1}, {3, 3} }\r\n\r\nvim.iter({ 1, 2, 3 }):totable()\r\n-- { 1, 2, 3 }\r\n```\r\n\r\nThis is due to the limitation of the Lua language that Lua table does not distiniguish map and list(array), so a valid list contains. While this is actually an intended, correct behavior, given how Lua works, for users and laypeople who are not very familiar with Lua the behavior can be confusing: because `totable()` returns a list of (key, value) tuple for non-list-like tables.\r\n\r\n\r\n\r\n### Remark: it was an undefined behavior of `tbl_flatten()` \r\n\r\nActually, the use of `vim.tbl_flatten()` for tables that are **not** list-like (e.g. including `nil` as a member) was never specified:\r\n\r\n```\r\ntbl_flatten({t})                                           *vim.tbl_flatten()*\r\n    Creates a copy of a list-like table such that any nested tables are\r\n    \"unrolled\" and appended to the result.\r\n\r\n    Parameters:  \r\n      • {t}  (table) List-like table\r\n\r\n    Return:  \r\n        (table) Flattened copy of the given list-like table\r\n\r\n    See also:  \r\n      • From https://github.com/premake/premake-core/blob/master/src/base/table.lua\r\n\r\n```\r\n\r\nHowever, it is worth noting that `vim.tbl_flatten()` is often slightly abused in the wild to filter `nil` values while doing flattening:\r\n\r\n* https://github.com/nvim-telescope/telescope.nvim/blob/52f500110bcf9190b44b4d8640162adc86772ec4/lua/telescope/builtin/__git.lua#L54-L58\r\n* https://github.com/nvim-treesitter/nvim-treesitter-textobjects/issues/617\r\n* and many more: https://grep.app/search?q=vim.tbl_flatten&filter[lang][0]=Lua\r\n\r\nNote: the behavior of `vim.tbl_flatten()` on such 'lists with holes (nil)' is not very accurate (as of nvim 0.10.0); it's not a 100% correct replacement of \"filter nil values and then flatten\":\r\n\r\n```lua\r\n> vim.tbl_flatten { nil, 1, nil, 3 }\r\n< { 1, 3 }\r\n> vim.tbl_flatten { 1, nil, 3 }\r\n< { 1 }   -- ?!??!, should be { 1, 3 }\r\n\r\n> vim.tbl_filter(function(v) return v end, { 1, nil, 3 })\r\n< { 1, 3 }  -- correct\r\n```\r\n\r\n\r\n<!--\r\n\r\nI note this pattern is quite practically useful: to filter out some values by whether being `nil`. e.g.\r\n\r\n```\r\nlocal linters = vim.tbl_flatten {  -- abusing!\r\n    vim.fn.executable('prettier') == 1 and 'prettier' or nil,\r\n    vim.fn.executable('misspell') == 1 and 'misspell' or nil,\r\n}\r\n```\r\n\r\nbut for the same exact reason `vim.iter(...):filter()` won't work with \"non-list\" tables:\r\n\r\n```lua\r\nvim.iter({1, nil, 3}):filter(function(x) return x end):totable()\r\n--- { {1, 1}, {3, 3} }.   not {1, 3}.\r\n```\r\n\r\n-->\r\n\r\n\r\n\r\n### Potential impact:\r\n\r\n\r\nStarting from the 0.11-dev (nightly) versions users will experience a looooot of deprecation warnings on the deprecated APIs, `vim.tbl_flatten`, `vim.tbl_islist`, etc. There are actually a lot of plugins that are still using `vim.tbl_flatten` which was deprecated only very recently. So plugin authors should migrate to `vim.iter`-based solution (unless we make additional changes) and remove the use of deprecated APIs sooner than later, but the subtle difference can lead to (minor) bugs.\r\n\r\n\r\n<!--\r\n\r\n### Workaround\r\n\r\nFor smooth migration, one might want to write a \"behaviorally equivalent\" version of `vim.tbl_flatten` against deprecations.\r\n\r\n-->\r\n\r\n\r\n## Possible solutions\r\n\r\nEither:\r\n\r\n- We don't change anything. Using `nil` in a list is an anti-pattern ?!\r\n- Implement `flatten()` for non-list-like (dict-like) tables.\r\n- Add some new options to `vim.iter` API to make `vim.iter(table):totable()` return a \"map\" instead of a list of (key, value) tuples.\r\n- Allow `vim.iter()` to handle lists with holes as well\r\n  #28781\r\n- ???\r\n\r\n\r\n## References\r\n\r\n- #28448 \r\n- #28780 \r\n- #28781",
    "closed_at": "2024-05-17T19:17:26Z",
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": ">We don't change anything. Using nil in a list is an anti-pattern ?!\r\n\r\nIt does clearly have some valid and useful use cases, as we can see. So probably something we should support.\r\n\r\n>Implement flatten() for non-list-like (dict-like) tables.\r\n\r\nI am less sure that `flatten`, specifically, needs to be the interface for this though (not opposed to it, but maybe this should be a separate/independent operation? `vim.tolist` or something?)\r\n\r\n>Add some new options to vim.iter API to make vim.iter(table):totable() return a \"map\" instead of a list of (key, value) tuples.\r\n\r\nI was just looking at the vim.iter implementation again and I am wondering if it might actually be possible to support lists with holes. Currently we do this to determine if we can use the list optimizations:\r\n\r\n```lua\r\n    -- O(n): scan the source table to decide if it is a list (consecutive integer indices 1…n).\r\n    local count = 0\r\n    for _ in pairs(src) do\r\n      count = count + 1\r\n      local v = src[count]\r\n      if v == nil then\r\n        return Iter.new(pairs(src))\r\n      end\r\n      t[count] = v\r\n    end\r\n    return ListIter.new(t)\r\n```\r\n\r\nBut the list optimizations use a bunch of regular `for` loops, and we track the head and tail of the list ourselves (we don't rely on the builtin length operator). So we _might_ be able to instead change the semantics of `vim.iter` to treat any list with only integer keys (not necessarily consecutive) as a list, in which case `vim.iter(...):flatten()` would work as expected.",
            "created_at": "2024-05-16T16:31:24Z",
            "html_url": "https://github.com/neovim/neovim/issues/28777#issuecomment-2115692631",
            "id": 2115692631,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28777",
            "node_id": "IC_kwDOAPphoM5-GuhX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2115692631/reactions"
            },
            "updated_at": "2024-05-16T16:31:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2115692631",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> `vim.iter(...):flatten():totable()` is NOT a exact drop-in replacement of `vim.tbl_flatten`.\r\n\r\nAdding it here as it seems to be the best available place.\r\n\r\nAs `vim.tbl_flatten()` flattens **all** nested levels into a plain list, the proper drop-in replacement is `vim.iter(t):flatten(math.huge):totable()`. So both cases for `{ 1, { 2 }, { { 3, 4 }, { { 5 }, 6 } } }` should return `{ 1, 2, 3, 4, 5, 6 }`.",
            "created_at": "2024-05-17T14:26:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/28777#issuecomment-2117732764",
            "id": 2117732764,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28777",
            "node_id": "IC_kwDOAPphoM5-Ogmc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2117732764/reactions"
            },
            "updated_at": "2024-05-17T14:26:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2117732764",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/28777/comments",
    "created_at": "2024-05-16T16:23:03Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/28777/events",
    "html_url": "https://github.com/neovim/neovim/issues/28777",
    "id": 2300837832,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/28777/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 11,
        "created_at": "2023-12-07T23:09:35Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk"
        },
        "description": "",
        "due_on": "2024-10-31T07:00:00Z",
        "html_url": "https://github.com/neovim/neovim/milestone/41",
        "id": 10283236,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/41/labels",
        "node_id": "MI_kwDOAPphoM4AnOjk",
        "number": 41,
        "open_issues": 59,
        "state": "open",
        "title": "0.11",
        "updated_at": "2024-05-19T22:02:51Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/41"
    },
    "node_id": "I_kwDOAPphoM6JI__I",
    "number": 28777,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 4,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 4,
        "url": "https://api.github.com/repos/neovim/neovim/issues/28777/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/28777/timeline",
    "title": "`vim.iter` with non-list tables (as a replacement of `vim.tbl_flatten`, etc.)",
    "updated_at": "2024-05-17T19:17:27Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/28777",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
        "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
        "followers_url": "https://api.github.com/users/wookayin/followers",
        "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
        "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/wookayin",
        "id": 1009873,
        "login": "wookayin",
        "node_id": "MDQ6VXNlcjEwMDk4NzM=",
        "organizations_url": "https://api.github.com/users/wookayin/orgs",
        "received_events_url": "https://api.github.com/users/wookayin/received_events",
        "repos_url": "https://api.github.com/users/wookayin/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/wookayin"
    }
}