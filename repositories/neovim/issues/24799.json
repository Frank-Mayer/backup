{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\nCurrently, `vim.lsp.buf.workspace_symbol()` only searches for workspace symbols from [LSP clients attaching to the current buffer](https://github.com/neovim/neovim/blob/b263c73b083e43761386d46d62524ea104d7abbd/runtime/lua/vim/lsp/buf.lua#L9-L10).\r\n\r\nThis means:\r\n- The user has to open some buffers to search for workspace symbols.\r\n- And only be able to search the workspace symbols from the LSP clients attaching to the current buffer.\r\n\n\n### Expected behavior\n\nSupport the functionality to \r\n- Search the workspace symbols across multiple languages.\r\n- Able to search workspace symbols without opening any buffer.\r\n\r\nLike what VSCode can do:\r\n![](https://preview.redd.it/6awfybsnjzib1.png?width=3840&format=png&auto=webp&s=be6e7b6310362333d1ed69498c34114c1b03dcdc)",
    "closed_at": "2023-10-28T18:57:21Z",
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "Do any other **workspaces** related to LSP features also have this problem? I only test `workspace/symbol` for now.",
            "created_at": "2023-08-20T04:22:52Z",
            "html_url": "https://github.com/neovim/neovim/issues/24799#issuecomment-1685172533",
            "id": 1685172533,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24799",
            "node_id": "IC_kwDOAPphoM5kcbE1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1685172533/reactions"
            },
            "updated_at": "2023-08-20T04:22:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1685172533",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/45122720?v=4",
                "events_url": "https://api.github.com/users/BilderLoong/events{/privacy}",
                "followers_url": "https://api.github.com/users/BilderLoong/followers",
                "following_url": "https://api.github.com/users/BilderLoong/following{/other_user}",
                "gists_url": "https://api.github.com/users/BilderLoong/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BilderLoong",
                "id": 45122720,
                "login": "BilderLoong",
                "node_id": "MDQ6VXNlcjQ1MTIyNzIw",
                "organizations_url": "https://api.github.com/users/BilderLoong/orgs",
                "received_events_url": "https://api.github.com/users/BilderLoong/received_events",
                "repos_url": "https://api.github.com/users/BilderLoong/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BilderLoong/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BilderLoong/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BilderLoong"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">\r\n> Currently, `vim.lsp.buf.workspace_symbol()` only searches for workspace symbols from [LSP clients attaching to the current buffer](https://github.com/neovim/neovim/blob/b263c73b083e43761386d46d62524ea104d7abbd/runtime/lua/vim/lsp/buf.lua#L9-L10).\r\n> \r\n> This means:  The user has to open some buffers to search for workspace symbols.\r\n\r\nIs your expectation that Nvim starts language servers for all file types found in the workspace? I assume vscode waits until the \"search workspace\" action is requested before doing that.\r\n\r\nOne big advantage of vscode is that it bundles [ripgrep](https://github.com/BurntSushi/ripgrep) which is just wickedly fast. Perhaps we should enhance `vim.fs.find()` to use `rg` if the system has it.",
            "created_at": "2023-09-13T11:54:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/24799#issuecomment-1717483024",
            "id": 1717483024,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24799",
            "node_id": "IC_kwDOAPphoM5mXrYQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1717483024/reactions"
            },
            "updated_at": "2023-09-13T11:56:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1717483024",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I prefer the current behavior but I guess we could add a `clients` option to the `opts` of `workspace_symbol` to give users the control which clients to use. To use all clients they could then use `vim.lsp.buf.workspace_symbol(query, { clients = vim.lsp.get_clients() })`.\r\n\r\nBut we also to change the implementation to work with multiple clients. Currently it suffers from the 1-handler-call-per-client problem. It would need to merge the results.\r\nNote that if you've setup lsp.start via FileType events or using lspconfig you'd still need to have opened at least one file per filetype to have all clients initialized.\r\n",
            "created_at": "2023-09-13T17:39:21Z",
            "html_url": "https://github.com/neovim/neovim/issues/24799#issuecomment-1718050194",
            "id": 1718050194,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24799",
            "node_id": "IC_kwDOAPphoM5mZ12S",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1718050194/reactions"
            },
            "updated_at": "2023-09-13T17:39:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1718050194",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "author_association": "NONE",
            "body": "> I prefer the current behavior but I guess we could add a `clients` option to the `opts` of `workspace_symbol` to give users the control which clients to use. To use all clients they could then use `vim.lsp.buf.workspace_symbol(query, { clients = vim.lsp.get_clients() })`.\r\n> \r\n> But we also to change the implementation to work with multiple clients. Currently it suffers from the 1-handler-call-per-client problem. It would need to merge the results. Note that if you've setup lsp.start via FileType events or using lspconfig you'd still need to have opened at least one file per filetype to have all clients initialized.\r\n\r\nDoes use the `vim.lsp.buf.workspace_symbol(query, { clients = vim.lsp.get_clients() })` means that I can request clients that aren't attaching to the current buffer?\r\n",
            "created_at": "2023-09-16T07:52:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/24799#issuecomment-1722168495",
            "id": 1722168495,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24799",
            "node_id": "IC_kwDOAPphoM5mpjSv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1722168495/reactions"
            },
            "updated_at": "2023-09-16T07:52:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1722168495",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/45122720?v=4",
                "events_url": "https://api.github.com/users/BilderLoong/events{/privacy}",
                "followers_url": "https://api.github.com/users/BilderLoong/followers",
                "following_url": "https://api.github.com/users/BilderLoong/following{/other_user}",
                "gists_url": "https://api.github.com/users/BilderLoong/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BilderLoong",
                "id": 45122720,
                "login": "BilderLoong",
                "node_id": "MDQ6VXNlcjQ1MTIyNzIw",
                "organizations_url": "https://api.github.com/users/BilderLoong/orgs",
                "received_events_url": "https://api.github.com/users/BilderLoong/received_events",
                "repos_url": "https://api.github.com/users/BilderLoong/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BilderLoong/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BilderLoong/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BilderLoong"
            }
        },
        {
            "author_association": "NONE",
            "body": "> > Currently, `vim.lsp.buf.workspace_symbol()` only searches for workspace symbols from [LSP clients attaching to the current buffer](https://github.com/neovim/neovim/blob/b263c73b083e43761386d46d62524ea104d7abbd/runtime/lua/vim/lsp/buf.lua#L9-L10).\r\n> > This means:  The user has to open some buffers to search for workspace symbols.\r\n> \r\n> Is your expectation that Nvim starts language servers for all file types found in the workspace? I assume vscode waits until the \"search workspace\" action is requested before doing that.\r\n> \r\n> One big advantage of vscode is that it bundles [ripgrep](https://github.com/BurntSushi/ripgrep) which is just wickedly fast. Perhaps we should enhance `vim.fs.find()` to use `rg` if the system has it.\r\n\r\nI think which LSP server to start should be left to the user to decide since it may cause some performance issue.\r\n",
            "created_at": "2023-09-16T07:53:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/24799#issuecomment-1722168729",
            "id": 1722168729,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24799",
            "node_id": "IC_kwDOAPphoM5mpjWZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1722168729/reactions"
            },
            "updated_at": "2023-10-28T18:56:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1722168729",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/45122720?v=4",
                "events_url": "https://api.github.com/users/BilderLoong/events{/privacy}",
                "followers_url": "https://api.github.com/users/BilderLoong/followers",
                "following_url": "https://api.github.com/users/BilderLoong/following{/other_user}",
                "gists_url": "https://api.github.com/users/BilderLoong/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BilderLoong",
                "id": 45122720,
                "login": "BilderLoong",
                "node_id": "MDQ6VXNlcjQ1MTIyNzIw",
                "organizations_url": "https://api.github.com/users/BilderLoong/orgs",
                "received_events_url": "https://api.github.com/users/BilderLoong/received_events",
                "repos_url": "https://api.github.com/users/BilderLoong/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BilderLoong/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BilderLoong/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BilderLoong"
            }
        },
        {
            "author_association": "NONE",
            "body": "The missing functionality that prevents me from implementing this is the restriction that I thought the neovim only supports sending LSP requests to clients already attached to opened buffers. However, after digging a little deeper, I encountered the below code:\r\n https://github.com/neovim/neovim/blob/be10d65bfafe056025ffffa2c1131712b9a493a5/runtime/lua/vim/lsp.lua#L2140-L2146\r\n \r\nI realize that It seems that I could start some LSP clients without attaching them to any buffer and then request them one by one like below:\r\n\r\n```\r\nfor _, client in ipairs(lsp.get_clients()) do \r\n   local request_success, request_id = client.request(method, params, handler, bufnr)\r\n\r\n```\r\n\r\nI will try this; if so, I think this issue can be closed.\r\n",
            "created_at": "2023-09-16T07:54:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/24799#issuecomment-1722168953",
            "id": 1722168953,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24799",
            "node_id": "IC_kwDOAPphoM5mpjZ5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1722168953/reactions"
            },
            "updated_at": "2023-09-16T07:54:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1722168953",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/45122720?v=4",
                "events_url": "https://api.github.com/users/BilderLoong/events{/privacy}",
                "followers_url": "https://api.github.com/users/BilderLoong/followers",
                "following_url": "https://api.github.com/users/BilderLoong/following{/other_user}",
                "gists_url": "https://api.github.com/users/BilderLoong/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BilderLoong",
                "id": 45122720,
                "login": "BilderLoong",
                "node_id": "MDQ6VXNlcjQ1MTIyNzIw",
                "organizations_url": "https://api.github.com/users/BilderLoong/orgs",
                "received_events_url": "https://api.github.com/users/BilderLoong/received_events",
                "repos_url": "https://api.github.com/users/BilderLoong/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BilderLoong/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BilderLoong/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BilderLoong"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I realize that It seems that I could start some LSP clients without attaching them to any buffer and then request them one by one like below:\r\n> \r\n> ```\r\n> for _, client in ipairs(lsp.get_clients()) do \r\n>    local request_success, request_id = client.request(method, params, handler, bufnr)\r\n> ```\r\n\r\n👍 \r\n",
            "created_at": "2023-10-28T18:57:21Z",
            "html_url": "https://github.com/neovim/neovim/issues/24799#issuecomment-1783897727",
            "id": 1783897727,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24799",
            "node_id": "IC_kwDOAPphoM5qVB5_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1783897727/reactions"
            },
            "updated_at": "2023-10-28T18:57:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1783897727",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "NONE",
            "body": "I don't get it, so how does one do it?",
            "created_at": "2024-07-25T15:27:18Z",
            "html_url": "https://github.com/neovim/neovim/issues/24799#issuecomment-2250679552",
            "id": 2250679552,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24799",
            "node_id": "IC_kwDOAPphoM6GJqUA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2250679552/reactions"
            },
            "updated_at": "2024-07-25T15:27:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2250679552",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6958886?v=4",
                "events_url": "https://api.github.com/users/sakalys/events{/privacy}",
                "followers_url": "https://api.github.com/users/sakalys/followers",
                "following_url": "https://api.github.com/users/sakalys/following{/other_user}",
                "gists_url": "https://api.github.com/users/sakalys/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sakalys",
                "id": 6958886,
                "login": "sakalys",
                "node_id": "MDQ6VXNlcjY5NTg4ODY=",
                "organizations_url": "https://api.github.com/users/sakalys/orgs",
                "received_events_url": "https://api.github.com/users/sakalys/received_events",
                "repos_url": "https://api.github.com/users/sakalys/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sakalys/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sakalys/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sakalys"
            }
        }
    ],
    "comments": 8,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/24799/comments",
    "created_at": "2023-08-20T04:19:10Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/24799/events",
    "html_url": "https://github.com/neovim/neovim/issues/24799",
    "id": 1857947096,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/24799/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM5uvgXY",
    "number": 24799,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/24799/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/24799/timeline",
    "title": "LSP: search workspace symbols across multiple languages without attaching to a buffer",
    "updated_at": "2024-07-25T15:27:19Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/24799",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/45122720?v=4",
        "events_url": "https://api.github.com/users/BilderLoong/events{/privacy}",
        "followers_url": "https://api.github.com/users/BilderLoong/followers",
        "following_url": "https://api.github.com/users/BilderLoong/following{/other_user}",
        "gists_url": "https://api.github.com/users/BilderLoong/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/BilderLoong",
        "id": 45122720,
        "login": "BilderLoong",
        "node_id": "MDQ6VXNlcjQ1MTIyNzIw",
        "organizations_url": "https://api.github.com/users/BilderLoong/orgs",
        "received_events_url": "https://api.github.com/users/BilderLoong/received_events",
        "repos_url": "https://api.github.com/users/BilderLoong/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/BilderLoong/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/BilderLoong/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/BilderLoong"
    }
}