{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\nWhile the virtualtext does disappear, it does not affect the output of `get_namespaces`, `get`, `get_next`, `get_next_pos`, `get_prev`, `get_prev_pos`, `goto_next`, `goto_prev`, `setloclist`, `setqflist`.\r\n\r\nWhich means we have to resort to some gymnastics to manually filter per-namespace or per-diagnostic with `is_disabled`.\n\n### Steps to reproduce\n\nIn lspconfig config, I disable tsserver diagnostics for javascript files:\r\n\r\n```lua\r\nlocal on_attach = function(client, bufnr)\r\n  if client.name == 'tsserver' and (vim.bo[bufnr].filetype == 'javascript' or vim.bo[bufnr].filetype == 'javascriptreact') then\r\n    local ns = vim.lsp.diagnostic.get_namespace(client.id)\r\n    vim.diagnostic.disable(bufnr, ns)\r\n  end\r\n  local nmap = function(keys, func, desc)\r\n    if desc then\r\n      desc = 'LSP: ' .. desc\r\n    end\r\n\r\n    vim.keymap.set('n', keys, func, { buffer = bufnr, desc = desc })\r\n  end\r\nend\r\nlocal servers = {\r\n  tsserver = {},\r\n  eslint = {},\r\n}\r\n-- nvim-cmp supports additional completion capabilities, so broadcast that to servers\r\nlocal capabilities = vim.lsp.protocol.make_client_capabilities()\r\ncapabilities = require('cmp_nvim_lsp').default_capabilities(capabilities)\r\n\r\n-- Ensure the servers above are installed\r\nlocal mason_lspconfig = require 'mason-lspconfig'\r\n\r\nmason_lspconfig.setup {\r\n  ensure_installed = vim.tbl_keys(servers),\r\n}\r\n\r\nmason_lspconfig.setup_handlers {\r\n  function(server_name)\r\n    require('lspconfig')[server_name].setup {\r\n      capabilities = capabilities,\r\n      on_attach = on_attach,\r\n      settings = servers[server_name],\r\n      filetypes = (servers[server_name] or {}).filetypes,\r\n    }\r\n  end,\r\n}\r\n```\r\n\r\nBut I have to jump through hoops to get all the functions listed above to not show me disabled diagnostics.\n\n### Expected behavior\n\nThe listed functions should adjust their output according to disabled namespaces, or at least have an option to only include enabled diagnostics.\n\n### Neovim version (nvim -v)\n\n0.9.2\n\n### Vim (not Nvim) behaves the same?\n\nno\n\n### Operating system/version\n\nmacOS 14.0\n\n### Terminal name/version\n\nkitty\n\n### $TERM environment variable\n\ntmux-256color\n\n### Installation\n\nhomebrew",
    "closed_at": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/25131/comments",
    "created_at": "2023-09-13T10:55:39Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/25131/events",
    "html_url": "https://github.com/neovim/neovim/issues/25131",
    "id": 1894275475,
    "labels": [
        {
            "color": "f9d0c4",
            "default": true,
            "description": "issues reporting wrong behavior",
            "id": 77997474,
            "name": "bug",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3NA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "",
            "id": 3361645105,
            "name": "diagnostic",
            "node_id": "MDU6TGFiZWwzMzYxNjQ1MTA1",
            "url": "https://api.github.com/repos/neovim/neovim/labels/diagnostic"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/25131/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM5w6FmT",
    "number": 25131,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/25131/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/25131/timeline",
    "title": "vim.diagnostic.disable doesn't fully disable the diagnostic",
    "updated_at": "2023-09-13T10:57:33Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/25131",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1538657?v=4",
        "events_url": "https://api.github.com/users/sidequestboy/events{/privacy}",
        "followers_url": "https://api.github.com/users/sidequestboy/followers",
        "following_url": "https://api.github.com/users/sidequestboy/following{/other_user}",
        "gists_url": "https://api.github.com/users/sidequestboy/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/sidequestboy",
        "id": 1538657,
        "login": "sidequestboy",
        "node_id": "MDQ6VXNlcjE1Mzg2NTc=",
        "organizations_url": "https://api.github.com/users/sidequestboy/orgs",
        "received_events_url": "https://api.github.com/users/sidequestboy/received_events",
        "repos_url": "https://api.github.com/users/sidequestboy/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/sidequestboy/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sidequestboy/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/sidequestboy"
    }
}