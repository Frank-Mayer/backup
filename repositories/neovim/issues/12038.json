{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "Per https://github.com/neovim/neovim/pull/11745, we have `nvim_buf_set_extmark` that anchors some decoration to a buffer position.\r\n\r\nI propose we extend this functionality to allow interactive extmarks, i.e. UI widgets (or controls).\r\n\r\nIn order to support flexible UI elements, the following features should be provided:\r\n\r\n- Decoupled rendering: the interactive extmark should be rendered by the UI, which could be something else than a few cells in the grid\r\n- Geometry bounds: an UI element may span across multiple lines, but the principle is that it anchors to a rectangular region in a grid. neovim should also send move/resize events to the frontend so that the controls move/resize/clip in sync with buffer scrolling.\r\n- In order to support rich front-end display, an interactive extmark can carry some metadata that acts as the data context of the front-end view.\r\n- Lifetime management: each element should have a unique id (which is already the case for extmarks?), and neovim should notify the frontends when the controls scroll into/out of the view, so that non-displayed ones can be recycled.\r\n- Widget event handling: frontend can send back messages about interaction events.\r\n- View model logic: one can program in vimL or lua as a plugin, to model the behavior for a view model.\r\n\r\nThis can enhance NeoVim in a few interesting ways, for example, better debugging interface (https://github.com/neovim/neovim/issues/11732)\r\n\r\nAlso, to honor cursor-centric interaction paradigm, I also recommend having the data context mapped as a hidden buffer object, so that the vim motions done in the data context can be reflected on the view in the frontend. For example, if there's a two-column table:\r\n\r\n```\r\n+----------------+------------------+\r\n| [Title 1]      | [Input box]      |\r\n|----------------+------------------|\r\n| [Title 2]      | [||||||--------] |\r\n|----------------+------------------|\r\n| [Title 3]      | +--------------+ |\r\n|                | | [x] Option 1 | |\r\n|                | | [ ] Option 2 | |\r\n|                | | [ ] Option 3 | |\r\n|                | | [ ] Option 4 | |\r\n|                | | [ ] Option 5 | |\r\n|                | +--------------+ |\r\n|----------------+------------------|\r\n| [Title 4]      | [------|---] 60% |\r\n|                | +--------------+ |\r\n|                | |   Confirm    | |\r\n|                | +--------------+ |\r\n+----------------+------------------+\r\n```\r\n\r\nThe data context may be designed as a csv table to correspond to the view:\r\n\r\n```csv\r\nTitle 1,Input box,\r\nTitle 2,30/100,\r\nTitle 3,x,Option 1\r\n,,Option 2\r\n,,Option 3\r\n,,Option 4\r\n,,Option 5\r\nTitle 4,60/100\r\n,Confirm\r\n```\r\n\r\nBecause there's one-to-one mapping between the two, the motions done in the data context can also be translated intuitively on where we want to go in the view. \r\nFor example:\r\n- when the focus is on \"Title 1\", key in `2jw` to move focus to \"[x] Option 1\", and `^]` to activate the \"select\" event without even needing the frontend to send back a message.\r\n- `/60<CR>10^a` raises the Title 4 slider to 70%\r\n- `/confirm<CR>^]` finds the button and press it.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/12038/comments",
    "created_at": "2020-03-22T10:55:01Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/12038/events",
    "html_url": "https://github.com/neovim/neovim/issues/12038",
    "id": 585691615,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/12038/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU1ODU2OTE2MTU=",
    "number": 12038,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 15,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 15,
        "url": "https://api.github.com/repos/neovim/neovim/issues/12038/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/12038/timeline",
    "title": "Grid-based UI widgets",
    "updated_at": "2024-09-04T13:49:33Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/12038",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/20684720?v=4",
        "events_url": "https://api.github.com/users/yatli/events{/privacy}",
        "followers_url": "https://api.github.com/users/yatli/followers",
        "following_url": "https://api.github.com/users/yatli/following{/other_user}",
        "gists_url": "https://api.github.com/users/yatli/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/yatli",
        "id": 20684720,
        "login": "yatli",
        "node_id": "MDQ6VXNlcjIwNjg0NzIw",
        "organizations_url": "https://api.github.com/users/yatli/orgs",
        "received_events_url": "https://api.github.com/users/yatli/received_events",
        "repos_url": "https://api.github.com/users/yatli/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/yatli/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/yatli/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/yatli"
    }
}