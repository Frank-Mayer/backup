{
    "active_lock_reason": "resolved",
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "- `nvim --version`: NVIM v0.2.1-dev (git201707221704+3540+26~ubuntu16.04)\r\n- Vim (version: vim 7.4 from Ubuntu official repo) behaves differently.\r\n- Operating system/version: Ubuntu 16.04\r\n- Terminal name/version: Gnome Terminal\r\n- `$TERM`: xterm-256color\r\n\r\n### Problem\r\nThe legacy python provider seems slow, plugins that use the legacy python interface can become laggy in neovim.  I think #2437 and #6843 is related.\r\n\r\n### Steps to reproduce\r\nUse [cpsm](https://github.com/nixprime/cpsm) matcher with ctrlp to speed up it and get better fuzzy matching. The problem is that cpsm is not performing well in neovim because it uses legacy python interface.\r\n\r\n### Actual behaviour\r\nIn neovim, ctrlp is not very responsive in large projects (e.g. Linux kernel source), although acceptable to some degree. As an extreme example, if I invoke ctrlp in my home directory, when I type a letter, I must wait ~1s for the current matching results, then I can proceed to type the next letter.\r\n\r\n### Expected behaviour\r\nIn vim, the matched results are shown instantly, and I can keep typing without waiting, even if I invoke it in my home directory. This smooth experience is expected.\r\n\r\n### Profiling results\r\nThe difference is due to the performance of neovim legacy python provider.  As an example, let's try to search \"memory.c\" in linux kernel source.\r\n\r\nneovim:\r\n```\r\nFUNCTIONS SORTED ON TOTAL TIME\r\ncount  total (s)   self (s)  function\r\n    9   1.894581   0.057493  <SNR>185_BuildPrompt()\r\n    9   1.798171   0.000596  <SNR>185_Update()\r\n    9   1.744472   0.000930  <SNR>185_MatchedItems()\r\n    9   1.736736             cpsm#CtrlPMatch()\r\n   10   1.731022             provider#python3#Call()\r\n    8   1.636100   0.000152  <SNR>185_PrtFocusMap()\r\n    8   1.635948   0.000261  <SNR>185_PrtAdd()\r\n    1   0.448524   0.000339  ctrlp#init()\r\n```\r\n\r\nvim:\r\n```\r\nFUNCTIONS SORTED ON TOTAL TIME\r\ncount  total (s)   self (s)  function\r\n    9   0.446616   0.067764  <SNR>160_BuildPrompt()\r\n    8   0.409632   0.000187  <SNR>160_PrtFocusMap()\r\n    8   0.409445   0.000276  <SNR>160_PrtAdd()\r\n    9   0.325209   0.000739  <SNR>160_Update()\r\n    1   0.284742   0.000444  ctrlp#init()\r\n    9   0.259212   0.001105  <SNR>160_MatchedItems()\r\n    9   0.247648             cpsm#CtrlPMatch()\r\n```\r\n\r\nObviously, `provider#python3#Call()` makes neovim slow. But I'm not sure why, maybe the RPC is slow?\r\n```\r\nFUNCTION  provider#python3#Call()\r\nCalled 10 times\r\nTotal time:   1.731022\r\n Self time:   1.731022\r\n\r\ncount  total (s)   self (s)\r\n   10              0.000020   if s:err != ''\r\n                                return\r\n                              endif\r\n   10              0.000020   if !exists('s:host')\r\n                                let s:rpcrequest = function('rpcrequest')\r\n                            \r\n                                \" Ensure that we can load the Python3 host before bootstrapping\r\n                                try\r\n                                  let s:host = remote#host#Require('legacy-python3-provider')\r\n                                catch\r\n                                  let s:err = v:exception\r\n                                  echohl WarningMsg\r\n                                  echomsg v:exception\r\n                                  echohl None\r\n                                  return\r\n                                endtry\r\n                              endif\r\n   10              1.730780   return call(s:rpcrequest, insert(insert(a:args, 'python_'.a:method), s:host))\r\n```\r\n\r\n",
    "closed_at": "2024-09-30T09:45:34Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk"
    },
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "Strange! Even if I don't use python matcher for ctrlp (i.e. plain ctrlp), neovim is still slower than vim. That means vimL in neovim is slower!\r\n\r\nvim:\r\n```\r\nFUNCTIONS SORTED ON TOTAL TIME\r\ncount  total (s)   self (s)  function\r\n    9   2.228333   0.021612  <SNR>160_BuildPrompt()\r\n    9   2.172816   0.056648  <SNR>160_Update()\r\n    8   2.165784   0.000161  <SNR>160_PrtFocusMap()\r\n    8   2.165623   0.000197  <SNR>160_PrtAdd()\r\n    9   1.072790   0.018499  <SNR>160_Render()\r\n    9   1.041732   0.043547  <SNR>160_MatchedItems()\r\n 4368   1.015956   0.212832  <SNR>160_mixedsort()\r\n    9   0.997857   0.954010  <SNR>160_MatchIt()\r\n17121   0.788090   0.563372  <SNR>160_matchlens()\r\n 4368   0.674823   0.063662  <SNR>160_compmatlen()\r\n    1   0.269805   0.000485  ctrlp#init()\r\n    1   0.186684   0.000151  ctrlp#setlines()\r\n    1   0.185977   0.000299  ctrlp#files()\r\n    1   0.138748   0.010278  <SNR>160_UserCmd()\r\n 5282   0.070716   0.015113  <SNR>160_curtype()\r\n 5283   0.055619             <SNR>160_CurTypeName()\r\n    9   0.043621             <SNR>160_sublist()\r\n 4368   0.041661             <SNR>160_multipliers()\r\n    2   0.040999   0.040884  ctrlp#utils#writecache()\r\n    1   0.040583   0.000040  <SNR>160_writecache()\r\n```\r\n\r\n```\r\nFUNCTION  <SNR>160_mixedsort()\r\nCalled 4368 times\r\nTotal time:   1.015956\r\n Self time:   0.212832\r\n\r\ncount  total (s)   self (s)\r\n 4368   0.071458   0.011473 \tlet ct = s:curtype()\r\n 4368              0.004495 \tif ct == 'buf'\r\n                            \t\tlet pat = '[\\/]\\?\\[\\d\\+\\*No Name\\]$'\r\n                            \t\tif a:1 =~# pat && a:2 =~# pat | retu 0\r\n                            \t\telsei a:1 =~# pat | retu 1\r\n                            \t\telsei a:2 =~# pat | retu -1 | en\r\n                            \ten\r\n 4368   0.733539   0.032061 \tlet [cln, cml] = [ctrlp#complen(a:1, a:2), s:compmatlen(a:1, a:2)]\r\n 4368              0.003846 \tif s:ispath\r\n 4368              0.004217 \t\tlet ms = []\r\n 4368              0.004711 \t\tif s:res_count < 21\r\n                            \t\t\tlet ms += [s:compfnlen(a:1, a:2)]\r\n                            \t\t\tif ct !~ '^\\(buf\\|mru\\)$' | let ms += [s:comptime(a:1, a:2)] | en\r\n                            \t\t\tif !s:itemtype | let ms += [s:comparent(a:1, a:2)] | en\r\n                            \t\ten\r\n 4368              0.020062 \t\tif ct =~ '^\\(buf\\|mru\\)$'\r\n                            \t\t\tlet ms += [s:compmref(a:1, a:2)]\r\n                            \t\t\tlet cln = cml ? cln : 0\r\n                            \t\ten\r\n 4368              0.010216 \t\tlet ms += [cml, 0, 0, 0]\r\n 4368   0.064308   0.022647 \t\tlet mp = call('s:multipliers', ms[:3])\r\n 4368              0.018177 \t\tretu cln + ms[0] * mp[0] + ms[1] * mp[1] + ms[2] * mp[2] + ms[3] * mp[3]\r\n                            \ten\r\n                            \tretu cln + cml * 2\r\n```\r\n\r\nneovim:\r\n```\r\nFUNCTIONS SORTED ON TOTAL TIME\r\ncount  total (s)   self (s)  function\r\n    9   2.646082   0.031927  <SNR>185_BuildPrompt()\r\n    9   2.577766   0.034693  <SNR>185_Update()\r\n    8   2.533670   0.000181  <SNR>185_PrtFocusMap()\r\n    8   2.533489   0.000228  <SNR>185_PrtAdd()\r\n    9   1.312411   0.064239  <SNR>185_MatchedItems()\r\n    9   1.247812   1.171612  <SNR>185_MatchIt()\r\n    9   1.228205   0.019906  <SNR>185_Render()\r\n 4368   1.162887   0.243004  <SNR>185_mixedsort()\r\n17121   0.905631   0.645269  <SNR>185_matchlens()\r\n 4368   0.775627   0.074807  <SNR>185_compmatlen()\r\n    1   0.162985   0.000429  ctrlp#init()\r\n 5282   0.077170   0.018139  <SNR>185_curtype()\r\n    9   0.075850             <SNR>185_sublist()\r\n 5283   0.059053             <SNR>185_CurTypeName()\r\n 4368   0.048495             <SNR>185_multipliers()\r\n  859   0.041704   0.027195  <SNR>185_formatline()\r\n 8736   0.039262             <SNR>185_shortest()\r\n   11   0.038855   0.006456  325()\r\n    9   0.035489   0.000849  ctrlp#statusline()\r\n    9   0.034584   0.000426  airline#extensions#ctrlp#ctrlp_airline()\r\n```\r\n\r\n```\r\nFUNCTION  <SNR>185_mixedsort()\r\nCalled 4368 times\r\nTotal time:   1.162887\r\n Self time:   0.243004\r\n\r\ncount  total (s)   self (s)\r\n 4368   0.078725   0.013843 \tlet ct = s:curtype()\r\n 4368              0.005216 \tif ct == 'buf'\r\n                            \t\tlet pat = '[\\/]\\?\\[\\d\\+\\*No Name\\]$'\r\n                            \t\tif a:1 =~# pat && a:2 =~# pat | retu 0\r\n                            \t\telsei a:1 =~# pat | retu 1\r\n                            \t\telsei a:2 =~# pat | retu -1 | en\r\n                            \ten\r\n 4368   0.845141   0.038634 \tlet [cln, cml] = [ctrlp#complen(a:1, a:2), s:compmatlen(a:1, a:2)]\r\n 4368              0.004046 \tif s:ispath\r\n 4368              0.004991 \t\tlet ms = []\r\n 4368              0.004858 \t\tif s:res_count < 21\r\n                            \t\t\tlet ms += [s:compfnlen(a:1, a:2)]\r\n                            \t\t\tif ct !~ '^\\(buf\\|mru\\)$' | let ms += [s:comptime(a:1, a:2)] | en\r\n                            \t\t\tif !s:itemtype | let ms += [s:comparent(a:1, a:2)] | en\r\n                            \t\ten\r\n 4368              0.019115 \t\tif ct =~ '^\\(buf\\|mru\\)$'\r\n                            \t\t\tlet ms += [s:compmref(a:1, a:2)]\r\n                            \t\t\tlet cln = cml ? cln : 0\r\n                            \t\ten\r\n 4368              0.010792 \t\tlet ms += [cml, 0, 0, 0]\r\n 4368   0.074472   0.025978 \t\tlet mp = call('s:multipliers', ms[:3])\r\n 4368              0.018336 \t\tretu cln + ms[0] * mp[0] + ms[1] * mp[1] + ms[2] * mp[2] + ms[3] * mp[3]\r\n                            \ten\r\n                            \tretu cln + cml * 2\r\n```",
            "created_at": "2017-07-23T23:26:40Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-317289924",
            "id": 317289924,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzI4OTkyNA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317289924/reactions"
            },
            "updated_at": "2017-07-23T23:26:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317289924",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5502163?v=4",
                "events_url": "https://api.github.com/users/tcbbd/events{/privacy}",
                "followers_url": "https://api.github.com/users/tcbbd/followers",
                "following_url": "https://api.github.com/users/tcbbd/following{/other_user}",
                "gists_url": "https://api.github.com/users/tcbbd/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tcbbd",
                "id": 5502163,
                "login": "tcbbd",
                "node_id": "MDQ6VXNlcjU1MDIxNjM=",
                "organizations_url": "https://api.github.com/users/tcbbd/orgs",
                "received_events_url": "https://api.github.com/users/tcbbd/received_events",
                "repos_url": "https://api.github.com/users/tcbbd/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tcbbd/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tcbbd/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tcbbd"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@tcbbd There *is* RPC, in Vim there is *no*. This makes a huge difference in how plugins need to be optimized to work faster.\r\n\r\nAbout difference: I am not sure why VimL is slower in your test, but I see that airline calls do not appear in Vim output, meaning that there is some difference in setup. Also can you show full `nvim --version` output, as well as `vim --version`? Compiler and compilation flags are significant in such comparisons, as well as data like whether your Neovim has logging enabled, and at which level.",
            "created_at": "2017-07-23T23:37:07Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-317290398",
            "id": 317290398,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzI5MDM5OA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317290398/reactions"
            },
            "updated_at": "2017-07-23T23:37:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317290398",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "#2437 and #6843 involve startup time (of nvim) only, not general performance.\r\n\r\n> Obviously, provider#python3#Call() makes neovim slow.\r\n\r\nNo. Every python call goes through `provider#python3#Call()`, so that doesn't tell us anything.\r\n\r\nSorting on number of calls (instead of total time) will be more useful. Plugins that make numerous calls that are marshalled between VimL and python (e.g. iterating over a big VimL dict from python instead of pulling it over to python in one batch, then iterating) are known to be slower. That's just a fact.  https://github.com/neovim/neovim/issues/1898\r\n\r\n> That means vimL in neovim is slower!\r\n\r\nI only see a ~10% difference, which could be related to many factors: \r\n\r\n- vim8 features\r\n- more extensive validation of VimL objects in Nvim (better error messages)\r\n- reading/writing files to/from disk may be slightly slower (but more reliable) in Nvim",
            "created_at": "2017-07-23T23:37:19Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-317290411",
            "id": 317290411,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzI5MDQxMQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317290411/reactions"
            },
            "updated_at": "2017-07-23T23:41:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317290411",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@justinmk What validation are you talking about? About “better error messages” I know for sure only about my part, that is implementation of JSON (which still has no error messages more useful then “invalid argument”), viminfo replacement and some places where error messages were changed to include `os_strerror()` output. None looks relevant.",
            "created_at": "2017-07-23T23:40:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-317290612",
            "id": 317290612,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzI5MDYxMg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317290612/reactions"
            },
            "updated_at": "2017-07-23T23:41:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317290612",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Also can you show full nvim --version output, as well as vim --version?\r\n\r\n`nvim --version`:\r\n```\r\nNVIM v0.2.1-dev\r\nBuild type: RelWithDebInfo\r\nCompilation: /usr/bin/x86_64-linux-gnu-gcc -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wconversion -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1 -DNVIM_MSGPACK_HAS_FLOAT32 -Og -g -Wall -Wextra -pedantic -Wno-unused-parameter -Wstrict-prototypes -std=gnu99 -Wvla -fstack-protector-strong -fdiagnostics-color=auto -DINCLUDE_GENERATED_DECLARATIONS -D_GNU_SOURCE -I/build/neovim-iaPgIb/neovim-0.2.0ubuntu1+git201707221704+3540+26~ubuntu16.04.1/build/config -I/build/neovim-iaPgIb/neovim-0.2.0ubuntu1+git201707221704+3540+26~ubuntu16.04.1/src -I/build/neovim-iaPgIb/neovim-0.2.0ubuntu1+git201707221704+3540+26~ubuntu16.04.1/.deps/usr/include -I/build/neovim-iaPgIb/neovim-0.2.0ubuntu1+git201707221704+3540+26~ubuntu16.04.1/.deps/usr/include -I/build/neovim-iaPgIb/neovim-0.2.0ubuntu1+git201707221704+3540+26~ubuntu16.04.1/.deps/usr/include -I/build/neovim-iaPgIb/neovim-0.2.0ubuntu1+git201707221704+3540+26~ubuntu16.04.1/.deps/usr/include -I/build/neovim-iaPgIb/neovim-0.2.0ubuntu1+git201707221704+3540+26~ubuntu16.04.1/.deps/usr/include -I/build/neovim-iaPgIb/neovim-0.2.0ubuntu1+git201707221704+3540+26~ubuntu16.04.1/.deps/usr/include -I/usr/include -I/build/neovim-iaPgIb/neovim-0.2.0ubuntu1+git201707221704+3540+26~ubuntu16.04.1/build/src/nvim/auto -I/build/neovim-iaPgIb/neovim-0.2.0ubuntu1+git201707221704+3540+26~ubuntu16.04.1/build/include\r\nCompiled by root@lcy01-09\r\n\r\nOptional features included (+) or not (-): +acl   +iconv    +jemalloc +tui      \r\nFor differences from Vim, see :help vim-differences\r\n\r\n   system vimrc file: \"$VIM/sysinit.vim\"\r\n  fall-back for $VIM: \"/usr/share/nvim\"\r\n```\r\n\r\n`vim --version`:\r\n```\r\nVIM - Vi IMproved 7.4 (2013 Aug 10, compiled Nov 24 2016 16:44:48)\r\n包含补丁: 1-1689\r\n另外的补丁： 8.0.0056\r\n修改者 pkg-vim-maintainers@lists.alioth.debian.org\r\n编译者 pkg-vim-maintainers@lists.alioth.debian.org\r\n巨型版本 with GTK3 GUI.  可使用(+)与不可使用(-)的功能:\r\n+acl             +farsi           +mouse_netterm   +tag_binary\r\n+arabic          +file_in_path    +mouse_sgr       +tag_old_static\r\n+autocmd         +find_in_path    -mouse_sysmouse  -tag_any_white\r\n+balloon_eval    +float           +mouse_urxvt     +tcl\r\n+browse          +folding         +mouse_xterm     +terminfo\r\n++builtin_terms  -footer          +multi_byte      +termresponse\r\n+byte_offset     +fork()          +multi_lang      +textobjects\r\n+channel         +gettext         -mzscheme        +timers\r\n+cindent         -hangul_input    +netbeans_intg   +title\r\n+clientserver    +iconv           +packages        +toolbar\r\n+clipboard       +insert_expand   +path_extra      +user_commands\r\n+cmdline_compl   +job             +perl            +vertsplit\r\n+cmdline_hist    +jumplist        +persistent_undo +virtualedit\r\n+cmdline_info    +keymap          +postscript      +visual\r\n+comments        +langmap         +printer         +visualextra\r\n+conceal         +libcall         +profile         +viminfo\r\n+cryptv          +linebreak       -python          +vreplace\r\n+cscope          +lispindent      +python3         +wildignore\r\n+cursorbind      +listcmds        +quickfix        +wildmenu\r\n+cursorshape     +localmap        +reltime         +windows\r\n+dialog_con_gui  +lua             +rightleft       +writebackup\r\n+diff            +menu            +ruby            +X11\r\n+digraphs        +mksession       +scrollbind      -xfontset\r\n+dnd             +modify_fname    +signs           +xim\r\n-ebcdic          +mouse           +smartindent     +xsmp_interact\r\n+emacs_tags      +mouseshape      +startuptime     +xterm_clipboard\r\n+eval            +mouse_dec       +statusline      -xterm_save\r\n+ex_extra        +mouse_gpm       -sun_workshop    +xpm\r\n+extra_search    -mouse_jsbterm   +syntax          \r\n     系统 vimrc 文件: \"$VIM/vimrc\"\r\n     用户 vimrc 文件: \"$HOME/.vimrc\"\r\n 第二用户 vimrc 文件: \"~/.vim/vimrc\"\r\n      用户 exrc 文件: \"$HOME/.exrc\"\r\n    系统 gvimrc 文件: \"$VIM/gvimrc\"\r\n    用户 gvimrc 文件: \"$HOME/.gvimrc\"\r\n第二用户 gvimrc 文件: \"~/.vim/gvimrc\"\r\n        系统菜单文件: \"$VIMRUNTIME/menu.vim\"\r\n         $VIM 预设值: \"/usr/share/vim\"\r\n编译方式: gcc -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_GTK  -pthread -I/usr/include/gtk-3.0 -I/usr/include/at-spi2-atk/2.0 -I/usr/include/at-spi-2.0 -I/usr/include/dbus-1.0 -I/usr/lib/x86_64-linux-gnu/dbus-1.0/include -I/usr/include/gtk-3.0 -I/usr/include/gio-unix-2.0/ -I/usr/include/mirclient -I/usr/include/mircommon -I/usr/include/mircookie -I/usr/include/cairo -I/usr/include/pango-1.0 -I/usr/include/harfbuzz -I/usr/include/pango-1.0 -I/usr/include/atk-1.0 -I/usr/include/cairo -I/usr/include/pixman-1 -I/usr/include/freetype2 -I/usr/include/libpng12 -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/libpng12 -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -Wdate-time  -g -O2 -fPIE -fstack-protector-strong -Wformat -Werror=format-security -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1      \r\n链接方式: gcc   -L. -Wl,-Bsymbolic-functions -Wl,-z,relro -fstack-protector -rdynamic -Wl,-export-dynamic -Wl,-E  -Wl,-Bsymbolic-functions -fPIE -pie -Wl,-z,relro -Wl,-z,now -Wl,--as-needed -o vim   -lgtk-3 -lgdk-3 -lpangocairo-1.0 -lpango-1.0 -latk-1.0 -lcairo-gobject -lcairo -lgdk_pixbuf-2.0 -lgio-2.0 -lgobject-2.0 -lglib-2.0 -lSM -lICE -lXpm -lXt -lX11 -lXdmcp -lSM -lICE  -lm -ltinfo -lnsl  -lselinux  -lacl -lattr -lgpm -ldl  -L/usr/lib -llua5.2 -Wl,-E  -fstack-protector-strong -L/usr/local/lib  -L/usr/lib/x86_64-linux-gnu/perl/5.22/CORE -lperl -ldl -lm -lpthread -lcrypt  -L/usr/lib/python3.5/config-3.5m-x86_64-linux-gnu -lpython3.5m -lpthread -ldl -lutil -lm -L/usr/lib/x86_64-linux-gnu -ltcl8.6 -ldl -lz -lpthread -lieee -lm -lruby-2.3 -lpthread -lgmp -ldl -lcrypt -lm     \r\n```",
            "created_at": "2017-07-23T23:41:07Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-317290624",
            "id": 317290624,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzI5MDYyNA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317290624/reactions"
            },
            "updated_at": "2017-07-23T23:41:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317290624",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5502163?v=4",
                "events_url": "https://api.github.com/users/tcbbd/events{/privacy}",
                "followers_url": "https://api.github.com/users/tcbbd/followers",
                "following_url": "https://api.github.com/users/tcbbd/following{/other_user}",
                "gists_url": "https://api.github.com/users/tcbbd/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tcbbd",
                "id": 5502163,
                "login": "tcbbd",
                "node_id": "MDQ6VXNlcjU1MDIxNjM=",
                "organizations_url": "https://api.github.com/users/tcbbd/orgs",
                "received_events_url": "https://api.github.com/users/tcbbd/received_events",
                "repos_url": "https://api.github.com/users/tcbbd/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tcbbd/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tcbbd/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tcbbd"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@ZyX-I The typval traversal is implemented differently in Nvim. Also `string()` output differs, IIRC there were some performance implications with how dicts are traversed. And I thought you added more granular error messages for eval.",
            "created_at": "2017-07-23T23:43:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-317290742",
            "id": 317290742,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzI5MDc0Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317290742/reactions"
            },
            "updated_at": "2017-07-23T23:43:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317290742",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Neovim has `-Og` as last optimization flag as far as I see. Vim has `-O2`.",
            "created_at": "2017-07-23T23:43:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-317290758",
            "id": 317290758,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzI5MDc1OA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317290758/reactions"
            },
            "updated_at": "2017-07-23T23:43:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317290758",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "NONE",
            "body": "> but I see that airline calls do not appear in Vim output, meaning that there is some difference in setup.\r\n\r\nAirline is in use in both vim and neovim, I use the same vimrc for vim & neovim (except there's some options & plugins only activated in neovim, as they only work in neovim)",
            "created_at": "2017-07-23T23:45:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-317290847",
            "id": 317290847,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzI5MDg0Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317290847/reactions"
            },
            "updated_at": "2017-07-23T23:45:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317290847",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5502163?v=4",
                "events_url": "https://api.github.com/users/tcbbd/events{/privacy}",
                "followers_url": "https://api.github.com/users/tcbbd/followers",
                "following_url": "https://api.github.com/users/tcbbd/following{/other_user}",
                "gists_url": "https://api.github.com/users/tcbbd/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tcbbd",
                "id": 5502163,
                "login": "tcbbd",
                "node_id": "MDQ6VXNlcjU1MDIxNjM=",
                "organizations_url": "https://api.github.com/users/tcbbd/orgs",
                "received_events_url": "https://api.github.com/users/tcbbd/received_events",
                "repos_url": "https://api.github.com/users/tcbbd/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tcbbd/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tcbbd/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tcbbd"
            }
        },
        {
            "author_association": "NONE",
            "body": "@ZyX-I The compilation flag is a good explanation, thanks",
            "created_at": "2017-07-23T23:48:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-317290987",
            "id": 317290987,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzI5MDk4Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317290987/reactions"
            },
            "updated_at": "2017-07-23T23:48:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317290987",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5502163?v=4",
                "events_url": "https://api.github.com/users/tcbbd/events{/privacy}",
                "followers_url": "https://api.github.com/users/tcbbd/followers",
                "following_url": "https://api.github.com/users/tcbbd/following{/other_user}",
                "gists_url": "https://api.github.com/users/tcbbd/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tcbbd",
                "id": 5502163,
                "login": "tcbbd",
                "node_id": "MDQ6VXNlcjU1MDIxNjM=",
                "organizations_url": "https://api.github.com/users/tcbbd/orgs",
                "received_events_url": "https://api.github.com/users/tcbbd/received_events",
                "repos_url": "https://api.github.com/users/tcbbd/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tcbbd/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tcbbd/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tcbbd"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@justinmk More granular eval error messages are in that unfinished VimL to lua translator PR which does not  look like actually going to be finished. In master they should appear as one of the next steps after #6364.",
            "created_at": "2017-07-23T23:48:11Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-317290996",
            "id": 317290996,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzI5MDk5Ng==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317290996/reactions"
            },
            "updated_at": "2017-07-23T23:48:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317290996",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Typval traversion is different, yes. But I do not remember adding much of error messages there, aside from more verbose errors when dumping recursive containers.",
            "created_at": "2017-07-23T23:49:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-317291081",
            "id": 317291081,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzI5MTA4MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317291081/reactions"
            },
            "updated_at": "2017-07-23T23:49:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317291081",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@tcbbd Have you built neovim as Release version?\r\n\r\nhttps://github.com/neovim/neovim/wiki/Building-Neovim#optimized-builds",
            "created_at": "2017-07-23T23:59:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-317291757",
            "id": 317291757,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzI5MTc1Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317291757/reactions"
            },
            "updated_at": "2017-07-24T00:00:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317291757",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41495?v=4",
                "events_url": "https://api.github.com/users/Shougo/events{/privacy}",
                "followers_url": "https://api.github.com/users/Shougo/followers",
                "following_url": "https://api.github.com/users/Shougo/following{/other_user}",
                "gists_url": "https://api.github.com/users/Shougo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Shougo",
                "id": 41495,
                "login": "Shougo",
                "node_id": "MDQ6VXNlcjQxNDk1",
                "organizations_url": "https://api.github.com/users/Shougo/orgs",
                "received_events_url": "https://api.github.com/users/Shougo/received_events",
                "repos_url": "https://api.github.com/users/Shougo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Shougo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Shougo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Shougo"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Sorting on number of calls (instead of total time) will be more useful. Plugins that make numerous calls that are marshalled between VimL and python (e.g. iterating over a big VimL dict from python instead of pulling it over to python in one batch, then iterating) are known to be slower. That's just a fact. #1898 \r\n\r\nI think there're not so much calls in my case. Only 10 calls to python. I suspect the large amount of time spent in `provider#python3#Call()` is due to data copying from neovim to python. Here is the `cpsm.py` script, it just get the file list of ctrlp from vim and then feed it into a compiled module.\r\n```python\r\ndef ctrlp_match():\r\n    try:\r\n        results, regexes = cpsm_py.ctrlp_match(\r\n                vim.eval(\"a:items\"), vim.eval(\"a:str\"),\r\n                limit=int(vim.eval(\"a:limit\")), mmode=vim.eval(\"a:mmode\"),\r\n                ispath=int(vim.eval(\"a:ispath\")), crfile=vim.eval(\"a:crfile\"),\r\n                highlight_mode=vim.eval(\"g:cpsm_highlight_mode\"),\r\n                match_crfile=int(vim.eval(\"s:match_crfile\")),\r\n                max_threads=int(vim.eval(\"g:cpsm_max_threads\")),\r\n                query_inverting_delimiter=vim.eval(\"g:cpsm_query_inverting_delimiter\"),\r\n                regex_line_prefix=vim.eval(\"s:regex_line_prefix\"),\r\n                unicode=int(vim.eval(\"g:cpsm_unicode\")))\r\n        # Escape backslashes and \".\r\n        vim.command(\"let s:results = [%s]\" % \",\".join(\r\n                map(_escape_and_quote, results)))\r\n        vim.command(\"let s:regexes = [%s]\" % \",\".join(\r\n                map(_escape_and_quote, regexes)))\r\n    except Exception as ex:\r\n        ex_str = str(ex)\r\n        if \"function takes at most\" in ex_str:\r\n            # Most likely due to a new parameter being added to\r\n            # cpsm_py.ctrlp_match.\r\n            ex_str = \"rebuild cpsm by running %s: %s\" % (\r\n                    os.path.normpath(os.path.join(\r\n                            script_dir, \"..\", \"install.sh\")),\r\n                    ex_str)\r\n        vim.command(\"let s:results = [%s]\" % _escape_and_quote(\r\n                \"ERROR: \" + ex_str))\r\n        vim.command(\"let s:regexes = []\")\r\n```",
            "created_at": "2017-07-24T00:00:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-317291812",
            "id": 317291812,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzI5MTgxMg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317291812/reactions"
            },
            "updated_at": "2017-07-24T00:00:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317291812",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5502163?v=4",
                "events_url": "https://api.github.com/users/tcbbd/events{/privacy}",
                "followers_url": "https://api.github.com/users/tcbbd/followers",
                "following_url": "https://api.github.com/users/tcbbd/following{/other_user}",
                "gists_url": "https://api.github.com/users/tcbbd/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tcbbd",
                "id": 5502163,
                "login": "tcbbd",
                "node_id": "MDQ6VXNlcjU1MDIxNjM=",
                "organizations_url": "https://api.github.com/users/tcbbd/orgs",
                "received_events_url": "https://api.github.com/users/tcbbd/received_events",
                "repos_url": "https://api.github.com/users/tcbbd/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tcbbd/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tcbbd/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tcbbd"
            }
        },
        {
            "author_association": "NONE",
            "body": "@Shougo I get it from [ppa](https://launchpad.net/%7Eneovim-ppa/+archive/ubuntu/unstable)",
            "created_at": "2017-07-24T00:02:20Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-317291949",
            "id": 317291949,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzI5MTk0OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317291949/reactions"
            },
            "updated_at": "2017-07-24T00:02:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317291949",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5502163?v=4",
                "events_url": "https://api.github.com/users/tcbbd/events{/privacy}",
                "followers_url": "https://api.github.com/users/tcbbd/followers",
                "following_url": "https://api.github.com/users/tcbbd/following{/other_user}",
                "gists_url": "https://api.github.com/users/tcbbd/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tcbbd",
                "id": 5502163,
                "login": "tcbbd",
                "node_id": "MDQ6VXNlcjU1MDIxNjM=",
                "organizations_url": "https://api.github.com/users/tcbbd/orgs",
                "received_events_url": "https://api.github.com/users/tcbbd/received_events",
                "repos_url": "https://api.github.com/users/tcbbd/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tcbbd/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tcbbd/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tcbbd"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "As I know ctrlp run different vim script in vim and neovim, It only use job in vim  8. And use system and system list in neovim and old vim. When use job . The matcher do not need to filters all files. \r\n\r\n",
            "created_at": "2017-07-24T00:03:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-317292059",
            "id": 317292059,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzI5MjA1OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317292059/reactions"
            },
            "updated_at": "2017-07-24T00:03:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317292059",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13142418?v=4",
                "events_url": "https://api.github.com/users/wsdjeg/events{/privacy}",
                "followers_url": "https://api.github.com/users/wsdjeg/followers",
                "following_url": "https://api.github.com/users/wsdjeg/following{/other_user}",
                "gists_url": "https://api.github.com/users/wsdjeg/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wsdjeg",
                "id": 13142418,
                "login": "wsdjeg",
                "node_id": "MDQ6VXNlcjEzMTQyNDE4",
                "organizations_url": "https://api.github.com/users/wsdjeg/orgs",
                "received_events_url": "https://api.github.com/users/wsdjeg/received_events",
                "repos_url": "https://api.github.com/users/wsdjeg/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wsdjeg/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wsdjeg/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wsdjeg"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Related issue: https://github.com/neovim/neovim/issues/5702",
            "created_at": "2017-07-24T00:12:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-317292606",
            "id": 317292606,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzI5MjYwNg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317292606/reactions"
            },
            "updated_at": "2017-07-24T00:12:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317292606",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41495?v=4",
                "events_url": "https://api.github.com/users/Shougo/events{/privacy}",
                "followers_url": "https://api.github.com/users/Shougo/followers",
                "following_url": "https://api.github.com/users/Shougo/following{/other_user}",
                "gists_url": "https://api.github.com/users/Shougo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Shougo",
                "id": 41495,
                "login": "Shougo",
                "node_id": "MDQ6VXNlcjQxNDk1",
                "organizations_url": "https://api.github.com/users/Shougo/orgs",
                "received_events_url": "https://api.github.com/users/Shougo/received_events",
                "repos_url": "https://api.github.com/users/Shougo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Shougo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Shougo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Shougo"
            }
        },
        {
            "author_association": "NONE",
            "body": "@Shougo @ZyX-I Tested with optimized neovim build, now neovim is faster executing VimL!\r\n```\r\nFUNCTIONS SORTED ON TOTAL TIME\r\ncount  total (s)   self (s)  function\r\n    9   2.086580   0.034588  <SNR>185_BuildPrompt()\r\n    8   2.024475   0.000213  <SNR>185_PrtFocusMap()\r\n    8   2.024262   0.000309  <SNR>185_PrtAdd()\r\n    9   2.019891   0.037544  <SNR>185_Update()\r\n    9   0.996904   0.015088  <SNR>185_Render()\r\n    9   0.982764   0.045368  <SNR>185_MatchedItems()\r\n 4368   0.947474   0.198323  <SNR>185_mixedsort()\r\n    9   0.936969   0.899135  <SNR>185_MatchIt()\r\n17121   0.744025   0.528936  <SNR>185_matchlens()\r\n 4368   0.631073   0.056433  <SNR>185_compmatlen()\r\n    1   0.207125   0.000190  ctrlp#init()\r\n    1   0.133168   0.000047  ctrlp#setlines()\r\n    1   0.133028   0.000205  ctrlp#files()\r\n    1   0.116263             <SNR>185_UserCmd()\r\n 5282   0.061823   0.012973  <SNR>185_curtype()\r\n 5283   0.048858             <SNR>185_CurTypeName()\r\n 4368   0.040560             <SNR>185_multipliers()\r\n    9   0.037553             <SNR>185_sublist()\r\n   18   0.036491   0.002311  airline#check_mode()\r\n   11   0.036126   0.006039  325()\r\n```\r\n\r\nBut the python provider performance doesn't change :(",
            "created_at": "2017-07-24T00:28:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-317293400",
            "id": 317293400,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzI5MzQwMA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317293400/reactions"
            },
            "updated_at": "2017-07-24T00:28:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317293400",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5502163?v=4",
                "events_url": "https://api.github.com/users/tcbbd/events{/privacy}",
                "followers_url": "https://api.github.com/users/tcbbd/followers",
                "following_url": "https://api.github.com/users/tcbbd/following{/other_user}",
                "gists_url": "https://api.github.com/users/tcbbd/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tcbbd",
                "id": 5502163,
                "login": "tcbbd",
                "node_id": "MDQ6VXNlcjU1MDIxNjM=",
                "organizations_url": "https://api.github.com/users/tcbbd/orgs",
                "received_events_url": "https://api.github.com/users/tcbbd/received_events",
                "repos_url": "https://api.github.com/users/tcbbd/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tcbbd/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tcbbd/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tcbbd"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@tcbbd It should not. Bottleneck is IPC in this case, not lack of optimization: every `:python`/`pyeval()` is something like.\r\n\r\n1. Generate request. Calls some VimL functions from `provider#*`.\r\n2. Serialize request. C, uses first internal API types which are then serialized via msgpack-c library.\r\n3. Send request. Includes switching to kernel. May need multiple transactions.\r\n4. (Python) Receive request. Includes switching from kernel. May need multiple transactions.\r\n5. (Python) Deserialize request.\r\n6. (Python) Process request.\r\n6.1. Includes “generate -> serialize -> send -> receive -> deserialize -> process -> serialize -> send -> receive -> deserialize -> process” each time Neovim API is being used, though in the opposite direction (first generate on Python client).\r\n7. (Python) Serialize response.\r\n8. (Python) Send response. Includes switching to kernel. May need multiple transactions.\r\n9. Receive response. Includes switching from kernel. May need multiple transactions.\r\n10. Deserialize response. C, uses same msgpack-c library, but now it is always “first create msgpack-c objects, then convert them to internal API objects, then free msgpack-c”.\r\n11. Process response. Should be among the fastest steps here, with e.g. `:python` processing is just stopping executing the command.\r\n\r\nIn Vim serialize/send/receive/deserialize are folded into a single step “convert internal object (e.g. typval_T) into Python object”. In some cases this includes copying everything around with encoding conversion, in other it is just a mere “create a Python object, save pointer to Vim object inside, save information that Vim object is referenced in it”. But in any case Vim not only omits that serializing/deserializing mess, but also switching between kernel and user mode. Also Vim does not need to run additional VimL code to communicate with Python.\r\n\r\nOur approach has many advantages, but performance is not among them.",
            "created_at": "2017-07-24T01:05:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-317296032",
            "id": 317296032,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzI5NjAzMg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317296032/reactions"
            },
            "updated_at": "2017-07-24T01:07:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317296032",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "NONE",
            "body": "@ZyX-I So vim is faster with cpsm.py because it embeds a python in it so the large file list is directly accessed by python, but in neovim the file list should be sent to external python process via IPC. If I understand it correctly, this kind of performance issue (large amount of communication between neovim and python or any other language provider) is an inevitable result of our design. So we should modify/redesign plugins to mitigate the problem?",
            "created_at": "2017-07-24T01:16:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-317296972",
            "id": 317296972,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzI5Njk3Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317296972/reactions"
            },
            "updated_at": "2017-07-24T01:16:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317296972",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5502163?v=4",
                "events_url": "https://api.github.com/users/tcbbd/events{/privacy}",
                "followers_url": "https://api.github.com/users/tcbbd/followers",
                "following_url": "https://api.github.com/users/tcbbd/following{/other_user}",
                "gists_url": "https://api.github.com/users/tcbbd/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tcbbd",
                "id": 5502163,
                "login": "tcbbd",
                "node_id": "MDQ6VXNlcjU1MDIxNjM=",
                "organizations_url": "https://api.github.com/users/tcbbd/orgs",
                "received_events_url": "https://api.github.com/users/tcbbd/received_events",
                "repos_url": "https://api.github.com/users/tcbbd/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tcbbd/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tcbbd/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tcbbd"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> So we should modify/redesign plugins to mitigate the problem?\r\n\r\nYes, the modification(optimization) is needed for the plugin.\r\nFor example, UltiSnips is not optimized with neovim.",
            "created_at": "2017-07-24T01:59:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-317301095",
            "id": 317301095,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzMwMTA5NQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317301095/reactions"
            },
            "updated_at": "2017-07-24T01:59:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/317301095",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41495?v=4",
                "events_url": "https://api.github.com/users/Shougo/events{/privacy}",
                "followers_url": "https://api.github.com/users/Shougo/followers",
                "following_url": "https://api.github.com/users/Shougo/following{/other_user}",
                "gists_url": "https://api.github.com/users/Shougo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Shougo",
                "id": 41495,
                "login": "Shougo",
                "node_id": "MDQ6VXNlcjQxNDk1",
                "organizations_url": "https://api.github.com/users/Shougo/orgs",
                "received_events_url": "https://api.github.com/users/Shougo/received_events",
                "repos_url": "https://api.github.com/users/Shougo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Shougo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Shougo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Shougo"
            }
        },
        {
            "author_association": "NONE",
            "body": "@ZyX-I \r\n> More granular eval error messages are in that unfinished VimL to lua translator PR which does not look like actually going to be finished.\r\n\r\nIf I may ask, why is this the case? It was a pretty interesting part of the original Neovim design.",
            "created_at": "2017-07-31T19:59:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-319179230",
            "id": 319179230,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTE3OTIzMA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/319179230/reactions"
            },
            "updated_at": "2017-07-31T19:59:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/319179230",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/87875?v=4",
                "events_url": "https://api.github.com/users/bluddy/events{/privacy}",
                "followers_url": "https://api.github.com/users/bluddy/followers",
                "following_url": "https://api.github.com/users/bluddy/following{/other_user}",
                "gists_url": "https://api.github.com/users/bluddy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bluddy",
                "id": 87875,
                "login": "bluddy",
                "node_id": "MDQ6VXNlcjg3ODc1",
                "organizations_url": "https://api.github.com/users/bluddy/orgs",
                "received_events_url": "https://api.github.com/users/bluddy/received_events",
                "repos_url": "https://api.github.com/users/bluddy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bluddy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bluddy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bluddy"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@bluddy Basically two problems:\r\n\r\n1. Original PR is too big for one PR, not ready for splitting and one can’t start making benefits of partial merging. One of the reasons #6364 exists is that I am going to use parser for highlighting and provide benefits for users without having anything fully finished. But even to use what I have there for highlighting I need rather big refactoring because I did not thought about that in advance.\r\n2. When I started implementing actually translator and not just parser it felt like I am trying to fit a square into a round hole: lua has different semantics, so not only the result is only going to be fast with much effort, but it would be easy to leak lua semantics: e.g. can’t add string and number, but can concat string and float, yet can’t concat luajit integer and string; what is worse are things like depending on presence of `:try` execution may or may not continue after error.\r\n\r\nI am now thinking of creating a VM instead, though not sure whether such creating would be “write our own from scratch” or “take existing one and refactor it”. Thought about Parrot, but it appears to be dead now (last commit is 9 Nov 2016) and I saw some articles critiquing its design. In any case in order to be incremental VM will only be created after parser is finished, though it is possible to start to create it after finishing only expressions parser since there are lambdas now (they may use it right there since they absolutely need only expressions parser).",
            "created_at": "2017-07-31T21:27:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-319201568",
            "id": 319201568,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTIwMTU2OA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/319201568/reactions"
            },
            "updated_at": "2017-07-31T21:27:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/319201568",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "NONE",
            "body": "@ZyX-I to be honest, I was skeptical about the performance of implementing an interpreter inside an interpreter, but you seemed to have it under control. Perhaps this isn't worth pursuing too far -- if Neovim just adopts lua as the first-class scripting language (while keeping vimL support) and enhances the API for Neovim-specific stuff, that might be good enough.",
            "created_at": "2017-07-31T21:32:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-319202861",
            "id": 319202861,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTIwMjg2MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/319202861/reactions"
            },
            "updated_at": "2017-07-31T21:32:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/319202861",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/87875?v=4",
                "events_url": "https://api.github.com/users/bluddy/events{/privacy}",
                "followers_url": "https://api.github.com/users/bluddy/followers",
                "following_url": "https://api.github.com/users/bluddy/following{/other_user}",
                "gists_url": "https://api.github.com/users/bluddy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bluddy",
                "id": 87875,
                "login": "bluddy",
                "node_id": "MDQ6VXNlcjg3ODc1",
                "organizations_url": "https://api.github.com/users/bluddy/orgs",
                "received_events_url": "https://api.github.com/users/bluddy/received_events",
                "repos_url": "https://api.github.com/users/bluddy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bluddy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bluddy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bluddy"
            }
        },
        {
            "author_association": "NONE",
            "body": "@bluddy I think it's just about directly implementing a VimL VM. It is a good idea to improve VimL, but there seems to be great amount of work to be done and this plan would lie on the long-term todo list for a long time. After all, we have many other things to fix and to improve in Neovim now, and currently remote plugins work well (except for the pathological case of this issue, i.e. great amount of IPC communication).",
            "created_at": "2017-07-31T21:51:54Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-319207234",
            "id": 319207234,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTIwNzIzNA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/319207234/reactions"
            },
            "updated_at": "2017-07-31T21:51:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/319207234",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5502163?v=4",
                "events_url": "https://api.github.com/users/tcbbd/events{/privacy}",
                "followers_url": "https://api.github.com/users/tcbbd/followers",
                "following_url": "https://api.github.com/users/tcbbd/following{/other_user}",
                "gists_url": "https://api.github.com/users/tcbbd/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tcbbd",
                "id": 5502163,
                "login": "tcbbd",
                "node_id": "MDQ6VXNlcjU1MDIxNjM=",
                "organizations_url": "https://api.github.com/users/tcbbd/orgs",
                "received_events_url": "https://api.github.com/users/tcbbd/received_events",
                "repos_url": "https://api.github.com/users/tcbbd/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tcbbd/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tcbbd/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tcbbd"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@bluddy I only fully implemented a parser, but even that had a bunch of bad design choices, unfinished translator implementation appeared to be slow for anything more or less complex. What I want now out of the parser is\r\n\r\n1. If requested, create garray with highlighting alongside with the AST.\r\n2. Both AST and highlighting need to be exposed via API. To be used in tests and in things like VimL linters, testing via a dumper is strange (though dumper is still good to have).\r\n3. AST need to be more closely tighed up with source.\r\n\r\nLua is now going to be present always, and it has direct (i.e. via wrappers written in C which convert lua types to internal API types and directly call C functions) access to Neovim API. There is not Vim compatibility layer yet though, you may use only API.\r\n\r\n@tcbbd The biggest problem with VimL is that it executes a string during parsing, but has not even AST, so strings need to be reparsed each time. I predict that even replacing “execute a string during parsing, do this each time function is called” with “parse to AST at function definition, execute AST ever since” as long as everything is C would be a big improvement for functions.\r\n\r\nThe IPC has nothing to do with the problem.",
            "created_at": "2017-07-31T22:05:19Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-319210144",
            "id": 319210144,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTIxMDE0NA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/319210144/reactions"
            },
            "updated_at": "2017-07-31T22:05:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/319210144",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "NONE",
            "body": "@ZyX-I \r\n>  I predict that even replacing “execute a string during parsing, do this each time function is called” with “parse to AST at function definition, execute AST ever since” as long as everything is C would be a big improvement for functions.\r\n\r\nThis is a great idea. It probably makes more sense to do this than anything else. Probably the fastest approach is to use yacc and lex, with a C-based AST. Lua (even luajit) is just a layer of slowdown. Create a simple stack-based interpreter for the AST and you'll get pretty good performance.\r\n\r\nBTW I realize it has nothing to do with this particular PR. I apologize -- I just saw your point and wanted to get more info.",
            "created_at": "2017-07-31T22:34:39Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-319215810",
            "id": 319215810,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTIxNTgxMA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/319215810/reactions"
            },
            "updated_at": "2017-07-31T22:34:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/319215810",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/87875?v=4",
                "events_url": "https://api.github.com/users/bluddy/events{/privacy}",
                "followers_url": "https://api.github.com/users/bluddy/followers",
                "following_url": "https://api.github.com/users/bluddy/following{/other_user}",
                "gists_url": "https://api.github.com/users/bluddy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bluddy",
                "id": 87875,
                "login": "bluddy",
                "node_id": "MDQ6VXNlcjg3ODc1",
                "organizations_url": "https://api.github.com/users/bluddy/orgs",
                "received_events_url": "https://api.github.com/users/bluddy/received_events",
                "repos_url": "https://api.github.com/users/bluddy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bluddy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bluddy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bluddy"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I independently came across the same issue as the original poster, I am a new *cpsm* user, and I also noted the Neovim slowdown. I opened (then closed) an [issue](https://github.com/nixprime/cpsm/issues/39) on the *cpsm* issue tracker.\r\n\r\nThe Neovim slowdown makes sense once RPC is explained.\r\n\r\nI have a couple of questions:\r\n\r\n* Why is the issue still open? Is there work proposed in Neovim to help with RPC heavy plugins? I can't see that can be done from the descriptions thus far.\r\n\r\n* So the real fix will be needed in the *cpsm* plugin correct? If so what would that be? Replacing all the Python with Lua? Note, cpsm is a Python plugin that calls into C code. If it was converted/forked into Lua plugin that calls into C code it would be fast in Neovim? Or not?\r\n\r\n* If a Lua version of *cpsm* is the solution then we need to wait since 0.2.0 still doesn't have the in-process Lua interpreter yet, or am I wrong?\r\n\r\nIf Lua is not the answer to speed up *cpsm* in Neovim then can someone explain what is the best way to speed up *cpsm* in Neovim.\r\n\r\nNote, *fzf* is not an answer or a solution for some of us. [I use CtrlP + ripgrep + cpsm](https://bluz71.github.io/2017/10/26/turbocharge-the-ctrlp-vim-plugin.html) since it never launches any external window when using a GUI based vim. I simply prefer a fast CtrlP over *fzf*; but I just wish *cpsm* was faster in Neovim than it currently is (as fast as Vim 8 would be best).",
            "created_at": "2017-10-28T23:35:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340226777",
            "id": 340226777,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDIyNjc3Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340226777/reactions"
            },
            "updated_at": "2017-10-28T23:36:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340226777",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11382509?v=4",
                "events_url": "https://api.github.com/users/bluz71/events{/privacy}",
                "followers_url": "https://api.github.com/users/bluz71/followers",
                "following_url": "https://api.github.com/users/bluz71/following{/other_user}",
                "gists_url": "https://api.github.com/users/bluz71/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bluz71",
                "id": 11382509,
                "login": "bluz71",
                "node_id": "MDQ6VXNlcjExMzgyNTA5",
                "organizations_url": "https://api.github.com/users/bluz71/orgs",
                "received_events_url": "https://api.github.com/users/bluz71/received_events",
                "repos_url": "https://api.github.com/users/bluz71/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bluz71/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bluz71/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bluz71"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Why is the issue still open? Is there work proposed in Neovim to help with RPC heavy plugins\r\n\r\nIt's a bug, and there's still some potential for improvement.\r\n\r\n> So the real fix will be needed in the cpsm plugin correct? If so what would that be? Replacing all the Python with Lua? \r\n\r\nNo. The general idea is something like this:\r\n\r\n- Look for places where a big list of items is being processed in a loop. The processing should be done in python, then sent as a batch to Nvim. \r\n    - It should not do _per-item_ requests to Nvim.\r\n- If some decisions about each item are needed from Nvim, send the list as a batch to Nvim, work on it server-side (i.e. in Nvim), then return the result back to the python-side.\r\n    - You could use Lua instead of VimL server-side to make things faster.\r\n\r\n> If it was converted/forked into Lua plugin that calls into C code it would be fast in Neovim? Or not?\r\n\r\nYes, that works too. However, Lua runs in-process, so the \"async\" potential of a remote python plugin would be lost. (However, we will eventually ship a \"remote host\" for Lua as well.)",
            "created_at": "2017-10-28T23:54:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340227588",
            "id": 340227588,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDIyNzU4OA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340227588/reactions"
            },
            "updated_at": "2017-10-28T23:56:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340227588",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@justinmk,\r\n\r\n> It's a bug, and there's still some potential for improvement.\r\n\r\nOk, maybe some performance improvement in the future? If so, most welcome.\r\n\r\n> Look for places where a big list of items is being processed in a loop....\r\n\r\nI suspect big item processing is already occurring in C. The [cpsm](https://github.com/nixprime/cpsm) plugin is a custom matcher for the CtrlP plugin. I think the pipeline would be something like this:\r\n\r\nUser interaction in *CtrlP* (VimL) --- RPC ---> cpsm Python interface --- dynamic linked ---> cpsm C library which does all heavy lifting (matching and list processing). Don't quote me, but that is what I think would be happening. Hence the user pressing keys is in VimL that then gets passed via Vim's Python interface to a C-library that does the fuzzy matching and ranking.\r\n\r\nSince Vim 8 with cpsm is super-duper fast (like nearly instant) whilst Neovim can lag (with huge source trees) it does seem the RPC interface (passing keypresses to the C-library and passing matches from the C-library back) is the issue. I don't think there is scope for *cpsm* to batch process since I think it would already do that (in C).\r\n\r\n> Yes, that works too. However, Lua runs in-process, so the \"async\" potential of a remote python plugin would be lost. \r\n\r\nCtrlP is not async (as far as I know); hence not having async is no big deal. Which version of Neovim has Lua in-process? Am I right that Neovim 0.2.0 (the current stable version) does *not* have Lua built in? But 0.3.0 will have Lua?\r\n\r\nI ask since I likely will create an issue at *cpsm* about whether a *cpsm* fork based on Lua for Neovim is possible. Bypassing RPC is likely the key for fast *cpsm* in Neovim from how I read this issue.\r\n",
            "created_at": "2017-10-29T01:38:40Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340231381",
            "id": 340231381,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDIzMTM4MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340231381/reactions"
            },
            "updated_at": "2017-10-29T01:38:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340231381",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11382509?v=4",
                "events_url": "https://api.github.com/users/bluz71/events{/privacy}",
                "followers_url": "https://api.github.com/users/bluz71/followers",
                "following_url": "https://api.github.com/users/bluz71/following{/other_user}",
                "gists_url": "https://api.github.com/users/bluz71/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bluz71",
                "id": 11382509,
                "login": "bluz71",
                "node_id": "MDQ6VXNlcjExMzgyNTA5",
                "organizations_url": "https://api.github.com/users/bluz71/orgs",
                "received_events_url": "https://api.github.com/users/bluz71/received_events",
                "repos_url": "https://api.github.com/users/bluz71/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bluz71/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bluz71/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bluz71"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> User interaction in CtrlP (VimL) --- RPC ---> cpsm Python interface --- dynamic linked ---> cpsm C library which does all heavy lifting (matching and list processing). Don't quote me, but that is what I think would be happening\r\n\r\nThat diagram is uni-directional, and doesn't tell us anything we didn't already know. Yes, RPC happens somewhere and does something. No, sending a list of files over RPC is not going to be slow. You can send _megabytes_ of data without a perceptible slowdown.\r\n\r\n> Bypassing RPC is likely the key for fast cpsm in Neovim from how I read this issue\r\n\r\nRPC is too vague here. Every Nvim GUI is implemented via RPC, and they are doing a lot more than sending a list of 100 files or whatever.\r\n\r\n> 0.3.0 will have Lua?\r\n\r\n0.2.1 will have Lua built-in. Pre-builds are available at https://github.com/neovim/neovim/releases .\r\n\r\n",
            "created_at": "2017-10-29T02:17:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340232654",
            "id": 340232654,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDIzMjY1NA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340232654/reactions"
            },
            "updated_at": "2017-10-29T02:17:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340232654",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@justinmk,\r\n\r\nI interpreted ZyX-I's response [here](https://github.com/neovim/neovim/issues/7063#issuecomment-317296032) as being the final answer. Since Neovim does Python plugins via RPC/IPC it can never be as fast as Vim 8 with the same plugins; which made sense.\r\n\r\nHow do you suggest we make *cpsm* as fast in Neovim as it is in Vim? Is a Neovim optimization needed or does the *cpsm* plugin need a Neovim enhancement?\r\n\r\nMaybe the answer is cpsm never will be as fast, use a different fuzzy matching plugin?",
            "created_at": "2017-10-29T02:43:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340233435",
            "id": 340233435,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDIzMzQzNQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340233435/reactions"
            },
            "updated_at": "2017-10-29T02:43:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340233435",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11382509?v=4",
                "events_url": "https://api.github.com/users/bluz71/events{/privacy}",
                "followers_url": "https://api.github.com/users/bluz71/followers",
                "following_url": "https://api.github.com/users/bluz71/following{/other_user}",
                "gists_url": "https://api.github.com/users/bluz71/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bluz71",
                "id": 11382509,
                "login": "bluz71",
                "node_id": "MDQ6VXNlcjExMzgyNTA5",
                "organizations_url": "https://api.github.com/users/bluz71/orgs",
                "received_events_url": "https://api.github.com/users/bluz71/received_events",
                "repos_url": "https://api.github.com/users/bluz71/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bluz71/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bluz71/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bluz71"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I addressed those questions above, in https://github.com/neovim/neovim/issues/7063#issuecomment-340227588 . Don't know what else to say.",
            "created_at": "2017-10-29T03:10:53Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340234377",
            "id": 340234377,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDIzNDM3Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340234377/reactions"
            },
            "updated_at": "2017-10-29T03:10:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340234377",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@bluz71 Just optimize that plugin with “communications with Neovim has big throughput *and* big latency” idea in mind while Vim has big throughput, small latency, but more likely to break when you use threads or fork-without-exec-based multiprocessing. Serialization/deserialization cycle with context switching do contribute to throughput as well, but its contribution to latency is far more noticeable.\r\n\r\nThis is basically what @justinmk suggested: in place of communicating in small chunks, do whatever is needed to merge them into bigger ones and process them in a batch on whatever side you need to process them: rather typical advice for Web services as well.",
            "created_at": "2017-10-29T10:50:50Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340253103",
            "id": 340253103,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDI1MzEwMw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340253103/reactions"
            },
            "updated_at": "2017-10-29T10:50:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340253103",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@ZyX-I and @justinmk,\r\n\r\n[cpsm](https://github.com/nixprime/cpsm) is *not* my plugin, @nixprime is the author and maintainer. I had a quick look at the code, but I don't understand how it does what it does (it is mostly C++). Your suggestions are excellent, but it may be the case that the plugin already does those optimisations. It is the latency that is the killer here, not throughput.\r\n\r\nI will nonetheless open up an issue at the *cpsm* issue tracker noting and linking the suggestions here.\r\n\r\nI've already mentioned, but my gut feel is that *cpsm* would need to be forked, say to *cpsm.nvim* with the existing Python bridge replaced by in-process Lua targetting Neovim 0.2.1 and onwards. That should have performance parity with *cpsm* running in Vim 8.0. I also expect this not to happen since @nixprime has been very quiet on Github for most of the year.\r\n\r\nLastly, I understand the benefits of the existing Neovim RPC/IPC architecture. The one penalty will be extreme latency dependent plugins; this particular issue may well be the worst case scenario for that latency penalty. Basically we live with it in Neovim, the plugin needs to change some way, some how (if the author has the will).\r\n\r\nThanks everyone. Good chat.\r\n\r\nP.S. When fzf stops spawning a window in gVim maybe I'll replace CtrlP with *fzf*.",
            "created_at": "2017-10-29T22:56:01Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340310035",
            "id": 340310035,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDMxMDAzNQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340310035/reactions"
            },
            "updated_at": "2017-10-29T22:56:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340310035",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11382509?v=4",
                "events_url": "https://api.github.com/users/bluz71/events{/privacy}",
                "followers_url": "https://api.github.com/users/bluz71/followers",
                "following_url": "https://api.github.com/users/bluz71/following{/other_user}",
                "gists_url": "https://api.github.com/users/bluz71/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bluz71",
                "id": 11382509,
                "login": "bluz71",
                "node_id": "MDQ6VXNlcjExMzgyNTA5",
                "organizations_url": "https://api.github.com/users/bluz71/orgs",
                "received_events_url": "https://api.github.com/users/bluz71/received_events",
                "repos_url": "https://api.github.com/users/bluz71/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bluz71/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bluz71/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bluz71"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@bluz71 I doubt having an issue *only* in cpsm will do any good, I have not checked CtrlP source code, but most likely you need to either make somebody modify only CtrlP or both CtrlP and cpsm: based on the README cpsm is on the receiving end, it being a plugin to a plugin means that CtrlP defines the API, and API definition is highly likely to be a major limiter unless cpsm is badly coded from the beginning.",
            "created_at": "2017-10-29T23:18:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340311394",
            "id": 340311394,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDMxMTM5NA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340311394/reactions"
            },
            "updated_at": "2017-10-29T23:18:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340311394",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Though you need to check API defined by CtrlP first before doing such moves.",
            "created_at": "2017-10-29T23:19:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340311441",
            "id": 340311441,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDMxMTQ0MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340311441/reactions"
            },
            "updated_at": "2017-10-29T23:19:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340311441",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@ZyX-I,\r\n\r\nVim 8 + CtrlP + cpsm has no latency at all; results are immediate (as fast as *fzf* with huge trees like Linux). It is surprising how responsive CtrlP + ripgrep + cpsm is even with huge source trees when in Vim 8.\r\n\r\nWith that data point I don't see why CtrlP needs to change to help fix this issue.\r\n\r\nIf Vim 8 is super fast (with CtrlP + cpsm) and Neovim has latency issues then RPC/IPC is most likely the issue? or no? Replace remote Python with in-process Lua should result in parity?",
            "created_at": "2017-10-29T23:41:31Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340312790",
            "id": 340312790,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDMxMjc5MA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340312790/reactions"
            },
            "updated_at": "2017-10-29T23:41:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340312790",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11382509?v=4",
                "events_url": "https://api.github.com/users/bluz71/events{/privacy}",
                "followers_url": "https://api.github.com/users/bluz71/followers",
                "following_url": "https://api.github.com/users/bluz71/following{/other_user}",
                "gists_url": "https://api.github.com/users/bluz71/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bluz71",
                "id": 11382509,
                "login": "bluz71",
                "node_id": "MDQ6VXNlcjExMzgyNTA5",
                "organizations_url": "https://api.github.com/users/bluz71/orgs",
                "received_events_url": "https://api.github.com/users/bluz71/received_events",
                "repos_url": "https://api.github.com/users/bluz71/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bluz71/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bluz71/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bluz71"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "CtrlP + cpsm may be fast even if e.g. cpsm has to call ctrlp#add_match() once for each and every match it found and check return value (example, I am not saying it does): that is in-process and fast in Vim. But if CtrlP does not have e.g. ctrlp#add_match_list() it will not be fast in Neovim with this approach, no matter how fast are CtrlP and cpsm individually.2:41, 30 октября 2017 г., Dennis B <notifications@github.com>:@ZyX-I,Vim 8 + CtrlP + cpsm has no latency at all; results are immediate (as fast as fzf with huge trees like Linux). It is surprising how responsive CtrlP + ripgrep + cpsm is even with huge source trees when in Vim 8.With that data point I don't see why CtrlP needs to change to help fix this issue.If Vim 8 is super fast (with CtrlP + cpsm) and Neovim has latency issues then RPC/IPC is most likely the issue? or no? Replace remote Python with in-process Lua should result in parity?—You are receiving this because you were mentioned.Reply to this email directly, view it on GitHub, or mute the thread.",
            "created_at": "2017-10-30T00:23:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340315537",
            "id": 340315537,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDMxNTUzNw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340315537/reactions"
            },
            "updated_at": "2017-10-30T00:23:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340315537",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@bluz71 You can test denite.nvim instead.  It is optimized for neovim.  It also supports cpsm matcher.\r\n\r\n> If Vim 8 is super fast (with CtrlP + cpsm) and Neovim has latency issues then RPC/IPC is most likely the issue? or no? Replace remote Python with in-process Lua should result in parity?\r\n\r\nThe slowness is from RPC overhead.\r\nBecause Ctrlp is Vim script plugin.\r\nctrlp-cpsm-matcher is if_python based plugin.\r\nctrlp-cpsm-matcher calls Python heavyly.\r\n\r\nIn Vim8, if_python call has almost 0 overhead.\r\nBut in neovim, if_python call has RPC overhead.",
            "created_at": "2017-10-30T01:43:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340322464",
            "id": 340322464,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDMyMjQ2NA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340322464/reactions"
            },
            "updated_at": "2017-10-30T01:48:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340322464",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41495?v=4",
                "events_url": "https://api.github.com/users/Shougo/events{/privacy}",
                "followers_url": "https://api.github.com/users/Shougo/followers",
                "following_url": "https://api.github.com/users/Shougo/following{/other_user}",
                "gists_url": "https://api.github.com/users/Shougo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Shougo",
                "id": 41495,
                "login": "Shougo",
                "node_id": "MDQ6VXNlcjQxNDk1",
                "organizations_url": "https://api.github.com/users/Shougo/orgs",
                "received_events_url": "https://api.github.com/users/Shougo/received_events",
                "repos_url": "https://api.github.com/users/Shougo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Shougo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Shougo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Shougo"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "denite.nvim has not the issue.\r\nBecause denite.nvim is almost Python based plugin.\r\nRPC calls are very few.",
            "created_at": "2017-10-30T01:48:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340323085",
            "id": 340323085,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDMyMzA4NQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340323085/reactions"
            },
            "updated_at": "2017-10-30T01:48:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340323085",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41495?v=4",
                "events_url": "https://api.github.com/users/Shougo/events{/privacy}",
                "followers_url": "https://api.github.com/users/Shougo/followers",
                "following_url": "https://api.github.com/users/Shougo/following{/other_user}",
                "gists_url": "https://api.github.com/users/Shougo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Shougo",
                "id": 41495,
                "login": "Shougo",
                "node_id": "MDQ6VXNlcjQxNDk1",
                "organizations_url": "https://api.github.com/users/Shougo/orgs",
                "received_events_url": "https://api.github.com/users/Shougo/received_events",
                "repos_url": "https://api.github.com/users/Shougo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Shougo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Shougo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Shougo"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@ZyX-I,\r\n\r\nI did some digging using the *cpsm* matcher along with an alternate pure-Python matcher [ctrlp-py-matcher](https://github.com/FelikZ/ctrlp-py-matcher).\r\n\r\nThe pure Python matcher was easier to get a handle on.\r\n\r\nCtrlP matchers need to provide a VimL function of the form:\r\n\r\n```\r\nfunction! Function_Name(items, str, limit, mmode, ispath, crfile, regex)\r\na:items  : The full list of items to search in.\r\na:str    : The string entered by the user.\r\n...\r\nreturn list_of_matched_items\r\n```\r\n\r\nIt appears matches are already handled in bulk by the existing CtrlP API. The function returns a list of matched items given a set of *items* and *str*.\r\n\r\nThe realy latency killer in Neovim seems to by this single Python statement in a CtrlP matcher:\r\n\r\n```\r\nitems = vim.eval('a:items')\r\n```\r\n\r\n[This](https://github.com/FelikZ/ctrlp-py-matcher/blob/master/autoload/pymatcher.py) is an example of a Python CtrlP matcher using the `vim.eval` (line 7). Comment that out and Neovim CtrlP is fast like Vim 8. The *cpsm* matcher also has the same `vim.eval`.\r\n\r\nWhat is `vim.eval(\"a:items\")` doing in Neovim when given an array of items (let's say 60,000 items)?\r\n\r\nLastly the latency issue really manifests when holding down the backspace key. In CtrlP I'll do `jjjjjjjjjj` then I'll hold down `<backspace>` then do `jjjjjjjjjj` again and so on. Extremely unrealistic, but it highlights the latency slowdown. Vim 8 does not have the issue and Neovim will also not have any once `vim.eval('a:items')` is commented out.\r\n\r\nCan Pythonic `vim.eval(\"a:items\")` be made faster in Neovim than it currently is?\r\n\r\nInteresting. Not what I expected. ",
            "created_at": "2017-10-30T05:08:01Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340345118",
            "id": 340345118,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDM0NTExOA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340345118/reactions"
            },
            "updated_at": "2017-10-30T05:13:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340345118",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11382509?v=4",
                "events_url": "https://api.github.com/users/bluz71/events{/privacy}",
                "followers_url": "https://api.github.com/users/bluz71/followers",
                "following_url": "https://api.github.com/users/bluz71/following{/other_user}",
                "gists_url": "https://api.github.com/users/bluz71/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bluz71",
                "id": 11382509,
                "login": "bluz71",
                "node_id": "MDQ6VXNlcjExMzgyNTA5",
                "organizations_url": "https://api.github.com/users/bluz71/orgs",
                "received_events_url": "https://api.github.com/users/bluz71/received_events",
                "repos_url": "https://api.github.com/users/bluz71/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bluz71/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bluz71/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bluz71"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@bluz71 It is expected result.  `vim.eval()` is slow.  Especially the RPC data is huge.",
            "created_at": "2017-10-30T05:22:29Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340346679",
            "id": 340346679,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDM0NjY3OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340346679/reactions"
            },
            "updated_at": "2017-10-30T05:22:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340346679",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41495?v=4",
                "events_url": "https://api.github.com/users/Shougo/events{/privacy}",
                "followers_url": "https://api.github.com/users/Shougo/followers",
                "following_url": "https://api.github.com/users/Shougo/following{/other_user}",
                "gists_url": "https://api.github.com/users/Shougo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Shougo",
                "id": 41495,
                "login": "Shougo",
                "node_id": "MDQ6VXNlcjQxNDk1",
                "organizations_url": "https://api.github.com/users/Shougo/orgs",
                "received_events_url": "https://api.github.com/users/Shougo/received_events",
                "repos_url": "https://api.github.com/users/Shougo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Shougo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Shougo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Shougo"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@Shougo,\r\n\r\n`a:items` would have 60,000 strings (filename candidates) when using CtrlP on the Linux source tree.\r\n\r\nInteresting that Neovim `vim.eval('a:items')` should be so slow. Nothing can be done?\r\n\r\nAnyway, it seems that the CtrlP matchers are not doing the pathological case of populating the match list across a Python <-> VimL bridge one by one. Bulk processing appears to be happening. Rather it is the bulk action of getting the candidate list of possible filenames across the VimL <-> Python bridge that is a killer (maybe the killer here).",
            "created_at": "2017-10-30T05:32:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340347790",
            "id": 340347790,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDM0Nzc5MA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340347790/reactions"
            },
            "updated_at": "2017-10-30T05:32:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340347790",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11382509?v=4",
                "events_url": "https://api.github.com/users/bluz71/events{/privacy}",
                "followers_url": "https://api.github.com/users/bluz71/followers",
                "following_url": "https://api.github.com/users/bluz71/following{/other_user}",
                "gists_url": "https://api.github.com/users/bluz71/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bluz71",
                "id": 11382509,
                "login": "bluz71",
                "node_id": "MDQ6VXNlcjExMzgyNTA5",
                "organizations_url": "https://api.github.com/users/bluz71/orgs",
                "received_events_url": "https://api.github.com/users/bluz71/received_events",
                "repos_url": "https://api.github.com/users/bluz71/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bluz71/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bluz71/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bluz71"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Yes, Ctrlp-cpsm matcher implementation is not so bad.\r\n\r\n> Interesting that Neovim vim.eval('a:items') should be so slow. Nothing can be done?\r\n\r\nYes, nothing.  For Ctrlp, using if_lua is better than if_python in neovim.",
            "created_at": "2017-10-30T05:38:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340348436",
            "id": 340348436,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDM0ODQzNg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340348436/reactions"
            },
            "updated_at": "2017-10-30T05:38:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340348436",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41495?v=4",
                "events_url": "https://api.github.com/users/Shougo/events{/privacy}",
                "followers_url": "https://api.github.com/users/Shougo/followers",
                "following_url": "https://api.github.com/users/Shougo/following{/other_user}",
                "gists_url": "https://api.github.com/users/Shougo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Shougo",
                "id": 41495,
                "login": "Shougo",
                "node_id": "MDQ6VXNlcjQxNDk1",
                "organizations_url": "https://api.github.com/users/Shougo/orgs",
                "received_events_url": "https://api.github.com/users/Shougo/received_events",
                "repos_url": "https://api.github.com/users/Shougo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Shougo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Shougo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Shougo"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Let's see what @ZyX-I says, but I tend to agree with you that the Python-in-ctrlp-matchers needs to be replaced completely if `vim.eval('a:items')` can not be made fast in Neovim.\r\n\r\nAm I correct, Neovim 0.2.1 with in-built Lua runtime will be needed? Current stable Neovim 0.2.0 is not enough since in-process Lua does not yet exist?\r\n\r\nMaybe I should drop *cpsm* and use *ctrlp-py-matcher* in Vim 8 and fork py-matcher into *ctrl-lua-matcher* for Neovim? I wonder how hard it is to port Python code to Lua?",
            "created_at": "2017-10-30T05:49:34Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340349728",
            "id": 340349728,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDM0OTcyOA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340349728/reactions"
            },
            "updated_at": "2017-10-30T05:49:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340349728",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11382509?v=4",
                "events_url": "https://api.github.com/users/bluz71/events{/privacy}",
                "followers_url": "https://api.github.com/users/bluz71/followers",
                "following_url": "https://api.github.com/users/bluz71/following{/other_user}",
                "gists_url": "https://api.github.com/users/bluz71/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bluz71",
                "id": 11382509,
                "login": "bluz71",
                "node_id": "MDQ6VXNlcjExMzgyNTA5",
                "organizations_url": "https://api.github.com/users/bluz71/orgs",
                "received_events_url": "https://api.github.com/users/bluz71/received_events",
                "repos_url": "https://api.github.com/users/bluz71/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bluz71/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bluz71/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bluz71"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "One of the problems with specifically `vim.eval` is that in *Vim* `vim.eval` implementation has a bad habit of coercing numbers to strings. But when you use `nvim_eval()` API function numbers are returned as numbers! This means that Python API implementation needs to receive that long list and go recursively through its items to convert numbers to strings itself. If that is the issue (and not that you are hitting a throughput problem actually instead) it should be mitigated by using native `neovim` API, `neovim.attach(…).eval(…)` does not do such conversions.\r\n\r\nAdditionally note that there is a number of `vim.eval` calls there in sequence which really can be merged all together.",
            "created_at": "2017-10-30T06:58:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340358778",
            "id": 340358778,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDM1ODc3OA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340358778/reactions"
            },
            "updated_at": "2017-10-30T06:58:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340358778",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "In any case you need to check profiling results first before speculating on “why `vim.eval('a:items')` is slow”. There are other potential optimization routes as well: currently `msgpack_stream` is going to wait until full message is received, while it should be possible to start processing some things (lists for sure) before they were fully received. Though it would be harder to code obviously.",
            "created_at": "2017-10-30T07:01:15Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340359152",
            "id": 340359152,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDM1OTE1Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340359152/reactions"
            },
            "updated_at": "2017-10-30T07:06:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340359152",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "NONE",
            "body": "Is the python msgpack serialization written in python or C? If it's python, there's your bottleneck. Low-level serialization needs to be as fast as possible or it won't scale, and in python, that means calling out to a C implementation. If it is written in python, converting it to C will solve the problems in almost all plugins.\r\n\r\nAlso, it would be nice (but not absolutely necessary) of ctrl-p to have plugins cache their item list, so that it doesn't have to send the whole list of files with every command -- 90% of the time that list is't going to change.",
            "created_at": "2017-10-30T13:24:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340442211",
            "id": 340442211,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDQ0MjIxMQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340442211/reactions"
            },
            "updated_at": "2017-10-30T13:24:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340442211",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/87875?v=4",
                "events_url": "https://api.github.com/users/bluddy/events{/privacy}",
                "followers_url": "https://api.github.com/users/bluddy/followers",
                "following_url": "https://api.github.com/users/bluddy/following{/other_user}",
                "gists_url": "https://api.github.com/users/bluddy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bluddy",
                "id": 87875,
                "login": "bluddy",
                "node_id": "MDQ6VXNlcjg3ODc1",
                "organizations_url": "https://api.github.com/users/bluddy/orgs",
                "received_events_url": "https://api.github.com/users/bluddy/received_events",
                "repos_url": "https://api.github.com/users/bluddy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bluddy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bluddy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bluddy"
            }
        },
        {
            "author_association": "NONE",
            "body": "@bluddy I think the deserialization (we are pulling an item from vim to python through `vim.eval('a:items')`) happens in python-msgpack implementation, the neovim python client just calls `msgpack.Unpacker.feed(data)` to get the results. So if the (de)serialization is slow, it means the python implementation of msgpack is slow.",
            "created_at": "2017-10-30T14:33:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340462351",
            "id": 340462351,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDQ2MjM1MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340462351/reactions"
            },
            "updated_at": "2017-10-30T14:33:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340462351",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5502163?v=4",
                "events_url": "https://api.github.com/users/tcbbd/events{/privacy}",
                "followers_url": "https://api.github.com/users/tcbbd/followers",
                "following_url": "https://api.github.com/users/tcbbd/following{/other_user}",
                "gists_url": "https://api.github.com/users/tcbbd/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tcbbd",
                "id": 5502163,
                "login": "tcbbd",
                "node_id": "MDQ6VXNlcjU1MDIxNjM=",
                "organizations_url": "https://api.github.com/users/tcbbd/orgs",
                "received_events_url": "https://api.github.com/users/tcbbd/received_events",
                "repos_url": "https://api.github.com/users/tcbbd/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tcbbd/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tcbbd/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tcbbd"
            }
        },
        {
            "author_association": "NONE",
            "body": "@tcbbd python-msgpack looks like it uses some C, or at least some Cython, but it's possible that it's losing some performance by making a python call somewhere, or that the neovim-client does something that slows the process down. Since this is a critical path for neovim, it needs to be optimized as heavily as possible and benchmarked.\r\n\r\nIt's one thing to have serialization/deserialization and message passing. I don't think it's a big deal as far as human perception is concerned. It's another thing to ever perform some invisible action on that data with a slow dynamic language like python -- especially something that isn't of constant computational complexity.",
            "created_at": "2017-10-30T14:45:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340466280",
            "id": 340466280,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDQ2NjI4MA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340466280/reactions"
            },
            "updated_at": "2017-10-30T14:45:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340466280",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/87875?v=4",
                "events_url": "https://api.github.com/users/bluddy/events{/privacy}",
                "followers_url": "https://api.github.com/users/bluddy/followers",
                "following_url": "https://api.github.com/users/bluddy/following{/other_user}",
                "gists_url": "https://api.github.com/users/bluddy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bluddy",
                "id": 87875,
                "login": "bluddy",
                "node_id": "MDQ6VXNlcjg3ODc1",
                "organizations_url": "https://api.github.com/users/bluddy/orgs",
                "received_events_url": "https://api.github.com/users/bluddy/received_events",
                "repos_url": "https://api.github.com/users/bluddy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bluddy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bluddy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bluddy"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@bluddy Are you sure that list in question is not already cached, but on the CtrlP side? It does not need to regenerate a list to pass the same reference again and again after all.\r\n\r\nAlso I see that Python’s msgpack is C entirely, `msgpack/__init__.py` just imports Packer, unpack, unpackb and Unpacker from two .so libraries and calls them (unless it is not available or MSGPACK_PUREPYTHON environment variable was set in which case pure Python fallback is used). But `vim.eval` still has to traverse the resulting structure to convert integers, and that is pure Python.\r\n\r\nSome small benchmark regarding `LegacyVim.eval` vs `Nvim.eval`:\r\n\r\n```\r\nnvim -i NONE -u NONE -N --cmd 'command -nargs=1 TI let s=reltime() | execute <q-args> | echo reltimestr(reltime(s))' --cmd 'let longlist = map(range(100000), \"0.v:val\")' --cmd 'python import vim' --cmd 'TI python vim.eval(\"longlist\")' --cmd 'python from neovim import Nvim' --cmd 'TI python Nvim.eval(vim, \"longlist\")' --cmd cq\r\n  0.588690\r\n  0.378885\r\n```\r\n\r\n. The results are pretty consistent, and are worse (as expected) if I remove `0.` (i.e. do not stringify values first in order to make `LegacyVim.eval` stringify them):\r\n\r\n```\r\nnvim -i NONE -u NONE -N --cmd 'command -nargs=1 TI let s=reltime() | execute <q-args> | echo reltimestr(reltime(s))' --cmd 'let longlist = map(range(100000), \"v:val\")' --cmd 'python import vim' --cmd 'TI python vim.eval(\"longlist\")' --cmd 'python from neovim import Nvim' --cmd 'TI python Nvim.eval(vim, \"longlist\")' --cmd cq\r\n  0.459307\r\n  0.287371\r\n```\r\n\r\n: you see, LegacyVim.eval is 60% worse and basically the only difference is stringifying.\r\n\r\nNote though that `nvim` itself in this test is a debug build, but not any of the dependencies (`neovim` python module, msgpack library used by Neovim, msgpack dependency used by Python, …).",
            "created_at": "2017-10-30T21:23:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340588826",
            "id": 340588826,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDU4ODgyNg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340588826/reactions"
            },
            "updated_at": "2017-10-30T21:23:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340588826",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Though also note that 0.38 seconds for transferring 100 000 strings in a list with what is supposed to be almost pure C. Vim itself copes in 0.02 seconds with exactly the same code (minus commands starting from `python from neovim …` for obvious reasons).",
            "created_at": "2017-10-30T21:26:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340589642",
            "id": 340589642,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDU4OTY0Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340589642/reactions"
            },
            "updated_at": "2017-10-30T21:27:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340589642",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "FWIW with `import vim` the faster nvim eval can be accessed as `vim.api.eval` ",
            "created_at": "2017-10-30T21:30:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340590539",
            "id": 340590539,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDU5MDUzOQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340590539/reactions"
            },
            "updated_at": "2017-10-30T21:30:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340590539",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Release build shows mostly the same results: something like 0.42 vs 0.21, though results are less stable and I can’t say (no) pre-stringifying makes any difference. Now though it is not 60% worse, time was doubled.",
            "created_at": "2017-10-30T21:34:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340591709",
            "id": 340591709,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDU5MTcwOQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340591709/reactions"
            },
            "updated_at": "2017-10-30T21:34:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340591709",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@ZyX-I,\r\n\r\n> @bluddy Are you sure that list in question is not already cached, but on the CtrlP side? It does not need to regenerate a list to pass the same reference again and again after all.\r\n\r\nCtrlP does have file caching which you can enable or disable. However, with external matchers it appears to always send the full candidate file list whether regenerated (if CtrlP caching is off) or cached. Matchers themselves don't cache the file list.\r\n\r\nIn an ideal world I disable CtrlP caching since it causes problems with new files or deleted files. The cache list always ends up stale in my experience.",
            "created_at": "2017-10-30T22:03:33Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340598639",
            "id": 340598639,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDU5ODYzOQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340598639/reactions"
            },
            "updated_at": "2017-10-30T23:00:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340598639",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11382509?v=4",
                "events_url": "https://api.github.com/users/bluz71/events{/privacy}",
                "followers_url": "https://api.github.com/users/bluz71/followers",
                "following_url": "https://api.github.com/users/bluz71/following{/other_user}",
                "gists_url": "https://api.github.com/users/bluz71/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bluz71",
                "id": 11382509,
                "login": "bluz71",
                "node_id": "MDQ6VXNlcjExMzgyNTA5",
                "organizations_url": "https://api.github.com/users/bluz71/orgs",
                "received_events_url": "https://api.github.com/users/bluz71/received_events",
                "repos_url": "https://api.github.com/users/bluz71/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bluz71/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bluz71/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bluz71"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@ZyX-I,\r\n\r\nI would like to test `Nvim.eval` in the *cpsm* Python matcher code.\r\n\r\nCurrently the code is something like:\r\n\r\n```\r\nimport vim\r\nitems = vim.eval('a:items')\r\n```\r\n\r\nI converted it to (which does not work), what is my mistake?\r\n\r\n```\r\nimport Nvim\r\nitems = Nvim.eval(vim, \"a:items\")\r\n```\r\n",
            "created_at": "2017-10-30T22:14:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340601032",
            "id": 340601032,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDYwMTAzMg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340601032/reactions"
            },
            "updated_at": "2017-10-30T22:14:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340601032",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11382509?v=4",
                "events_url": "https://api.github.com/users/bluz71/events{/privacy}",
                "followers_url": "https://api.github.com/users/bluz71/followers",
                "following_url": "https://api.github.com/users/bluz71/following{/other_user}",
                "gists_url": "https://api.github.com/users/bluz71/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bluz71",
                "id": 11382509,
                "login": "bluz71",
                "node_id": "MDQ6VXNlcjExMzgyNTA5",
                "organizations_url": "https://api.github.com/users/bluz71/orgs",
                "received_events_url": "https://api.github.com/users/bluz71/received_events",
                "repos_url": "https://api.github.com/users/bluz71/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bluz71/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bluz71/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bluz71"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@ZyX-I,\r\n\r\nFixed it, I needed `from neovim import Nvim`.\r\n\r\nQuick results, `items = Nvim.eval(vim, \"a:items\")` is **MUCH** faster than `items = vim.eval('a:items')`.\r\n\r\nNot as fast as Vim 8 but a huge improvement. Your quick comparison above noted a 2 times speed improvement. Yes, it feels twice as fast.\r\n\r\nCurrently I have tested on my fast Linux box; I will now test on my slow Macbook and report back.",
            "created_at": "2017-10-30T22:23:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340602940",
            "id": 340602940,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDYwMjk0MA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340602940/reactions"
            },
            "updated_at": "2017-10-30T22:23:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340602940",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11382509?v=4",
                "events_url": "https://api.github.com/users/bluz71/events{/privacy}",
                "followers_url": "https://api.github.com/users/bluz71/followers",
                "following_url": "https://api.github.com/users/bluz71/following{/other_user}",
                "gists_url": "https://api.github.com/users/bluz71/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bluz71",
                "id": 11382509,
                "login": "bluz71",
                "node_id": "MDQ6VXNlcjExMzgyNTA5",
                "organizations_url": "https://api.github.com/users/bluz71/orgs",
                "received_events_url": "https://api.github.com/users/bluz71/received_events",
                "repos_url": "https://api.github.com/users/bluz71/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bluz71/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bluz71/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bluz71"
            }
        },
        {
            "author_association": "NONE",
            "body": "@ZyX-I, is the python iteration the thing that's dominating those 0.38 seconds? If so, is it possible to call out to C when iterating over those large data structures? I'd love to see the python backend compared to a pure C backend, to see how fast this can be made. Your (n)vim-foo is clearly (and unsurprisingly) far superior to mine.",
            "created_at": "2017-10-30T22:38:54Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340606005",
            "id": 340606005,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDYwNjAwNQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340606005/reactions"
            },
            "updated_at": "2017-10-30T22:38:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340606005",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/87875?v=4",
                "events_url": "https://api.github.com/users/bluddy/events{/privacy}",
                "followers_url": "https://api.github.com/users/bluddy/followers",
                "following_url": "https://api.github.com/users/bluddy/following{/other_user}",
                "gists_url": "https://api.github.com/users/bluddy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bluddy",
                "id": 87875,
                "login": "bluddy",
                "node_id": "MDQ6VXNlcjg3ODc1",
                "organizations_url": "https://api.github.com/users/bluddy/orgs",
                "received_events_url": "https://api.github.com/users/bluddy/received_events",
                "repos_url": "https://api.github.com/users/bluddy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bluddy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bluddy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bluddy"
            }
        },
        {
            "author_association": "NONE",
            "body": "@ZyX-I It looks like the `walk(num_to_str)` is what you were talking about, right? Can we comment it out and test performance?",
            "created_at": "2017-10-30T22:46:31Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340607563",
            "id": 340607563,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDYwNzU2Mw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340607563/reactions"
            },
            "updated_at": "2017-10-30T22:46:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340607563",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/87875?v=4",
                "events_url": "https://api.github.com/users/bluddy/events{/privacy}",
                "followers_url": "https://api.github.com/users/bluddy/followers",
                "following_url": "https://api.github.com/users/bluddy/following{/other_user}",
                "gists_url": "https://api.github.com/users/bluddy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bluddy",
                "id": 87875,
                "login": "bluddy",
                "node_id": "MDQ6VXNlcjg3ODc1",
                "organizations_url": "https://api.github.com/users/bluddy/orgs",
                "received_events_url": "https://api.github.com/users/bluddy/received_events",
                "repos_url": "https://api.github.com/users/bluddy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bluddy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bluddy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bluddy"
            }
        },
        {
            "author_association": "NONE",
            "body": "@ZyX-I Sorry I guess I misunderstood and you already did this, but is it possible to get the time without the conversion component? As if you were doing the conversion with pure C?",
            "created_at": "2017-10-30T22:50:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340608371",
            "id": 340608371,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDYwODM3MQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340608371/reactions"
            },
            "updated_at": "2017-10-30T22:50:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340608371",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/87875?v=4",
                "events_url": "https://api.github.com/users/bluddy/events{/privacy}",
                "followers_url": "https://api.github.com/users/bluddy/followers",
                "following_url": "https://api.github.com/users/bluddy/following{/other_user}",
                "gists_url": "https://api.github.com/users/bluddy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bluddy",
                "id": 87875,
                "login": "bluddy",
                "node_id": "MDQ6VXNlcjg3ODc1",
                "organizations_url": "https://api.github.com/users/bluddy/orgs",
                "received_events_url": "https://api.github.com/users/bluddy/received_events",
                "repos_url": "https://api.github.com/users/bluddy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bluddy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bluddy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bluddy"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Slow Macbook (Core-M processor) result when converting from `vim.eval('a:items')` to `Nvim.eval(vim, \"a:items\")` against 60,000 file Linux source tree (an extreme large tree).\r\n\r\nCtrlP + cpsm goes from unusable slow to usable slow. This is a big change. I would like more speed, but this is a massive change for the better.",
            "created_at": "2017-10-30T22:54:19Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340609082",
            "id": 340609082,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDYwOTA4Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340609082/reactions"
            },
            "updated_at": "2017-10-30T22:54:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340609082",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11382509?v=4",
                "events_url": "https://api.github.com/users/bluz71/events{/privacy}",
                "followers_url": "https://api.github.com/users/bluz71/followers",
                "following_url": "https://api.github.com/users/bluz71/following{/other_user}",
                "gists_url": "https://api.github.com/users/bluz71/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bluz71",
                "id": 11382509,
                "login": "bluz71",
                "node_id": "MDQ6VXNlcjExMzgyNTA5",
                "organizations_url": "https://api.github.com/users/bluz71/orgs",
                "received_events_url": "https://api.github.com/users/bluz71/received_events",
                "repos_url": "https://api.github.com/users/bluz71/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bluz71/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bluz71/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bluz71"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Question, how to use `vim.eval` and `Nvim.eval` in the same Python Vim module whilst being compatible with both Vim and Neovim?\r\n\r\nVim does not understand `Nvim.eval(vim, largeList)`, obviously.\r\n\r\nIdeally I would like something like:\r\n\r\n```\r\nif Neovim\r\n  from neovim import Nvim\r\n  items = Nvim.eval(vim, \"a:items\")\r\nelse\r\n  import vim\r\n  items = vim.eval('a:items')\r\nend\r\n```\r\n\r\nBut, the Python parser will still need to understand Nvim module which doesn't exist in Vim 8 land.  ",
            "created_at": "2017-10-30T22:58:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340609945",
            "id": 340609945,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDYwOTk0NQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340609945/reactions"
            },
            "updated_at": "2017-10-30T22:58:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340609945",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11382509?v=4",
                "events_url": "https://api.github.com/users/bluz71/events{/privacy}",
                "followers_url": "https://api.github.com/users/bluz71/followers",
                "following_url": "https://api.github.com/users/bluz71/following{/other_user}",
                "gists_url": "https://api.github.com/users/bluz71/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bluz71",
                "id": 11382509,
                "login": "bluz71",
                "node_id": "MDQ6VXNlcjExMzgyNTA5",
                "organizations_url": "https://api.github.com/users/bluz71/orgs",
                "received_events_url": "https://api.github.com/users/bluz71/received_events",
                "repos_url": "https://api.github.com/users/bluz71/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bluz71/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bluz71/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bluz71"
            }
        },
        {
            "author_association": "NONE",
            "body": "@bluz71 You can try importing neovim and catch the ImportError exception, at which point you'll know.",
            "created_at": "2017-10-30T23:22:52Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340614196",
            "id": 340614196,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDYxNDE5Ng==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340614196/reactions"
            },
            "updated_at": "2017-10-30T23:22:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340614196",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/87875?v=4",
                "events_url": "https://api.github.com/users/bluddy/events{/privacy}",
                "followers_url": "https://api.github.com/users/bluddy/followers",
                "following_url": "https://api.github.com/users/bluddy/following{/other_user}",
                "gists_url": "https://api.github.com/users/bluddy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bluddy",
                "id": 87875,
                "login": "bluddy",
                "node_id": "MDQ6VXNlcjg3ODc1",
                "organizations_url": "https://api.github.com/users/bluddy/orgs",
                "received_events_url": "https://api.github.com/users/bluddy/received_events",
                "repos_url": "https://api.github.com/users/bluddy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bluddy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bluddy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bluddy"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@bluz71\r\n\r\n```python\r\nfrom importlib import find_loader\r\n\r\nif find_loader('neovim'):\r\n  from neovim import Nvim\r\n  items = Nvim.eval(vim, \"a:items\")\r\nelse\r\n  import vim\r\n  items = vim.eval('a:items')\r\n```",
            "created_at": "2017-10-31T01:23:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340632059",
            "id": 340632059,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDYzMjA1OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340632059/reactions"
            },
            "updated_at": "2017-10-31T01:23:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340632059",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41495?v=4",
                "events_url": "https://api.github.com/users/Shougo/events{/privacy}",
                "followers_url": "https://api.github.com/users/Shougo/followers",
                "following_url": "https://api.github.com/users/Shougo/following{/other_user}",
                "gists_url": "https://api.github.com/users/Shougo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Shougo",
                "id": 41495,
                "login": "Shougo",
                "node_id": "MDQ6VXNlcjQxNDk1",
                "organizations_url": "https://api.github.com/users/Shougo/orgs",
                "received_events_url": "https://api.github.com/users/Shougo/received_events",
                "repos_url": "https://api.github.com/users/Shougo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Shougo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Shougo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Shougo"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I wonder how Vim plugin authors will react to PR contained `if neovim` paths such as noted by @Shougo's above?\r\n\r\nIt will lead to uglier code. Any ideas for more elegance?",
            "created_at": "2017-10-31T02:06:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340638139",
            "id": 340638139,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDYzODEzOQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340638139/reactions"
            },
            "updated_at": "2017-10-31T02:06:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340638139",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11382509?v=4",
                "events_url": "https://api.github.com/users/bluz71/events{/privacy}",
                "followers_url": "https://api.github.com/users/bluz71/followers",
                "following_url": "https://api.github.com/users/bluz71/following{/other_user}",
                "gists_url": "https://api.github.com/users/bluz71/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bluz71",
                "id": 11382509,
                "login": "bluz71",
                "node_id": "MDQ6VXNlcjExMzgyNTA5",
                "organizations_url": "https://api.github.com/users/bluz71/orgs",
                "received_events_url": "https://api.github.com/users/bluz71/received_events",
                "repos_url": "https://api.github.com/users/bluz71/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bluz71/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bluz71/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bluz71"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "You could do something like this:\r\n\r\n```python\r\n# File: $ROOT/plugin_repo/vim_eval.py\r\n\r\nfrom importlib import find_loader\r\n\r\nif find_loader('neovim'):\r\n  from neovim import Nvim\r\n  vim_eval = Nvim.eval\r\nelse\r\n  import vim\r\n  vim_eval = vim.eval\r\n\r\n```\r\n\r\nThen in some other file you could do:\r\n\r\n```python\r\nfrom plugin_repo.vim_eval import vim_eval\r\n\r\n# now just use it below\r\n```\r\n\r\nYou could also try giving the `neovim` or `vim` object another attribute and have that be inside of the new attribute.",
            "created_at": "2017-10-31T02:24:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340640801",
            "id": 340640801,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDY0MDgwMQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340640801/reactions"
            },
            "updated_at": "2017-10-31T02:24:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340640801",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4466899?v=4",
                "events_url": "https://api.github.com/users/tjdevries/events{/privacy}",
                "followers_url": "https://api.github.com/users/tjdevries/followers",
                "following_url": "https://api.github.com/users/tjdevries/following{/other_user}",
                "gists_url": "https://api.github.com/users/tjdevries/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tjdevries",
                "id": 4466899,
                "login": "tjdevries",
                "node_id": "MDQ6VXNlcjQ0NjY4OTk=",
                "organizations_url": "https://api.github.com/users/tjdevries/orgs",
                "received_events_url": "https://api.github.com/users/tjdevries/received_events",
                "repos_url": "https://api.github.com/users/tjdevries/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tjdevries/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tjdevries/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tjdevries"
            }
        },
        {
            "author_association": "NONE",
            "body": "Python 2.7's importlib doesn't have (or at least isn't documented as having) find_loader. Checking for ImportError is insufficient because the neovim module is available outside of Neovim:\r\n\r\n```\r\n$ python3\r\nPython 3.5.2 (default, Sep 14 2017, 22:51:06) \r\n[GCC 5.4.0 20160609] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import neovim\r\n>>>\r\n```\r\n\r\nHowever, vim.eval(\"has('nvim')\") works fine. I've pushed an update to cpsm.",
            "created_at": "2017-10-31T03:48:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340651944",
            "id": 340651944,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDY1MTk0NA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340651944/reactions"
            },
            "updated_at": "2017-10-31T03:48:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340651944",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1673371?v=4",
                "events_url": "https://api.github.com/users/nixprime/events{/privacy}",
                "followers_url": "https://api.github.com/users/nixprime/followers",
                "following_url": "https://api.github.com/users/nixprime/following{/other_user}",
                "gists_url": "https://api.github.com/users/nixprime/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nixprime",
                "id": 1673371,
                "login": "nixprime",
                "node_id": "MDQ6VXNlcjE2NzMzNzE=",
                "organizations_url": "https://api.github.com/users/nixprime/orgs",
                "received_events_url": "https://api.github.com/users/nixprime/received_events",
                "repos_url": "https://api.github.com/users/nixprime/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nixprime/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nixprime/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nixprime"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Wow, @nixprime has been keeping an eye on this epic discussion.\r\n\r\nMany thanks @nixprime! *cpsm* is a great plugin, I blogged about it [recently](https://bluz71.github.io/2017/10/26/turbocharge-the-ctrlp-vim-plugin.html). Hopefully a few more folks are now using this excellent plugin.\r\n\r\nI'll update *cpsm* and test out your update.",
            "created_at": "2017-10-31T03:53:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340652605",
            "id": 340652605,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDY1MjYwNQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340652605/reactions"
            },
            "updated_at": "2017-10-31T03:53:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340652605",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11382509?v=4",
                "events_url": "https://api.github.com/users/bluz71/events{/privacy}",
                "followers_url": "https://api.github.com/users/bluz71/followers",
                "following_url": "https://api.github.com/users/bluz71/following{/other_user}",
                "gists_url": "https://api.github.com/users/bluz71/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bluz71",
                "id": 11382509,
                "login": "bluz71",
                "node_id": "MDQ6VXNlcjExMzgyNTA5",
                "organizations_url": "https://api.github.com/users/bluz71/orgs",
                "received_events_url": "https://api.github.com/users/bluz71/received_events",
                "repos_url": "https://api.github.com/users/bluz71/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bluz71/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bluz71/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bluz71"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@nixprime, very good. Not Vim 8 fast, due to Neovim architecture, but a massive improvement when doing *CtrlP* in a huge source tree as compared to before. Huge thanks.\r\n\r\nAbout twice as fast as before feels about right, still a bit laggy with huge trees, but now **much** more usable. The numbers provided by @ZyX-I [here](https://github.com/neovim/neovim/issues/7063#issuecomment-340588826) seem spot on.",
            "created_at": "2017-10-31T04:38:31Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340657867",
            "id": 340657867,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDY1Nzg2Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340657867/reactions"
            },
            "updated_at": "2017-10-31T04:38:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340657867",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11382509?v=4",
                "events_url": "https://api.github.com/users/bluz71/events{/privacy}",
                "followers_url": "https://api.github.com/users/bluz71/followers",
                "following_url": "https://api.github.com/users/bluz71/following{/other_user}",
                "gists_url": "https://api.github.com/users/bluz71/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bluz71",
                "id": 11382509,
                "login": "bluz71",
                "node_id": "MDQ6VXNlcjExMzgyNTA5",
                "organizations_url": "https://api.github.com/users/bluz71/orgs",
                "received_events_url": "https://api.github.com/users/bluz71/received_events",
                "repos_url": "https://api.github.com/users/bluz71/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bluz71/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bluz71/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bluz71"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@nixprime @bfredl has already pointed out an existence of `vim.api` which I did not know about. So just stop using `Nvim` class, calling a method from the other class with its descendant as `self` is not a thing you must ever do “in production”, or is guaranteed to work; I used it as a quick hack to test things.",
            "created_at": "2017-10-31T07:36:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340683407",
            "id": 340683407,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDY4MzQwNw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340683407/reactions"
            },
            "updated_at": "2017-10-31T07:39:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340683407",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Also Vim does not have `vim.api`, so you may check for AttributeError.",
            "created_at": "2017-10-31T07:36:34Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340683483",
            "id": 340683483,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDY4MzQ4Mw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340683483/reactions"
            },
            "updated_at": "2017-10-31T07:36:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340683483",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yes, the canonical check would be\r\n```\r\nimport vim\r\ntry:\r\n    vim_eval = vim.api.eval\r\nexcept AttributeError:\r\n    vim_eval = vim.eval\r\n```",
            "created_at": "2017-10-31T08:17:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340690803",
            "id": 340690803,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDY5MDgwMw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340690803/reactions"
            },
            "updated_at": "2017-10-31T08:17:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340690803",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "NONE",
            "body": "Where is vim.api documented? I don't see it in Neovim's if_pyth.txt.",
            "created_at": "2017-11-01T00:28:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-340945297",
            "id": 340945297,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDk0NTI5Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340945297/reactions"
            },
            "updated_at": "2020-02-12T19:43:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/340945297",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1673371?v=4",
                "events_url": "https://api.github.com/users/nixprime/events{/privacy}",
                "followers_url": "https://api.github.com/users/nixprime/followers",
                "following_url": "https://api.github.com/users/nixprime/following{/other_user}",
                "gists_url": "https://api.github.com/users/nixprime/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nixprime",
                "id": 1673371,
                "login": "nixprime",
                "node_id": "MDQ6VXNlcjE2NzMzNzE=",
                "organizations_url": "https://api.github.com/users/nixprime/orgs",
                "received_events_url": "https://api.github.com/users/nixprime/received_events",
                "repos_url": "https://api.github.com/users/nixprime/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nixprime/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nixprime/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nixprime"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@nixprime The Nvim API is documented at `:help api`. The python-client `vim.api` is just a wrapper around that.",
            "created_at": "2017-11-01T09:18:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-341048009",
            "id": 341048009,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MTA0ODAwOQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/341048009/reactions"
            },
            "updated_at": "2017-11-01T09:18:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/341048009",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "It maybe still should be mentioned in if_pyth.txt, not everyone reads python-client readme and we should make it more easy to discover.",
            "created_at": "2017-11-01T09:39:11Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-341053831",
            "id": 341053831,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM0MTA1MzgzMQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/341053831/reactions"
            },
            "updated_at": "2017-11-01T09:39:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/341053831",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "NONE",
            "body": "Just wanted to chime in that I'm also experiencing a lag (about 1 to 2 seconds) when loading a file for the first time. Here is an excerpt from a profile I captured:\r\n\r\n```\r\nFUNCTIONS SORTED ON SELF TIME\r\ncount  total (s)   self (s)  function\r\n    1   1.100826   0.612652  <SNR>53_InitializePythonBuiltin()\r\n    1   0.599849   0.599533  provider#pythonx#Require()\r\n    1              0.487010  <SNR>98_check_interpreter()\r\n    2   0.614059   0.014168  provider#python#Call()\r\n    3   0.007806   0.007125  <SNR>11_LoadFTPlugin()\r\n    1   1.126939   0.004908  <SNR>88_open_selected()\r\n    3   0.010472   0.002834  <SNR>14_SynSet()\r\n    1   0.002909   0.002001  <SNR>53_UseConfigFiles_Python_Builtin()\r\n    1   0.001599   0.001583  <SNR>53_FindPythonFiles()\r\n    4   0.001606   0.001579  <SNR>88_globlist()\r\n    3   0.001547   0.001323  <SNR>12_LoadIndent()\r\n    3   0.004870   0.000809  fugitive#detect()\r\n    3              0.000694  <SNR>60_define_commands()\r\n    1   0.000908   0.000622  <SNR>53_ApplyConfig()\r\n    2   0.002105   0.000499  <SNR>88_list_dir()\r\n   18   0.000705   0.000445  <SNR>60_buffer_spec()\r\n    5              0.000444  <SNR>73_Highlight_Matching_Pair()\r\n    2   0.000771   0.000419  fugitive#extract_git_dir()\r\n    2   0.024237   0.000328  <SNR>88_open_dir()\r\n    3   0.000614   0.000305  <SNR>60_buffer_type()\r\n```\r\n\r\nAs you can see, the issue is Python-related. I disabled plugins until I found the offending plugin: [editorconfig-vim](https://github.com/editorconfig/editorconfig-vim). It uses Python. I replaced the plugin with [editorconfig-vim](https://github.com/sgur/vim-editorconfig), a variant that does not use Python (vimscript only) which resulted in the lag being removed when loading that first file. Still, I'd rather use the first plugin since it is the official one from the maintainers of editorconfig.\r\n\r\n_(Apologies if this isn't strictly related. I can move to a separate issue if that is the case)._ ",
            "created_at": "2018-05-03T19:42:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-386413111",
            "id": 386413111,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjQxMzExMQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/386413111/reactions"
            },
            "updated_at": "2020-02-12T19:43:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/386413111",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4657140?v=4",
                "events_url": "https://api.github.com/users/Asheq/events{/privacy}",
                "followers_url": "https://api.github.com/users/Asheq/followers",
                "following_url": "https://api.github.com/users/Asheq/following{/other_user}",
                "gists_url": "https://api.github.com/users/Asheq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Asheq",
                "id": 4657140,
                "login": "Asheq",
                "node_id": "MDQ6VXNlcjQ2NTcxNDA=",
                "organizations_url": "https://api.github.com/users/Asheq/orgs",
                "received_events_url": "https://api.github.com/users/Asheq/received_events",
                "repos_url": "https://api.github.com/users/Asheq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Asheq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Asheq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Asheq"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@Asheq Your scenario is more likely related to _finding_ the Python interpreter to use, rather than the performance of the plugin itself -- `:help g:python_host_prog`.",
            "created_at": "2018-05-03T19:52:15Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-386415880",
            "id": 386415880,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjQxNTg4MA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/386415880/reactions"
            },
            "updated_at": "2018-05-03T19:52:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/386415880",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/112971?v=4",
                "events_url": "https://api.github.com/users/jamessan/events{/privacy}",
                "followers_url": "https://api.github.com/users/jamessan/followers",
                "following_url": "https://api.github.com/users/jamessan/following{/other_user}",
                "gists_url": "https://api.github.com/users/jamessan/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jamessan",
                "id": 112971,
                "login": "jamessan",
                "node_id": "MDQ6VXNlcjExMjk3MQ==",
                "organizations_url": "https://api.github.com/users/jamessan/orgs",
                "received_events_url": "https://api.github.com/users/jamessan/received_events",
                "repos_url": "https://api.github.com/users/jamessan/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jamessan/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jamessan/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jamessan"
            }
        },
        {
            "author_association": "NONE",
            "body": "I'm having a similar performance [issue with my plugin Cyfolds](https://github.com/abarker/cyfolds/issues/1) which computes Vim folds for Python (and is written in Python/Cython).  On Vim the code is quite fast, as most of the calculations are done in Cython in one pass.  The computed values are cached so the Vim buffer is accessed only once per fold update.  On Neovim the performance is relatively slow.\r\n\r\nI rewrote the code to use the `vim.api.eval` method described in earlier comments, but that doesn't seem to make an appreciable difference.  Here is the code segment:\r\n```\r\ntry: # See if in Neovim.\r\n    vim_eval = vim.api.eval\r\n    vim_command = vim.api.command\r\n    def get_current_buf():\r\n        return vim.api.get_current_buf()\r\nexcept AttributeError: # No, in regular Vim.\r\n    vim_eval = vim.eval\r\n    vim_command = vim.command\r\n    def get_current_buf():\r\n        return vim.current.buffer\r\n```\r\n\r\n* `nvim --version`: NVIM v0.2.2\r\n* Vim version: VIM - Vi IMproved 8.0\r\n* Operating system/version: Ubuntu 18.04\r\n* Terminal name/version: Gnome Terminal\r\n\r\nThese are the top few numbers I'm getting from opening a file of ~1600 lines in Vim/Neovim.  The function `GetPythonFoldViaCython()` is just calling `python3 call_get_foldlevel()` and returning a value which was set as a global variable in `call_get_foldlevel()`.\r\n\r\n*nvim results:*\r\n```\r\nFUNCTIONS SORTED ON TOTAL TIME\r\ncount  total (s)   self (s)  function\r\n 1643   1.649298             provider#python3#Call()\r\n 1628   1.480020             GetPythonFoldViaCython()\r\n    1   0.103830   0.022131  <SNR>54_OnFileTypeSet()\r\n    1   0.044677   0.003110  <SNR>7_LoadFTPlugin()\r\n    1   0.028734             UltiSnips#SnippetsInCurrentScope()\r\n```\r\n\r\n*vim results:*\r\n```\r\nFUNCTIONS SORTED ON TOTAL TIME\r\ncount  total (s)   self (s)  function\r\n    1   0.089110   0.010934  <SNR>51_OnFileTypeSet()\r\n 1628   0.077059             GetPythonFoldViaCython()\r\n    1   0.069215   0.033286  <SNR>12_LoadFTPlugin()\r\n    1   0.025583             UltiSnips#SnippetsInCurrentScope()\r\n    1   0.011860             pymode#breakpoint#init()\r\n```\r\n\r\nI'm not really familiar with the Neovim plugin API, so any suggestions would be appreciated.",
            "created_at": "2020-02-11T09:08:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-584536365",
            "id": 584536365,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU4NDUzNjM2NQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/584536365/reactions"
            },
            "updated_at": "2020-02-11T09:08:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/584536365",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1791335?v=4",
                "events_url": "https://api.github.com/users/abarker/events{/privacy}",
                "followers_url": "https://api.github.com/users/abarker/followers",
                "following_url": "https://api.github.com/users/abarker/following{/other_user}",
                "gists_url": "https://api.github.com/users/abarker/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/abarker",
                "id": 1791335,
                "login": "abarker",
                "node_id": "MDQ6VXNlcjE3OTEzMzU=",
                "organizations_url": "https://api.github.com/users/abarker/orgs",
                "received_events_url": "https://api.github.com/users/abarker/received_events",
                "repos_url": "https://api.github.com/users/abarker/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/abarker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/abarker/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/abarker"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> On Vim the code is quite fast, as most of the calculations are done in Cython in one pass\r\n\r\nBut if you're setting the function as 'foldexpr' then that doesn't mean much because it gets called in proportion to the number of lines in the buffer. And your profile results make that clear, it's called 1628 times which results in 1628 RPC calls. \r\n\r\n> ... `:python3 call_get_foldlevel()`\r\n\r\nEach `:python3` invocation calls `provider#python3#Call()` which performs RPC to the python process.\r\n\r\nIf you want to use python and still have it be fast, you would need to do calculations python-side then send the results as a batch, and keep the batched results Vimscript-side, so that `GetPythonFoldViaCython()` only consults the batch, and does not keep calling python.\r\n\r\nMeanwhile, LuaJit is faster that cython, and Vim9 is deprecating `if_pyth` ...",
            "created_at": "2020-02-12T07:08:39Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-585062873",
            "id": 585062873,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU4NTA2Mjg3Mw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/585062873/reactions"
            },
            "updated_at": "2020-02-12T07:09:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/585062873",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Meanwhile, LuaJit is faster that cython, and Vim9 is deprecating `if_pyth` ...\r\n\r\nThis sentence is especially important. Python-based plugins will likely incur the same RPC slowness in Vim 9; python interface will be phased out replaced by JSON-based RPC (which sounds similar to how Neovim does things). The Python free lunch will end at some point.",
            "created_at": "2020-02-12T07:45:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-585074763",
            "id": 585074763,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU4NTA3NDc2Mw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/585074763/reactions"
            },
            "updated_at": "2020-02-12T07:45:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/585074763",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11382509?v=4",
                "events_url": "https://api.github.com/users/bluz71/events{/privacy}",
                "followers_url": "https://api.github.com/users/bluz71/followers",
                "following_url": "https://api.github.com/users/bluz71/following{/other_user}",
                "gists_url": "https://api.github.com/users/bluz71/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bluz71",
                "id": 11382509,
                "login": "bluz71",
                "node_id": "MDQ6VXNlcjExMzgyNTA5",
                "organizations_url": "https://api.github.com/users/bluz71/orgs",
                "received_events_url": "https://api.github.com/users/bluz71/received_events",
                "repos_url": "https://api.github.com/users/bluz71/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bluz71/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bluz71/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bluz71"
            }
        },
        {
            "author_association": "NONE",
            "body": "@justinmk Thanks for the help.  I didn't know that the `python3` calls would incur so much overhead just to pass a few characters back from a Python array.  It was an easy enough change in `GetPythonFoldViaCython` to only call  `call_get_foldlevel()` on the first line and set the values in a Vimscript array to return for later lines.  \r\n\r\nI'm now getting numbers like this:\r\n```\r\nFUNCTIONS SORTED ON TOTAL TIME\r\ncount  total (s)   self (s)  function\r\n   16   0.460993             provider#python3#Call()\r\n 1628   0.249488             GetPythonFoldViaCython()\r\n    1   0.120687   0.024079  <SNR>54_OnFileTypeSet()\r\n    1   0.037353   0.001752  <SNR>7_LoadFTPlugin()\r\n    1   0.033571             UltiSnips#SnippetsInCurrentScope()\r\n```\r\nDefinitely an improvement.  Not Vim 8 fast, but it should be usable.  Even the Vim 8 code runs a little faster now.",
            "created_at": "2020-02-12T14:43:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-585238375",
            "id": 585238375,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU4NTIzODM3NQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/585238375/reactions"
            },
            "updated_at": "2020-02-12T14:43:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/585238375",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1791335?v=4",
                "events_url": "https://api.github.com/users/abarker/events{/privacy}",
                "followers_url": "https://api.github.com/users/abarker/followers",
                "following_url": "https://api.github.com/users/abarker/following{/other_user}",
                "gists_url": "https://api.github.com/users/abarker/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/abarker",
                "id": 1791335,
                "login": "abarker",
                "node_id": "MDQ6VXNlcjE3OTEzMzU=",
                "organizations_url": "https://api.github.com/users/abarker/orgs",
                "received_events_url": "https://api.github.com/users/abarker/received_events",
                "repos_url": "https://api.github.com/users/abarker/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/abarker/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/abarker/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/abarker"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@abarker Nice! I'm going to lock this thread so that your case study does not get lost in further comments, since it is a perfect illustration of what is discussed here.",
            "created_at": "2020-02-12T19:42:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-585382496",
            "id": 585382496,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU4NTM4MjQ5Ng==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/585382496/reactions"
            },
            "updated_at": "2020-02-12T19:42:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/585382496",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "This is a known limitation of the Nvim RPC implementation of the Vim legacy `if_py` interface.\r\n\r\nLegacy `if_py` plugins are uncommon now, and going forward the positioning for Nvim is:\r\n\r\n- use in-process Lua code for performance-sensitive code\r\n- use remote plugins (coprocesses) for integrating with node/python/etc. https://github.com/neovim/neovim/issues/27949\r\n- the legacy `if_py` / `if_ruby`/ etc interfaces will continue to be supported, with the known performance limitation described in this issue.",
            "created_at": "2024-09-30T09:45:34Z",
            "html_url": "https://github.com/neovim/neovim/issues/7063#issuecomment-2382641641",
            "id": 2382641641,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/7063",
            "node_id": "IC_kwDOAPphoM6OBDnp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2382641641/reactions"
            },
            "updated_at": "2024-09-30T09:46:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2382641641",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comments": 83,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/7063/comments",
    "created_at": "2017-07-23T23:09:45Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/7063/events",
    "html_url": "https://github.com/neovim/neovim/issues/7063",
    "id": 244943014,
    "labels": [
        {
            "color": "FEF2C0",
            "default": false,
            "description": "performance, latency, cpu/memory usage",
            "id": 101930601,
            "name": "performance",
            "node_id": "MDU6TGFiZWwxMDE5MzA2MDE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/performance"
        },
        {
            "color": "c7def8",
            "default": false,
            "description": "",
            "id": 109899557,
            "name": "vimscript",
            "node_id": "MDU6TGFiZWwxMDk4OTk1NTc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/vimscript"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 144672485,
            "name": "provider",
            "node_id": "MDU6TGFiZWwxNDQ2NzI0ODU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/provider"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/7063/labels{/name}",
    "locked": true,
    "milestone": {
        "closed_at": null,
        "closed_issues": 244,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 261,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2024-09-30T17:06:40Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "MDU6SXNzdWUyNDQ5NDMwMTQ=",
    "number": 7063,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 5,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 5,
        "url": "https://api.github.com/repos/neovim/neovim/issues/7063/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "not_planned",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/7063/timeline",
    "title": "legacy python provider is slow",
    "updated_at": "2024-09-30T09:46:35Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/7063",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/5502163?v=4",
        "events_url": "https://api.github.com/users/tcbbd/events{/privacy}",
        "followers_url": "https://api.github.com/users/tcbbd/followers",
        "following_url": "https://api.github.com/users/tcbbd/following{/other_user}",
        "gists_url": "https://api.github.com/users/tcbbd/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/tcbbd",
        "id": 5502163,
        "login": "tcbbd",
        "node_id": "MDQ6VXNlcjU1MDIxNjM=",
        "organizations_url": "https://api.github.com/users/tcbbd/orgs",
        "received_events_url": "https://api.github.com/users/tcbbd/received_events",
        "repos_url": "https://api.github.com/users/tcbbd/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/tcbbd/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tcbbd/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/tcbbd"
    }
}