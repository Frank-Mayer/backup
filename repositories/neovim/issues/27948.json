{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\nHello.\r\n\r\nWhen mentioning whitespace in my text, I am referring to either the space character (` `), a tab (`\\t`) or an empty line (`\\n`).\r\n\r\nThis idea is inspired by the JetBrains editors. Whenever you press backspace, one of many actions can happen to whitespaces:\r\n\r\n1. If the cursor is on a whitespace character, despite what's behind the cursor, and the previous line is whitespace, the previous one is simply deleted.\r\n\r\n2. If the cursor is on a whitespace character, despite what's behind the cursor, and the previous line is not whitespace, the cursor get's placed at the end of the previous line. Whitespaces inbetween get deleted.\r\n\r\nThese two examples set good grounds for my proposition - implementing an option that enables similar, or even \"better\" behavior.\r\n\r\nFirst off, I thought that this would be a great idea for a plugin, until the moment I thought about proposing it to the core team, which I think would agree this is a great addition to nvim, or at least as a toggle option. \r\n\r\nTo explain my approach, I have written a simple Lua script that demonstrates how this could be implemented. Due to my very limited experience with neovim plugins and the API commands, I have commented out some of the intended behavior:\r\n\r\n```lua\r\n-- get current buffer as string\r\n-- local buff_no = vim.api.nvim_get_current_buf()\r\n-- local content = vim.api.nvim_buf_get_lines(buff_no, 0, -1, false)\r\n\r\n-- get current cursor position\r\n-- local win = vim.api.nvim_get_current_win()\r\n-- local position = vim.api.nvim_win_get_cursor(win)\r\n\r\nlocal function is_whiteline(line)\r\n\tif line == '' then\r\n\t\treturn true\r\n\tend\r\n\r\n\tfor i = 1, #line do\r\n\t\tlocal char = line:sub(i, i)\r\n\t\tif char ~= ' ' and char ~= '\\t' then\r\n\t\t\treturn false\r\n\t\tend\r\n\tend\r\n\r\n\treturn true\r\nend\r\n\r\nlocal function remove_prefix_whitelines(line)\r\n\tlocal start_index = 1\r\n\r\n\tfor i = 1, #line do\r\n\t\tlocal char = line:sub(i, i)\r\n\t\tif char ~= ' ' and char ~= '\\t' then\r\n\t\t\tstart_index = i\r\n\t\t\tbreak\r\n\t\tend\r\n\tend\r\n\r\n\treturn line:sub(start_index)\r\nend\r\n\r\nlocal whole_buffer = true\r\nlocal position = {}\r\n\r\nlocal content = {\r\n\t'#include <stdio.h>',\r\n\t'#include <stdlib.h>',\r\n\t'',\r\n\t'int main(int argc, char* argv[]) {',\r\n\t'\\tint x = 1;',\r\n\t'',\r\n\t'\\treturn EXIT_SUCCESS;',\r\n\t'',\r\n\t'',\r\n\t'',\r\n\t'',\r\n\t'',\r\n\t'',\r\n\t'',\r\n\t'',\r\n\t'',\r\n\t'\\t\\t  \\t    \\t',\r\n\t'',\r\n\t'',\r\n\t'',\r\n\t'',\r\n\t'',\r\n\t'',\r\n\t'\\t\\t}',\r\n}\r\n\r\nif whole_buffer then\r\n\tposition = {\r\n\t\trow = #content,\r\n\t\tcol = #content[#content],\r\n\t}\r\nelse\r\n\tposition = {\r\n\t\trow = 13, -- random\r\n\t\tcol = 1,  -- random\r\n\t}\r\nend\r\n\r\nlocal new_buffer = {}\r\n\r\nfor row_no = position['row'], 2, -1 do\r\n\tlocal curr_line = content[row_no]\r\n\tlocal prev_line = content[row_no - 1]\r\n\r\n\tif not is_whiteline(curr_line) and not is_whiteline(prev_line) then\r\n\t\tcurr_line = remove_prefix_whitelines(curr_line)\r\n\t\tlocal new_line = prev_line .. curr_line\r\n\t\ttable.insert(new_buffer, new_line)\r\n\t\tbreak\r\n\tend\r\n\r\n\tif not is_whiteline(curr_line) then\r\n\t\ttable.insert(new_buffer, curr_line)\r\n\tend\r\n\r\n\tif not is_whiteline(prev_line) then\r\n\t\tif #new_buffer == 0 then\r\n\t\t\ttable.insert(new_buffer, prev_line)\r\n\t\telse\r\n\t\t\ttable.insert(new_buffer, #new_buffer, prev_line)\r\n\t\tend\r\n\t\tbreak\r\n\tend\r\nend\r\n\r\n-- TODO: variables that keep track of start and end lines affected \r\n\r\n-- print new buffer content, debug purposes\r\nfor i = 1, #new_buffer do\r\n\tprint(new_buffer[i])\r\nend\r\n\r\n-- replace buffer content from start_no to end_no\r\n-- vim.api.nvim_buf_set_lines(...)\r\n```\r\n\r\nExpected behavior is explained below. Most of the points have been implemented in the lua code above.\r\n\r\n__DISCLAIMER__: This is my first time proposing an idea in such a serious project. I have zero experience with the neovim code base, and very little experience writing neovim plugins. Help will be needed if this idea gains attention.\n\n### Expected behavior\n\n# EXPLANATION\r\n\r\n- `|` indicates the current position of the cursor\r\n- `.` indicates an empty line\r\n\r\n# 1. Current line has a character, no prefix, empty lines before it\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n.\r\nint main(int argc, char *argv[]) {\r\n    int x = 1;\r\n.\r\n    return EXIT_SUCCESS;\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n|}\r\n.\r\nint function() {\r\n    printf(\"\\n\");\r\n}\r\n```\r\n\r\nafter pressing backspace in insert mode or X in normal mode\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n.\r\nint main(int argc, char *argv[]) {\r\n    int x = 1;\r\n.\r\n    return EXIT_SUCCESS;\r\n|}\r\n.\r\nint function() {\r\n    printf(\"\\n\");\r\n}\r\n```\r\n\r\n# 2. Current line has a character, no prefix, non-empty line before it\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n.\r\nint main(int argc, char *argv[]) {\r\n    int x = 1;\r\n.\r\n    return EXIT_SUCCESS;\r\n|}\r\n\r\n```\r\n\r\nafter pressing backspace in insert mode or X in normal mode\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n.\r\nint main(int argc, char *argv[]) {\r\n    int x = 1;\r\n.\r\n    return EXIT_SUCCESS;|}\r\n.\r\nint function() {\r\n    printf(\"\\n\");\r\n}\r\n```\r\n\r\n# 3. Current line has a character, whitespace prefix, empty lines before it\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n.\r\nint main(int argc, char *argv[]) {\r\n    int x = 1;\r\n.\r\n    return EXIT_SUCCESS;\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n      |} // this line has a tab and 2 spaces in front of the brace\r\n.\r\nint function() {\r\n    printf(\"\\n\");\r\n}\r\n```\r\n\r\nafter pressing backspace in insert mode or X in normal mode\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n.\r\nint main(int argc, char *argv[]) {\r\n    int x = 1;\r\n.\r\n    return EXIT_SUCCESS;\r\n      |}  // this line still has a tab and 2 spaces in front of the brace\r\n.\r\nint function() {\r\n    printf(\"\\n\");\r\n}\r\n```\r\n\r\n# 4. Current line has a character, whitespace prefix, non-empty line before it\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n.\r\nint main(int argc, char *argv[]) {\r\n    int x = 1;\r\n.\r\n    return EXIT_SUCCESS;\r\n      |} // this line has a tab and two spaces in front of the brace\r\n.\r\nint function() {\r\n    printf(\"\\n\");\r\n}\r\n```\r\n\r\nafter pressing backspace in insert mode or X in normal mode\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n.\r\nint main(int argc, char *argv[]) {\r\n    int x = 1;\r\n.\r\n    return EXIT_SUCCESS;\r\n|}\r\n.\r\nint function() {\r\n    printf(\"\\n\");\r\n}\r\n```\r\n\r\n# 5. Current line does not have a character, prefix does not matter, empty lines before do not matter\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n.\r\nint main(int argc, char *argv[]) {\r\n    int x = 1;\r\n.\r\n      // this line has a tab and 2 spaces\r\n.\r\n.\r\n      | // this line has a tab and 2 spaces before the cursor\r\n.\r\n     // this line has a tab\r\n.\r\n.\r\n    return EXIT_SUCCESS;\r\n}\r\n.\r\nint function() {\r\n    printf(\"\\n\");\r\n}\r\n```\r\n\r\nafter pressing backspace in insert mode or X in normal mode\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n.\r\nint main(int argc, char *argv[]) {\r\n    int x = 1;|\r\n    return EXIT_SUCCESS;\r\n}\r\n.\r\nint function() {\r\n    printf(\"\\n\");\r\n}\r\n```",
    "closed_at": "2024-03-20T15:37:47Z",
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Thanks for the thoughtful proposal. But this should be a plugin.",
            "created_at": "2024-03-20T15:37:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/27948#issuecomment-2009870223",
            "id": 2009870223,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27948",
            "node_id": "IC_kwDOAPphoM53zC-P",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2009870223/reactions"
            },
            "updated_at": "2024-03-20T15:37:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2009870223",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comments": 1,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/27948/comments",
    "created_at": "2024-03-20T14:33:08Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/27948/events",
    "html_url": "https://github.com/neovim/neovim/issues/27948",
    "id": 2197694250,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/27948/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6C_icq",
    "number": 27948,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/27948/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "not_planned",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/27948/timeline",
    "title": "delete multiple empty lines, based on a criteria",
    "updated_at": "2024-03-20T15:37:47Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/27948",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/113335496?v=4",
        "events_url": "https://api.github.com/users/bojanmilevski/events{/privacy}",
        "followers_url": "https://api.github.com/users/bojanmilevski/followers",
        "following_url": "https://api.github.com/users/bojanmilevski/following{/other_user}",
        "gists_url": "https://api.github.com/users/bojanmilevski/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/bojanmilevski",
        "id": 113335496,
        "login": "bojanmilevski",
        "node_id": "U_kgDOBsFcyA",
        "organizations_url": "https://api.github.com/users/bojanmilevski/orgs",
        "received_events_url": "https://api.github.com/users/bojanmilevski/received_events",
        "repos_url": "https://api.github.com/users/bojanmilevski/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/bojanmilevski/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bojanmilevski/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/bojanmilevski"
    }
}