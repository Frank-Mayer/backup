{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\nCurrently you can launch a remote server with `--headless --listen addr:port`, and later connect an UI like Neovide to it, which is good. But the problem is that Neovim does not wait for the UI to attach and proceeds to load the init files immediately. This is problematic because the user might have conditional customization in the init files, for example `if vim.g.neovide`, which will never run.\r\n\r\nWe, the maintainers of Neovide, have always assumed that `--headless` waits for the UI to attach, so that's what we have been suggesting in the documentation. But as part of investigating bugs like https://github.com/neovide/neovide/issues/2620, https://github.com/neovide/neovide/issues/1868 I found that to not be the case. It's also not a bug, since the behaviour is clearly documented in the documentation (but not the commandline help).\r\n\r\nhttps://github.com/neovim/neovim/pull/25709 (Neovim 0.10) added support for `--embed --listen addr:port`, which waits for the UI to attach. But that is only suitable as a workaround at best, since it also captures the stdin. Another hacky workaround is to do the GUI specific configuration in `UIEnter`, but that's too late due to https://github.com/neovim/neovim/issues/25377, and things like font's should definitely be set before anything is drawn on the screen.\r\n\n\n### Expected behavior\n\nPreferably `--headless --listen addr:port`, should always wait for an UI to attach, at least I can't think of any use cases for the current behavour. \r\n\r\nBut if that's not possible, a new command line parameter should be added to make the startup wait for an UI to attach.",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "The [approach I took in Firenvim](https://github.com/glacambre/firenvim/blob/master/autoload/firenvim.vim#L713) is to add a bunch of `--cmd` switches to perform UI-specifc initialization. Would having Neovide add `--cmd 'source /path/to/neovide-init.lua'` to the arguments it passes to Neovim be an acceptable solution?",
            "created_at": "2024-07-10T14:39:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2220698232",
            "id": 2220698232,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6EXSp4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2220698232/reactions"
            },
            "updated_at": "2024-07-10T14:45:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2220698232",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11534587?v=4",
                "events_url": "https://api.github.com/users/glacambre/events{/privacy}",
                "followers_url": "https://api.github.com/users/glacambre/followers",
                "following_url": "https://api.github.com/users/glacambre/following{/other_user}",
                "gists_url": "https://api.github.com/users/glacambre/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glacambre",
                "id": 11534587,
                "login": "glacambre",
                "node_id": "MDQ6VXNlcjExNTM0NTg3",
                "organizations_url": "https://api.github.com/users/glacambre/orgs",
                "received_events_url": "https://api.github.com/users/glacambre/received_events",
                "repos_url": "https://api.github.com/users/glacambre/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glacambre/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glacambre/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glacambre"
            }
        },
        {
            "author_association": "NONE",
            "body": "@glacambre using `--cmd` flags might work, but it feels slightly like a hack in this case, and I'm not sure it's the most general solution.\r\n\r\nI can't speak on behalf of the neovide maintainers, but I also don't think sourcing a custom startup file would work in all cases. Currently, neovide allows you to customize _any_ section of the config by simply checking if the global `vim.g.neovide` variable is set. This allows both adding configuration for the GUI, and preventing terminal specific configurations from running.\r\n\r\nUsing `--cmd` flags helps out with adding configuration when launching the GUI, but it doesn't handle preventing other code from running.",
            "created_at": "2024-07-10T20:10:11Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2221345659",
            "id": 2221345659,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6EZwt7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2221345659/reactions"
            },
            "updated_at": "2024-07-10T20:10:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2221345659",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/17417793?v=4",
                "events_url": "https://api.github.com/users/cosmicboots/events{/privacy}",
                "followers_url": "https://api.github.com/users/cosmicboots/followers",
                "following_url": "https://api.github.com/users/cosmicboots/following{/other_user}",
                "gists_url": "https://api.github.com/users/cosmicboots/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cosmicboots",
                "id": 17417793,
                "login": "cosmicboots",
                "node_id": "MDQ6VXNlcjE3NDE3Nzkz",
                "organizations_url": "https://api.github.com/users/cosmicboots/orgs",
                "received_events_url": "https://api.github.com/users/cosmicboots/received_events",
                "repos_url": "https://api.github.com/users/cosmicboots/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cosmicboots/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cosmicboots/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/cosmicboots"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@cosmicboots I'm not sure I understand what you mean. I'm suggesting adding `--cmd 'let g:neovide = true'` to the arguments Neovide passes to nvim. As the [docs](https://neovim.io/doc/user/starting.html#--cmd) explain, this piece of code will be executed before any vimrc/init.vim is executed - thus `g:neovide` would be defined when the vimrc is executed, and users could use `if exists('g:neovide') && g:neovide` in order to gate their configuration. Gating is even nicer in lua since undefined variables will be nil, which is falsy.",
            "created_at": "2024-07-10T20:22:07Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2221371062",
            "id": 2221371062,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6EZ262",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2221371062/reactions"
            },
            "updated_at": "2024-07-10T20:22:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2221371062",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11534587?v=4",
                "events_url": "https://api.github.com/users/glacambre/events{/privacy}",
                "followers_url": "https://api.github.com/users/glacambre/followers",
                "following_url": "https://api.github.com/users/glacambre/following{/other_user}",
                "gists_url": "https://api.github.com/users/glacambre/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glacambre",
                "id": 11534587,
                "login": "glacambre",
                "node_id": "MDQ6VXNlcjExNTM0NTg3",
                "organizations_url": "https://api.github.com/users/glacambre/orgs",
                "received_events_url": "https://api.github.com/users/glacambre/received_events",
                "repos_url": "https://api.github.com/users/glacambre/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glacambre/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glacambre/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glacambre"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@glacambre,\r\n\r\nThe use case here is to launch a remote Neovim instance, which you can later connect to using `neovide --server host:port`\r\n\r\nIt feels quite hacky to let the user start the instance with `nvim --headless --listen --cmd 'let g:neovide = true`, since neovide is supposed to be set by Neovide itself and not by the user.\r\n\r\nAnd it does also not cover all the cases. Right now, it's mostly OK; the checks in the user configuration are not really needed, since Neovide is configured using global variables (https://neovide.dev/configuration.html), so they can be set no matter if Neovide is connected or not. They are typically only needed for doing something else when Neovide is *not* running, or for configuring standard Neovim options based on the configuration.\r\n\r\nBut we probably want to add custom commands and functions that can be run during the configuration stage at some point, perhaps a traditional `setup` function or something else, since the flat variable list is not really extendible enough for what we have been planning. Some options were discussed here https://github.com/neovim/neovim/issues/12544, and they all require that Neovide, or at least some Neovide plugin is running when the init file is parsed. And having a separate plugin that needs to be in sync with Neovide sounds like a nightmare for the users.\r\n\r\nSo as far as I see it, the absolutely cleanest solution is to have a parameter that waits at the startup, just like `--embed` does. That way the GUI can add its own configuration before the user init file is parsed.",
            "created_at": "2024-07-10T20:52:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2221436970",
            "id": 2221436970,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6EaHAq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2221436970/reactions"
            },
            "updated_at": "2024-07-10T20:52:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2221436970",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Ah, okay, I understand better now. On a philosophical level, I'm against this proposal - as you said in the OP, there's already `UIEnter` to do this, and it's strictly better than setting things in init.vim/init.lua based on whether a global variable is defined, since it'll work when multiple GUIs connect to a same Neovim instance or when a same UI connects and disconnects to the same instance multiple times.\r\n\r\nHowever, on a practical level, I must admit that in my experience users clearly don't understand `UIEnter` and don't want to learn anything more than global variables. Moreover, aside from combining noice.nvim and another GUI, there has been very little use of combined GUIs, despite this being possible since the inception of Neovim's UI protocol. Finally, I must admit that having a better way to delay sourcing of the user's init.vim/init.lua would likely have helped me a lot with Firenvim. So in the end, I'd say this change would indeed be a very worthwhile improvement to Neovim.\r\n\r\nYet another case of worse is better I guess :)",
            "created_at": "2024-07-11T06:46:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2222160975",
            "id": 2222160975,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6Ec3xP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2222160975/reactions"
            },
            "updated_at": "2024-07-11T06:46:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2222160975",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11534587?v=4",
                "events_url": "https://api.github.com/users/glacambre/events{/privacy}",
                "followers_url": "https://api.github.com/users/glacambre/followers",
                "following_url": "https://api.github.com/users/glacambre/following{/other_user}",
                "gists_url": "https://api.github.com/users/glacambre/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glacambre",
                "id": 11534587,
                "login": "glacambre",
                "node_id": "MDQ6VXNlcjExNTM0NTg3",
                "organizations_url": "https://api.github.com/users/glacambre/orgs",
                "received_events_url": "https://api.github.com/users/glacambre/received_events",
                "repos_url": "https://api.github.com/users/glacambre/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glacambre/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glacambre/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glacambre"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "`--headless` kinda implies that an UI is _not_ expected (cf `--embed` with `--embed --headless`) so if we support this specific pattern a different flag would be preferable. ",
            "created_at": "2024-07-11T08:20:00Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2222322016",
            "id": 2222322016,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6EdfFg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2222322016/reactions"
            },
            "updated_at": "2024-07-11T08:20:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2222322016",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@glacambre,\r\n\r\n`UIEnter` is not really an option since it's not guaranteed to be called before the UI is rendered. For example, `lazy.nvim` draws its UI completely before `UIEnter`. Many error messages are also displayed before that. So, if you set for example the `guifont` there, the initial window size and font will be wrong. See https://github.com/neovim/neovim/issues/25377\r\n\r\nSo, for this reason in Neovide, we assume that all the options are valid when the screen is drawn for the first time and the first flush message is received. We delay showing our UI window until that point.",
            "created_at": "2024-07-11T08:56:34Z",
            "html_url": "https://github.com/neovim/neovim/issues/29634#issuecomment-2222391878",
            "id": 2222391878,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29634",
            "node_id": "IC_kwDOAPphoM6EdwJG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2222391878/reactions"
            },
            "updated_at": "2024-07-11T08:56:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2222391878",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo"
            }
        }
    ],
    "comments": 7,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/29634/comments",
    "created_at": "2024-07-09T18:33:10Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/29634/events",
    "html_url": "https://github.com/neovim/neovim/issues/29634",
    "id": 2398883508,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 113026979,
            "name": "ui",
            "node_id": "MDU6TGFiZWwxMTMwMjY5Nzk=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/ui"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 406104372,
            "name": "server",
            "node_id": "MDU6TGFiZWw0MDYxMDQzNzI=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/server"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "Nvim startup sequence (`:h startup`)",
            "id": 870629450,
            "name": "startup",
            "node_id": "MDU6TGFiZWw4NzA2Mjk0NTA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/startup"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/29634/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6O_A60",
    "number": 29634,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/29634/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/29634/timeline",
    "title": "Support waiting for an UI to attach when launching with --listen",
    "updated_at": "2024-07-15T14:21:34Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/29634",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
        "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
        "followers_url": "https://api.github.com/users/fredizzimo/followers",
        "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
        "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/fredizzimo",
        "id": 9946255,
        "login": "fredizzimo",
        "node_id": "MDQ6VXNlcjk5NDYyNTU=",
        "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
        "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
        "repos_url": "https://api.github.com/users/fredizzimo/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/fredizzimo"
    }
}