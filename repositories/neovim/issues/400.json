{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "I'm new to neovim, so I'm sorry if this has already been brought up.\n\nInstead of using stdin/stdout to send commands to a GUI, could neovim instead use sockets? From what I gather, one of the main goals is to separate the state machine (neovim) from the presentation of the state (GUIs).\n\nIn the introduction page of the wiki, the proposed idea is to use stdin/stdout; but I would think that it might be more natural to use sockets. Sockets have the added benefit of being able to handle multiple connections quite easily (another stated idea somewhere is to be able to run it with multiple clients on a remote server).\n\nWith regards to design, using sockets would bring neovim closer to a client/server based model.\n\nThoughts?\n",
    "closed_at": "2014-04-05T00:35:03Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
        "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
        "followers_url": "https://api.github.com/users/tarruda/followers",
        "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
        "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/tarruda",
        "id": 842846,
        "login": "tarruda",
        "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
        "organizations_url": "https://api.github.com/users/tarruda/orgs",
        "received_events_url": "https://api.github.com/users/tarruda/received_events",
        "repos_url": "https://api.github.com/users/tarruda/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/tarruda"
    },
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Multiple clients can be handled by a socket server that multiplexes a single Neovim instance. This is how I imagined to implement this feature in the first place and it has the advantage that the core remains simple and decoupled from the transport channel.\n",
            "created_at": "2014-03-25T15:03:50Z",
            "html_url": "https://github.com/neovim/neovim/issues/400#issuecomment-38574982",
            "id": 38574982,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/400",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTc0OTgy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38574982/reactions"
            },
            "updated_at": "2014-03-25T15:03:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38574982",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I think the biggest advantage to using stdin/stdout is that it would allow neovim to be single-threaded.\n\nHow did you imagine keeping track of the different clients from the neovim side? If the socket server were integrated it would be easier to differentiate between clients. Regardless, there would be a single neovim instance.\n\nNonetheless, neovim should come with a socket server. It would be a pain to require a user to set that up separately.\n",
            "created_at": "2014-03-25T15:49:00Z",
            "html_url": "https://github.com/neovim/neovim/issues/400#issuecomment-38581167",
            "id": 38581167,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/400",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTgxMTY3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38581167/reactions"
            },
            "updated_at": "2014-03-25T15:49:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38581167",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1509686?v=4",
                "events_url": "https://api.github.com/users/jaredlwong/events{/privacy}",
                "followers_url": "https://api.github.com/users/jaredlwong/followers",
                "following_url": "https://api.github.com/users/jaredlwong/following{/other_user}",
                "gists_url": "https://api.github.com/users/jaredlwong/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jaredlwong",
                "id": 1509686,
                "login": "jaredlwong",
                "node_id": "MDQ6VXNlcjE1MDk2ODY=",
                "organizations_url": "https://api.github.com/users/jaredlwong/orgs",
                "received_events_url": "https://api.github.com/users/jaredlwong/received_events",
                "repos_url": "https://api.github.com/users/jaredlwong/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jaredlwong/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jaredlwong/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jaredlwong"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> using stdin/stdout\n\n@tarruda I've been meaning to ask, does this mean also that one could use nvim at \"left side of a pipe\" in a shell:\n\n```\necho foo bar | nvim - | grep baz\n```\n\nThis is currently not possible with Vim, but it could be useful for leveraging vim macros and scripts.\n",
            "created_at": "2014-03-25T16:17:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/400#issuecomment-38585546",
            "id": 38585546,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/400",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTg1NTQ2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38585546/reactions"
            },
            "updated_at": "2014-03-25T16:17:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38585546",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I think the biggest advantage to using stdin/stdout is that it would allow neovim to be single-threaded.\n\nI don't see that. Handling multiple clients can be done in a threading-free manner by using `select/poll/epoll/kqueue/...` or an abstraction like `libev/libuv/...`.\n",
            "created_at": "2014-03-25T18:13:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/400#issuecomment-38600523",
            "id": 38600523,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/400",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjAwNTIz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38600523/reactions"
            },
            "updated_at": "2014-03-25T18:13:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38600523",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@jaredlwong At first there wont be any client-specific handling on Neovim, so the server will simply \"mirror\" the msgpack UI to every connected client. Each connected client can have a different window size, so the server should probably report the size of the smallest client window to Neovim. This will be similar to how tmux behaves with multiple clients.\n\n@justinmk It might be possible. Neovim will emit msgpack documents to stdout but we could implement a command-line option that will block msgpack and when the program is about to exit it 'spits' the buffer being edited. The problem is that this won't scale to large amounts of text because vim is an interactive editor, unlike sed/ed which operates on streams.\n",
            "created_at": "2014-03-25T19:05:37Z",
            "html_url": "https://github.com/neovim/neovim/issues/400#issuecomment-38606856",
            "id": 38606856,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/400",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjA2ODU2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38606856/reactions"
            },
            "updated_at": "2014-03-25T19:05:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38606856",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@tarruda What if neovim operated in similar fashion to tmux, where it was responsible for listening on a socket (neovim provided the socket server). And as @aktau suggests, using select/etc. for handling clients/requests.\n",
            "created_at": "2014-03-25T20:06:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/400#issuecomment-38613797",
            "id": 38613797,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/400",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjEzNzk3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38613797/reactions"
            },
            "updated_at": "2014-03-25T20:06:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38613797",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1509686?v=4",
                "events_url": "https://api.github.com/users/jaredlwong/events{/privacy}",
                "followers_url": "https://api.github.com/users/jaredlwong/followers",
                "following_url": "https://api.github.com/users/jaredlwong/following{/other_user}",
                "gists_url": "https://api.github.com/users/jaredlwong/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jaredlwong",
                "id": 1509686,
                "login": "jaredlwong",
                "node_id": "MDQ6VXNlcjE1MDk2ODY=",
                "organizations_url": "https://api.github.com/users/jaredlwong/orgs",
                "received_events_url": "https://api.github.com/users/jaredlwong/received_events",
                "repos_url": "https://api.github.com/users/jaredlwong/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jaredlwong/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jaredlwong/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jaredlwong"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "So basically the question is if the multiplexing code should be inside or outside of neovim? It's a valid concern I think, multiplexing itself is dead-simple, even more so because there's already a platform abstraction layer in neovim that can do that (libuv). I see it can also do [unix domain sockets / windows named pipes](http://nikhilm.github.io/uvbook/processes.html). I myself don't know if it's worth it to extract this into another process as the added code for multiplexing + enabling TCP and local domain sockets is probably not that large and everything can be contained in one `.c` file. \n\nAt the point we're thinking of adding even more transports than just stdin/pipes/TCP, for example [nanomsg](https://github.com/nanomsg/nanomsg) or [zeromq](http://zeromq.org/), it might be beneficial of just extracting this `.c` file into a separate process. Mainly because it seems a bit weird to include a \"non-essential\" external library in neovim.\n",
            "created_at": "2014-03-25T21:24:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/400#issuecomment-38622728",
            "id": 38622728,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/400",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjIyNzI4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38622728/reactions"
            },
            "updated_at": "2014-03-25T21:24:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38622728",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@justinmk I think I understand what you meant now. You want to interactively edit data going through a pipeline right? To do that we would need to make the msgpack UI listen on a separate channel such as a socket or a pair of fifos. nvim could start a separate UI process that connects to the open socket/pipe. When the edits are finished the UI would exit and nvim would send the modified buffer to stdout which would continue the pipeline.\n",
            "created_at": "2014-03-25T21:36:52Z",
            "html_url": "https://github.com/neovim/neovim/issues/400#issuecomment-38624129",
            "id": 38624129,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/400",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjI0MTI5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38624129/reactions"
            },
            "updated_at": "2014-03-25T21:36:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38624129",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@tarruda Both, actually. The interactive option would be cool (but I haven't thought deeply about it).\n\nThe non-interactive option would allow users to leverage the whole plugiin ecosystem, plus vimscript (plus FFI to other languages), to process a stream. Of course this is heresy for an editor, and much less efficient than using straight perl or something, but it opens up a lot of possibilities. It makes some sense for nvim, since the goal is to turn \"editor\" into \"host\".\n\nIt could also be useful for writing nvim integration tests.\n",
            "created_at": "2014-03-25T22:44:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/400#issuecomment-38630745",
            "id": 38630745,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/400",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjMwNzQ1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38630745/reactions"
            },
            "updated_at": "2014-03-25T22:44:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38630745",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "We will revisit this topic later.\n",
            "created_at": "2014-04-05T00:35:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/400#issuecomment-39623922",
            "id": 39623922,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/400",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM5NjIzOTIy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/39623922/reactions"
            },
            "updated_at": "2014-04-05T00:35:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/39623922",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Removed \"reopen later\" tag since nvim can communicate via sockets now.\n",
            "created_at": "2015-06-26T20:50:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/400#issuecomment-115876308",
            "id": 115876308,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/400",
            "node_id": "MDEyOklzc3VlQ29tbWVudDExNTg3NjMwOA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/115876308/reactions"
            },
            "updated_at": "2015-06-26T20:50:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/115876308",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comments": 11,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/400/comments",
    "created_at": "2014-03-25T14:54:15Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/400/events",
    "html_url": "https://github.com/neovim/neovim/issues/400",
    "id": 30130180,
    "labels": [],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/400/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWUzMDEzMDE4MA==",
    "number": 400,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/400/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/400/timeline",
    "title": "GUI through sockets vs stdin/stdout",
    "updated_at": "2024-09-04T14:01:30Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/400",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1509686?v=4",
        "events_url": "https://api.github.com/users/jaredlwong/events{/privacy}",
        "followers_url": "https://api.github.com/users/jaredlwong/followers",
        "following_url": "https://api.github.com/users/jaredlwong/following{/other_user}",
        "gists_url": "https://api.github.com/users/jaredlwong/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jaredlwong",
        "id": 1509686,
        "login": "jaredlwong",
        "node_id": "MDQ6VXNlcjE1MDk2ODY=",
        "organizations_url": "https://api.github.com/users/jaredlwong/orgs",
        "received_events_url": "https://api.github.com/users/jaredlwong/received_events",
        "repos_url": "https://api.github.com/users/jaredlwong/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jaredlwong/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jaredlwong/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jaredlwong"
    }
}