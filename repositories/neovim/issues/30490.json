{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\nvim/neovim difference in `getmousepos()` for floating-windows/popup-windows\r\nIn `:help getmousepos`\r\n- `vim`: If the mouse is over a popup window then that window is used.\r\n- `neovim`: If the mouse is over a focusable floating window then that window is used.\r\n\r\nI'm looking for a way to get a non-focusable non-hidden window under the mouse. I want to\r\nfill in some of the missing capabilities of plenary.nvim's popup.lua. And popup can not be\r\nfocusable. I could go through a list of all windows, filtering as required, and if needed\r\nconvert mousepos from screen to floating window. But that seems like a lot of work\r\nto replicate in lua code something that is already mostly in core neovim.\r\n\r\n(I noticed that `CTRL-W_CTRL-W` will move to a `hidden` `focusable` window. Is that a bug?)\r\n\n\n### Steps to reproduce\n\nCan provide an executable test case if needed.\r\n\r\n(https://github.com/neovim/neovim/commit/4e4b1b65903b973cb447b5a70413d0e0363c20f0)\n\n### Expected behavior\n\nSome way to get a non-focusable window from `getmousepos()`.\r\n\r\nIs the default, \"must be focusable\", wrong for `getmousepos()`? Should/can it be changed?\r\n\r\nIf there is a way to have an option to `getmousepos()`, like ANY_WINDOW, in the following\r\ncode, that might take care of this problem. Could get there with optional arg to\r\ngetmousepos(). Probably `getmousepos([{dict of options}])`. I'm assuming that\r\n`get_win_by_grid_handle()`/`FOR_ALL_WINDOWS_IN_TAB` is sorted by `zindex`. Also, don't\r\nwant a \"hidden\" window, not sure how that works with FOR_ALL_WINDOWS_IN_TAB.\r\n\r\n```\r\nstatic win_T *mouse_find_grid_win(int *gridp, int *rowp, int *colp)\r\n{\r\n  ...\r\n    if (wp && wp->w_grid_alloc.chars\r\n        && (ANY_WINDOW || !(wp->w_floating && !wp->w_config.focusable))) {\r\n      *rowp = MIN(*rowp - wp->w_grid.row_offset, wp->w_grid.rows - 1);\r\n      *colp = MIN(*colp - wp->w_grid.col_offset, wp->w_grid.cols - 1);\r\n      return wp;\r\n    }\r\n```\r\nor maybe it's something more like\r\n```\r\n&& !(wp->w_floating && (!(ANY_FOCUS || wp->w_config.focusable)))) {\r\n```\r\n\r\nSomething like `getmousepos({focusable: any, hide: false})` for my case.\r\n\r\nI came across nvim__inspect_cell, but it doesn't return the win_id (and ignoring the fact\r\nthat it's hidden somewhere in lua metadata).\r\n\r\nBTW. I wanted to find the dispatch code to see how f_whatever is called. Opened termdebug\r\non nvim, put a breakpoint at f_getmousepos, run... But the forking got in the way. Doing\r\n\"set follow-fork-mode child\" but no luck. Saw some stuff about \"dap\", but didn't see\r\nanyway to hook up gdb to nvim with dap.\r\n\r\nWhen I found the binary in build, and looked more carefully in there, I came across\r\n\"include/*.h.generated.h\" and \".../auto/funcs.generated.h\", now to see where those came\r\nfrom...\r\n\n\n### Nvim version (nvim -v)\n\nv0.11.0-dev commit db4e4b1b65903b\n\n### Vim (not Nvim) behaves the same?\n\nNo, vim 9.1.695 (and for a while)\n\n### Operating system/version\n\nubuntu\n\n### Terminal name/version\n\ngnome\n\n### $TERM environment variable\n\nxterm-256color\n\n### Installation\n\nmake install",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "I do think the default behavior makes sense, as one may want `getmousepos()` to get where the cursor actually moves to on a mouse click.\r\n\r\n> I'm assuming that `get_win_by_grid_handle()`/`FOR_ALL_WINDOWS_IN_TAB` is sorted by `zindex`.\r\n\r\nThat's actually not the case. They are sorted in reverse order of creation (i.e. newest floating windows first).\r\n\r\nHowever, you are checking the wrong branch here, as the branch used in your case is the `*gridp == 0` branch, and `ui_comp_mouse_focus()` is sorted by `zindex`:\r\n```c\r\n  for (ssize_t i = (ssize_t)kv_size(layers) - 1; i > 0; i--) {\r\n    ScreenGrid *grid = kv_A(layers, i);\r\n    if (grid->focusable\r\n        && row >= grid->comp_row && row < grid->comp_row + grid->rows\r\n        && col >= grid->comp_col && col < grid->comp_col + grid->cols) {\r\n      return grid;\r\n    }\r\n  }\r\n```",
            "created_at": "2024-09-23T23:52:19Z",
            "html_url": "https://github.com/neovim/neovim/issues/30490#issuecomment-2369797078",
            "id": 2369797078,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30490",
            "node_id": "IC_kwDOAPphoM6NQDvW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2369797078/reactions"
            },
            "updated_at": "2024-09-23T23:52:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2369797078",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I do think the default behavior makes sense, as one may want `getmousepos()` to get where the cursor actually moves to on a mouse click.\r\n\r\n\r\nI'm not familiar enough with `neovim`, but I thought that usually the builtin function were similar to `vim`. And it's also possible the tha `neovim` behavior pre-dates the addition of `vim`'s popup stuff. I forget to mention that this might better be considered a feature request if the current behavior is fully intended. Thanks for changing it.\r\n\r\n\"one may want ... actually move to on a click\" and one may want to know what window is displayed under the click. But only one or the other is not the main point of this issue, unless `neovim` said, yes that's a bug:). The idea is to have a way to find either.\r\n\r\nThe main issue is whether or not something like `getmousepos([{dict_of_options}])` would be accepted, assuming it met the \"standards\". `neovim` is completely new to me except for the parts that aren't. Don't want to spend much time working on something if there's no chance...\r\n\r\nAn alternate approach is a vim function that takes screen x/y and some options and return info similar to getmousepos().\r\n\r\nCan anyone point me to some links about debuggering nvim. I had no luck with termdebug. I have seen that there's a log file, but no other reference. I see the lua vim.log.levels; is that related?\r\n\r\n\r\n> > I'm assuming that `get_win_by_grid_handle()`/`FOR_ALL_WINDOWS_IN_TAB` is sorted by `zindex`.\r\n> \r\n> That's actually not the case. They are sorted in reverse order of creation (i.e. newest floating windows first).\r\n\r\nThanks for the clarification. Ah `ScreenGrid` I saw some stuff about grids. Is `ScreenGrid` and \"cell\" directly related? I don't get the `multigrid` and `linegrid` and such. (so much new stuff).\r\n\r\n> However, you are checking the wrong branch here, as the branch used in your case is the `*gridp == 0` branch, and `ui_comp_mouse_focus()` is sorted by `zindex`:\r\n\r\nCool. I'll take a look. `kv_A(layers, i)` that's interesting.\r\n\r\n> ```c\r\n>   for (ssize_t i = (ssize_t)kv_size(layers) - 1; i > 0; i--) {\r\n>     ScreenGrid *grid = kv_A(layers, i);\r\n>     if (grid->focusable\r\n>         && row >= grid->comp_row && row < grid->comp_row + grid->rows\r\n>         && col >= grid->comp_col && col < grid->comp_col + grid->cols) {\r\n>       return grid;\r\n>     }\r\n>   }\r\n> ```\r\n",
            "created_at": "2024-09-24T01:15:50Z",
            "html_url": "https://github.com/neovim/neovim/issues/30490#issuecomment-2369910046",
            "id": 2369910046,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30490",
            "node_id": "IC_kwDOAPphoM6NQfUe",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2369910046/reactions"
            },
            "updated_at": "2024-09-24T01:15:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2369910046",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/20450427?v=4",
                "events_url": "https://api.github.com/users/errael/events{/privacy}",
                "followers_url": "https://api.github.com/users/errael/followers",
                "following_url": "https://api.github.com/users/errael/following{/other_user}",
                "gists_url": "https://api.github.com/users/errael/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/errael",
                "id": 20450427,
                "login": "errael",
                "node_id": "MDQ6VXNlcjIwNDUwNDI3",
                "organizations_url": "https://api.github.com/users/errael/orgs",
                "received_events_url": "https://api.github.com/users/errael/received_events",
                "repos_url": "https://api.github.com/users/errael/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/errael/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/errael/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/errael"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/30490/comments",
    "created_at": "2024-09-23T23:26:10Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/30490/events",
    "html_url": "https://github.com/neovim/neovim/issues/30490",
    "id": 2543934113,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 646043375,
            "name": "mouse",
            "node_id": "MDU6TGFiZWw2NDYwNDMzNzU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/mouse"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "floating windows",
            "id": 3234818716,
            "name": "floatwin",
            "node_id": "MDU6TGFiZWwzMjM0ODE4NzE2",
            "url": "https://api.github.com/repos/neovim/neovim/labels/floatwin"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/30490/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6XoVqh",
    "number": 30490,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/30490/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/30490/timeline",
    "title": "getmousepos() doesn't find non-focusable windows",
    "updated_at": "2024-09-24T01:15:51Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/30490",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/20450427?v=4",
        "events_url": "https://api.github.com/users/errael/events{/privacy}",
        "followers_url": "https://api.github.com/users/errael/followers",
        "following_url": "https://api.github.com/users/errael/following{/other_user}",
        "gists_url": "https://api.github.com/users/errael/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/errael",
        "id": 20450427,
        "login": "errael",
        "node_id": "MDQ6VXNlcjIwNDUwNDI3",
        "organizations_url": "https://api.github.com/users/errael/orgs",
        "received_events_url": "https://api.github.com/users/errael/received_events",
        "repos_url": "https://api.github.com/users/errael/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/errael/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/errael/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/errael"
    }
}