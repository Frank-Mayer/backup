{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\r\n\r\nDuring packaging for MacPorts (https://github.com/macports/macports-ports/pull/24120#discussion_r1613998031), the question came up why the cmake build system (under `cmake.deps/`) is strictly separate from the toplevel CMakeLists.txt, requiring either multiple manual steps or using the additional wrapper Makefile. This has become especially cumbersome since as of v0.10.0, neovim expects multiple builtin tree-sitter parsers to be available at `<prefix>/lib/nvim/parser` or otherwise will throw runtime errors on common tasks like opening `:help`.\r\n\r\nEven worse is the fact that the toplevel cmake silently does or does not use the parsers in `.deps` depending on whether they were built manually before, so forgetting to build them can easily go through unnoticed, which is what initially happened in MacPorts. Using the wrapper Makefile is not a good option there.\r\n\r\nCMake has extensive builtin functionality for embedding other cmake roots, from e.g. a simple `add_subdirectory` to ExternalProject/FetchContent. Having `cmake.deps/` as a standalone-buildable project makes sense because you can point multiple neovim builds to it. But I was not able to find reasons in the codebase or past issues why there had to be a wrapper-Makefile around the toplevel cmake for tasks that cmake itself should be able to handle just fine.\r\nSo my question is: Was this a deliberate design decision and what was the reasoning behind it?\r\n\r\n### Expected behavior\r\n\r\nI could imagine a build system like this:\r\n* `cmake.deps/` stays mostly as-is: A standalone project for bundled dependencies\r\n* The toplevel CMakeLists.txt can (using options) be manually pointed to a `.deps` folder, told to not use bundled dependencies at all, or it will embed `cmake.deps/` itself using something like ExternalProject and build and manage a specified subset of dependencies in its own build dir. It should fail the build if building any of the dependencies fails.\r\n* Makefile can be removed, or at least stripped down a lot to only go through the toplevel cmake.",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "This is basically impossible without nasty hacks. An attempt of this was made in https://github.com/neovim/neovim/pull/22054 and the problem is that `FetchContent` only works with projects who use cmake and we have many dependencies who don't use cmake. We can't use ExternalProject either as that is run during build time instead of configure time which will make the main build error as dependencies (that now don't exist) need to be resolved in configure time. It's a nasty situation cmake has explicitly expressed they will not try to fix as \"cmake is not a package manager\". A workaround for this is to fork all our dependencies that don't use cmake and add a top level `Cmakelists.txt` file or something, but it didn't seem popular when I brought this up. The best hope I can give is that we may change the build system in the future: https://github.com/neovim/neovim/pull/28344.\r\n\r\nWith that background out of the way: I don't quite understand why this is a problem. Distros are usually expected to package everything themselves and should able to just run the main build since all dependencies are already available. I don't quite get what blocks you from just using the main file (assuming you've already packaged all dependencies).",
            "created_at": "2024-05-27T15:24:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/29042#issuecomment-2133693543",
            "id": 2133693543,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29042",
            "node_id": "IC_kwDOAPphoM5_LZRn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2133693543/reactions"
            },
            "updated_at": "2024-05-27T15:24:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2133693543",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "author_association": "NONE",
            "body": "Thank you for linking the pr, this is what I was looking for. Good to see this was already approached.\r\n\r\n> We can't use ExternalProject either as that is run during build time instead of configure time which will make the main build error as dependencies (that now don't exist) need to be resolved in configure time.\r\n\r\nThis can probably be worked around by predicting the exact paths of installed files by the external project and putting dependencies on the target created by `ExternalProject_Add` instead of using a find module. But I understand this may be considered hacky and it also adds another code path to resolve each dependency.\r\n\r\n> With that background out of the way: I don't quite understand why this is a problem. Distros are usually expected to package everything themselves and should able to just run the main build since all dependencies are already available. I don't quite get what blocks you from just using the main file (assuming you've already packaged all dependencies).\r\n\r\nThis is the case for MacPorts, except for the tree-sitter parsers, which are expected to be installed in a neovim-specific directory. In that sense:\r\n* Should those parsers really be considered an external dependency or rather a part of neovim itself?\r\n* Could generic packages of those parsers, like https://ports.macports.org/port/tree-sitter-c/details/ be used reliably with neovim or is the ABI/API too unstable so neovim needs the exact version from its own build system?\r\n* Or, since they are already being built with a custom injected CMakeLists.txt, would it be reasonable to only integrate those into the main cmake somehow?",
            "created_at": "2024-05-27T19:11:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/29042#issuecomment-2133953242",
            "id": 2133953242,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29042",
            "node_id": "IC_kwDOAPphoM5_MYra",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2133953242/reactions"
            },
            "updated_at": "2024-05-27T19:11:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2133953242",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1460997?v=4",
                "events_url": "https://api.github.com/users/thestr4ng3r/events{/privacy}",
                "followers_url": "https://api.github.com/users/thestr4ng3r/followers",
                "following_url": "https://api.github.com/users/thestr4ng3r/following{/other_user}",
                "gists_url": "https://api.github.com/users/thestr4ng3r/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/thestr4ng3r",
                "id": 1460997,
                "login": "thestr4ng3r",
                "node_id": "MDQ6VXNlcjE0NjA5OTc=",
                "organizations_url": "https://api.github.com/users/thestr4ng3r/orgs",
                "received_events_url": "https://api.github.com/users/thestr4ng3r/received_events",
                "repos_url": "https://api.github.com/users/thestr4ng3r/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/thestr4ng3r/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/thestr4ng3r/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/thestr4ng3r"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Thank you for asking these questions. Yes, these parsers should be considered part of Neovim, just like the other runtime files, and you cannot rely on \"semantic version\" stability (the exact same version should work, but no guarantees -- and there is a virtual guarantee that no two consumers (Helix, Emacs, Neovim) will depend on the same version. ",
            "created_at": "2024-05-27T19:42:21Z",
            "html_url": "https://github.com/neovim/neovim/issues/29042#issuecomment-2133979741",
            "id": 2133979741,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29042",
            "node_id": "IC_kwDOAPphoM5_MfJd",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2133979741/reactions"
            },
            "updated_at": "2024-05-27T19:42:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2133979741",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> This can probably be worked around by predicting the exact paths of installed files by the external project and putting dependencies on the target created by ExternalProject_Add instead of using a find module.\r\n\r\nWe don't use a find module for these because they are runtime dependencies. It is not cmake that locates these but neovim itself. Neovim relies on these being in the correct location during runtime.\r\n\r\n> Should those parsers really be considered an external dependency or rather a part of neovim itself?\r\n\r\nI don't know if this is a philosophical question or a practical one. They are dependencies because we don't maintain them. If you mean that we should *treat* them as they are part of neovim (like with runtime files) then that is a different question. It's probably not a popular suggestion as other distros will throw a hissy fit, although I don't remember exactly why. They don't like this though.\r\n\r\n> Could generic packages of those parsers, like [ports.macports.org/port/tree-sitter-c/details](https://ports.macports.org/port/tree-sitter-c/details/) be used reliably with neovim or is the ABI/API too unstable so neovim needs the exact version from its own build system?\r\n\r\nExact",
            "created_at": "2024-05-27T19:46:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/29042#issuecomment-2133982881",
            "id": 2133982881,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29042",
            "node_id": "IC_kwDOAPphoM5_Mf6h",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2133982881/reactions"
            },
            "updated_at": "2024-05-27T19:47:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2133982881",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Or, since they are already being built with a custom injected CMakeLists.txt, would it be reasonable to only integrate those into the main cmake somehow?\r\n\r\nI'll need to think about this. Normally this would be out of the question for dependencies that have other dependencies relying on them (such as luajit), but it might be possible for dependencies that don't have other dependencies relying on them (such as parsers IIRC). I will need to experiment first to say for sure.",
            "created_at": "2024-05-27T19:52:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/29042#issuecomment-2133988581",
            "id": 2133988581,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29042",
            "node_id": "IC_kwDOAPphoM5_MhTl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2133988581/reactions"
            },
            "updated_at": "2024-05-27T19:52:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2133988581",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/29042/comments",
    "created_at": "2024-05-27T14:29:56Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/29042/events",
    "html_url": "https://github.com/neovim/neovim/issues/29042",
    "id": 2319296490,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "building and installing Neovim using the provided scripts",
            "id": 84723321,
            "name": "build",
            "node_id": "MDU6TGFiZWw4NDcyMzMyMQ==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/build"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/29042/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6KPafq",
    "number": 29042,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/29042/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/29042/timeline",
    "title": "Properly integrate cmake.deps into toplevel build system",
    "updated_at": "2024-05-27T19:52:26Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/29042",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1460997?v=4",
        "events_url": "https://api.github.com/users/thestr4ng3r/events{/privacy}",
        "followers_url": "https://api.github.com/users/thestr4ng3r/followers",
        "following_url": "https://api.github.com/users/thestr4ng3r/following{/other_user}",
        "gists_url": "https://api.github.com/users/thestr4ng3r/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/thestr4ng3r",
        "id": 1460997,
        "login": "thestr4ng3r",
        "node_id": "MDQ6VXNlcjE0NjA5OTc=",
        "organizations_url": "https://api.github.com/users/thestr4ng3r/orgs",
        "received_events_url": "https://api.github.com/users/thestr4ng3r/received_events",
        "repos_url": "https://api.github.com/users/thestr4ng3r/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/thestr4ng3r/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/thestr4ng3r/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/thestr4ng3r"
    }
}