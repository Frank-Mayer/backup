{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "#582 is merged and now we are close to have the new plugin architecture implemented, but not much can be done yet: While we have a way to call vim remotely, it's not very useful if vim can't notify the plugin of editor events.\n\nI can think of two ways vim will invoke the plugin:\n- Through the old ex commands for invoking interpreters of various languages(python, ruby, perl, lua...). This method of invoking plugins will be used mainly for compatibility with existing vim plugins\n- Through messages that can contain arbitrary data. These messages have a non-blocking behavior and it's how UI programs(which in essence are just plugins) will know when to redraw.\n\nThe next step is to implement the first notification method, so nvim can run some python plugins. Here's how I imagined the legacy interface will be emulated:\n- The `has` vimscript function will be enhanced. When has('{python,ruby,perl...}') is invoked, the respective plugin process will be spawned, and if successful(eg: the process sends the discover_api message to Neovim) this function will return 1.\n- The ex command for the respective language will also spawn(if not running already) and will send the string argument to be evaluated, and while that's happening, Neovim must ignore all events except for those emitted by the plugin itself(and perhaps ctrl+c interrupts) to emulate the legacy blocking behavior. \n- The user will be able to customize the program ran by the python,ruby.. ex commands through environment variables(eg: pypy can be used for running python scripts)\n\nI still have one decision to make: How should the process spawned by those ex commands communicate with Neovim? My initial idea was reuse the job infrastructure for plugins: [`channel_from_job`](https://github.com/neovim/neovim/blob/master/src/os/channel.h#L26).  \n\nAnother option would be to reuse the client/server infrastructure designed for UI programs: With the `NEOVIM_LISTEN_ADDRESS` environment variable, every program spawned by Neovim knows how to connect and is a potential plugin/UI. This means the `channel_from_job` function is no longer necessary and could be removed\n\nI'm in favor of choosing the second option but I would like to read some opinions before making a decision.\n",
    "closed_at": "2014-09-15T07:03:10Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk"
    },
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "> `has` vimscript function will be enhanced\n\nIt might be useful to provide a non-blocking version of `has()` (or some other way to warm up the process). Because plugins often check `has(\"python\")` but do not actually run any python until autoload.\n\n> user will be able to customize the program ran by the python,ruby.. ex commands through environment variables\n\nWhat's the reason for environment variables instead of, say, Vim `&` settings? Some disadvantages to env vars:\n- managing env vars is platform-specific: user must work with `%FOO%` on Windows, `$FOO` on bash\n  - `:let $FOO=\"bar\"` appears to work in Vim, so maybe this isn't a problem. But it's unusual, and there are [some quirks](https://groups.google.com/d/msg/vim_dev/IIrDqVvdpOo/Q2nuImgZEtEJ) historically.\n- could be overwritten by third-party scripts, which could increase support tickets\n- many `NEOVIM_*` environment variables may not be liked by users\n\nThese aren't really strong objections, just want to raise them.\n\n> reuse the client/server infrastructure designed for UI programs\n\nThe msgpack API? Or what exactly?\n\n> channel_from_job function is no longer necessary and could be removed\n\n`channel_from_job` appears to create a channel from a shell command, as opposed to a socket. But a msgpack channel is created in both cases, right? So is there any other difference from the client's (plugin's) perspective?\n",
            "created_at": "2014-05-14T01:08:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/718#issuecomment-43031987",
            "id": 43031987,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/718",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDMxOTg3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/43031987/reactions"
            },
            "updated_at": "2014-05-14T01:08:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/43031987",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Not sure if I'm understanding correctly, but if there is a single LISTEN_ADDRESS then we can't have multiple neovim instances and that would suck, I think. \n\nA good question to ask is: who's the master (who does all the spawning)? The nvim binary or the GUI? As it stands at the moment, it seems like we're going for the nvim binary spawning the GUI as another plugin. In which case the LISTEN_ADDRESS can be passed to the plugin (GUI or otherwise) at creation time.\n",
            "created_at": "2014-05-14T09:46:34Z",
            "html_url": "https://github.com/neovim/neovim/issues/718#issuecomment-43061504",
            "id": 43061504,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/718",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDYxNTA0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/43061504/reactions"
            },
            "updated_at": "2014-05-14T09:46:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/43061504",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> It might be useful to provide a non-blocking version of has() (or some other way to warm up the process). Because plugins often check has(\"python\") but do not actually run any python until autoload.\n\nAnother approach might be to check if a python executable is available in the `has` function(and cache the result so future calls will be faster) and defer the process startup to `python <<..EOF`. This way the interpreters will only be loaded on-demand.\n\n> What's the reason for environment variables instead of, say, Vim & settings? Some disadvantages to env vars:\n\nNo big reason, I just find environment variables easier during development and since vim already uses a few of them I thought it would be simpler. We can also provide other alternatives for controlling this(such as normal vim options or command-line arguments). Even if we drop an environment variable for this specific use case, the user will still be able to perform some customization through `PATH`\n\n> The msgpack API? Or what exactly?\n\nThe os/server.c module, which lets neovim create API channels through on arbitrary ip addresses and/or unix sockets(named pipes on windows) \n\n> channel_from_job appears to create a channel from a shell command, as opposed to a socket. But a msgpack channel is created in both cases, right? So is there any other difference from the client's (plugin's) perspective?\n\nThe only difference from the plugin perspective is where the stream of msgpack objects will come from/go to(There might be other underlying differences but many are handled by [libuv](https://github.com/neovim/python-client/blob/master/neovim/uv_stream.py) in the python client)\n\nThe reason for dropping `channel_from_job` is simplification: Since UIs will already connect through sockets(so we may have multiple clients on the same instance) I think is better to use this model for plugins too, and leave the job module with the sole task of controlling user-initiated programs. One advantage is that vimscript code can't accidentally kill plugins with the `jobstop` function or write invalid msgpack data with `jobwrite`. Surely we can filter which job ids are allowed but it would add more complexity. In a few words: there will be less code to maintain.\n\n> Not sure if I'm understanding correctly, but if there is a single LISTEN_ADDRESS then we can't have multiple neovim instances and that would suck, I think.\n\nSetting `NEOVIM_LISTEN_ADDRESS` is [optional](https://github.com/neovim/neovim/blob/master/src/os/server.c#L57-L64). Normally it will listen on a random socket so there won't be a problem with multiple instances. This environment variable will probably be set for automated testing(or for experimenting with the REPL): The test suite will start neovim with a known address and connect to it in order to send input/get ouput.\n\n> A good question to ask is: who's the master (who does all the spawning)? The nvim binary or the GUI? As it stands at the moment, it seems like we're going for the nvim binary spawning the GUI as another plugin. In which case the LISTEN_ADDRESS can be passed to the plugin (GUI or otherwise) at creation time.\n\nMost of the times the master will be nvim, and since `NEOVIM_LISTEN_ADDRESS` is set as an environment variable, GUIs will always know how to connect with nvim. The only scenarios where nvim won't be master is when \"embedding\" or automated testing as explained above. There will probably be a command-line flag for disabling automatic GUI startup for embedding.\n",
            "created_at": "2014-05-14T11:24:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/718#issuecomment-43068945",
            "id": 43068945,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/718",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDY4OTQ1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/43068945/reactions"
            },
            "updated_at": "2014-05-14T11:24:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/43068945",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Most of the times the master will be nvim, and since NEOVIM_LISTEN_ADDRESS is set as an environment variable, GUIs will always know how to connect with nvim. \n\nIf nvim is the master, there should be no need for `NEOVIM_LISTEN_ADDRESS`, even if it set, I think. Any sort of communication (even unnamed, lik stdin/stdout of the spawned process) could be used then. That way it doesn't mess with multiple instances.\n",
            "created_at": "2014-05-14T11:28:37Z",
            "html_url": "https://github.com/neovim/neovim/issues/718#issuecomment-43069273",
            "id": 43069273,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/718",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDY5Mjcz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/43069273/reactions"
            },
            "updated_at": "2014-05-14T11:28:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/43069273",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Any sort of communication (even unnamed, lik stdin/stdout of the spawned process) could be used then. That way it doesn't mess with multiple instances.\n\nThat is possible, my initial idea was to use stdin/stdout for communication with GUIs(though the GUI would be the master process). Here are some pros/cons:\n- Neovim will be simpler since it won't know anything about connections or client/server(only jobs).\n- The server(GUI multiplexing/remote clients) can be implemented as a plugin(but there will be some extra overhead)\n- GUIs will be a little more complex(though not too much if they use an abstraction such as [python-client](https://github.com/neovim/python-client) to handle communication via stdin/stdout and through sockets.\n\nIt's something that needs to be considered.\n",
            "created_at": "2014-05-14T11:50:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/718#issuecomment-43070866",
            "id": 43070866,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/718",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDcwODY2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/43070866/reactions"
            },
            "updated_at": "2014-05-14T11:50:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/43070866",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda"
            }
        },
        {
            "author_association": "NONE",
            "body": "> The user will be able to customize the program ran by the python,ruby.. ex commands through environment variables(eg: pypy can be used for running python scripts)\n\nOne general argument against environment variables as a configuration mechanism is that some platforms do not handle them well in the GUI: OS X for instance has rather peculiar ideas about what it communicates about the environment to GUI processes (a problem that has bitten me before while using MacVim). We might needlessly complicate developing GUI front ends to Neovim, which I’m pretty certain would hamper adoption outside the pure *nix world. \n",
            "created_at": "2014-05-14T12:33:43Z",
            "html_url": "https://github.com/neovim/neovim/issues/718#issuecomment-43074204",
            "id": 43074204,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/718",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDc0MjA0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/43074204/reactions"
            },
            "updated_at": "2014-05-14T12:33:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/43074204",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/80906?v=4",
                "events_url": "https://api.github.com/users/kopischke/events{/privacy}",
                "followers_url": "https://api.github.com/users/kopischke/followers",
                "following_url": "https://api.github.com/users/kopischke/following{/other_user}",
                "gists_url": "https://api.github.com/users/kopischke/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kopischke",
                "id": 80906,
                "login": "kopischke",
                "node_id": "MDQ6VXNlcjgwOTA2",
                "organizations_url": "https://api.github.com/users/kopischke/orgs",
                "received_events_url": "https://api.github.com/users/kopischke/received_events",
                "repos_url": "https://api.github.com/users/kopischke/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kopischke/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kopischke/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kopischke"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Can't all of that be based on the rstream/wstream abstraction you made?\n\nTrue plugins would be spawned by nvim and use `rstream = stdout` and `wstream = stdin`, this is the simplest case. This would make plugins automatically unique to the nvim process, I assume that's what we want. It would mean only a tiny change if we decide later that we do want some plugins running over (TCP/UNIX/...) sockets/pipes.\n\nGUIs could be spawned either by nvim or by the user (they would in turn spawn nvim or connect to an existing instance, like tmux). The kind of (r|w)stream they use depends on the configuration. Let's say that the default is a `rdemuxstream` and `wmuxstream`. There are fan-in (mux) and fan-out (demux) streams. The only thing they do is contain other streams, TCP for remote clients that connect by themselves, UNIX for local clients that connect by themselves, stdin/stdout for clients spawned by nvim, ....\n\nI really don't think it's worth it to create another process and slow down the entire chain just for (de)muxing...\n\nSchematics:\n\n``` c\nplugins:\n  - python: rstream = stdout / wstream = stdin\n  - lua: rstream = internal_pass /  wstream = internal_pass (we have lua builtin, make it _real_ fast if possible)\n  - bash (why not...): rstream = fifo / wstream = fifo\n  - ...\ngui: \n  - rstream = rdemuxstream (stdin, UNIX sock client no. 1,  UNIX sock client no. 2, TCP client no. 1, ...)\n  - wstream = rmuxstream (stdout, UNIX sock client no. 1,  UNIX sock client no. 2, TCP client no. 1, ...)\n```\n\n**EDIT**: for lua I would actually not even do the serialization dance, but just an initialized ffi object (kind of like the one ZyX is making). I'm not advocating creating 1st class and 2nd class plugin implementations, they should all have the same API, but we have the opportunity of making Lua really shine because it's included in the core anyway.\n",
            "created_at": "2014-05-14T12:44:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/718#issuecomment-43075200",
            "id": 43075200,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/718",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDc1MjAw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/43075200/reactions"
            },
            "updated_at": "2014-05-14T12:52:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/43075200",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Can't all of that be based on the rstream/wstream abstraction you made?\n> \n> True plugins would be spawned by nvim and use rstream = stdout and wstream = stdin, this is the simplest case. This would make plugins automatically unique to the nvim process, I assume that's what we want. It would mean only a tiny change if we decide later that we do want some plugins running over (TCP/UNIX/...) sockets/pipes.\n\nYes but since we already need sockets for UIs/multiplexing, why not simplify and make all API consumers use it? Plugins/UIs will be unique per nvim instance because the socket address is random(by default) and exported to spawned plugins/UIs via environment variables(or through command-line arguments if this is unreliable on windows/osx). Another advantage of using sockets is that plugins might spawn other plugins/processes which connect to nvim to do other parallel work(without the complexity of having to manage threads inside the plugin process).\n\n> GUIs could be spawned either by nvim or by the user (they would in turn spawn nvim or connect to an existing instance, like tmux)\n\nI would rather have most of use cases handled by the `nvim` program, for example:\n- `nvim -g`: Start nvim and spawn a local UI(since the UI is started by nvim, it would know the random socket for connection)\n- `nvim --no-ui --listen 192.168.1.1`: Start nvim without spawning a UI, listening on 192.168.1.1\n- `nvim --connect 192.168.1.1`: Start nvim, which in turn will spawn a UI(which would always be deatached from the parent), tell it to connect to the remote nvim at 192.168.1.1 and exit.\n\nI'm not saying we can't have both ways of using plugins/UIs since the rstream/wstream abstractions make switching easy, but I'm in favor of choosing one of these two:\n\n#### Plugins/UIs being detached from the parent process and talking with nvim through socket connections.\n\nAdvantages:\n- Plugins can spawn other plugins, which greatly increases the flexibility.(Imagine a terminal emulator plugin, which could spawn console programs that would not only know when they are running inside nvim, but could also interact with the editor)\n- Connections/multiplexing will be more efficient since we won't need a separate plugin for serving the API\n- UIs will use the exact same code for connecting to both local and remote nvim instances.\n- stdin/stdout can be inherited by plugins/UIs, which can be used for logging to the same terminal.\n- Simple to implement the \"nvim in the middle of a pipeline\" use case suggested by @justinmk(stdin/stdout will be always free to use however we want).\n- The job module will stay simple(we won't have to manage which jobs have API connections and can't be tampered by vimscript)\n- Simplified reasoning about the plugin/UI architecture: UIs are exactly the same as plugins, except that they will normally draw to the screen.\n\nDisadvantages:\n- Possibility of multiple nvim instances using the same socket? Not sure how that can happen seeing as how we use random local addresses and `server_init` can keep trying while the random address conflicts with an existing one.\n\n#### Plugins/UIs being co-processes managed by the job control module.\n\nAdvantages:\n- We can remove the 'server' module(though it's only about 250 loc).\n- It covers the most common use case, which is to spawn a local editor\n- By externalizing the server we can also add support for more protocols(eg json-rpc for web clients) without changes to the core.\n\nDisadvantages:\n- Overhead for multiplexing remote connections since the server will be a plugin.\n- Less plugin flexibility(it won't be simple for plugins to spawn other plugins since an API server isn't guaranteed to exist).\n\nIt seems to me that the first approach is better.\n",
            "created_at": "2014-05-15T12:54:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/718#issuecomment-43205179",
            "id": 43205179,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/718",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjA1MTc5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/43205179/reactions"
            },
            "updated_at": "2014-05-15T12:54:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/43205179",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Plugins/UIs being detached from the parent process and talking with nvim through socket connections.\n\n:+1: This option seems the obvious choice. The advantages of the second option are negligible.\n",
            "created_at": "2014-05-24T09:13:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/718#issuecomment-44082040",
            "id": 44082040,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/718",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDgyMDQw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/44082040/reactions"
            },
            "updated_at": "2014-05-24T09:13:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/44082040",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I think we're more or less talking about the same things here. I guess I just wanted to clarify what I had in my head. Some of the things that I would intuitively prefer:\n1. Do (de)multiplexing within `nvim` itself:\n   - it's easier for the plugins / external procs (there's always a server, as you said)\n   - it avoids the overhead of an external server plugin\n   - it's not an extreme amount of code, the central part being a `select`-like loop (libuv has an abstraction over `epoll`/`kqueue`/`iocp` as we all know)\n   - it allows for cleaner integration of \"special\" clients (see next point)\n2. Allow for the possibility to let lua plugins (and of course lua-converted VimL) run inside of the process (in their own `lua_State`). The API should be the same as those of remote plugins (even remote lua plugins if one desperately wants to use some lua 5.3 features or whatnot), but it would skip the overhead of serializing and transmitting async over the wire and just use the FFI interface. We haven't really tested or benchmarked, but my programmers' intuition tells me it might be decisive and it will allow us to move quite a lot of core functionality to lua scripts. This indicates to me we should at least keep it in mind while designing the plugin interface. (note: I'm well aware programmers intuition is very often wrong, but it can't hurt to keep things in mind). I don't have a good birds-eye view since I haven't reviewed your patches in-depth, but I believe that such a thing is still possible as of now. It could also allow things like json-rpc to be implemented as an optional lua plugin, which would we less crazy than letting a generic external plugin do it (which would incur the overhead of (de)serializing and putting on the wire twice.\n\nSo instead of:\n\n```\n// probably extremely inefficient\n[nvim] <----- < UNIX socket / msgpack > ------> [plugin] <------ < TCP / json-rpc > ------> [websockify] <---<WebSockets over TCP/ json-rpc >----> [web client]\n\n// a bit better, lua has libraries for both json generation and WebSocket transmission\n[nvim/luajit] <----- < WebSockets over TCP/ json-rpc >----> [web client]\n```\n\nWhile thinking about running lua plugins in process, I suddenly wondered if you're planning to let remote users (who attach to an nvim remotely) attach their own plugins as well? At first I think I would be disinclined because that means that 2 users with different plugin sets could connect to an instance and the insanity that would result from that, both from a programmers and users perspective.\n",
            "created_at": "2014-05-24T10:20:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/718#issuecomment-44083269",
            "id": 44083269,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/718",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDgzMjY5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/44083269/reactions"
            },
            "updated_at": "2014-05-24T10:23:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/44083269",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "NONE",
            "body": "I would advise caution over how NeoVim handles Python 2 and Python 3. Vim's handling of these two incompatible versions of Python has proven quite poor.\n\nVim's relationship with Python is complex and sub-optimal. In the simplest scenario, Vim is compiled without any Python support by default. If Vim is compiled with Python 2 support, then only the `:python` command is available. If Vim is compiled with Python 3 support, then only the `:python3` command is available. If Vim is compiled with Python 2 and Python 3 support (via `+python/dyn +python3/dyn`), then both `:python` and `:python3` commands are technically available, but counterintuitively, only one of those may be invoked in a given session. More explicitly, whichever call – \":python\" (for Python 2) or \":python3\" (for Python 3) – gets executed first will determine the Python interpreter used globally for the rest of the Vim session.\n\nThis issue of Vim locking the global Python interpreter to a specific version usually manifests in Vim plugins, where some are written for Python 2, and some are written for Python 3. For example, let's say a user has installed two plugins, \"py2plugin\" and \"py3plugin\", and has Vim compiled with `+python/dyn +python3/dyn`. py2plugin calls `:python`, and py3plugin calls `:python3`. If the user loads py2plugin before py3plugin, py3plugin will break because the `:python3` command is unavailable. If the user loads py3plugin before py2plugin, py2plugin will break because the `:python` command is unavailable. This is a nightmare for beginning Vim users to troubleshoot, and a constant annoyance to Vim experts who use Vim to write Python code.\n\nI think it's very important that NeoVim not follow the behavior of Vim. That is, calling `:python` should not make `:python3` unavailable, and vice-versa. I think NeoVim's planned architecture will make it possible to solve this issue by treating respective Python 2 and Python 3 interpreters as external processes, allowing both to co-exist.\n\nI think another word of warning is that a system call to `python` is now ambiguous in terms of which (incompatible) version of Python gets executed. Currently, `python3` is guaranteed to always execute some version of CPython 3.2 or newer, while for most operating systems,  `python` is symlinked to CPython 2.7. One can not assume that that `python` is always CPython 2, however.\n\n[pyenv](https://github.com/yyuu/pyenv), [virtualenv](https://github.com/pypa/virtualenv), and Python 3's built-in [pyvenv](https://docs.python.org/3/library/venv.html) can all be used to create (isolated) Python environments where `python` actually invokes CPython 3 or PyPy. This is the desired effect for these tools. Many times, these environments provide a `python2` command, which is symlinked to CPython 2.7, and serves as an analog to `python3` in guaranteeing that a Python 2 interpreter will be invoked.\n\nFor Vim, `:python` always means \"CPython 2\" because it is hard-coded to link against CPython 2. For NeoVim, `:python` can no longer guarantee that a CPython 2 interpreter gets invoked. I think this is A Good Thing. If I open NeoVim from an activated virtualenv, I want `:python` to call the `python` in my virtualenv. This has a very positive effect on plugins like [Syntastic](https://github.com/scrooloose/syntastic) and [jedi-vim](https://github.com/davidhalter/jedi-vim), which often only work properly in a virtualenv if the Python portion of the plugins ([pylint](http://www.pylint.org/) and [jedi](https://github.com/davidhalter/jedi), respectively) are, themselves installed in the virtualenv.\n\nFor this reason, I argue that NeoVim should declare `:python` as invoking the interpreter invoked by executing `python` in the user's environment at the time the user launches NeoVim. This is the behavior we Pythonistas expect for `python` on the command line, and it follows the principle of least assumption.\n\nSome plugins, however, may rely strictly on Python 2 syntax. In these situations, plugin authors and users may be confounded when their plugin works in NeoVim in some cases (when `python` points to CPython 2.7), but not others (when `python` points to CPython 3.4). For this reason, I would argue that NeoVim should provide an unambiguous `:python2` command, which invokes a CPython 2 interpreter.\n\nI would argue that the wrong thing to do is try to always map `:python` to call a version of CPython 2. This involves a lot of guesswork and corner cases that have to be paid in development time and obscure bugs. I know NeoVim will strive to be backwards-compatible with Vim plugins, however, this is one area where NeoVim should stand firm that Vim got it Wrong. Plugin maintainers will have two options:\n1. Update their plugins to be compatible across Python 2 and 3; or\n2. Use `:python2`. In the cases where they need to be compatible with Vim, too, they can abstract their calls from `:python`, and they can check `if has('python2')` to determine if that's what they need to invoke, somewhat similar to [how jedi-vim currently handles checking the Python command to execute](https://github.com/davidhalter/jedi-vim/blob/5e0bf559726f984f07352e7512c8eea36341e71a/autoload/jedi.vim#L279-L292).\n",
            "created_at": "2014-06-30T21:29:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/718#issuecomment-47589739",
            "id": 47589739,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/718",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTg5NzM5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/47589739/reactions"
            },
            "updated_at": "2014-06-30T21:41:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/47589739",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8517?v=4",
                "events_url": "https://api.github.com/users/gotgenes/events{/privacy}",
                "followers_url": "https://api.github.com/users/gotgenes/followers",
                "following_url": "https://api.github.com/users/gotgenes/following{/other_user}",
                "gists_url": "https://api.github.com/users/gotgenes/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gotgenes",
                "id": 8517,
                "login": "gotgenes",
                "node_id": "MDQ6VXNlcjg1MTc=",
                "organizations_url": "https://api.github.com/users/gotgenes/orgs",
                "received_events_url": "https://api.github.com/users/gotgenes/received_events",
                "repos_url": "https://api.github.com/users/gotgenes/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gotgenes/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gotgenes/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gotgenes"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nOn July 1, 2014 1:29:20 AM GMT+03:00, Chris Lasher notifications@github.com wrote:\n\n> I would advise caution over how NeoVim handles Python 2 and Python 3.\n> Vim's handling of these two incompatible versions of Python has proven\n> quite poor.\n> \n> Vim's relationship with Python is complex and sub-optimal. In the\n> simplest scenario, Vim is compiled without any Python support by\n> default. If Vim is compiled with Python 2 support, then only the\n> `:python` command is available. If Vim is compiled with Python 3\n> support, then only the `:python3` command is available. If Vim is\n> compiled with Python 2 and Python 3 support (via `+python/dyn\n> +python3/dyn`), then both `:python` and `:python3` commands are\n> technically available, but counterintuitively, only one of those may be\n\nThis bit depends on python compilation options. They may be compiled so that they both can be loaded at once, in this case vim disables this restriction. It is so in Gentoo (assuming you compile vim yourself), not so in Ubuntu.\n\n> invoked in a given session. More explicitly, whichever call – \":python\"\n> (for Python 2) or \":python3\" (for Python 3) – gets executed first will\n> determine the Python interpreter used globally for the rest of the Vim\n> session.\n> \n> This issue of Vim locking the global Python interpreter to a specific\n> version usually manifests in Vim plugins, where some are written for\n> Python 2, and some are written for Python 3. For example, let's say a\n\nSome are written for both though.\n\n> user has installed two plugins, \"py2plugin\" and \"py3plugin\", and has\n> Vim compiled with `+python/dyn +python3/dyn`. py2plugin calls\n> `:python`, and py3plugin calls `:python3`. If the user loads py2plugin\n> before py3plugin, py3plugin will break because the `:python3` command\n> is unavailable. If the user loads py3plugin before py2plugin, py2plugin\n> will break because the `:python` command is unavailable. This is a\n> nightmare for beginning Vim users to troubleshoot, and a constant\n> annoyance to Vim experts who use Vim to write Python code.\n> \n> I think it's very important that NeoVim not follow the behavior of Vim.\n> That is, calling `:python` should not make `:python3` unavailable, and\n> vice-versa. I think NeoVim's planned architecture will make it possible\n> to solve this issue by treating respective Python 2 and Python 3\n> interpreters as external processes, allowing both to co-exist.\n> \n> I think another word of warning is that a system call to `python` is\n> now ambiguous in terms of which (incompatible) version of Python gets\n> executed. Currently, `python3` is guaranteed to always execute some\n> version of CPython 3.2 or newer, while for most operating systems,\n> `python` is symlinked to CPython 2.7. One can not assume that that\n> `python` is always CPython 2, however.\n> \n> [pyenv](https://github.com/yyuu/pyenv),\n> [virtualenv](https://github.com/pypa/virtualenv), and Python 3's\n> built-in [pyvenv](https://docs.python.org/3/library/venv.html) can all\n> be used to create (isolated) Python environments where `python`\n> actually invokes CPython 3 or PyPy. This is the desired effect for\n> these tools. Many times, these environments provide a `python2`\n> command, which is symlinked to CPython 2.7, and serves as an analog to\n> `python3` in guaranteeing that a Python 2 interpreter will be invoked.\n> \n> For Vim, `:python` always means \"CPython 2\" because it is hard-coded to\n> link against CPython 2. For NeoVim, `:python` can no longer guarantee\n> that a CPython 2 interpreter gets invoked. I think this is A Good\n> Thing. If I open NeoVim from an activated virtualenv, I want `:python`\n> to call the `python` in my virtualenv. This has a very positive effect\n> on plugins like [Syntastic](https://github.com/scrooloose/syntastic)\n> and [jedi-vim](https://github.com/davidhalter/jedi-vim), which often\n> only work properly in a virtualenv if the Python portion of the plugins\n> ([pylint](http://www.pylint.org/) and\n> [jedi](https://github.com/davidhalter/jedi), respectively) are,\n> themselves installed in the virtualenv.\n> \n> For this reason, I argue that NeoVim should declare `:python` as\n> invoking the interpreter invoked by executing `python` in the user's\n> environment at the time the user launches NeoVim. This is the behavior\n> we Pythonistas expect for `python` on the command line, and it follows\n> the principle of least assumption.\n> \n> Some plugins, however, may rely strictly on Python 2 syntax. In these\n> situations, plugin authors and users may be confounded when their\n> plugin works in NeoVim in some cases (when `python` points to CPython\n> 2.7), but not others (when `python` points to CPython 3.4). For this\n> reason, I would argue that NeoVim should provide an unambiguous\n> `:python2` command, which invokes a CPython 2 interpreter.\n> \n> I would argue that the wrong thing to do is try to always map `:python`\n> to call a version of CPython 2. This involves a lot of guesswork and\n> corner cases that have to be paid in development time and obscure bugs.\n> I know NeoVim will strive to be backwards-compatible with Vim plugins,\n> however, this is one area where NeoVim should stand firm that Vim got\n> it Wrong. Plugin maintainers will have two options:\n> 1. Update their plugins to be compatible across Python 2 and 3; or\n> 2. Use `:python2`. In the cases where they need to be compatible with\n>    Vim, too, they can abstract their calls from `:python`, and they can\n>    check `if has('python2')` to determine if that's what they need to\n>    invoke, somewhat similar to how\n>    [jedi-vim](https://github.com/davidhalter/jedi-vim/blob/5e0bf559726f984f07352e7512c8eea36341e71a/autoload/jedi.vim#L279-L292)\n>    handles this currently.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/neovim/neovim/issues/718#issuecomment-47589739\n\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niQJNBAEBCgA3BQJTsil1MBwfMDI7PjIgHTg6PjswOSAQOzU6QTA9NEA+MjhHIDxr\ncC1wYXZAeWFuZGV4LnJ1PgAKCRBu+P2/AXZZIsg2EACP/Uw3TnyyszbzXgm+6qdE\nw+gEk8l0crxuw4rV4gf4atbuJDxtBGmQGOTTx13sUa6e9rZwBRjajaFlhPcIoP2E\nGZb1edBXZ0wNxNGwRm4XT9mEz3srG4jPhBgtatmvtstDKRRXuzCTJS3Xs7L3j8vP\n1DcNEHaAvoGT9tPpcOo2kZNgNkxTrwxAQ/EUFZRMKN72uXrYMyOyzQiwVvHu7LES\nCsuc53dn4hSKP/E7nwDa4C0XdrxYGqV7cHEq7SMjc+sOhkO8Mq0on9AWr3FRZ/Jf\nw6QUtx2Wnw30e8tB+0o7Q8cPiixxZrWMj4Vfk0JHZsp16tDEoSHwPeDGkPU2fi4z\nJnmUuqoXP6oMNaof2aHnscFNmjPivNu21+eJN/ecK7nM0e4mXdZnuAgN25uC8rx8\nMoSVGuTaZZZfbN5CmJ3QWOWYDH2h5Cn+az4itP9txl4X+m6NpSPEzFoctmMWOjWU\nchxIkjovU3kqzSI5pNmzEvQ0uBHLULgG1iOtn6NS6rCcNN/UD0Ql1fGboIPB+JE+\njKlQs1TEvqrW6jLcxyhKmMn9Mon7+mE6yrwS+IDkzz16s66evwdfpT/0X+Sek9yw\nz6TK2bNPYm02a9TIWP/JGBLz22NpcR/XNSETzmdETFPaVlZLzxMEkHJte25X9tIC\naYHoZCC7IF8XnfIMVUQuXQ==\n=PBKN\n-----END PGP SIGNATURE-----\n",
            "created_at": "2014-07-01T03:23:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/718#issuecomment-47613155",
            "id": 47613155,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/718",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NjEzMTU1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/47613155/reactions"
            },
            "updated_at": "2014-07-01T03:23:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/47613155",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think this is resolved: we have a pretty good idea of how the compatibility layer will behave.\n",
            "created_at": "2014-09-15T07:03:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/718#issuecomment-55558063",
            "id": 55558063,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/718",
            "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTU4MDYz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/55558063/reactions"
            },
            "updated_at": "2014-09-15T07:03:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/55558063",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comments": 13,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/718/comments",
    "created_at": "2014-05-14T00:10:43Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/718/events",
    "html_url": "https://github.com/neovim/neovim/issues/718",
    "id": 33450862,
    "labels": [
        {
            "color": "FBCA04",
            "default": false,
            "description": "discussion has run its course, need decision how to proceed",
            "id": 83851236,
            "name": "needs:decision",
            "node_id": "MDU6TGFiZWw4Mzg1MTIzNg==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/needs:decision"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "compatibility with Vim or older Neovim",
            "id": 109899712,
            "name": "compatibility",
            "node_id": "MDU6TGFiZWwxMDk4OTk3MTI=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/compatibility"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "plugins and Vim \"pack\"",
            "id": 117905553,
            "name": "plugin",
            "node_id": "MDU6TGFiZWwxMTc5MDU1NTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/plugin"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/718/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWUzMzQ1MDg2Mg==",
    "number": 718,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/718/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/718/timeline",
    "title": "What to do with the {python,ruby,perl...} ex commands?",
    "updated_at": "2024-09-04T14:02:13Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/718",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
        "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
        "followers_url": "https://api.github.com/users/tarruda/followers",
        "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
        "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/tarruda",
        "id": 842846,
        "login": "tarruda",
        "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
        "organizations_url": "https://api.github.com/users/tarruda/orgs",
        "received_events_url": "https://api.github.com/users/tarruda/received_events",
        "repos_url": "https://api.github.com/users/tarruda/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/tarruda"
    }
}