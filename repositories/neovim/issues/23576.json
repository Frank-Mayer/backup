{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\nCurrently, [Vim has the built-in `state` command](https://vim-jp.org/vimdoc-en/builtin.html#state()).\r\nI believe this does not currently exist in Neovim.\r\n\r\nIf it doesn't, I think there's a case to be made to add it. If Neovim has similar functionality, do point me in the right direction.\r\n\r\n(I actually only want to check for `o` and `m`, in case that affects the availability in Neovim. I note that we do have `mode` via `vim.api.nvim_get_mode()`.)\n\n### Expected behavior\n\n`state` functionality exists as a command as in Vim.",
    "closed_at": "2023-08-21T06:40:44Z",
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Obligatory link: https://github.com/vim/vim/issues/12115#issuecomment-1460041935\r\n\r\nNow add to that the additional Lua and libUV loop states relevant to Neovim, and you'll see why this is not really feasible. You'll get better answers if you shared the concrete and complete use case you have.",
            "created_at": "2023-05-10T21:12:29Z",
            "html_url": "https://github.com/neovim/neovim/issues/23576#issuecomment-1542816407",
            "id": 1542816407,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23576",
            "node_id": "IC_kwDOAPphoM5b9YKX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1542816407/reactions"
            },
            "updated_at": "2023-05-10T21:12:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1542816407",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "NONE",
            "body": "Ah I see, thanks for the link!\r\n\r\nWell, for what it's worth, the concrete thing I'm looking to do is relating to the `showcmdloc` with `%S` in e.g. the status line.\r\n\r\nI'd like to check whether there's a current pending operator state, and if so only then include a section of my status line with e.g. a background (which I don't want to show otherwise). Alternatively if there's a way to check what `%S` would expand to that would work but I couldn't find anything. The results I found online pointed to using `status()` in Vim.\r\n\r\n(Precisely, I'm using Lualine to add this section, and for the function condition of when to show, I want to return as above. Without that, it expands to an empty space or such I believe, and I'm then getting an empty area with the background colour.)",
            "created_at": "2023-05-10T21:18:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/23576#issuecomment-1542822503",
            "id": 1542822503,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23576",
            "node_id": "IC_kwDOAPphoM5b9Zpn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1542822503/reactions"
            },
            "updated_at": "2023-05-10T21:18:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1542822503",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31999802?v=4",
                "events_url": "https://api.github.com/users/AlexSWall/events{/privacy}",
                "followers_url": "https://api.github.com/users/AlexSWall/followers",
                "following_url": "https://api.github.com/users/AlexSWall/following{/other_user}",
                "gists_url": "https://api.github.com/users/AlexSWall/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/AlexSWall",
                "id": 31999802,
                "login": "AlexSWall",
                "node_id": "MDQ6VXNlcjMxOTk5ODAy",
                "organizations_url": "https://api.github.com/users/AlexSWall/orgs",
                "received_events_url": "https://api.github.com/users/AlexSWall/received_events",
                "repos_url": "https://api.github.com/users/AlexSWall/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/AlexSWall/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/AlexSWall/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/AlexSWall"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Well, the simplest thing would be to check for `''` and return `nil` in that case, then.\r\n\r\nAlso, https://github.com/nvim-lualine/lualine.nvim/issues/949",
            "created_at": "2023-05-10T21:21:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/23576#issuecomment-1542825476",
            "id": 1542825476,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23576",
            "node_id": "IC_kwDOAPphoM5b9aYE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1542825476/reactions"
            },
            "updated_at": "2023-05-10T21:22:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1542825476",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "NONE",
            "body": "Yup, I'm making use of [nvim-lualine/lualine.nvim#949](https://github.com/nvim-lualine/lualine.nvim/issues/949) to obtain `%S` working as expected in it, I believe. Incomplete operators do display when desired.\r\n\r\nI'm not sure how I'm to check for `''` as I'm not getting the result of the expansion myself. If you know of a way to check what `\"%S\"` would expand to if it were to be in the status line from a Lua function/etc., that would solve my issue. I checked and the function predicate does not receive the expansion result as a parameter.",
            "created_at": "2023-05-10T21:26:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/23576#issuecomment-1542830604",
            "id": 1542830604,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23576",
            "node_id": "IC_kwDOAPphoM5b9boM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1542830604/reactions"
            },
            "updated_at": "2023-05-10T21:26:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1542830604",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31999802?v=4",
                "events_url": "https://api.github.com/users/AlexSWall/events{/privacy}",
                "followers_url": "https://api.github.com/users/AlexSWall/followers",
                "following_url": "https://api.github.com/users/AlexSWall/following{/other_user}",
                "gists_url": "https://api.github.com/users/AlexSWall/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/AlexSWall",
                "id": 31999802,
                "login": "AlexSWall",
                "node_id": "MDQ6VXNlcjMxOTk5ODAy",
                "organizations_url": "https://api.github.com/users/AlexSWall/orgs",
                "received_events_url": "https://api.github.com/users/AlexSWall/received_events",
                "repos_url": "https://api.github.com/users/AlexSWall/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/AlexSWall/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/AlexSWall/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/AlexSWall"
            }
        },
        {
            "author_association": "NONE",
            "body": "Hi, sorry for resurrecting this thread, but this is something I'd need for the Clojure indentation script to provide a way to detect if the `=` operator is what triggered the indentation.\r\n\r\nThe desired indentation behaviour is as such (to mimic the Clojure indentation in other editors such as Emacs and VS Code):\r\n\r\n1. In insert mode, in a multline string, pressing enter should move down a line and indent to string indentation level.\r\n2. In normal mode in a multiline string, pressing `o` should create a new line indented to string indentation level.\r\n3. In normal mode, indenting a multiline string with `=` should **not** modify indentation within that string.\r\n   - Otherwise reformatting the whole file, or part of a file, could break whitespace significant/intentionally formatted multi-line strings.\r\n\r\nThe following [code](https://github.com/clojure-vim/clojure.vim/pull/31/files#diff-d0fbef311a440654e941cf93c497aa88f1d0a079d39aac2a45562fffd82c9829R135-R144) works in Vim, but not in Neovim since it lacks the `state()` function.\r\n\r\n```vim\r\nreturn v:operator ==# '=' && state('o') ==# 'o'\r\n```\r\n\r\nUnfortunately checking only the `v:operator` variable alone doesn't work as the value sticks around after running it.  The sytax function could reset the `v:operator` variable, but that would break multi-line indentation with `=` (e.g. `gg=G`).\r\n\r\n(Now of course if there's a better way of preventing indentation within multi-line strings with `=` I'd definitely want to learn about that too.  E.g. perhaps it's possible to detect the inverse condition?)",
            "created_at": "2023-08-12T12:16:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/23576#issuecomment-1675883556",
            "id": 1675883556,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23576",
            "node_id": "IC_kwDOAPphoM5j4_Qk",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1675883556/reactions"
            },
            "updated_at": "2023-08-12T12:28:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1675883556",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/26504626?v=4",
                "events_url": "https://api.github.com/users/axvr/events{/privacy}",
                "followers_url": "https://api.github.com/users/axvr/followers",
                "following_url": "https://api.github.com/users/axvr/following{/other_user}",
                "gists_url": "https://api.github.com/users/axvr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/axvr",
                "id": 26504626,
                "login": "axvr",
                "node_id": "MDQ6VXNlcjI2NTA0NjI2",
                "organizations_url": "https://api.github.com/users/axvr/orgs",
                "received_events_url": "https://api.github.com/users/axvr/received_events",
                "repos_url": "https://api.github.com/users/axvr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/axvr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/axvr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/axvr"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/23576/comments",
    "created_at": "2023-05-10T20:34:05Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/23576/events",
    "html_url": "https://github.com/neovim/neovim/issues/23576",
    "id": 1704594299,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c7def8",
            "default": false,
            "description": "",
            "id": 109899557,
            "name": "vimscript",
            "node_id": "MDU6TGFiZWwxMDk4OTk1NTc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/vimscript"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 520282574,
            "name": "event-loop",
            "node_id": "MDU6TGFiZWw1MjAyODI1NzQ=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/event-loop"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "save/restore editor state: shada, context, ctx",
            "id": 4449264023,
            "name": "editor-state",
            "node_id": "LA_kwDOAPphoM8AAAABCTJhlw",
            "url": "https://api.github.com/repos/neovim/neovim/labels/editor-state"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/23576/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 111,
        "created_at": "2023-02-02T14:11:43Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
            "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
            "followers_url": "https://api.github.com/users/bfredl/followers",
            "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
            "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bfredl",
            "id": 1363104,
            "login": "bfredl",
            "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
            "organizations_url": "https://api.github.com/users/bfredl/orgs",
            "received_events_url": "https://api.github.com/users/bfredl/received_events",
            "repos_url": "https://api.github.com/users/bfredl/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bfredl"
        },
        "description": "",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/36",
        "id": 8997654,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/36/labels",
        "node_id": "MI_kwDOAPphoM4AiUsW",
        "number": 36,
        "open_issues": 143,
        "state": "open",
        "title": "0.10",
        "updated_at": "2023-08-21T15:19:13Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/36"
    },
    "node_id": "I_kwDOAPphoM5lmgt7",
    "number": 23576,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/23576/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/23576/timeline",
    "title": "Equivalent of Vim's `state()` function?",
    "updated_at": "2023-08-21T08:46:51Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/23576",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/31999802?v=4",
        "events_url": "https://api.github.com/users/AlexSWall/events{/privacy}",
        "followers_url": "https://api.github.com/users/AlexSWall/followers",
        "following_url": "https://api.github.com/users/AlexSWall/following{/other_user}",
        "gists_url": "https://api.github.com/users/AlexSWall/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/AlexSWall",
        "id": 31999802,
        "login": "AlexSWall",
        "node_id": "MDQ6VXNlcjMxOTk5ODAy",
        "organizations_url": "https://api.github.com/users/AlexSWall/orgs",
        "received_events_url": "https://api.github.com/users/AlexSWall/received_events",
        "repos_url": "https://api.github.com/users/AlexSWall/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/AlexSWall/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/AlexSWall/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/AlexSWall"
    }
}