{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "Hey all, so one of the ongoing cleanup efforts in the neovim codebase, has been string handling. Recently, I proposed replacing `strncpy` and its variants (`STRNCPY` and `vim_strncpy`) with `(x)strlcpy` (#743, et al.) , because it's safer. *\r\n\r\nWhile this didn't go entirely to plan (issue #858) because of slight differences in behaviour **, on the whole I think this is a positive evolution. What's clear is that these changes need to be a bit more carefully planned and reviewed, no one person can hope to catch all the subtleties.\r\n\r\nThat said, there's room for improvement on the string front in other ways as well:\r\n1. We should create a wiki page detailing the best practices when dealing with strings. What functions do we use when? What are common idioms? (e.g.: `stpcpy` for repeat concatenating, ...)\r\n2. Are there any new functions that we could introduce? In a few others issues I've mentioned this. For some cases neither `strncpy + NUL-termination` nor `strlcpy` nor `stp(n)cpy` are optimal. I'll describe below what I can think of.\r\n## Example situations\r\n\r\nSometimes it's easiest to come up with better approaches by handling a few real life situations. Let's look at something @dougschneider [bumped into recently](https://github.com/dougschneider/neovim/commit/ded825dae7d04c0dda6b6917c62d8835742997ea#commitcomment-6681351).\r\n\r\nThe original code:\r\n\r\n``` c\r\n   STRCPY(IObuff, \":return \");\r\n   STRNCPY(IObuff + 8, s, IOSIZE - 8);\r\n    if (STRLEN(s) + 8 >= IOSIZE)\r\n      STRCPY(IObuff + IOSIZE - 4, \"...\");\r\n```\r\n\r\nThe rework as proposed [here](https://github.com/dougschneider/neovim/commit/955122a7cab6c716c402982d834d448e43bf37a3). There might be a small bug lurking in the fact that `sizeof(ret)` is 9 and thus `IObuff + sizeof(ret)` would be after the copied NUL byte.\r\n\r\n``` c\r\n  const char ret[] = \":return \";\r\n  STRCPY(IObuff, ret);\r\n  size_t slen = STRLCPY(IObuff + sizeof(ret), s, IOSIZE - sizeof(ret));\r\n  if (slen + sizeof(ret) >= IOSIZE)\r\n      STRCPY(IObuff + IOSIZE - 4, \"...\");\r\n```\r\n\r\nA few alternatives:\r\n\r\n``` c\r\n// compact and correct, but possibly a bit slower because of the first strlcpy call\r\nsize_t startlen = STRLCPY(IObuff,  \":return \", IOSIZE); \r\nif (STRLCPY(IObuff + startlen, s, IOSIZE - startlen) >= IOSIZE - startlen) {\r\n  // string overflowed, signal truncation with ellipsis\r\n  memcpy(IObuff + IOSIZE - 4, \"...\", 4);\r\n}\r\n```\r\n\r\n``` c\r\n// faster, but less compact and less obvious (the bug from above has been corrected by deducting one from sizeof, making it even uglier. However it has another serious error: unsigned wraparound.\r\nconst char ret[] = \":return \";\r\nmemcpy(IObuff, ret, sizeof(ret) - 1);\r\nif (STRLCPY(IObuff + sizeof(ret) - 1, s, IOSIZE - sizeof(ret) - 1) >= IOSIZE - sizeof(ret) - 1) {\r\n  // string overflowed, signal truncation with ellipsis\r\n  memcpy(IObuff + IOSIZE - 4, \"...\", 4);\r\n}\r\n```\r\n\r\n``` c\r\n// same as the one just above, assuming that a compiler knows that `strlen(string literal)` == `sizeof(string literal) - 1`, slightly prettier\r\nconst char ret[] = \":return \";\r\nmemcpy(IObuff, ret, strlen(ret));\r\nif (STRLCPY(IObuff + strlen(ret), s, IOSIZE - strlen(ret)) >= IOSIZE - strlen(ret)) {\r\n  // string overflowed, signal truncation with ellipsis\r\n  memcpy(IObuff + IOSIZE - 4, \"...\", 4);\r\n}\r\n```\r\n\r\nSo we get to choose between speed, flexibility (not having to count the amount of chars in `\":return \"`) and readability/beauty (pick any two). Why can't we have all three?\r\n\r\nIt's perhaps possible that we lack the functions or macros for this. I thought for example that for string literals, the optimum in safety and speed could be reached with this:\r\n\r\n``` c\r\n// version of `strlcpy` that will only work for string literals, optimal on both \r\n// smart and stupid compilers. Compiles down to a pure `memcpy` if the size of the\r\n// buffer is known at compile time. Otherwise it's just a branch and a `memcpy`.\r\n// note that this contains a trick to guard against using it with non-string literals (though\r\n// this can be circumvented). Note that most of the efficiency gained by using this macro\r\n// can probably also be obtained by hoisting `xstrlcpy` into the header and annotating it\r\n// with `static inline`.\r\n// @return the number of characters in the string (strlen(str))\r\n#define SSTRLCPY(dst, src, size) \\\r\n  ( \\\r\n    memcpy((dst), \"\" src, (sizeof(src) < (size)) ? sizeof(src) : (size)), \\\r\n    (dst)[((sizeof(src) < (size)) ? sizeof(src) : (size)) - 1] = '\\0', \\\r\n    sizeof(src) - 1 \\\r\n  )\r\n```\r\n\r\nThis would enable us to write:\r\n\r\n``` c\r\n  size_t total = SSTRLCPY(IObuff, \":return \", IOSIZE);\r\n  // we could check for truncation now: if (total >= IOSIZE) { ... }\r\n\r\n  total += STRLCPY(IObuff + total, s, IOSIZE - total);\r\n  if (total >= IOSIZE) {\r\n      // string overflowed, signal truncation with ellipsis\r\n      SSTRLCPY(IObuff + IOSIZE - 4, \"...\", 4); // same as memcpy(IObuff + IOSIZE - 4, \"...\", 4);\r\n  }\r\n```\r\n\r\nThis still does something redundant. We don't need to actually calculate the string length of `s`, we use it just to check for truncation. Depending on the size of `s`, we might be doing too much work.\r\n\r\nPerhaps we can make a function that just returns if the string was truncated or not:\r\n\r\n``` c\r\n/// xstrucpy - copy min(`strsize`, `bufsize` - 1) bytes, NUL terminates\r\n///\r\n/// If the string length is known, this function provides a few advantages over\r\n/// `(x)strlcpy`:\r\n///\r\n/// 1. Usually we want to know if truncation happened, not by how much.\r\n///    Truncation happens when the `src` string is larger than the `dst` buffer.\r\n///    An idiomatic way of using this is the example below.\r\n/// 2. `(x)strlcpy` calculates `strlen`, which is sometimes already known.\r\n/// 3. `xstrucpy` can be used with Pascal strings (non-NUL terminated strings).\r\n///\r\n/// Example:\r\n///\r\n/// @code{.c}\r\n///   if (xstrucpy(buf, str, bufsize, str_len) < str_len) {\r\n///     // truncation happened, deal with it\r\n///   }\r\n/// @endcode\r\n///\r\n/// @return the number of bytes copied (without the NUL terminator)\r\n///\r\n/// @see xstrlcpy\r\nsize_t xstrucpy(char *restrict dst,\r\n                const char *restrict src,\r\n                size_t bufsize,\r\n                size_t strsize)\r\n{\r\n  size_t cpy = (strsize >= bufsize) ? bufsize - 1 : strsize;\r\n\r\n  if (cpy) {\r\n    memcpy(dst, src, cpy);\r\n    dst[cpy] = '\\0';\r\n  }\r\n\r\n  return cpy;\r\n}\r\n\r\n/// xstracpy - copies `src` into `dst`, %NUL terminates `dst`\r\n///\r\n/// TODO(aktau): if this shows up in profiler traces, try to find a version\r\n///              that doesn't read `src` memory twice. This implementation should\r\n///              be plenty fast though. Glibc (among others) have a highly\r\n///              optimized memchr and memcpy. Note that I probably made an off-by-one \r\n///              error here, implementation untested.\r\n///\r\n/// @note This function can also be used with non-NUL terminated strings as\r\n///       long as the underlying buffer of `src` has at least `bufsize`\r\n///       bytes. So even though this function will work in more cases than\r\n///       `strlcpy`, it's still advisable to use proper Pascal string\r\n///       functions for Pascal strings.\r\n///\r\n/// @return false if the string was truncated, true if not. In the case of a\r\n///         non-NUL terminated string, will always report that the\r\n///         string has been truncated.\r\nbool xstracpy(char *restrict dst, const char *restrict src, size_t bufsize)\r\n{\r\n  // find the NUL-byte, if it exists\r\n  char *p = memchr(src, '\\0', bufsize);\r\n  return src + xstrucpy(dst, src, bufsize, p ? p - src : bufsize) <= p;\r\n}\r\n\r\n// as a bonus, we can now implement `xstrlcpy` as a special case of `xstrucpy`, this would\r\n// invalidate the comment about the headerized versions efficiency in the macro though.\r\nsize_t xstrlcpy(char *restrict dst, const char *restrict src, size_t size)\r\n{\r\n  size_t ret = strlen(src);\r\n  xstrucpy(dst, src, size, ret);\r\n  return ret;\r\n}\r\n```\r\n\r\nSo weaponized with `xstracpy`, we could possibly make this optimally efficient and a bit cleaner still:\r\n\r\n``` c\r\n  size_t offset = SSTRLCPY(IObuff, \":return \", IOSIZE);\r\n  // we could check for truncation now: if (total >= IOSIZE) { ... }\r\n\r\n  if (!xstracpy(IObuff + offset, s, IOSIZE - offset)) {\r\n    // string overflowed, signal truncation with ellipsis\r\n    SSTRLCPY(IObuff + IOSIZE - 4, \"...\", 4); // same as memcpy(IObuff + IOSIZE - 4, \"...\", 4);\r\n  }\r\n```\r\n\r\nI haven't thought of a good way of getting rid of the `-4` and `4` yet that wouldn't introduce a way-too-one-off function.\r\n\r\nDisadvantages? Sure: proliferation of string functions. The more we have of them, the more choice-stress people are going to get when coding something up. Ideally, the best function should be obvious from the context, and available...\r\n\r\n`*` Clever readers will notice that `strlcpy` is not safer (or less safe) than `vim_strncpy`, which always NUL-terminates. However we do have the policy of adhering to standard string function behaviour to avoid confusion and `strncpy` doesn't always NUL-terminate, so the name `vim_strncpy` is confusing.\r\n\r\n`**` `strncpy` always fills the destination buffer with zeroes after the string, `strlcpy` doesn't.\r\n\r\nBTW: I'm calling this phase 1 because this will keep the representation of strings in vim intact, namely C strings. Phase 2 might be a transition to using Pascal string (be they [sds strings](https://github.com/antirez/sds) or @tarruda's explicit struct strings), or it might be something else entirely, or it might not exist.\r\n\r\nThis post is subject to later editing.\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "String handling is really important in a text editor and the current codebase doesn't have good abstractions for string handling (even though we've been slowly improving it). It's a miracle how much can be accomplished with so little abstraction (and a lot of low level code).\n\nWhen dynamic strings are needed, for example, growable arrays are used! The garray API was made to solve two cases: dynamic strings and dynamic arrays. It fails to provide a nice API for both cases.\n\nI'm strongly in favor of sds strings instead of struct-based Pascal strings. I think sds' design makes it perfect for Neovim's situation: mix of classical C strings and length-aware strings.\n",
            "created_at": "2014-06-18T12:34:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/859#issuecomment-46429356",
            "id": 46429356,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/859",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDI5MzU2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/46429356/reactions"
            },
            "updated_at": "2014-06-18T12:34:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/46429356",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/207795?v=4",
                "events_url": "https://api.github.com/users/felipecrv/events{/privacy}",
                "followers_url": "https://api.github.com/users/felipecrv/followers",
                "following_url": "https://api.github.com/users/felipecrv/following{/other_user}",
                "gists_url": "https://api.github.com/users/felipecrv/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/felipecrv",
                "id": 207795,
                "login": "felipecrv",
                "node_id": "MDQ6VXNlcjIwNzc5NQ==",
                "organizations_url": "https://api.github.com/users/felipecrv/orgs",
                "received_events_url": "https://api.github.com/users/felipecrv/received_events",
                "repos_url": "https://api.github.com/users/felipecrv/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/felipecrv/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/felipecrv/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/felipecrv"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I'm strongly in favor of sds strings instead of struct-based Pascal strings. I think sds' design makes it perfect for Neovim's situation: mix of classical C strings and length-aware strings.\n\nI like sds' design and outlook as well and I admit it looks tempting because it's so easy to mix both. But I already envision that it won't be very easy. Before doing it we'd need a large-scale constification of the code base wherever possible. Because after passing a sds string to a function accepting plain `char *` or `char_u *`, I wouldn't trust it anymore.\n",
            "created_at": "2014-06-18T12:38:18Z",
            "html_url": "https://github.com/neovim/neovim/issues/859#issuecomment-46429639",
            "id": 46429639,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/859",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDI5NjM5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/46429639/reactions"
            },
            "updated_at": "2014-06-18T12:38:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/46429639",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I like sds' design and outlook as well and I admit it looks tempting because it's so easy to mix both. But I already envision that it won't be very easy.\n\nI agree with you. We should be very careful and calm down everyone who's willing to do big refactorings torwards sds.\n\n> Before doing it we'd need a large-scale constification of the code base wherever possible.\n\nDo we have a entry-level task for this?\n\n> Because after passing a sds string to a function accepting plain char \\* or char_u *, I wouldn't trust it anymore.\n\nExactly. This is also true for garray based strings. If we attack only the garray cases I would say sds already paid itself.\n",
            "created_at": "2014-06-18T12:46:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/859#issuecomment-46430368",
            "id": 46430368,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/859",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDMwMzY4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/46430368/reactions"
            },
            "updated_at": "2022-12-08T23:25:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/46430368",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/207795?v=4",
                "events_url": "https://api.github.com/users/felipecrv/events{/privacy}",
                "followers_url": "https://api.github.com/users/felipecrv/followers",
                "following_url": "https://api.github.com/users/felipecrv/following{/other_user}",
                "gists_url": "https://api.github.com/users/felipecrv/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/felipecrv",
                "id": 207795,
                "login": "felipecrv",
                "node_id": "MDQ6VXNlcjIwNzc5NQ==",
                "organizations_url": "https://api.github.com/users/felipecrv/orgs",
                "received_events_url": "https://api.github.com/users/felipecrv/received_events",
                "repos_url": "https://api.github.com/users/felipecrv/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/felipecrv/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/felipecrv/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/felipecrv"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Exactly. This is also true for garray based strings. If we attack only the garray cases I would say sds already paid itself.\n\nBabysteps, let's whip garray into shape first :). I think MSan is going to be a big help, if it works as advertised.\n",
            "created_at": "2014-06-18T13:18:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/859#issuecomment-46433823",
            "id": 46433823,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/859",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDMzODIz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/46433823/reactions"
            },
            "updated_at": "2014-06-18T13:18:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/46433823",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@aktau, in your examples you use `sizeof(ret)`, which returns the size of the pointer `ret` and not the length of the string to which `ret` points.  Only works for `ret=\":return \"` and 64-bit platforms.\n",
            "created_at": "2014-06-18T13:47:50Z",
            "html_url": "https://github.com/neovim/neovim/issues/859#issuecomment-46437270",
            "id": 46437270,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/859",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDM3Mjcw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/46437270/reactions"
            },
            "updated_at": "2014-06-18T13:47:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/46437270",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2077655?v=4",
                "events_url": "https://api.github.com/users/oni-link/events{/privacy}",
                "followers_url": "https://api.github.com/users/oni-link/followers",
                "following_url": "https://api.github.com/users/oni-link/following{/other_user}",
                "gists_url": "https://api.github.com/users/oni-link/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/oni-link",
                "id": 2077655,
                "login": "oni-link",
                "node_id": "MDQ6VXNlcjIwNzc2NTU=",
                "organizations_url": "https://api.github.com/users/oni-link/orgs",
                "received_events_url": "https://api.github.com/users/oni-link/received_events",
                "repos_url": "https://api.github.com/users/oni-link/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/oni-link/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/oni-link/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/oni-link"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@oni-link completely correct, this was noticed by @dougschneider as well. I'll change the examples to use an array instead of a pointer.\n",
            "created_at": "2014-06-18T13:53:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/859#issuecomment-46438003",
            "id": 46438003,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/859",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDM4MDAz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/46438003/reactions"
            },
            "updated_at": "2014-06-18T13:54:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/46438003",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I agree with @philix 's preference towards using sds strings. An additional reason to do so is that Neovim has been pushing vim to use more standards. Thus I think having our own internal string is moving the wrong direction. Using a more standard string such as sds will make it easier for newcomers to adapt. As well the documentation is already available and sds is time tested.\n",
            "created_at": "2014-06-18T14:49:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/859#issuecomment-46445549",
            "id": 46445549,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/859",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDQ1NTQ5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/46445549/reactions"
            },
            "updated_at": "2014-06-18T14:49:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/46445549",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2281579?v=4",
                "events_url": "https://api.github.com/users/dougschneider/events{/privacy}",
                "followers_url": "https://api.github.com/users/dougschneider/followers",
                "following_url": "https://api.github.com/users/dougschneider/following{/other_user}",
                "gists_url": "https://api.github.com/users/dougschneider/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dougschneider",
                "id": 2281579,
                "login": "dougschneider",
                "node_id": "MDQ6VXNlcjIyODE1Nzk=",
                "organizations_url": "https://api.github.com/users/dougschneider/orgs",
                "received_events_url": "https://api.github.com/users/dougschneider/received_events",
                "repos_url": "https://api.github.com/users/dougschneider/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dougschneider/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dougschneider/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dougschneider"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I agree with @philix 's preference towards using sds strings. An additional reason to do so is that Neovim has been pushing vim to use more standards. Thus I think having our own internal string is moving the wrong direction. Using a more standard string such as sds will make it easier for newcomers to adapt. As well the documentation is already available and sds is time tested.\n\nI think most people would be in favor of saner string handling, that's also likely to be more performant, but we can't do it in one go. Which is why I propose improving things in waves. And setting best practices at every stage.\n",
            "created_at": "2014-06-18T15:00:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/859#issuecomment-46447210",
            "id": 46447210,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/859",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDQ3MjEw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/46447210/reactions"
            },
            "updated_at": "2014-06-18T15:00:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/46447210",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@aktau  \n\nI just got some free time to fully read this. Regarding your statement \"However it has another serious error: unsigned wraparound.\" in the following:\n\n``` C\n// faster, but less compact and less obvious (the bug from above has been corrected by deducting one from sizeof, making it even uglier. However it has another serious error: unsigned wraparound.\nconst char ret[] = \":return \";\nmemcpy(IObuff, ret, sizeof(ret) - 1);\nif (STRLCPY(IObuff + sizeof(ret) - 1, s, IOSIZE - sizeof(ret) - 1) >= IOSIZE - sizeof(ret) - 1) {\n  // string overflowed, signal truncation with ellipsis\n  memcpy(IObuff + IOSIZE - 4, \"...\", 4);\n}\n```\n\nIs this really an issue? I assume you're referring to the `sizeof(ret) - 1` underflowing and becoming large (although correct me if I'm misunderstanding). However, ret can never be less than `\"\"` which still has `sizeof(ret) == 1`. I guess we could be concerned with future changes causing an issue, but I don't think a mistake would be likely, and it would get noticed quite quickly. So I think `sizeof(ret) - 1` is safe. And since that's ugly, let's just use `strlen`. If it's optimized sweet, if not, finding a string length so short should cause minimal inefficiency (yes it could change to be longer, but I can't imagine it ever being long enough to cause a bother).\n",
            "created_at": "2014-06-20T02:56:29Z",
            "html_url": "https://github.com/neovim/neovim/issues/859#issuecomment-46640450",
            "id": 46640450,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/859",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NjQwNDUw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/46640450/reactions"
            },
            "updated_at": "2014-06-20T02:56:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/46640450",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2281579?v=4",
                "events_url": "https://api.github.com/users/dougschneider/events{/privacy}",
                "followers_url": "https://api.github.com/users/dougschneider/followers",
                "following_url": "https://api.github.com/users/dougschneider/following{/other_user}",
                "gists_url": "https://api.github.com/users/dougschneider/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dougschneider",
                "id": 2281579,
                "login": "dougschneider",
                "node_id": "MDQ6VXNlcjIyODE1Nzk=",
                "organizations_url": "https://api.github.com/users/dougschneider/orgs",
                "received_events_url": "https://api.github.com/users/dougschneider/received_events",
                "repos_url": "https://api.github.com/users/dougschneider/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dougschneider/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dougschneider/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dougschneider"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> However, ret can never be less than \"\" which still has sizeof(ret) == 1. I guess we could be concerned with future changes causing an issue, but I don't think a mistake would be likely, and it would get noticed quite quickly. So I think sizeof(ret) - 1 is safe. And since that's ugly, let's just use strlen. If it's optimized sweet, if not, finding a string length so short should cause minimal inefficiency (yes it could change to be longer, but I can't imagine it ever being long enough to cause a bother).\n\nYou are, of course, correct. Most compilers would turn `strlen` into `sizeof - 1` for string literals anyway. And the underflow is indeed, very unlikely.\n\nThat said, the `SSTRLCPY` macro avoids all that and makes the entire thing quite a bit cleaner and less error-prone to rewrite, don't you think?\n\n``` c\n  size_t offset = SSTRLCPY(IObuff, \":return \", IOSIZE);\n  // we could check for truncation now: if (total >= IOSIZE) { ... }\n\n  if (!xstracpy(IObuff + offset, s, IOSIZE - offset)) {\n    // string overflowed, signal truncation with ellipsis\n    SSTRLCPY(IObuff + IOSIZE - 4, \"...\", 4); // same as memcpy(IObuff + IOSIZE - 4, \"...\", 4);\n  }\n```\n\nAs I mentioned in the first post, we can reach the same efficiency by hoisting `xstrlcpy` into the `memory.h` header and letting the compiler figure things out. That would leave us with 3 general purpose safe string functions:\n- `xmemcpyz`: NUL-terminating `memcpy`, copies `n` bytes from `src`, always writes `n + 1` bytes (so need to pass `realbuflen - 1`).\n- `xstrucpy`: basically a truncating `memcpyz`, writes `min(buflen, strlen)` bytes, returns bytes written.\n- `xstracpy`: special case of `xstrucpy`, writes `min(buflen, strlen)` bytes while **only reading max `buflen` bytes**, signals truncation as true/false return value.\n- `xstrlcpy`: special case of `xstrucpy`, writes `min(buflen, strlen)` bytes while **reading `strlen` bytes**, returns `strlen`.\n\nAnd then of course their macro versions for the vim `char_u *` mess, but I don't count those as separate.\n\nI'm open to suggestions! (for names, functionality, ...). A good set of primitives that are safe and easy to use would be fantastic.\n",
            "created_at": "2014-06-20T06:57:00Z",
            "html_url": "https://github.com/neovim/neovim/issues/859#issuecomment-46650022",
            "id": 46650022,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/859",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NjUwMDIy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/46650022/reactions"
            },
            "updated_at": "2014-06-20T06:58:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/46650022",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "[Better String Library (bstrlib)](http://bstring.sourceforge.net/) looks like another good alternative besides SDS, but [this issue](https://github.com/websnarf/bstrlib/issues/5) suggests that it is targeting older codebases. Its [comparison table](http://bstring.sourceforge.net/features.html) does not mention SDS.\r\n\r\n[Counterarguments against SDS](https://news.ycombinator.com/item?id=33843894): \r\n> - you can't safely change its length in place and any potential change has to return the modified pointer somehow\r\n> - You can't pass SDS strings to functions that accept `char **`\r\n",
            "created_at": "2018-09-01T09:46:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/859#issuecomment-417847021",
            "id": 417847021,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/859",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzg0NzAyMQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/417847021/reactions"
            },
            "updated_at": "2022-12-08T23:27:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/417847021",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "sds doesn't work on windows by default. Very based.\r\n\r\nFrom the looks of it it doesn't particularly well-maintained either.",
            "created_at": "2023-11-23T10:17:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/859#issuecomment-1824127557",
            "id": 1824127557,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/859",
            "node_id": "IC_kwDOAPphoM5sufpF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1824127557/reactions"
            },
            "updated_at": "2023-11-23T10:21:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1824127557",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "what about bstrlib? https://github.com/neovim/neovim/issues/859#issuecomment-417847021",
            "created_at": "2023-11-23T12:08:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/859#issuecomment-1824322243",
            "id": 1824322243,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/859",
            "node_id": "IC_kwDOAPphoM5svPLD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1824322243/reactions"
            },
            "updated_at": "2023-11-23T12:08:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1824322243",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Is a string handling library actually necessary? I've discussed it quickly with a few people and the general reception has been lukewarm. I think this issue could use some focusing and an actual problem statement. Is the problem that we have too many buffer overflows? Is the performance of common string operations too slow?\n\nAlso it's highly likely we'll basically vendor whatever implementation we go with because C and abandonware is like peanut butter and jelly, so we'll also need to take that into consideration.",
            "created_at": "2023-11-23T13:37:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/859#issuecomment-1824453036",
            "id": 1824453036,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/859",
            "node_id": "IC_kwDOAPphoM5svvGs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1824453036/reactions"
            },
            "updated_at": "2023-11-23T13:37:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1824453036",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        }
    ],
    "comments": 14,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/859/comments",
    "created_at": "2014-06-17T22:36:38Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/859/events",
    "html_url": "https://github.com/neovim/neovim/issues/859",
    "id": 35938828,
    "labels": [
        {
            "color": "FEF2C0",
            "default": false,
            "description": "issues reporting performance problems",
            "id": 101930601,
            "name": "performance",
            "node_id": "MDU6TGFiZWwxMDE5MzA2MDE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/performance"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "changes that are not features or bugfixes",
            "id": 106949155,
            "name": "refactor",
            "node_id": "MDU6TGFiZWwxMDY5NDkxNTU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/refactor"
        },
        {
            "color": "F3A62E",
            "default": false,
            "description": "community: Google Summer of Code project",
            "id": 834483397,
            "name": "gsoc",
            "node_id": "MDU6TGFiZWw4MzQ0ODMzOTc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/gsoc"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/859/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 197,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk"
        },
        "description": "Zero priority; no timeline. Promote an item from this state by taking ownership of it.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 235,
        "state": "open",
        "title": "unplanned",
        "updated_at": "2023-11-22T17:19:46Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "MDU6SXNzdWUzNTkzODgyOA==",
    "number": 859,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/859/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/859/timeline",
    "title": "string handling, SDS / bstrlib / ...",
    "updated_at": "2023-11-23T13:37:18Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/859",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
        "events_url": "https://api.github.com/users/aktau/events{/privacy}",
        "followers_url": "https://api.github.com/users/aktau/followers",
        "following_url": "https://api.github.com/users/aktau/following{/other_user}",
        "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/aktau",
        "id": 189413,
        "login": "aktau",
        "node_id": "MDQ6VXNlcjE4OTQxMw==",
        "organizations_url": "https://api.github.com/users/aktau/orgs",
        "received_events_url": "https://api.github.com/users/aktau/received_events",
        "repos_url": "https://api.github.com/users/aktau/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/aktau"
    }
}