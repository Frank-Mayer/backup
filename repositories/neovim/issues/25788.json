{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\r\n\r\nSome plug-ins that I use only function if LSP is available and has already run on a particular buffer. If I wanted to delay-load these plug-ins with a plug-in manager like [lazy.nvim](https://github.com/folke/lazy.nvim), there's currently no straightforward way to do this. Existing related autocmds such as `:h LspRequest` and `:h LspProgressUpdate` are spammy and also get called too early.\r\n\r\nIt'd be nice if there was a \"LSP is done now\" side-effect, which motivated the idea of a new `LspComplete` autocmd.\r\n\r\nI've got a User autocmd that basically implements what I had in mind if you want to check it out (A big thanks to [fidget.nvim](https://github.com/j-hui/fidget.nvim) for inspiring this code)\r\n\r\n<details>\r\n<summary>Click to expand</summary>\r\n\r\n```lua\r\nlocal vim_closing = false\r\nlocal tasks = {}\r\n\r\n\r\nlocal function _kill_task(task)\r\n    tasks[task] = nil\r\nend\r\n\r\n\r\nlocal function _has_tasks()\r\n  return next(tasks)\r\nend\r\n\r\n\r\nlocal function _handle_progress(err, msg, info)\r\n    -- See: https://microsoft.github.io/language-server-protocol/specifications/specification-current/#progress\r\n    if vim_closing then\r\n        return\r\n    end\r\n\r\n    local task = msg.token\r\n    local value = msg.value\r\n\r\n    if not task then\r\n      -- Notification missing required token??\r\n      return\r\n    end\r\n\r\n    tasks[task] = true\r\n\r\n    if value.kind == \"end\" then\r\n        _kill_task(task)\r\n    end\r\n\r\n    if not _has_tasks() then\r\n        vim.api.nvim_exec_autocmds(\"User\", {pattern = \"LspComplete\"})\r\n\r\n        return\r\n    end\r\nend\r\n\r\n\r\nlocal old_handler = vim.lsp.handlers[\"$/progress\"]\r\n\r\nvim.lsp.handlers[\"$/progress\"] = function(...)\r\n    old_handler(...)\r\n    _handle_progress(...)\r\nend\r\n\r\n\r\nlocal group = vim.api.nvim_create_augroup(\"LspCustomGroup\", { clear = true })\r\n\r\nvim.api.nvim_create_autocmd(\r\n    \"User\",\r\n    { callback = function() end, group = group, pattern = \"LspComplete\" }\r\n)\r\n```\r\n\r\nAnd is callable with\r\n\r\n```lua\r\nvim.cmd(\"autocmd User LspComplete :echoerr 'blah'\")\r\n```\r\n</details>\r\n\r\nThis request might tie into or be related to future implementations of https://github.com/neovim/neovim/issues/25714\r\n\r\n### Expected behavior\r\n\r\nAn autocmd that is called after LSP has been fully attached and initialized on some buffer. I think it'd be fine it if is called more than once if the LSP needs to re-index or do some other kind of work. But ideally this should be at the \"end\" of that work",
    "closed_at": "2023-10-28T19:08:14Z",
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "You could use the `LspAttach`, or `LspRequest` autocmd and react only to initialize events. After these the servers are ready to handle requests. \r\n\r\nThe protocol doesn't have any other special mechanism to identify when a server has indexed a project,  or if it finished compilation or analysis. Further, any text changes you make can always trigger a re-compilation or analysis.",
            "created_at": "2023-10-26T15:25:52Z",
            "html_url": "https://github.com/neovim/neovim/issues/25788#issuecomment-1781350950",
            "id": 1781350950,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25788",
            "node_id": "IC_kwDOAPphoM5qLUIm",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1781350950/reactions"
            },
            "updated_at": "2023-10-26T15:39:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1781350950",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Could you expand on the `LspAttach` / `LspRequest` suggestion? `LspAttach` appears to run too early for the plugins that this use-case is for and `LspRequest` is very spammy. I don't know what you mean by reacting only to initialize events. I suppose that is the detail from your suggestion that I'm missing.\r\n\r\nAs for triggering re-compilation / analysis, that's not much of a concern in this use-case as the intent is to make plug-ins available after the first time (at least) that the LSP is indexed and ready. If the event triggers once again later, though not ideal, it's still certainly an improvement. https://github.com/simrat39/symbols-outline.nvim is a decent example. It cannot display until the LSP is done checking the files for the first time.",
            "created_at": "2023-10-27T07:37:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/25788#issuecomment-1782445178",
            "id": 1782445178,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25788",
            "node_id": "IC_kwDOAPphoM5qPfR6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1782445178/reactions"
            },
            "updated_at": "2023-10-27T07:37:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1782445178",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10103049?v=4",
                "events_url": "https://api.github.com/users/ColinKennedy/events{/privacy}",
                "followers_url": "https://api.github.com/users/ColinKennedy/followers",
                "following_url": "https://api.github.com/users/ColinKennedy/following{/other_user}",
                "gists_url": "https://api.github.com/users/ColinKennedy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ColinKennedy",
                "id": 10103049,
                "login": "ColinKennedy",
                "node_id": "MDQ6VXNlcjEwMTAzMDQ5",
                "organizations_url": "https://api.github.com/users/ColinKennedy/orgs",
                "received_events_url": "https://api.github.com/users/ColinKennedy/received_events",
                "repos_url": "https://api.github.com/users/ColinKennedy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ColinKennedy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ColinKennedy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ColinKennedy"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Expected behavior: An autocmd that is called after LSP has been fully attached and initialized on some buffer.\r\n\r\nWe would not add a new event for this, it could perhaps be a `v:event` field. But as alluded to above, see `:help vim.lsp.buf.server_ready()` and https://github.com/neovim/neovim/pull/23520#pullrequestreview-1419012972 : \r\n\r\n> there really is no good alternative in the specification to detect if a server is ready I'm inclined to merge this. If my interpretation of the spec is correct, after the initialize handshake a server should be ready to serve requests.\r\n> \r\n> ... edits can always re-trigger analysis/builds that's always a catch-up game, and it's also unclear what an editor should do if the server is still processing changes. It is also not a simple ready/not-ready, because depending on the implementations they can serve some requests with sensible results, some with outdated, some not at all.\r\n",
            "created_at": "2023-10-28T19:08:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/25788#issuecomment-1783900039",
            "id": 1783900039,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25788",
            "node_id": "IC_kwDOAPphoM5qVCeH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1783900039/reactions"
            },
            "updated_at": "2023-10-28T19:08:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1783900039",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Could you expand on the LspAttach / LspRequest suggestion? LspAttach appears to run too early for the plugins that this use-case is for and LspRequest is very spammy\r\n\r\n\r\n- `LspAttach` runs whenever a client attaches to a buffer\r\n- `LspRequest` runs on any request, but you can filter on the payload. It contains a `request` property in the `data`. See `:help LspRequest` for more details. (On nightly, in 0.9 the command was a `User` variant and the docs are less complete)\r\n- `LspProgress` runs whenever the client receives a progress notification from the server.\r\n\r\n\r\nThe problem is that there is no defined \"I finished analysing the project\" event. Even if we wanted, we couldn't add a `LspComplete` event.\r\n\r\nI think your best option is to continue using `LspProgress` and de-register the handler once the server is initialized.\r\nOr you could raise an issue in the language-server-protocol repository and ask for an addition. I think formalizing a `$/progress` payload that indicates that a analysis cycle completed could have a chance getting accepted.\r\n",
            "created_at": "2023-10-29T09:34:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/25788#issuecomment-1784047440",
            "id": 1784047440,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25788",
            "node_id": "IC_kwDOAPphoM5qVmdQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1784047440/reactions"
            },
            "updated_at": "2023-10-29T09:36:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1784047440",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Thank you for those details, I can see the bigger picture now! I'll try out `LspProgress` as you've recommended for my needs",
            "created_at": "2023-10-29T16:50:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/25788#issuecomment-1784165208",
            "id": 1784165208,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25788",
            "node_id": "IC_kwDOAPphoM5qWDNY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1784165208/reactions"
            },
            "updated_at": "2023-10-29T16:51:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1784165208",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10103049?v=4",
                "events_url": "https://api.github.com/users/ColinKennedy/events{/privacy}",
                "followers_url": "https://api.github.com/users/ColinKennedy/followers",
                "following_url": "https://api.github.com/users/ColinKennedy/following{/other_user}",
                "gists_url": "https://api.github.com/users/ColinKennedy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ColinKennedy",
                "id": 10103049,
                "login": "ColinKennedy",
                "node_id": "MDQ6VXNlcjEwMTAzMDQ5",
                "organizations_url": "https://api.github.com/users/ColinKennedy/orgs",
                "received_events_url": "https://api.github.com/users/ColinKennedy/received_events",
                "repos_url": "https://api.github.com/users/ColinKennedy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ColinKennedy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ColinKennedy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ColinKennedy"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/25788/comments",
    "created_at": "2023-10-26T15:15:47Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/25788/events",
    "html_url": "https://github.com/neovim/neovim/issues/25788",
    "id": 1963805220,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "FEF2C0",
            "default": false,
            "description": "Needs a third-party / external change or fix",
            "id": 101945532,
            "name": "status:blocked-external",
            "node_id": "MDU6TGFiZWwxMDE5NDU1MzI=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/status:blocked-external"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/25788/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM51DUok",
    "number": 25788,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/25788/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "not_planned",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/25788/timeline",
    "title": "Add `LspComplete` autocmd",
    "updated_at": "2023-10-29T16:51:21Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/25788",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/10103049?v=4",
        "events_url": "https://api.github.com/users/ColinKennedy/events{/privacy}",
        "followers_url": "https://api.github.com/users/ColinKennedy/followers",
        "following_url": "https://api.github.com/users/ColinKennedy/following{/other_user}",
        "gists_url": "https://api.github.com/users/ColinKennedy/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ColinKennedy",
        "id": 10103049,
        "login": "ColinKennedy",
        "node_id": "MDQ6VXNlcjEwMTAzMDQ5",
        "organizations_url": "https://api.github.com/users/ColinKennedy/orgs",
        "received_events_url": "https://api.github.com/users/ColinKennedy/received_events",
        "repos_url": "https://api.github.com/users/ColinKennedy/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ColinKennedy/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ColinKennedy/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ColinKennedy"
    }
}