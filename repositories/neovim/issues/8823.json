{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "It does not appear to be possible to merge stdout and stderr currently from job output, without using a shell and redirection in there, is it?\r\n\r\nVim appears to support this by using `callback` instead of separate `out_cb` and `err_cb`:\r\n\r\n```vim\r\nlet cmd = [\"/usr/bin/bash\", \"-c\", 'echo 1:stderr >&2; echo 2:stdout; echo 3:stderr >&2']\r\n\r\nif exists('*jobstart')\r\n  call jobstart(cmd, {\r\n        \\ 'on_stdout': {->execute('echom string(a:000)', 1)},\r\n        \\ 'on_stderr': {->execute('echom string(a:000)', 1)},\r\n        \\ })\r\nelseif 0\r\n  call job_start(cmd, {\r\n        \\ 'callback': {->execute('echom string(a:000)', 1)},\r\n        \\ })\r\nelse\r\n  call job_start(cmd, {\r\n        \\ 'out_cb': {->execute('echom string(a:000)', 1)},\r\n        \\ 'err_cb': {->execute('echom string(a:000)', 1)},\r\n        \\ })\r\nendif\r\n```\r\n\r\nNeovim will not display the output in order:\r\n```\r\n[105, ['1:stderr', ''], 'stderr']\r\n[105, ['3:stderr', ''], 'stderr']\r\n[105, ['2:stdout', ''], 'stdout']\r\n[105, [''], 'stderr']\r\n[105, [''], 'stdout']\r\n```",
    "closed_at": "2023-12-21T15:41:52Z",
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "> Neovim will not display the output in order:\r\n\r\nstderr typically isn't buffered, while stdout typically is.  Unless you change that, I don't think there can be any expectation of the order matching the order of your commands.",
            "created_at": "2018-08-07T19:07:43Z",
            "html_url": "https://github.com/neovim/neovim/issues/8823#issuecomment-411167824",
            "id": 411167824,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8823",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTE2NzgyNA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/411167824/reactions"
            },
            "updated_at": "2018-08-07T19:07:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/411167824",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/112971?v=4",
                "events_url": "https://api.github.com/users/jamessan/events{/privacy}",
                "followers_url": "https://api.github.com/users/jamessan/followers",
                "following_url": "https://api.github.com/users/jamessan/following{/other_user}",
                "gists_url": "https://api.github.com/users/jamessan/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jamessan",
                "id": 112971,
                "login": "jamessan",
                "node_id": "MDQ6VXNlcjExMjk3MQ==",
                "organizations_url": "https://api.github.com/users/jamessan/orgs",
                "received_events_url": "https://api.github.com/users/jamessan/received_events",
                "repos_url": "https://api.github.com/users/jamessan/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jamessan/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jamessan/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jamessan"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Vim appears to support this by using callback instead of separate out_cb and err_cb:\r\n\r\nYou can do the same thing with nvim by having `on_stdout` and `on_stderr` use the same callback which caches the data in the same place.  That doesn't change that nvim may receive data \"out of order\".\r\n\r\n```viml\r\nlet cmd = [\"/usr/bin/bash\", \"-c\", 'echo 1:stderr >&2; echo 2:stdout; echo 3:stderr >&2']\r\nlet job = { 'output': [''] }\r\n\r\nfunc! job.on_stdout(_job_id, data, _event) dict\r\n  let self.output[-1] .= a:data[0]\r\n  call extend(self.output, a:data[1:])\r\nendfunc\r\n\r\nlet job.on_stderr = function(job.on_stdout)\r\n\r\ncall jobstart(cmd, job)\r\n```\r\n\r\nChanging `cmd` to\r\n\r\n```viml\r\n['stdbuf', '-e', 'L', '/usr/bin/bash', '-c', 'echo 1:stderr >&2; echo 2:stdout; echo 3:stderr >&2']\r\n```\r\nis one way to force the same buffering.",
            "created_at": "2018-08-07T19:31:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/8823#issuecomment-411174639",
            "id": 411174639,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8823",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTE3NDYzOQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/411174639/reactions"
            },
            "updated_at": "2018-08-07T19:31:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/411174639",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/112971?v=4",
                "events_url": "https://api.github.com/users/jamessan/events{/privacy}",
                "followers_url": "https://api.github.com/users/jamessan/followers",
                "following_url": "https://api.github.com/users/jamessan/following{/other_user}",
                "gists_url": "https://api.github.com/users/jamessan/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jamessan",
                "id": 112971,
                "login": "jamessan",
                "node_id": "MDQ6VXNlcjExMjk3MQ==",
                "organizations_url": "https://api.github.com/users/jamessan/orgs",
                "received_events_url": "https://api.github.com/users/jamessan/received_events",
                "repos_url": "https://api.github.com/users/jamessan/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jamessan/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jamessan/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jamessan"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> stderr typically isn't buffered, while stdout typically is. Unless you change that, I don't think there can be any expectation of the order matching the order of your commands.\r\n\r\nGood point.\r\nMy use case is the output from `make`, which uses both stdout/stderr (https://github.com/neomake/neomake/issues/1884).  I assume/guess that `make` should handle this already to be unbuffered then though?\r\n\r\nAnd using `stdbuf -e L` like you suggested (`let cmd = ['stdbuf', '-e', 'L', '/usr/bin/bash', '-c', 'echo 1:stderr >&2; echo 2:stdout; echo 3:stderr >&2']`) still displays `['1:stderr', '3:stderr', '2:stdout', '']` for me in your example, when using\r\n```vim\r\nfunc! job.on_exit(_job_id, data, _event) dict\r\n  echom string(self.output)\r\nendfunc\r\n```\r\n\r\nI am thinking about wrapping commands in Neomake with a shell, and using `( â€¦ ) 2>&1` around the cmd, but would rather like to avoid that.",
            "created_at": "2018-08-07T21:34:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/8823#issuecomment-411210156",
            "id": 411210156,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8823",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTIxMDE1Ng==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/411210156/reactions"
            },
            "updated_at": "2018-08-07T21:34:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/411210156",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9766?v=4",
                "events_url": "https://api.github.com/users/blueyed/events{/privacy}",
                "followers_url": "https://api.github.com/users/blueyed/followers",
                "following_url": "https://api.github.com/users/blueyed/following{/other_user}",
                "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/blueyed",
                "id": 9766,
                "login": "blueyed",
                "node_id": "MDQ6VXNlcjk3NjY=",
                "organizations_url": "https://api.github.com/users/blueyed/orgs",
                "received_events_url": "https://api.github.com/users/blueyed/received_events",
                "repos_url": "https://api.github.com/users/blueyed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/blueyed"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I've wanted finer grained control of the file descriptors available to jobs, e.g. creating some extra ones for different channels of communication (c.f., gnupg's various `--*-fd` switches), but have never gotten around to it.  Partly because I haven't thought of a nice way to expose that in the API and partly because of lack of time.\r\n\r\nHowever, I do think it would be a useful middle-ground to at least have an easy way to express \"use the same fd for stdout and stderr\", without having to resort to the shell.",
            "created_at": "2018-08-07T23:48:29Z",
            "html_url": "https://github.com/neovim/neovim/issues/8823#issuecomment-411238200",
            "id": 411238200,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8823",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTIzODIwMA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/411238200/reactions"
            },
            "updated_at": "2018-08-07T23:48:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/411238200",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/112971?v=4",
                "events_url": "https://api.github.com/users/jamessan/events{/privacy}",
                "followers_url": "https://api.github.com/users/jamessan/followers",
                "following_url": "https://api.github.com/users/jamessan/following{/other_user}",
                "gists_url": "https://api.github.com/users/jamessan/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jamessan",
                "id": 112971,
                "login": "jamessan",
                "node_id": "MDQ6VXNlcjExMjk3MQ==",
                "organizations_url": "https://api.github.com/users/jamessan/orgs",
                "received_events_url": "https://api.github.com/users/jamessan/received_events",
                "repos_url": "https://api.github.com/users/jamessan/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jamessan/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jamessan/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jamessan"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "What about doing it like with Vim, where `callback` is used to read any part of output?",
            "created_at": "2018-09-01T16:50:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/8823#issuecomment-417872306",
            "id": 417872306,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8823",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzg3MjMwNg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/417872306/reactions"
            },
            "updated_at": "2018-09-01T16:50:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/417872306",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9766?v=4",
                "events_url": "https://api.github.com/users/blueyed/events{/privacy}",
                "followers_url": "https://api.github.com/users/blueyed/followers",
                "following_url": "https://api.github.com/users/blueyed/following{/other_user}",
                "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/blueyed",
                "id": 9766,
                "login": "blueyed",
                "node_id": "MDQ6VXNlcjk3NjY=",
                "organizations_url": "https://api.github.com/users/blueyed/orgs",
                "received_events_url": "https://api.github.com/users/blueyed/received_events",
                "repos_url": "https://api.github.com/users/blueyed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/blueyed"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Would appreciate some feedback here how to address this best.\r\nI still think having an additional `callback` job option that would get both stdout and stderr (in order) would be great to have here.\r\n/cc @bfredl",
            "created_at": "2019-07-20T14:10:26Z",
            "html_url": "https://github.com/neovim/neovim/issues/8823#issuecomment-513470746",
            "id": 513470746,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8823",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzQ3MDc0Ng==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/513470746/reactions"
            },
            "updated_at": "2019-07-20T14:10:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/513470746",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9766?v=4",
                "events_url": "https://api.github.com/users/blueyed/events{/privacy}",
                "followers_url": "https://api.github.com/users/blueyed/followers",
                "following_url": "https://api.github.com/users/blueyed/following{/other_user}",
                "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/blueyed",
                "id": 9766,
                "login": "blueyed",
                "node_id": "MDQ6VXNlcjk3NjY=",
                "organizations_url": "https://api.github.com/users/blueyed/orgs",
                "received_events_url": "https://api.github.com/users/blueyed/received_events",
                "repos_url": "https://api.github.com/users/blueyed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/blueyed"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I basically agree, but `callback` is not a very good name. I'd rather have `on_stdout` and a flag to reuse the same pipe for stderr (this is more consistent with pty jobs) ",
            "created_at": "2019-07-20T14:16:01Z",
            "html_url": "https://github.com/neovim/neovim/issues/8823#issuecomment-513471157",
            "id": 513471157,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8823",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzQ3MTE1Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/513471157/reactions"
            },
            "updated_at": "2019-07-20T14:16:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/513471157",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Ok.  Maybe `on_stderr` could then have a special value to mean `pipe to stdout`?\r\nWould we still be able to distinguish the source then? (\"stdout\" or \"stderr\", for the \"name\" in the callback)\r\n\r\nOTOH how/why would this be different from using the same callback for `on_stderr` in Vimscript?\r\n\r\n```vim\r\nlet cmd = ['stdbuf', '-e', 'L', '/usr/bin/bash', '-c', 'echo 1:stderr >&2; echo 2:stdout; echo 3:stderr >&2']\r\n\r\nlet job = { 'output': [''] }\r\n\r\nfunc! job.on_stdout(_job_id, data, _event) dict\r\n  let self.output[-1] .= a:data[0]\r\n  call extend(self.output, a:data[1:])\r\nendfunc\r\n\r\nlet job.on_stderr = function(job.on_stdout)\r\n\r\nfunc! job.on_exit(_job_id, data, _event) dict\r\n  echom string(self.output)\r\nendfunc\r\n\r\ncall jobstart(cmd, job)\r\n```",
            "created_at": "2019-07-20T14:27:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/8823#issuecomment-513472079",
            "id": 513472079,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8823",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzQ3MjA3OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/513472079/reactions"
            },
            "updated_at": "2019-07-20T14:27:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/513472079",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9766?v=4",
                "events_url": "https://api.github.com/users/blueyed/events{/privacy}",
                "followers_url": "https://api.github.com/users/blueyed/followers",
                "following_url": "https://api.github.com/users/blueyed/following{/other_user}",
                "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/blueyed",
                "id": 9766,
                "login": "blueyed",
                "node_id": "MDQ6VXNlcjk3NjY=",
                "organizations_url": "https://api.github.com/users/blueyed/orgs",
                "received_events_url": "https://api.github.com/users/blueyed/received_events",
                "repos_url": "https://api.github.com/users/blueyed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/blueyed"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> OTOH how/why would this be different from using the same callback for `on_stderr` in Vimscript?\r\n\r\nFunctionally it wouldn't be any different. It just avoids  boilerplate for the user.\r\n\r\n> stderr typically isn't buffered, while stdout typically is. Unless you change that, I don't think there can be any expectation of the order matching the order of your commands.\r\n\r\nVim uses \"NL\" (line-buffered) mode by default (took awhile to deduce this from Vim's `:help channel`). Line-buffering is likely to add some semblance of \"order\" to interleaved stdout/stderr.\r\n\r\nMaybe the main request here is line-buffering ? This could even be implemented (internally) with Lua...",
            "created_at": "2019-07-20T14:42:07Z",
            "html_url": "https://github.com/neovim/neovim/issues/8823#issuecomment-513473257",
            "id": 513473257,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8823",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzQ3MzI1Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/513473257/reactions"
            },
            "updated_at": "2019-07-20T14:43:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/513473257",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I presumed the use case was to use the same pipe (will make a difference for some situations) ? Otherwise you can just use the same callback already.",
            "created_at": "2019-07-20T14:42:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/8823#issuecomment-513473315",
            "id": 513473315,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8823",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzQ3MzMxNQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/513473315/reactions"
            },
            "updated_at": "2019-07-20T14:42:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/513473315",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Using the same callback does not fix it, so it's about using the same pipe then.\r\nI've just wondered if the original source would be / could be made available still (in terms of a hack it would be like prefixing each output line with either \"stdout:\" or \"stderr:\" and using this then in the handler for the merged pipe).\r\n\r\nAs for Vim, using raw vs nl mode does not seem to make a difference there:\r\n```\r\n[['channel 76 closed', '2:stdout'], ['channel 76 closed', '1:stderr'], ['channel 76 closed',\r\n'3:stderr']]\r\n```\r\n```\r\n[['channel 71 closed', '2:stdout^@'], ['channel 71 closed', '1:stderr^@3:stderr^@']]\r\n```\r\n\r\nUsing:\r\n```vim\r\nlet cmd = ['stdbuf', '-eL', '-oL', '/usr/bin/bash', '-c', 'echo 1:stderr >&2; echo 2:stdout; echo 3:stderr >&2']\r\n\r\nlet job = { 'output': [''] }\r\n\r\nif has('nvim')\r\n  func! job.on_stdout(_job_id, data, _event) dict\r\n    let self.output[-1] .= a:data[0]\r\n    call extend(self.output, a:data[1:])\r\n  endfunc\r\n\r\n  let job.on_stderr = function(job.on_stdout)\r\n\r\n  func! job.on_exit(_job_id, data, _event) dict\r\n    echom string(self.output)\r\n  endfunc\r\n\r\n  call jobstart(cmd, job)\r\nelse\r\n  let s:args = []\r\n  func! s:callback(...)\r\n    call add(s:args, a:000)\r\n  endfunc\r\n  func! s:exit_cb(...)\r\n    echom string(s:args)\r\n  endfunc\r\n  let options = {\r\n        \\ 'callback': function('s:callback'),\r\n        \\ 'exit_cb': function('s:exit_cb'),\r\n        \\ }\r\n  let options.mode = 'nl'\r\n  call job_start(cmd, options)\r\nendif\r\n```\r\n\r\nThis also shows that Vim's `callback` also does not handle this \"correctly\" (in order) - unlike I've assumed initially.\r\n\r\nAdding some `sleep` inbetween makes it work for both nvim and vim:\r\n```vim\r\nlet cmds = ['echo 1:stderr >&2', 'sleep 0.1', 'echo 2:stdout', 'sleep 0.1', 'echo 3:stderr >&2']\r\nlet cmd = ['stdbuf', '-eL', '-oL', '/usr/bin/bash', '-c', join(cmds, '; ')]\r\n```\r\n(Vim is still flaky with `sleep 0.09`, but nvim works mostly with `sleep 0.08` already.  This could indicate that it is not that much / only related to bash / the process, but also how it is handled internally)",
            "created_at": "2019-07-20T16:27:34Z",
            "html_url": "https://github.com/neovim/neovim/issues/8823#issuecomment-513480989",
            "id": 513480989,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8823",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzQ4MDk4OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/513480989/reactions"
            },
            "updated_at": "2019-07-20T16:27:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/513480989",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9766?v=4",
                "events_url": "https://api.github.com/users/blueyed/events{/privacy}",
                "followers_url": "https://api.github.com/users/blueyed/followers",
                "following_url": "https://api.github.com/users/blueyed/following{/other_user}",
                "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/blueyed",
                "id": 9766,
                "login": "blueyed",
                "node_id": "MDQ6VXNlcjk3NjY=",
                "organizations_url": "https://api.github.com/users/blueyed/orgs",
                "received_events_url": "https://api.github.com/users/blueyed/received_events",
                "repos_url": "https://api.github.com/users/blueyed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/blueyed"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> wondered if the original source would be / could be made available still (in terms of a hack it would be like prefixing each output line with either \"stdout:\" or \"stderr:\" and using this then in the handler for the merged pipe).\r\n\r\nWhat is the advantage of having 1 pipe going to the same handler which then must switch on the source-type?",
            "created_at": "2019-07-20T16:35:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/8823#issuecomment-513481557",
            "id": 513481557,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8823",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzQ4MTU1Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/513481557/reactions"
            },
            "updated_at": "2019-07-20T16:35:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/513481557",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "This does not make any sense. By definition when using one pipe it is not possible to distinguish between stderr and stdout. It would work the same as pty output in this respect. ",
            "created_at": "2019-07-20T16:49:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/8823#issuecomment-513482534",
            "id": 513482534,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8823",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzQ4MjUzNA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/513482534/reactions"
            },
            "updated_at": "2019-07-20T16:49:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/513482534",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> What is the advantage of having 1 pipe going to the same handler which then must switch on the source-type?\r\n\r\nI've meant that it would be useful to know in general, i.e. errors vs. normal output.\r\n\r\nKeep in mind that the underlying issue is that `make` will output its entering-directory messages on stderr, but other output is on stdout then, and the order there needs to be preserved.\r\nIt _might_ still be useful to see where it is coming from in general - i.e. Neomake has a feature to report unexpected output (when only using stdout normally - but that would not have to use the merged streams then).\r\n\r\n> By definition when using one pipe it is not possible to distinguish between stderr and stdout. It would work the same as pty output in this respect.\r\n\r\nI see.\r\n\r\nIt seems like using flags to setup redirection is the way to go there then.\r\nI think only having `redirect_stderr_to_stdout` might be too inflexible when this needs to be extended later.  Maybe something like a dict (`redirect_pipes = {2: 1}`)?",
            "created_at": "2019-07-20T16:58:43Z",
            "html_url": "https://github.com/neovim/neovim/issues/8823#issuecomment-513483150",
            "id": 513483150,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8823",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMzQ4MzE1MA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/513483150/reactions"
            },
            "updated_at": "2019-07-20T16:58:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/513483150",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9766?v=4",
                "events_url": "https://api.github.com/users/blueyed/events{/privacy}",
                "followers_url": "https://api.github.com/users/blueyed/followers",
                "following_url": "https://api.github.com/users/blueyed/following{/other_user}",
                "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/blueyed",
                "id": 9766,
                "login": "blueyed",
                "node_id": "MDQ6VXNlcjk3NjY=",
                "organizations_url": "https://api.github.com/users/blueyed/orgs",
                "received_events_url": "https://api.github.com/users/blueyed/received_events",
                "repos_url": "https://api.github.com/users/blueyed/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/blueyed"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "This is already possible in Lua with `vim.uv.spawn`. Just set `stdio = { nil, pipe, pipe }`.",
            "created_at": "2023-12-21T15:41:52Z",
            "html_url": "https://github.com/neovim/neovim/issues/8823#issuecomment-1866518666",
            "id": 1866518666,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8823",
            "node_id": "IC_kwDOAPphoM5vQNCK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1866518666/reactions"
            },
            "updated_at": "2023-12-21T15:41:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1866518666",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        }
    ],
    "comments": 15,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/8823/comments",
    "created_at": "2018-08-07T18:22:29Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/8823/events",
    "html_url": "https://github.com/neovim/neovim/issues/8823",
    "id": 348434589,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "OS processes, spawn",
            "id": 182884815,
            "name": "job-control",
            "node_id": "MDU6TGFiZWwxODI4ODQ4MTU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/job-control"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/8823/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 204,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk"
        },
        "description": "Zero priority; no timeline. Promote an item from this state by taking ownership of it.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 236,
        "state": "open",
        "title": "unplanned",
        "updated_at": "2023-12-25T02:06:01Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "MDU6SXNzdWUzNDg0MzQ1ODk=",
    "number": 8823,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/8823/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/8823/timeline",
    "title": "jobs: merge output from stdout and stderr",
    "updated_at": "2023-12-21T15:41:53Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/8823",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/9766?v=4",
        "events_url": "https://api.github.com/users/blueyed/events{/privacy}",
        "followers_url": "https://api.github.com/users/blueyed/followers",
        "following_url": "https://api.github.com/users/blueyed/following{/other_user}",
        "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/blueyed",
        "id": 9766,
        "login": "blueyed",
        "node_id": "MDQ6VXNlcjk3NjY=",
        "organizations_url": "https://api.github.com/users/blueyed/orgs",
        "received_events_url": "https://api.github.com/users/blueyed/received_events",
        "repos_url": "https://api.github.com/users/blueyed/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/blueyed"
    }
}