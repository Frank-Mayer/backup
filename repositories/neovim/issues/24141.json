{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "## Problem\r\n\r\nFor callbacks of functions like `Iter:fold()`, the callback signature has a different arity for array-like vs dict-like inputs: https://github.com/neovim/neovim/blob/3688735c2b63337ab8d8b12ac08b4e6e064e98a2/test/functional/lua/iter_spec.lua#L349-L370\r\n\r\narray-like:\r\n\r\n    vim.iter(t):fold({}, function(acc, v) ...\r\n\r\ndict-like:\r\n\r\n    vim.iter(t):fold({}, function(acc, k, v) ...\r\n\r\n## Expected behavior\r\n\r\nFor all `vim.iter` callbacks, use the same signature for list-like and dict-like inputs.  In the array-like case, pass the index as the \"key\" arg.\r\n\r\nE.g. for `fold()`:\r\n\r\n    vim.iter(t):fold({}, function(acc, k, v) ...\r\n\r\n## Benefits:\r\n\r\n- increases composability (same callbacks can be used for both list-like and dict-like inputs)\r\n- reduces verbosity in the documentation, avoids redundant examples for list-like and dict-like inputs.\r\n- aligns with analogous libraries such as [lodash](https://lodash.com/)\r\n\r\ncc @gpanders ",
    "closed_at": "2023-11-25T14:35:32Z",
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "> For callbacks of functions like Iter:fold(), the callback signature has a different arity for array-like vs dict-like inputs\r\n\r\nThis was an intentional design choice as the input to each pipeline stage contains all of the outputs from the previous stage. This is true of all of the `Iter` methods. For list like tables, the “outputs” are just the values, so “downstream” stages get only the value, not the index. Consider how often one writes `for _, v in ipairs(t)`. Iterating over just the values is common. \r\n\r\nTo include the index we have `enumerate()`, which is general purpose as it also includes an index even for non-list tables (e.g. function iterators or “dict-like” tables).\r\n\r\nWe can revisit the decision to not include the index for list like tables, though I have a preference for the status quo. If I’m iterating over a “list”, I don’t want to have to add the dummy/throwaway argument for the index every time. If I *do* want the index I can make that explicit with `enumerate()`.\r\n\r\nHappy to hear other opinions. I won’t die on this hill. ",
            "created_at": "2023-06-24T14:39:34Z",
            "html_url": "https://github.com/neovim/neovim/issues/24141#issuecomment-1605559469",
            "id": 1605559469,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24141",
            "node_id": "IC_kwDOAPphoM5fsuSt",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1605559469/reactions"
            },
            "updated_at": "2023-06-24T14:39:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1605559469",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> If I’m iterating over a “list”, I don’t want to have to add the dummy/throwaway argument for the index every time\r\n\r\nMakes sense. The tradeoff is \r\n\r\n-  the docs for each of these must explain the different callback signatures,\r\n- users must be ever-vigilant about this difference\r\n    - could be a common source of mistakes/confusion\r\n- if I change the input of a \"pipeline\" that I'm playing with, I have to change all the signatures.\r\n\r\nAvoiding that seems like a very big win, no? But \"dummy index\" doesn't bother me at all, so I'm biased.",
            "created_at": "2023-06-25T14:17:07Z",
            "html_url": "https://github.com/neovim/neovim/issues/24141#issuecomment-1606109633",
            "id": 1606109633,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24141",
            "node_id": "IC_kwDOAPphoM5fu0nB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1606109633/reactions"
            },
            "updated_at": "2023-06-25T14:18:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1606109633",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">users must be ever-vigilant about this difference. could be a common source of mistakes/confusion\r\n\r\nPersonally I suspect the current approach is _less_ confusing. If you express the concept of \"iterate through a list of things\" in most functional languages, you end up with a lambda with a single argument representing the \"thing\" being iterated on. `vim.iter({1, 2, 3}):map(function(x) ... end)` matches that expectation. If we include the index by default then that code doesn't work, because now `x` is not the \"thing\" being iterated, but the index. Likely an easy bug to identify and correct, but I suspect people would trip over that. (Counterpoint is that people familiar with Lua may already be used to the `i, v` pattern from `ipairs()`, so maybe this isn't an issue).\r\n\r\nAnother point: sequential tables in Lua are created without explicitly specifying the key, e.g. `{\"a\", \"b\", \"c\"}`. Using only the value in iterator pipelines mirrors that (\"I only care about the value, the index is an implementation detail\").\r\n\r\nI do agree that not having to handle different input types specially would be nice, although we already handle list-like tables specially anyway for performance reasons. And it is true that in Lua \"arrays\" are just tables, so it does make some sense to treat them the same. However, I think that \"leaks\" the Lua implementation details through to the iterator interface a bit (maybe not a big deal).\r\n\r\nMaybe we can look into what such a code change would look like. If it simplifies other things or eliminates edge cases, then great, it's probably worth it! If it's a wash complexity-wise then it comes down to preference and I'd be in favor of leaving it as-is.",
            "created_at": "2023-06-26T13:24:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/24141#issuecomment-1607471044",
            "id": 1607471044,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24141",
            "node_id": "IC_kwDOAPphoM5f0A_E",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1607471044/reactions"
            },
            "updated_at": "2023-06-26T13:24:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1607471044",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> And it is true that in Lua \"arrays\" are just tables, so it does make some sense to treat them the same. However, I think that \"leaks\" the Lua implementation details\r\n\r\nTrue. Though if this \"leak\" is idiomatic in Lua then hiding it may be confusing in its own way.\r\n\r\nDoes the current approach defeat some opportunities for \"composability\"? Lua's list/dict table \"fungibility\" seems analogous to sequences in lisp, so one can stream tables to various handlers and pipelines. Requiring different signatures makes that harder.",
            "created_at": "2023-06-26T13:44:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/24141#issuecomment-1607504657",
            "id": 1607504657,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24141",
            "node_id": "IC_kwDOAPphoM5f0JMR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1607504657/reactions"
            },
            "updated_at": "2023-06-26T13:45:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1607504657",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > And it is true that in Lua \"arrays\" are just tables, so it does make some sense to treat them the same. However, I think that \"leaks\" the Lua implementation details\r\n> \r\n> True. Though if this \"leak\" is idiomatic in Lua then hiding it may be confusing in its own way.\r\n\r\nIt's not an implementation leak, it's an intentional interface design choice, per [The Implementation of Lua 5.0](https://www.lua.org/doc/jucs05.pdf).",
            "created_at": "2023-11-25T14:37:34Z",
            "html_url": "https://github.com/neovim/neovim/issues/24141#issuecomment-1826348178",
            "id": 1826348178,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24141",
            "node_id": "IC_kwDOAPphoM5s29yS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1826348178/reactions"
            },
            "updated_at": "2023-11-25T14:38:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1826348178",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/24141/comments",
    "created_at": "2023-06-24T14:07:41Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/24141/events",
    "html_url": "https://github.com/neovim/neovim/issues/24141",
    "id": 1772727098,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        },
        {
            "color": "F9D0C4",
            "default": false,
            "description": "",
            "id": 3968935075,
            "name": "breaking-change",
            "node_id": "LA_kwDOAPphoM7skSSj",
            "url": "https://api.github.com/repos/neovim/neovim/labels/breaking-change"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/24141/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 192,
        "created_at": "2023-02-02T14:11:43Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
            "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
            "followers_url": "https://api.github.com/users/bfredl/followers",
            "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
            "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bfredl",
            "id": 1363104,
            "login": "bfredl",
            "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
            "organizations_url": "https://api.github.com/users/bfredl/orgs",
            "received_events_url": "https://api.github.com/users/bfredl/received_events",
            "repos_url": "https://api.github.com/users/bfredl/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bfredl"
        },
        "description": "",
        "due_on": "2024-03-01T08:00:00Z",
        "html_url": "https://github.com/neovim/neovim/milestone/36",
        "id": 8997654,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/36/labels",
        "node_id": "MI_kwDOAPphoM4AiUsW",
        "number": 36,
        "open_issues": 129,
        "state": "open",
        "title": "0.10",
        "updated_at": "2023-11-25T14:35:50Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/36"
    },
    "node_id": "I_kwDOAPphoM5pqas6",
    "number": 24141,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 3,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 3,
        "url": "https://api.github.com/repos/neovim/neovim/issues/24141/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/24141/timeline",
    "title": "vim.iter: consistent callback signature for list-like and dict-like inputs",
    "updated_at": "2023-11-25T14:38:00Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/24141",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk"
    }
}