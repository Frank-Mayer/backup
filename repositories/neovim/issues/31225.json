{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\nThere are some lags(at least for me), when using `nvim-cmp` inside `.astro` files. I made some research and found that's because of `astro.vim` syntax file. Maybe I should open an issue to `nvim-cmp` instead of there.\nThe problem:\n\nhttps://github.com/user-attachments/assets/3e359000-8281-4826-884c-d683adf8a561\n\nAs you can see in `.astro` files there are some lags, compared to `.tsx` files.\nThis one with dirty nvim build:\n\nhttps://github.com/user-attachments/assets/d046d615-6b94-4b55-8239-07dd4cae42b0\n\nRepro\nFor repro I chose snippets, but the issue exists with lsp source as well.\nMaybe you would like to change the root folder which is `/tmp/repro`\n```lua\nlocal root = vim.fn.fnamemodify(\"/tmp/repro\", \":p\")\n\n-- set stdpaths to use .repro\nfor _, name in ipairs({ \"config\", \"data\", \"state\", \"cache\" }) do\n\tvim.env[(\"XDG_%s_HOME\"):format(name:upper())] = root .. \"/\" .. name\nend\n\n-- bootstrap lazy\nlocal lazypath = root .. \"/plugins/lazy.nvim\"\nif not vim.loop.fs_stat(lazypath) then\n\tvim.fn.system({\n\t\t\"git\",\n\t\t\"clone\",\n\t\t\"--filter=blob:none\",\n\t\t\"--single-branch\",\n\t\t\"https://github.com/folke/lazy.nvim.git\",\n\t\tlazypath,\n\t})\nend\nvim.opt.runtimepath:prepend(lazypath)\n\n-- install plugins\nlocal plugins = {\n\t{\n\t\t\"hrsh7th/nvim-cmp\",\n\t\tdependencies = {\n\t\t\t\"hrsh7th/cmp-nvim-lsp\",\n\t\t\t\"hrsh7th/cmp-buffer\",\n\t\t\t\"hrsh7th/cmp-path\",\n\t\t\t\"hrsh7th/cmp-cmdline\",\n\t\t\t{\n\t\t\t\t\"L3MON4D3/LuaSnip\",\n\t\t\t\tconfig = function()\n\t\t\t\t\tlocal luasnip = require(\"luasnip\")\n\t\t\t\t\tluasnip.setup({\n\t\t\t\t\t\tregion_check_events = \"InsertEnter\",\n\t\t\t\t\t\tdelete_check_events = \"TextChanged,InsertLeave,InsertEnter\",\n\t\t\t\t\t\tupdate_events = \"TextChanged,TextChangedI\",\n\t\t\t\t\t})\n\n\t\t\t\t\tlocal s = luasnip.snippet\n\t\t\t\t\tlocal fmt = require(\"luasnip.extras.fmt\").fmt\n\n\t\t\t\t\tlocal snips = {}\n\n\t\t\t\t\tlocal function generateString(n, char)\n\t\t\t\t\t\treturn string.rep(char, n)\n\t\t\t\t\tend\n\n\t\t\t\t\tfor i = 1, 20, 1 do\n\t\t\t\t\t\tlocal str = generateString(i, \"a\")\n\t\t\t\t\t\ttable.insert(snips, s(str, fmt(str, {})))\n\t\t\t\t\tend\n\t\t\t\t\tfor i = 1, 20, 1 do\n\t\t\t\t\t\tlocal str = generateString(i, \"b\")\n\t\t\t\t\t\ttable.insert(snips, s(str, fmt(str, {})))\n\t\t\t\t\tend\n\t\t\t\t\tfor i = 1, 10, 1 do\n\t\t\t\t\t\tlocal str = generateString(i, \"c\")\n\t\t\t\t\t\ttable.insert(snips, s(str, fmt(str, {})))\n\t\t\t\t\tend\n\n\t\t\t\t\tluasnip.add_snippets(\"typescriptreact\", snips)\n\t\t\t\t\tluasnip.add_snippets(\"astro\", snips)\n\t\t\t\tend,\n\t\t\t},\n\t\t\t\"saadparwaiz1/cmp_luasnip\",\n\t\t},\n\t\tconfig = function()\n\t\t\tlocal luasnip = require(\"luasnip\")\n\n\t\t\tlocal cmp = require(\"cmp\")\n\n\t\t\tlocal function toggle_completion_menu()\n\t\t\t\tif cmp.visible() then\n\t\t\t\t\tcmp.close()\n\t\t\t\telse\n\t\t\t\t\tcmp.complete()\n\t\t\t\tend\n\t\t\tend\n\n\t\t\tlocal cmp_select = { behavior = cmp.SelectBehavior.Select }\n\t\t\tlocal confirm_options = {\n\t\t\t\tbehavior = cmp.ConfirmBehavior.Insert,\n\t\t\t\tselect = false,\n\t\t\t}\n\n\t\t\tcmp.setup({\n\t\t\t\tcompletion = {\n\t\t\t\t\tcompleteopt = \"menu,menuone,noinsert\",\n\t\t\t\t},\n\t\t\t\tsnippet = {\n\t\t\t\t\t-- REQUIRED - you must specify a snippet engine\n\t\t\t\t\texpand = function(args)\n\t\t\t\t\t\t-- vim.fn[\"vsnip#anonymous\"](args.body) -- For `vsnip` users.\n\t\t\t\t\t\trequire(\"luasnip\").lsp_expand(args.body) -- For `luasnip` users.\n\t\t\t\t\t\t-- require('snippy').expand_snippet(args.body) -- For `snippy` users.\n\t\t\t\t\t\t-- vim.fn[\"UltiSnips#Anon\"](args.body) -- For `ultisnips` users.\n\t\t\t\t\t\t-- vim.snippet.expand(args.body) -- For native neovim snippets (Neovim v0.10+)\n\t\t\t\t\tend,\n\t\t\t\t},\n\t\t\t\twindow = {\n\t\t\t\t\t-- completion = cmp.config.window.bordered(),\n\t\t\t\t\t-- documentation = cmp.config.window.bordered(),\n\t\t\t\t},\n\t\t\t\tmapping = cmp.mapping.preset.insert({\n\t\t\t\t\t[\"<C-p>\"] = function()\n\t\t\t\t\t\tif cmp.visible() then\n\t\t\t\t\t\t\tcmp.select_prev_item(cmp_select)\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tcmp.complete()\n\t\t\t\t\t\tend\n\t\t\t\t\tend,\n\t\t\t\t\t[\"<C-n>\"] = function()\n\t\t\t\t\t\tif cmp.visible() then\n\t\t\t\t\t\t\tcmp.select_next_item(cmp_select)\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tcmp.complete()\n\t\t\t\t\t\tend\n\t\t\t\t\tend,\n\t\t\t\t\t[\"<C-k>\"] = cmp.mapping.scroll_docs(-4),\n\t\t\t\t\t[\"<C-j>\"] = cmp.mapping.scroll_docs(4),\n\t\t\t\t\t[\"<C-Space>\"] = cmp.mapping(toggle_completion_menu, { \"i\", \"c\" }),\n\t\t\t\t\t[\"<C-s>\"] = cmp.mapping(toggle_completion_menu, { \"i\", \"c\" }),\n\t\t\t\t\t[\"<CR>\"] = cmp.mapping.confirm(confirm_options),\n\t\t\t\t\t[\"<Tab>\"] = cmp.mapping(function(fallback)\n\t\t\t\t\t\tif cmp.visible() and cmp.get_selected_entry() then\n\t\t\t\t\t\t\tcmp.confirm(confirm_options)\n\t\t\t\t\t\telseif luasnip.jumpable(1) then\n\t\t\t\t\t\t\tluasnip.jump(1)\n\t\t\t\t\t\telseif luasnip.expandable() then\n\t\t\t\t\t\t\tluasnip.expand()\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tfallback()\n\t\t\t\t\t\tend\n\t\t\t\t\tend, { \"i\", \"s\" }),\n\t\t\t\t\t[\"<S-Tab>\"] = cmp.mapping(function(fallback)\n\t\t\t\t\t\tif luasnip.jumpable(-1) then\n\t\t\t\t\t\t\tluasnip.jump(-1)\n\t\t\t\t\t\telseif cmp.visible() then\n\t\t\t\t\t\t\tcmp.select_prev_item()\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tfallback()\n\t\t\t\t\t\tend\n\t\t\t\t\tend, { \"i\", \"s\" }),\n\t\t\t\t}),\n\t\t\t\tsources = cmp.config.sources({\n\t\t\t\t\t{ name = \"nvim_lsp\" },\n\t\t\t\t\t{ name = \"luasnip\" }, -- For vsnip users.\n\t\t\t\t\t-- { name = 'luasnip' }, -- For luasnip users.\n\t\t\t\t\t-- { name = 'ultisnips' }, -- For ultisnips users.\n\t\t\t\t\t-- { name = 'snippy' }, -- For snippy users.\n\t\t\t\t}, {\n\t\t\t\t\t{ name = \"buffer\" },\n\t\t\t\t}),\n\t\t\t})\n\t\tend,\n\t},\n\t-- add any other pugins here\n}\nrequire(\"lazy\").setup(plugins, {\n\troot = root .. \"/plugins\",\n})\nvim.keymap.set(\"i\", \"jk\", \"<ESC>\")\nvim.keymap.set(\"i\", \"jj\", \"<ESC>\")\n\n-- add anything else here\nvim.opt.termguicolors = true\n\n```\n\n\n### Steps to reproduce\n\nOpen some astro file\nPress `Ctrl-Space` to open cmp\nTry to scroll items(Ctrl-N/Ctrl-P)\nHold `a`/`b`/`c` key to see input freezes\n\n### Expected behavior\n\nLike in the second video\n\n### Nvim version (nvim -v)\n\nlatest\n\n### Vim (not Nvim) behaves the same?\n\nn/a\n\n### Operating system/version\n\nlinux\n\n### Terminal name/version\n\nkitty\n\n### $TERM environment variable\n\nxtem-kitty\n\n### Installation\n\nfrom repo",
    "closed_at": "2024-11-15T14:28:39Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
        "events_url": "https://api.github.com/users/clason/events{/privacy}",
        "followers_url": "https://api.github.com/users/clason/followers",
        "following_url": "https://api.github.com/users/clason/following{/other_user}",
        "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/clason",
        "id": 2361214,
        "login": "clason",
        "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
        "organizations_url": "https://api.github.com/users/clason/orgs",
        "received_events_url": "https://api.github.com/users/clason/received_events",
        "repos_url": "https://api.github.com/users/clason/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/clason",
        "user_view_type": "public"
    },
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "You should report this to the maintainer of the syntax file then: https://github.com/wuelnerdotexe/vim-astro\n\n(We don't maintain these files; we just take them from Vim, which takes them from the individual maintainers.)\n\nBut by all means, report it to nvim-cmp as well.",
            "created_at": "2024-11-15T14:28:40Z",
            "html_url": "https://github.com/neovim/neovim/issues/31225#issuecomment-2479017474",
            "id": 2479017474,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31225",
            "node_id": "IC_kwDOAPphoM6Tws4C",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2479017474/reactions"
            },
            "updated_at": "2024-11-15T14:29:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2479017474",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 1,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/31225/comments",
    "created_at": "2024-11-15T14:14:30Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/31225/events",
    "html_url": "https://github.com/neovim/neovim/issues/31225",
    "id": 2662109097,
    "labels": [
        {
            "color": "f9d0c4",
            "default": true,
            "description": "issues reporting wrong behavior",
            "id": 77997474,
            "name": "bug",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3NA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/31225/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6erI-p",
    "number": 31225,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/31225/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/31225/timeline",
    "title": "`syntax/astro.vim` makes `nvim-cmp` laggy",
    "updated_at": "2024-11-15T14:29:04Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/31225",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/62308020?v=4",
        "events_url": "https://api.github.com/users/geril2207/events{/privacy}",
        "followers_url": "https://api.github.com/users/geril2207/followers",
        "following_url": "https://api.github.com/users/geril2207/following{/other_user}",
        "gists_url": "https://api.github.com/users/geril2207/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/geril2207",
        "id": 62308020,
        "login": "geril2207",
        "node_id": "MDQ6VXNlcjYyMzA4MDIw",
        "organizations_url": "https://api.github.com/users/geril2207/orgs",
        "received_events_url": "https://api.github.com/users/geril2207/received_events",
        "repos_url": "https://api.github.com/users/geril2207/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/geril2207/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/geril2207/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/geril2207",
        "user_view_type": "public"
    }
}