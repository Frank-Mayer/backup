{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Feature already in Vim?\n\nNo\n\n### Feature description\n\nWith the advent of the lua api for defining autocommands allowing us to pass closure (which was the biggest usability hurdle), I still find myself wanting more granular control over when autocommands are called in relation to each other. One option would be to include and additional `priority` key in the opts table when defining an autocommand, for which autocommands would be sorted on prior to executing. This would align with what we do for extmarks.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "This is essentially an integer that plugins would need to coordinate. \r\n\r\nMeanwhile if you already control all the handlers, then you control the order they are registered. And handlers are executed in that order already (or should be...).\r\n\r\n",
            "created_at": "2022-04-27T01:56:43Z",
            "html_url": "https://github.com/neovim/neovim/issues/18279#issuecomment-1110446167",
            "id": 1110446167,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18279",
            "node_id": "IC_kwDOAPphoM5CMBBX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1110446167/reactions"
            },
            "updated_at": "2022-04-27T01:56:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1110446167",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> This is essentially an integer that plugins would need to coordinate.\r\n\r\nThere is already (useful) precedent for this. Nvim-treesitter, the diagnostic module, and the lsp client all coordinate amongst highlight priorities for extmarks. Without this, there is *no* means of allowing coordination, I don't see the status quo as desirable.",
            "created_at": "2022-04-27T01:58:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/18279#issuecomment-1110446947",
            "id": 1110446947,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18279",
            "node_id": "IC_kwDOAPphoM5CMBNj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1110446947/reactions"
            },
            "updated_at": "2022-04-27T02:06:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1110446947",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13316262?v=4",
                "events_url": "https://api.github.com/users/mjlbach/events{/privacy}",
                "followers_url": "https://api.github.com/users/mjlbach/followers",
                "following_url": "https://api.github.com/users/mjlbach/following{/other_user}",
                "gists_url": "https://api.github.com/users/mjlbach/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mjlbach",
                "id": 13316262,
                "login": "mjlbach",
                "node_id": "MDQ6VXNlcjEzMzE2MjYy",
                "organizations_url": "https://api.github.com/users/mjlbach/orgs",
                "received_events_url": "https://api.github.com/users/mjlbach/received_events",
                "repos_url": "https://api.github.com/users/mjlbach/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mjlbach/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mjlbach/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mjlbach"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Alternative would be \"dependent events\". We have something like that internally (`multiqueue.c`). Events could have children... this means the event-id needs to be known to other plugins, hmm...\r\n\r\nWhat is a concrete use-case? \"Like extmarks and highlights\", ok, but... limitations make things easier to reason about / debug / visualize.",
            "created_at": "2022-04-27T02:26:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/18279#issuecomment-1110463351",
            "id": 1110463351,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18279",
            "node_id": "IC_kwDOAPphoM5CMFN3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1110463351/reactions"
            },
            "updated_at": "2022-04-27T02:27:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1110463351",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Dependent events would be another alternative/implementation. There still is the coordination issue as you point out.\r\n\r\nThe main usescases are conditioned events dependent on some buffer local state, or agnostic to plugin loading order, in the context of multiple interactive plugins.\r\n\r\nA motivating example is I wanted to suggest to the `nvim-lsp-installer` author to run an autocommand that overrides a hook I've exposed in lspconfig that allows plugins to modify lsp configurations globally. The main purpose is to allow them to substitute `cmd` with a cmd that points to the nvim-lsp-installer managed server path. There currently is not a way to guarantee plugin loading order, so the autocommands from lspconfig and nvim-lsp-installer may conflict.\r\n\r\nThere are ofc other options (allowing for a fixed loading order of plugins, which some package managers for neovim provider) or some tricks around deferring the initialization of the plugins itself, but I think the idea of allowing an order to the autocommands merits discussion.",
            "created_at": "2022-04-27T02:38:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/18279#issuecomment-1110469726",
            "id": 1110469726,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18279",
            "node_id": "IC_kwDOAPphoM5CMGxe",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1110469726/reactions"
            },
            "updated_at": "2022-04-27T02:38:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1110469726",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13316262?v=4",
                "events_url": "https://api.github.com/users/mjlbach/events{/privacy}",
                "followers_url": "https://api.github.com/users/mjlbach/followers",
                "following_url": "https://api.github.com/users/mjlbach/following{/other_user}",
                "gists_url": "https://api.github.com/users/mjlbach/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mjlbach",
                "id": 13316262,
                "login": "mjlbach",
                "node_id": "MDQ6VXNlcjEzMzE2MjYy",
                "organizations_url": "https://api.github.com/users/mjlbach/orgs",
                "received_events_url": "https://api.github.com/users/mjlbach/received_events",
                "repos_url": "https://api.github.com/users/mjlbach/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mjlbach/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mjlbach/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mjlbach"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Eh. nvim-lsp-installer previously had a similar XY problem here: https://github.com/neovim/neovim/issues/15648\r\n\r\nI'm very skeptical that we need to complicate the event system. The general idea of an event system is that it is like UDP, there is no guaranteed order. Guaranteeing things adds costs.\r\n\r\nMy analysis of the previous nvim-lsp-installer XY problem is here: https://github.com/neovim/neovim/issues/15648#issuecomment-921707494\r\n\r\nThat analysis went mostly ignored. Not sure I want to dig into this again, but I have a feeling there's a better approach that doesn't require control over... the entire event system.\r\n\r\nUsually when the answer is \"I need to control everything\", it's a sign of a design flaw.",
            "created_at": "2022-04-27T02:57:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/18279#issuecomment-1110478762",
            "id": 1110478762,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18279",
            "node_id": "IC_kwDOAPphoM5CMI-q",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1110478762/reactions"
            },
            "updated_at": "2022-04-27T03:01:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1110478762",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> My analysis of the previous nvim-lsp-installer XY problem is here: https://github.com/neovim/neovim/issues/15648#issuecomment-921707494\r\n\r\nThis is not the current problem. The current problem is how one of two plugins with no guaranteed loading order can conditionally override exposed hooks (meant to be overridden) in the other.\r\n\r\n> That analysis went mostly ignored.\r\n\r\nIt did not. Your proposed solution with job control added a large amount of overhead (which I pointed to you at the time as you can see in the thread, and my concern was dismissed by you), and did not address the problem of conditional load order. After considering your solution, I realized that fundamentally, we could not provide guarantees about the availability of a server launch command as many servers are not executable locally, but instead treated as remote hosts and connected t to via network protocols (for reference, I have a pending PR enabling support for TCP based clients). I already addressed the referenced issue https://github.com/neovim/neovim/pull/16430.\r\n\r\n> Guaranteeing things adds costs.\r\n\r\nSorting a list should be a trivial time cost, and autocommands are not executed in parallel. I'm not sure this is a functionally meaningful truism in this case.\r\n\r\n> Usually when the answer is \"I need to control everything\", it's a sign of a design flaw.\r\n\r\nI don't think this is a substantiated intuition, I think it's natural that our event system should be more granular. Regardless of if that manifests as a priority order or a conditional order. In order for a conditional system to be as expressive as allowing a priority, it would need to allow specifying both parent and child relations (so lspconfig autocommands can be run as a child, agnostic to the existence of nvim-lsp-installer or other future plugins that may wish to hook into it).\r\n",
            "created_at": "2022-04-27T15:29:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/18279#issuecomment-1111144310",
            "id": 1111144310,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18279",
            "node_id": "IC_kwDOAPphoM5COrd2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1111144310/reactions"
            },
            "updated_at": "2022-04-27T15:30:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1111144310",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13316262?v=4",
                "events_url": "https://api.github.com/users/mjlbach/events{/privacy}",
                "followers_url": "https://api.github.com/users/mjlbach/followers",
                "following_url": "https://api.github.com/users/mjlbach/following{/other_user}",
                "gists_url": "https://api.github.com/users/mjlbach/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mjlbach",
                "id": 13316262,
                "login": "mjlbach",
                "node_id": "MDQ6VXNlcjEzMzE2MjYy",
                "organizations_url": "https://api.github.com/users/mjlbach/orgs",
                "received_events_url": "https://api.github.com/users/mjlbach/received_events",
                "repos_url": "https://api.github.com/users/mjlbach/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mjlbach/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mjlbach/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mjlbach"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The current problem is how one of two plugins with no guaranteed loading order can conditionally override exposed hooks (meant to be overridden) in the other.\r\n\r\nThis sounds like package dependencies, no? So adding the equivalent of a \"z-index\" to events is half-baked.\r\n\r\n> There currently is not a way to guarantee plugin loading order, so the autocommands from lspconfig and nvim-lsp-installer may conflict.\r\n\r\nThe long-standing pattern is for plugins to eager-load other plugins, e.g. `:runtime plugin/foo.lua` or `:packadd`.\r\n",
            "created_at": "2022-04-27T18:30:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/18279#issuecomment-1111345773",
            "id": 1111345773,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18279",
            "node_id": "IC_kwDOAPphoM5CPcpt",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1111345773/reactions"
            },
            "updated_at": "2022-04-27T18:30:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1111345773",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comments": 7,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/18279/comments",
    "created_at": "2022-04-26T23:29:28Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/18279/events",
    "html_url": "https://github.com/neovim/neovim/issues/18279",
    "id": 1216594668,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "events, autocommands",
            "id": 3341085842,
            "name": "events",
            "node_id": "MDU6TGFiZWwzMzQxMDg1ODQy",
            "url": "https://api.github.com/repos/neovim/neovim/labels/events"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/18279/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM5Ig8Ls",
    "number": 18279,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 1,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 1,
        "url": "https://api.github.com/repos/neovim/neovim/issues/18279/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/18279/timeline",
    "title": "Allow specifying priority for autocommands within the same event",
    "updated_at": "2024-09-30T18:17:41Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/18279",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/13316262?v=4",
        "events_url": "https://api.github.com/users/mjlbach/events{/privacy}",
        "followers_url": "https://api.github.com/users/mjlbach/followers",
        "following_url": "https://api.github.com/users/mjlbach/following{/other_user}",
        "gists_url": "https://api.github.com/users/mjlbach/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/mjlbach",
        "id": 13316262,
        "login": "mjlbach",
        "node_id": "MDQ6VXNlcjEzMzE2MjYy",
        "organizations_url": "https://api.github.com/users/mjlbach/orgs",
        "received_events_url": "https://api.github.com/users/mjlbach/received_events",
        "repos_url": "https://api.github.com/users/mjlbach/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/mjlbach/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mjlbach/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/mjlbach"
    }
}