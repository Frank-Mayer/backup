{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "Due to my inability to debug the problem with luajit failing to run the tests (#471) I started to seek whether there are other acceptable variants of testing my code. First thing I looked at was obviously writing tests in C with some macros helpers. After rewriting `expr.moon` with C I got funny results:\n1. Difference between C and moonscript version in a number of characters of main test body is negligible: moonscript\n   \n   ```\n   it 'parses number 0', ->\n     eqn 'N[+0+]', '0'\n   ```\n   \n   changed to\n   \n   ``` c\n   IT(\"parses number 0\",\n      EQN(\"N[+0+]\", \"0\", DEF))\n   ```\n   \n   : only added two pairs of parenthesis and `DEF`. Some very long single line strings (they are single line, but for readability I need to wrap them) are expressed better with C.\n2. Necessary definitions (macros and imports) take only 81 lines. In comparison:\n   - there are 16 lines of function definitions necessary to call test function.\n   - 25 lines to call all necessary initializers (just as many as in C though if you forget about some unnecessary things)\n   - 57 lines (without comments) of functions and other things in helpers.moon\n   - about a hundred (without comments) in preprocess.moon\n   \n   These lines are needed mainly to fight luajit to make it what we want (mainly to get `#include` equivalent) and this fight is still not finished: including random files (e.g. uncomment and fix cimports needed to declare initializer functions) leads to nothing, but error and test failure.\n3. Luajit cannot run inside valgrind.\n4. With luajit ffi you are lucky if you were able to set breakpoint in nvim source code and it worked. It sometimes work (mainly after I caused failure), sometimes does not. Last few times I tried it was not going to work, failure or not.\n5. If it is luajit who fails you are completely out of lack: luajit internals are way too complex.\n6. Inside luajit no macros like SIZE_MAX are available.\n7. Luajit is slow. I am not joking: :commands tests with my `eqn` function doing absolutely nothing useful (specifically not calling my parser) complete in 4.8 seconds, normal runs complete in 5.6 seconds. Only 14% of time it is doing something useful.\n8. You cannot add test stage to Gentoo ebuilds with busted because busted (and a number of its dependencies) is not  available in portage. In fact there is no package for busted in any distribution I know.\n\nThe main my reason is obviously inability to debug tests.\n\nGood thing is that due to luajit we are going to have decent linter (using structs was just asking for trouble, so I had to make testhelpers that output strings and only strings).\n\nMacros I used were:\n\n``` c\n#define DEF -1\n\n#define START_TEST \\\n    int main(int argc, char **argv) \\\n    { \\\n      int ret = 0; \\\n      int indent_level = 0; \\\n      mch_early_init(); \\\n      mb_init(); \\\n      eval_init(); \\\n      init_normal_cmds(); \\\n      allocate_generic_buffers(); \\\n      win_alloc_first(); \\\n      init_yank(); \\\n      init_homedir(); \\\n      set_init_1(); \\\n      set_lang_var();\n#define END_TEST \\\n      return !!ret; \\\n    }\n#define DESCRIBE(msg, block) \\\n    { \\\n      printf(\"%*s%s\\n\", indent_level*2, \"\", msg); \\\n      indent_level++; \\\n      block \\\n      indent_level--; \\\n    }\n#define IT(msg, block) \\\n    { \\\n      printf(\"%*s%s: \", indent_level, \"\", msg); \\\n      indent_level++; \\\n      int prev_ret = ret; \\\n      do { \\\n        block \\\n      } while (0); \\\n      if (prev_ret == ret) { \\\n        puts(\"ok\"); \\\n      } \\\n      indent_level--; \\\n    }\n#define EQN(expected_result, toparse, expected_offset) \\\n    { \\\n      char *parsed = srepresent_parse0(toparse, false); \\\n      size_t exp_offset = expected_offset; \\\n      char expected[sizeof(exp_offset) * 2 + sizeof(expected_result) + 1]; \\\n      if (expected_offset == DEF) { \\\n        exp_offset = sizeof(toparse) - 1; \\\n      } \\\n      sprintf(expected, \"%X:%s\", (int) exp_offset, expected_result); \\\n      if (strcmp(expected, parsed) != 0) { \\\n        printf(\"\\n%*sLine %u:\\n%*sexpected %s,\\n%*s but got %s\\n\", \\\n               indent_level, \"\", __LINE__, \\\n               indent_level, \"\", expected, \\\n               indent_level, \"\", parsed); \\\n        ret++; \\\n      } \\\n      free(parsed); \\\n    }\n#define ITN(toparse, expected_result, expected_offset) \\\n    IT(\"parses \" toparse, \\\n       EQN(expected_result, toparse, expected_offset))\n```\n\nIt is probably better to find some C testing framework though.\n\n<bountysource-plugin>\n\n---\n\nWant to back this issue? **[Place a bounty on it!](https://www.bountysource.com/issues/2880581-rfc-rewrite-luajit-ffi-tests-with-c?utm_campaign=plugin&utm_content=tracker%2F461131&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F461131&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n",
    "closed_at": "2015-03-19T00:06:52Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk"
    },
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "If that's what it takes to test the code (no alternative), then so be it. I still think that if it's a legitimate LuaJIT bug (and not a busted bug), Mike Pall will fix it really fast if we can get some kind of reduced case. I remember suspecting that it was a busted bug though, but can't recall why I thought that...\n",
            "created_at": "2014-06-29T19:24:54Z",
            "html_url": "https://github.com/neovim/neovim/issues/903#issuecomment-47469723",
            "id": 47469723,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/903",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDY5NzIz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/47469723/reactions"
            },
            "updated_at": "2014-06-29T19:24:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/47469723",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Is this necessary for all tests, or specifically the VimL translator tests?\n\n> It is probably better to find some C testing framework though.\n\nWhen I looked a couple years ago, http://cmocka.org/ was a good balance of small/featureful/cross-platform. Even if we don't use the \"mock\" features. See also: http://api.cmocka.org/modules.html\n",
            "created_at": "2014-06-29T19:43:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/903#issuecomment-47470908",
            "id": 47470908,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/903",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDcwOTA4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/47470908/reactions"
            },
            "updated_at": "2014-06-29T19:43:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/47470908",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Another option might be use python [cffi module](https://cffi.readthedocs.org/en/release-0.8/), which was inspired by luajit version\n",
            "created_at": "2014-06-29T19:44:52Z",
            "html_url": "https://github.com/neovim/neovim/issues/903#issuecomment-47471016",
            "id": 47471016,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/903",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDcxMDE2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/47471016/reactions"
            },
            "updated_at": "2014-06-29T19:44:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/47471016",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Is this necessary for all tests, or specifically the VimL translator tests?\n\nI am afraid that without knowing the cause we may randomly hit issues. Currently I have to rewrite VimL translator functional tests (they are not unit, despite their location). Inability to run under valgrind is applicable for all tests.\n\nI am also not sure how clang instrumentation works under given circumstances, but I do not think it works fine: consider the case when some function received string of unknown length from luajit. If it was allocated by a C library function clang may have recorded information about its actual length. But it was not  and worse: it was allocated by custom, uninstrumented, allocator run from a code that was created a few ticks ago (by JIT compiler) and is not instrumented as well. I am pretty sure instrumented code cannot detect out of bounds and uninitialized access under this circumstances.\n\n> Another option might be use python cffi module, which was inspired by luajit version\n\nThis solves the problem with valgrind only if we compile debug version of python (non-debug runs under valgrind, but shows lots of false positives). I know Python internals a bit better, but still not enough to debug complex problems. Though I will definitely not see Python locked somewhere in (I assume) JIT-compiled code like I saw luajit (`kdbg` was showing something like this:\n\n![lj_BC_LEN](http://img-fotki.yandex.ru/get/9816/9151298.4/0_aa5dd_40c4d906_orig.png)\n\n. Top level (here: `lj_tab_len`) may be different or even absent, but `lj_BC_LEN` is always there and `lua_pcall` line never changes from\n\n> ```\n>   status = lj_vm_pcall(L, L->top - nargs, nresults+1, ef);\n> ```\n\n. Breakpoint set on next line is never reached.\n\nI am also unsure how this module will solve issues with importing. Some problems may definitely be solved by creating one `cdef.FFI` instance for each set of tests that need import.\n\nProblems with debugger should be solved with cffi I believe: I never saw problems with debugging Vim python bindings.\n\n## \n\nActually tests problem were a main reason I did nothing but refactoring with translator in a past couple of weeks. When I realized this fact I decided that if I cannot debug luajit I should drop it from equation. (Though I did it not only due to luajit: refactored functions were not nice to work with.)\n",
            "created_at": "2014-06-29T20:33:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/903#issuecomment-47474028",
            "id": 47474028,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/903",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDc0MDI4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/47474028/reactions"
            },
            "updated_at": "2014-06-29T20:33:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/47474028",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Both cmocka and cffi are present in main portage tree. I hope they are not using semantic versioning like moonscript (does not): they are all `0.*`.\n",
            "created_at": "2014-06-29T20:37:11Z",
            "html_url": "https://github.com/neovim/neovim/issues/903#issuecomment-47474116",
            "id": 47474116,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/903",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDc0MTE2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/47474116/reactions"
            },
            "updated_at": "2014-06-29T20:37:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/47474116",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I briefly looked at CMocka and can say that it is good because\n- If I ever want to make tests unit I need mocking different objects.\n- There is at least one cmake-based project where cmake code that works with cmocka may be borrowed from.\n- It is C framework, so I do not expect problems with various debugging programs.\n",
            "created_at": "2014-06-29T20:59:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/903#issuecomment-47474710",
            "id": 47474710,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/903",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDc0NzEw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/47474710/reactions"
            },
            "updated_at": "2014-06-29T20:59:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/47474710",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "If unit testing with C/macros is simpler, then I have no objections.\n",
            "created_at": "2014-06-29T21:10:26Z",
            "html_url": "https://github.com/neovim/neovim/issues/903#issuecomment-47475087",
            "id": 47475087,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/903",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDc1MDg3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/47475087/reactions"
            },
            "updated_at": "2014-06-29T21:10:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/47475087",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda"
            }
        },
        {
            "author_association": "NONE",
            "body": "[greatest](https://github.com/silentbicycle/greatest) is another C unit testing library. It consists of a single header file, thus it's simple and could easily be imported into the neovim tree.\n",
            "created_at": "2014-06-29T21:17:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/903#issuecomment-47475514",
            "id": 47475514,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/903",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDc1NTE0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/47475514/reactions"
            },
            "updated_at": "2014-06-29T21:17:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/47475514",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1928113?v=4",
                "events_url": "https://api.github.com/users/wlhlm/events{/privacy}",
                "followers_url": "https://api.github.com/users/wlhlm/followers",
                "following_url": "https://api.github.com/users/wlhlm/following{/other_user}",
                "gists_url": "https://api.github.com/users/wlhlm/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wlhlm",
                "id": 1928113,
                "login": "wlhlm",
                "node_id": "MDQ6VXNlcjE5MjgxMTM=",
                "organizations_url": "https://api.github.com/users/wlhlm/orgs",
                "received_events_url": "https://api.github.com/users/wlhlm/received_events",
                "repos_url": "https://api.github.com/users/wlhlm/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wlhlm/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wlhlm/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wlhlm"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> After rewriting expr.moon \n\n@ZyX-I Just to be clear, did you have the same problems with a plain-lua (not moon) test?\n",
            "created_at": "2014-06-29T21:39:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/903#issuecomment-47476838",
            "id": 47476838,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/903",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDc2ODM4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/47476838/reactions"
            },
            "updated_at": "2014-06-29T21:39:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/47476838",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@justinmk Good question. I have not tried, but doing\n\n``` Sh\nfor f in **/*.moon ; do moonc $f && rm $f ; done\n```\n\n(and changing relevant `.cmake` file to run `.lua` tests) revealed that there are some (fixable) errors in tests (for some reason it is missing all declarations from `garray.h` and env/fs/users fail with either “attempt to redefine …” (i.e. double inclusion) or “declaration specifier expected” (i.e. missing typedef)). Thus only visible problems without moonscript are valgrind/sanitizers, headers and missing macro definitions.\n\nI would still say that if we have to rewrite tests it is better to use some robust alternatives. Dropping moonscript means that the most urgent problem is gone, but that is not the only one.\n\nI do not understand how just using moonscript may have resulted in failure at some random point. Based on what I know it does nothing more then compiling to lua, thus I think it triggers some luajit bug rather then contains bug on its own.\n",
            "created_at": "2014-06-30T04:30:34Z",
            "html_url": "https://github.com/neovim/neovim/issues/903#issuecomment-47494001",
            "id": 47494001,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/903",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDk0MDAx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/47494001/reactions"
            },
            "updated_at": "2014-06-30T04:30:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/47494001",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Just for reference, there are/were some busted bugs that also talked of it \"hanging\" and things like that: https://github.com/Olivine-Labs/busted/issues/236 (I believe this is why we rolled back the busted runner once). It could be a LuaJIT bug, but at this point I'm not so sure. I'd try it with LuaJIT 2.1 as well.\n\n**EDIT**: also: https://github.com/Olivine-Labs/busted/issues/242 (busted hangs after 194 tests)\n\n**EDIT2**: By the way ZyX, it's officially allowed to write pure Lua tests now, in case you missed it.\n",
            "created_at": "2014-06-30T07:28:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/903#issuecomment-47501997",
            "id": 47501997,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/903",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTAxOTk3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/47501997/reactions"
            },
            "updated_at": "2014-06-30T07:29:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/47501997",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@aktau I did not miss this, just did not want to bother with rewriting tests (even with moonc) for the second time (and actually did not think this will fix anything).\n\nInteresting fact: if I run `moonc` just for my tests everything passes. If I run moonc for all tests it fails to run a number of tests due to problems with includes.\n",
            "created_at": "2014-06-30T16:44:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/903#issuecomment-47555157",
            "id": 47555157,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/903",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTU1MTU3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/47555157/reactions"
            },
            "updated_at": "2014-06-30T16:44:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/47555157",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@wlhlm I do not see greatest tests  in its repository. I mean I do not see it is being tested itself. Both `busted` and `cmocka` have test suites. Mocking objects is also nice functionality, though I am not going to use it right now.\n",
            "created_at": "2014-06-30T17:29:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/903#issuecomment-47560555",
            "id": 47560555,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/903",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTYwNTU1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/47560555/reactions"
            },
            "updated_at": "2014-06-30T17:29:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/47560555",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "NONE",
            "body": "@ZyX-I That might be a legitimate concern. I just wanted to bring another testing library to your attention. I have used it in some of my own small projects and found it simple and easy to use.\n",
            "created_at": "2014-06-30T18:28:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/903#issuecomment-47567915",
            "id": 47567915,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/903",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTY3OTE1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/47567915/reactions"
            },
            "updated_at": "2014-06-30T18:28:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/47567915",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1928113?v=4",
                "events_url": "https://api.github.com/users/wlhlm/events{/privacy}",
                "followers_url": "https://api.github.com/users/wlhlm/followers",
                "following_url": "https://api.github.com/users/wlhlm/following{/other_user}",
                "gists_url": "https://api.github.com/users/wlhlm/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wlhlm",
                "id": 1928113,
                "login": "wlhlm",
                "node_id": "MDQ6VXNlcjE5MjgxMTM=",
                "organizations_url": "https://api.github.com/users/wlhlm/orgs",
                "received_events_url": "https://api.github.com/users/wlhlm/received_events",
                "repos_url": "https://api.github.com/users/wlhlm/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wlhlm/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wlhlm/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wlhlm"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Because @justinmk just referenced. I would only support splitting test infrastructure between Lua/C if we have decisively demonstrated that we can't do something because Lua(JIT) is not able to do it. Not because some framework that's patchable is acting up (I'm thinking of busted and moonscript).\n",
            "created_at": "2014-07-03T20:26:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/903#issuecomment-47980676",
            "id": 47980676,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/903",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3OTgwNjc2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/47980676/reactions"
            },
            "updated_at": "2014-07-03T20:26:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/47980676",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@aktau Definitely agree. I was under the impression that we were at an intractable impasse. \n",
            "created_at": "2014-07-03T21:00:00Z",
            "html_url": "https://github.com/neovim/neovim/issues/903#issuecomment-47984207",
            "id": 47984207,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/903",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ3OTg0MjA3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/47984207/reactions"
            },
            "updated_at": "2014-07-03T21:00:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/47984207",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@aktau I am not going to rewrite tests until I find use for cmocka mocking features or hit another issue. The fact that I do not like current testing facility is not enough to make me rewrite tests. But in the thread that was referenced you just clearly shown problem 2.: to get proper `#include` support you must fight lua interpreter.\n\nAnd another one I did not reference: to add tests one needs to know C, lua and moonscript.\n\nThus I would not close this issue (in case anybody wants to do this): I am afraid that by choosing luajit ffi you have lost lots of time on things that you will get “for free” with C tests. But if we start rewriting it we will loose even more.\n",
            "created_at": "2014-07-04T04:01:34Z",
            "html_url": "https://github.com/neovim/neovim/issues/903#issuecomment-48007234",
            "id": 48007234,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/903",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDA3MjM0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48007234/reactions"
            },
            "updated_at": "2014-07-04T04:01:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48007234",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> And another one I did not reference: to add tests one needs to know C, lua and moonscript.\n\nI fully agree with you (and agreed in the past) that adding moonscript was perhaps one abstraction too much. This has been fixed as it's now allowed to use pure Lua. Yet I don't think it's entirely true what you say. In principle, the implementer of the test need not understand the original C implementation. In fact it would be better if (s)he didn't. When I'm writing tests for my own functions, I notice that often I just test what I coded, and not the other special boundary cases I might be missing (because if I did think of them, I would've probably coded them in).\n\n> 2.: to get proper #include support you must fight lua interpreter.\n\nThis is an engineering problem that can (and will) be taken care of. The only problem is that Mike Pall hasn't had the time to add a C preprocessor to LuaJIT yet. With C you get this for free, and with LuaJIT one has to make one. Either we go with something custom and jerry-rigged -- as we are using now -- or we look towards other libraries, such as the mentioned ffiex. But it's solvable and it's completely separate from the rest of the tests.\n\nI find the tests in Lua easy to read and the dynamism Lua can afford might come in handy when we start writing more complex (table-driven) tests. This remains to be seen, but I'm hopeful.\n",
            "created_at": "2014-07-04T08:45:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/903#issuecomment-48021204",
            "id": 48021204,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/903",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDIxMjA0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48021204/reactions"
            },
            "updated_at": "2014-07-04T08:45:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48021204",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "If the luajit ffi module is the main problem, then I will again bring attention to [python cffi](https://cffi.readthedocs.org/en/release-0.8/) which seems to have a more powerful C preprocessor\n",
            "created_at": "2014-07-04T11:12:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/903#issuecomment-48032062",
            "id": 48032062,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/903",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDMyMDYy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48032062/reactions"
            },
            "updated_at": "2014-07-04T11:12:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48032062",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "On July 4, 2014 12:45:22 PM GMT+03:00, Nicolas Hillegeer notifications@github.com wrote:\n\n> > And another one I did not reference: to add tests one needs to know\n> > C, lua and moonscript.\n> \n> I fully agree with you (and agreed in the past) that adding moonscript\n> was perhaps one abstraction too much. This has been fixed as it's now\n> allowed to use pure Lua. Yet I don't think it's entirely true what you\n> say. In principle, the implementer of the test need not understand the\n> original C implementation. In fact it would be better if (s)he didn't.\n> When I'm writing tests for my own functions, I notice that often I just\n> test what I coded, and not the other special boundary cases I might be\n> missing (because if I did think of them, I would've probably coded them\n> in).\n\nI cannot completely agree here: look at my python tests in Vim (86 and 87), the last chunks: it is testing for leaks during handling error conditions (except for malloc errors) and I have not a single idea how you can trigger _all_ error conditions without knowing the code.\n\nThere are some things that is easier to mention without knowing the code and things that can be tested only when you know the code. But it does not matter whether you know the _code_ or not, you must know _language_ in any case: can you say that the person who knows only lua will think about _integer overflow_? I think such person knows about loosing precision, but not overflow.\n\nPerson who knows C will probably test for case as passing INT_MAX+1 to a function that accepts int64_t: to test whether it will behave incorrectly due to int64_t to int conversion. Persons who know e.g. lua and python will not think about _this_ value: there is nothing in lua and python that makes this value special. Same for most high-level languages.\n\n> > 2.: to get proper #include support you must fight lua interpreter.\n> \n> This is an engineering problem that can (and will) be taken care of.\n> The only problem is that Mike Pall hasn't had the time to add a C\n> preprocessor to LuaJIT yet. With C you get this for free, and with\n> LuaJIT one has to make one. Either we go with something custom and\n> jerry-rigged -- as we are using now -- or we look towards other\n> libraries, such as the mentioned ffiex. But it's solvable and it's\n> completely separate from the rest of the tests.\n> \n> I find the tests in Lua easy to read and the dynamism Lua can afford\n> might come in handy when we start writing more complex (table-driven)\n> tests. This remains to be seen, but I'm hopeful.\n\nI do not think that handling tables in lua is easier then using some sort of NULL-terminated arrays in C. Number of lines used to define them and iterate over them rarely differs.\n\nIf it was python and you were going to use things found in itertools I would say Python is easier. But not lua, it has too poor standard library and very little amount of syntactic sugar.\n\n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/neovim/neovim/issues/903#issuecomment-48021204\n",
            "created_at": "2014-07-04T12:11:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/903#issuecomment-48036533",
            "id": 48036533,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/903",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDM2NTMz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48036533/reactions"
            },
            "updated_at": "2014-07-04T12:11:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48036533",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "On July 4, 2014 3:12:42 PM GMT+03:00, Thiago de Arruda notifications@github.com wrote:\n\n> If the luajit ffi module is the main problem, then I will again bring\n> attention to [python\n> cffi](https://cffi.readthedocs.org/en/release-0.8/) which seems to have\n> a more powerful C preprocessor\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/neovim/neovim/issues/903#issuecomment-48032062\n\nActually some problems will be solved just by making busted run tests in a separate processes. I have not complained about this yet because I did not examine this possibility. Advantages:\n1. I do not think you may find many developers here who have only one core in the machines they use for developing neovim and almost definitely no developers without either multicore processor or processor with hyperthreading: it will speed up tests more then a little bit.\n2. With each test file having their own lua instance \"... redefined\" errors will be far less likely.\n",
            "created_at": "2014-07-04T12:47:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/903#issuecomment-48039971",
            "id": 48039971,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/903",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDM5OTcx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48039971/reactions"
            },
            "updated_at": "2014-07-04T12:47:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48039971",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I think it might be worth doing this, but I don't think it will speed up the tests, despite the parallelization opportunities. I think the startup cost of a LuaJIT+busted+dll load+C preprocessor will overshadow the speed advantages of running in parallel.\n",
            "created_at": "2014-07-04T14:14:05Z",
            "html_url": "https://github.com/neovim/neovim/issues/903#issuecomment-48048211",
            "id": 48048211,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/903",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDQ4MjEx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48048211/reactions"
            },
            "updated_at": "2014-07-04T14:14:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48048211",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@tarruda Are you suggesting going away from Lua completely for the unit tests and using Python cffi?\n",
            "created_at": "2014-07-08T00:02:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/903#issuecomment-48256898",
            "id": 48256898,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/903",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MjU2ODk4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48256898/reactions"
            },
            "updated_at": "2014-07-08T00:02:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48256898",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/157801?v=4",
                "events_url": "https://api.github.com/users/jdavis/events{/privacy}",
                "followers_url": "https://api.github.com/users/jdavis/followers",
                "following_url": "https://api.github.com/users/jdavis/following{/other_user}",
                "gists_url": "https://api.github.com/users/jdavis/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jdavis",
                "id": 157801,
                "login": "jdavis",
                "node_id": "MDQ6VXNlcjE1NzgwMQ==",
                "organizations_url": "https://api.github.com/users/jdavis/orgs",
                "received_events_url": "https://api.github.com/users/jdavis/received_events",
                "repos_url": "https://api.github.com/users/jdavis/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jdavis/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jdavis/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jdavis"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> @tarruda Are you suggesting going away from Lua completely for the unit tests and using Python cffi?\n\nNo, I suggested it as a possible alternative if lua ffi wasn't good enough\n",
            "created_at": "2014-07-08T10:09:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/903#issuecomment-48306847",
            "id": 48306847,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/903",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MzA2ODQ3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48306847/reactions"
            },
            "updated_at": "2014-07-08T10:09:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48306847",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "closed by https://github.com/neovim/neovim/pull/943. @ZyX-I  feel free to re-open if there's still a need for this.\n",
            "created_at": "2014-08-04T05:10:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/903#issuecomment-51018167",
            "id": 51018167,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/903",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMDE4MTY3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51018167/reactions"
            },
            "updated_at": "2014-08-04T05:10:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51018167",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@justinmk Even after #1016 points 3 till 8 are not going to go anywhere and it looks like we are going to have yet another bicycle, slowly implementing what other C-focused testing frameworks already have. I.e. mocks will now be there, but cmocka already had mocks. And valgrind and automatic sanitizers support as well.\n\nI cannot say on which path more time will be wasted: if we switch all tests to some sane C framework or if we continue with writing functionality other frameworks have, so I am not reopening this issue.\n",
            "created_at": "2014-08-04T20:41:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/903#issuecomment-51114477",
            "id": 51114477,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/903",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMTE0NDc3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51114477/reactions"
            },
            "updated_at": "2014-08-04T20:41:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51114477",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@ZyX-I If you still can't debug then this is worth keeping open.\n\n> I cannot say on which path more time will be wasted: if we switch all tests to some sane C framework or if we continue with writing functionality other frameworks have,\n\nWe don't have to switch the existing unit tests. We could just start writing new tests in cmocka. The old tests are running just fine. But if there are some major issues then let's decide very soon what we're going to do about it.\n\n@tarruda @philix @aktau What do you think about writing a few tests in cmocka and see where it takes us? \n",
            "created_at": "2014-08-04T21:40:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/903#issuecomment-51121700",
            "id": 51121700,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/903",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMTIxNzAw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51121700/reactions"
            },
            "updated_at": "2014-08-04T21:40:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51121700",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> @justinmk Even after #1016 points 3 till 8 are not going to go anywhere and it looks like we are going to have yet another bicycle, slowly implementing what other C-focused testing frameworks already have. I.e. mocks will now be there, but cmocka already had mocks. And valgrind and automatic sanitizers support as well.\n\n3 is a bit of a problem, though I believed it was only the thread sanitizer that didn't work under LuaJIT. Does ASan/MSan not work either?\n\nI don't see point 8 as being a breaking issue though. It's a nice-to-have, but as long as any dev can run the tests, I don't see the need to run them at package time (in some chroot) as well.\n",
            "created_at": "2014-08-04T21:41:37Z",
            "html_url": "https://github.com/neovim/neovim/issues/903#issuecomment-51121801",
            "id": 51121801,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/903",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMTIxODAx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51121801/reactions"
            },
            "updated_at": "2014-08-04T21:41:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51121801",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> @tarruda @philix @aktau What do you think about writing a few tests in cmocka and see where it takes us?\n\nWhile I think cmocka looks nice, I'm not sure how I feel about splitting up the test infrastructure even more.\n\nOn a related side-note: what are we going for on the integration-testing side, actually? Vroom? The Python plugins? Lua/busted over msgpack?\n",
            "created_at": "2014-08-04T21:49:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/903#issuecomment-51122803",
            "id": 51122803,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/903",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMTIyODAz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51122803/reactions"
            },
            "updated_at": "2014-08-04T21:49:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51122803",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I haven't looked at vroom but it seems like a very active project. For my own plugins I use https://github.com/junegunn/vader.vim which is very clever and minimalist, but has a couple quirks which could be show-stoppers.\n\n> The Python plugins? Lua/busted over msgpack?\n\nMy impression was that we would have API tests that do most of the work (using a python or preferrably lua client). But I don't think we can completely do away with full integration tests which send actual keystrokes to Vim in the terminal (ie, vroom, vader, or whatever).\n",
            "created_at": "2014-08-04T21:54:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/903#issuecomment-51123325",
            "id": 51123325,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/903",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMTIzMzI1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51123325/reactions"
            },
            "updated_at": "2014-08-04T21:56:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51123325",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "On August 5, 2014 1:41:43 AM GMT+03:00, Nicolas Hillegeer notifications@github.com wrote:\n\n> > @justinmk Even after #1016 points 3 till 8 are not going to go\n> > anywhere and it looks like we are going to have yet another bicycle,\n> > slowly implementing what other C-focused testing frameworks already\n> > have. I.e. mocks will now be there, but cmocka already had mocks. And\n> > valgrind and automatic sanitizers support as well.\n> \n> 3 is a bit of a problem, though I believed it was only the thread\n> sanitizer that didn't work under LuaJIT. Does ASan/MSan not work\n> either?\n> \n> I don't see point 8 as being a breaking issue though. It's a\n> nice-to-have, but as long as any dev can run the tests, I don't see the\n> need to run them at package time (in some chroot) as well.\n\nYou are understanding it wrong. Gentoo does not have binary packages, so tests are there for the user to check whether everything compiled correctly and whether there are no conflicts with other environment (i.e. with too old/too new library). Most people (myself included) do not enable them because it greatly increases probability of build fails, because tests are disabled by default or because it makes build run too slow.\n\nAnd it does not use chroot either, so making tests run correctly may be tricky if you tell it use installation path. Not our case AFAIR and it is usually not the case always (developers do not expect people to run tests after installation, or expect them to run tests after some development-friendly installation).\n\n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/neovim/neovim/issues/903#issuecomment-51121801\n",
            "created_at": "2014-08-04T21:58:33Z",
            "html_url": "https://github.com/neovim/neovim/issues/903#issuecomment-51123804",
            "id": 51123804,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/903",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMTIzODA0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51123804/reactions"
            },
            "updated_at": "2014-08-04T21:58:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51123804",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> @justinmk Even after #1016 points 3 till 8 are not going to go anywhere and it looks like we are going to have yet another bicycle, slowly implementing what other C-focused testing frameworks already have. I.e. mocks will now be there, but cmocka already had mocks. And valgrind and automatic sanitizers support as well.\n\nThere may be a solution to 3, I just found [this](https://github.com/jmckaskill/luaffi), a port of luajit ffi to plain lua. I'm gonna give it a shot later, and if it works we'll probably be able to use valgrind or even debug the tests with gdb\n\n> @tarruda @philix @aktau What do you think about writing a few tests in cmocka and see where it takes us?\n\nIt still seems to me that writing tests in lua is both less verbose and more expressive than doing it in C.\n\n@ZyX-I how would [buffer_spec.lua](https://github.com/tarruda/neovim/blob/test-helpers/test/unit/buffer_spec.lua) would look like when converted to cmocka? I've linked the version at #1016 branch because it also contains a mocking example(I'd like to see how cmocka handles that)\n\nI think it's important to see a non-trivial suite like buffer_spec converted to cmocka before making any decisions. By non-trivial I mean tests do more than simply check function output, such as testing side-effects and capturing those for verification\n",
            "created_at": "2014-08-05T11:20:29Z",
            "html_url": "https://github.com/neovim/neovim/issues/903#issuecomment-51184011",
            "id": 51184011,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/903",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMTg0MDEx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51184011/reactions"
            },
            "updated_at": "2014-08-05T11:20:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51184011",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@ZyX-I \n\n> Luajit cannot run inside valgrind.\n\nHave you tried turning on `LUAJIT_USE_VALGRIND` for the luajit build?  The valgrind headers need to be installed for it to work, but it looks promising.\n",
            "created_at": "2014-08-05T11:28:00Z",
            "html_url": "https://github.com/neovim/neovim/issues/903#issuecomment-51184775",
            "id": 51184775,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/903",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUxMTg0Nzc1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51184775/reactions"
            },
            "updated_at": "2014-08-05T11:28:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/51184775",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/448087?v=4",
                "events_url": "https://api.github.com/users/jszakmeister/events{/privacy}",
                "followers_url": "https://api.github.com/users/jszakmeister/followers",
                "following_url": "https://api.github.com/users/jszakmeister/following{/other_user}",
                "gists_url": "https://api.github.com/users/jszakmeister/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jszakmeister",
                "id": 448087,
                "login": "jszakmeister",
                "node_id": "MDQ6VXNlcjQ0ODA4Nw==",
                "organizations_url": "https://api.github.com/users/jszakmeister/orgs",
                "received_events_url": "https://api.github.com/users/jszakmeister/received_events",
                "repos_url": "https://api.github.com/users/jszakmeister/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jszakmeister/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jszakmeister/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jszakmeister"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@tarruda If I am not mistaking `buffer_spec.lua` should look like\n\n``` C\n#include \"nvim/vim.h\"\n#include \"nvim/buffer.h\"\n#include \"nvim/window.h\"\n#include \"nvim/option.h\"\n#include \"nvim/os_unix.h\"\n#include \"nvim/memory.h\"\n#include <stdio.h>\n#include <unistd.h>\n#include <setjmp.h>\n#include <cmocka.h>\n\nstatic char *messages[100];\nstatic size_t msgnum = 0;\n\nint __wrap_emsg(char *emsg)\n{\n  messages[msgnum++] = xstrdup(emsg);\n  return 0;\n}\n\nstatic const char *const paths[] = {\n  \"test_file_path\",\n  \"file_path_test\",\n  \"path_test_file\",\n  NULL\n};\n\nvoid free_messages(void)\n{\n  while(msgnum--) {\n    free(messages[msgnum]);\n  }\n  msgnum = 0;\n}\n\nvoid buffer_test_setup(void **state)\n{\n  for (const char *const *path = (const char *const *) paths; *path != NULL; path++) {\n    FILE *fd = fopen(*path, \"w\");\n    fclose(fd);\n  }\n  free_messages();\n}\n\nvoid buffer_test_teardown(void **state)\n{\n  for (const char *const *path = (const char *const *) paths; *path != NULL; path++) {\n    unlink(*path);\n  }\n}\n\nvoid setup(void **state)\n{\n  mch_early_init();\n  win_alloc_first();\n  set_init_1();\n}\n\nbuf_T *new_buf(const char *path, int flags)\n{\n  return buflist_new((char_u *) path, (char_u *) path, 1, flags);\n}\n\nvoid test_buffer_valid(void **state)\n{\n  buf_T *buf;\n  // should view NULL as an invalid buffer\n  assert_false(buf_valid(NULL));\n  // should view an open buffer as valid\n  buf = new_buf(paths[0], BLN_LISTED);\n  assert_true(buf_valid(buf));\n  // should view a closed and hidden buffer as valid\n  buf = new_buf(paths[0], BLN_LISTED);\n  close_buffer(NULL, buf, 0, 0);\n  assert_true(buf_valid(buf));\n  // should view a closed and unloaded buffer as valid\n  buf = new_buf(paths[0], BLN_LISTED);\n  close_buffer(NULL, buf, DOBUF_UNLOAD, 0);\n  assert_true(buf_valid(buf));\n  // should view a closed and wiped buffer as invalid\n  buf = new_buf(paths[0], BLN_LISTED);\n  close_buffer(NULL, buf, DOBUF_WIPE, 0);\n  assert_false(buf_valid(buf));\n}\n\n#define ONLY_LISTED 0\n#define ALLOW_UNLISTED 1\n\nint find_buffer(const char *pattern, int allow_unlisted)\n{\n  return buflist_findpat((char_u *) pattern, NULL, allow_unlisted, 0, 0);\n}\n\nvoid test_buflist_findpat(void **state)\n{\n  buf_T *buf, *buf1, *buf2, *buf3;\n  // should find exact matches\n  buf = new_buf(paths[0], BLN_LISTED);\n  assert_int_equal(buf->b_fnum, find_buffer(paths[0], ONLY_LISTED));\n  close_buffer(NULL, buf, DOBUF_WIPE, 0);\n  // should prefer to match the start of a file path\n  buf1 = new_buf(paths[0], BLN_LISTED);\n  buf2 = new_buf(paths[1], BLN_LISTED);\n  buf3 = new_buf(paths[2], BLN_LISTED);\n  assert_int_equal(buf1->b_fnum, find_buffer(\"test\", ONLY_LISTED));\n  assert_int_equal(buf2->b_fnum, find_buffer(\"file\", ONLY_LISTED));\n  assert_int_equal(buf3->b_fnum, find_buffer(\"path\", ONLY_LISTED));\n  close_buffer(NULL, buf1, DOBUF_WIPE, 0);\n  close_buffer(NULL, buf2, DOBUF_WIPE, 0);\n  close_buffer(NULL, buf3, DOBUF_WIPE, 0);\n  // should prefer to match the end of a file over the middle\n  // Given: Two buffers, where 'test' appears in both\n  // And: 'test' appears at the end of buf3 but in the middle of buf2\n  buf2 = new_buf(paths[1], BLN_LISTED);\n  buf3 = new_buf(paths[2], BLN_LISTED);\n  // Then: buf2 is the buffer that is found\n  assert_int_equal(buf2->b_fnum, find_buffer(\"test\", ONLY_LISTED));\n  // When: We close buf2\n  close_buffer(NULL, buf2, DOBUF_WIPE, 0);\n  // And: Open buf1, which has 'file' in the middle of its name\n  buf1 = new_buf(paths[0], BLN_LISTED);\n  // Then: buf3 is found since 'file' appears at the end of the name\n  assert_int_equal(buf3->b_fnum, find_buffer(\"file\", ONLY_LISTED));\n  close_buffer(NULL, buf1, DOBUF_WIPE, 0);\n  close_buffer(NULL, buf3, DOBUF_WIPE, 0);\n  // should match a unique fragment of a file path\n  buf1 = new_buf(paths[0], BLN_LISTED);\n  buf2 = new_buf(paths[1], BLN_LISTED);\n  buf3 = new_buf(paths[2], BLN_LISTED);\n  assert_int_equal(buf3->b_fnum, find_buffer(\"_test_\", ONLY_LISTED));\n  close_buffer(NULL, buf1, DOBUF_WIPE, 0);\n  close_buffer(NULL, buf2, DOBUF_WIPE, 0);\n  close_buffer(NULL, buf3, DOBUF_WIPE, 0);\n  // should include / ignore unlisted buffers based on the flag.\n  // Given: A buffer\n  buf3 = new_buf(paths[2], BLN_LISTED);\n  // Then: We should find the buffer when it is given a unique pattern\n  assert_int_equal(buf3->b_fnum, find_buffer(\"_test_\", ONLY_LISTED));\n  // When: We unlist the buffer\n  close_buffer(NULL, buf3, DOBUF_DEL, 0);\n  // Then: It should not find the buffer when searching only listed buffers\n  assert_int_equal(-1, find_buffer(\"_test_\", ONLY_LISTED));\n  // And: It should find the buffer when including unlisted buffers\n  assert_int_equal(buf3->b_fnum, find_buffer(\"_test_\", ALLOW_UNLISTED));\n  // When: We wipe the buffer\n  close_buffer(NULL, buf3, DOBUF_WIPE, 0);\n  // Then: It should not find the buffer at all\n  assert_int_equal(-1, find_buffer(\"_test_\", ONLY_LISTED));\n  assert_int_equal(-1, find_buffer(\"_test_\", ALLOW_UNLISTED));\n  // messages:\n  assert_int_equal(3, msgnum);\n  assert_string_equal(messages[0], \"E94: No matching buffer for _test_\");\n  assert_string_equal(messages[1], \"E94: No matching buffer for _test_\");\n  assert_string_equal(messages[2], \"E94: No matching buffer for _test_\");\n  free_messages();\n  // should prefer listed buffers to unlisted buffers.\n  // Given: Two buffers that match a pattern\n  buf1 = new_buf(paths[0], BLN_LISTED);\n  buf2 = new_buf(paths[1], BLN_LISTED);\n  // Then: The first buffer is preferred when both are listed\n  assert_int_equal(buf1->b_fnum, find_buffer(\"test\", ONLY_LISTED));\n  // When: The first buffer is unlisted\n  close_buffer(NULL, buf1, DOBUF_DEL, 0);\n  // Then: The second buffer is preferred because unlisted buffers are not \n  //       allowed\n  assert_int_equal(buf2->b_fnum, find_buffer(\"file\", ONLY_LISTED));\n  // When: We allow unlisted buffers\n  // Then: The second buffer is still preferred because listed buffers are \n  //       preferred to unlisted\n  assert_int_equal(buf2->b_fnum, find_buffer(\"file\", ALLOW_UNLISTED));\n  // When: We unlist the second buffer\n  close_buffer(NULL, buf2, DOBUF_DEL, 0);\n  // Then: The first buffer is preferred again because buf1 matches better which \n  //       takes precedence when both buffers have the same listing status.\n  assert_int_equal(buf1->b_fnum, find_buffer(\"test\", ALLOW_UNLISTED));\n  // And: Neither buffer is returned when ignoring unlisted\n  assert_int_equal(-1, find_buffer(\"test\", ONLY_LISTED));\n  close_buffer(NULL, buf1, DOBUF_WIPE, 0);\n  close_buffer(NULL, buf2, DOBUF_WIPE, 0);\n  assert_int_equal(1, msgnum);\n  assert_string_equal(messages[0], \"E94: No matching buffer for test\");\n}\n\n#define buffer_unit_test(test) unit_test_setup_teardown( \\\n    test, \\\n    buffer_test_setup, \\\n    buffer_test_teardown \\\n  )\n\nint main(int argc, char **argv, char **environ)\n{\n  const UnitTest tests[] = {\n#if 0\n    // May used with cmocka-0.4*\n    group_test_setup(setup),\n#endif\n    buffer_unit_test(test_buffer_valid),\n    buffer_unit_test(test_buflist_findpat)\n  };\n  setup(NULL);\n  return run_tests(tests);\n}\n```\n\n. There is a problem with compiling it though: I need to define `NO_VIM_MAIN` to build it with something like\n\n``` Patch\ndiff --git a/src/nvim/CMakeLists.txt b/src/nvim/CMakeLists.txt\nindex 8a5f153..36aad2a 100644\n--- a/src/nvim/CMakeLists.txt\n+++ b/src/nvim/CMakeLists.txt\n@@ -209,12 +209,22 @@ if(NOT DEFINED ENV{SKIP_EXEC})\n   install(TARGETS nvim RUNTIME DESTINATION bin)\n endif()\n\n+set(NEOVIM_TEST_SOURCES ${NEOVIM_GENERATED_SOURCES} ${NEOVIM_SOURCES}\n+  ${NEOVIM_HEADERS})\n+\n if(NOT DEFINED ENV{SKIP_UNITTEST})\n   add_library(nvim-test MODULE EXCLUDE_FROM_ALL ${NEOVIM_GENERATED_SOURCES}\n     ${NEOVIM_SOURCES} ${NEOVIM_HEADERS} ${VIML_SOURCES}\n     ${VIML_GENERATED_SOURCES}\n   )\n   target_link_libraries(nvim-test ${NVIM_TEST_LINK_LIBRARIES})\n+\n+  find_package(CMocka REQUIRED)\n+  add_executable(nvim-test-cmocka-buffer EXCLUDE_FROM_ALL\n+    ${NEOVIM_TEST_SOURCES} ../../test/cmocka/buffer.c)\n+  target_link_libraries(nvim-test-cmocka-buffer ${CMOCKA_LIBRARY} ${NVIM_LINK_LIBRARIES})\n+  set_target_properties(nvim-test-cmocka-buffer\n+    PROPERTIES LINK_FLAGS \"-Wl,--wrap=__wrap_emsg;-lcmocka\")\n endif()\n\n add_subdirectory(po)\n```\n\n, but `ag -w NO_VIM_MAIN` shows no references about where this macros is defined. And `objdump` suggests that it is actually defined nowhere (there _is_ `main` symbol shown by `objdump -t build/src/nvim/libnvim-test.so` which has type `F` (function)).\n",
            "created_at": "2014-08-14T16:27:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/903#issuecomment-52206765",
            "id": 52206765,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/903",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyMjA2NzY1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/52206765/reactions"
            },
            "updated_at": "2014-08-14T16:27:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/52206765",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "`--wrap=__wrap_emsg` looks like it solves the EMSG issue nicely. \n\nThe failure messages for busted are more descriptive, but that is probably not a huge problem because usually the test must be inspected anyway to see what the real problem is. \n\nIn my opinion the major obstacle to getting started writing tests is having existing examples to follow. With this example, I don't think it would be much harder to get started on new tests than it is with the current lua + preprocessor approach.\n\n> // May used with cmocka-0.4*\n\nIs there a reason one would not use 0.4? I assume we would pull the latest cmocka source.\n",
            "created_at": "2014-08-14T17:08:05Z",
            "html_url": "https://github.com/neovim/neovim/issues/903#issuecomment-52212064",
            "id": 52212064,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/903",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyMjEyMDY0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/52212064/reactions"
            },
            "updated_at": "2014-08-14T17:08:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/52212064",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Is there a reason one would not use 0.4? I assume we would pull the latest cmocka source.\n\n`0.3.1` is `amd64`, `0.4` is `~amd64`. I prefer to not use unstable versions unless I have to (though many of packages I use for development are `~amd64`, some even without keywords, but e.g. Python versions on my machine are only stable ones or valgrind-friendly debug versions installed in `~/.local-python*`).\n\nNote that I have not actually run this example. It was created once, then I failed to tell cmake I want to compile _that_ test version with `-DNO_VIM_MAIN` in twenty minutes and forgot about that issue for a few days. Actual cmake code should look different: iterate over `*.c` files in `test/cmocka`, create executable for each of them, compile executable and run it. <i>And make it use the same <code>*.o</code> files for both libnvim-test.so and executables or use a (statically linked?) library.</i>\n",
            "created_at": "2014-08-14T17:51:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/903#issuecomment-52217786",
            "id": 52217786,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/903",
            "node_id": "MDEyOklzc3VlQ29tbWVudDUyMjE3Nzg2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/52217786/reactions"
            },
            "updated_at": "2014-08-14T17:52:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/52217786",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think we can close this. Most problems with the lua tests can be fixed.\n",
            "created_at": "2015-03-19T00:06:52Z",
            "html_url": "https://github.com/neovim/neovim/issues/903#issuecomment-83229613",
            "id": 83229613,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/903",
            "node_id": "MDEyOklzc3VlQ29tbWVudDgzMjI5NjEz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/83229613/reactions"
            },
            "updated_at": "2015-03-19T00:06:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/83229613",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comments": 37,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/903/comments",
    "created_at": "2014-06-29T19:21:15Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/903/events",
    "html_url": "https://github.com/neovim/neovim/issues/903",
    "id": 36754021,
    "labels": [
        {
            "color": "c7def8",
            "default": false,
            "description": "",
            "id": 109899557,
            "name": "vimscript",
            "node_id": "MDU6TGFiZWwxMDk4OTk1NTc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/vimscript"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 110418643,
            "name": "test",
            "node_id": "MDU6TGFiZWwxMTA0MTg2NDM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/test"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/903/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWUzNjc1NDAyMQ==",
    "number": 903,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/903/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/903/timeline",
    "title": "Rewrite luajit+ffi tests with C",
    "updated_at": "2024-09-04T14:01:57Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/903",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
        "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
        "followers_url": "https://api.github.com/users/ZyX-I/followers",
        "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
        "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ZyX-I",
        "id": 322097,
        "login": "ZyX-I",
        "node_id": "MDQ6VXNlcjMyMjA5Nw==",
        "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
        "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
        "repos_url": "https://api.github.com/users/ZyX-I/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ZyX-I"
    }
}