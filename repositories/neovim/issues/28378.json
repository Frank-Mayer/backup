{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\nI recently found a beautiful [pdf version of Vim's documentation](https://github.com/HugoForrat/LaTeX-Vim-User-Manual?tab=readme-ov-file), and wondered what it would take to update it for Neovim.  As far as I can tell, it would be a lot of work, and would be a maintenance nightmare, as every change to the master help files would need to be mirrored in the LaTeX sources.  \r\n\r\nReading #329 and a few other issues, I see that others have already given vimdoc's limitations some thought.  The problem is that, as a format, it's not rich enough to facilitate good-quality conversion to other formats.  It's also clear that replacing it is not really realistic.\n\n### Expected behavior\n\nRather than approaching the gigantic task of moving Neovim's documentation to another format, I wonder if I might make an alternative suggestion: add some lightweight enhancements to vimdoc's syntax, which by itself is lacking in structural markup.\r\n\r\nIt occurs to me that any such markup could be layered over a 'comment' syntax, much like Doxygen.  All the builtin help viewer needs to do with such markup is ignore it.\r\n\r\nA program written to convert documentation to HTML or LaTeX, on the other hand, could make use of the markup.  This would provide a way to incrementally enhance Neovim's documentation to support better online browsing or produce beautiful typeset manuals (which could be an additional source of funding for the project).\r\n\r\nSimple markup examples could be: mark the beginning and end of ASCII art (and alternative art for converters), indicate that the following table should have invisible borders or right-justified columns, etc.\r\n\r\nAny thoughts?",
    "closed_at": "2024-04-16T16:29:56Z",
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "from https://github.com/neovim/neovim/issues/329#issuecomment-1256367100 : \r\n\r\n> We have a [parser](https://github.com/neovim/tree-sitter-vimdoc) for vimdoc (:help) file format now, and it is used by gen_help_html.lua to generate HTML. It would be trivial to generate other formats like markdown.\r\n\r\n[gen_help_html.lua](https://github.com/neovim/neovim/blob/master/scripts/gen_help_html.lua) can easily be modified to produce a PDF. Just waiting for someone to take a few hours to do that. A proof of concept was mentioned at https://github.com/neovim/doc/issues/14\r\n\r\n\r\n\r\n> add some lightweight enhancements to vimdoc's syntax, which by itself is lacking in structural markup.\r\n\r\nWe have already done that, e.g.: \r\n\r\n- codeblocks support language annotations. (TODO: update `:help help-codeblock` to mention this)\r\n- list items are supports\r\n\r\n> vimdoc's syntax, which by itself is lacking in structural markup.\r\n\r\nNot sure what you mean. The [vimdoc parser](https://github.com/neovim/tree-sitter-vimdoc) recognizes list items and \"blocks\" (as opposed to \"inline\" text).\r\n\r\nThe major missing piece (compared to markdown) is support for \"tables\".\r\n\r\n> A program written to convert documentation to HTML or LaTeX, on the other hand, could make use of the markup\r\n\r\n[gen_help_html.lua](https://github.com/neovim/neovim/blob/master/scripts/gen_help_html.lua) exists and is used to produce https://neovim.io/doc/user/\r\n\r\nClosing this since it lacks specifics. And most of the suggestions are covered already.\r\n\r\nPDF generation is tracked in https://github.com/neovim/doc/issues/14 ",
            "created_at": "2024-04-16T16:29:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/28378#issuecomment-2059493659",
            "id": 2059493659,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28378",
            "node_id": "IC_kwDOAPphoM56wWEb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2059493659/reactions"
            },
            "updated_at": "2024-04-16T16:31:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2059493659",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "NONE",
            "body": "> [gen_help_html.lua](https://github.com/neovim/neovim/blob/master/scripts/gen_help_html.lua) can easily be modified to produce a PDF. Just waiting for someone to take a few hours to do that. A proof of concept was mentioned at [neovim/doc#14](https://github.com/neovim/doc/issues/14)\r\n\r\nThere's a big difference between a pdf and a beautiful pdf.  I tried the proof of concept you mentioned.  Depending on the page, the output varied between adequate and terrible.  It's poor compared to the link I provided above, and even that isn't publication-quality.\r\n\r\n> We have already done that, e.g.:\r\n> \r\n> * codeblocks support language annotations. (TODO: update `:help help-codeblock` to mention this)\r\n> * list items are supports\r\n> \r\n> > vimdoc's syntax, which by itself is lacking in structural markup.\r\n\r\nSorry, I should have written \"lacking in sufficient structural markup.\"  \r\n\r\nThere's no support for alternative renderings of ASCII art: compare the 'hjkl' diagram in usr_02.txt with [page 7 of Steve Oualline's book](https://www.iopb.res.in/vimbook-OPL.pdf).  What would it take to generate both from the same file (or at least one base file plus a few supporting files such as diagrams)?\r\n\r\nSuppose we could include something like:\r\n\r\n```\r\n@@asciiart alt=\"hjkl.svg\"\r\n    k\r\nh       l\r\n    j\r\n@@end\r\n```\r\n\r\nAnd the help viewer would just treat lines beginning with '@@' in the 1st column as a comment and simply not display them.  (I'm not suggesting this is the ideal syntax, just that if any such syntax existed it'd really help).\r\n\r\n> The major missing piece (compared to markdown) is support for \"tables\".\r\n\r\nThere's a kind of implied layout already, using aligned columns.  Imagine if we could do:\r\n\r\n```\r\n@@table cols=\"rl\" border=true\r\n 12  Some text\r\n  3  Some more text\r\n@@end\r\n```\r\n\r\nAnd it would signal that LaTeX conversion would have one right and one left justified column, with a border.\r\n\r\nAgain, the underlying problem isn't that the syntax is bad, it's just that it's not rich enough.",
            "created_at": "2024-04-16T18:11:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/28378#issuecomment-2059673234",
            "id": 2059673234,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28378",
            "node_id": "IC_kwDOAPphoM56xB6S",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2059673234/reactions"
            },
            "updated_at": "2024-04-16T18:26:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2059673234",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/70038532?v=4",
                "events_url": "https://api.github.com/users/risc26z/events{/privacy}",
                "followers_url": "https://api.github.com/users/risc26z/followers",
                "following_url": "https://api.github.com/users/risc26z/following{/other_user}",
                "gists_url": "https://api.github.com/users/risc26z/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/risc26z",
                "id": 70038532,
                "login": "risc26z",
                "node_id": "MDQ6VXNlcjcwMDM4NTMy",
                "organizations_url": "https://api.github.com/users/risc26z/orgs",
                "received_events_url": "https://api.github.com/users/risc26z/received_events",
                "repos_url": "https://api.github.com/users/risc26z/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/risc26z/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/risc26z/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/risc26z"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "And the other underlying problem is that this is the syntax we have, both regarding the engine and the (massive!) documentation we inherited from Vim and added to. Since Neovim is and will remain the primary output of our documentation, this is what you will have to work with, I am afraid. You can either try to make lemonade from it or move to a clean slate project like Helix. \n\n(This is not saying we can't make incremental, backward compatible, changes like we already discussed with codeblock annotations. But these have to be concrete individual suggestions that we will evaluate each on its own. If we want to make big breaking changes, we'll just switch to ~~LaTeX~~ Markdown wholesale. (Which we _have_ been talking about supporting as an _additional_ format.))",
            "created_at": "2024-04-16T18:29:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/28378#issuecomment-2059698898",
            "id": 2059698898,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28378",
            "node_id": "IC_kwDOAPphoM56xILS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2059698898/reactions"
            },
            "updated_at": "2024-04-16T19:25:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2059698898",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> There's no support for alternative renderings of ASCII art\r\n\r\nIs that really a strong justification? Also doesn't seem \"lightweight\". \r\n\r\nTable support should cover quite a lot of ground, as well as enhancing the \"flow\" layout that is already half-supported.",
            "created_at": "2024-04-16T18:53:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/28378#issuecomment-2059735125",
            "id": 2059735125,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28378",
            "node_id": "IC_kwDOAPphoM56xRBV",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2059735125/reactions"
            },
            "updated_at": "2024-04-16T18:53:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2059735125",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "NONE",
            "body": "> > There's no support for alternative renderings of ASCII art\r\n> \r\n> Is that really a strong justification? Also doesn't seem \"lightweight\".\r\n\r\nHmm. Could code block annotations be extended to support giving the block an arbitrary label like \"fig13\"?  That way, a converter could use it as a key into a data structure to do something \"smart\"? \r\n\r\n> Table support should cover quite a lot of ground, as well as enhancing the \"flow\" layout that is already half-supported.\r\n\r\nYou seem to be indicating that table support is planned.  Could you point me towards anywhere I can find info about it?",
            "created_at": "2024-04-17T08:07:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/28378#issuecomment-2060657132",
            "id": 2060657132,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28378",
            "node_id": "IC_kwDOAPphoM560yHs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2060657132/reactions"
            },
            "updated_at": "2024-04-17T08:07:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2060657132",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/70038532?v=4",
                "events_url": "https://api.github.com/users/risc26z/events{/privacy}",
                "followers_url": "https://api.github.com/users/risc26z/followers",
                "following_url": "https://api.github.com/users/risc26z/following{/other_user}",
                "gists_url": "https://api.github.com/users/risc26z/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/risc26z",
                "id": 70038532,
                "login": "risc26z",
                "node_id": "MDQ6VXNlcjcwMDM4NTMy",
                "organizations_url": "https://api.github.com/users/risc26z/orgs",
                "received_events_url": "https://api.github.com/users/risc26z/received_events",
                "repos_url": "https://api.github.com/users/risc26z/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/risc26z/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/risc26z/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/risc26z"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">  Could code block annotations be extended to support giving the block an arbitrary label like \"fig13\"? That way, a converter could use it as a key into a data structure to do something \"smart\"?\r\n\r\n_You_ can already do that. _We_ won't (as this would be an abuse and risk unintended language injections).\r\n\r\n> You seem to be indicating that table support is planned. Could you point me towards anywhere I can find info about it?\r\n\r\nIt's planned but not started; the difficulty is integration both with our tree-sitter parser and Vim's legacy syntax engine (and the `:help` renderer!), which requires careful planning. This is _not_ a \"lightweight\" addition. (I've been thinking about this for a while, and honestly it seems simpler to just switch to Markdown for our documentation, for which we already bundle a parser that has support for tables (but not a renderer -- yet).)",
            "created_at": "2024-04-17T08:11:50Z",
            "html_url": "https://github.com/neovim/neovim/issues/28378#issuecomment-2060665180",
            "id": 2060665180,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28378",
            "node_id": "IC_kwDOAPphoM5600Fc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2060665180/reactions"
            },
            "updated_at": "2024-04-17T08:34:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2060665180",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "NONE",
            "body": "> > Could code block annotations be extended to support giving the block an arbitrary label like \"fig13\"? That way, a converter could use it as a key into a data structure to do something \"smart\"?\r\n> \r\n> _You_ can already do that. _We_ won't (as this would be an abuse and risk unintended language injections).\r\n\r\nI didn't mean a label masquerading as a language.  I mean something like >lua:fig1 or >text:mylabel.  Would that be problematic?",
            "created_at": "2024-04-17T08:45:39Z",
            "html_url": "https://github.com/neovim/neovim/issues/28378#issuecomment-2060728490",
            "id": 2060728490,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28378",
            "node_id": "IC_kwDOAPphoM561Diq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2060728490/reactions"
            },
            "updated_at": "2024-04-17T08:45:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2060728490",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/70038532?v=4",
                "events_url": "https://api.github.com/users/risc26z/events{/privacy}",
                "followers_url": "https://api.github.com/users/risc26z/followers",
                "following_url": "https://api.github.com/users/risc26z/following{/other_user}",
                "gists_url": "https://api.github.com/users/risc26z/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/risc26z",
                "id": 70038532,
                "login": "risc26z",
                "node_id": "MDQ6VXNlcjcwMDM4NTMy",
                "organizations_url": "https://api.github.com/users/risc26z/orgs",
                "received_events_url": "https://api.github.com/users/risc26z/received_events",
                "repos_url": "https://api.github.com/users/risc26z/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/risc26z/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/risc26z/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/risc26z"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yes.",
            "created_at": "2024-04-17T08:55:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/28378#issuecomment-2060747687",
            "id": 2060747687,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28378",
            "node_id": "IC_kwDOAPphoM561IOn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2060747687/reactions"
            },
            "updated_at": "2024-04-17T08:55:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2060747687",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> There's a big difference between a pdf and a beautiful pdf. I tried the proof of concept you mentioned.\r\n\r\nThe POC just processes the HTML, so it's not great. To get a beautiful PDF, our existing `gen_help_html.lua` could be modified to generate a PDF. That's probably 1-2 days of work.\r\n\r\n> You seem to be indicating that table support is planned. Could you point me towards anywhere I can find info about it?\r\n\r\nCreated a tracking issue: https://github.com/neovim/tree-sitter-vimdoc/issues/132",
            "created_at": "2024-04-17T09:29:26Z",
            "html_url": "https://github.com/neovim/neovim/issues/28378#issuecomment-2060820307",
            "id": 2060820307,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28378",
            "node_id": "IC_kwDOAPphoM561Z9T",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2060820307/reactions"
            },
            "updated_at": "2024-04-17T09:29:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2060820307",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "NONE",
            "body": "> > There's a big difference between a pdf and a beautiful pdf. I tried the proof of concept you mentioned.\r\n> \r\n> The POC just processes the HTML, so it's not great. To get a beautiful PDF, our existing `gen_help_html.lua` could be modified to generate a PDF. That's probably 1-2 days of work.\r\n\r\nI'm trying to understand it right now.  I'm also trying to work out whether it's possible to automagically decide when to reformat material as normal, proportionally-spaced text.  \r\n\r\nBTW, do you know if there's an 'official' way to dump tree-sitter data (node types, locations, node text) as json, xml, or some other form of structured text to a file/buffer?  I've written a bit of lua to dump it as an s-expression sort of thing, but it's pretty horrible code. \r\n\r\n> > You seem to be indicating that table support is planned. Could you point me towards anywhere I can find info about it?\r\n> \r\n> Created a tracking issue: [neovim/tree-sitter-vimdoc#132](https://github.com/neovim/tree-sitter-vimdoc/issues/132)\r\n\r\nThanks.",
            "created_at": "2024-04-17T16:00:39Z",
            "html_url": "https://github.com/neovim/neovim/issues/28378#issuecomment-2061647575",
            "id": 2061647575,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28378",
            "node_id": "IC_kwDOAPphoM564j7X",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2061647575/reactions"
            },
            "updated_at": "2024-04-17T16:00:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2061647575",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/70038532?v=4",
                "events_url": "https://api.github.com/users/risc26z/events{/privacy}",
                "followers_url": "https://api.github.com/users/risc26z/followers",
                "following_url": "https://api.github.com/users/risc26z/following{/other_user}",
                "gists_url": "https://api.github.com/users/risc26z/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/risc26z",
                "id": 70038532,
                "login": "risc26z",
                "node_id": "MDQ6VXNlcjcwMDM4NTMy",
                "organizations_url": "https://api.github.com/users/risc26z/orgs",
                "received_events_url": "https://api.github.com/users/risc26z/received_events",
                "repos_url": "https://api.github.com/users/risc26z/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/risc26z/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/risc26z/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/risc26z"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I'm also trying to work out whether it's possible to automagically decide when to reformat material as normal, proportionally-spaced text.\r\n\r\nThat's what the \"flow\" layout is trying to do. `gen_help_html.lua` currently hardcodes some filenames: https://github.com/neovim/neovim/blob/b0f9228179bf781eec76d1aaf346b56a7e64cd5d/scripts/gen_help_html.lua#L60-L62 and for those filenames, it lets HTML treat the text as 1 block. For all other files, it treats the text as \"fixed width\".\r\n\r\nThe vimdoc parser recognizes \"blocks\" of text (i.e. lines not separated by a blank line(s)), as well as lists. Those can be treated as proportionally-spaced text (flow layout).\r\n\r\n> BTW, do you know if there's an 'official' way to dump tree-sitter data (node types, locations, node text) as json, xml, or some other form of structured text to a file/buffer? \r\n\r\nTo see the treesitter tree for a `:help` buffer, visit the buffer and run `:InspectTree`.  If you want to pass data directly to `vim.treesitter.inspect_tree()`, I think we need to enhance it a bit.",
            "created_at": "2024-04-17T16:50:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/28378#issuecomment-2061750383",
            "id": 2061750383,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28378",
            "node_id": "IC_kwDOAPphoM5649Bv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2061750383/reactions"
            },
            "updated_at": "2024-04-17T16:50:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2061750383",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "NONE",
            "body": "> > I'm also trying to work out whether it's possible to automagically decide when to reformat material as normal, proportionally-spaced text.\r\n> \r\n> That's what the \"flow\" layout is trying to do. `gen_help_html.lua` currently hardcodes some filenames [...] lets HTML treat the text as 1 block. For all other files, it treats the text as \"fixed width\".\r\n\r\nWhitelisting seems rather brittle and inflexible to me.  Wouldn't a documentation comment in the file would be cleaner & also help convey the nature of the file to unfamiliar editors? (It could be something like \"@@safelayout\" to use the style I suggested above, but there's already a match for /^@@/, so maybe %% would be a better prefix.)  \r\n\r\n> The vimdoc parser recognizes \"blocks\" of text (i.e. lines not separated by a blank line(s)), as well as lists. Those can be treated as proportionally-spaced text (flow layout).\r\n\r\nThis can't be done reliably, as there's lots of surprise formatting.  I'm experimenting with a couple of heuristics regarding tabs and sequences of spaces to see whether a particular paragraph can be reformatted.  I'm not sure if this can be made 100% accurate, but it might be posslble to automate most of it.  (And if people decide to move to markdown eventually, it might be posslble to semi-automate that process, too.)\r\n",
            "created_at": "2024-04-17T21:00:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/28378#issuecomment-2062321161",
            "id": 2062321161,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28378",
            "node_id": "IC_kwDOAPphoM567IYJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2062321161/reactions"
            },
            "updated_at": "2024-04-17T21:00:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2062321161",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/70038532?v=4",
                "events_url": "https://api.github.com/users/risc26z/events{/privacy}",
                "followers_url": "https://api.github.com/users/risc26z/followers",
                "following_url": "https://api.github.com/users/risc26z/following{/other_user}",
                "gists_url": "https://api.github.com/users/risc26z/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/risc26z",
                "id": 70038532,
                "login": "risc26z",
                "node_id": "MDQ6VXNlcjcwMDM4NTMy",
                "organizations_url": "https://api.github.com/users/risc26z/orgs",
                "received_events_url": "https://api.github.com/users/risc26z/received_events",
                "repos_url": "https://api.github.com/users/risc26z/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/risc26z/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/risc26z/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/risc26z"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Whitelisting seems rather brittle and inflexible to me. Wouldn't a documentation comment in the file would be cleaner & also help convey the nature of the file to unfamiliar editors?\r\n\r\nOf course. This is trivial to do, it just doesn't matter much until more docs start supporting flow layout (which just means they are valid vimdoc, nothing more).\r\n\r\n> This can't be done reliably, as there's lots of surprise formatting\r\n\r\nNot sure what you mean. It works just fine on the hardcoded list that I linked. Of course it won't work on docs that are jumbled nonsense.",
            "created_at": "2024-04-17T21:17:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/28378#issuecomment-2062370884",
            "id": 2062370884,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28378",
            "node_id": "IC_kwDOAPphoM567UhE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2062370884/reactions"
            },
            "updated_at": "2024-04-17T21:17:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2062370884",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "NONE",
            "body": "> To see the treesitter tree for a `:help` buffer, visit the buffer and run `:InspectTree`. If you want to pass data directly to `vim.treesitter.inspect_tree()`, I think we need to enhance it a bit.\r\n\r\nNo, that wasn't the issue.  What I needed was a way to dump the tree (including position & text) to a structured file so that I could process it in an external program.  It's a moot point for me, but it might be a useful feature to add if it's not already implemented somewhere.",
            "created_at": "2024-04-20T08:40:20Z",
            "html_url": "https://github.com/neovim/neovim/issues/28378#issuecomment-2067605489",
            "id": 2067605489,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28378",
            "node_id": "IC_kwDOAPphoM57PSfx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2067605489/reactions"
            },
            "updated_at": "2024-04-20T08:40:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2067605489",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/70038532?v=4",
                "events_url": "https://api.github.com/users/risc26z/events{/privacy}",
                "followers_url": "https://api.github.com/users/risc26z/followers",
                "following_url": "https://api.github.com/users/risc26z/following{/other_user}",
                "gists_url": "https://api.github.com/users/risc26z/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/risc26z",
                "id": 70038532,
                "login": "risc26z",
                "node_id": "MDQ6VXNlcjcwMDM4NTMy",
                "organizations_url": "https://api.github.com/users/risc26z/orgs",
                "received_events_url": "https://api.github.com/users/risc26z/received_events",
                "repos_url": "https://api.github.com/users/risc26z/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/risc26z/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/risc26z/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/risc26z"
            }
        }
    ],
    "comments": 14,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/28378/comments",
    "created_at": "2024-04-16T15:18:33Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/28378/events",
    "html_url": "https://github.com/neovim/neovim/issues/28378",
    "id": 2246319332,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": true,
            "description": "",
            "id": 84744038,
            "name": "documentation",
            "node_id": "MDU6TGFiZWw4NDc0NDAzOA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/documentation"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/28378/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6F5Bzk",
    "number": 28378,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/28378/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/28378/timeline",
    "title": "Lightweight enhancements to documentation syntax",
    "updated_at": "2024-04-20T08:40:21Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/28378",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/70038532?v=4",
        "events_url": "https://api.github.com/users/risc26z/events{/privacy}",
        "followers_url": "https://api.github.com/users/risc26z/followers",
        "following_url": "https://api.github.com/users/risc26z/following{/other_user}",
        "gists_url": "https://api.github.com/users/risc26z/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/risc26z",
        "id": 70038532,
        "login": "risc26z",
        "node_id": "MDQ6VXNlcjcwMDM4NTMy",
        "organizations_url": "https://api.github.com/users/risc26z/orgs",
        "received_events_url": "https://api.github.com/users/risc26z/received_events",
        "repos_url": "https://api.github.com/users/risc26z/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/risc26z/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/risc26z/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/risc26z"
    }
}