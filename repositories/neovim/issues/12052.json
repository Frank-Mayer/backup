{
    "active_lock_reason": "resolved",
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "The built-in LSP is awesome. In the same vein as https://github.com/neovim/neovim/issues/12051, I have some usability questions.\r\n\r\nAs the title says: is there a way to jump to the \"next\" or \"previous\" error / warning / diagnostic message?\r\n\r\nAlso, is there a way to reload the LSP server (e.g. when it gets in a bad state after a file reformat)? I tried `:lua vim.lsp.stop_all_clients()`, but I get this error:\r\n\r\n```\r\nE5108: Error executing lua [string \":lua\"]:1: attempt to call field 'stop_all_clients' (a nil value)\r\n```\r\n\r\n```\r\n:version\r\nNVIM v0.5.0-418-g87d892afa\r\nBuild type: RelWithDebInfo\r\nLuaJIT 2.1.0-beta3\r\nCompilation: /usr/bin/gcc-5 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1 -O2 -g -Og -g -Wall -Wextra -pedantic -Wno-unused-parameter -Wstrict-prototypes -std=gnu99 -Wshadow -Wconversion -Wmissing-prototypes -Wvla -fstack-protector-strong -fno-common -fdiagnostics-color=auto -DINCLUDE_GENERATED_DECLARATIONS -D_GNU_SOURCE -DNVIM_MSGPACK_HAS_FLOAT32 -DNVIM_UNIBI_HAS_VAR_FROM -DMIN_LOG_LEVEL=3 -I/home/travis/build/neovim/bot-ci/build/neovim/build/config -I/home/travis/build/neovim/bot-ci/build/neo\r\nvim/src -I/home/travis/build/neovim/bot-ci/build/neovim/.deps/usr/include -I/usr/include -I/home/travis/build/neovim/bot-ci/build/neovim/build/src/nvim/auto -I/home/travis/build/neovim/bot-ci/build/neovim/build/include\r\nCompiled by travis@travis-job-c48d5551-5074-4a05-b117-d6e98b5fddaa\r\n\r\nFeatures: +acl +iconv +tui\r\nSee \":help feature-compile\"\r\n\r\n   system vimrc file: \"$VIM/sysinit.vim\"\r\n  fall-back for $VIM: \"/home/travis/build/neovim/bot-ci/build/neovim/build/nvim.AppDir/usr/share/nvim\"\r\n\r\nRun :checkhealth for more info\r\n```",
    "closed_at": "2020-11-13T03:56:49Z",
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "> Also, is there a way to reload the LSP server (e.g. when it gets in a bad state after a file reformat)? I tried :lua vim.lsp.stop_all_clients(), but I get this error:\r\n\r\nIt seems that the document is wrong.\r\nYou can stop all clients like this.\r\n`:lua vim.lsp.stop_client(vim.lsp.get_active_clients())`",
            "created_at": "2020-03-27T06:45:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/12052#issuecomment-604842034",
            "id": 604842034,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12052",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYwNDg0MjAzNA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/604842034/reactions"
            },
            "updated_at": "2020-03-27T06:45:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/604842034",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4556097?v=4",
                "events_url": "https://api.github.com/users/h-michael/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-michael/followers",
                "following_url": "https://api.github.com/users/h-michael/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-michael/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-michael",
                "id": 4556097,
                "login": "h-michael",
                "node_id": "MDQ6VXNlcjQ1NTYwOTc=",
                "organizations_url": "https://api.github.com/users/h-michael/orgs",
                "received_events_url": "https://api.github.com/users/h-michael/received_events",
                "repos_url": "https://api.github.com/users/h-michael/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-michael/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-michael/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-michael"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> As the title says: is there a way to jump to the \"next\" or \"previous\" error / warning / diagnostic message?\r\n\r\nNo. But we can implement it.",
            "created_at": "2020-03-27T06:47:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/12052#issuecomment-604842747",
            "id": 604842747,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12052",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYwNDg0Mjc0Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 5,
                "laugh": 0,
                "rocket": 0,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/604842747/reactions"
            },
            "updated_at": "2020-03-27T06:47:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/604842747",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4556097?v=4",
                "events_url": "https://api.github.com/users/h-michael/events{/privacy}",
                "followers_url": "https://api.github.com/users/h-michael/followers",
                "following_url": "https://api.github.com/users/h-michael/following{/other_user}",
                "gists_url": "https://api.github.com/users/h-michael/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/h-michael",
                "id": 4556097,
                "login": "h-michael",
                "node_id": "MDQ6VXNlcjQ1NTYwOTc=",
                "organizations_url": "https://api.github.com/users/h-michael/orgs",
                "received_events_url": "https://api.github.com/users/h-michael/received_events",
                "repos_url": "https://api.github.com/users/h-michael/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/h-michael/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/h-michael/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/h-michael"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "This could be done by setting the location list to the errors and then use the standard loc list bindings. Don't we have a method for that already?",
            "created_at": "2020-03-27T11:17:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/12052#issuecomment-604945665",
            "id": 604945665,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12052",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYwNDk0NTY2NQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/604945665/reactions"
            },
            "updated_at": "2020-03-27T11:17:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/604945665",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "You can override the publish diagnostics callback (I do this in my config), and with vim-unimpaired can navigated the quickfix list with ]q and [q\r\n\r\n``` lua\r\n:lua << EOF\r\n  local nvim_lsp = require('nvim_lsp')\r\n\r\n  local on_attach = function(_, bufnr)\r\n    vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')\r\n    local method = 'textDocument/publishDiagnostics'\r\n\r\n  local default_callback = vim.lsp.callbacks[method]\r\n  vim.lsp.callbacks[method] = function(err, method, result, client_id)\r\n    default_callback(err, method, result, client_id)\r\n    if result and result.diagnostics then\r\n      for _, v in ipairs(result.diagnostics) do\r\n        v.uri = v.uri or result.uri\r\n      end\r\n      vim.lsp.util.set_qflist(result.diagnostics)\r\n      end\r\n    end\r\n\r\n    -- Mappings.\r\n    local opts = { noremap=true, silent=true }\r\n    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gD', '<Cmd>lua vim.lsp.buf.declaration()<CR>', opts)\r\n    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)\r\n    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)\r\n    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)\r\n    vim.api.nvim_buf_set_keymap(bufnr, 'n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)\r\n    vim.api.nvim_buf_set_keymap(bufnr, 'n', '<leader>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)\r\n    vim.api.nvim_buf_set_keymap(bufnr, 'n', '<leader>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)\r\n    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)\r\n    vim.api.nvim_buf_set_keymap(bufnr, 'n', '<leader>e', '<cmd>lua vim.lsp.util.show_line_diagnostics()<CR>', opts)\r\n  end\r\n\r\n  local servers = {'gopls', 'rust_analyzer', 'sumneko_lua', 'tsserver', 'vimls', 'pyls', 'jsonls'}\r\n  for _, lsp in ipairs(servers) do\r\n    nvim_lsp[lsp].setup {\r\n      on_attach = on_attach,\r\n    }\r\n  end\r\nEOF\r\n\r\n```",
            "created_at": "2020-03-28T08:36:05Z",
            "html_url": "https://github.com/neovim/neovim/issues/12052#issuecomment-605414074",
            "id": 605414074,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12052",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYwNTQxNDA3NA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/605414074/reactions"
            },
            "updated_at": "2020-03-28T08:36:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/605414074",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13316262?v=4",
                "events_url": "https://api.github.com/users/mjlbach/events{/privacy}",
                "followers_url": "https://api.github.com/users/mjlbach/followers",
                "following_url": "https://api.github.com/users/mjlbach/following{/other_user}",
                "gists_url": "https://api.github.com/users/mjlbach/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mjlbach",
                "id": 13316262,
                "login": "mjlbach",
                "node_id": "MDQ6VXNlcjEzMzE2MjYy",
                "organizations_url": "https://api.github.com/users/mjlbach/orgs",
                "received_events_url": "https://api.github.com/users/mjlbach/received_events",
                "repos_url": "https://api.github.com/users/mjlbach/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mjlbach/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mjlbach/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mjlbach"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "`:h vim.lsp.stop_client()` gives the correct answer.\r\nI find the API unintuitive in the sense that stop_client should stop only one client.\r\n\r\nalso the behavior is not idempotent\r\n``` \r\nBy default asks the server to shutdown, unless stop was\r\nrequested already for this client, then force-shutdown is attempted.\r\n```\r\n\r\nTo answer OP's question, feeding the location list and then mapping `:labove` / `:lbelow` is nice.\r\n\r\nhttps://github.com/haorenW1025/diagnostic-nvim provides NextDiagnostic / PrevDiagnostic but what I like the most is the diagnostics as floating windows (for lengthy errors, virtualtext isn't helpful)",
            "created_at": "2020-03-28T13:34:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/12052#issuecomment-605448119",
            "id": 605448119,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12052",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYwNTQ0ODExOQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/605448119/reactions"
            },
            "updated_at": "2020-03-28T13:34:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/605448119",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/886074?v=4",
                "events_url": "https://api.github.com/users/teto/events{/privacy}",
                "followers_url": "https://api.github.com/users/teto/followers",
                "following_url": "https://api.github.com/users/teto/following{/other_user}",
                "gists_url": "https://api.github.com/users/teto/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/teto",
                "id": 886074,
                "login": "teto",
                "node_id": "MDQ6VXNlcjg4NjA3NA==",
                "organizations_url": "https://api.github.com/users/teto/orgs",
                "received_events_url": "https://api.github.com/users/teto/received_events",
                "repos_url": "https://api.github.com/users/teto/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/teto/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/teto/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/teto"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "If you don't mind, I would recommend the minimalistic [nvim-lsp-diamove](https://github.com/weilbith/nvim-lsp-diamove) plugin. It provides you with exactly what you are asking for. It works like `:cabove`, `:cbelow`, `:labove` and `:lbelow`. In contrast to those it secures the correct order of the list entries. What this plugin does not, is to differ between the different diagnostic types. Could eventually be added. I'm open for pull requests. :shrug: \r\n\r\nThere was/is the plan to also emit a custom event when a jump took place. The idea was that the user can then chain a call like `vim.lsp.util.show_line_diagnostics()`. Unfortunately is exactly this function buggy (pop-up window does not appear). So this is still in the pipe.",
            "created_at": "2020-10-04T21:35:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/12052#issuecomment-703319514",
            "id": 703319514,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12052",
            "node_id": "MDEyOklzc3VlQ29tbWVudDcwMzMxOTUxNA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/703319514/reactions"
            },
            "updated_at": "2020-10-04T21:35:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/703319514",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/12543647?v=4",
                "events_url": "https://api.github.com/users/weilbith/events{/privacy}",
                "followers_url": "https://api.github.com/users/weilbith/followers",
                "following_url": "https://api.github.com/users/weilbith/following{/other_user}",
                "gists_url": "https://api.github.com/users/weilbith/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/weilbith",
                "id": 12543647,
                "login": "weilbith",
                "node_id": "MDQ6VXNlcjEyNTQzNjQ3",
                "organizations_url": "https://api.github.com/users/weilbith/orgs",
                "received_events_url": "https://api.github.com/users/weilbith/received_events",
                "repos_url": "https://api.github.com/users/weilbith/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/weilbith/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/weilbith/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/weilbith"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "After https://github.com/neovim/neovim/commit/f75be5e9d510d5369c572cf98e78d9480df3b0bb\r\n\r\nYou can use `vim.lsp.diagnostic.goto_next()` and `vim.lsp.diagnostic.goto_prev()` and their associated configurations to do what you're looking for (as well as setting loclist and using builtin commands to move there).",
            "created_at": "2020-11-13T03:56:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/12052#issuecomment-726492370",
            "id": 726492370,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12052",
            "node_id": "MDEyOklzc3VlQ29tbWVudDcyNjQ5MjM3MA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 19,
                "laugh": 0,
                "rocket": 0,
                "total_count": 19,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/726492370/reactions"
            },
            "updated_at": "2020-11-13T03:56:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/726492370",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4466899?v=4",
                "events_url": "https://api.github.com/users/tjdevries/events{/privacy}",
                "followers_url": "https://api.github.com/users/tjdevries/followers",
                "following_url": "https://api.github.com/users/tjdevries/following{/other_user}",
                "gists_url": "https://api.github.com/users/tjdevries/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tjdevries",
                "id": 4466899,
                "login": "tjdevries",
                "node_id": "MDQ6VXNlcjQ0NjY4OTk=",
                "organizations_url": "https://api.github.com/users/tjdevries/orgs",
                "received_events_url": "https://api.github.com/users/tjdevries/received_events",
                "repos_url": "https://api.github.com/users/tjdevries/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tjdevries/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tjdevries/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tjdevries"
            }
        },
        {
            "author_association": "NONE",
            "body": "> You can use `vim.lsp.diagnostic.goto_next()` and `vim.lsp.diagnostic.goto_prev()` and their associated configurations to do what you're looking for (as well as setting loclist and using builtin commands to move there).\r\n\r\nAccording to the docs  `vim.diagnostic.goto_next()` and `vim.diagnostic.goto_prev()` should be used.",
            "created_at": "2024-01-05T16:44:05Z",
            "html_url": "https://github.com/neovim/neovim/issues/12052#issuecomment-1878963544",
            "id": 1878963544,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12052",
            "node_id": "IC_kwDOAPphoM5v_rVY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1878963544/reactions"
            },
            "updated_at": "2024-01-05T16:44:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1878963544",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10747532?v=4",
                "events_url": "https://api.github.com/users/BebeSparkelSparkel/events{/privacy}",
                "followers_url": "https://api.github.com/users/BebeSparkelSparkel/followers",
                "following_url": "https://api.github.com/users/BebeSparkelSparkel/following{/other_user}",
                "gists_url": "https://api.github.com/users/BebeSparkelSparkel/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/BebeSparkelSparkel",
                "id": 10747532,
                "login": "BebeSparkelSparkel",
                "node_id": "MDQ6VXNlcjEwNzQ3NTMy",
                "organizations_url": "https://api.github.com/users/BebeSparkelSparkel/orgs",
                "received_events_url": "https://api.github.com/users/BebeSparkelSparkel/received_events",
                "repos_url": "https://api.github.com/users/BebeSparkelSparkel/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/BebeSparkelSparkel/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/BebeSparkelSparkel/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/BebeSparkelSparkel"
            }
        }
    ],
    "comments": 8,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/12052/comments",
    "created_at": "2020-03-26T18:29:02Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/12052/events",
    "html_url": "https://github.com/neovim/neovim/issues/12052",
    "id": 588635104,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/12052/labels{/name}",
    "locked": true,
    "milestone": null,
    "node_id": "MDU6SXNzdWU1ODg2MzUxMDQ=",
    "number": 12052,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/12052/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/12052/timeline",
    "title": "Another LSP usability question: is there a way to jump to the \"next\" or \"previous\" error / warning / diagnostic message?",
    "updated_at": "2024-01-05T16:45:10Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/12052",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/10101?v=4",
        "events_url": "https://api.github.com/users/nerdrew/events{/privacy}",
        "followers_url": "https://api.github.com/users/nerdrew/followers",
        "following_url": "https://api.github.com/users/nerdrew/following{/other_user}",
        "gists_url": "https://api.github.com/users/nerdrew/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/nerdrew",
        "id": 10101,
        "login": "nerdrew",
        "node_id": "MDQ6VXNlcjEwMTAx",
        "organizations_url": "https://api.github.com/users/nerdrew/orgs",
        "received_events_url": "https://api.github.com/users/nerdrew/received_events",
        "repos_url": "https://api.github.com/users/nerdrew/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/nerdrew/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nerdrew/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/nerdrew"
    }
}