{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\r\n\r\nConsider:\r\n```lua\r\n-- https://github.com/neovim/neovim/blob/0c2860d9e5ec5417a94db6e3edd237578b76d418/test/functional/lua/text_spec.lua#L14\r\nlocal input, output = string.rep(\"😂\", 2 ^ 16), string.rep(\"F09F9882\", 2 ^ 16)\r\nassert(output, vim.text.hexencode(input))\r\nassert(input, vim.text.hexdecode(output))\r\n```\r\nThe I get an error `string slice is too long`. It seems the string. functions have a problem with large strings.\r\nI think a better implementation would be to use the jit string.buffer:\r\n```lua\r\nlocal buffer = require(\"string.buffer\")\r\nlocal bit = require(\"bit\")\r\n\r\nlocal function hexencode2(str)\r\n  local bytes = buffer.new()\r\n  local enc = buffer.new()\r\n  bytes:set(str)\r\n  local ptr, len = bytes:ref()\r\n  for i = 0, len - 1 do\r\n    -- enc:put(bit.tohex(ptr[i], -2))\r\n    enc:putf(\"%02X\", ptr[i])\r\n  end\r\n  return enc:tostring()\r\nend\r\n\r\nlocal function hexdecode2(enc)\r\n  local dec = buffer.new()\r\n  local enc_buf = buffer.new()\r\n  enc_buf:set(enc)\r\n  local ptr, len = enc_buf:ref()\r\n  for i = 0, len - 1, 2 do\r\n    local hex = (ptr[i] % 0x20 + 0x9) % 0x19 * 0x10 + (ptr[i + 1] % 0x20 + 0x9) % 0x19\r\n    dec:putf(\"%c\", hex)\r\n  end\r\n  return dec:tostring()\r\nend\r\nlocal input, output = string.rep(\"😂\", 2 ^ 16), string.rep(\"F09F9882\", 2 ^ 16)\r\nassert(output == hexencode2(input))\r\nassert(input == hexdecode2(output))\r\n```\r\n\r\n### Steps to reproduce\r\n\r\n```lua\r\n-- https://github.com/neovim/neovim/blob/0c2860d9e5ec5417a94db6e3edd237578b76d418/test/functional/lua/text_spec.lua#L14\r\nlocal input, output = string.rep(\"😂\", 2 ^ 16), string.rep(\"F09F9882\", 2 ^ 16)\r\nassert(output == vim.text.hexencode(input))\r\nassert(input == vim.text.hexdecode(output))\r\n```\r\n\r\n### Expected behavior\r\n\r\nsuccess\r\n\r\n### Neovim version (nvim -v)\r\n\r\nNVIM v0.10.1\r\n\r\n### Vim (not Nvim) behaves the same?\r\n\r\nnot applicable\r\n\r\n### Operating system/version\r\n\r\nUbuntu 24.04\r\n\r\n### Terminal name/version\r\n\r\nwezterm\r\n\r\n### $TERM environment variable\r\n\r\nwezterm\r\n\r\n### Installation\r\n\r\nRelease from github",
    "closed_at": "2024-08-18T03:28:04Z",
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "I just tried with a ffi version there is bench \r\n\r\n```lua\r\nlocal ffi = require('ffi')\r\nlocal buffer = require('string.buffer')\r\n\r\nlocal hex_encode_map = ffi.new('char[512]')\r\nfor i = 0, 255 do\r\n  local high_nibble = math.floor(i / 16)\r\n  local low_nibble = i % 16\r\n  hex_encode_map[i * 2] =\r\n    string.byte(high_nibble < 10 and tostring(high_nibble) or string.char(55 + high_nibble))\r\n  hex_encode_map[i * 2 + 1] =\r\n    string.byte(low_nibble < 10 and tostring(low_nibble) or string.char(55 + low_nibble))\r\nend\r\n\r\nlocal hex_decode_map = ffi.new('char[256]')\r\nfor i = 0, 9 do\r\n  hex_decode_map[string.byte('0') + i] = i\r\nend\r\nfor i = 0, 5 do\r\n  hex_decode_map[string.byte('A') + i] = 10 + i\r\n  hex_decode_map[string.byte('a') + i] = 10 + i\r\nend\r\n\r\nlocal function hexencode1(str)\r\n  local len = #str\r\n  local enc = ffi.new('char[?]', len * 2 + 1)\r\n\r\n  for i = 0, len - 1 do\r\n    local byte = string.byte(str, i + 1)\r\n    enc[i * 2] = hex_encode_map[byte * 2]\r\n    enc[i * 2 + 1] = hex_encode_map[byte * 2 + 1]\r\n  end\r\n\r\n  return ffi.string(enc, len * 2)\r\nend\r\n\r\nlocal function hexdecode1(enc)\r\n  if #enc % 2 ~= 0 then\r\n    return nil, 'string must have an even number of hex characters'\r\n  end\r\n\r\n  local len = math.floor(#enc / 2)\r\n  local str = ffi.new('char[?]', len + 1)\r\n\r\n  for i = 0, len - 1 do\r\n    local high_nibble = hex_decode_map[enc:byte(i * 2 + 1)]\r\n    local low_nibble = hex_decode_map[enc:byte(i * 2 + 2)]\r\n    if high_nibble == nil or low_nibble == nil then\r\n      return nil, 'invalid character in input'\r\n    end\r\n    str[i] = ffi.cast('char', bit.bor(bit.lshift(high_nibble, 4), low_nibble))\r\n  end\r\n\r\n  return ffi.string(str, len)\r\nend\r\n\r\n-- The buffer-based functions you provided\r\nlocal function hexencode2(str)\r\n  local bytes = buffer.new()\r\n  local enc = buffer.new()\r\n  bytes:set(str)\r\n  local ptr, len = bytes:ref()\r\n  for i = 0, len - 1 do\r\n    enc:putf('%02X', ptr[i])\r\n  end\r\n  return enc:tostring()\r\nend\r\n\r\nlocal function hexdecode2(enc)\r\n  local dec = buffer.new()\r\n  local enc_buf = buffer.new()\r\n  enc_buf:set(enc)\r\n  local ptr, len = enc_buf:ref()\r\n  for i = 0, len - 1, 2 do\r\n    local hex = (ptr[i] % 0x20 + 0x9) % 0x19 * 0x10 + (ptr[i + 1] % 0x20 + 0x9) % 0x19\r\n    dec:putf('%c', hex)\r\n  end\r\n  return dec:tostring()\r\nend\r\n\r\n-- Function to run a benchmark\r\nlocal function benchmark(func, input, iterations)\r\n  local start_time = os.clock()\r\n  for i = 1, iterations do\r\n    func(input)\r\n  end\r\n  local end_time = os.clock()\r\n  return end_time - start_time\r\nend\r\n\r\n-- Assert first\r\nlocal input, output = string.rep('😂', 2 ^ 16), string.rep('F09F9882', 2 ^ 16)\r\nassert(output == hexencode2(input), 'hexencode2')\r\nassert(input == hexdecode2(output), 'hexdecode2')\r\nassert(output == hexencode1(input), 'hexencode1')\r\nassert(input == hexdecode1(output), 'hexdecode1')\r\n\r\n-- Benchmarking\r\ninput = string.rep('hello world', 1000) -- Test with a large string\r\nlocal encoded_input = hexencode1(input)\r\nlocal iterations = 1000\r\n\r\nprint('Benchmarking hexencode1 (ffi-based)...')\r\nlocal time1 = benchmark(hexencode1, input, iterations)\r\nprint('Time taken:', time1)\r\n\r\nprint('Benchmarking hexdecode1 (ffi-based)...')\r\nlocal time3 = benchmark(hexdecode1, encoded_input, iterations)\r\nprint('Time taken:', time3)\r\n\r\nprint('Benchmarking hexencode2 (buffer-based)...')\r\nlocal time2 = benchmark(hexencode2, input, iterations)\r\nprint('Time taken:', time2)\r\n\r\nprint('Benchmarking hexdecode2 (buffer-based)...')\r\nlocal time4 = benchmark(hexdecode2, encoded_input, iterations)\r\nprint('Time taken:', time4)\r\n\r\n```\r\n\r\nResult in my computer is \r\n```\r\nBenchmarking hexencode1 (ffi-based)...\r\nTime taken: 0.009597\r\nBenchmarking hexdecode1 (ffi-based)...\r\nTime taken: 0.015724\r\nBenchmarking hexencode2 (buffer-based)...\r\nTime taken: 0.055264\r\nBenchmarking hexdecode2 (buffer-based)...\r\nTime taken: 0.031767\r\n```",
            "created_at": "2024-08-14T08:13:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/29981#issuecomment-2288118961",
            "id": 2288118961,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29981",
            "node_id": "IC_kwDOAPphoM6IYeyx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2288118961/reactions"
            },
            "updated_at": "2024-08-14T09:41:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2288118961",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            }
        },
        {
            "author_association": "NONE",
            "body": "I get:\r\n```lua\r\n-- Assert first\r\nlocal input, output = string.rep(\"😂\", 2 ^ 16), string.rep(\"F09F9882\", 2 ^ 16)\r\nassert(output == hexencode2(input), \"hexencode2\")\r\nassert(input == hexdecode2(output), \"hexdecode2\")\r\nassert(output == hexencode1(input), \"hexencode1\")\r\nassert(input == hexdecode1(output), \"hexdecode1\")\r\n```\r\n```sh\r\n❯ nvim -l text3.lua\r\nE5113: Error while calling lua chunk: text3.lua:85: hexdecode1\r\nstack traceback:\r\n        [C]: in function 'assert'\r\n        text3.lua:85: in main chunk\r\n```\r\n",
            "created_at": "2024-08-14T09:28:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/29981#issuecomment-2288282555",
            "id": 2288282555,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29981",
            "node_id": "IC_kwDOAPphoM6IZGu7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2288282555/reactions"
            },
            "updated_at": "2024-08-14T09:28:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2288282555",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/118010672?v=4",
                "events_url": "https://api.github.com/users/pedrohgmacedo/events{/privacy}",
                "followers_url": "https://api.github.com/users/pedrohgmacedo/followers",
                "following_url": "https://api.github.com/users/pedrohgmacedo/following{/other_user}",
                "gists_url": "https://api.github.com/users/pedrohgmacedo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pedrohgmacedo",
                "id": 118010672,
                "login": "pedrohgmacedo",
                "node_id": "U_kgDOBwizMA",
                "organizations_url": "https://api.github.com/users/pedrohgmacedo/orgs",
                "received_events_url": "https://api.github.com/users/pedrohgmacedo/received_events",
                "repos_url": "https://api.github.com/users/pedrohgmacedo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pedrohgmacedo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pedrohgmacedo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pedrohgmacedo"
            }
        },
        {
            "author_association": "NONE",
            "body": "The assertion on the issue description I posted was wrong. Assert takes a boolean and a message. Have you tried changing that?",
            "created_at": "2024-08-14T09:39:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/29981#issuecomment-2288303951",
            "id": 2288303951,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29981",
            "node_id": "IC_kwDOAPphoM6IZL9P",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2288303951/reactions"
            },
            "updated_at": "2024-08-14T09:39:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2288303951",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/118010672?v=4",
                "events_url": "https://api.github.com/users/pedrohgmacedo/events{/privacy}",
                "followers_url": "https://api.github.com/users/pedrohgmacedo/followers",
                "following_url": "https://api.github.com/users/pedrohgmacedo/following{/other_user}",
                "gists_url": "https://api.github.com/users/pedrohgmacedo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pedrohgmacedo",
                "id": 118010672,
                "login": "pedrohgmacedo",
                "node_id": "U_kgDOBwizMA",
                "organizations_url": "https://api.github.com/users/pedrohgmacedo/orgs",
                "received_events_url": "https://api.github.com/users/pedrohgmacedo/received_events",
                "repos_url": "https://api.github.com/users/pedrohgmacedo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pedrohgmacedo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pedrohgmacedo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pedrohgmacedo"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@pedrohgmacedo  I have updated code snippet could you relook :)",
            "created_at": "2024-08-14T09:40:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/29981#issuecomment-2288305099",
            "id": 2288305099,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29981",
            "node_id": "IC_kwDOAPphoM6IZMPL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2288305099/reactions"
            },
            "updated_at": "2024-08-14T09:40:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2288305099",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            }
        },
        {
            "author_association": "NONE",
            "body": "Now it works on my machine! The ffi version is even better! \r\n```sh\r\n❯ nvim -l text3.lua\r\nBenchmarking hexencode1 (ffi-based)...\r\nTime taken: 0.008328\r\nBenchmarking hexdecode1 (ffi-based)...\r\nTime taken: 0.013535\r\nBenchmarking hexencode2 (buffer-based)...\r\nTime taken: 0.070824\r\nBenchmarking hexdecode2 (buffer-based)...\r\nTime taken: 0.049903\r\n```",
            "created_at": "2024-08-14T09:43:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/29981#issuecomment-2288311845",
            "id": 2288311845,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29981",
            "node_id": "IC_kwDOAPphoM6IZN4l",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 1,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2288311845/reactions"
            },
            "updated_at": "2024-08-14T10:19:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2288311845",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/118010672?v=4",
                "events_url": "https://api.github.com/users/pedrohgmacedo/events{/privacy}",
                "followers_url": "https://api.github.com/users/pedrohgmacedo/followers",
                "following_url": "https://api.github.com/users/pedrohgmacedo/following{/other_user}",
                "gists_url": "https://api.github.com/users/pedrohgmacedo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pedrohgmacedo",
                "id": 118010672,
                "login": "pedrohgmacedo",
                "node_id": "U_kgDOBwizMA",
                "organizations_url": "https://api.github.com/users/pedrohgmacedo/orgs",
                "received_events_url": "https://api.github.com/users/pedrohgmacedo/received_events",
                "repos_url": "https://api.github.com/users/pedrohgmacedo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pedrohgmacedo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pedrohgmacedo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pedrohgmacedo"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Neovim targets Lua 5.1. `string.buffer` and the `ffi` module are LuaJIT extensions and are not part of Lua 5.1, so we cannot use those in Neovim core. You are free to use FFI in your own plugins of course (but be warned that users who are not using LuaJIT will not be able to use your code).\r\n\r\nIf you need to encode a very large string, try chunking the string before passing to `vim.text.hexencode`.",
            "created_at": "2024-08-15T02:04:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/29981#issuecomment-2290362111",
            "id": 2290362111,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29981",
            "node_id": "IC_kwDOAPphoM6IhCb_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2290362111/reactions"
            },
            "updated_at": "2024-08-15T02:04:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2290362111",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Neovim targets Lua 5.1. `string.buffer` and the `ffi` module are LuaJIT extensions and are not part of Lua 5.1, so we cannot use those in Neovim core.\r\n\r\nI understand the desire to maintain compatibility. I do not understand not taking advantage of the features the platform on which neovim is built offers. \r\nIf the jit is not supposed to be used (even when available, and when a compatible implementation exists) why then is neovim built with luajit? Just straight up compile it with lua 5.1 without the jit then. \r\nIs there any platform where neovim is officially distributed not able to use the jit? When I look at the builds, I can only download it with the jit compiled. ",
            "created_at": "2024-08-15T02:43:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/29981#issuecomment-2290429806",
            "id": 2290429806,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29981",
            "node_id": "IC_kwDOAPphoM6IhS9u",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2290429806/reactions"
            },
            "updated_at": "2024-08-15T02:43:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2290429806",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/118010672?v=4",
                "events_url": "https://api.github.com/users/pedrohgmacedo/events{/privacy}",
                "followers_url": "https://api.github.com/users/pedrohgmacedo/followers",
                "following_url": "https://api.github.com/users/pedrohgmacedo/following{/other_user}",
                "gists_url": "https://api.github.com/users/pedrohgmacedo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pedrohgmacedo",
                "id": 118010672,
                "login": "pedrohgmacedo",
                "node_id": "U_kgDOBwizMA",
                "organizations_url": "https://api.github.com/users/pedrohgmacedo/orgs",
                "received_events_url": "https://api.github.com/users/pedrohgmacedo/received_events",
                "repos_url": "https://api.github.com/users/pedrohgmacedo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pedrohgmacedo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pedrohgmacedo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pedrohgmacedo"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">I do not understand not taking advantage of the features the platform on which neovim is built offers.\r\n\r\nThe platform on which Neovim is built is Lua 5.1.\r\n\r\n>f the jit is not supposed to be used (even when available, and when a compatible implementation exists) why then is neovim built with luajit? Just straight up compile it with lua 5.1 without the jit then.\r\n\r\nThere are benefits to using LuaJIT even without using the separate Lua extensions (performance, primarily).\r\n\r\n>Is there any platform where neovim is officially distributed not able to use the jit? \r\n\r\nYes, there are platforms which package Neovim without LuaJIT, though they are uncommon. This has been discussed in the issue tracker before ([example](https://github.com/neovim/neovim/issues/19849)), feel free to search for other similar discussions.",
            "created_at": "2024-08-15T02:59:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/29981#issuecomment-2290449524",
            "id": 2290449524,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29981",
            "node_id": "IC_kwDOAPphoM6IhXx0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2290449524/reactions"
            },
            "updated_at": "2024-08-15T02:59:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2290449524",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "NONE",
            "body": "> If you need to encode a very large string, try chunking the string before passing to `vim.text.hexencode`.\r\n\r\nWell, then at least it should be documented exactly what is the length limit of the hexdecode function. Just saying `chunk it` is about as helpful as nothing.  The decoding function has a bug, the issue was closed without fixing or addressing it in any way at all.",
            "created_at": "2024-08-15T03:07:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/29981#issuecomment-2290460615",
            "id": 2290460615,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29981",
            "node_id": "IC_kwDOAPphoM6IhafH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2290460615/reactions"
            },
            "updated_at": "2024-08-15T03:07:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2290460615",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/118010672?v=4",
                "events_url": "https://api.github.com/users/pedrohgmacedo/events{/privacy}",
                "followers_url": "https://api.github.com/users/pedrohgmacedo/followers",
                "following_url": "https://api.github.com/users/pedrohgmacedo/following{/other_user}",
                "gists_url": "https://api.github.com/users/pedrohgmacedo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pedrohgmacedo",
                "id": 118010672,
                "login": "pedrohgmacedo",
                "node_id": "U_kgDOBwizMA",
                "organizations_url": "https://api.github.com/users/pedrohgmacedo/orgs",
                "received_events_url": "https://api.github.com/users/pedrohgmacedo/received_events",
                "repos_url": "https://api.github.com/users/pedrohgmacedo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pedrohgmacedo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pedrohgmacedo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pedrohgmacedo"
            }
        },
        {
            "author_association": "MEMBER",
            "body": " override it as a hack in your init.lua like `vim.text.hexencode = buffer verison or ffi version` ..",
            "created_at": "2024-08-17T06:54:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/29981#issuecomment-2294710043",
            "id": 2294710043,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29981",
            "node_id": "IC_kwDOAPphoM6Ixn8b",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2294710043/reactions"
            },
            "updated_at": "2024-08-17T06:54:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2294710043",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">The decoding function has a bug, the issue was closed without fixing or addressing it in any way at all.\r\n\r\nYou're right, this should be fixed. But we can't do it with FFI.",
            "created_at": "2024-08-17T19:12:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/29981#issuecomment-2294947669",
            "id": 2294947669,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29981",
            "node_id": "IC_kwDOAPphoM6Iyh9V",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2294947669/reactions"
            },
            "updated_at": "2024-08-17T19:12:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2294947669",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "NONE",
            "body": "> override it as a hack in your init.lua like `vim.text.hexencode = buffer verison or ffi version` ..\r\n\r\nI already did that, as a matter of fact I had done that with the buffer version before I opened the issue here. I was just reminding that there is still a bug!",
            "created_at": "2024-08-17T20:13:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/29981#issuecomment-2294972918",
            "id": 2294972918,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29981",
            "node_id": "IC_kwDOAPphoM6IyoH2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2294972918/reactions"
            },
            "updated_at": "2024-08-17T20:21:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2294972918",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/118010672?v=4",
                "events_url": "https://api.github.com/users/pedrohgmacedo/events{/privacy}",
                "followers_url": "https://api.github.com/users/pedrohgmacedo/followers",
                "following_url": "https://api.github.com/users/pedrohgmacedo/following{/other_user}",
                "gists_url": "https://api.github.com/users/pedrohgmacedo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pedrohgmacedo",
                "id": 118010672,
                "login": "pedrohgmacedo",
                "node_id": "U_kgDOBwizMA",
                "organizations_url": "https://api.github.com/users/pedrohgmacedo/orgs",
                "received_events_url": "https://api.github.com/users/pedrohgmacedo/received_events",
                "repos_url": "https://api.github.com/users/pedrohgmacedo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pedrohgmacedo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pedrohgmacedo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pedrohgmacedo"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "how this bench on your local a pure-lua5.1 version\r\n\r\n```lua\r\nlocal hex_map = {}\r\nlocal hex_chars = '0123456789ABCDEF'\r\n\r\nfor i = 0, 15 do\r\n  local char = hex_chars:sub(i + 1, i + 1)\r\n  hex_map[i] = char\r\n  hex_map[char] = i\r\n  hex_map[char:lower()] = i\r\nend\r\n\r\nlocal function hexencode1(str)\r\n  local len = #str\r\n  local enc = {}\r\n\r\n  for i = 1, len do\r\n    local byte = string.byte(str, i)\r\n    enc[#enc + 1] = hex_map[math.floor(byte / 16)]\r\n    enc[#enc + 1] = hex_map[byte % 16]\r\n  end\r\n\r\n  return table.concat(enc)\r\nend\r\n\r\nlocal function hexdecode1(enc)\r\n  if #enc % 2 ~= 0 then\r\n    return nil, 'string must have an even number of hex characters'\r\n  end\r\n\r\n  local len = math.floor(#enc / 2)\r\n  local str = {}\r\n\r\n  for i = 1, len do\r\n    local high_nibble = hex_map[enc:sub(i * 2 - 1, i * 2 - 1)]\r\n    local low_nibble = hex_map[enc:sub(i * 2, i * 2)]\r\n    if high_nibble == nil or low_nibble == nil then\r\n      return nil, 'invalid character in input'\r\n    end\r\n    str[#str + 1] = string.char(high_nibble * 16 + low_nibble)\r\n  end\r\n\r\n  return table.concat(str)\r\nend\r\n\r\n-- The buffer-based functions you provided\r\nlocal function hexencode2(str)\r\n  local bytes = {}\r\n  local enc = {}\r\n  for i = 1, #str do\r\n    bytes[i] = string.byte(str, i)\r\n  end\r\n  for i = 1, #bytes do\r\n    enc[#enc + 1] = string.format('%02X', bytes[i])\r\n  end\r\n  return table.concat(enc)\r\nend\r\n\r\nlocal function hexdecode2(enc)\r\n  local str = {}\r\n  for i = 1, #enc, 2 do\r\n    local hex = enc:sub(i, i + 1)\r\n    str[#str + 1] = string.char(tonumber(hex, 16))\r\n  end\r\n  return table.concat(str)\r\nend\r\n\r\n-- Function to run a benchmark\r\nlocal function benchmark(func, input, iterations)\r\n  local start_time = os.clock()\r\n  for i = 1, iterations do\r\n    func(input)\r\n  end\r\n  local end_time = os.clock()\r\n  return end_time - start_time\r\nend\r\n\r\n-- Prepare input and output for tests\r\nlocal input, output = string.rep('😂', 2 ^ 16), string.rep('F09F9882', 2 ^ 16)\r\nassert(output == hexencode2(input), 'hexencode2')\r\nassert(input == hexdecode2(output), 'hexdecode2')\r\nassert(output == hexencode1(input), 'hexencode1')\r\nassert(input == hexdecode1(output), 'hexdecode1')\r\n\r\n-- Run benchmarks\r\nlocal iterations = 10\r\n\r\nprint('Benchmarking hexencode1 (Lua 5.1)...')\r\nprint('Time taken:', benchmark(hexencode1, input, iterations))\r\n\r\nprint('Benchmarking hexdecode1 (Lua 5.1)...')\r\nprint('Time taken:', benchmark(hexdecode1, output, iterations))\r\n\r\nprint('Benchmarking hexencode2 (buffer-based)...')\r\nprint('Time taken:', benchmark(hexencode2, input, iterations))\r\n\r\nprint('Benchmarking hexdecode2 (buffer-based)...')\r\nprint('Time taken:', benchmark(hexdecode2, output, iterations))\r\n```",
            "created_at": "2024-08-18T02:46:20Z",
            "html_url": "https://github.com/neovim/neovim/issues/29981#issuecomment-2295081391",
            "id": 2295081391,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29981",
            "node_id": "IC_kwDOAPphoM6IzCmv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2295081391/reactions"
            },
            "updated_at": "2024-08-18T02:46:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2295081391",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@glepnir I tried your benchmark script against the implementation in https://github.com/neovim/neovim/pull/30075:\r\n\r\n```\r\nBenchmarking hexencode1 (Lua 5.1)...\r\nTime taken: 0.038988\r\nBenchmarking hexdecode1 (Lua 5.1)...\r\nTime taken: 0.086294\r\nBenchmarking vim.text.hexencode (#30075)...\r\nTime taken: 0.059076\r\nBenchmarking vim.text.hexdecode (#30075)...\r\nTime taken: 0.336875\r\n```\r\n\r\nThe lookup table approach is certainly faster, but for encoding the absolute difference even for a very large string is fairly small. There is a much larger difference in the decoding though. I am not sure, but my guess is that this is due to `tonumber`.",
            "created_at": "2024-08-18T03:44:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/29981#issuecomment-2295098903",
            "id": 2295098903,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29981",
            "node_id": "IC_kwDOAPphoM6IzG4X",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2295098903/reactions"
            },
            "updated_at": "2024-08-18T03:57:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2295098903",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "used a lookup table (hex_map) to quickly map each character to its corresponding numeric value, rather than relying on tonumber. This approach reduces the overhead of parsing and computation:\r\n1. Character-to-Number Lookup Table:  created a hex_map that directly maps each hexadecimal character (such as 'A' or 'F') to its corresponding numeric value (10 or 15), thereby avoiding the need to call tonumber.\r\n2. Character Combination:  combined the numeric values of the high and low nibble characters to get a complete byte, which is then converted into a character.\r\n\r\nFinally, used table.concat to merge these characters into a complete string. use table lookups with CPU cache to reduce the overhead of some common functions.  I also tried to bind the C implementation to Lua, but it took about the same amount of time and didn't improve much.\r\n\r\n```\r\nBenchmarking hexencode1 (Lua 5.1)...\r\nTime taken: 0.026796\r\nBenchmarking hexdecode1 (Lua 5.1)...\r\nTime taken: 0.058105\r\nBenchmarking hexencode2 #30075...\r\nTime taken: 0.04042\r\nBenchmarking hexdecode2 #30075...\r\nTime taken: 0.214805\r\n```\r\n\r\n",
            "created_at": "2024-08-18T03:59:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/29981#issuecomment-2295100809",
            "id": 2295100809,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29981",
            "node_id": "IC_kwDOAPphoM6IzHWJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2295100809/reactions"
            },
            "updated_at": "2024-08-18T03:59:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2295100809",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            }
        }
    ],
    "comments": 15,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/29981/comments",
    "created_at": "2024-08-05T04:20:06Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/29981/events",
    "html_url": "https://github.com/neovim/neovim/issues/29981",
    "id": 2447561850,
    "labels": [
        {
            "color": "f9d0c4",
            "default": true,
            "description": "issues reporting wrong behavior",
            "id": 77997474,
            "name": "bug",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3NA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/29981/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 632,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk"
        },
        "description": "Low priority. Not planned for the current target, may be reassigned.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 547,
        "state": "open",
        "title": "backlog",
        "updated_at": "2024-08-18T03:28:05Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "I_kwDOAPphoM6R4tR6",
    "number": 29981,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/29981/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/29981/timeline",
    "title": "Error using vim.text.hexdecode on large (?) strings.",
    "updated_at": "2024-08-18T03:59:34Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/29981",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/118010672?v=4",
        "events_url": "https://api.github.com/users/pedrohgmacedo/events{/privacy}",
        "followers_url": "https://api.github.com/users/pedrohgmacedo/followers",
        "following_url": "https://api.github.com/users/pedrohgmacedo/following{/other_user}",
        "gists_url": "https://api.github.com/users/pedrohgmacedo/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/pedrohgmacedo",
        "id": 118010672,
        "login": "pedrohgmacedo",
        "node_id": "U_kgDOBwizMA",
        "organizations_url": "https://api.github.com/users/pedrohgmacedo/orgs",
        "received_events_url": "https://api.github.com/users/pedrohgmacedo/received_events",
        "repos_url": "https://api.github.com/users/pedrohgmacedo/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/pedrohgmacedo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pedrohgmacedo/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/pedrohgmacedo"
    }
}