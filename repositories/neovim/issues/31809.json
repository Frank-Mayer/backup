{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "This is a description of how incremental injections can be implemented, and I plan to work on the PR. \nI created this issue in case anyone has suggestions or can find potential flaws with this implementation.\n\n### Theory\n\nThe central idea is that most (*1 *4) patterns in a query have a \"root\" node, i.e. such a node, for which the content and structure(types of nodes) outside its range do not affect whether the pattern matches on it or not.\nI.e. if we know that, after an edit, nothing inside the node has changed, then its `matches/doesn't match` status remains the same.\n\nWe can store the ranges of those \"root\" nodes for each match, and skip running query cursor on those ranges if they haven't changed. The same logic applies to all other nodes (that don't match). If their contents and types haven't changed, they will also continue to not match.\n\nWe can use `ts_tree_get_changed_ranges()` to get all regions where the syntax tree was changed, and we can record content changes from `on_bytes()`. Both are already used in the `LanguageTree`.\n\nThe last part is how to get the root nodes for each match. For now, we can do something like `#set! nvim.injection-root @_root`. And if all patterns in a query have that predicate, the optimization applies.\n\n#### How it would work\n\nAfter we have all the changes, we can remove all matches that intersect them, run the matches iterator on these ranges, add the new matches, and create new regions for the affected trees. (The actual implementation would need a smarter invalidating strategy).\n\nSince most of the edits don't affect the injections or the syntax tree in a significant way, for them, the query cursor will recheck only a small range, and 0 injection matches will be added/removed.\n\n### Implementation\n\nI won't be updating this until the PR is ready, but this is not a viable implementation (which is expected, this was a rough plan). \n\nTypes:\n\n```typescript\ntype Language = string\ntype PatternId = number\n\ntype InjectionTree = {\n  tsTree: TSTree,\n  isParseUpToDate: boolean,\n  areRegionsUpToDate: boolean,\n}\n\ntype InjectionMatch = {\n  rootRange: Range6,\n  injectionRanges: Range6[],\n  isValid: boolean,\n}\n\ntype LanguageTree = {\n  ...,\n  trees: InjectionTree[],\n  injections: Map<Language, Map<PatternId, {\n    // injection matches would probably be sorted on start byte.\n    combined: {\n      tree: InjectionTree,\n      matches: InjectionMatch[],\n    },\n    separate: Array<{\n      tree: InjectionTree,\n      match: InjectionMatch,\n    }>,\n  }>>,\n  editedRanges: Range6[],\n}\n```\n\n#### On a tree edit\n\n1. Call `:edit()` on each tree of this `LanguageTree`.\n2. Adjust all `rootRange` in all `InjectionMatch`. If a change happened, reset `InjectionMatch.isValid`, and reset `areRegionsUpToDate` and `isParseUpToDate` on the corresponding tree.\n3. Adjust `editedRanges`.\n4. Add the edit range to `editedRanges`.\n5. Do the same for child `LanguageTree`.\n#### When a parse is complete\n\nAfter a parse on all trees is complete, we have a list of ranges in which the syntax tree was changed.\n\n1. Create a new list of ranges on which the injection query needs to be run. Add syntax tree change ranges and `editedRanges` to the list.\n2. Run injection query iterator on each range. For each match, try to find another `InjectionMatch` with the same root range (in combined/separate depending on the type).\n2.1. If found, mark that match as valid, replace its `includedRegions`, and continue.\n2.2. Otherwise, add a new `InjectionMatch`, reset `areRegionsUpToDate` and `isParseUpToDate` on the corresponding tree.\n3. Go through all injections and collect the trees into lists by language. For injections that are not `areRegionsUpToDate`, combine all ranges from their `InjectionMatch`, remove all invalid `InjectionMatch`, and reassign the new ranges. If there are no valid matches, remove the tree.\n4. Pass the new tree lists to corresponding child `LanguageTree`s.\n\n---\n\nNotes:\n1. Theoretically, the \"root\" node can depend on the `type` of its ancestors, since if they change, their range is invalidated, and the match will be as well. This means `#has-ancestor?` should work with this optimization.\n2. If the root range has changed, but included ranges did not, we don't need\nto reparse the tree. But I assume tree-sitter already has a fast path for that\n(it sets `has_changes` on nodes affected by `ts_tree_edit()`).\n3. This is different from https://github.com/neovim/neovim/pull/26827 in that with this implementation, all injections, even the ones currently not visible, are preserved, and it also works with combined injection.\n4. The same pattern cannot match different nodes in the same root. I.e. root range and (`includedRanges` + language) correspond 1 to 1 per pattern in a query.",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Mostly SGTM.\n\nI don't fully understand why we need a \"root range\" for each injection. I thought this is basically the node captured with `@injection.content` which we already track. Is there a reason why those ranges can't be used?",
            "created_at": "2025-01-01T09:17:50Z",
            "html_url": "https://github.com/neovim/neovim/issues/31809#issuecomment-2566923476",
            "id": 2566923476,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31809",
            "node_id": "IC_kwDOAPphoM6ZACTU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2566923476/reactions"
            },
            "updated_at": "2025-01-01T09:17:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2566923476",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I don't fully understand why we need a \"root range\" for each injection. I thought this is basically the node captured with `@injection.content` which we already track. Is there a reason why those ranges can't be used?\n\nIn most cases, `@injection.content` should be fine. But in cases like these (C injection):\n```scheme\n((call_expression\n  function: (identifier) @_function\n  arguments: (argument_list\n    (_)\n    .\n    [\n      (string_literal\n        (string_content) @injection.content)\n      (concatenated_string\n        (string_literal\n          (string_content) @injection.content))\n    ]))\n  ; format-ignore\n  (#any-of? @_function \n    \"fprintf\" \"fprintf_s\"\n    <...>\n    \"vw_scanw\" \"vwscanw\")\n  (#set! injection.language \"printf\"))\n\n```\n\nthe `call_expression` should be the root, because the match depends on there being only 1 argument before (`(_) .`), and function identifier text being a certain string. And they are outside the injection content range.\n\n",
            "created_at": "2025-01-01T19:09:50Z",
            "html_url": "https://github.com/neovim/neovim/issues/31809#issuecomment-2567115572",
            "id": 2567115572,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31809",
            "node_id": "IC_kwDOAPphoM6ZAxM0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2567115572/reactions"
            },
            "updated_at": "2025-01-01T19:11:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2567115572",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "If I understand and recall correctly, the overal idea seems similar to what Zed does.\n\n> ```\n>     // injection matches would probably be sorted on start byte.\n>     ...\n>     separate: Array<{\n>       tree: InjectionTree,\n>       match: InjectionMatch,\n>     }>,\n> ```\nFor this to be maintained efficiently for the entire buffer, the injection set would likely need to be structured as an interval tree. I was considering using extmarks to do something similar for incrementalizing combined injection in #26827, but so far I couldn't find time to do it.\n\nFor non-combined injection, I'm not sure which approach (this proposal or #26827) would be better. But if the implementation of this proposal is fast enough, I think it would be fine to drop #26827.\n",
            "created_at": "2025-01-02T17:00:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/31809#issuecomment-2568084716",
            "id": 2568084716,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31809",
            "node_id": "IC_kwDOAPphoM6ZEdzs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2568084716/reactions"
            },
            "updated_at": "2025-01-02T17:00:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2568084716",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19489738?v=4",
                "events_url": "https://api.github.com/users/tomtomjhj/events{/privacy}",
                "followers_url": "https://api.github.com/users/tomtomjhj/followers",
                "following_url": "https://api.github.com/users/tomtomjhj/following{/other_user}",
                "gists_url": "https://api.github.com/users/tomtomjhj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tomtomjhj",
                "id": 19489738,
                "login": "tomtomjhj",
                "node_id": "MDQ6VXNlcjE5NDg5NzM4",
                "organizations_url": "https://api.github.com/users/tomtomjhj/orgs",
                "received_events_url": "https://api.github.com/users/tomtomjhj/received_events",
                "repos_url": "https://api.github.com/users/tomtomjhj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tomtomjhj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tomtomjhj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tomtomjhj",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Preliminary results: \n\nfor 10'000 lines of this inside `main()`:\n```c\n  printf(\"test %f test\");\n```\n\neach edit takes +4ms, but injeciton parsing is reduced from 250ms to ~4ms.\n\nAlso deleting a double quote seems to invalidate almost the entire buffer (even though no other strings are affected), so the time spikes to 300ms.",
            "created_at": "2025-01-03T07:06:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/31809#issuecomment-2568775661",
            "id": 2568775661,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31809",
            "node_id": "IC_kwDOAPphoM6ZHGft",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2568775661/reactions"
            },
            "updated_at": "2025-01-03T07:07:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2568775661",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I looked into what Zed does. They use ranges from `@injection.content` for the invalidation ranges. So the injections aren't invalidated in all cases:\n\n![Image](https://github.com/user-attachments/assets/17f23292-2ecd-49cb-82d9-a7d981b20dbc)\n\ndeleting `j` doesn't remove the highlighting:\n![Image](https://github.com/user-attachments/assets/887c6a00-66fd-40b1-aa3f-c3f896b95453)\n\nBut deleting a space afterwards does:\n![Image](https://github.com/user-attachments/assets/9806b6f8-598f-48f1-bc03-157ad361c6a6)\n\n",
            "created_at": "2025-01-03T17:38:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/31809#issuecomment-2569589524",
            "id": 2569589524,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31809",
            "node_id": "IC_kwDOAPphoM6ZKNMU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2569589524/reactions"
            },
            "updated_at": "2025-01-03T17:38:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2569589524",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/31809/comments",
    "created_at": "2025-01-01T01:35:08Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/31809/events",
    "html_url": "https://github.com/neovim/neovim/issues/31809",
    "id": 2764772326,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1799626557,
            "name": "treesitter",
            "node_id": "MDU6TGFiZWwxNzk5NjI2NTU3",
            "url": "https://api.github.com/repos/neovim/neovim/labels/treesitter"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/31809/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6kyxPm",
    "number": 31809,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/31809/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/31809/timeline",
    "title": "proposal: incremental injections",
    "updated_at": "2025-01-03T17:38:36Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/31809",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
        "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
        "followers_url": "https://api.github.com/users/vanaigr/followers",
        "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
        "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/vanaigr",
        "id": 65824523,
        "login": "vanaigr",
        "node_id": "MDQ6VXNlcjY1ODI0NTIz",
        "organizations_url": "https://api.github.com/users/vanaigr/orgs",
        "received_events_url": "https://api.github.com/users/vanaigr/received_events",
        "repos_url": "https://api.github.com/users/vanaigr/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/vanaigr",
        "user_view_type": "public"
    }
}