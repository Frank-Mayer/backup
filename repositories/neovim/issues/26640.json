{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\r\n\r\nWhen I purposely create an error in a simple Ruby file (`puts \"Hello, World!`), I notice that Neovim will initially report a diagnostic error message. If I fix the error, I notice the diagnostic message is still present.\r\n\r\nThe [Ruby-LSP](https://github.com/Shopify/ruby-lsp) is somewhat unique in that it only supports pull diagnostics and not PublishDiagnostics. Although I'm aware the former was implemented in #24128.\r\n\r\n### Steps to reproduce using \"nvim -u minimal_init.lua\"\r\n\r\nSteps to reproduce:\r\n\r\n1. Ensure you have Ruby 3.0 or greater installed\r\n2. Install Ruby-LSP with `gem install ruby-lsp` (current version 0.13.2)\r\n3. Open Neovim with the following command: `nvim -u [path to minimal_init.lua file] example.rb`\r\n4. Once in the file, invalidate the code in the `example.rb` file by removing one of the quotation marks from `puts \"Hello, World\"`. You'll see a diagnostic error\r\n5. Put the quotation mark back. You'll still see the error.\r\n\r\nFiles outlined below:\r\n\r\nminimal_init.lua file:\r\n\r\n```lua\r\nlocal on_windows = vim.loop.os_uname().version:match(\"Windows\")\r\n\r\nlocal function join_paths(...)\r\n  local path_sep = on_windows and \"\\\\\" or \"/\"\r\n  local result = table.concat({ ... }, path_sep)\r\n  return result\r\nend\r\n\r\nvim.cmd([[set runtimepath=$VIMRUNTIME]])\r\n\r\nlocal temp_dir = vim.loop.os_getenv(\"TEMP\") or \"/tmp\"\r\n\r\nvim.cmd(\"set packpath=\" .. join_paths(temp_dir, \"nvim\", \"site\"))\r\n\r\nlocal package_root = join_paths(temp_dir, \"nvim\", \"site\", \"pack\")\r\nlocal lspconfig_path = join_paths(package_root, \"test\", \"start\", \"nvim-lspconfig\")\r\n\r\nif vim.fn.isdirectory(lspconfig_path) ~= 1 then\r\n  vim.fn.system({ \"git\", \"clone\", \"https://github.com/neovim/nvim-lspconfig\", lspconfig_path })\r\nend\r\n\r\nvim.lsp.set_log_level(\"debug\")\r\nrequire(\"vim.lsp.log\").set_format_func(vim.inspect)\r\n\r\nlocal nvim_lsp = require(\"lspconfig\")\r\nlocal on_attach = function(_, bufnr)\r\n  local function buf_set_option(...)\r\n    vim.api.nvim_buf_set_option(bufnr, ...)\r\n  end\r\n\r\n  buf_set_option(\"omnifunc\", \"v:lua.vim.lsp.omnifunc\")\r\n\r\n  -- Mappings.\r\n  local opts = { buffer = bufnr, noremap = true, silent = true }\r\n  vim.keymap.set(\"n\", \"gD\", vim.lsp.buf.declaration, opts)\r\n  vim.keymap.set(\"n\", \"gd\", vim.lsp.buf.definition, opts)\r\n  vim.keymap.set(\"n\", \"K\", vim.lsp.buf.hover, opts)\r\n  vim.keymap.set(\"n\", \"gi\", vim.lsp.buf.implementation, opts)\r\n  vim.keymap.set(\"n\", \"<C-k>\", vim.lsp.buf.signature_help, opts)\r\n  vim.keymap.set(\"n\", \"<space>wa\", vim.lsp.buf.add_workspace_folder, opts)\r\n  vim.keymap.set(\"n\", \"<space>wr\", vim.lsp.buf.remove_workspace_folder, opts)\r\n  vim.keymap.set(\"n\", \"<space>wl\", function()\r\n    print(vim.inspect(vim.lsp.buf.list_workspace_folders()))\r\n  end, opts)\r\n  vim.keymap.set(\"n\", \"<space>D\", vim.lsp.buf.type_definition, opts)\r\n  vim.keymap.set(\"n\", \"<space>rn\", vim.lsp.buf.rename, opts)\r\n  vim.keymap.set(\"n\", \"gr\", vim.lsp.buf.references, opts)\r\n  vim.keymap.set(\"n\", \"<space>e\", vim.diagnostic.open_float, opts)\r\n  vim.keymap.set(\"n\", \"[d\", vim.diagnostic.goto_prev, opts)\r\n  vim.keymap.set(\"n\", \"]d\", vim.diagnostic.goto_next, opts)\r\n  vim.keymap.set(\"n\", \"<space>q\", vim.diagnostic.setloclist, opts)\r\nend\r\n\r\n-- Add the server that troubles you here\r\nlocal name = \"ruby_ls\"\r\nlocal cmd = { \"ruby-lsp\" } -- needed for elixirls, lua_ls, omnisharp\r\nif not name then\r\n  print(\"You have not defined a server name, please edit minimal_init.lua\")\r\nend\r\nif not nvim_lsp[name].document_config.default_config.cmd and not cmd then\r\n  print([[You have not defined a server default cmd for a server\r\n    that requires it please edit minimal_init.lua]])\r\nend\r\n\r\nnvim_lsp[name].setup({\r\n  cmd = cmd,\r\n  on_attach = on_attach,\r\n})\r\n```\r\n\r\nexample.rb file:\r\n\r\n```ruby\r\nputs \"Hello, World!\"\r\n```\r\n\r\n### Expected behavior\r\n\r\nDiagnostic messages to be continually updated when the Ruby file is edited.\r\n\r\n### Neovim version (nvim -v)\r\n\r\n0.10.0-dev-7d279a0\r\n\r\n### Language server name/version\r\n\r\nruby-lsp 0.13.2\r\n\r\n### Operating system/version\r\n\r\nmacOS 14.1 (23B74)\r\n\r\n### Log file\r\n\r\nhttps://gist.github.com/olimorris/dc262e730c720824701d34c9e01e3748",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "Hi @catlee. I thought I'd tag you in this as this issue directly corresponds to the awesome new feature you PR'd some time ago.",
            "created_at": "2024-01-05T23:07:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/26640#issuecomment-1879363470",
            "id": 1879363470,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26640",
            "node_id": "IC_kwDOAPphoM5wBM-O",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1879363470/reactions"
            },
            "updated_at": "2024-01-05T23:07:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1879363470",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9512444?v=4",
                "events_url": "https://api.github.com/users/olimorris/events{/privacy}",
                "followers_url": "https://api.github.com/users/olimorris/followers",
                "following_url": "https://api.github.com/users/olimorris/following{/other_user}",
                "gists_url": "https://api.github.com/users/olimorris/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/olimorris",
                "id": 9512444,
                "login": "olimorris",
                "node_id": "MDQ6VXNlcjk1MTI0NDQ=",
                "organizations_url": "https://api.github.com/users/olimorris/orgs",
                "received_events_url": "https://api.github.com/users/olimorris/received_events",
                "repos_url": "https://api.github.com/users/olimorris/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/olimorris/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/olimorris/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/olimorris"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Unfortunately I can't reproduce this. I tried on the revision of nightly that you have, as well as on latest master.\r\n\r\nOne interesting thing in your logs is this:\r\n\r\n```\r\n[DEBUG][2023-12-18 16:40:38] .../vim/lsp/rpc.lua:43\t\"rpc.send\"\t{\r\n  id = 6,\r\n  jsonrpc = \"2.0\",\r\n  method = \"textDocument/diagnostic\",\r\n  params = {\r\n    range = {\r\n      [\"end\"] = {\r\n        character = 0,\r\n        line = 3\r\n      },\r\n      start = {\r\n        character = 0,\r\n        line = 0\r\n      }\r\n    },\r\n    textDocument = {\r\n      uri = \"file:///Users/Oli/.dotfiles/example.rb\"\r\n    }\r\n  }\r\n}\r\n[DEBUG][2023-12-18 16:40:38] .../vim/lsp/rpc.lua:43\t\"rpc.receive\"\t{\r\n  id = 6,\r\n  jsonrpc = \"2.0\"\r\n}\r\n```\r\n\r\n`ruby-lsp`'s response to the `textDocument/diagnostic` request here is empty; it doesn't have any `result` field, which causes the code here to exit early:  https://github.com/neovim/neovim/blob/master/runtime/lua/vim/lsp/diagnostic.lua#L301\r\n\r\nI'm not sure why `ruby-lsp` isn't responding with any results to the query in this case...\r\n\r\nPerhaps we should consider a missing response to be the same as an empty response?",
            "created_at": "2024-01-06T15:47:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/26640#issuecomment-1879734598",
            "id": 1879734598,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26640",
            "node_id": "IC_kwDOAPphoM5wCnlG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1879734598/reactions"
            },
            "updated_at": "2024-01-06T15:47:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1879734598",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/54458?v=4",
                "events_url": "https://api.github.com/users/catlee/events{/privacy}",
                "followers_url": "https://api.github.com/users/catlee/followers",
                "following_url": "https://api.github.com/users/catlee/following{/other_user}",
                "gists_url": "https://api.github.com/users/catlee/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/catlee",
                "id": 54458,
                "login": "catlee",
                "node_id": "MDQ6VXNlcjU0NDU4",
                "organizations_url": "https://api.github.com/users/catlee/orgs",
                "received_events_url": "https://api.github.com/users/catlee/received_events",
                "repos_url": "https://api.github.com/users/catlee/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/catlee/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/catlee/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/catlee"
            }
        },
        {
            "author_association": "NONE",
            "body": "Thanks for looking into this. The fact you can't recreate this makes me wonder whether there are some gems or something elsewhere on my system that's clashing with this.\n\nI'll ask the Ruby Neovim community if they can recreate it too.\n\n> Perhaps we should consider a missing response to be the same as an empty response?\n\nThis _looks_ sensible to my unknowledgeable eyes. I'll download the source code, make the change and build it to see.",
            "created_at": "2024-01-08T23:35:05Z",
            "html_url": "https://github.com/neovim/neovim/issues/26640#issuecomment-1881986502",
            "id": 1881986502,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26640",
            "node_id": "IC_kwDOAPphoM5wLNXG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1881986502/reactions"
            },
            "updated_at": "2024-01-08T23:35:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1881986502",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9512444?v=4",
                "events_url": "https://api.github.com/users/olimorris/events{/privacy}",
                "followers_url": "https://api.github.com/users/olimorris/followers",
                "following_url": "https://api.github.com/users/olimorris/following{/other_user}",
                "gists_url": "https://api.github.com/users/olimorris/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/olimorris",
                "id": 9512444,
                "login": "olimorris",
                "node_id": "MDQ6VXNlcjk1MTI0NDQ=",
                "organizations_url": "https://api.github.com/users/olimorris/orgs",
                "received_events_url": "https://api.github.com/users/olimorris/received_events",
                "repos_url": "https://api.github.com/users/olimorris/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/olimorris/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/olimorris/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/olimorris"
            }
        }
    ],
    "comments": 3,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/26640/comments",
    "created_at": "2023-12-18T16:55:10Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/26640/events",
    "html_url": "https://github.com/neovim/neovim/issues/26640",
    "id": 2047072038,
    "labels": [
        {
            "color": "f9d0c4",
            "default": true,
            "description": "issues reporting wrong behavior",
            "id": 77997474,
            "name": "bug",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3NA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/26640/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM56A9cm",
    "number": 26640,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/26640/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/26640/timeline",
    "title": "Neovim doesn't seem to pull diagnostics from Ruby-LSP",
    "updated_at": "2024-01-08T23:35:06Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/26640",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/9512444?v=4",
        "events_url": "https://api.github.com/users/olimorris/events{/privacy}",
        "followers_url": "https://api.github.com/users/olimorris/followers",
        "following_url": "https://api.github.com/users/olimorris/following{/other_user}",
        "gists_url": "https://api.github.com/users/olimorris/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/olimorris",
        "id": 9512444,
        "login": "olimorris",
        "node_id": "MDQ6VXNlcjk1MTI0NDQ=",
        "organizations_url": "https://api.github.com/users/olimorris/orgs",
        "received_events_url": "https://api.github.com/users/olimorris/received_events",
        "repos_url": "https://api.github.com/users/olimorris/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/olimorris/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/olimorris/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/olimorris"
    }
}