{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\nI use lsp-saga to go to definitions, references etc, but many a times (when I am into more than one nested floating windows), when I close the floating windows, the cursor goes to the leftmost split. I use vim-maximizer to focus on one split, hiding the others. \r\n\r\nAnd when I close the popups, the cursor going to the leftmost split, messes with the hide/show split setup.\n\n### Steps to reproduce\n\nUse lspsaga and some lsp server.\r\ncreate multiple splits, go to refrences, nesting popup windows,\r\nand then close those windows.\n\n### Expected behavior\n\nThe cursor should come back to the split from where it created the popup reference windows.\n\n### Neovim version (nvim -v)\n\n0.9.5\n\n### Vim (not Nvim) behaves the same?\n\ndon't know\n\n### Operating system/version\n\nLinux Arch\n\n### Terminal name/version\n\nst\n\n### $TERM environment variable\n\nst-256color\n\n### Installation\n\nAUR",
    "closed_at": "2024-03-23T22:03:03Z",
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "```lua\r\nlocal opt = vim.opt\r\nopt.relativenumber = true -- show relative line numbers\r\nopt.number = true -- shows absolute line number on cursor line (when relative number is on)\r\nopt.ruler = false\r\nopt.cmdheight = 1\r\nopt.background = \"dark\"\r\nopt.fillchars = \"fold: \"\r\nopt.tabstop = 4 -- 2 spaces for tabs (prettier default)\r\nopt.shiftwidth = 4 -- 2 spaces for indent width\r\nopt.expandtab = true -- expand tab to spaces\r\nopt.autoindent = true -- copy indent from current line when starting new one\r\nopt.syntax = \"on\"\r\nopt.wrap = false -- disable line wrapping\r\nopt.ignorecase = true -- ignore case when searching\r\nopt.smartcase = true -- if you include mixed case in your search, assumes you want case-sensitive\r\nopt.cursorline = false -- highlight the current cursor line\r\nopt.termguicolors = true\r\nopt.signcolumn = \"yes\" -- show sign column so that text doesn't shift\r\nopt.backspace = \"indent,eol,start\" -- allow backspace on indent, end of line or insert mode start position\r\nopt.clipboard:append(\"unnamedplus\") -- use system clipboard as default register\r\nopt.splitright = true -- split vertical window to the right\r\nopt.splitbelow = true -- split horizontal window to the bottom\r\nopt.pumheight = 12\r\nopt.conceallevel = 1\r\nopt.guicursor = \"a:block\"\r\nopt.hlsearch = true\r\nopt.incsearch = true\r\nopt.scrolloff = 8\r\nopt.updatetime = 50\r\nvim.g.noswapfile = true\r\nvim.g.nobackup = true\r\nvim.g.nowritebackup = true\r\nvim.g.laststatus = 2\r\n\r\nG_telescope_last = 0\r\n\r\nvim.keymap.set({ \"i\", \"s\" }, \"<M-l>\", function()\r\n\trequire(\"luasnip\").jump(1)\r\nend, { silent = true })\r\n\r\nvim.keymap.set({ \"i\", \"s\" }, \"<M-h>\", function()\r\n\trequire(\"luasnip\").jump(-1)\r\nend, { silent = true })\r\n\r\nlocal set_namespace = vim.api.nvim__set_hl_ns or vim.api.nvim_set_hl_ns\r\nlocal namespace = vim.api.nvim_create_namespace(\"dap-hlng\")\r\nvim.api.nvim_set_hl(namespace, \"DapBreakpoint\", { fg = \"#eaeaeb\", bg = \"#ffffff\" })\r\nvim.api.nvim_set_hl(namespace, \"DapLogPoint\", { fg = \"#eaeaeb\", bg = \"#ffffff\" })\r\nvim.api.nvim_set_hl(namespace, \"DapStopped\", { fg = \"#eaeaeb\", bg = \"#ffffff\" })\r\n\r\nvim.fn.sign_define(\r\n\t\"DapBreakpoint\",\r\n\t{ text = \"\", texthl = \"DapBreakpoint\", linehl = \"DapBreakpoint\", numhl = \"DapBreakpoint\" }\r\n)\r\nvim.fn.sign_define(\r\n\t\"DapBreakpointCondition\",\r\n\t{ text = \"\", texthl = \"DapBreakpoint\", linehl = \"DapBreakpoint\", numhl = \"DapBreakpoint\" }\r\n)\r\nvim.fn.sign_define(\r\n\t\"DapBreakpointRejected\",\r\n\t{ text = \"\", texthl = \"DapBreakpoint\", linehl = \"DapBreakpoint\", numhl = \"DapBreakpoint\" }\r\n)\r\nvim.fn.sign_define(\r\n\t\"DapLogPoint\",\r\n\t{ text = \"\", texthl = \"DapLogPoint\", linehl = \"DapLogPoint\", numhl = \"DapLogPoint\" }\r\n)\r\nvim.fn.sign_define(\"DapStopped\", { text = \"\", texthl = \"DapStopped\", linehl = \"DapStopped\", numhl = \"DapStopped\" })\r\n\r\nvim.g.editorconfig_max_line_length = 100\r\n-- vim.g.markdown_folding = 1\r\n-- opt.guicursor =\r\n-- \t\"n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor,sm:block-blinkwait175-blinkoff150-blinkon175\"\r\nvim.opt.pumheight = 12\r\nvim.g.mapleader = \" \"\r\n\r\nlocal keymap = vim.keymap -- for conciseness\r\nkeymap.set(\"n\", \"<leader>w\", \":w!<CR>\")\r\nkeymap.set(\"n\", \"<leader>q\", \":q!<CR>\")\r\nkeymap.set(\"n\", \"<leader>nh\", \":nohlsearch<CR>\")\r\nkeymap.set(\"n\", \"<leader>e\", \":NvimTreeFindFileToggle<CR>\")\r\nkeymap.set(\"v\", \"J\", \":m '>+1<CR>gv=gv\")\r\nkeymap.set(\"v\", \"K\", \":m '<-2<CR>gv=gv\")\r\nkeymap.set(\"n\", \"s\", \":lua saveToReadmeFile()<CR>\") -- mapping to restart lsp if necessary\r\nkeymap.set(\"n\", \"<leader>y\", '\"+y')\r\nkeymap.set(\"v\", \"<leader>y\", '\"+y')\r\nkeymap.set(\"n\", \"<leader>Y\", '\"+Y')\r\nkeymap.set(\"n\", \"m\", \":MaximizerToggle!<CR>\")\r\nkeymap.set(\"n\", \"<leader>mp\", \":MarkdownPreviewToggle<CR>\")\r\nkeymap.set(\"n\", \"<leader>s\", \":source %<CR>\")\r\nkeymap.set(\"n\", \"z\", \":ToggleTerm<CR>\")\r\nkeymap.set(\"x\", \"<leader>p\", '\"_dP')\r\n\r\nkeymap.set(\"n\", \"<leader>sv\", \":vsplit<CR>\")\r\nkeymap.set(\"n\", \"<leader>sh\", \":split<CR>\")\r\n\r\nkeymap.set(\"n\", \"<leader>to\", \":tabnew<CR>\") -- open new tab\r\nkeymap.set(\"n\", \"<leader>tx\", \":tabclose<CR>\") -- close current tab\r\nkeymap.set(\"n\", \"<leader>tn\", \":tabn<CR>\") --  go to next tab\r\nkeymap.set(\"n\", \"<leader>tp\", \":tabp<CR>\") --  go to previous tab\r\nkeymap.set(\"n\", \"<leader>rs\", \":LspRestart<CR>\") -- mapping to restart lsp if necessary\r\nkeymap.set(\"n\", \"<leader>oe\", \":lua vim.diagnostic.open_float()<CR>\") -- mapping to restart lsp if necessary\r\nkeymap.set(\"n\", \"<leader>oo\", \":FeMaco<CR>\") -- mapping to restart lsp if necessary\r\nkeymap.set(\"n\", \"<leader>gh\", ':lua require(\"neogit\").open()<CR>')\r\n\r\n-- but these are overwritten by the buffer navigation bindings\r\n--\r\n--[[ \r\n      vim.keymap.set({ \"i\", \"s\" }, \"<C-l>\", function()\r\n        require(\"luasnip\").jump(1)\r\n      end, { silent = true })\r\n      vim.keymap.set({ \"i\", \"s\" }, \"<C-h>\", function()\r\n        require(\"luasnip\").jump(-1)\r\n      end, { silent = true }) \r\n--]]\r\n\r\n-- ThePrimeagen's keybindings\r\n-- vim.keymap.set(\"n\", \"<C-j>\", \"<cmd>cnext<CR>zz\")\r\n-- vim.keymap.set(\"n\", \"<C-k>\", \"<cmd>cprev<CR>zz\")\r\n-- vim.keymap.set(\"n\", \"<leader>k\", \"<cmd>lnext<CR>zz\")\r\n-- vim.keymap.set(\"n\", \"<leader>j\", \"<cmd>lprev<CR>zz\")\r\nvim.keymap.set(\"n\", \"J\", \"mzJ`z\")\r\n\r\nkeymap.set(\"n\", \"M\", \":lua today()<CR>\") -- mapping to restart lsp if necessary\r\n\r\nkeymap.set(\"n\", \"<leader>tb\", ':lua require(\"dap\").toggle_breakpint()<CR>') -- open new tab\r\n-- keymap.set(\"n\", \"<leader>\", \":tabclose<CR>\") -- close current tab\r\n-- keymap.set(\"n\", \"<leader>\", \":tabn<CR>\") --  go to next tab\r\n-- keymap.set(\"n\", \"<leader>\", \":tabp<CR>\") --  go to previous tab\r\n-- keymap.set(\"n\", \"<leader>\", \":LspRestart<CR>\") -- mapping to restart lsp if necessary\r\n-- keymap.set(\"n\", \"<leader>\", \":lua vim.diagnostic.open_float()<CR>\") -- mapping to restart lsp if necessary\r\n\r\n-- nvim-dap\r\nvim.keymap.set(\"n\", \"<F5>\", function()\r\n\trequire(\"dap\").continue()\r\nend)\r\nvim.keymap.set(\"n\", \"<F10>\", function()\r\n\trequire(\"dap\").step_over()\r\nend)\r\nvim.keymap.set(\"n\", \"<F11>\", function()\r\n\trequire(\"dap\").step_into()\r\nend)\r\nvim.keymap.set(\"n\", \"<F12>\", function()\r\n\trequire(\"dap\").step_out()\r\nend)\r\nvim.keymap.set(\"n\", \"<Leader>b\", function()\r\n\trequire(\"dap\").toggle_breakpoint()\r\nend)\r\nvim.keymap.set(\"n\", \"<Leader>B\", function()\r\n\trequire(\"dap\").set_breakpoint()\r\nend)\r\nvim.keymap.set(\"n\", \"<Leader>lp\", function()\r\n\trequire(\"dap\").set_breakpoint(nil, nil, vim.fn.input(\"Log point message: \"))\r\nend)\r\nvim.keymap.set(\"n\", \"<Leader>dr\", function()\r\n\trequire(\"dap\").repl.open()\r\nend)\r\nvim.keymap.set(\"n\", \"<Leader>dl\", function()\r\n\trequire(\"dap\").run_last()\r\nend)\r\n\r\n---@diagnostic disable-next-line: lowercase-global\r\nfunction saveToReadmeFile()\r\n\t-- function to save the source code from codefile to a readme\r\n\tlocal file_extension = vim.fn.expand(\"%:e\")\r\n\tif file_extension == \"md\" or file_extension == \"go\" then -- don't touch markdown files\r\n\t\treturn\r\n\tend\r\n\tlocal sourceFile = vim.fn.expand(\"%\") -- full file path\r\n\tlocal tailFilename = vim.fn.expand(\"%:t\")\r\n\tlocal readmeFile = string.gsub(sourceFile, tailFilename, \"readme.md\")\r\n\tvim.cmd(\"!echo '```\" .. file_extension .. \"' >> \" .. readmeFile)\r\n\tvim.cmd(\"!cat \" .. sourceFile .. \" >> \" .. readmeFile)\r\n\tvim.cmd(\"!echo '```' >> \" .. readmeFile)\r\n\tvim.cmd(\"!echo '' > %\")\r\nend\r\n\r\n---@diagnostic disable-next-line: lowercase-global\r\nfunction today()\r\n\t-- Check if tmp file exists in the notes directory\r\n\tlocal notes_dir = \"/home/sahil/files/notes\"\r\n\tlocal tmp_file = notes_dir .. \"/tmp\"\r\n\r\n\tlocal test = io.open(tmp_file, \"r\")\r\n\tif test == nil then\r\n\t\treturn\r\n\tend\r\n\r\n\tlocal date_today = os.date(\"%Y.%m.%d\")\r\n\tlocal entry_name = notes_dir .. \"/\" .. date_today .. \".md\"\r\n\r\n\ttest = io.open(entry_name, \"r\")\r\n\tif test == nil then\r\n\t\t-- File doesn't exist (then create the file)\r\n\t\ttest = io.open(entry_name, \"w\")\r\n\t\tif test ~= nil then\r\n\t\t\ttest:close()\r\n\t\telse\r\n\t\t\tprint(\"Error creating file: \" .. entry_name)\r\n\t\t\treturn\r\n\t\tend\r\n\tend\r\n\r\n\t-- Open the file in Neovim\r\n\tlocal nvim_command = string.format(\"e %s\", entry_name)\r\n\tvim.cmd(nvim_command)\r\nend\r\nkeymap.set(\"n\", \"t\", \":!make run<CR>\")\r\n\r\nfunction ExecuteCurrentFileProgram()\r\n\tlocal file_extension = vim.fn.expand(\"%:e\")\r\n\r\n\tif file_extension == \"cpp\" then\r\n\t\tvim.cmd(\r\n\t\t\t\"!g++ -std=c++20 -Wall -Weffc++ -Wextra -Wconversion -Wsign-conversion -Wshadow -pedantic-errors  % -o exe && ./exe\"\r\n\t\t)\r\n\telseif file_extension == \"c\" then\r\n\t\tvim.cmd(\"!gcc -Wall -Wextra -Wconversion -Wsign-conversion -Wshadow -pedantic-errors  % -o exe && ./exe\")\r\n\telseif file_extension == \"cxx\" then\r\n\t\tvim.cmd(\r\n\t\t\t\"!g++ -std=c++20 -Wall -Weffc++ -Wextra -Wconversion -Wsign-conversion -Wshadow -pedantic-errors  % -o exe && ./exe\"\r\n\t\t)\r\n\telseif file_extension == \"py\" then\r\n\t\tvim.cmd(\"!python %\")\r\n\telseif file_extension == \"lua\" then\r\n\t\tvim.cmd(\"!lua %\")\r\n\telseif file_extension == \"go\" then\r\n\t\tvim.cmd(\"!go run .\")\r\n\telseif file_extension == \"sh\" then\r\n\t\tvim.cmd(\"!sh %\")\r\n\telseif file_extension == \"yaml\" then\r\n\t\tvim.cmd(\"!yaml-parser %\")\r\n\telseif file_extension == \"yml\" then\r\n\t\tvim.cmd(\"!yaml-parser %\")\r\n\telseif file_extension == \"java\" then\r\n\t\t-- get the filename\r\n\t\tlocal filename = vim.fn.expand(\"%:t\")\r\n\t\t-- replace extension with \"\" for java\r\n\t\tlocal bytecode = string.gsub(filename, \".java\", \"\")\r\n\t\t-- execute and cleanup\r\n\t\tvim.cmd(\"!cd code/ && javac %:t && java \" .. bytecode .. \" && rm *.class\")\r\n\telse\r\n\t\tprint(\"Unsupported file type\")\r\n\tend\r\nend\r\n\r\n-- Bind the function to leader + X\r\nvim.api.nvim_set_keymap(\"n\", \"<leader>x\", \":lua ExecuteCurrentFileProgram()<CR>\", { noremap = true, silent = true })\r\n\r\nlocal lazypath = vim.fn.stdpath(\"data\") .. \"/lazy/lazy.nvim\"\r\nif not vim.loop.fs_stat(lazypath) then\r\n\tvim.fn.system({\r\n\t\t\"git\",\r\n\t\t\"clone\",\r\n\t\t\"--filter=blob:none\",\r\n\t\t\"https://github.com/folke/lazy.nvim.git\",\r\n\t\t\"--branch=stable\", -- latest stable release\r\n\t\tlazypath,\r\n\t})\r\nend\r\nvim.opt.rtp:prepend(lazypath)\r\n-- Example for configuring Neovim to load user-installed installed Lua rocks: (image.nvim)\r\npackage.path = package.path .. \";\" .. vim.fn.expand(\"$HOME\") .. \"/.luarocks/share/lua/5.1/?/init.lua;\"\r\npackage.path = package.path .. \";\" .. vim.fn.expand(\"$HOME\") .. \"/.luarocks/share/lua/5.1/?.lua;\"\r\n-- PLUGIN SETUP\r\nrequire(\"lazy\").setup({\r\n\t{\r\n\t\t\"catppuccin/nvim\",\r\n\t\tcommit = \"9f3c13b\",\r\n\t\tname = \"catppuccin\",\r\n\t\tpriority = 1000,\r\n\t\tconfig = function()\r\n\t\t\trequire(\"catppuccin\").setup({\r\n\t\t\t\tflavour = \"mocha\", -- latte, frappe, macchiato, mocha\r\n\t\t\t\tbackground = { -- :h background\r\n\t\t\t\t\tlight = \"latte\",\r\n\t\t\t\t\tdark = \"mocha\",\r\n\t\t\t\t},\r\n\t\t\t\ttransparent_background = true, -- disables setting the background color.\r\n\t\t\t\tshow_end_of_buffer = false, -- shows the '~' characters after the end of buffers\r\n\t\t\t\tterm_colors = true, -- sets terminal colors (e.g. `g:terminal_color_0`)\r\n\t\t\t\tdim_inactive = {\r\n\t\t\t\t\tenabled = false, -- dims the background color of inactive window\r\n\t\t\t\t\tshade = \"dark\",\r\n\t\t\t\t\tpercentage = 0.15, -- percentage of the shade to apply to the inactive window\r\n\t\t\t\t},\r\n\t\t\t\tno_italic = false, -- Force no italic\r\n\t\t\t\tno_bold = false, -- Force no bold\r\n\t\t\t\tno_underline = false, -- Force no underline\r\n\t\t\t\tstyles = { -- Handles the styles of general hi groups (see `:h highlight-args`):\r\n\t\t\t\t\tcomments = { \"italic\" }, -- Change the style of comments\r\n\t\t\t\t\tconditionals = {},\r\n\t\t\t\t\tloops = {},\r\n\t\t\t\t\tfunctions = {},\r\n\t\t\t\t\tkeywords = {},\r\n\t\t\t\t\tstrings = {},\r\n\t\t\t\t\tvariables = {},\r\n\t\t\t\t\tnumbers = {},\r\n\t\t\t\t\tbooleans = {},\r\n\t\t\t\t\tproperties = {},\r\n\t\t\t\t\ttypes = {},\r\n\t\t\t\t\toperators = {},\r\n\t\t\t\t},\r\n\t\t\t\tcolor_overrides = {\r\n\t\t\t\t\tall = {\r\n\t\t\t\t\t\t-- text = \"#ffffff\",\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmocha = {\r\n\t\t\t\t\t\t-- base = \"#0A0E12\",\r\n\t\t\t\t\t\t-- mantle = \"#0A0E12\",\r\n\t\t\t\t\t\t-- crust = \"#0A0E12\",\r\n\t\t\t\t\t},\r\n\t\t\t\t\tfrappe = {},\r\n\t\t\t\t\tmacchiato = {},\r\n\t\t\t\t\tlatte = {},\r\n\t\t\t\t},\r\n\t\t\t\tcustom_highlights = {},\r\n\t\t\t\tintegrations = {\r\n\t\t\t\t\tcmp = true,\r\n\t\t\t\t\tgitsigns = true,\r\n\t\t\t\t\tnvimtree = true,\r\n\t\t\t\t\ttreesitter = true,\r\n\t\t\t\t\tnotify = false,\r\n\t\t\t\t\tmini = {\r\n\t\t\t\t\t\tenabled = true,\r\n\t\t\t\t\t\tindentscope_color = \"\",\r\n\t\t\t\t\t},\r\n\t\t\t\t\t-- For more plugins integrations please scroll down (https://github.com/catppuccin/nvim#integrations)\r\n\t\t\t\t},\r\n\t\t\t})\r\n\t\t\t-- setup must be called before loading\r\n\t\t\tvim.cmd.colorscheme(\"catppuccin\")\r\n\t\tend,\r\n\t},\r\n\r\n\t{\r\n\t\t\"nvim-treesitter/nvim-treesitter\",\r\n\t\tbuild = \":TSUpdate\",\r\n\r\n\t\tconfig = function()\r\n\t\t\tlocal configs = require(\"nvim-treesitter.configs\")\r\n\t\t\tconfigs.setup({\r\n\t\t\t\tauto_install = true, -- don't automatically install the parsers\r\n\t\t\t\tensure_installed = {\r\n\t\t\t\t\t\"c\",\r\n\t\t\t\t\t\"cpp\",\r\n\t\t\t\t\t\"markdown\",\r\n\t\t\t\t\t\"lua\",\r\n\t\t\t\t\t\"vim\",\r\n\t\t\t\t\t\"vimdoc\",\r\n\t\t\t\t\t\"go\",\r\n\t\t\t\t\t\"python\",\r\n\t\t\t\t\t\"java\",\r\n\t\t\t\t\t\"bash\",\r\n\t\t\t\t\t\"html\",\r\n\t\t\t\t},\r\n\t\t\t\tsync_install = false,\r\n\t\t\t\thighlight = { enable = true },\r\n\t\t\t\tindent = { enable = false },\r\n\t\t\t})\r\n\t\tend,\r\n\t},\r\n\r\n\t{\r\n\t\t\"lukas-reineke/indent-blankline.nvim\",\r\n\t\tmain = \"ibl\",\r\n\t\topts = {},\r\n\t\tconfig = function()\r\n\t\t\trequire(\"ibl\").setup({\r\n\t\t\t\tindent = { char = \"│\" },\r\n\t\t\t\twhitespace = {\r\n\t\t\t\t\tremove_blankline_trail = false,\r\n\t\t\t\t},\r\n\t\t\t\tscope = { enabled = false },\r\n\t\t\t})\r\n\t\tend,\r\n\t},\r\n\r\n\t{\r\n\t\t\"nvim-telescope/telescope.nvim\",\r\n\t\ttag = \"0.1.5\",\r\n\t\tdependencies = { \"nvim-lua/plenary.nvim\" },\r\n\r\n\t\tkeys = {\r\n\t\t\t{\r\n\t\t\t\tmode = \"n\",\r\n\t\t\t\t\"<leader>ff\",\r\n\t\t\t\t\":lua G_telescope_last=0 require('telescope.builtin').find_files()<CR>\",\r\n\t\t\t\tdesc = \"\",\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tmode = \"n\",\r\n\t\t\t\t\"<leader>fs\",\r\n\t\t\t\t\":lua G_telescope_last=0 require('telescope.builtin').live_grep()<CR>\",\r\n\t\t\t\tdesc = \"\",\r\n\t\t\t},\r\n\t\t\t-- {mode = 'n', '<leader>fb', \":lua require('telescope.builtin').buffers()<CR>\", desc = \"\"},\r\n\t\t\t{\r\n\t\t\t\tmode = \"n\",\r\n\t\t\t\t\"<leader>fh\",\r\n\t\t\t\t\":lua G_telescope_last=0 require('telescope.builtin').help_tags()<CR>\",\r\n\t\t\t\tdesc = \"\",\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tmode = \"n\",\r\n\t\t\t\t\"<leader>fm\",\r\n\t\t\t\t\":lua G_telescope_last=0 require('telescope.builtin').man_pages()<CR>\",\r\n\t\t\t\tdesc = \"\",\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tmode = \"n\",\r\n\t\t\t\t\"<leader>gs\",\r\n\t\t\t\t\":lua G_telescope_last=0 require('telescope.builtin').git_status()<CR>\",\r\n\t\t\t\tdesc = \"\",\r\n\t\t\t},\r\n\t\t},\r\n\t\tconfig = function()\r\n\t\t\trequire(\"telescope\").setup({\r\n\t\t\t\tdefaults = {\r\n\t\t\t\t\tlayout_strategy = \"vertical\",\r\n\t\t\t\t\tlayout_config = {\r\n\t\t\t\t\t\tbottom_pane = {\r\n\t\t\t\t\t\t\theight = 45,\r\n\t\t\t\t\t\t\tpreview_cutoff = 120,\r\n\t\t\t\t\t\t\tprompt_position = \"top\",\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tcenter = {\r\n\t\t\t\t\t\t\theight = 0.4,\r\n\t\t\t\t\t\t\tpreview_cutoff = 40,\r\n\t\t\t\t\t\t\tprompt_position = \"top\",\r\n\t\t\t\t\t\t\twidth = 0.5,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tcursor = {\r\n\t\t\t\t\t\t\theight = 0.9,\r\n\t\t\t\t\t\t\tpreview_cutoff = 40,\r\n\t\t\t\t\t\t\twidth = 0.8,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\thorizontal = {\r\n\t\t\t\t\t\t\theight = 0.9,\r\n\t\t\t\t\t\t\tpreview_cutoff = 0.9,\r\n\t\t\t\t\t\t\tprompt_position = \"bottom\",\r\n\t\t\t\t\t\t\twidth = 0.8,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tvertical = {\r\n\t\t\t\t\t\t\theight = 80,\r\n\t\t\t\t\t\t\twidth = 170,\r\n\t\t\t\t\t\t\tpreview_cutoff = 00,\r\n\t\t\t\t\t\t\tprompt_position = \"bottom\",\r\n\t\t\t\t\t\t\t-- width = 0.8,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t})\r\n\r\n\t\t\t-- while fuzzy finding a string, remember where i was\r\n\t\t\t--[[\r\n      it should be resume only if fs and fs are after each other.\r\n      --]]\r\n\r\n\t\t\tlocal telescope = require(\"telescope.builtin\")\r\n\t\t\tG_telescope_last = 0\r\n\t\t\tfunction G_telescope_resume()\r\n\t\t\t\tif G_telescope_last == 0 then\r\n\t\t\t\t\tG_telescope_last = 1\r\n\t\t\t\t\ttelescope.live_grep()\r\n\t\t\t\telse\r\n\t\t\t\t\ttelescope.resume()\r\n\t\t\t\tend\r\n\t\t\tend\r\n\r\n\t\t\tvim.keymap.set(\"n\", \" fs\", G_telescope_resume)\r\n\t\tend,\r\n\t},\r\n\r\n\t{\r\n\t\t\"windwp/nvim-autopairs\",\r\n\t\tevent = \"InsertEnter\",\r\n\t\topts = {}, -- this is equalent to setup({}) function\r\n\t},\r\n\r\n\t{\r\n\t\t\"ThePrimeagen/harpoon\",\r\n\t\tdependencies = { \"nvim-lua/plenary.nvim\" },\r\n\t\tkeys = {\r\n\t\t\t{\r\n\t\t\t\tmode = \"n\",\r\n\t\t\t\t\"<leader>mm\",\r\n\t\t\t\t':lua require(\"harpoon.mark\").add_file()<CR>',\r\n\t\t\t\tdesc = \"Mark a file using Harpoon\",\r\n\t\t\t},\r\n\t\t\t{ mode = \"n\", \"<C-e>\", ':lua require(\"harpoon.ui\").toggle_quick_menu()<CR>', desc = \"Toggle quick menu\" },\r\n\t\t\t{ mode = \"n\", \"<leader>1\", ':lua require(\"harpoon.ui\").nav_file(1)<CR>', desc = \"Toggle to file 1\" },\r\n\t\t\t{ mode = \"n\", \"<leader>2\", ':lua require(\"harpoon.ui\").nav_file(2)<CR>', desc = \"Toggle to file 2\" },\r\n\t\t\t{ mode = \"n\", \"<leader>3\", ':lua require(\"harpoon.ui\").nav_file(3)<CR>', desc = \"Toggle to file 3\" },\r\n\t\t\t{ mode = \"n\", \"<leader>4\", ':lua require(\"harpoon.ui\").nav_file(4)<CR>', desc = \"Toggle to file 4\" },\r\n\t\t\t{ mode = \"n\", \"<leader>5\", ':lua require(\"harpoon.ui\").nav_file(5)<CR>', desc = \"Toggle to file 5\" },\r\n\t\t},\r\n\t},\r\n\r\n\t{\r\n\t\t\"nvim-tree/nvim-tree.lua\",\r\n\t\tversion = \"*\",\r\n\t\tcommit = \"73ab665\",\r\n\t\tlazy = false,\r\n\t\tdependencies = {\r\n\t\t\t\"nvim-tree/nvim-web-devicons\",\r\n\t\t},\r\n\r\n\t\tkeys = {\r\n\t\t\t{ mode = \"n\", \"<leader>e\", \":NvimTreeFindFileToggle<CR>\", desc = \"Toggle nvim-tree\" },\r\n\t\t},\r\n\t\tconfig = function()\r\n\t\t\trequire(\"nvim-tree\").setup({\r\n\t\t\t\tview = {\r\n\t\t\t\t\twidth = 30,\r\n\t\t\t\t},\r\n\t\t\t\trenderer = {\r\n\t\t\t\t\ticons = {\r\n\t\t\t\t\t\tglyphs = {\r\n\t\t\t\t\t\t\tfolder = {\r\n\t\t\t\t\t\t\t\tarrow_closed = \"\", -- arrow when folder is closed\r\n\t\t\t\t\t\t\t\tarrow_open = \"\", -- arrow when folder is open\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\r\n\t\t\t\tactions = {\r\n\t\t\t\t\topen_file = {\r\n\t\t\t\t\t\twindow_picker = {\r\n\t\t\t\t\t\t\tenable = false,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t})\r\n\r\n\t\t\t-- local function open_nvim_tree(data)\r\n\t\t\t-- \t-- buffer is a [No Name]\r\n\t\t\t-- \tlocal no_name = data.file == \"\" and vim.bo[data.buf].buftype == \"\"\r\n\t\t\t--\r\n\t\t\t-- \t-- buffer is a directory\r\n\t\t\t-- \tlocal directory = vim.fn.isdirectory(data.file) == 1\r\n\t\t\t--\r\n\t\t\t-- \tif not no_name and not directory then\r\n\t\t\t-- \t\treturn\r\n\t\t\t-- \tend\r\n\t\t\t--\r\n\t\t\t-- \t-- change to the directory\r\n\t\t\t-- \tif directory then\r\n\t\t\t-- \t\tvim.cmd.cd(data.file)\r\n\t\t\t-- \tend\r\n\t\t\t--\r\n\t\t\t-- \t-- open the tree\r\n\t\t\t-- \trequire(\"nvim-tree.api\").tree.open()\r\n\t\t\t-- end\r\n\t\t\t--\r\n\t\t\t-- vim.api.nvim_create_autocmd({ \"VimEnter\" }, { callback = open_nvim_tree })\r\n\t\tend,\r\n\t},\r\n\r\n\t{\r\n\t\t\"christoomey/vim-tmux-navigator\",\r\n\t},\r\n\r\n\t{\r\n\t\t\"akinsho/toggleterm.nvim\",\r\n\t\tversion = \"*\",\r\n\t\tconfig = function()\r\n\t\t\trequire(\"toggleterm\").setup({\r\n\t\t\t\tdirection = \"horizontal\",\r\n\t\t\t\tfloat_opts = {\r\n\t\t\t\t\tborder = \"curved\",\r\n\t\t\t\t},\r\n\t\t\t})\r\n\r\n\t\t\tfunction _G.set_terminal_keymaps()\r\n\t\t\t\tlocal opts = { noremap = true }\r\n\t\t\t\tvim.api.nvim_buf_set_keymap(0, \"t\", \"<esc>\", [[<C-\\><C-n>]], opts)\r\n\t\t\t\tvim.api.nvim_buf_set_keymap(0, \"t\", \"<S-Space>\", [[<C-\\><C-n>]], opts)\r\n\t\t\t\tvim.api.nvim_buf_set_keymap(0, \"t\", \"jk\", [[<C-\\><C-n>]], opts)\r\n\t\t\t\tvim.api.nvim_buf_set_keymap(0, \"t\", \"<C-h>\", [[<C-\\><C-n><C-W>h]], opts)\r\n\t\t\t\tvim.api.nvim_buf_set_keymap(0, \"t\", \"<C-j>\", [[<C-\\><C-n><C-W>j]], opts)\r\n\t\t\t\tvim.api.nvim_buf_set_keymap(0, \"t\", \"<C-k>\", [[<C-\\><C-n><C-W>k]], opts)\r\n\t\t\t\tvim.api.nvim_buf_set_keymap(0, \"t\", \"<C-l>\", [[<C-\\><C-n><C-W>l]], opts)\r\n\t\t\tend\r\n\r\n\t\t\tvim.cmd(\"autocmd! TermOpen term://* lua set_terminal_keymaps()\")\r\n\t\tend,\r\n\t},\r\n\r\n\t{\r\n\t\t\"numToStr/Comment.nvim\",\r\n\t\tconfig = function()\r\n\t\t\trequire(\"Comment\").setup({\r\n\t\t\t\topleader = {\r\n\t\t\t\t\t---Line-comment keymap\r\n\t\t\t\t\tline = \"gc\",\r\n\t\t\t\t\t---Block-comment keymap\r\n\t\t\t\t\tblock = \"gb\",\r\n\t\t\t\t},\r\n\t\t\t})\r\n\t\tend,\r\n\t\tlazy = false,\r\n\t},\r\n\r\n\t{\r\n\t\t\"L3MON4D3/LuaSnip\",\r\n\t\tversion = \"v2.*\",\r\n\t\tbuild = \"make install_jsregexp\",\r\n\t\tdependencies = {\r\n\t\t\t\"rafamadriz/friendly-snippets\",\r\n\t\t},\r\n\t\tkeys = {},\r\n\t\tconfig = function()\r\n\t\t\trequire(\"luasnip.loaders.from_vscode\").lazy_load()\r\n\t\t\tlocal ls = require(\"luasnip\")\r\n\t\t\t-- some shorthands...\r\n\t\t\tlocal snip = ls.snippet\r\n\t\t\tlocal node = ls.snippet_node\r\n\t\t\tlocal text = ls.text_node\r\n\t\t\tlocal insert = ls.insert_node\r\n\t\t\tlocal func = ls.function_node\r\n\t\t\tlocal choice = ls.choice_node\r\n\t\t\tlocal dynamicn = ls.dynamic_node\r\n\r\n\t\t\tlocal date = function()\r\n\t\t\t\treturn { os.date(\"%Y-%m-%d\") }\r\n\t\t\tend\r\n\r\n\t\t\tls.add_snippets(nil, {\r\n\t\t\t\tall = {\r\n\t\t\t\t\tsnip({\r\n\t\t\t\t\t\ttrig = \"info\",\r\n\t\t\t\t\t\tnamr = \"Metadata\",\r\n\t\t\t\t\t\tdscr = \"Yaml metadata format for markdown\",\r\n\t\t\t\t\t}, {\r\n\t\t\t\t\t\ttext({\r\n\t\t\t\t\t\t\t'<a href=\"https://sahilgautam.in\" ><img align=\"left\" alt=\"Git\" width=\"27px\" style=\"padding-right:00px;\" src=\"https://img.icons8.com/fluency/94/domain.png\" /> </a>',\r\n\t\t\t\t\t\t\t'<a href=\"https://twitter.com/mesahilgautam\" ><img align=\"left\" alt=\"Twitter\" width=\"27px\" style=\"padding-right:00px;\" src=\"https://img.icons8.com/fluency/94/twitter-circled.png\" /> </a>',\r\n\t\t\t\t\t\t\t'<a href=\"https://www.linkedin.com/in/mesahilgautam\" ><img align=\"left\" alt=\"linkedin\" width=\"27px\" style=\"padding-right:00px;\" src=\"https://img.icons8.com/fluency/94/linkedin.png\" /> </a>',\r\n\t\t\t\t\t\t\t'<a href=\"https://github.com/mesahilgautam\" ><img align=\"left\" alt=\"github\" width=\"27px\" style=\"padding-right:00px;\" src=\"https://img.icons8.com/fluency/94/github.png\" /> </a>',\r\n\t\t\t\t\t\t\t'<a href=\"https://gerrit.libreoffice.org/q/owner:sahil%2540libreoffice.org\" ><img align=\"left\" alt=\"patches\" width=\"27px\" style=\"padding-right:00px;\" src=\"https://img.icons8.com/fluency/94/add-link.png\" /> </a>',\r\n\t\t\t\t\t\t\t'<a href=\"mailto:sahil@libreoffice.org\" ><img align=\"left\" alt=\"mail\" width=\"27px\" style=\"padding-right:00px;\" src=\"https://img.icons8.com/fluency/94/mail.png\" /> </a>',\r\n\t\t\t\t\t\t\t'<a href=\"/index.xml\" ><img align=\"left\" alt=\"rss\" width=\"27px\" style=\"padding-right:00px;\" src=\"https://img.icons8.com/fluency/94/rss.png\" /> </a>',\r\n\t\t\t\t\t\t\t\"<br>\",\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t-- text({ \"---\", \"title: \" }),\r\n\t\t\t\t\t\t-- insert(1, \"note_title\"),\r\n\t\t\t\t\t\t-- text({ \"\", \"author: \" }),\r\n\t\t\t\t\t\t-- insert(2, \"author\"),\r\n\t\t\t\t\t\t-- text({ \"\", \"date: \" }),\r\n\t\t\t\t\t\t-- func(date, {}),\r\n\t\t\t\t\t\t-- text({ \"\", \"categories: [\" }),\r\n\t\t\t\t\t\t-- insert(3, \"\"),\r\n\t\t\t\t\t\t-- text({ \"]\", \"lastmod: \" }),\r\n\t\t\t\t\t\t-- func(date, {}),\r\n\t\t\t\t\t\t-- text({ \"\", \"tags: [\" }),\r\n\t\t\t\t\t\t-- insert(4),\r\n\t\t\t\t\t\t-- text({ \"]\", \"comments: true\", \"---\", \"\" }),\r\n\t\t\t\t\t\t-- insert(0),\r\n\t\t\t\t\t}),\r\n\t\t\t\t},\r\n\t\t\t})\r\n\t\tend,\r\n\t},\r\n\r\n\t{\r\n\t\t\"hrsh7th/nvim-cmp\",\r\n\t\tdependencies = {\r\n\t\t\t\"neovim/nvim-lspconfig\",\r\n\t\t\t\"hrsh7th/cmp-nvim-lsp\",\r\n\t\t\t\"hrsh7th/cmp-buffer\",\r\n\t\t\t\"hrsh7th/cmp-path\",\r\n\t\t\t\"hrsh7th/cmp-cmdline\",\r\n\t\t\t\"hrsh7th/nvim-cmp\",\r\n\r\n\t\t\t\"L3MON4D3/LuaSnip\",\r\n\t\t\t\"saadparwaiz1/cmp_luasnip\",\r\n\t\t\t\"onsails/lspkind.nvim\",\r\n\t\t\t\"nvimdev/lspsaga.nvim\",\r\n\t\t},\r\n\r\n\t\tconfig = function()\r\n\t\t\tlocal cmp = require(\"cmp\")\r\n\t\t\tlocal luasnip = require(\"luasnip\")\r\n\t\t\tcmp.setup({\r\n\t\t\t\tsnippet = {\r\n\t\t\t\t\texpand = function(args)\r\n\t\t\t\t\t\tluasnip.lsp_expand(args.body) -- For `luasnip` users.\r\n\t\t\t\t\tend,\r\n\t\t\t\t},\r\n\t\t\t\tview = { docs = { auto_open = false } },\r\n\t\t\t\twindow = {\r\n\t\t\t\t\tcompletion = {\r\n\t\t\t\t\t\tscrollbar = false,\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t\tmapping = cmp.mapping.preset.insert({\r\n\t\t\t\t\t[\"<C-b>\"] = cmp.mapping.scroll_docs(-4),\r\n\t\t\t\t\t[\"<C-f>\"] = cmp.mapping.scroll_docs(4),\r\n\t\t\t\t\t[\"<C-Space>\"] = cmp.mapping.complete(),\r\n\t\t\t\t\t[\"<C-e>\"] = cmp.mapping.abort(),\r\n\t\t\t\t\t[\"<Tab>\"] = cmp.mapping(function(fallback)\r\n\t\t\t\t\t\tif cmp.visible() then\r\n\t\t\t\t\t\t\tcmp.confirm({ select = true })\r\n\t\t\t\t\t\t-- elseif luasnip.expandable() then\r\n\t\t\t\t\t\t-- \tluasnip.expand()\r\n\t\t\t\t\t\t-- elseif luasnip.expand_or_jumpable() then\r\n\t\t\t\t\t\t-- \tluasnip.expand_or_jump()\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tfallback()\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend, {\r\n\t\t\t\t\t\t\"i\",\r\n\t\t\t\t\t\t\"s\",\r\n\t\t\t\t\t}),\r\n\t\t\t\t\t[\"<S-Tab>\"] = cmp.mapping(function(fallback)\r\n\t\t\t\t\t\tif cmp.visible() then\r\n\t\t\t\t\t\t\tcmp.select_prev_item()\r\n\t\t\t\t\t\t-- elseif luasnip.jumpable(-1) then\r\n\t\t\t\t\t\t-- \tluasnip.jump(-1)\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tfallback()\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend, {\r\n\t\t\t\t\t\t\"i\",\r\n\t\t\t\t\t\t\"s\",\r\n\t\t\t\t\t}),\r\n\t\t\t\t}),\r\n\r\n\t\t\t\tformatting = {\r\n\t\t\t\t\tformat = require(\"lspkind\").cmp_format({\r\n\t\t\t\t\t\tmaxwidth = 20,\r\n\t\t\t\t\t\tellipsis_char = \"...\",\r\n\t\t\t\t\t}),\r\n\t\t\t\t},\r\n\t\t\t\tsources = cmp.config.sources({\r\n\t\t\t\t\t{ name = \"nvim_lsp\" },\r\n\t\t\t\t\t{ name = \"luasnip\" }, -- For luasnip users.\r\n\t\t\t\t\t{ name = \"buffer\" },\r\n\t\t\t\t\t{ name = \"path\" },\r\n\t\t\t\t}),\r\n\t\t\t})\r\n\t\t\trequire(\"lspsaga\").setup({\r\n\t\t\t\tdefinition = {\r\n\t\t\t\t\tkeys = {\r\n\t\t\t\t\t\tquit = \"q\",\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t\tlightbulb = {\r\n\t\t\t\t\tvirtual_text = false,\r\n\t\t\t\t},\r\n\t\t\t\tsymbol_in_winbar = {\r\n\t\t\t\t\t-- enable = false,\r\n\t\t\t\t},\r\n\t\t\t})\r\n\t\t\t-- Set up lspconfig.\r\n\t\t\tlocal keymap = vim.keymap\r\n\t\t\tlocal on_attach = function(client, bufnr)\r\n\t\t\t\tlocal opts = { noremap = true, silent = true, buffer = bufnr }\r\n\t\t\t\tkeymap.set(\"n\", \"gf\", \"<cmd>Lspsaga lsp_finder<CR>\", opts) -- show definition, references\r\n\t\t\t\tkeymap.set(\"n\", \"gD\", \"<Cmd>Lspsaga goto_definition<CR>\", opts) -- got to declaration\r\n\t\t\t\tkeymap.set(\"n\", \"gd\", \"<cmd>Lspsaga peek_definition<CR>\", opts) -- see definition and make edits in window\r\n\t\t\t\tkeymap.set(\"n\", \"gi\", \"<cmd>lua vim.lsp.buf.implementation()<CR>\", opts) -- go to implementation\r\n\t\t\t\tkeymap.set(\"n\", \"<leader>ca\", \"<cmd>Lspsaga code_action<CR>\", opts) -- see available code actions\r\n\t\t\t\tkeymap.set(\"n\", \"<leader>rn\", \"<cmd>Lspsaga rename<CR>\", opts) -- smart rename\r\n\t\t\t\tkeymap.set(\"n\", \"<leader>D\", \"<cmd>Lspsaga show_line_diagnostics<CR>\", opts) -- show  diagnostics for line\r\n\t\t\t\tkeymap.set(\"n\", \"<leader>d\", \"<cmd>Lspsaga show_cursor_diagnostics<CR>\", opts) -- show diagnostics for cursor\r\n\t\t\t\tkeymap.set(\"n\", \"[d\", \"<cmd>Lspsaga diagnostic_jump_prev<CR>\", opts) -- jump to previous diagnostic in buffer\r\n\t\t\t\tkeymap.set(\"n\", \"]d\", \"<cmd>Lspsaga diagnostic_jump_next<CR>\", opts) -- jump to next diagnostic in buffer\r\n\t\t\t\tkeymap.set(\"n\", \"K\", \"<cmd>Lspsaga hover_doc<CR>\", opts) -- show documentation for what is under cursor\r\n\t\t\t\tkeymap.set(\"n\", \"<leader>o\", \"<cmd>LSoutlineToggle<CR>\", opts) -- see outline on right hand side\r\n\t\t\t\tkeymap.set(\"n\", \"gr\", \"<cmd>lua vim.lsp.buf.references()<CR>\", opts)\r\n\t\t\t\tvim.keymap.set(\"n\", \"<C-n>\", \":cnext<CR>\")\r\n\t\t\t\tvim.keymap.set(\"n\", \"<C-p>\", \":cprev<CR>\")\r\n\t\t\tend\r\n\r\n\t\t\tlocal capabilities = require(\"cmp_nvim_lsp\").default_capabilities()\r\n\t\t\tlocal servers = {\r\n\t\t\t\t\"clangd\",\r\n\t\t\t\t\"tsserver\",\r\n\t\t\t\t\"marksman\",\r\n\t\t\t\t\"lua_ls\",\r\n\t\t\t\t\"html\",\r\n\t\t\t\t\"cssls\",\r\n\t\t\t\t\"pyright\",\r\n\t\t\t\t\"bashls\",\r\n\t\t\t\t\"gopls\",\r\n\t\t\t\t\"emmet_ls\",\r\n\t\t\t}\r\n\r\n\t\t\tfor _, server in ipairs(servers) do\r\n\t\t\t\trequire(\"lspconfig\")[server].setup({\r\n\t\t\t\t\tcapabilities = capabilities,\r\n\t\t\t\t\ton_attach = on_attach,\r\n\t\t\t\t})\r\n\t\t\tend\r\n\r\n\t\t\trequire(\"lspconfig\")[\"rust_analyzer\"].setup({\r\n\t\t\t\tcapabilities = capabilities,\r\n\t\t\t\ton_attach = on_attach,\r\n\t\t\t\tcmd = { \"rustup\", \"run\", \"stable\", \"rust-analyzer\" },\r\n\t\t\t})\r\n\t\t\trequire(\"lspconfig\")[\"lua_ls\"].setup({\r\n\t\t\t\tcapabilities = capabilities,\r\n\t\t\t\ton_attach = on_attach,\r\n\t\t\t\tsettings = { -- custom settings for lua\r\n\t\t\t\t\tLua = {\r\n\t\t\t\t\t\t-- make the language server recognize \"vim\" global\r\n\t\t\t\t\t\tdiagnostics = {\r\n\t\t\t\t\t\t\tglobals = { \"vim\" },\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tworkspace = {\r\n\t\t\t\t\t\t\t-- make language server aware of runtime files\r\n\t\t\t\t\t\t\tlibrary = {\r\n\t\t\t\t\t\t\t\t[vim.fn.expand(\"$VIMRUNTIME/lua\")] = true,\r\n\t\t\t\t\t\t\t\t[vim.fn.stdpath(\"config\") .. \"/lua\"] = true,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t})\r\n\t\tend,\r\n\t},\r\n\t{\r\n\t\t\"williamboman/mason-lspconfig.nvim\",\r\n\t\tdependencies = {\r\n\t\t\t\"williamboman/mason.nvim\",\r\n\t\t\t\"neovim/nvim-lspconfig\",\r\n\t\t\t\"jay-babu/mason-null-ls.nvim\",\r\n\t\t},\r\n\t\tconfig = function()\r\n\t\t\trequire(\"mason\").setup()\r\n\t\t\trequire(\"mason-lspconfig\").setup({\r\n\t\t\t\tensure_installed = { \"lua_ls\", \"rust_analyzer\", \"clangd\", \"tsserver\", \"bashls\", \"cssls\", \"emmet_ls\" },\r\n\t\t\t})\r\n\t\t\trequire(\"mason-null-ls\").setup({\r\n\t\t\t\tensure_installed = {\r\n\t\t\t\t\t\"prettier\", -- ts/js formatter\r\n\t\t\t\t\t\"gofmt\",\r\n\t\t\t\t\t\"stylua\", -- lua formatter\r\n\t\t\t\t\t\"eslint_d\", -- ts/js linter\r\n\t\t\t\t\t-- \"mypy\",\r\n\t\t\t\t\t\"ruff\",\r\n\t\t\t\t\t\"black\",\r\n\t\t\t\t\t\"clang-format\",\r\n\t\t\t\t\t\"checkmake\",\r\n\t\t\t\t},\r\n\t\t\t\t-- auto-install configured formatters & linters (with null-ls)\r\n\t\t\t\tautomatic_installation = true,\r\n\t\t\t})\r\n\t\tend,\r\n\t},\r\n\r\n\t{\r\n\t\t\"williamboman/mason.nvim\",\r\n\t\tconfig = function()\r\n\t\t\trequire(\"mason\").setup({\r\n\t\t\t\tui = {\r\n\t\t\t\t\ticons = {\r\n\t\t\t\t\t\tpackage_installed = \"✓\",\r\n\t\t\t\t\t\tpackage_pending = \"➜\",\r\n\t\t\t\t\t\tpackage_uninstalled = \"✗\",\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t\tauto_install = true,\r\n\t\t\t})\r\n\t\tend,\r\n\t},\r\n\r\n\t{\r\n\t\t\"jose-elias-alvarez/null-ls.nvim\",\r\n\t\tconfig = function()\r\n\t\t\tlocal null_ls = require(\"null-ls\")\r\n\r\n\t\t\tlocal formatting = null_ls.builtins.formatting\r\n\t\t\tlocal diagnostics = null_ls.builtins.diagnostics\r\n\t\t\tlocal augroup = vim.api.nvim_create_augroup(\"LspFormatting\", {})\r\n\r\n\t\t\tnull_ls.setup({\r\n\t\t\t\tsources = {\r\n\t\t\t\t\t--  \"formatting.prettier.with({disabled_filetypes = {}})\" (see null-ls docs)\r\n\t\t\t\t\tformatting.prettier, -- js/ts formatter\r\n\t\t\t\t\tformatting.stylua, -- lua formatter\r\n\t\t\t\t\tformatting.black, -- for python formatting\r\n\t\t\t\t\tformatting.gofmt,\r\n\t\t\t\t\t-- formatting.clang_format,\r\n\t\t\t\t\t-- diagnostics.mypy,\r\n\t\t\t\t\tdiagnostics.ruff,\r\n\t\t\t\t\tdiagnostics.eslint_d.with({ -- js/ts linter\r\n\r\n\t\t\t\t\t\tcondition = function(utils)\r\n\t\t\t\t\t\t\treturn utils.root_has_file(\".eslintrc.js\") -- change file extension if you use something else\r\n\t\t\t\t\t\tend,\r\n\t\t\t\t\t}),\r\n\t\t\t\t},\r\n\t\t\t\t-- configure format on save\r\n\t\t\t\ton_attach = function(current_client, bufnr)\r\n\t\t\t\t\tif current_client.supports_method(\"textDocument/formatting\") then\r\n\t\t\t\t\t\tvim.api.nvim_clear_autocmds({ group = augroup, buffer = bufnr })\r\n\t\t\t\t\t\tvim.api.nvim_create_autocmd(\"BufWritePre\", {\r\n\t\t\t\t\t\t\tgroup = augroup,\r\n\t\t\t\t\t\t\tbuffer = bufnr,\r\n\t\t\t\t\t\t\tcallback = function()\r\n\t\t\t\t\t\t\t\tvim.lsp.buf.format({\r\n\t\t\t\t\t\t\t\t\tfilter = function(client)\r\n\t\t\t\t\t\t\t\t\t\t--  only use null-ls for formatting instead of lsp server\r\n\t\t\t\t\t\t\t\t\t\treturn client.name == \"null-ls\"\r\n\t\t\t\t\t\t\t\t\tend,\r\n\t\t\t\t\t\t\t\t\tbufnr = bufnr,\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\tend,\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\tend\r\n\t\t\t\tend,\r\n\t\t\t})\r\n\t\tend,\r\n\t},\r\n\r\n\t-- {\r\n\t-- \t\"MunifTanjim/prettier.nvim\",\r\n\t-- \tdependencies = {\r\n\t-- \t\t\"neovim/nvim-lspconfig\",\r\n\t-- \t\t\"jose-elias-alvarez/null-ls.nvim\",\r\n\t-- \t},\r\n\t-- \tconfig = function()\r\n\t-- \t\trequire(\"prettier\").setup({\r\n\t-- \t\t\tcli_options = {\r\n\t-- \t\t\t\tarrow_parens = \"always\",\r\n\t-- \t\t\t\tbracket_spacing = true,\r\n\t-- \t\t\t\tbracket_same_line = false,\r\n\t-- \t\t\t\tembedded_language_formatting = \"auto\",\r\n\t-- \t\t\t\tend_of_line = \"lf\",\r\n\t-- \t\t\t\thtml_whitespace_sensitivity = \"css\",\r\n\t-- \t\t\t\t-- jsx_bracket_same_line = false,\r\n\t-- \t\t\t\tjsx_single_quote = false,\r\n\t-- \t\t\t\tprint_width = 80,\r\n\t-- \t\t\t\tprose_wrap = \"preserve\",\r\n\t-- \t\t\t\tquote_props = \"as-needed\",\r\n\t-- \t\t\t\tsemi = true,\r\n\t-- \t\t\t\tsingle_attribute_per_line = false,\r\n\t-- \t\t\t\tsingle_quote = false,\r\n\t-- \t\t\t\ttab_width = 4,\r\n\t-- \t\t\t\ttrailing_comma = \"es5\",\r\n\t-- \t\t\t\tuse_tabs = false,\r\n\t-- \t\t\t\tvue_indent_script_and_style = false,\r\n\t-- \t\t\t},\r\n\t-- \t\t})\r\n\t-- \tend,\r\n\t-- },\r\n\r\n\t{\r\n\t\t\"szw/vim-maximizer\",\r\n\t},\r\n\r\n\t{\r\n\t\t\"lewis6991/gitsigns.nvim\",\r\n\t\tlazy = false,\r\n\t\tdependencies = { \"nvim-lua/plenary.nvim\" },\r\n\t\tconfig = function()\r\n\t\t\trequire(\"gitsigns\").setup({\r\n\t\t\t\tsigns = {\r\n\t\t\t\t\tadd = { text = \"│\" },\r\n\t\t\t\t\tchange = { text = \"│\" },\r\n\t\t\t\t\tdelete = { text = \"_\" },\r\n\t\t\t\t\ttopdelete = { text = \"‾\" },\r\n\t\t\t\t\tchangedelete = { text = \"~\" },\r\n\t\t\t\t\tuntracked = { text = \"┆\" },\r\n\t\t\t\t},\r\n\t\t\t\tsigncolumn = true, -- Toggle with `:Gitsigns toggle_signs`\r\n\t\t\t\tnumhl = false, -- Toggle with `:Gitsigns toggle_numhl`\r\n\t\t\t\tlinehl = false, -- Toggle with `:Gitsigns toggle_linehl`\r\n\t\t\t\tword_diff = false, -- Toggle with `:Gitsigns toggle_word_diff`\r\n\t\t\t\twatch_gitdir = {\r\n\t\t\t\t\tfollow_files = true,\r\n\t\t\t\t},\r\n\t\t\t\tattach_to_untracked = true,\r\n\t\t\t\tcurrent_line_blame = false, -- Toggle with `:Gitsigns toggle_current_line_blame`\r\n\t\t\t\tcurrent_line_blame_opts = {\r\n\t\t\t\t\tvirt_text = true,\r\n\t\t\t\t\tvirt_text_pos = \"eol\", -- 'eol' | 'overlay' | 'right_align'\r\n\t\t\t\t\tdelay = 1000,\r\n\t\t\t\t\tignore_whitespace = false,\r\n\t\t\t\t\tvirt_text_priority = 100,\r\n\t\t\t\t},\r\n\t\t\t\tcurrent_line_blame_formatter = \"<author>, <author_time:%Y-%m-%d> - <summary>\",\r\n\t\t\t\tsign_priority = 6,\r\n\t\t\t\tupdate_debounce = 100,\r\n\t\t\t\tstatus_formatter = nil, -- Use default\r\n\t\t\t\tmax_file_length = 40000, -- Disable if file is longer than this (in lines)\r\n\t\t\t\tpreview_config = {\r\n\t\t\t\t\t-- Options passed to nvim_open_win\r\n\t\t\t\t\tborder = \"single\",\r\n\t\t\t\t\tstyle = \"minimal\",\r\n\t\t\t\t\trelative = \"cursor\",\r\n\t\t\t\t\trow = 0,\r\n\t\t\t\t\tcol = 1,\r\n\t\t\t\t},\r\n\t\t\t\tyadm = {\r\n\t\t\t\t\tenable = false,\r\n\t\t\t\t},\r\n\t\t\t})\r\n\t\tend,\r\n\t\tkeys = {\r\n\t\t\t{ mode = \"n\", \"<leader>gt\", \":Gitsigns toggle_deleted<CR>\", desc = \"\" },\r\n\t\t\t{ mode = \"n\", \"<leader>gn\", \":Gitsigns next_hunk<CR>\", desc = \"\" },\r\n\t\t\t{ mode = \"n\", \"<leader>gp\", \":Gitsigns prev_hunk<CR>\", desc = \"\" },\r\n\t\t\t{ mode = \"n\", \"<leader>gx\", \":Gitsigns reset_hunk<CR>\", desc = \"\" },\r\n\t\t},\r\n\t},\r\n\r\n\t{\r\n\t\t\"iamcco/markdown-preview.nvim\",\r\n\t\tcmd = { \"MarkdownPreviewToggle\", \"MarkdownPreview\", \"MarkdownPreviewStop\" },\r\n\t\tft = { \"markdown\" },\r\n\t\tbuild = function()\r\n\t\t\tvim.fn[\"mkdp#util#install\"]()\r\n\t\tend,\r\n\t},\r\n\r\n\t{\r\n\t\t\"norcalli/nvim-colorizer.lua\",\r\n\t\tconfig = function()\r\n\t\t\trequire(\"colorizer\").setup()\r\n\t\tend,\r\n\t},\r\n\r\n\t{\r\n\t\t\"jghauser/follow-md-links.nvim\",\r\n\t},\r\n\r\n\t{\r\n\t\t\"simrat39/rust-tools.nvim\",\r\n\t\tconfig = function()\r\n\t\t\trequire(\"rust-tools\").setup({})\r\n\t\tend,\r\n\t},\r\n\t{\r\n\t\t\"williamboman/mason.nvim\",\r\n\t\t\"mfussenegger/nvim-dap\",\r\n\t\t\"jay-babu/mason-nvim-dap.nvim\",\r\n\t\tconfig = function()\r\n\t\t\trequire(\"mason-nvim-dap\").setup({\r\n\t\t\t\tensure_installed = { \"python\", \"delve\" },\r\n\t\t\t})\r\n\t\tend,\r\n\t},\r\n\r\n\t{\r\n\t\t\"mfussenegger/nvim-dap\",\r\n\t\tconfig = function()\r\n\t\t\tlocal dap = require(\"dap\")\r\n\t\t\tdap.adapters.delve = {\r\n\t\t\t\ttype = \"server\",\r\n\t\t\t\tport = \"${port}\",\r\n\t\t\t\texecutable = {\r\n\t\t\t\t\tcommand = \"dlv\",\r\n\t\t\t\t\targs = { \"dap\", \"-l\", \"127.0.0.1:${port}\" },\r\n\t\t\t\t},\r\n\t\t\t}\r\n\r\n\t\t\t-- https://github.com/go-delve/delve/blob/master/Documentation/usage/dlv_dap.md\r\n\t\t\tdap.configurations.go = {\r\n\t\t\t\t{\r\n\t\t\t\t\ttype = \"delve\",\r\n\t\t\t\t\tname = \"Debug\",\r\n\t\t\t\t\trequest = \"launch\",\r\n\t\t\t\t\tprogram = \"${file}\",\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\ttype = \"delve\",\r\n\t\t\t\t\tname = \"Debug test\", -- configuration for debugging test files\r\n\t\t\t\t\trequest = \"launch\",\r\n\t\t\t\t\tmode = \"test\",\r\n\t\t\t\t\tprogram = \"${file}\",\r\n\t\t\t\t},\r\n\t\t\t\t-- works with go.mod packages and sub packages\r\n\t\t\t\t{\r\n\t\t\t\t\ttype = \"delve\",\r\n\t\t\t\t\tname = \"Debug test (go.mod)\",\r\n\t\t\t\t\trequest = \"launch\",\r\n\t\t\t\t\tmode = \"test\",\r\n\t\t\t\t\tprogram = \"./${relativeFileDirname}\",\r\n\t\t\t\t},\r\n\t\t\t}\r\n\t\t\t-- cpp\r\n\t\t\tdap.adapters.gdb = {\r\n\t\t\t\ttype = \"executable\",\r\n\t\t\t\tcommand = \"gdb\",\r\n\t\t\t\targs = { \"-i\", \"dap\" },\r\n\t\t\t}\r\n\r\n\t\t\t-- local VCL_PLUGIN = \"-env:SAL_USE_VCLPLUGIN=\"\r\n\t\t\tdap.configurations.cpp = {\r\n\t\t\t\t{\r\n\t\t\t\t\tname = \"Launch\",\r\n\t\t\t\t\ttype = \"gdb\",\r\n\t\t\t\t\trequest = \"launch\",\r\n\t\t\t\t\tprogram = function()\r\n\t\t\t\t\t\tif string.find(vim.fn.expand(\"%:p\"), \"libreoffice\") then\r\n\t\t\t\t\t\t\treturn \"/home/sahil/repos/libreoffice/instdir/program/soffice.bin\"\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\treturn vim.fn.input(\"Path to executable: \", vim.fn.getcwd() .. \"/\", \"file\")\r\n\t\t\t\t\tend,\r\n\r\n\t\t\t\t\t-- args = function()\r\n\t\t\t\t\t-- \treturn VCL_PLUGIN .. vim.fn.input(\"VCL: \")\r\n\t\t\t\t\t-- end,\r\n\r\n\t\t\t\t\tcwd = \"${workspaceFolder}\",\r\n\r\n\t\t\t\t\tstopAtBeginningOfMainSubprogram = false,\r\n\t\t\t\t},\r\n\t\t\t}\r\n\t\t\tdap.configurations.c = {\r\n\t\t\t\t{\r\n\t\t\t\t\tname = \"Launch\",\r\n\t\t\t\t\ttype = \"gdb\",\r\n\t\t\t\t\trequest = \"launch\",\r\n\t\t\t\t\tprogram = function()\r\n\t\t\t\t\t\treturn vim.fn.input(\"Path to executable: \", vim.fn.getcwd() .. \"/\", \"file\")\r\n\t\t\t\t\tend,\r\n\t\t\t\t\tcwd = \"${workspaceFolder}\",\r\n\t\t\t\t\tstopAtBeginningOfMainSubprogram = false,\r\n\t\t\t\t},\r\n\t\t\t}\r\n\t\tend,\r\n\t},\r\n\r\n\t{\r\n\t\t\"rcarriga/nvim-dap-ui\",\r\n\t\tdependencies = {\r\n\t\t\t\"mfussenegger/nvim-dap\",\r\n\t\t\t\"nvim-neotest/nvim-nio\",\r\n\t\t},\r\n\t\tconfig = function()\r\n\t\t\trequire(\"dapui\").setup()\r\n\t\t\tlocal dap, dapui = require(\"dap\"), require(\"dapui\")\r\n\t\t\tdap.listeners.before.attach.dapui_config = function()\r\n\t\t\t\tdapui.open()\r\n\t\t\tend\r\n\t\t\tdap.listeners.before.launch.dapui_config = function()\r\n\t\t\t\tdapui.open()\r\n\t\t\tend\r\n\t\t\tdap.listeners.before.event_terminated.dapui_config = function()\r\n\t\t\t\tdapui.close()\r\n\t\t\tend\r\n\t\t\tdap.listeners.before.event_exited.dapui_config = function()\r\n\t\t\t\tdapui.close()\r\n\t\t\tend\r\n\t\tend,\r\n\t},\r\n\r\n\t{\r\n\r\n\t\t\"theHamsta/nvim-dap-virtual-text\",\r\n\t\tconfig = function()\r\n\t\t\trequire(\"nvim-dap-virtual-text\").setup({\r\n\t\t\t\tenabled = true, -- enable this plugin (the default)\r\n\t\t\t\tenabled_commands = true, -- create commands DapVirtualTextEnable, DapVirtualTextDisable, DapVirtualTextToggle, (DapVirtualTextForceRefresh for refreshing when debug adapter did not notify its termination)\r\n\t\t\t\thighlight_changed_variables = true, -- highlight changed values with NvimDapVirtualTextChanged, else always NvimDapVirtualText\r\n\t\t\t\thighlight_new_as_changed = false, -- highlight new variables in the same way as changed variables (if highlight_changed_variables)\r\n\t\t\t\tshow_stop_reason = true, -- show stop reason when stopped for exceptions\r\n\t\t\t\tcommented = false, -- prefix virtual text with comment string\r\n\t\t\t\tonly_first_definition = true, -- only show virtual text at first definition (if there are multiple)\r\n\t\t\t\tall_references = false, -- show virtual text on all all references of the variable (not only definitions)\r\n\t\t\t\tclear_on_continue = false, -- clear virtual text on \"continue\" (might cause flickering when stepping)\r\n\t\t\t\t--- A callback that determines how a variable is displayed or whether it should be omitted\r\n\t\t\t\t--- @param variable Variable https://microsoft.github.io/debug-adapter-protocol/specification#Types_Variable\r\n\t\t\t\t--- @param buf number\r\n\t\t\t\t--- @param stackframe dap.StackFrame https://microsoft.github.io/debug-adapter-protocol/specification#Types_StackFrame\r\n\t\t\t\t--- @param node userdata tree-sitter node identified as variable definition of reference (see `:h tsnode`)\r\n\t\t\t\t--- @param options nvim_dap_virtual_text_options Current options for nvim-dap-virtual-text\r\n\t\t\t\t--- @return string|nil A text how the virtual text should be displayed or nil, if this variable shouldn't be displayed\r\n\t\t\t\tdisplay_callback = function(variable, buf, stackframe, node, options)\r\n\t\t\t\t\tif options.virt_text_pos == \"inline\" then\r\n\t\t\t\t\t\treturn \" = \" .. variable.value\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\treturn variable.name .. \" = \" .. variable.value\r\n\t\t\t\t\tend\r\n\t\t\t\tend,\r\n\t\t\t\t-- position of virtual text, see `:h nvim_buf_set_extmark()`, default tries to inline the virtual text. Use 'eol' to set to end of line\r\n\t\t\t\tvirt_text_pos = vim.fn.has(\"nvim-0.10\") == 1 and \"inline\" or \"eol\",\r\n\r\n\t\t\t\t-- experimental features:\r\n\t\t\t\tall_frames = false, -- show virtual text for all stack frames not only current. Only works for debugpy on my machine.\r\n\t\t\t\tvirt_lines = false, -- show virtual lines instead of virtual text (will flicker!)\r\n\t\t\t\tvirt_text_win_col = nil, -- position the virtual text at a fixed window column (starting from the first text column) ,\r\n\t\t\t\t-- e.g. 80 to position at column 80, see `:h nvim_buf_set_extmark()`\r\n\t\t\t})\r\n\t\tend,\r\n\t},\r\n\r\n\t{\r\n\t\t\"nvim-lualine/lualine.nvim\",\r\n\t\tdependencies = { \"nvim-tree/nvim-web-devicons\" },\r\n\t\tconfig = function()\r\n\t\t\trequire(\"lualine\").setup({\r\n\t\t\t\toptions = {\r\n\t\t\t\t\tsection_separators = { left = \"|\", right = \"|\" },\r\n\t\t\t\t\tcomponent_separators = { left = \"|\", right = \"|\" },\r\n\t\t\t\t},\r\n\t\t\t})\r\n\t\tend,\r\n\t},\r\n\r\n\t{\r\n\t\t\"AckslD/nvim-FeMaco.lua\",\r\n\t\tconfig = function()\r\n\t\t\trequire(\"femaco\").setup({})\r\n\t\tend,\r\n\t},\r\n\r\n\t{\r\n\t\t\"NeogitOrg/neogit\",\r\n\t\tdependencies = {\r\n\t\t\t\"nvim-lua/plenary.nvim\", -- required\r\n\t\t\t\"sindrets/diffview.nvim\", -- optional - Diff integration\r\n\r\n\t\t\t-- Only one of these is needed, not both.\r\n\t\t\t\"nvim-telescope/telescope.nvim\", -- optional\r\n\t\t\t\"ibhagwan/fzf-lua\", -- optional\r\n\t\t},\r\n\t\tconfig = function()\r\n\t\t\trequire(\"neogit\").setup({})\r\n\t\tend,\r\n\t},\r\n})\r\n\r\n-- local cpp_formating_group = vim.api.nvim_create_augroup(\"CppFormatingWithClangd\", { clear = true })\r\n-- vim.api.nvim_create_autocmd(\"FileType\", {\r\n--   pattern = \"cpp\",\r\n--   group = cpp_formating_group,\r\n--   callback = function(args)\r\n--     vim.api.nvim_create_autocmd(\"BufWritePre\", {\r\n--       buffer = args.buf,\r\n--       group = cpp_formating_group,\r\n--       callback = function()\r\n--         if not string.find(vim.fn.expand(\"%:p\"), \"/home/sahil/repos/libreoffice/\") then\r\n--           vim.lsp.buf.format({ async = false, bufnr = args.buf })\r\n--         end\r\n--       end,\r\n--     })\r\n--   end,\r\n-- })\r\n\r\n-- local indent_blankline_group = vim.api.nvim_create_augroup(\"DisableDiagnosticsForGoFiles\", { clear = true })\r\n-- vim.api.nvim_create_autocmd(\"FileType\", {\r\n-- \tpattern = \"go\",\r\n-- \tgroup = indent_blankline_group,\r\n-- \tcallback = function(args)\r\n-- \t\tvim.api.nvim_create_autocmd(\"BufEnter\", {\r\n-- \t\t\tbuffer = args.buf,\r\n-- \t\t\tgroup = indent_blankline_group,\r\n-- \t\t\tcallback = function()\r\n-- \t\t\t\tvim.cmd([[ lua vim.diagnostic.disable() ]])\r\n-- \t\t\tend,\r\n-- \t\t})\r\n-- \tend,\r\n-- })\r\n\r\n-- Set tabstop to 2 for Lua files\r\nvim.cmd([[\r\naugroup LuaTabStop\r\nautocmd!\r\nautocmd FileType lua setlocal tabstop=2\r\nautocmd FileType lua setlocal shiftwidth=2\r\naugroup END\r\n]])\r\n\r\n-- Set autoread\r\nvim.cmd(\"set autoread\")\r\nvim.cmd(\"set laststatus=3\")\r\n\r\n-- Define an autocommand for CursorHold and CursorHoldI events\r\nvim.cmd([[\r\naugroup AutoRead\r\nautocmd!\r\nautocmd CursorHold,CursorHoldI * checktime\r\naugroup END\r\n]])\r\n```\r\nHere's the config to test",
            "created_at": "2024-03-23T21:59:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/28003#issuecomment-2016613537",
            "id": 2016613537,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28003",
            "node_id": "IC_kwDOAPphoM54MxSh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2016613537/reactions"
            },
            "updated_at": "2024-03-23T21:59:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2016613537",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/151525930?v=4",
                "events_url": "https://api.github.com/users/mesahilgautam/events{/privacy}",
                "followers_url": "https://api.github.com/users/mesahilgautam/followers",
                "following_url": "https://api.github.com/users/mesahilgautam/following{/other_user}",
                "gists_url": "https://api.github.com/users/mesahilgautam/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mesahilgautam",
                "id": 151525930,
                "login": "mesahilgautam",
                "node_id": "U_kgDOCQgaKg",
                "organizations_url": "https://api.github.com/users/mesahilgautam/orgs",
                "received_events_url": "https://api.github.com/users/mesahilgautam/received_events",
                "repos_url": "https://api.github.com/users/mesahilgautam/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mesahilgautam/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mesahilgautam/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mesahilgautam"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I'm sorry, but unless you can reproduce this with `nvim --clean`, this is to be assumed a problem with lspsaga, not Neovim.",
            "created_at": "2024-03-23T22:00:24Z",
            "html_url": "https://github.com/neovim/neovim/issues/28003#issuecomment-2016613639",
            "id": 2016613639,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28003",
            "node_id": "IC_kwDOAPphoM54MxUH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2016613639/reactions"
            },
            "updated_at": "2024-03-23T22:00:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2016613639",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "NONE",
            "body": "@clason And nvim --clean doesn't have a floating popup window like I have. \r\n:)",
            "created_at": "2024-03-23T22:03:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/28003#issuecomment-2016614100",
            "id": 2016614100,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28003",
            "node_id": "IC_kwDOAPphoM54MxbU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2016614100/reactions"
            },
            "updated_at": "2024-03-23T22:03:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2016614100",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/151525930?v=4",
                "events_url": "https://api.github.com/users/mesahilgautam/events{/privacy}",
                "followers_url": "https://api.github.com/users/mesahilgautam/followers",
                "following_url": "https://api.github.com/users/mesahilgautam/following{/other_user}",
                "gists_url": "https://api.github.com/users/mesahilgautam/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mesahilgautam",
                "id": 151525930,
                "login": "mesahilgautam",
                "node_id": "U_kgDOCQgaKg",
                "organizations_url": "https://api.github.com/users/mesahilgautam/orgs",
                "received_events_url": "https://api.github.com/users/mesahilgautam/received_events",
                "repos_url": "https://api.github.com/users/mesahilgautam/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mesahilgautam/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mesahilgautam/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mesahilgautam"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Well, yes, that's my point. Your issue is with lspsaga, not Neovim (unless you can create a minimal reproducing example without big plugins and a ~1000 line config).",
            "created_at": "2024-03-23T23:11:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/28003#issuecomment-2016627072",
            "id": 2016627072,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28003",
            "node_id": "IC_kwDOAPphoM54M0mA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2016627072/reactions"
            },
            "updated_at": "2024-03-23T23:11:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2016627072",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        }
    ],
    "comments": 4,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/28003/comments",
    "created_at": "2024-03-23T21:57:02Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/28003/events",
    "html_url": "https://github.com/neovim/neovim/issues/28003",
    "id": 2204063948,
    "labels": [
        {
            "color": "f9d0c4",
            "default": true,
            "description": "issues reporting wrong behavior",
            "id": 77997474,
            "name": "bug",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3NA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug"
        },
        {
            "color": "FBCA04",
            "default": false,
            "description": "We need minimal steps to reproduce the issue",
            "id": 298863445,
            "name": "needs:repro",
            "node_id": "MDU6TGFiZWwyOTg4NjM0NDU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/needs:repro"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/28003/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6DX1jM",
    "number": 28003,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/28003/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/28003/timeline",
    "title": "Cursor returns to the left-most split, after the lsp popup closes",
    "updated_at": "2024-03-23T23:11:15Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/28003",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/151525930?v=4",
        "events_url": "https://api.github.com/users/mesahilgautam/events{/privacy}",
        "followers_url": "https://api.github.com/users/mesahilgautam/followers",
        "following_url": "https://api.github.com/users/mesahilgautam/following{/other_user}",
        "gists_url": "https://api.github.com/users/mesahilgautam/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/mesahilgautam",
        "id": 151525930,
        "login": "mesahilgautam",
        "node_id": "U_kgDOCQgaKg",
        "organizations_url": "https://api.github.com/users/mesahilgautam/orgs",
        "received_events_url": "https://api.github.com/users/mesahilgautam/received_events",
        "repos_url": "https://api.github.com/users/mesahilgautam/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/mesahilgautam/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mesahilgautam/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/mesahilgautam"
    }
}