{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Neovim version (nvim -v)\n\n0.9.0-dev\n\n### Vim (not Nvim) behaves the same?\n\nyes\n\n### Operating system/version\n\nmacOS 12.3\n\n### Terminal name/version\n\niTerm2\n\n### $TERM environment variable\n\nxterm-256color\n\n### Installation\n\nsource\n\n### How to reproduce the issue\n\n```\r\nnvim --clean minimal.lua\r\n```\r\n\r\nminimal.lua\r\n```\r\nfunction disable_diagnostics(client)\r\n  if client.server_capabilities.diagnosticProvider then\r\n    client.server_capabilities.diagnosticProvider = false\r\n  end\r\n  if client.supports_method(\"textDocument/diagnostic\") then\r\n    print('client supports publish diagnostics')\r\n   -- how to disable diagnostic\r\n  end\r\nend\r\n```\n\n### Expected behavior\n\ndisable diagnostic from lsp server\n\n### Actual behavior\n\ndiagnostics is still shown. \r\nSo now I can only hidden all diagnostic by calling `vim.diagnostic.hide()`, or implementing a very complicated function to disable the specific LSP source to send me diagnostic. At least, I searched the forum and community, but I can't find a way to achieve the objective.\r\n\r\n\r\n#### My thoughts:\r\nYou refactored `vim.lsp.diagnostic` to `vim.diagnostic` in this [pull](https://github.com/neovim/neovim/pull/15585), but I think it has caused some more confusion because as with other Language Server features (formatting, codeAction, codelens, etc.) that are in LSP Protocol, diagnostic should not make its own specific way out, we need to stick to the protocol to make fewer confusions. If some plugins want to show diagnostics, they can either use their own APIs or follow the LSP protocol. \r\n",
    "closed_at": "2022-10-20T10:00:12Z",
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "I guess diagnostic also takes CPU time like other analysis tools, but the current API can only do `vim.diagnostic.set()`, `vim.diagnostic.get()` or `vim.diagnostic.show()`, none of them provide a clear way to disable some source to do linting job on the current buffer. Pulling it out of the LSP protocol and implementing a unique API (you think it's more general) isn't a good idea considering the confusion it has caused.",
            "created_at": "2022-10-20T03:58:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/20745#issuecomment-1284888956",
            "id": 1284888956,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20745",
            "node_id": "IC_kwDOAPphoM5Mldl8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1284888956/reactions"
            },
            "updated_at": "2022-10-20T03:58:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1284888956",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/49930785?v=4",
                "events_url": "https://api.github.com/users/winkee01/events{/privacy}",
                "followers_url": "https://api.github.com/users/winkee01/followers",
                "following_url": "https://api.github.com/users/winkee01/following{/other_user}",
                "gists_url": "https://api.github.com/users/winkee01/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/winkee01",
                "id": 49930785,
                "login": "winkee01",
                "node_id": "MDQ6VXNlcjQ5OTMwNzg1",
                "organizations_url": "https://api.github.com/users/winkee01/orgs",
                "received_events_url": "https://api.github.com/users/winkee01/received_events",
                "repos_url": "https://api.github.com/users/winkee01/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/winkee01/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/winkee01/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/winkee01"
            }
        },
        {
            "author_association": "NONE",
            "body": "A common way to use `vim.diagnostic` is In my setup() function:\r\n```\r\nvim.api.nvim_create_autocmd('FileType', { pattern = filetypes, group = lsp_group, callback = lsp.setup })\r\n```\r\n\r\nI call this:\r\n```\r\nvim.api.nvim_create_autocmd({ 'CursorHold', 'CursorHoldI' }, {\r\n    buffer = 0,\r\n    callback = lsp.show_diagnostics,\r\n  })\r\n\r\nfunction lsp.show_diagnostics()\r\n  vim.schedule(function()\r\n    local line = vim.api.nvim_win_get_cursor(0)[1] - 1\r\n    local bufnr = vim.api.nvim_get_current_buf()\r\n    local diagnostics = vim.diagnostic.get(bufnr, { lnum = line })\r\n    vim.diagnostic.show(diagnostic_ns, bufnr, diagnostics, { virtual_text = true })\r\n  end)\r\nend\r\n```\r\n\r\nAs you can see, there is no way to do customizations on any diagnostic source. If I want to filter out the diagnostic messages from some specific source, I have to do logic that could be overly complicated, something might be like:\r\n\r\n```\r\nvim.lsp.handlers['textDocument/publishDiagnostics'] = vim.lsp.with(\r\n  function(_, params, ctx, config)\r\n    filter(params.diagnostics, filter_diagnostics)\r\n    vim.lsp.diagnostic.on_publish_diagnostics(_, params, ctx, config) -- vim.lsp.diagnostic is deprecated!\r\n  end,\r\n  {}\r\n  -- pcall(vim.diagnostic.setloclist, { open = false })\r\n)\r\n``` \r\n\r\nand I come back to `vim.lsp.diagnostic` stuff, it's still in lsp realm.\r\n\r\nIf I do something like this (just like I disable formatting capability for some LSP servers):\r\n\r\n```\r\nfunction disable_diagnostics(client)\r\n  if client.server_capabilities.diagnosticProvider then\r\n    print(\"server supports diagnostics\")\r\n    client.server_capabilities.diagnosticProvider = false\r\n  end\r\n  if client.supports_method(\"textDocument/diagnostic\") then\r\n    print('client supports publish diagnostics')\r\n  end\r\nend\r\n```\r\n\r\nThere is no effect ðŸ˜­ \r\n\r\nsome guy mentions in the forum that below code can work:\r\n\r\n```\r\nvim.lsp.handlers[\"textDocument/publishDiagnostics\"] = function() end\r\n```\r\n\r\nBut it turns out not working, also it disables all lsp sources, still making it impossible to disable a specific souce.\r\n\r\n",
            "created_at": "2022-10-20T04:08:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/20745#issuecomment-1284895291",
            "id": 1284895291,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20745",
            "node_id": "IC_kwDOAPphoM5MlfI7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1284895291/reactions"
            },
            "updated_at": "2022-10-20T04:11:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1284895291",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/49930785?v=4",
                "events_url": "https://api.github.com/users/winkee01/events{/privacy}",
                "followers_url": "https://api.github.com/users/winkee01/followers",
                "following_url": "https://api.github.com/users/winkee01/following{/other_user}",
                "gists_url": "https://api.github.com/users/winkee01/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/winkee01",
                "id": 49930785,
                "login": "winkee01",
                "node_id": "MDQ6VXNlcjQ5OTMwNzg1",
                "organizations_url": "https://api.github.com/users/winkee01/orgs",
                "received_events_url": "https://api.github.com/users/winkee01/received_events",
                "repos_url": "https://api.github.com/users/winkee01/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/winkee01/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/winkee01/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/winkee01"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "This is already possible.\r\n\r\nYou can override handlers per client, so this should be enough:\r\n```lua\r\nclient.handlers[\"textDocument/publishDiagnostics\"] = function(...)\r\n    local result = select(2, ...)\r\n    result.diagnostics = {}\r\nend\r\n```\r\nSee https://github.com/jose-elias-alvarez/nvim-lsp-ts-utils/blob/main/lua/nvim-lsp-ts-utils/client.lua#L47-L110 for a filter example.\r\n\r\nAlso, `vim.diagnostic.enable` (and disable) accepts a `namespace` parameter, so you can toggle sources on the fly with\r\n```lua\r\nlocal client = vim.lsp.get_active_clients({ name = 'tsserver' })[1]\r\nlocal ns = vim.lsp.diagnostic.get_namespace(client.id)\r\nvim.diagnostic.disable(nil, ns)\r\n```\r\n\r\n---------\r\n\r\nWe don't have control on whether a language server send/publish diagnostics or not (aside from setting some [flags](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#publishDiagnosticsClientCapabilities)); that's the server's responsibility which may be exposed as an option. We don't **pull** diagnostics (a [recent addition](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_pullDiagnostics) to the spec).\r\n\r\nSee https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_publishDiagnostics",
            "created_at": "2022-10-20T09:01:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/20745#issuecomment-1285183325",
            "id": 1285183325,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20745",
            "node_id": "IC_kwDOAPphoM5Mmldd",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1285183325/reactions"
            },
            "updated_at": "2022-10-20T09:15:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1285183325",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/109605931?v=4",
                "events_url": "https://api.github.com/users/lvimuser/events{/privacy}",
                "followers_url": "https://api.github.com/users/lvimuser/followers",
                "following_url": "https://api.github.com/users/lvimuser/following{/other_user}",
                "gists_url": "https://api.github.com/users/lvimuser/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lvimuser",
                "id": 109605931,
                "login": "lvimuser",
                "node_id": "U_kgDOBoh0Kw",
                "organizations_url": "https://api.github.com/users/lvimuser/orgs",
                "received_events_url": "https://api.github.com/users/lvimuser/received_events",
                "repos_url": "https://api.github.com/users/lvimuser/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lvimuser/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lvimuser/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lvimuser"
            }
        },
        {
            "author_association": "NONE",
            "body": "Thanks for the reference, as I said, the filtering stuff could be overly complicated and not clear enough. Simply to put, diagnostic is a feature in LSP Protocol, and deserves a simple way for the client to disable or enable, just like how we disable a client's formatting capability using a simple statement `client.server_capabilities.formattingProvider = false`.\r\n\r\n\r\n> We don't have control on whether a language server send/publish diagnostics or not (aside from setting some [flags](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#publishDiagnosticsClientCapabilities)); that's the server's responsibility which may be exposed as an option. We don't **pull** diagnostics (a [recent addition](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_pullDiagnostics) to the spec).\r\n> \r\n> See https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_publishDiagnostics\r\n\r\n",
            "created_at": "2022-10-20T09:21:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/20745#issuecomment-1285211657",
            "id": 1285211657,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20745",
            "node_id": "IC_kwDOAPphoM5MmsYJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1285211657/reactions"
            },
            "updated_at": "2022-10-20T09:21:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1285211657",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/49930785?v=4",
                "events_url": "https://api.github.com/users/winkee01/events{/privacy}",
                "followers_url": "https://api.github.com/users/winkee01/followers",
                "following_url": "https://api.github.com/users/winkee01/following{/other_user}",
                "gists_url": "https://api.github.com/users/winkee01/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/winkee01",
                "id": 49930785,
                "login": "winkee01",
                "node_id": "MDQ6VXNlcjQ5OTMwNzg1",
                "organizations_url": "https://api.github.com/users/winkee01/orgs",
                "received_events_url": "https://api.github.com/users/winkee01/received_events",
                "repos_url": "https://api.github.com/users/winkee01/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/winkee01/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/winkee01/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/winkee01"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Simply to put, diagnostic is a feature in LSP Protocol, and deserves a simple way for the client to disable or enable\r\n\r\nThen you should tell Microsoft that.\r\n\r\n> just like how we disable a client's formatting capability using a simple statement `client.server_capabilities.formattingProvider = false`.\r\n\r\nFirst, that's a hack/workaround, which is not recommended anymore because we have a better way to handle multi client formatting; this doesn't make sense for a single client because you can simply not call `format`. Again we may **request** a `format` from the server. We **can't/don't** request or pull diagnostics.\r\n\r\nIf you don't want neovim to 'process' diagnostics, override the handlers like shown. However, most of it happens server side, so what you're really _saving_ is https://github.com/neovim/neovim/blob/master/runtime/lua/vim/lsp/diagnostic.lua#L182-L207 and https://github.com/neovim/neovim/blob/master/runtime/lua/vim/diagnostic.lua#L285-L297 (doesn't seem like much 'CPU time' to me).\r\n\r\nThat's why it should be a option exposed by the language server or whatever plugin is using the `vim.diagnostic` interface.\r\n(fsautocomplete has a `Linter` flag, jsonls has a `validate.enable` flag, pyright has `python.analysis.diagnosticMode`, and so on).\r\n\r\n>  the filtering stuff could be overly complicated and not clear enough.\r\n\r\nMaybe. You receive a bunch of diagnostics, then you return the ones you want. What's the interface you're expecting?\r\n\r\nDo note that some servers also expose a filter option, eg tsserver has `diagnostics.ignoredCodes`, gopls exposes multiple levels of `analyses`.",
            "created_at": "2022-10-20T09:46:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/20745#issuecomment-1285243293",
            "id": 1285243293,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20745",
            "node_id": "IC_kwDOAPphoM5Mm0Gd",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 1,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1285243293/reactions"
            },
            "updated_at": "2022-10-20T09:49:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1285243293",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/109605931?v=4",
                "events_url": "https://api.github.com/users/lvimuser/events{/privacy}",
                "followers_url": "https://api.github.com/users/lvimuser/followers",
                "following_url": "https://api.github.com/users/lvimuser/following{/other_user}",
                "gists_url": "https://api.github.com/users/lvimuser/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lvimuser",
                "id": 109605931,
                "login": "lvimuser",
                "node_id": "U_kgDOBoh0Kw",
                "organizations_url": "https://api.github.com/users/lvimuser/orgs",
                "received_events_url": "https://api.github.com/users/lvimuser/received_events",
                "repos_url": "https://api.github.com/users/lvimuser/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lvimuser/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lvimuser/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lvimuser"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> diagnostic is a feature in LSP Protocol, and deserves a simple way for the client to disable or enable, just like how we disable a client's formatting capability using a simple statement `client.server_capabilities.formattingProvider = false`\r\n\r\nYou're asking for \"easy\", not \"simple\". The current approach is simple. Customizing every little bit of behavior is not a simple request, and making it easy complicates documentation, implementation, and the interface.",
            "created_at": "2022-10-20T10:00:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/20745#issuecomment-1285260104",
            "id": 1285260104,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20745",
            "node_id": "IC_kwDOAPphoM5Mm4NI",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1285260104/reactions"
            },
            "updated_at": "2022-10-20T10:00:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1285260104",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "NONE",
            "body": "BTW, what's the better way to handle multi-client formatting? currently, I simply set its capability to false.\r\n> First, that's a hack/workaround, which is not recommended anymore because we have a better way to handle multi client formatting; this doesn't make sense for a single client because you can simply not call format. Again we may request a format from the server. We can't/don't request or pull diagnostics.",
            "created_at": "2022-10-20T10:31:29Z",
            "html_url": "https://github.com/neovim/neovim/issues/20745#issuecomment-1285304730",
            "id": 1285304730,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20745",
            "node_id": "IC_kwDOAPphoM5MnDGa",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1285304730/reactions"
            },
            "updated_at": "2022-10-20T10:31:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1285304730",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/49930785?v=4",
                "events_url": "https://api.github.com/users/winkee01/events{/privacy}",
                "followers_url": "https://api.github.com/users/winkee01/followers",
                "following_url": "https://api.github.com/users/winkee01/following{/other_user}",
                "gists_url": "https://api.github.com/users/winkee01/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/winkee01",
                "id": 49930785,
                "login": "winkee01",
                "node_id": "MDQ6VXNlcjQ5OTMwNzg1",
                "organizations_url": "https://api.github.com/users/winkee01/orgs",
                "received_events_url": "https://api.github.com/users/winkee01/received_events",
                "repos_url": "https://api.github.com/users/winkee01/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/winkee01/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/winkee01/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/winkee01"
            }
        },
        {
            "author_association": "MEMBER",
            "body": " get all clients in the buffer. Find the client id you need to format or client name pass to `vim.lsp.buf.format` in `BufWritePre`   cb .  I'm assuming that when you configure multiple servers for the same file type, you explicitly know which client to use for formatting",
            "created_at": "2022-10-20T10:59:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/20745#issuecomment-1285332396",
            "id": 1285332396,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20745",
            "node_id": "IC_kwDOAPphoM5MnJ2s",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1285332396/reactions"
            },
            "updated_at": "2022-10-20T10:59:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1285332396",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            }
        },
        {
            "author_association": "NONE",
            "body": "> get all clients in the buffer. Find the client id you need to format or client name pass to `vim.lsp.buf.format` in `BufWritePre` cb . I'm assuming that when you configure multiple servers for the same file type, you explicitly know which client to use for formatting\r\n\r\nHiï¼ŒI guess you mean this:\r\n\r\n```\r\nvim.lsp.buf.format({\r\n        bufnr = bufnr,\r\n        filter = function(client)\r\n            return client.name == \"stylua\"\r\n        end\r\n    })\r\n```",
            "created_at": "2022-10-20T11:08:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/20745#issuecomment-1285341289",
            "id": 1285341289,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20745",
            "node_id": "IC_kwDOAPphoM5MnMBp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1285341289/reactions"
            },
            "updated_at": "2022-10-20T11:08:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1285341289",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/49930785?v=4",
                "events_url": "https://api.github.com/users/winkee01/events{/privacy}",
                "followers_url": "https://api.github.com/users/winkee01/followers",
                "following_url": "https://api.github.com/users/winkee01/following{/other_user}",
                "gists_url": "https://api.github.com/users/winkee01/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/winkee01",
                "id": 49930785,
                "login": "winkee01",
                "node_id": "MDQ6VXNlcjQ5OTMwNzg1",
                "organizations_url": "https://api.github.com/users/winkee01/orgs",
                "received_events_url": "https://api.github.com/users/winkee01/received_events",
                "repos_url": "https://api.github.com/users/winkee01/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/winkee01/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/winkee01/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/winkee01"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "`vim.lsp.buf.format( { name = 'client name' or id = 'client id'})` . `stylua` is a format tool not server. for me I use `vim.loop.new_spawn`  https://github.com/glepnir/nvim/blob/main/lua/internal/formatter.lua",
            "created_at": "2022-10-20T11:23:54Z",
            "html_url": "https://github.com/neovim/neovim/issues/20745#issuecomment-1285357922",
            "id": 1285357922,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20745",
            "node_id": "IC_kwDOAPphoM5MnQFi",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1285357922/reactions"
            },
            "updated_at": "2022-10-20T11:23:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1285357922",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            }
        },
        {
            "author_association": "NONE",
            "body": "@glepnir Great, that's classy, I need more time to digest. Thanks!",
            "created_at": "2022-10-20T12:30:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/20745#issuecomment-1285463331",
            "id": 1285463331,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20745",
            "node_id": "IC_kwDOAPphoM5Mnp0j",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 1,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1285463331/reactions"
            },
            "updated_at": "2022-10-20T12:30:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1285463331",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/49930785?v=4",
                "events_url": "https://api.github.com/users/winkee01/events{/privacy}",
                "followers_url": "https://api.github.com/users/winkee01/followers",
                "following_url": "https://api.github.com/users/winkee01/following{/other_user}",
                "gists_url": "https://api.github.com/users/winkee01/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/winkee01",
                "id": 49930785,
                "login": "winkee01",
                "node_id": "MDQ6VXNlcjQ5OTMwNzg1",
                "organizations_url": "https://api.github.com/users/winkee01/orgs",
                "received_events_url": "https://api.github.com/users/winkee01/received_events",
                "repos_url": "https://api.github.com/users/winkee01/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/winkee01/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/winkee01/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/winkee01"
            }
        },
        {
            "author_association": "NONE",
            "body": "@lvimuser hello, do you know when did neovim call `vim.diagnostic.show()`? the diagnostics are shown by default (which means neovim call `vim.diagnostic.show()` at some point of time, maybe as a callback. ",
            "created_at": "2022-10-20T23:59:18Z",
            "html_url": "https://github.com/neovim/neovim/issues/20745#issuecomment-1286289617",
            "id": 1286289617,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20745",
            "node_id": "IC_kwDOAPphoM5MqzjR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1286289617/reactions"
            },
            "updated_at": "2022-10-20T23:59:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1286289617",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/49930785?v=4",
                "events_url": "https://api.github.com/users/winkee01/events{/privacy}",
                "followers_url": "https://api.github.com/users/winkee01/followers",
                "following_url": "https://api.github.com/users/winkee01/following{/other_user}",
                "gists_url": "https://api.github.com/users/winkee01/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/winkee01",
                "id": 49930785,
                "login": "winkee01",
                "node_id": "MDQ6VXNlcjQ5OTMwNzg1",
                "organizations_url": "https://api.github.com/users/winkee01/orgs",
                "received_events_url": "https://api.github.com/users/winkee01/received_events",
                "repos_url": "https://api.github.com/users/winkee01/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/winkee01/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/winkee01/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/winkee01"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Also, `vim.diagnostic.enable` (and disable) accepts a `namespace` parameter, so you can toggle sources on the fly with\r\n> \r\n> ```lua\r\n> local client = vim.lsp.get_active_clients({ name = 'tsserver' })[1]\r\n> local ns = vim.lsp.diagnostic.get_namespace(client.id)\r\n> vim.diagnostic.disable(nil, ns)\r\n> ```\r\n\r\nHi, I tested `vim.diagnostic.disable(nil, ns)`, it looks like there are problems with it. Here is my result:\r\n![image](https://user-images.githubusercontent.com/49930785/197086277-e1682bba-d274-4336-8057-e0ed9d5f505b.png)\r\n\r\nI tried `vim.diagnostic.reset(ns, nil)` as the Neovim's doc says it will remove all diagnostics but actually it does not have effect.\r\n\r\n\r\n",
            "created_at": "2022-10-21T00:53:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/20745#issuecomment-1286322041",
            "id": 1286322041,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20745",
            "node_id": "IC_kwDOAPphoM5Mq7d5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1286322041/reactions"
            },
            "updated_at": "2022-10-21T00:53:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1286322041",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/49930785?v=4",
                "events_url": "https://api.github.com/users/winkee01/events{/privacy}",
                "followers_url": "https://api.github.com/users/winkee01/followers",
                "following_url": "https://api.github.com/users/winkee01/following{/other_user}",
                "gists_url": "https://api.github.com/users/winkee01/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/winkee01",
                "id": 49930785,
                "login": "winkee01",
                "node_id": "MDQ6VXNlcjQ5OTMwNzg1",
                "organizations_url": "https://api.github.com/users/winkee01/orgs",
                "received_events_url": "https://api.github.com/users/winkee01/received_events",
                "repos_url": "https://api.github.com/users/winkee01/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/winkee01/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/winkee01/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/winkee01"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "it still in diagnostic cache. so the `stl` still can get the result from it .",
            "created_at": "2022-10-21T06:35:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/20745#issuecomment-1286521743",
            "id": 1286521743,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20745",
            "node_id": "IC_kwDOAPphoM5MrsOP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1286521743/reactions"
            },
            "updated_at": "2022-10-21T06:35:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1286521743",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            }
        },
        {
            "author_association": "NONE",
            "body": "@glepnir thank you, now I figured it out after reading its source code and debugging.  I realized that I just have to rewrite the diagnostic handler and filter out all diagnostics that I don't want. cool!",
            "created_at": "2022-10-21T06:51:20Z",
            "html_url": "https://github.com/neovim/neovim/issues/20745#issuecomment-1286534068",
            "id": 1286534068,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20745",
            "node_id": "IC_kwDOAPphoM5MrvO0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1286534068/reactions"
            },
            "updated_at": "2022-10-21T06:51:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1286534068",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/49930785?v=4",
                "events_url": "https://api.github.com/users/winkee01/events{/privacy}",
                "followers_url": "https://api.github.com/users/winkee01/followers",
                "following_url": "https://api.github.com/users/winkee01/following{/other_user}",
                "gists_url": "https://api.github.com/users/winkee01/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/winkee01",
                "id": 49930785,
                "login": "winkee01",
                "node_id": "MDQ6VXNlcjQ5OTMwNzg1",
                "organizations_url": "https://api.github.com/users/winkee01/orgs",
                "received_events_url": "https://api.github.com/users/winkee01/received_events",
                "repos_url": "https://api.github.com/users/winkee01/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/winkee01/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/winkee01/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/winkee01"
            }
        },
        {
            "author_association": "NONE",
            "body": " @winkee01 can I ask you how you removed diag messages from the cache? Having same problem here, diag messages are not shown anymore, but they still appear on diag list when I open it\r\n\r\n",
            "created_at": "2022-10-27T08:39:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/20745#issuecomment-1293187852",
            "id": 1293187852,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20745",
            "node_id": "IC_kwDOAPphoM5NFHsM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1293187852/reactions"
            },
            "updated_at": "2022-10-27T08:39:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1293187852",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/100716008?v=4",
                "events_url": "https://api.github.com/users/peku-jamf/events{/privacy}",
                "followers_url": "https://api.github.com/users/peku-jamf/followers",
                "following_url": "https://api.github.com/users/peku-jamf/following{/other_user}",
                "gists_url": "https://api.github.com/users/peku-jamf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/peku-jamf",
                "id": 100716008,
                "login": "peku-jamf",
                "node_id": "U_kgDOBgDN6A",
                "organizations_url": "https://api.github.com/users/peku-jamf/orgs",
                "received_events_url": "https://api.github.com/users/peku-jamf/received_events",
                "repos_url": "https://api.github.com/users/peku-jamf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/peku-jamf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/peku-jamf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/peku-jamf"
            }
        },
        {
            "author_association": "NONE",
            "body": "@peku-jamf In my case, I have diagnostic messages from **sumneko_lua** and **selene**, and I want to filter out diagnostics from **sumneko_lua**, so I write a function to achieve that and them override the default diagnostic handler(`vim.lsp.diagnostic.on_publish_diagnostics`), like this:\r\n```lua\r\nlocal function filter_diagnostics(diagnostic)\r\n  -- Filter out all diagnostics from sumneko_lua\r\n  if diagnostic.source:find('Lua', 1, true) then\r\n    return false\r\n  end\r\n  return true\r\nend\r\n\r\nvim.lsp.handlers['textDocument/publishDiagnostics'] = vim.lsp.with(\r\n  function(_, result, ctx, config)\r\n    filter(result.diagnostics, filter_diagnostics)\r\n    vim.lsp.diagnostic.on_publish_diagnostics(_, result, ctx, config)\r\n  end,\r\n  {}\r\n)\r\n```\r\n\r\nNote:\r\n- the filter function is just a mapping function that applies a function to each item of a table, you can use `vim.tbl_filter` or something similar.\r\n\r\n\r\n\r\n",
            "created_at": "2022-10-27T15:11:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/20745#issuecomment-1293681541",
            "id": 1293681541,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20745",
            "node_id": "IC_kwDOAPphoM5NHAOF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1293681541/reactions"
            },
            "updated_at": "2022-10-27T15:11:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1293681541",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/49930785?v=4",
                "events_url": "https://api.github.com/users/winkee01/events{/privacy}",
                "followers_url": "https://api.github.com/users/winkee01/followers",
                "following_url": "https://api.github.com/users/winkee01/following{/other_user}",
                "gists_url": "https://api.github.com/users/winkee01/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/winkee01",
                "id": 49930785,
                "login": "winkee01",
                "node_id": "MDQ6VXNlcjQ5OTMwNzg1",
                "organizations_url": "https://api.github.com/users/winkee01/orgs",
                "received_events_url": "https://api.github.com/users/winkee01/received_events",
                "repos_url": "https://api.github.com/users/winkee01/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/winkee01/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/winkee01/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/winkee01"
            }
        },
        {
            "author_association": "NONE",
            "body": "A lot of people tried the snippet by @winkee01 but doesn't work (searching on github dotfiles).\r\n\r\nThat one does:\r\n```\r\nlocal function filter_diagnostics(diagnostic)\r\n  if diagnostic.source == 'pycodestyle' then\r\n    return false\r\n  end\r\n  return true\r\nend\r\n\r\nvim.lsp.handlers['textDocument/publishDiagnostics'] = vim.lsp.with(\r\n  function(_, result, ctx, config)\r\n    result.diagnostics = vim.tbl_filter(filter_diagnostics, result.diagnostics)\r\n    vim.lsp.diagnostic.on_publish_diagnostics(_, result, ctx, config)\r\n  end,\r\n  {}\r\n)\r\n```\r\n\r\n",
            "created_at": "2024-03-07T16:55:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/20745#issuecomment-1983998972",
            "id": 1983998972,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/20745",
            "node_id": "IC_kwDOAPphoM52QWv8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1983998972/reactions"
            },
            "updated_at": "2024-03-07T16:55:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1983998972",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/403283?v=4",
                "events_url": "https://api.github.com/users/Mte90/events{/privacy}",
                "followers_url": "https://api.github.com/users/Mte90/followers",
                "following_url": "https://api.github.com/users/Mte90/following{/other_user}",
                "gists_url": "https://api.github.com/users/Mte90/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Mte90",
                "id": 403283,
                "login": "Mte90",
                "node_id": "MDQ6VXNlcjQwMzI4Mw==",
                "organizations_url": "https://api.github.com/users/Mte90/orgs",
                "received_events_url": "https://api.github.com/users/Mte90/received_events",
                "repos_url": "https://api.github.com/users/Mte90/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Mte90/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Mte90/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Mte90"
            }
        }
    ],
    "comments": 18,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/20745/comments",
    "created_at": "2022-10-20T03:48:14Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/20745/events",
    "html_url": "https://github.com/neovim/neovim/issues/20745",
    "id": 1415892955,
    "labels": [
        {
            "color": "f9d0c4",
            "default": true,
            "description": "issues reporting wrong behavior",
            "id": 77997474,
            "name": "bug",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3NA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "",
            "id": 3361645105,
            "name": "diagnostic",
            "node_id": "MDU6TGFiZWwzMzYxNjQ1MTA1",
            "url": "https://api.github.com/repos/neovim/neovim/labels/diagnostic"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/20745/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM5UZM_b",
    "number": 20745,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/20745/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/20745/timeline",
    "title": "disable diagnostic from a specific source",
    "updated_at": "2024-03-07T16:55:03Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/20745",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/49930785?v=4",
        "events_url": "https://api.github.com/users/winkee01/events{/privacy}",
        "followers_url": "https://api.github.com/users/winkee01/followers",
        "following_url": "https://api.github.com/users/winkee01/following{/other_user}",
        "gists_url": "https://api.github.com/users/winkee01/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/winkee01",
        "id": 49930785,
        "login": "winkee01",
        "node_id": "MDQ6VXNlcjQ5OTMwNzg1",
        "organizations_url": "https://api.github.com/users/winkee01/orgs",
        "received_events_url": "https://api.github.com/users/winkee01/received_events",
        "repos_url": "https://api.github.com/users/winkee01/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/winkee01/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/winkee01/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/winkee01"
    }
}