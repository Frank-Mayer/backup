{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\r\n\r\nI would like to be able to change some neovim behavior when opening a floating window via `vim.lsp.buf.hover()` (or other floating windows like Telescope or other plugin defined floating windows). \r\n\r\nOne of my use cases for something like this is behavior like the following, where I basically only highlight the current screenline if I am moving around in the window in normal mode:\r\n```lua\r\nlocal daniel_opts = vim.api.nvim_create_augroup('DanielOpts', {  clear = true })\r\nvim.api.nvim_create_autocmd({\"InsertEnter\", \"FocusLost\", \"WinLeave\", \"CmdlineEnter\"}, {\r\n\tgroup = daniel_opts,\r\n\tpattern = \"*\",\r\n\tcallback = function()\r\n\t\tvim.opt.cursorlineopt = \"number\"\r\n\tend,\r\n})\r\nvim.api.nvim_create_autocmd({\"InsertLeave\", \"FocusGained\", \"WinEnter\", \"CmdlineLeave\"}, {\r\n\tgroup = daniel_opts,\r\n\tpattern = \"*\",\r\n\tcallback = function()\r\n\t\tvim.opt.cursorlineopt = \"screenline,number\"\r\n\tend,\r\n})\r\n```\r\nI would like to not show the screenline when I have an open floating window too. \r\n\r\n~I know I could check for open floats via `pumvisible` already, but~ I feel like it makes sense to have an event for this given that there already are similar events for buffers, windows, tabs etc. Also, I think quite a few popular plugins use floating windows a lot (like telescope, fzf-lua etc.), so it makes sense to make it easier to use auto commands for something most users will see a lot (floating windows).\r\n\r\n(Note: I can see that #25550 updates `nvim_open_win`. I don't know if this makes sense to consider in that PR. I saw in the comments that there currently are some problems with auto commands, but I haven't looked into it.)\r\n\r\n### Expected behavior\r\n\r\nA `FloatNew` event that is similar to `WinNew` and either\r\n\r\n-  a `FloatsClosed` (note the s) event that is a bit different than `WinClosed` in that it should only trigger when there are no more floats open. \r\n- or a `FloatClosed` event that is similar to `WinClosed` but triggers after the floating window is closed ~(then one can use `pumvisible` in the callback to check if any other floats are open after this float is closed)~ \r\n\r\n[Update: I misunderstood/misremembered what pumvisible does, so I crossed out some of the above.]",
    "closed_at": "2023-12-13T12:40:43Z",
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "> I know I could check for open floats via pumvisible already,\r\n\r\npumvisible() is for checking the popup-menu (for completion), not floating windows.\r\n\r\nMy two cents: One can easily check whether there is a floating window open in the current tabpage:\r\n```lua\r\nlocal function has_floating_window(tabnr)\r\n  tabnr = tabnr or 0  -- by default, the current tabpage\r\n  for _, win in ipairs(vim.api.nvim_tabpage_list_wins(tabnr)) do\r\n    if vim.api.nvim_win_get_config(win).relative ~= \"\" then\r\n      return true\r\n    end\r\n  end\r\n  return false\r\nend\r\n```\r\n\r\nor implementing \"`FloatNew`\" using `WinNew`:\r\n```lua\r\nvim.api.nvim_create_autocmd('WinNew', {             \r\n  pattern = '*',       \r\n  group = augroup,     \r\n  callback = function()\r\n    local is_floating = vim.api.nvim_get_config(0).relative ~= \"\"\r\n    if is_floating then\r\n      ...\r\n    end\r\n  end,\r\n})\r\n```\r\n\r\nSo adding such conditions to user autocmd events (WinNew, WinClose, etc.) won't be that difficult. And doing this would provide more flexibility to users -- for example, what if an user uses a plugin like https://github.com/dstein64/nvim-scrollview or fidget https://github.com/j-hui/fidget.nvim which are all based on floating windows, which users would usually want to exclude from \"trigger when there are no more floats open.\" ?",
            "created_at": "2023-12-12T23:01:54Z",
            "html_url": "https://github.com/neovim/neovim/issues/26548#issuecomment-1852947674",
            "id": 1852947674,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26548",
            "node_id": "IC_kwDOAPphoM5ucbza",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1852947674/reactions"
            },
            "updated_at": "2023-12-12T23:13:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1852947674",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "author_association": "NONE",
            "body": "> pumvisible() is for checking the popup-menu (for completion), not floating windows.\r\n\r\nAh, I guess I didn't read the docs carefully for that comment. Thanks for the correction. \r\n\r\n> My two cents: One can easily check whether there is a floating window open in the current tabpage\r\n> \r\n> ```lua\r\n> local function has_floating_window(tabnr)\r\n>   tabnr = tabnr or 0  -- by default, the current tabpage\r\n>   for _, win in ipairs(vim.api.nvim_tabpage_list_wins(tabnr)) do\r\n>     return vim.api.nvim_win_get_config(win).relative ~= \"\"\r\n>   end\r\n>   return false\r\n> end\r\n> ```\r\n> so adding such a condition to user autocmd events (WinNew, WinClose, etc.) won't be that difficult. And doing this would provide more flexibility to users -- for example, what if an user uses a plugin like https://github.com/dstein64/nvim-scrollview or fidget https://github.com/j-hui/fidget.nvim which are all based on floating windows, which users would usually want to exclude from \"trigger when there are no more floats open.\" ?\r\n\r\nThis is a pretty straightforward solution, yes. But wouldn't your solution also catch stuff like fidget? \r\n\r\nI guess a more precise request could be to allow `nvim_win_open` to broadcast events like listed above. Would that make sense? Though that would require some updates on the plugin side, and I am not sure if it makes sense to have the plugin author decide this (what if the user disagrees with a given plugin author's decision? I guess it could be an option the plugin author could allow one to choose in the setup?). \r\n\r\nI will have to think about this a bit more, but I still think some kind of events for floating windows could be nice to have.  ",
            "created_at": "2023-12-12T23:12:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/26548#issuecomment-1852958452",
            "id": 1852958452,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26548",
            "node_id": "IC_kwDOAPphoM5uceb0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1852958452/reactions"
            },
            "updated_at": "2023-12-12T23:13:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1852958452",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7075380?v=4",
                "events_url": "https://api.github.com/users/Danielkonge/events{/privacy}",
                "followers_url": "https://api.github.com/users/Danielkonge/followers",
                "following_url": "https://api.github.com/users/Danielkonge/following{/other_user}",
                "gists_url": "https://api.github.com/users/Danielkonge/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Danielkonge",
                "id": 7075380,
                "login": "Danielkonge",
                "node_id": "MDQ6VXNlcjcwNzUzODA=",
                "organizations_url": "https://api.github.com/users/Danielkonge/orgs",
                "received_events_url": "https://api.github.com/users/Danielkonge/received_events",
                "repos_url": "https://api.github.com/users/Danielkonge/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Danielkonge/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Danielkonge/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Danielkonge"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I edited the above code snippet `has_floating_window` because there was an error.\r\n\r\n> But wouldn't your solution also catch stuff like fidget?\r\n\r\nYes, so my point is that users may want to add some \"exclusion rules\" in this function: e.g. `if the filetype or window's some metadata is ... then skip checking`.\r\n\r\nWhile I think it might be a good idea to add FloatNew or FloatClose (a specialization of WinNew/WinClose events) even if they seem a bit redundant to WinNew/WinClose, I don't think \"FloatsClosed\", etc. are.",
            "created_at": "2023-12-12T23:18:05Z",
            "html_url": "https://github.com/neovim/neovim/issues/26548#issuecomment-1852974193",
            "id": 1852974193,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26548",
            "node_id": "IC_kwDOAPphoM5uciRx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1852974193/reactions"
            },
            "updated_at": "2023-12-12T23:18:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1852974193",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "author_association": "NONE",
            "body": "> ```lua\r\n> vim.api.nvim_create_autocmd('WinNew', {             \r\n>   pattern = '*',       \r\n>   group = augroup,     \r\n>   callback = function()\r\n>     local is_floating = vim.api.nvim_win_get_config(0).relative ~= \"\"\r\n>     if is_floating then\r\n>       ...\r\n>     end\r\n>   end,\r\n> })\r\n> ```\r\n(I fixed a typo - missing `win` in `nvim_win_get_config`)\r\n\r\nThis doesn't seem to work. Presumably because we call `nvim_win_get_config(0)`, but we are never in the floating window when this auto command is called. #26430 should fix this when it is merged. But for now that is another nicety we could get by adding particular events for floating windows. (Though I guess #26430 will be ready before that anyways.)\r\n",
            "created_at": "2023-12-12T23:37:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/26548#issuecomment-1853027434",
            "id": 1853027434,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26548",
            "node_id": "IC_kwDOAPphoM5ucvRq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1853027434/reactions"
            },
            "updated_at": "2023-12-12T23:37:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1853027434",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7075380?v=4",
                "events_url": "https://api.github.com/users/Danielkonge/events{/privacy}",
                "followers_url": "https://api.github.com/users/Danielkonge/followers",
                "following_url": "https://api.github.com/users/Danielkonge/following{/other_user}",
                "gists_url": "https://api.github.com/users/Danielkonge/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Danielkonge",
                "id": 7075380,
                "login": "Danielkonge",
                "node_id": "MDQ6VXNlcjcwNzUzODA=",
                "organizations_url": "https://api.github.com/users/Danielkonge/orgs",
                "received_events_url": "https://api.github.com/users/Danielkonge/received_events",
                "repos_url": "https://api.github.com/users/Danielkonge/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Danielkonge/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Danielkonge/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Danielkonge"
            }
        },
        {
            "author_association": "NONE",
            "body": "A small update: I can see that e.g. fidget actually calls `nvim_win_open` with `noautocmd = true`, which doesn't seem to be the case for e.g. Telescope or `vim.lsp.buf.hover()`. So if this behaves as I would expect, there is actually already a way for plugin authors to allow customization of which floating windows should call autocommands. (But as mentioned, we would want `FloatClosed` and not `FloatsClosed`.)",
            "created_at": "2023-12-13T00:50:29Z",
            "html_url": "https://github.com/neovim/neovim/issues/26548#issuecomment-1853092691",
            "id": 1853092691,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26548",
            "node_id": "IC_kwDOAPphoM5uc_NT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1853092691/reactions"
            },
            "updated_at": "2023-12-13T00:50:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1853092691",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7075380?v=4",
                "events_url": "https://api.github.com/users/Danielkonge/events{/privacy}",
                "followers_url": "https://api.github.com/users/Danielkonge/followers",
                "following_url": "https://api.github.com/users/Danielkonge/following{/other_user}",
                "gists_url": "https://api.github.com/users/Danielkonge/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Danielkonge",
                "id": 7075380,
                "login": "Danielkonge",
                "node_id": "MDQ6VXNlcjcwNzUzODA=",
                "organizations_url": "https://api.github.com/users/Danielkonge/orgs",
                "received_events_url": "https://api.github.com/users/Danielkonge/received_events",
                "repos_url": "https://api.github.com/users/Danielkonge/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Danielkonge/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Danielkonge/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Danielkonge"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Don't think we need this.  it is still within Win* scope. I add `WinNew` trigger in https://github.com/neovim/neovim/pull/25096 , if enter is false curwin will not the new float window so `vim.api.nvim_win_get_config(0)` not work. but i think you can use `buf` (callbakc data.buf) field as condition to check currently. if this is not enough. wait that pr add winid into callback data. ",
            "created_at": "2023-12-13T06:23:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/26548#issuecomment-1853335877",
            "id": 1853335877,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26548",
            "node_id": "IC_kwDOAPphoM5ud6lF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 5,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1853335877/reactions"
            },
            "updated_at": "2023-12-13T06:23:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1853335877",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I don't think we want this: From the point of Neovim, floating windows are just windows with special properties. It _might_ make sense to expose part of the config in the event data for `WinNew`. But there will always be all kinds of \"floating windows\", not just from fidget or hover and friends.",
            "created_at": "2023-12-13T06:36:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/26548#issuecomment-1853346744",
            "id": 1853346744,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26548",
            "node_id": "IC_kwDOAPphoM5ud9O4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1853346744/reactions"
            },
            "updated_at": "2023-12-13T06:36:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1853346744",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> It _might_ make sense to expose part of the config in the event data for `WinNew`\r\n\r\nYes, exactly. We should expose as much useful data to autocmd handler-functions (and `v:event`) as needed, but new events aren't needed here. And in this case `nvim_win_get_config()` already exists so we don't even need to expose extra data, we only need a window-id.\r\n\r\n> so `vim.api.nvim_win_get_config(0)` not work\r\n\r\nThen this is a duplicate of https://github.com/neovim/neovim/issues/25844",
            "created_at": "2023-12-13T12:38:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/26548#issuecomment-1853843244",
            "id": 1853843244,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26548",
            "node_id": "IC_kwDOAPphoM5uf2cs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1853843244/reactions"
            },
            "updated_at": "2023-12-13T12:41:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1853843244",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Yes, exactly. We should expose as much useful data to autocmd handler-functions (and v:event) as needed, but new events aren't needed here. And in this case nvim_win_get_config() already exists so we don't even need to expose extra data, we only need a window-id.\r\n\r\nWhat extra data would you want to expose here then? I can make a pull request adding some more data to `WinNew` and `WinClosed` if you had anything in mind. \r\n\r\n> Then this is a duplicate of #25844\r\n\r\nI don't think this should really be considered a duplicate of that issue, but it doesn't really matter since both should be closed by #26430, so it is fine to keep this closed. ",
            "created_at": "2023-12-13T14:52:52Z",
            "html_url": "https://github.com/neovim/neovim/issues/26548#issuecomment-1854064030",
            "id": 1854064030,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26548",
            "node_id": "IC_kwDOAPphoM5ugsWe",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1854064030/reactions"
            },
            "updated_at": "2023-12-13T14:52:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1854064030",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7075380?v=4",
                "events_url": "https://api.github.com/users/Danielkonge/events{/privacy}",
                "followers_url": "https://api.github.com/users/Danielkonge/followers",
                "following_url": "https://api.github.com/users/Danielkonge/following{/other_user}",
                "gists_url": "https://api.github.com/users/Danielkonge/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Danielkonge",
                "id": 7075380,
                "login": "Danielkonge",
                "node_id": "MDQ6VXNlcjcwNzUzODA=",
                "organizations_url": "https://api.github.com/users/Danielkonge/orgs",
                "received_events_url": "https://api.github.com/users/Danielkonge/received_events",
                "repos_url": "https://api.github.com/users/Danielkonge/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Danielkonge/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Danielkonge/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Danielkonge"
            }
        }
    ],
    "comments": 9,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/26548/comments",
    "created_at": "2023-12-12T22:45:53Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/26548/events",
    "html_url": "https://github.com/neovim/neovim/issues/26548",
    "id": 2038658718,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "e6e6e6",
            "default": false,
            "description": "issues that are closed as duplicates of other issues",
            "id": 3221613764,
            "name": "closed:duplicate",
            "node_id": "MDU6TGFiZWwzMjIxNjEzNzY0",
            "url": "https://api.github.com/repos/neovim/neovim/labels/closed:duplicate"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "events, autocommands",
            "id": 3341085842,
            "name": "events",
            "node_id": "MDU6TGFiZWwzMzQxMDg1ODQy",
            "url": "https://api.github.com/repos/neovim/neovim/labels/events"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/26548/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM55g3ae",
    "number": 26548,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 1,
        "-1": 1,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 2,
        "url": "https://api.github.com/repos/neovim/neovim/issues/26548/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "not_planned",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/26548/timeline",
    "title": "Add `FloatNew` and `FloatClosed` events",
    "updated_at": "2023-12-13T14:52:52Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/26548",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/7075380?v=4",
        "events_url": "https://api.github.com/users/Danielkonge/events{/privacy}",
        "followers_url": "https://api.github.com/users/Danielkonge/followers",
        "following_url": "https://api.github.com/users/Danielkonge/following{/other_user}",
        "gists_url": "https://api.github.com/users/Danielkonge/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/Danielkonge",
        "id": 7075380,
        "login": "Danielkonge",
        "node_id": "MDQ6VXNlcjcwNzUzODA=",
        "organizations_url": "https://api.github.com/users/Danielkonge/orgs",
        "received_events_url": "https://api.github.com/users/Danielkonge/received_events",
        "repos_url": "https://api.github.com/users/Danielkonge/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/Danielkonge/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Danielkonge/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/Danielkonge"
    }
}