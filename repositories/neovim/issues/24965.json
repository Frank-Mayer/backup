{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\r\n\r\nEditing or moving close to the last line of a very long if-elseif-elseif-else structure takes about ~1 second per action to perform.\r\n\r\n### Steps to reproduce\r\n\r\nOpen a file with the content below. Move to the bottom with `G`. notice how it takes a long time.\r\n\r\n```console\r\n$ /usr/local/bin/nvim --version\r\nNVIM v0.10.0-dev-994+g670c7609c-dirty\r\nBuild type: Debug\r\nLuaJIT 2.1.1693350652\r\nRun \"nvim -V1 -v\" for more info\r\n\r\n$ /usr/local/bin/nvim -u NORC -c 'lua vim.treesitter.start()' projects/tmp/treesitter/test_perf.c\r\n```\r\n\r\nFile content:\r\n\r\n<details>\r\n\r\n```c\r\n#include \"cstdio\"\r\n\r\n\r\nint main () {\r\n        if (1 == 0) {\r\n                printf(\"3\");\r\n        } else if (4 == 1) {\r\n                printf(\"5\");\r\n        } else if (7 == 1) {\r\n                printf(\"7\");\r\n        } else if (10 == 1) {\r\n                printf(\"9\");\r\n        } else if (13 == 1) {\r\n        } else if (15 == 1) {\r\n                printf(\"12\");\r\n                printf(\"13\");\r\n                printf(\"14\");\r\n                printf(\"15\");\r\n                printf(\"16\");\r\n                printf(\"17\");\r\n                printf(\"18\");\r\n                printf(\"19\");\r\n                printf(\"20\");\r\n                printf(\"21\");\r\n        } else if (27 == 1) {\r\n                printf(\"23\");\r\n        } else if (30 == 1) {\r\n                printf(\"25\");\r\n        } else if (33 == 1) {\r\n                printf(\"27\");\r\n        } else if (36 == 1) {\r\n                printf(\"29\");\r\n        } else if (39 == 1) {\r\n                printf(\"31\");\r\n        } else if (42 == 1) {\r\n                printf(\"33\");\r\n        } else if (45 == 1) {\r\n                printf(\"35\");\r\n        } else if (48 == 1) {\r\n                printf(\"37\");\r\n        } else if (51 == 1) {\r\n                printf(\"39\");\r\n        } else if (54 == 1) {\r\n                printf(\"41\");\r\n        } else if (57 == 1) {\r\n                printf(\"43\");\r\n        } else if (60 == 1) {\r\n                printf(\"45\");\r\n        } else if (63 == 1) {\r\n                printf(\"47\");\r\n        } else if (66 == 1) {\r\n                printf(\"49\");\r\n        } else if (69 == 1) {\r\n                printf(\"51\");\r\n        } else if (72 == 1) {\r\n                printf(\"53\");\r\n        } else if (75 == 1) {\r\n                printf(\"55\");\r\n        } else if (78 == 1) {\r\n                printf(\"57\");\r\n        } else if (81 == 1) {\r\n                printf(\"59\");\r\n        } else if (84 == 1) {\r\n                printf(\"61\");\r\n        } else if (87 == 1) {\r\n                printf(\"63\");\r\n        } else if (90 == 1) {\r\n                printf(\"65\");\r\n        } else if (93 == 1) {\r\n                printf(\"67\");\r\n        } else if (96 == 1) {\r\n                printf(\"69\");\r\n        } else if (99 == 1) {\r\n        } else if (101 == 1) {\r\n                printf(\"72\");\r\n        } else if (104 == 1) {\r\n                printf(\"74\");\r\n        } else if (107 == 1) {\r\n                printf(\"76\");\r\n        } else if (110 == 1) {\r\n                printf(\"78\");\r\n        } else if (113 == 1) {\r\n                printf(\"80\");\r\n        } else if (116 == 1) {\r\n                printf(\"82\");\r\n        } else if (119 == 1) {\r\n                printf(\"84\");\r\n        } else if (122 == 1) {\r\n                printf(\"86\");\r\n        } else if (125 == 1) {\r\n                printf(\"88\");\r\n        } else if (128 == 1) {\r\n        } else if (130 == 1) {\r\n                printf(\"91\");\r\n        } else if (133 == 1) {\r\n                printf(\"93\");\r\n        } else if (136 == 1) {\r\n                printf(\"95\");\r\n        } else if (139 == 1) {\r\n                printf(\"97\");\r\n        } else if (142 == 1) {\r\n                printf(\"99\");\r\n        } else if (145 == 1) {\r\n                printf(\"101\");\r\n        } else if (148 == 1) {\r\n                printf(\"103\");\r\n        } else if (151 == 1) {\r\n                printf(\"105\");\r\n        } else if (154 == 1) {\r\n                printf(\"107\");\r\n        } else if (157 == 1) {\r\n        } else if (159 == 1) {\r\n                printf(\"110\");\r\n        } else if (162 == 1) {\r\n                printf(\"112\");\r\n        } else if (165 == 1) {\r\n                printf(\"114\");\r\n        } else if (168 == 1) {\r\n                printf(\"116\");\r\n        } else if (171 == 1) {\r\n                printf(\"118\");\r\n        } else if (174 == 1) {\r\n                printf(\"120\");\r\n        } else if (177 == 1) {\r\n                printf(\"122\");\r\n        } else if (180 == 1) {\r\n                printf(\"124\");\r\n        } else if (183 == 1) {\r\n                printf(\"126\");\r\n        } else if (186 == 1) {\r\n                printf(\"128\");\r\n        } else if (189 == 1) {\r\n                printf(\"130\");\r\n        } else if (192 == 1) {\r\n                printf(\"132\");\r\n        } else if (195 == 1) {\r\n                printf(\"134\");\r\n        } else if (198 == 1) {\r\n                printf(\"136\");\r\n        } else if (201 == 1) {\r\n                printf(\"138\");\r\n        } else if (204 == 1) {\r\n                printf(\"140\");\r\n        } else if (207 == 1) {\r\n                printf(\"142\");\r\n        } else if (210 == 1) {\r\n                printf(\"144\");\r\n        } else if (213 == 1) {\r\n                printf(\"146\");\r\n        } else if (216 == 1) {\r\n                printf(\"148\");\r\n        } else if (219 == 1) {\r\n                printf(\"150\");\r\n        } else if (222 == 1) {\r\n                printf(\"152\");\r\n        } else if (225 == 1) {\r\n                printf(\"154\");\r\n        } else if (228 == 1) {\r\n                printf(\"156\");\r\n        } else if (231 == 1) {\r\n                printf(\"158\");\r\n        } else if (234 == 1) {\r\n                printf(\"160\");\r\n        } else if (237 == 1) {\r\n                printf(\"162\");\r\n        } else if (240 == 1) {\r\n                printf(\"164\");\r\n        } else if (243 == 1) {\r\n                printf(\"166\");\r\n        } else if (246 == 1) {\r\n                printf(\"168\");\r\n        } else if (249 == 1) {\r\n                printf(\"170\");\r\n        } else if (252 == 1) {\r\n                printf(\"172\");\r\n        } else if (255 == 1) {\r\n                printf(\"174\");\r\n        } else if (258 == 1) {\r\n                printf(\"176\");\r\n        } else if (261 == 1) {\r\n                printf(\"178\");\r\n        } else if (264 == 1) {\r\n                printf(\"180\");\r\n        } else if (267 == 1) {\r\n                printf(\"182\");\r\n        } else if (270 == 1) {\r\n                printf(\"184\");\r\n        } else if (273 == 1) {\r\n                printf(\"186\");\r\n        } else if (276 == 1) {\r\n                printf(\"188\");\r\n        } else if (279 == 1) {\r\n                printf(\"190\");\r\n        } else if (282 == 1) {\r\n                printf(\"192\");\r\n        } else if (285 == 1) {\r\n                printf(\"194\");\r\n        } else if (288 == 1) {\r\n                printf(\"196\");\r\n        } else if (291 == 1) {\r\n                printf(\"198\");\r\n        } else if (294 == 1) {\r\n                printf(\"200\");\r\n        } else if (297 == 1) {\r\n                printf(\"202\");\r\n        } else if (300 == 1) {\r\n                printf(\"204\");\r\n        } else if (303 == 1) {\r\n                printf(\"206\");\r\n        } else if (306 == 1) {\r\n                printf(\"208\");\r\n        } else if (308 == 1) {\r\n                printf(\"210\");\r\n        } else if (310 == 1) {\r\n                printf(\"212\");\r\n        } else if (312 == 1) {\r\n                printf(\"214\");\r\n        } else if (314 == 1) {\r\n                printf(\"216\");\r\n        } else if (316 == 1) {\r\n                printf(\"218\");\r\n        } else if (318 == 1) {\r\n                printf(\"220\");\r\n        } else if (320 == 1) {\r\n                printf(\"222\");\r\n        } else if (322 == 1) {\r\n                printf(\"224\");\r\n        } else if (324 == 1) {\r\n                printf(\"226\");\r\n        } else if (326 == 1) {\r\n                printf(\"228\");\r\n        } else if (328 == 1) {\r\n                printf(\"230\");\r\n        } else if (330 == 1) {\r\n                printf(\"232\");\r\n        } else if (332 == 1) {\r\n                printf(\"234\");\r\n        } else if (334 == 1) {\r\n                printf(\"236\");\r\n        } else if (336 == 1) {\r\n                printf(\"238\");\r\n        } else if (338 == 1) {\r\n                printf(\"240\");\r\n        } else if (340 == 1) {\r\n                printf(\"242\");\r\n        } else if (342 == 1) {\r\n                printf(\"244\");\r\n        } else if (344 == 1) {\r\n                printf(\"246\");\r\n        } else if (346 == 1) {\r\n                printf(\"248\");\r\n        } else if (348 == 1) {\r\n                printf(\"250\");\r\n        } else if (350 == 1) {\r\n                printf(\"252\");\r\n        } else if (352 == 1) {\r\n                printf(\"254\");\r\n        } else if (354 == 1) {\r\n                printf(\"256\");\r\n        } else if (356 == 1) {\r\n                printf(\"258\");\r\n        } else if (358 == 1) {\r\n                printf(\"260\");\r\n        } else if (360 == 1) {\r\n                printf(\"262\");\r\n        } else if (362 == 1) {\r\n                printf(\"264\");\r\n        } else if (364 == 1) {\r\n                printf(\"266\");\r\n        } else if (366 == 1) {\r\n                printf(\"268\");\r\n        } else if (368 == 1) {\r\n                printf(\"270\");\r\n        } else if (370 == 1) {\r\n                printf(\"272\");\r\n        } else if (372 == 1) {\r\n                printf(\"274\");\r\n        } else if (374 == 1) {\r\n                printf(\"276\");\r\n        } else if (376 == 1) {\r\n                printf(\"278\");\r\n        } else if (378 == 1) {\r\n                printf(\"280\");\r\n        } else if (380 == 1) {\r\n                printf(\"282\");\r\n        } else if (382 == 1) {\r\n                printf(\"284\");\r\n        } else if (384 == 1) {\r\n                printf(\"286\");\r\n        } else if (386 == 1) {\r\n                printf(\"288\");\r\n        } else if (388 == 1) {\r\n                printf(\"290\");\r\n        } else if (390 == 1) {\r\n                printf(\"292\");\r\n        } else if (392 == 1) {\r\n                printf(\"294\");\r\n        } else if (394 == 1) {\r\n                printf(\"296\");\r\n        } else if (396 == 1) {\r\n                printf(\"298\");\r\n        } else if (398 == 1) {\r\n                printf(\"300\");\r\n        } else if (400 == 1) {\r\n                printf(\"302\");\r\n        } else if (402 == 1) {\r\n                printf(\"304\");\r\n        } else if (404 == 1) {\r\n                printf(\"306\");\r\n        } else if (406 == 1) {\r\n                printf(\"308\");\r\n        } else if (408 == 1) {\r\n                printf(\"310\");\r\n        } else if (410 == 1) {\r\n                printf(\"312\");\r\n        } else if (412 == 1) {\r\n                printf(\"314\");\r\n        } else if (414 == 1) {\r\n                printf(\"316\");\r\n        } else if (416 == 1) {\r\n                printf(\"318\");\r\n        } else if (418 == 1) {\r\n                printf(\"320\");\r\n        } else if (420 == 1) {\r\n                printf(\"322\");\r\n        } else if (422 == 1) {\r\n                printf(\"324\");\r\n        } else if (424 == 1) {\r\n                printf(\"326\");\r\n        } else if (426 == 1) {\r\n                printf(\"328\");\r\n        } else if (428 == 1) {\r\n                printf(\"330\");\r\n        } else if (430 == 1) {\r\n                printf(\"332\");\r\n        } else if (432 == 1) {\r\n                printf(\"334\");\r\n        } else if (434 == 1) {\r\n                printf(\"336\");\r\n        } else if (436 == 1) {\r\n                printf(\"338\");\r\n        } else if (438 == 1) {\r\n                printf(\"340\");\r\n        } else if (440 == 1) {\r\n                printf(\"342\");\r\n        } else if (442 == 1) {\r\n                printf(\"344\");\r\n        } else if (444 == 1) {\r\n                printf(\"346\");\r\n        } else if (446 == 1) {\r\n                printf(\"348\");\r\n        } else if (448 == 1) {\r\n                printf(\"350\");\r\n        } else if (450 == 1) {\r\n                printf(\"352\");\r\n        } else if (452 == 1) {\r\n                printf(\"354\");\r\n        } else if (454 == 1) {\r\n                printf(\"356\");\r\n        } else if (456 == 1) {\r\n                printf(\"358\");\r\n        } else if (458 == 1) {\r\n                printf(\"360\");\r\n        } else if (460 == 1) {\r\n                printf(\"362\");\r\n        } else if (462 == 1) {\r\n                printf(\"364\");\r\n        } else if (464 == 1) {\r\n                printf(\"366\");\r\n        } else if (466 == 1) {\r\n                printf(\"368\");\r\n        } else if (468 == 1) {\r\n                printf(\"370\");\r\n        } else if (470 == 1) {\r\n                printf(\"372\");\r\n        } else if (472 == 1) {\r\n                printf(\"374\");\r\n        } else if (474 == 1) {\r\n                printf(\"376\");\r\n        } else if (476 == 1) {\r\n                printf(\"378\");\r\n        } else if (478 == 1) {\r\n                printf(\"380\");\r\n        } else if (480 == 1) {\r\n                printf(\"382\");\r\n        } else if (482 == 1) {\r\n                printf(\"384\");\r\n        } else if (484 == 1) {\r\n                printf(\"386\");\r\n        } else if (486 == 1) {\r\n                printf(\"388\");\r\n        } else if (488 == 1) {\r\n                printf(\"390\");\r\n        } else if (490 == 1) {\r\n                printf(\"392\");\r\n        } else if (492 == 1) {\r\n                printf(\"394\");\r\n        } else if (494 == 1) {\r\n                printf(\"396\");\r\n        } else if (496 == 1) {\r\n                printf(\"398\");\r\n        } else if (498 == 1) {\r\n                printf(\"400\");\r\n        } else if (500 == 1) {\r\n                printf(\"402\");\r\n        } else if (502 == 1) {\r\n                printf(\"404\");\r\n        } else if (504 == 1) {\r\n                printf(\"406\");\r\n        } else if (506 == 1) {\r\n                printf(\"408\");\r\n        } else if (508 == 1) {\r\n                printf(\"410\");\r\n        } else if (510 == 1) {\r\n                printf(\"412\");\r\n        } else if (512 == 1) {\r\n                printf(\"414\");\r\n        } else if (514 == 1) {\r\n                printf(\"416\");\r\n        } else if (516 == 1) {\r\n                printf(\"418\");\r\n        } else if (518 == 1) {\r\n                printf(\"420\");\r\n        } else if (520 == 1) {\r\n                printf(\"422\");\r\n        } else if (522 == 1) {\r\n                printf(\"424\");\r\n        } else if (524 == 1) {\r\n                printf(\"426\");\r\n        } else if (526 == 1) {\r\n                printf(\"428\");\r\n        } else if (528 == 1) {\r\n                printf(\"430\");\r\n        } else if (530 == 1) {\r\n                printf(\"432\");\r\n        } else if (532 == 1) {\r\n                printf(\"434\");\r\n        } else if (534 == 1) {\r\n                printf(\"436\");\r\n        } else if (536 == 1) {\r\n                printf(\"438\");\r\n        } else if (538 == 1) {\r\n                printf(\"440\");\r\n        } else if (540 == 1) {\r\n                printf(\"442\");\r\n        } else if (542 == 1) {\r\n                printf(\"444\");\r\n        } else if (544 == 1) {\r\n                printf(\"446\");\r\n        } else if (546 == 1) {\r\n                printf(\"448\");\r\n        } else if (548 == 1) {\r\n                printf(\"450\");\r\n        } else if (550 == 1) {\r\n                printf(\"452\");\r\n        } else if (552 == 1) {\r\n                printf(\"454\");\r\n        } else if (554 == 1) {\r\n                printf(\"456\");\r\n        } else if (556 == 1) {\r\n                printf(\"458\");\r\n        } else if (558 == 1) {\r\n                printf(\"460\");\r\n        } else if (560 == 1) {\r\n                printf(\"462\");\r\n        } else if (562 == 1) {\r\n                printf(\"464\");\r\n        } else if (564 == 1) {\r\n                printf(\"466\");\r\n        } else if (566 == 1) {\r\n                printf(\"468\");\r\n        } else if (568 == 1) {\r\n                printf(\"470\");\r\n        } else if (570 == 1) {\r\n                printf(\"472\");\r\n        } else if (572 == 1) {\r\n                printf(\"474\");\r\n        } else if (574 == 1) {\r\n                printf(\"476\");\r\n        } else if (576 == 1) {\r\n                printf(\"478\");\r\n        } else if (578 == 1) {\r\n                printf(\"480\");\r\n        } else if (580 == 1) {\r\n                printf(\"482\");\r\n        } else if (582 == 1) {\r\n                printf(\"484\");\r\n        } else if (584 == 1) {\r\n                printf(\"486\");\r\n        } else if (586 == 1) {\r\n                printf(\"488\");\r\n        } else if (588 == 1) {\r\n                printf(\"490\");\r\n        } else if (590 == 1) {\r\n                printf(\"492\");\r\n        } else if (592 == 1) {\r\n                printf(\"494\");\r\n        } else if (594 == 1) {\r\n                printf(\"496\");\r\n        } else if (596 == 1) {\r\n                printf(\"498\");\r\n        } else if (598 == 1) {\r\n                printf(\"500\");\r\n        } else if (600 == 1) {\r\n                printf(\"502\");\r\n        } else if (602 == 1) {\r\n                printf(\"504\");\r\n        } else if (604 == 1) {\r\n                printf(\"506\");\r\n        } else if (606 == 1) {\r\n                printf(\"508\");\r\n        } else if (608 == 1) {\r\n                printf(\"510\");\r\n        } else if (610 == 1) {\r\n                printf(\"512\");\r\n        } else if (612 == 1) {\r\n                printf(\"514\");\r\n        } else if (614 == 1) {\r\n                printf(\"516\");\r\n        } else if (616 == 1) {\r\n                printf(\"518\");\r\n        } else if (618 == 1) {\r\n                printf(\"520\");\r\n        } else if (620 == 1) {\r\n                printf(\"522\");\r\n        } else if (622 == 1) {\r\n                printf(\"524\");\r\n        } else if (624 == 1) {\r\n                printf(\"526\");\r\n        } else if (626 == 1) {\r\n                printf(\"528\");\r\n        } else if (628 == 1) {\r\n                printf(\"530\");\r\n        } else if (630 == 1) {\r\n                printf(\"532\");\r\n        } else if (632 == 1) {\r\n                printf(\"534\");\r\n        } else if (634 == 1) {\r\n                printf(\"536\");\r\n        } else if (636 == 1) {\r\n                printf(\"538\");\r\n        } else if (638 == 1) {\r\n                printf(\"540\");\r\n        } else if (640 == 1) {\r\n                printf(\"542\");\r\n        } else if (642 == 1) {\r\n                printf(\"544\");\r\n        } else if (644 == 1) {\r\n                printf(\"546\");\r\n        } else if (646 == 1) {\r\n                printf(\"548\");\r\n        } else if (648 == 1) {\r\n                printf(\"550\");\r\n        } else if (650 == 1) {\r\n                printf(\"552\");\r\n        } else if (652 == 1) {\r\n                printf(\"554\");\r\n        } else if (654 == 1) {\r\n                printf(\"556\");\r\n        } else if (656 == 1) {\r\n                printf(\"558\");\r\n        } else if (658 == 1) {\r\n                printf(\"560\");\r\n        } else if (660 == 1) {\r\n                printf(\"562\");\r\n        } else if (662 == 1) {\r\n                printf(\"564\");\r\n        } else if (664 == 1) {\r\n                printf(\"566\");\r\n        } else if (666 == 1) {\r\n                printf(\"568\");\r\n        } else if (668 == 1) {\r\n                printf(\"570\");\r\n        } else if (670 == 1) {\r\n                printf(\"572\");\r\n        } else if (672 == 1) {\r\n                printf(\"574\");\r\n        } else if (674 == 1) {\r\n                printf(\"576\");\r\n        } else if (676 == 1) {\r\n                printf(\"578\");\r\n        } else if (678 == 1) {\r\n                printf(\"580\");\r\n        } else if (680 == 1) {\r\n                printf(\"582\");\r\n        } else if (682 == 1) {\r\n                printf(\"584\");\r\n        } else if (684 == 1) {\r\n                printf(\"586\");\r\n        } else if (686 == 1) {\r\n                printf(\"588\");\r\n        } else if (688 == 1) {\r\n                printf(\"590\");\r\n        } else if (690 == 1) {\r\n                printf(\"592\");\r\n        } else if (692 == 1) {\r\n                printf(\"594\");\r\n        } else if (694 == 1) {\r\n                printf(\"596\");\r\n        } else if (696 == 1) {\r\n                printf(\"598\");\r\n        } else if (698 == 1) {\r\n                printf(\"600\");\r\n        } else if (700 == 1) {\r\n                printf(\"602\");\r\n        } else if (702 == 1) {\r\n                printf(\"604\");\r\n        } else if (704 == 1) {\r\n                printf(\"606\");\r\n        } else if (706 == 1) {\r\n                printf(\"608\");\r\n        } else if (708 == 1) {\r\n                printf(\"610\");\r\n        } else if (710 == 1) {\r\n                printf(\"612\");\r\n        } else if (712 == 1) {\r\n                printf(\"614\");\r\n        } else if (714 == 1) {\r\n                printf(\"616\");\r\n        } else if (716 == 1) {\r\n                printf(\"618\");\r\n        } else if (718 == 1) {\r\n                printf(\"620\");\r\n        } else if (720 == 1) {\r\n                printf(\"622\");\r\n        } else if (722 == 1) {\r\n                printf(\"624\");\r\n        } else if (724 == 1) {\r\n                printf(\"626\");\r\n        } else if (726 == 1) {\r\n                printf(\"628\");\r\n        } else if (728 == 1) {\r\n                printf(\"630\");\r\n        } else if (730 == 1) {\r\n                printf(\"632\");\r\n        } else if (732 == 1) {\r\n                printf(\"634\");\r\n        } else if (734 == 1) {\r\n                printf(\"636\");\r\n        } else if (736 == 1) {\r\n                printf(\"638\");\r\n        } else if (738 == 1) {\r\n                printf(\"640\");\r\n        } else if (740 == 1) {\r\n                printf(\"642\");\r\n        } else if (742 == 1) {\r\n                printf(\"644\");\r\n        } else if (744 == 1) {\r\n                printf(\"646\");\r\n        } else if (746 == 1) {\r\n                printf(\"648\");\r\n\t}\r\n}\r\n```\r\n\r\n</details>\r\n\r\n### Expected behavior\r\n\r\nFast and rapid movement and editing\r\n\r\n### Neovim version (nvim -v)\r\n\r\nNVIM v0.10.0-dev-994+g670c7609c-dirty\r\n\r\n### Vim (not Nvim) behaves the same?\r\n\r\nno\r\n\r\n### Operating system/version\r\n\r\nUbuntu 22.04\r\n\r\n### Terminal name/version\r\n\r\nwezterm version: 20230820-104238-6c7aa815\r\n\r\n### $TERM environment variable\r\n\r\nxterm-256color\r\n\r\n### Installation\r\n\r\nbuild from repo",
    "closed_at": "2024-05-16T14:57:59Z",
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Ok, that code is just pain in a jar -- the syntax equivalent of the classic \"doctor, it hurts when I do this\" joke...",
            "created_at": "2023-08-31T19:28:15Z",
            "html_url": "https://github.com/neovim/neovim/issues/24965#issuecomment-1701665530",
            "id": 1701665530,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24965",
            "node_id": "IC_kwDOAPphoM5lbVr6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1701665530/reactions"
            },
            "updated_at": "2023-09-02T10:06:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1701665530",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@clason guess what our source code at work looks like >.<",
            "created_at": "2023-08-31T19:31:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/24965#issuecomment-1701668796",
            "id": 1701668796,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24965",
            "node_id": "IC_kwDOAPphoM5lbWe8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1701668796/reactions"
            },
            "updated_at": "2023-09-02T10:06:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1701668796",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4508793?v=4",
                "events_url": "https://api.github.com/users/kaddkaka/events{/privacy}",
                "followers_url": "https://api.github.com/users/kaddkaka/followers",
                "following_url": "https://api.github.com/users/kaddkaka/following{/other_user}",
                "gists_url": "https://api.github.com/users/kaddkaka/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kaddkaka",
                "id": 4508793,
                "login": "kaddkaka",
                "node_id": "MDQ6VXNlcjQ1MDg3OTM=",
                "organizations_url": "https://api.github.com/users/kaddkaka/orgs",
                "received_events_url": "https://api.github.com/users/kaddkaka/received_events",
                "repos_url": "https://api.github.com/users/kaddkaka/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kaddkaka/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kaddkaka/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kaddkaka"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Do you work for [YandereDev](https://gist.github.com/pixeldesu/f6c8bd3c2d2b09f177c196a826b18dd2#file-studentscript-cs-L1128)? :^)",
            "created_at": "2023-08-31T19:32:24Z",
            "html_url": "https://github.com/neovim/neovim/issues/24965#issuecomment-1701670441",
            "id": 1701670441,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24965",
            "node_id": "IC_kwDOAPphoM5lbW4p",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 1,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1701670441/reactions"
            },
            "updated_at": "2023-09-02T10:06:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1701670441",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24971970?v=4",
                "events_url": "https://api.github.com/users/ObserverOfTime/events{/privacy}",
                "followers_url": "https://api.github.com/users/ObserverOfTime/followers",
                "following_url": "https://api.github.com/users/ObserverOfTime/following{/other_user}",
                "gists_url": "https://api.github.com/users/ObserverOfTime/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ObserverOfTime",
                "id": 24971970,
                "login": "ObserverOfTime",
                "node_id": "MDQ6VXNlcjI0OTcxOTcw",
                "organizations_url": "https://api.github.com/users/ObserverOfTime/orgs",
                "received_events_url": "https://api.github.com/users/ObserverOfTime/received_events",
                "repos_url": "https://api.github.com/users/ObserverOfTime/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ObserverOfTime/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ObserverOfTime/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ObserverOfTime"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Most time is spent processing `has-ancestor?` predicate.\r\n\r\n<details>\r\n<summary>patch for profiling</summary>\r\n\r\n```diff\r\ndiff --git a/runtime/lua/vim/treesitter/highlighter.lua b/runtime/lua/vim/treesitter/highlighter.lua\r\nindex 496193c6e..a24d022d3 100644\r\n--- a/runtime/lua/vim/treesitter/highlighter.lua\r\n+++ b/runtime/lua/vim/treesitter/highlighter.lua\r\n@@ -315,6 +315,7 @@ function TSHighlighter._on_spell_nav(_, _, buf, srow, _, erow, _)\r\n   end\r\n end\r\n \r\n+local start\r\n ---@private\r\n ---@param _win integer\r\n ---@param buf integer\r\n@@ -335,6 +336,8 @@ api.nvim_set_decoration_provider(ns, {\r\n   on_win = TSHighlighter._on_win,\r\n   on_line = TSHighlighter._on_line,\r\n   _on_spell_nav = TSHighlighter._on_spell_nav,\r\n+  on_start = function() start = vim.uv.hrtime() end,\r\n+  on_end = function() print('redrawn', (vim.uv.hrtime() - start) / 1000000, vim.treesitter.query.times()) end\r\n })\r\n \r\n return TSHighlighter\r\ndiff --git a/runtime/lua/vim/treesitter/query.lua b/runtime/lua/vim/treesitter/query.lua\r\nindex 8cbbffcd6..0f0a04a00 100644\r\n--- a/runtime/lua/vim/treesitter/query.lua\r\n+++ b/runtime/lua/vim/treesitter/query.lua\r\n@@ -407,6 +407,29 @@ local predicate_handlers = {\r\n -- As we provide lua-match? also expose vim-match?\r\n predicate_handlers['vim-match?'] = predicate_handlers['match?']\r\n \r\n+local times = {} ---@type table<string, number>\r\n+for k, f in pairs(predicate_handlers) do\r\n+  times[k] = 0\r\n+  predicate_handlers[k] = function(...)\r\n+    local start = vim.uv.hrtime()\r\n+    local ret = { f(...) }\r\n+    times[k] = times[k] + (vim.uv.hrtime() - start) / 1000000\r\n+    return unpack(ret)\r\n+  end\r\n+end\r\n+\r\n+function M.times()\r\n+  local all_zeros = true\r\n+  local result = vim.inspect(times)\r\n+  for k, _ in pairs(times) do\r\n+    if times[k] > 0 then all_zeros = false end\r\n+    times[k] = 0\r\n+  end\r\n+  if not all_zeros then\r\n+    return result\r\n+  end\r\n+end\r\n+\r\n ---@class TSMetadata\r\n ---@field range? Range\r\n ---@field conceal? string\r\n```\r\n\r\n</details>\r\n\r\ntime spent while redrawing (in ms)\r\n```\r\nredrawn 365.606942 {\r\n  [\"any-of?\"] = 0.131375,\r\n  [\"contains?\"] = 0,\r\n  [\"eq?\"] = 0,\r\n  [\"has-ancestor?\"] = 362.042793,\r\n  [\"has-parent?\"] = 0,\r\n  [\"lua-match?\"] = 0.168706,\r\n  [\"match?\"] = 0,\r\n  [\"vim-match?\"] = 0\r\n}\r\n```\r\n\r\nThe treesitter c grammar parses `else if` as `if_statement` nested in `else_clause`, and `has-ancestor?` has time complexity linear in the tree depth.\r\nhttps://github.com/neovim/neovim/blob/e46f5aab895f333d23d6adf490e13177c8d3c1d8/runtime/lua/vim/treesitter/query.lua#L385-L390\r\n\r\nI think there should be some limit on the distance or time.",
            "created_at": "2023-09-28T07:04:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/24965#issuecomment-1738594581",
            "id": 1738594581,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24965",
            "node_id": "IC_kwDOAPphoM5noNkV",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1738594581/reactions"
            },
            "updated_at": "2023-09-28T07:04:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1738594581",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19489738?v=4",
                "events_url": "https://api.github.com/users/tomtomjhj/events{/privacy}",
                "followers_url": "https://api.github.com/users/tomtomjhj/followers",
                "following_url": "https://api.github.com/users/tomtomjhj/following{/other_user}",
                "gists_url": "https://api.github.com/users/tomtomjhj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tomtomjhj",
                "id": 19489738,
                "login": "tomtomjhj",
                "node_id": "MDQ6VXNlcjE5NDg5NzM4",
                "organizations_url": "https://api.github.com/users/tomtomjhj/orgs",
                "received_events_url": "https://api.github.com/users/tomtomjhj/received_events",
                "repos_url": "https://api.github.com/users/tomtomjhj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tomtomjhj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tomtomjhj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tomtomjhj"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yes, `#has-ancestor?` is known to be a performance sink (I think I documented that somewhere, but it may not have made it into the official docs.)\r\n\r\nA distance limit is unacceptable, since some functionality (other than highlighting) may rely on a correct global parse. A general time limit is already planned and should cover this as well: https://github.com/neovim/neovim/pull/22420",
            "created_at": "2023-09-28T07:08:42Z",
            "html_url": "https://github.com/neovim/neovim/issues/24965#issuecomment-1738598824",
            "id": 1738598824,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24965",
            "node_id": "IC_kwDOAPphoM5noOmo",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1738598824/reactions"
            },
            "updated_at": "2023-09-28T07:08:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1738598824",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> A general time limit is already planned and should cover this as well: https://github.com/neovim/neovim/pull/22420\r\n\r\nI think that patch in the current form doesn't fix this issue. Those predicates are called during `on_line_impl`, so it won't be affected by the parsing timeout.\r\n```\r\n87%  handler\r\n  <- 100%  match_preds < iter < fn < for_each_tree < on_line_impl < highlighter.lua:292\r\n```\r\n\r\nIt wouldn't too difficult to add the timeout logic to treessiter highlighter's decoration provider, but I think per-query distance limit (e.g., adding \"limit\" parameter to `has-ancestor?`) is better in some aspects.\r\n* Aborting one query does not affect other queries, while global timeout would abort all the remaining queries, resulting in worse highlights.\r\n* Query authors can set a good limit based on the knowledge of the grammar. If accuracy is important, they can opt out of the limit.\r\n",
            "created_at": "2023-09-28T07:54:19Z",
            "html_url": "https://github.com/neovim/neovim/issues/24965#issuecomment-1738657758",
            "id": 1738657758,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24965",
            "node_id": "IC_kwDOAPphoM5noc_e",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1738657758/reactions"
            },
            "updated_at": "2023-09-28T07:54:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1738657758",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19489738?v=4",
                "events_url": "https://api.github.com/users/tomtomjhj/events{/privacy}",
                "followers_url": "https://api.github.com/users/tomtomjhj/followers",
                "following_url": "https://api.github.com/users/tomtomjhj/following{/other_user}",
                "gists_url": "https://api.github.com/users/tomtomjhj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tomtomjhj",
                "id": 19489738,
                "login": "tomtomjhj",
                "node_id": "MDQ6VXNlcjE5NDg5NzM4",
                "organizations_url": "https://api.github.com/users/tomtomjhj/orgs",
                "received_events_url": "https://api.github.com/users/tomtomjhj/received_events",
                "repos_url": "https://api.github.com/users/tomtomjhj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tomtomjhj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tomtomjhj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tomtomjhj"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> e.g., adding \"limit\" parameter to `has-ancestor?`\r\n\r\nConcretely, how would that look for the C queries here? (It's always better to design an API around concrete use cases instead of generic hypotheticals ;))",
            "created_at": "2023-09-28T07:58:52Z",
            "html_url": "https://github.com/neovim/neovim/issues/24965#issuecomment-1738663903",
            "id": 1738663903,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24965",
            "node_id": "IC_kwDOAPphoM5noeff",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1738663903/reactions"
            },
            "updated_at": "2023-09-28T07:58:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1738663903",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "The problematic query for the OP's example is this\r\nhttps://github.com/neovim/neovim/blob/e46f5aab895f333d23d6adf490e13177c8d3c1d8/runtime/queries/c/highlights.scm#L206-L208\r\n\r\nI was thinking of something like this\r\n```diff\r\n-  (#has-ancestor? @function.builtin attribute_specifier))\r\n+  (#has-ancestor-within? 20 @function.builtin attribute_specifier))\r\n```\r\nSince `#has-ancestor?` takes multiple candidates for the ancestor, we need a variant that takes the limit value (or use `#set!`).",
            "created_at": "2023-09-28T08:23:21Z",
            "html_url": "https://github.com/neovim/neovim/issues/24965#issuecomment-1738697504",
            "id": 1738697504,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24965",
            "node_id": "IC_kwDOAPphoM5nomsg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1738697504/reactions"
            },
            "updated_at": "2023-09-28T08:23:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1738697504",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19489738?v=4",
                "events_url": "https://api.github.com/users/tomtomjhj/events{/privacy}",
                "followers_url": "https://api.github.com/users/tomtomjhj/followers",
                "following_url": "https://api.github.com/users/tomtomjhj/following{/other_user}",
                "gists_url": "https://api.github.com/users/tomtomjhj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tomtomjhj",
                "id": 19489738,
                "login": "tomtomjhj",
                "node_id": "MDQ6VXNlcjE5NDg5NzM4",
                "organizations_url": "https://api.github.com/users/tomtomjhj/orgs",
                "received_events_url": "https://api.github.com/users/tomtomjhj/received_events",
                "repos_url": "https://api.github.com/users/tomtomjhj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tomtomjhj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tomtomjhj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tomtomjhj"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yes, but what concretely would be the limit value? Is this something fixed by the actual query, or just some sort of \"I don't expect that _most_ cases will need more than 20...\"\r\n\r\n(There's a big difference between an objectively correct value and a fudge factor that needs to be tuned.)\r\n\r\n> Since #has-ancestor? takes multiple candidates for the ancestor, we need a variant that takes the limit value (or use #set!).\r\n\r\nAdding yet another variant is a hard \"no\" from me, I'm afraid. If we cannot support this with the current predicate, `#set!` is the correct approach. (If we even need multiple candidates; I can't find an example in nvim-treesitter queries.)\r\n\r\nIf `#has-parent?` can then be simply replaced by `#has-ancestor? 1` -- without a performance price -- that would significantly strengthen the case here, too.\r\n\r\n",
            "created_at": "2023-09-28T08:30:52Z",
            "html_url": "https://github.com/neovim/neovim/issues/24965#issuecomment-1738707987",
            "id": 1738707987,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24965",
            "node_id": "IC_kwDOAPphoM5nopQT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1738707987/reactions"
            },
            "updated_at": "2023-09-28T08:34:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1738707987",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Yes, but what concretely would be the limit value? Is this something fixed by the actual query, or just some sort of \"I don't expect that *most* cases will need more than 20...\"\r\n>\r\n> (There's a big difference between an objectively correct value and a fudge factor that needs to be tuned.)\r\n\r\nFor that example, I meant the latter. For something objectively correct, we would need an interface that takes a general predicate on the path to ancestor. This is relatively simple in some cases.\r\n\r\n- Example 1. The c query mentioned above is designed to highlight function call-like attributes, e.g., `aligned` in the following code:\r\n\r\n  ``` c\r\n  struct X {\r\n      int a __attribute__((aligned(4)));\r\n  } __attribute__((aligned(16)));\r\n  ```\r\n\r\n  From [the specification of the attribute syntax](https://gcc.gnu.org/onlinedocs/gcc/Attribute-Syntax.html), it seems that the search should stop on encountering `compound_statement` node (the list of statements wrapped by `{`/`}`). We can use a metadata attribute to specify such behavior:\r\n\r\n  ``` query\r\n  (#set! \"search-break\" \"compound_statement\")\r\n  ```\r\n\r\n  <!-- <https://github.com/tree-sitter/tree-sitter-c/blob/a2b7bac3b313efbaa683d9a276ff63cdc544d960/grammar.js#L287> -->\r\n\r\n- Example 2. This [cpp query](https://github.com/nvim-treesitter/nvim-treesitter/blob/cc2f94ed1dfa008c23e16bbd17f56b967ceb6740/queries/cpp/highlights.scm#L92-L97) highlights namespaced function name in a function call (e.g. `f` in `a::b::c::d::e::f()`). To limit the search to `qualified_identifier` nodes, we can introduce another attribute:\r\n\r\n  ``` query\r\n  ((qualified_identifier\r\n    (identifier) @function.call) @_parent\r\n   (#has-ancestor? @_parent call_expression)\r\n   (#set! \"search-only\" \"qualified_identifier\"))\r\n  ```\r\n\r\nI don't know if such \"per-node\" predicates are sufficient for other cases.\r\n\r\nBut in any case, I think distance limit is good enough even if it can't be totally correct since the worst thing that could happen is just some hightlight going slightly off.\r\n\r\n> Adding yet another variant is a hard \"no\" from me, I'm afraid. If we cannot support this with the current predicate, `#set!` is the correct approach. (If we even need multiple candidates; I can't find an example in nvim-treesitter queries.)\r\n\r\nOr we can make `has-ancestor` always take the limit value and use `0` to denote unlimited search.\r\n\r\n> If `#has-parent?` can then be simply replaced by `#has-ancestor? 1` -- without a performance price -- that would significantly strengthen the case here, too.\r\n\r\nI think that should be fine. In fact that's how `#has-parent?` is implemented in nvim-treesitter. <https://github.com/nvim-treesitter/nvim-treesitter/blob/cc2f94ed1dfa008c23e16bbd17f56b967ceb6740/lua/nvim-treesitter/query_predicates.lua#L96>\r\n",
            "created_at": "2023-10-01T14:03:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/24965#issuecomment-1742091910",
            "id": 1742091910,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24965",
            "node_id": "IC_kwDOAPphoM5n1jaG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1742091910/reactions"
            },
            "updated_at": "2023-10-01T14:03:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1742091910",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19489738?v=4",
                "events_url": "https://api.github.com/users/tomtomjhj/events{/privacy}",
                "followers_url": "https://api.github.com/users/tomtomjhj/followers",
                "following_url": "https://api.github.com/users/tomtomjhj/following{/other_user}",
                "gists_url": "https://api.github.com/users/tomtomjhj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tomtomjhj",
                "id": 19489738,
                "login": "tomtomjhj",
                "node_id": "MDQ6VXNlcjE5NDg5NzM4",
                "organizations_url": "https://api.github.com/users/tomtomjhj/orgs",
                "received_events_url": "https://api.github.com/users/tomtomjhj/received_events",
                "repos_url": "https://api.github.com/users/tomtomjhj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tomtomjhj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tomtomjhj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tomtomjhj"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> For that example, I meant the latter.\r\n\r\nIn which case, wouldn't it be better to just handle this in the predicate handler itself? If we only want to guard against unbounded recursion, we can treat this as a global limit (possibly tunable, similarly to `max_start_depth`).",
            "created_at": "2023-10-01T14:10:01Z",
            "html_url": "https://github.com/neovim/neovim/issues/24965#issuecomment-1742093918",
            "id": 1742093918,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24965",
            "node_id": "IC_kwDOAPphoM5n1j5e",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1742093918/reactions"
            },
            "updated_at": "2023-10-01T14:10:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1742093918",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> In which case, wouldn't it be better to just handle this in the predicate handler itself? If we only want to guard against unbounded recursion, we can treat this as a global limit (possibly tunable, similarly to `max_start_depth`).\r\n\r\nSounds good. I'll try it later when I have time.",
            "created_at": "2023-10-15T06:10:43Z",
            "html_url": "https://github.com/neovim/neovim/issues/24965#issuecomment-1763287121",
            "id": 1763287121,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24965",
            "node_id": "IC_kwDOAPphoM5pGaBR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1763287121/reactions"
            },
            "updated_at": "2023-10-15T06:10:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1763287121",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19489738?v=4",
                "events_url": "https://api.github.com/users/tomtomjhj/events{/privacy}",
                "followers_url": "https://api.github.com/users/tomtomjhj/followers",
                "following_url": "https://api.github.com/users/tomtomjhj/following{/other_user}",
                "gists_url": "https://api.github.com/users/tomtomjhj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tomtomjhj",
                "id": 19489738,
                "login": "tomtomjhj",
                "node_id": "MDQ6VXNlcjE5NDg5NzM4",
                "organizations_url": "https://api.github.com/users/tomtomjhj/orgs",
                "received_events_url": "https://api.github.com/users/tomtomjhj/received_events",
                "repos_url": "https://api.github.com/users/tomtomjhj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tomtomjhj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tomtomjhj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tomtomjhj"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I made a [prototype](https://github.com/vanaigr/neovim-query-proto) that decreases the time to\r\n\r\n```\r\nredrawn 22.87975 {\r\n  [\"any-contains?\"] = 0,\r\n  [\"any-eq?\"] = 0,\r\n  [\"any-lua-match?\"] = 0,\r\n  [\"any-match?\"] = 0,\r\n  [\"any-of?\"] = 0.064202,\r\n  [\"any-vim-match?\"] = 0,\r\n  [\"contains?\"] = 0,\r\n  [\"eq?\"] = 0,\r\n  [\"has-ancestor?\"] = 14.913001,\r\n  [\"has-parent?\"] = 0,\r\n  [\"lua-match?\"] = 0.634667,\r\n  [\"match?\"] = 0,\r\n  [\"vim-match?\"] = 0\r\n}\r\n```\r\n\r\nfrom\r\n\r\n```\r\nredrawn 429.159457 {\r\n  [\"any-contains?\"] = 0,\r\n  [\"any-eq?\"] = 0,\r\n  [\"any-lua-match?\"] = 0,\r\n  [\"any-match?\"] = 0,\r\n  [\"any-of?\"] = 0.283093,\r\n  [\"any-vim-match?\"] = 0,\r\n  [\"contains?\"] = 0,\r\n  [\"eq?\"] = 0,\r\n  [\"has-ancestor?\"] = 421.619772,\r\n  [\"has-parent?\"] = 0,\r\n  [\"lua-match?\"] = 0.48094,\r\n  [\"match?\"] = 0,\r\n  [\"vim-match?\"] = 0\r\n}\r\n```\r\n\r\nby adding a function to tree-sitter.\r\n\r\n`has-ancestor?` is slow because [treesitter's function for getting the node's parent](https://github.com/tree-sitter/tree-sitter/blob/b7fcf9878e1144a30e71ae94f951f163258770d9/lib/src/node.c#L506-L535) has to traverse all parents of the given node (in reverse order) to find the closest one. Since this function is called for every parent, this results in `has-ancestor?` being _n²_ for the number of parents.\r\n\r\nThis can be decreased to _n_ if treesitter exposes a [function to get node's parents in reverse order](https://github.com/vanaigr/tree-sitter/blob/8d1eea9d7f18194bd9f2315fa1c3f6b34dbd966f/lib/src/node.c#L530-L553).\r\n\r\n",
            "created_at": "2024-03-24T18:29:21Z",
            "html_url": "https://github.com/neovim/neovim/issues/24965#issuecomment-2016895131",
            "id": 2016895131,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24965",
            "node_id": "IC_kwDOAPphoM54N2Cb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 6,
                "total_count": 6,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2016895131/reactions"
            },
            "updated_at": "2024-03-24T18:29:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2016895131",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Very nice! Would you care making a PR to tree-sitter? ",
            "created_at": "2024-03-24T18:34:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/24965#issuecomment-2016896388",
            "id": 2016896388,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24965",
            "node_id": "IC_kwDOAPphoM54N2WE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2016896388/reactions"
            },
            "updated_at": "2024-03-24T18:34:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2016896388",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Very nice! Would you care making a PR to tree-sitter?\r\n\r\nYes",
            "created_at": "2024-03-24T18:38:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/24965#issuecomment-2016898154",
            "id": 2016898154,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24965",
            "node_id": "IC_kwDOAPphoM54N2xq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2016898154/reactions"
            },
            "updated_at": "2024-03-24T18:38:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2016898154",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/vanaigr/events{/privacy}",
                "followers_url": "https://api.github.com/users/vanaigr/followers",
                "following_url": "https://api.github.com/users/vanaigr/following{/other_user}",
                "gists_url": "https://api.github.com/users/vanaigr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/vanaigr",
                "id": 65824523,
                "login": "vanaigr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/vanaigr/orgs",
                "received_events_url": "https://api.github.com/users/vanaigr/received_events",
                "repos_url": "https://api.github.com/users/vanaigr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/vanaigr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vanaigr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/vanaigr"
            }
        }
    ],
    "comments": 15,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/24965/comments",
    "created_at": "2023-08-31T18:40:32Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/24965/events",
    "html_url": "https://github.com/neovim/neovim/issues/24965",
    "id": 1876089646,
    "labels": [
        {
            "color": "FEF2C0",
            "default": false,
            "description": "issues reporting performance problems",
            "id": 101930601,
            "name": "performance",
            "node_id": "MDU6TGFiZWwxMDE5MzA2MDE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/performance"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1799626557,
            "name": "treesitter",
            "node_id": "MDU6TGFiZWwxNzk5NjI2NTU3",
            "url": "https://api.github.com/repos/neovim/neovim/labels/treesitter"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/24965/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM5v0tsu",
    "number": 24965,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/24965/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/24965/timeline",
    "title": "Poor performance with Treesitter highlighting on deep if-else in c",
    "updated_at": "2024-05-16T14:57:59Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/24965",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/4508793?v=4",
        "events_url": "https://api.github.com/users/kaddkaka/events{/privacy}",
        "followers_url": "https://api.github.com/users/kaddkaka/followers",
        "following_url": "https://api.github.com/users/kaddkaka/following{/other_user}",
        "gists_url": "https://api.github.com/users/kaddkaka/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/kaddkaka",
        "id": 4508793,
        "login": "kaddkaka",
        "node_id": "MDQ6VXNlcjQ1MDg3OTM=",
        "organizations_url": "https://api.github.com/users/kaddkaka/orgs",
        "received_events_url": "https://api.github.com/users/kaddkaka/received_events",
        "repos_url": "https://api.github.com/users/kaddkaka/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/kaddkaka/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kaddkaka/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/kaddkaka"
    }
}