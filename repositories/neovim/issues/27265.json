{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\n\nI'm trying to detect the filetype using `vim.filetype.match()` based on the `filename`. However, I've noticed that it fails to detect some filetypes when no buffer is specified.\n\n### Steps to reproduce\n\nI expected a file with the \".ts\" extension to be detected as TypeScript, but in fact, it might be detected as XML depending on the buffer content.\r\n\r\nhttps://github.com/neovim/neovim/blob/4ffc20c9515294481486e81271a8edeeff203140/runtime/lua/vim/filetype.lua#L1031\r\n\r\nIn this case, when no `bur` is specified, the getting of buffer contents fails, and the filetype is not detected.\r\n\r\n```lua\r\nvim.filetype.match({ filename = 'index.ts', contents = {} }) -- => nil\r\n```\r\n\r\nhttps://github.com/neovim/neovim/blob/4ffc20c9515294481486e81271a8edeeff203140/runtime/lua/vim/filetype.lua#L2208-L2216\n\n### Expected behavior\n\nWhen no `buf` is specified, it is better to assume an empty buffer (or a buffer of `contents`) is passed and detect the filetype.\n\n### Neovim version (nvim -v)\n\nNVIM v0.10.0-dev-2244+g8bc578512\n\n### Vim (not Nvim) behaves the same?\n\nno\n\n### Operating system/version\n\nLinux 6.1.67-gentoo x86_64 GNU/Linux\n\n### Terminal name/version\n\nalacritty\n\n### $TERM environment variable\n\nxterm-256color\n\n### Installation\n\nbuild from repo",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "This was intentional, although I forget the exact technical reason. If you think you can make it work (without failing all existing tests), PR welcome!",
            "created_at": "2024-01-30T07:41:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/27265#issuecomment-1916244602",
            "id": 1916244602,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27265",
            "node_id": "IC_kwDOAPphoM5yN5J6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1916244602/reactions"
            },
            "updated_at": "2024-01-30T07:41:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1916244602",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Thinking more about it, I believe the situation was as follows:\r\n* the dispatch mechanism (needed to support user-extensible content-aware checks) is built around actual buffers; making it work with buffers _or_ strings massively complicates a neuralgic API;\r\n* this means one would have to open a scratch buffer with the provided contents, pass that to the dispatched detection function, and then clean up afterwards;\r\n* this was deemed too much work for a use case that was considered niche and hence was left out until someone provided a compelling example of such a use case.\r\n\r\nTL;DR: What's your use case here exactly?",
            "created_at": "2024-01-30T17:19:24Z",
            "html_url": "https://github.com/neovim/neovim/issues/27265#issuecomment-1917527569",
            "id": 1917527569,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27265",
            "node_id": "IC_kwDOAPphoM5ySyYR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1917527569/reactions"
            },
            "updated_at": "2024-01-30T17:19:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1917527569",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">the dispatch mechanism (needed to support user-extensible content-aware checks) is built around actual buffers; making it work with buffers or strings massively complicates a neuralgic API\r\n\r\nThis is correct, though I do think it might be possible to address cases like this where the buffer is invalid/does not exist and fallback to a default value.\r\n\r\nI say \"might be possible\" because it will not always be obvious what the fallback/default value should be. In a case like this, with a `.ts` filename, \"typescript\" is the obvious choice for a default value over XML, but there are other filetypes where it's not as obvious. In those cases we need to decide what should be done.",
            "created_at": "2024-01-30T17:41:34Z",
            "html_url": "https://github.com/neovim/neovim/issues/27265#issuecomment-1917566252",
            "id": 1917566252,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27265",
            "node_id": "IC_kwDOAPphoM5yS70s",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1917566252/reactions"
            },
            "updated_at": "2024-01-30T17:41:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1917566252",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "My preference would be \"all or nothing\" here: if there's a compelling use case for \"contents but no buffer\", then we should implement this properly (hopefully without affecting the general performance). I'd be fine if that case isn't aggressively optimized (i.e., always creates a buffer even if the detection looks at filename alone).\r\n\r\nOtherwise we'd just be adding special cases on top of special cases...",
            "created_at": "2024-01-30T17:45:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/27265#issuecomment-1917572959",
            "id": 1917572959,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27265",
            "node_id": "IC_kwDOAPphoM5yS9df",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1917572959/reactions"
            },
            "updated_at": "2024-01-30T17:46:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1917572959",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        }
    ],
    "comments": 4,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/27265/comments",
    "created_at": "2024-01-30T06:59:12Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/27265/events",
    "html_url": "https://github.com/neovim/neovim/issues/27265",
    "id": 2107091711,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "filetype detection, filetype.lua",
            "id": 3708202139,
            "name": "filetype",
            "node_id": "LA_kwDOAPphoM7dBqyb",
            "url": "https://api.github.com/repos/neovim/neovim/labels/filetype"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/27265/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 599,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk"
        },
        "description": "Low priority. Not planned for the current target, may be reassigned.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 424,
        "state": "open",
        "title": "backlog",
        "updated_at": "2024-02-05T01:01:45Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "I_kwDOAPphoM59l6r_",
    "number": 27265,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/27265/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/27265/timeline",
    "title": "Filetype detection by `vim.filetype.match` will fail in some cases when no buffer is specified",
    "updated_at": "2024-01-30T17:46:47Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/27265",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/188621?v=4",
        "events_url": "https://api.github.com/users/emonkak/events{/privacy}",
        "followers_url": "https://api.github.com/users/emonkak/followers",
        "following_url": "https://api.github.com/users/emonkak/following{/other_user}",
        "gists_url": "https://api.github.com/users/emonkak/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/emonkak",
        "id": 188621,
        "login": "emonkak",
        "node_id": "MDQ6VXNlcjE4ODYyMQ==",
        "organizations_url": "https://api.github.com/users/emonkak/orgs",
        "received_events_url": "https://api.github.com/users/emonkak/received_events",
        "repos_url": "https://api.github.com/users/emonkak/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/emonkak/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/emonkak/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/emonkak"
    }
}