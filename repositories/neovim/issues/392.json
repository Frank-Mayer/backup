{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "VimL to lua translator parser though incomplete yet has reached the state when you can get some meaningful translation results. Thus I have some questions about how the result should look like:\n\nConsider the following VimL code\n\n``` VimL\nfunction Error()\n    throw 'E42'\nendfunction\nfunction A()\n    try\n        while 1\n            echo 'HERE0'\n            if Error()\n                let a = 1 + 1\n                return 1\n            endif\n        endwhile\n    catch /^E42/\n        echo HERE 'HERE'\n    finally\n        echo 'THERE'\n    endtry\n    echo 'THERE2'\nendfunction\ncall A()\n```\n\n. It can be translated to the following Lua:\n\n``` Lua\nf.Error = function(state)\n    vim.commands.throw(state, 'E42')\n    return vim.zero\nend\nf.A = function (state)\n    local l = vim.scope()\n    local ok, err, return_value_1 = pcall((function (state)\n        while (vim.number(\"1\")) do\n            vim.commands.echo(state, 'HERE0')\n            if f.Error(state) then\n                l.a = vim.add(state, vim.number(\"1\"), vim.number(\"1\"))\n                return vim.number(\"1\")\n            end\n        end\n        return nil\n    end), vim.trying(state))\n    err = vim.get_error(err)\n    local fin = function()\n        vim.commands.echo(state, 'THERE')\n        return nil\n    end\n    if (not ok) then\n        if (vim.error_matches(state, err, '^E42')) then\n            vim.commands.echo(state, l.HERE, 'HERE')\n        else\n            return_value_2 = fin()\n            error(err)\n        end\n    end\n    return_value_2 = fin()\n    if (return_value_2 ~= nil) then\n        return return_value_2\n    end\n    if (return_value_1 ~= nil) then\n        return return_value_1\n    end\n    vim.commands.echo(state, 'THERE2')\n    return vim.zero\nend\nf.A(state)\n```\n\nQuestions:\n1. I had to use `vim.add` in place of `1 + 1`. Reasoning: `a + b` generally may fail, but the results of the failure depend on `state.trying`, so I can’t just use `a + b`. Vim uses global trylevel, but we don’t need globals. Wondering whether it should be kept as-is, numbers (and other VimL values) should receive a metatable which handles such situations based on thread-local state or anybody has better idea.\n2. `vim.zero`: I cannot use lua numbers because lua does not have integers and there are significant differences in integers and floats: like `string(1.0) !=string(1)`, `1.0 . \"abc\"` is error and so on. So I probably will have to do like python does: pregenerate a number of integers. All new integers are lua userdata.\n   \n   Alternative: luajit has 64-bit integers. They cannot be used in their condition (`1LL + 1.0` is `2LL`, but should be `2.0`), but maybe someone more experienced can tell how they did this and whether we can do the same: extend Lua syntax to accept new literals. Or at least use whatever they used (I heard a word “liteuserdata”) to implement our integers, still using `vim.number(\"1.0\")`. This means though that we throw away lua support, sticking with luajit (currently only tests require luajit).\n3. As something may fail while execution continues `l.a` need to be a table with special metatable which restricts `nil` values (`vim.add()` will return `nil` on failure) from being added. In any case `l` has to have a different metatable because it should restrict locked variables from being overwritten and throw proper errors if variable was not found.\n4. Globals. I did not ever work with embedding lua so I wonder whether I can just make things like options pseudo-table global variable. I.e. does embedding new vim instance mean new lua interpreter instance or not.\n5. `:try` block produces rather bloated code. Any ideas on how to make it less bloated?\n6. Non-fatal errors are represented as `nil` values. Any operation on a `nil` value produces a `nil` value. But this still adds incompatibility: all operands are computed, while in Vim if there is error on one side of addition other side is not computed. So I probably have to stick with `vim.add`, but make it look like `vim.add(state, op1, op2func, op2arg1, …)`.\n7. Lua prepends the location of the error to the error message. So I have to use error marker. But location of the error include file name. So I use NUL as a error marker as it is the only character which ultimately cannot be contained in a filename or in a error string. Any better ideas?\n\n(axillary definitions that are needed to make this run:\n\n``` Lua\nvim = {\n    add=function(state, a1, a2) return a1 + a2 end,\n    number=function(n) return tonumber(n) end,\n    dictionary=function(d) return d end,\n    scope=function() return vim.dictionary({}) end,\n    trying=function(state)\n        local new_s = {}\n        for k, v in pairs(state) do\n            new_s[k] = v\n        end\n        new_s.trying = true\n        return new_s\n    end,\n    message=function(state, m)\n        if not state.silent then\n            print (m)\n        end\n    end,\n    get_error=function(err)\n        return err:gsub('.*%x00', '')\n    end,\n    error_matches=function(state, str, pattern)\n        return str:match(pattern)\n    end,\n    commands={\n        echo=function(state, ...)\n            local m = ''\n            for i, v in ipairs{...} do\n                if (i > 1) then\n                    m = m .. ' '\n                end\n                m = m .. v\n            end\n            vim.message(state, m)\n        end,\n        throw=function(state, m)\n            if (state.trying) then\n                error('\\0'..m)\n            else\n                vim.message(state, m)\n            end\n        end,\n    }\n}\nf = {}\nstate = {trying=false, silent=false}\nvim.zero = vim.number(\"0\")\n```\n\n<bountysource-plugin>\n\n---\n\nWant to back this issue? **[Place a bounty on it!](https://www.bountysource.com/issues/1445745-rfc-results-of-translation?utm_campaign=plugin&utm_content=tracker%2F461131&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F461131&utm_medium=issues&utm_source=github).\n</bountysource-plugin>\n",
    "closed_at": "2021-11-30T21:46:41Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
        "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
        "followers_url": "https://api.github.com/users/bfredl/followers",
        "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
        "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/bfredl",
        "id": 1363104,
        "login": "bfredl",
        "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
        "organizations_url": "https://api.github.com/users/bfredl/orgs",
        "received_events_url": "https://api.github.com/users/bfredl/received_events",
        "repos_url": "https://api.github.com/users/bfredl/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/bfredl"
    },
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "I agree the integers<->doubles problem is troublesome. First of all: what kind of bad things would happen if we just used lua numbers for everything? They should be able to represent most things (53 bits...), do vimscript integers have more than 32 bits?\n\nIt might be possible to create a metatype that does what we want, at (possibly) a serious performance cost. I've been experimenting:\n\n``` lua\nlocal ffi = require(\"ffi\")\n\n-- unfortunately we can't do \"typedef int64_t cint;\" to create a metatype.\n-- As per http://luajit.org/ext_ffi_api.html, thus we have to manually\n-- box/unbox on top of the boxing luajit already does, this is not very\n-- efficient of course. This also means that these integers will be\n-- allocated on the heap (in LuaJIT, scalar values on the stack have no\n-- metatable). This will be horrible, performance-wise.\nffi.cdef[[\ntypedef struct { int64_t x; } bint;\n]]\n\nlocal i64 = ffi.typeof(\"int64_t\")\nlocal mi64 -- to be defined later\n\nlocal function typeinfo(v)\n    local suf = \"     \"\n\n    if ffi.istype(\"bint\", v) then\n        suf = \"/bint \"\n    elseif type(v) == \"cdata\" then\n        suf = \"/ljint\"\n    end\n\n    return type(v) .. suf\nend\n\n-- unpack the struct to reveal the value (if necessary)\nlocal function val(v)\n    if ffi.istype(\"bint\", v) then\n        return v.x\n    end\n    return v\nend\n\n-- repack the value into a struct (if necessary)\nlocal function repack(v)\n    if type(v) == \"number\" then\n        return v\n    end\n    return mi64(v)\nend\n\nlocal function convert(a, b)\n    if type(a) == \"cdata\" and type(b) == \"cdata\" then\n        return a, b\n    end\n\n    return tonumber(a), tonumber(b)\nend\n\n-- conversion/casting rules\n-- [i] + [i] = [i]\n-- [f] + [t] = [f]\n-- [f] + [f] = [f]\nlocal mt = {\n    __add = function(a, b)\n        -- print(\"received:\", typeinfo(a), typeinfo(b))\n        -- unpack the struct if necessary\n        a, b = val(a), val(b)\n\n        -- print(\"unpacked:\", typeinfo(a), typeinfo(b))\n\n        -- cast based on the rules\n        a, b = convert(a, b)\n\n        -- print(\"cast:    \", typeinfo(a), typeinfo(b))\n\n        return repack(a + b)\n    end,\n    __sub = function(a, b)\n        local r = reduce(a) - reduce(b)\n        return vimcast(r, a, b)\n    end,\n    __tostring = function(v)\n        return tostring(v.x)\n    end,\n}\nmi64 = ffi.metatype(\"bint\", mt)\n\nlocal atoms = {\n    {\"luajit 64-bit int  \", 1LL},\n    {\"ctype 64-bit int   \", i64(1)},\n    {\"metatype 64-bit int\", mi64(1)},\n    {\"lua number         \", 1},\n}\n\nlocal function test(n)\n    print(\"add the lua number\", n)\n    for _, atom in pairs(atoms) do\n        local desc, a = atom[1], atom[2]\n        local v = a + n\n        local s = \"%s + %s => %s\"\n        s = s:format(typeinfo(a), typeinfo(n), typeinfo(v))\n        print(\"    \" .. desc .. \" + lua number\", v, s)\n    end\n\n    n = mi64(n)\n    print(\"add the new metatype\", n)\n\n    for _, atom in pairs(atoms) do\n        local desc, a = atom[1], atom[2]\n        local v = a + n\n        print(\"    \" .. desc .. \" + metatype\", v, typeinfo(v))\n    end\nend\n\ntest(1.0)\nprint(\"\\n\")\ntest(3.14)\n```\n",
            "created_at": "2014-03-23T00:17:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-38369057",
            "id": 38369057,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzY5MDU3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38369057/reactions"
            },
            "updated_at": "2014-03-23T00:17:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38369057",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "And the output from running this:\n\n``` javascript\nadd the lua number      1\n    luajit 64-bit int   + lua number    2LL     cdata/ljint + number      => cdata/ljint\n    ctype 64-bit int    + lua number    2LL     cdata/ljint + number      => cdata/ljint\n    metatype 64-bit int + lua number    2       cdata/bint  + number      => number\n    lua number          + lua number    2       number      + number      => number\nadd the new metatype    1LL\n    luajit 64-bit int   + metatype      2LL     cdata/bint\n    ctype 64-bit int    + metatype      2LL     cdata/bint\n    metatype 64-bit int + metatype      2LL     cdata/bint\n    lua number          + metatype      2       number\n\n\nadd the lua number      3.14\n    luajit 64-bit int   + lua number    4LL     cdata/ljint + number      => cdata/ljint\n    ctype 64-bit int    + lua number    4LL     cdata/ljint + number      => cdata/ljint\n    metatype 64-bit int + lua number    4.14    cdata/bint  + number      => number\n    lua number          + lua number    4.14    number      + number      => number\nadd the new metatype    3LL\n    luajit 64-bit int   + metatype      4LL     cdata/bint\n    ctype 64-bit int    + metatype      4LL     cdata/bint\n    metatype 64-bit int + metatype      4LL     cdata/bint\n    lua number          + metatype      4       number\n```\n\nThe rows mentioning the \"metatype\" are the ones that use the thing I was experimenting with, the rest are default lua/luajit types.\n\n**EDIT**: I also came upon this SO answer where the OP wants something similar to us: http://stackoverflow.com/questions/4484437/lua-integer-type\n\nI think a C module might not be a bad way to go either. It would probably be way faster than the cdata abuse I tried.\n\nAnd some other crazy stuff: http://stackoverflow.com/questions/3104722/does-lua-make-use-of-64-bit-integers?rq=1\n",
            "created_at": "2014-03-23T00:20:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-38369090",
            "id": 38369090,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzY5MDkw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38369090/reactions"
            },
            "updated_at": "2014-03-23T00:37:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38369090",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "23.03.14, 04:18, \"Nicolas Hillegeer\" notifications@github.com\":\n\n> I agree the integers<->doubles problem is troublesome. First of all: what kind of bad things would happen if we just used lua numbers for everything? They should be able to represent most things (53 bits...), do vimscript integers have more than 32 bits?\n\nVim help claims they may (:h Number). On my system (arch is amd64 and every app except for some Steam games are 64-bit) vim truncates LONG_MAX if I place it into the assignment, INT_MAX + 1 is the usual (-1).\n\nThe bad things are that certain operations cannot be performed on floats (e.g. concat or any operation involving strings), string() representation is different, printf() does not convert floats to numbers with error (using Float as Number). The most harmful are string() and, especially, type(): it is unlikely that some random developer that uses floats cares about all those errors, but it is not unlikely that he uses type() and string(). Incorrect former means that execution flow may change in an unexpected way. Latter may be problematic if used for external utilities: it is very common to have 1.0/2.0 output different result then 1/2. Or if string() output is posted into buffer suddenly changing type of the variable.\n\n> It might be possible to create a metatype that does what we want, at (possibly) a serious performance cost.\n\nIt will definitely be a C extension. But if I am not mistaking some optimizations (e.g. constant folding) may be lost. Does luajit allow marking some functions as \"pure\" (and does it have necessary optimizations so that such marking makes sense)?\n\n> I've been experimenting:local ffi = require(\"ffi\")-- unfortunately we can't do \"typedef int64_t cint;\" to create a metatype.-- As per http://luajit.org/ext_ffi_api.html, thus we have to manually-- box/unbox on top of the boxing luajit already does, this is not very-- efficient of course. This also means that these integers will be-- allocated on the heap (in LuaJIT, scalar values on the stack have no-- metatable). This will be horrible, performance-wise.ffi.cdef[[typedef struct { int64_t x; } bint;]]local i64 = ffi.typeof(\"int64_t\")local mi64 -- to be defined laterlocal function typeinfo(v)    local suf = \"     \"    if ffi.istype(\"bint\", v) then        suf = \"/bint \"    elseif type(v) == \"cdata\" then        suf = \"/ljint\"    end    return type(v) .. sufend-- unpack the struct to reveal the value (if necessary)local function val(v)    if ffi.istype(\"bint\", v) then        return v.x    end    return vend-- repack the value into a struct (if necessary)local function repack(v)    if type(v) == \"number\" then        return v    end    return mi64(v)endlocal function convert(a, b)    if type(a) == \"cdata\" and type(b) == \"cdata\" then        return a, b    end    return tonumber(a), tonumber(b)end-- conversion/casting rules-- [i] + [i] = [i]-- [f] + [t] = [f]-- [f] + [f] = [f]local mt = {    __add = function(a, b)        -- print(\"received:\", typeinfo(a), typeinfo(b))        -- unpack the struct if necessary        a, b = val(a), val(b)        -- print(\"unpacked:\", typeinfo(a), typeinfo(b))        -- cast based on the rules        a, b = convert(a, b)        -- print(\"cast:    \", typeinfo(a), typeinfo(b))        return repack(a + b)    end,    __sub = function(a, b)        local r = reduce(a) - reduce(b)        return vimcast(r, a, b)    end,    __tostring = function(v)        return tostring(v.x)    end,}mi64 = ffi.metatype(\"bint\", mt)local atoms = {    {\"luajit 64-bit int  \", 1LL},    {\"ctype 64-bit int   \", i64(1)},    {\"metatype 64-bit int\", mi64(1)},    {\"lua number         \", 1},}local function test(n)    print(\"add the lua number\", n)    for _, atom in pairs(atoms) do        local desc, a = atom[1], atom[2]        local v = a + n        local s = \"%s + %s => %s\"        s = s:format(typeinfo(a), typeinfo(n), typeinfo(v))        print(\"    \" .. desc .. \" + lua number\", v, s)    end    n = mi64(n)    print(\"add the new metatype\", n)    for _, atom in pairs(atoms) do        local desc, a = atom[1], atom[2]        local v = a + n        print(\"    \" .. desc .. \" + metatype\", v, typeinfo(v))    endendtest(1.0)print(\"\\n\")test(3.14)\n> —\n> Reply to this email directly or view it on GitHub.\n\n## \n\nSent from Yandex.Mail for mobile: http://m.ya.ru/ymail\n",
            "created_at": "2014-03-23T00:58:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-38369740",
            "id": 38369740,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzY5NzQw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38369740/reactions"
            },
            "updated_at": "2014-03-23T00:58:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38369740",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> It will definitely be a C extension. But if I am not mistaking some optimizations (e.g. constant folding) may be lost. Does luajit allow marking some functions as \"pure\" (and does it have necessary optimizations so that such marking makes sense)?\n\nIf we're going with a C extension, the JIT will be disabled for those functions as far as I remember. It might even be worse and disable the JIT for every function that directly calls one of those functions, I think we should ask the LuaJIT mailing list what the best way to go forward is here. Noone better than @MikePall to have a look at our predicament.\n",
            "created_at": "2014-03-23T08:01:15Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-38376498",
            "id": 38376498,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4Mzc2NDk4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38376498/reactions"
            },
            "updated_at": "2014-03-23T08:01:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38376498",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@ZyX-I  great job. Even if the code generated by your translator runs slower than the current vimscript implementaion(which I think it's very unlikely), it still should simplify current codebase, which I think is the greatest advantage of translating VimL to Lua.\n\nDon't waste your time trying to optimize types. If vimscript needs more precision than what lua numbers provide, just create a custom type that represents it as an array of 32 bit integers for large values. I think there may be some arbitrary-precision integer library for lua if you don't want to implement it yourself.\n\nI don't know how the luajit trace compiler works exactly(didnt read the code yet) but my guess is that it does type specialization based on runtime statistics(lj_record.c `sloadt` function). I think that when it finds an `a + b` expression it will eventually compile an optimized code path for it that uses a native ADD instruction(It asserts assumptions made by the generated code before executing it). So it probably wont matter if you implement big number arithmetic, if both `a` and `b` are often small integers(represented by native lua numbers), fast code will be generated\n\nInstead of using a local scope table, why don't you create a local `a` declaration for `let a = 1 + 1`? I may be wrong, but there's probably no need to implement runtime code related to scoping. When parsing the body of a function, you can detect the use of `a:0`, `a:1` etc, and generate a function with a variable number of arguments. If you need local variables for storing errors etc, just namespace the variables. For example, the local variable `a` should compile to `local_a`, the same logic should apply to arguments. This approach will probably yield better optimizations by luajit.\n\nWhile there are semantic differences between vimscript and lua, you should try to minimize dependency on runtime support. You may benefit from reading coffeescript source code, its very small(I think less than 4k sloc) and may provide some ideas.\n\nI also recommend you to reduce as much C code as possible, using C only to bridge with vim. Functions such as `add()` can easily be implemented in pure lua. The same goes for builtin ex commands.\n\nIt would be great if @MikePall could give some feedback on this(and correct any wrong assumptions I made)\n",
            "created_at": "2014-03-23T10:41:24Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-38378962",
            "id": 38378962,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4Mzc4OTYy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38378962/reactions"
            },
            "updated_at": "2014-03-23T10:41:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38378962",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@tarruda reasonably sure Mike doesn't access his github account anymore (probably because of numerous mails becaumse of @-mentions :), so I'm thinking we should definitely write to the LuaJIT mailing list once we've got a few concrete questions and can show we've researched it. I'm thinking the **double <-> int** issue is a good candidate.\n",
            "created_at": "2014-03-23T10:44:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-38379043",
            "id": 38379043,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4Mzc5MDQz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38379043/reactions"
            },
            "updated_at": "2014-03-23T10:44:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38379043",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I would also like to ask @ZyX-I  under what conditions `a + b` fails where it doesn't fail with lua? For example adding a lua number + a function produces an error, just like in vim.\n",
            "created_at": "2014-03-23T10:49:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-38379141",
            "id": 38379141,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4Mzc5MTQx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38379141/reactions"
            },
            "updated_at": "2014-03-23T10:50:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38379141",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> When parsing the body of a function, you can detect the use of a:0, a:1 etc, and generate a function with a variable number of arguments.\n\nFunctions with a variable number of arguments are detected by `...` in them, there is no need in such detection. `a:000`, `a:0` and `a:firstline`/`a:lastline` are created for each funccall no matter what.\n\n> For example, the local variable a should compile to local_a, the same logic should apply to arguments. This approach will probably yield better optimizations by luajit.\n\nUsing tables means that errors like `E704: Function variable name must start with a capital` can be simulated. Though it is only possible with TLS, otherwise any assignment should be `vim.assign(state, l, name, value)`.\n",
            "created_at": "2014-03-23T10:57:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-38379275",
            "id": 38379275,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4Mzc5Mjc1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38379275/reactions"
            },
            "updated_at": "2014-03-23T10:57:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38379275",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Using tables means that errors like E704: Function variable name must start with a capital can be simulated\n\nWhy is that? Can't this kind of error be thrown during parse stage?\n",
            "created_at": "2014-03-23T11:13:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-38379554",
            "id": 38379554,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4Mzc5NTU0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38379554/reactions"
            },
            "updated_at": "2014-03-23T11:13:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38379554",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I would also like to ask @ZyX-I under what conditions a + b fails where it doesn't fail with lua? For example adding a lua number + a function produces an error, just like in vim.\n\nAny condition where you try to add (to) a value not coercible to integer, with the exception of adding two lists. Such values are funcrefs, lists and dictionaries. Integer overflow is not a failure, though you may safely call it “undefined behavior”: nothing in vim help promises integer overflow will work in a specific fashion and in C it is UB to overflow a signed integer.\n",
            "created_at": "2014-03-23T11:15:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-38379619",
            "id": 38379619,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4Mzc5NjE5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38379619/reactions"
            },
            "updated_at": "2014-03-23T11:15:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38379619",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Why is that? Can't this kind of error be thrown during parse stage?\n\n```\nfunction A(a)\n    let a=a:a\nendfunction\n```\n\nOf course no.\n",
            "created_at": "2014-03-23T11:16:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-38379636",
            "id": 38379636,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4Mzc5NjM2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38379636/reactions"
            },
            "updated_at": "2014-03-23T11:16:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38379636",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Of course no.\n\nI don't understand your example, why can't we detect the error during parsing?\n",
            "created_at": "2014-03-23T11:19:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-38379686",
            "id": 38379686,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4Mzc5Njg2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38379686/reactions"
            },
            "updated_at": "2014-03-23T11:19:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38379686",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I don't understand your example, why can't we detect the error during parsing?\n\n`a:a` is not an error. But it may hold a funcref. How are you going to detect the error?\n",
            "created_at": "2014-03-23T11:27:19Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-38379814",
            "id": 38379814,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4Mzc5ODE0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38379814/reactions"
            },
            "updated_at": "2014-03-23T11:27:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38379814",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> a:a is not an error. But it may hold a funcref. How are you going to detect the error?\n\nI understand now. Is there some reason as to why functions can't be named with lower case? If not we might as well disable that error and let programmers write functions in lowercase, shadowing builtin functions if that's the case.\n",
            "created_at": "2014-03-23T11:33:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-38379932",
            "id": 38379932,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4Mzc5OTMy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38379932/reactions"
            },
            "updated_at": "2014-03-23T11:33:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38379932",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "E704/E705 though are there because Vim always tries to find function name in a scope dictionary before using user functions, we can just reverse the order of searching: first built-ins, then local scope (this will fix a number of plugins that use variables like `F` to temporary hold a funcref which is incorrect because they will stop working once somebody defines function `F`) (only if inside a function), then user functions, then global scope (only if not inside a function).\n\nBut I have another problem for `l`: curly braces names. You can compile `a{\"bc\"}` to `l['a'..\"bc\"]`, but you cannot do this with local variables: `debug.getlocal()`/`debug.setlocal()` is the only variant here and I assume `debug` is not something you want and `assert(loadstring())()` does not have access to local scope.\n",
            "created_at": "2014-03-23T11:37:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-38380026",
            "id": 38380026,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzgwMDI2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38380026/reactions"
            },
            "updated_at": "2014-03-23T11:37:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38380026",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "And two other reasons:\n1. There are `l:` and `g:` scope dictionaries. You must support them and it is not possible if you do not use `debug.` wrapper or tables.\n2. There is “E461: illegal variable name” which requires table with special metatable. Do not say “parsing time”, you cannot do this with `l:[0]` or `l:{0}`.\n",
            "created_at": "2014-03-23T11:53:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-38380318",
            "id": 38380318,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzgwMzE4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38380318/reactions"
            },
            "updated_at": "2014-03-23T11:53:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38380318",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">  debug.getlocal()/debug.setlocal() is the only variant here and I assume debug is not something you want and assert(loadstring())() does not have access to local scope.\n\nHow about generating `debug.{g,s}etlocal` calls only when curly brace names are used?\n",
            "created_at": "2014-03-23T11:53:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-38380321",
            "id": 38380321,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzgwMzIx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38380321/reactions"
            },
            "updated_at": "2014-03-23T11:53:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38380321",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Fourth: You have seen nested lambdas that are going to be used for exception handling. But they cannot define local variable in the outer function. And parser cannot list all local variables that are going to be defined: curly braces names.\n",
            "created_at": "2014-03-23T11:57:01Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-38380388",
            "id": 38380388,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzgwMzg4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38380388/reactions"
            },
            "updated_at": "2014-03-23T11:57:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38380388",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@tarruda Correct me if I mistaking, but `debug.setlocal` cannot define a new variable. And it seems to be super slow because it uses internal variables indexes and not variable names.\n",
            "created_at": "2014-03-23T11:58:19Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-38380411",
            "id": 38380411,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzgwNDEx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38380411/reactions"
            },
            "updated_at": "2014-03-23T11:58:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38380411",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "And you still have to answer about scope dictionaries. Function that returns its scope dictionary is a completely valid function, but `debug.*local` will stop working when it exits.\n",
            "created_at": "2014-03-23T11:59:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-38380442",
            "id": 38380442,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzgwNDQy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38380442/reactions"
            },
            "updated_at": "2014-03-23T11:59:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38380442",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "And lua reference explicitly forbids using `debug.*` for non-debugging purposes:\n\n> The functions provided here should be used exclusively for debugging and similar tasks, such as profiling. Please resist the temptation to use them as a usual programming tool: they can be very slow.  Moreover, several of these functions violate some assumptions about Lua code (e.g., that variables local to a function cannot be accessed from outside or that userdata metatables cannot be changed by Lua code) and therefore can compromise otherwise secure code. \n",
            "created_at": "2014-03-23T12:05:21Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-38380566",
            "id": 38380566,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzgwNTY2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38380566/reactions"
            },
            "updated_at": "2014-03-23T12:05:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38380566",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "How about translating like this:\n\n`let a = a:a` -> `local_a = args_a`\n`let a{\"b\"}c = 1` -> `(dynamic_var_table or {})[\"a\"..b..\"c\"] = 1`\n\n`dynamic_var_table` would be a local variable declared at the function, containing values for variables that can't be determined at parse-time. It's assigned the first time it's used and it would be used instead of `debug`. Returning the local table would mean merging the contents of the lua  variables with the variables in `dynamic_var_table`\n",
            "created_at": "2014-03-23T12:05:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-38380569",
            "id": 38380569,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzgwNTY5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38380569/reactions"
            },
            "updated_at": "2014-03-23T12:05:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38380569",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Actually the correct translation would be:\n`let a{\"b\"}c = 1``->``(dynamic_var_table or (dynamic_var_table = {}))[\"a\"..b..\"c\"] = 1``\n",
            "created_at": "2014-03-23T12:12:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-38380723",
            "id": 38380723,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzgwNzIz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38380723/reactions"
            },
            "updated_at": "2014-03-23T12:12:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38380723",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "How do you return the scope dictionary in vim?\n",
            "created_at": "2014-03-23T12:17:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-38380832",
            "id": 38380832,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzgwODMy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38380832/reactions"
            },
            "updated_at": "2014-03-23T12:17:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38380832",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "“Returning the local table”? You may have `eval(\"l:\")` in the middle of the expression. Or like me: I used `extend(l:, {…})` as an optimization. Inside second argument to `map`, which is essentially the same as `eval()` argument. This means that each variable access is always first access to dynamic_var_table. Because I cannot correctly detect where I possibly used `l:`.\n\nAnd last, but not least: “E741: Value is locked” error. You must not throw it away because it is a result of a programmer will: he may choose to lock some variable. It cannot be fixed with dynamic_var_table. Without TLS it forbids using direct assignments as well: only `vim.assign`. More interesting facts: you can lock the variable while calculating value that is to be assigned (I doubt anybody actually uses this though).\n\nI understand that one may still use locals and wrap each code in `if (not locked(\"a\"))`. Then take dynamic_var_table and save all locks there. Do not forget to update dynamic_var_table before each expression with `l:` or some sort of `eval()`. Switch to using `dynamic_var_table` after expressions with `l:` or some sort of `eval()`. I guess I do not need to continue: using lua local variables will greatly increase the codebase of the translator. And greatly increase the resulting code. So I am not going to use them.\n",
            "created_at": "2014-03-23T12:24:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-38380946",
            "id": 38380946,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzgwOTQ2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38380946/reactions"
            },
            "updated_at": "2014-03-23T12:24:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38380946",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@tarruda `return l:`. Same works for `a:`, `g:`, `s:`, `v:`, `b:` (also `getbufvar(bufnr, '')`), `w:` (also `getwinvar(winnr, '')`), `t:` (but _not_ with `gettabvar()`).\n",
            "created_at": "2014-03-23T12:25:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-38380974",
            "id": 38380974,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzgwOTc0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38380974/reactions"
            },
            "updated_at": "2014-03-23T12:25:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38380974",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Here's another possibility:\n\nWhen parsing functions you can search for calls to `:lock`, curly brace names, scope dictionary, `eval` or any other mechanism that VimL provides for accessing or changing program metadata, if the function uses any of these mechanisms, you generate an \"unoptimized\" function that stores local variables using tables.\n\nThis way it would be possible to get the best of two worlds. VimL programmers wanting to optimize their code could just avoid these facilities.\n\nWhat do you think?\n",
            "created_at": "2014-03-23T12:36:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-38381184",
            "id": 38381184,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzgxMTg0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38381184/reactions"
            },
            "updated_at": "2014-03-23T12:36:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38381184",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "That this is not going to happen in the first version of the translator.\n\n> VimL programmers wanting to optimize their code could just avoid these facilities.\n\nYou sound like if anybody is going to optimize code for Neovim. Generic rule for VimL optimization in _Vim_: the less Ex commands the better. If you can reduce the `:while` cycle to two Ex commands: `:while` with a very, very big condition with side effects that uses `extend(l:)` and `:endwhile`, then you should do it. If you can replace `:for` or `:while` with `map()` or `filter()` then you should do it. If you can use curly braces name in place of `if` then you should do it. So VimL programmers wanting to optimize their code _will_ try to use _exclusively_ these facilities.\n\nSo optimizing these facilities is the second priority after optimizing regular VimL code that does not use them. Thus if I detect the need in optimization the first thing I will try is optimizing both at the time. Which means that separate branches for code without :exe/eval/lock/… is the last thing I am going to implement.\n\nAlso note that :exe is very, very, very common thing in VimL. So the benefit of this branch is just as low as :exe is common. At least until I have optimization code that turns :exe call into regular lua.\n",
            "created_at": "2014-03-23T14:34:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-38384099",
            "id": 38384099,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4Mzg0MDk5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38384099/reactions"
            },
            "updated_at": "2014-03-23T14:34:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38384099",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Well, if performance is not really an objection -- and I **agree** that for the first iterations(s) it isn't --, we could just use the metatype variant I outlined above. Since as far as I can see the metatable trickery allows pretty easy codegen and correct runtime semantics without having to write a C module.\n- The same metatable concept might also just work for a luajit 64-bit integer wrapped in a table (a similar approach to this: http://stackoverflow.com/questions/4484437/lua-integer-type). If we avoid creating closures for every operation like the SO asker that might be even quite reasonable, and it could transparantly replace a metatype struct.\n",
            "created_at": "2014-03-23T14:50:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-38384538",
            "id": 38384538,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4Mzg0NTM4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38384538/reactions"
            },
            "updated_at": "2014-03-23T14:50:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38384538",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@ZyX-I I was simply suggesting how may optimize the generated code, you brought the optimization topic first when considering writing a C extension for dealing with higher-precision integers.\n\nTo me the biggest gain translating vimscript to lua is reduction of code complexity and improved maintenance. Personally I don't care if vimscript is fast because it won't be necessary after the msgpack UI is ready. The only advantage of making vimscript fast now is to improve performance of existing plugins.\n\nEven if you use runtime functions for assignments, the generated code may still run faster than the current vimscript implementation.\n",
            "created_at": "2014-03-23T15:15:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-38385229",
            "id": 38385229,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4Mzg1MjI5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38385229/reactions"
            },
            "updated_at": "2014-03-23T15:15:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38385229",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">  I don't care if vimscript is fast because it won't be necessary after the msgpack UI is ready. \n\nYou mean because other languages can be used instead? \n\n> The only advantage of making vimscript fast now is to improve performance of existing plugins.\n\nExisting plugins are very important. If detractors can say \"neovim [vimscript] is slower than Vim\", then neovim will be ignored.\n",
            "created_at": "2014-03-23T15:44:21Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-38386189",
            "id": 38386189,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4Mzg2MTg5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38386189/reactions"
            },
            "updated_at": "2014-03-23T15:44:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38386189",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> You mean because other languages can be used instead?\n\nWell, yes that is one of the proposed features of the msgpack UI, extending the editor with arbitrary programs\n\n> Existing plugins are very important. If detractors can say \"neovim [vimscript] is slower than Vim\", then neovim will be ignored.\n\nI think it will run faster than the current implementation even if @ZyX-I uses runtime functions for basic things such as assignment and arithmetic operations.\n",
            "created_at": "2014-03-23T15:49:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-38386335",
            "id": 38386335,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4Mzg2MzM1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38386335/reactions"
            },
            "updated_at": "2014-03-23T15:49:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38386335",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> @ZyX-I I was simply suggesting how may optimize the generated code, you brought the optimization topic first when considering writing a C extension for dealing with higher-precision integers.\n\n? I did not write about “higher-precision integers”. I did write about the fact that I need to do something to deal with different number semantics, luajit 64-bit integers were brought here solely because this is _existing_ implementation of _different_ number type in lua. The only thing I said about high precision integers is that they are not supported on my system despite the fact that Vim help says that integers _may_ be 64-bit and my system is 64-bit as well.\n\nI.e. C extension is for dealing with number semantics, not for dealing with high precision. Things like using lua numbers for all integers (because this solution should be faster) and C extension for floats is also an option. I would not be surprised if it will end up using C extension for every function in `vim` module, but first version will be written in lua for sure. (And for sure not in moonscript, I do not like guessing WTF “failed to parse” means now.)\n\nTopic was brought by me _to this specific issue_ only because integers in vim are a very common type and seemed obvious that any implementation _not_ invoking C extensions will be very slow.\n",
            "created_at": "2014-03-23T18:32:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-38391831",
            "id": 38391831,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzkxODMx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38391831/reactions"
            },
            "updated_at": "2014-03-23T18:32:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38391831",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I.e. C extension is for dealing with number semantics, not for dealing with high precision. Things like using lua numbers for all integers (because this solution should be faster) and C extension for floats is also an option. I would not be surprised if it will end up using C extension for every function in vim module, but first version will be written in lua for sure. (And for sure not in moonscript, I do not like guessing WTF “failed to parse” means now.)\n\nDon't be so sure, when the JIT is active, using the [ffi is faster than C modules](http://luajit.org/ext_ffi.html), so I believe it would be better to keep large swaths of the vim module in Lua. (when the JIT is disabled, using the ffi is way slower than C modules though, but we don't want the JIT to be disabled). At any rate, I wouldn't underestimate the power of LuaJIT, let's do it all in lua to begin with (as I already said you can use my example almost as-is I believe).\n\n...in the end I couldn't resist, so I cleaned up the module and added benchmarking to my tests. Either I made a mistake during, or LuaJIT is awesome, but I see almost no slowdown with my metatype.\n\nI actually find this incredibly hard to believe, since I would expect that the metatype at least allocated some memory for every instance...\n\nAnyway, if this is true, then it's true what they say: _never, ever, underestimate the awesome powers of Mike Pall and LuaJIT_.\n\nResults:\n\n``` lua\nBENCHMARKING => add/sub\n========================\n1000000000 iterations:\n    1147.012000 msec passed, result = 12 (regular lua number add/sub)\n    1167.605000 msec passed, result = 12 (mixed add/sub (should give the same result as regular mul/div))\n    401.648000 msec passed, result = 12LL (packed int add/sub)\n    388.419000 msec passed, result = 12LL (LuaJIT 64-bit int add/sub (should be a bit faster than packed int since it doesn't have to box/unbox all the time))\n\n\n3000000000 iterations:\n    4067.897000 msec passed, result = 12 (regular lua number add/sub)\n    4117.013000 msec passed, result = 12 (mixed add/sub (should give the same result as regular mul/div))\n    4618.226000 msec passed, result = 12LL (packed int add/sub)\n    4636.037000 msec passed, result = 12LL (LuaJIT 64-bit int add/sub (should be a bit faster than packed int since it doesn't have to box/unbox all the time))\n\n\nBENCHMARKING => mul/div\n========================\n1000000000 iterations:\n    1936.488000 msec passed, result = 12 (regular lua number mul/div)\n    1911.581000 msec passed, result = 12 (mixed mul/div (should give the same result as regular mul/div))\n    1159.997000 msec passed, result = 12LL (packed int mul/div)\n    1148.038000 msec passed, result = 12LL (LuaJIT 64-bit int mul/div (should be a bit faster than packed int since it doesn't have to box/unbox all the time))\n\n\n3000000000 iterations:\n    5806.365000 msec passed, result = 12 (regular lua number mul/div)\n    5854.921000 msec passed, result = 12 (mixed mul/div (should give the same result as regular mul/div))\n    4660.352000 msec passed, result = 12LL (packed int mul/div)\n    4602.923000 msec passed, result = 12LL (LuaJIT 64-bit int mul/div (should be a bit faster than packed int since it doesn't have to box/unbox all the time))\n```\n\nCode can be found in a gist: https://gist.github.com/aktau/9732390 (you'll need to put all three files in a folder and run `luajit test_int.lua`. Watch out, the timing code will not work on x86 systems, you need to adjust the datatypes of `struct timeval`.\n\nThe tests that indicate how the metatype handles math-ops:\n\n``` bash\nperform 1 +     3LL luajit 64-bit int   for all types\n    luajit 64-bit int   + luajit 64-bit int     4LL       cdata/int64_t      + cdata/int64_t      => cdata/int64_t\n    ctype 64-bit int    + luajit 64-bit int     4LL       cdata/int64_t      + cdata/int64_t      => cdata/int64_t\n    metatype 64-bit int + luajit 64-bit int     4LL       cdata/packed_int_t + cdata/int64_t      => cdata/packed_int_t\n    lua number          + luajit 64-bit int     4LL       number             + cdata/int64_t      => cdata/int64_t\n\n\nperform 1 +     3LL ctype 64-bit int    for all types\n    luajit 64-bit int   + ctype 64-bit int      4LL       cdata/int64_t      + cdata/int64_t      => cdata/int64_t\n    ctype 64-bit int    + ctype 64-bit int      4LL       cdata/int64_t      + cdata/int64_t      => cdata/int64_t\n    metatype 64-bit int + ctype 64-bit int      4LL       cdata/packed_int_t + cdata/int64_t      => cdata/packed_int_t\n    lua number          + ctype 64-bit int      4LL       number             + cdata/int64_t      => cdata/int64_t\n\n\nperform 1 +     3LL metatype 64-bit int for all types\n    luajit 64-bit int   + metatype 64-bit int   4LL       cdata/int64_t      + cdata/packed_int_t => cdata/packed_int_t\n    ctype 64-bit int    + metatype 64-bit int   4LL       cdata/int64_t      + cdata/packed_int_t => cdata/packed_int_t\n    metatype 64-bit int + metatype 64-bit int   4LL       cdata/packed_int_t + cdata/packed_int_t => cdata/packed_int_t\n    lua number          + metatype 64-bit int   4         number             + cdata/packed_int_t => number\n\n\nperform 1 +     3.14    lua number          for all types\n    luajit 64-bit int   + lua number            4LL       cdata/int64_t      + number             => cdata/int64_t\n    ctype 64-bit int    + lua number            4LL       cdata/int64_t      + number             => cdata/int64_t\n    metatype 64-bit int + lua number            4.14          cdata/packed_int_t + number             => number\n    lua number          + lua number            4.14          number             + number             => number\n```\n",
            "created_at": "2014-03-24T01:00:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-38404125",
            "id": 38404125,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDA0MTI1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38404125/reactions"
            },
            "updated_at": "2014-03-24T01:00:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38404125",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@aktau luajit is indeed a unique piece of art\n",
            "created_at": "2014-03-24T13:10:37Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-38441707",
            "id": 38441707,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDQxNzA3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38441707/reactions"
            },
            "updated_at": "2014-03-24T13:10:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/38441707",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "As I was afraid, current code with a huge number of function calls is rather slow: 1.5x slower then Vim if I use luajit, 6x slower then Vim with lua, about 1e2 times slower then equivalent lua and 1e3 then equivalent luajit (using scientific notation to show that there is only one meaningful digit):\n\n```\nlet i = 0\nwhile i < 10000000\n    let i += 1\nendwhile\n```\n\nLua:\n\n```\nlocal i = 0\nwhile i < 10000000 do\n    i = i + 1\nend\n```\n\n. It is absolutely correct though. Will probably finish core tests (block commands support, type conversion, operators support, assignment support) with current code and start thinking what is the best way to optimize the code.\n\nI have not said what is the other reason to prefer `vim.op.add()` over `1 + 1`: I may add position arguments to `vim.op.add()` to make correct error reporting, but cannot do so for `1 + 1`, even if it is `vim.number.new(1) + vim.number.new(1)`.\n",
            "created_at": "2014-07-06T13:43:37Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-48112146",
            "id": 48112146,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MTEyMTQ2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48112146/reactions"
            },
            "updated_at": "2014-07-06T13:43:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48112146",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Small bummer, I don't expect it to be slower of the bat. Perhaps I was hoping that LuaJITs tracing JIT was better than magic. No matter, I'm sure a very good speedup can be reached.\n\nIt would perhaps be helpful if you posted what code your translator produces for that fragment at the moment, @ZyX-I.\n",
            "created_at": "2014-07-06T13:47:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-48112251",
            "id": 48112251,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MTEyMjUx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48112251/reactions"
            },
            "updated_at": "2014-07-06T13:47:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48112251",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "``` Lua\nlocal state = vim.state.get_top()\nvim.assign.dict(state, 0, state.current_scope, 'i')\nwhile vim.get_boolean(state, vim.op.less(state, false, vim.subscript.subscript(state, state.current_scope, 'i'), 10000000)) do\n  vim.assign.dict(state, vim.op.add(state, (vim.subscript.subscript(state, state.current_scope, 'i')), (1)), state.current_scope, 'i')\nend\nreturn vim.ret\n```\n\nFirst try will probably be code generation in place of passing funcrefs around. (`false` in the above code should really be replaced with `state.global.options.ignorecase`). Heavy processing is being done in `vim.lua` module, not in the above code sample: `vim.assign.dict` will first check whether its arguments (except for the first) are not `nil`, so does `vim.op.add`, etc. And all of this is to support Vim error handling behaviour which tries to proceed on the error. I did not actually profile yet to say that this is the culprit.\n",
            "created_at": "2014-07-06T14:17:40Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-48112934",
            "id": 48112934,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MTEyOTM0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48112934/reactions"
            },
            "updated_at": "2014-07-06T14:17:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48112934",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "But `non_nil` decorator consumes 20% of time, so it was a good guess.\n",
            "created_at": "2014-07-06T14:19:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-48112973",
            "id": 48112973,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MTEyOTcz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48112973/reactions"
            },
            "updated_at": "2014-07-06T14:19:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48112973",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Interesting. It's a shame that the tracer (and then the CPU branch predictor) somehow doesn't notice that the non-nil condition doesn't change. Ideally this could be hoisted out of the loop. I suppose the tracer gives up after a certain depth. This was one of my reasons for allowing myself to hope that even a very heavyweight (i.e.: faithfully following viml) translation like yours would be fast. In the 64-bit number code I tested above, it seemed like the tracer was able to generate near-optimal code for the common case.\n",
            "created_at": "2014-07-06T14:25:11Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-48113083",
            "id": 48113083,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MTEzMDgz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48113083/reactions"
            },
            "updated_at": "2014-07-06T14:25:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48113083",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "It appears to be not so bad after some optimizations: comparison operator implementation was too complicated. New variant is both cleaner and faster. Now it runs 1.5x faster then vim, but it is luajit. Will be even faster when I will do some planned optimizations in C code.\n",
            "created_at": "2014-07-06T15:41:54Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-48115047",
            "id": 48115047,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MTE1MDQ3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48115047/reactions"
            },
            "updated_at": "2014-07-06T15:41:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48115047",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Now it runs 1.5x faster then vim\n\nAlready extremely good, a 50% speed boost! With much more to come, probably.\n\n> ...but it is luajit. Will be even faster when I will do some planned optimizations in C code.\n\nMay I enquire as to what specific parts will run faster in C than they do in LuaJIT? Colour me interested :).\n",
            "created_at": "2014-07-06T16:03:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-48115620",
            "id": 48115620,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MTE1NjIw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48115620/reactions"
            },
            "updated_at": "2014-07-06T16:03:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48115620",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@aktau By “C optimizations” here I mean “optimizations made by code that generates lua code”. E.g. one can replace `1 + 1` with `2` on that stage (due to the fact that `1 + 1` translates to `vim.op.add(state, 1, 1)` and `vim.op.add` does the type handling I do not expect luajit to be able to do constant folding).\n\nPlanned optimizations are in first place replacing generic `vim.op` calls with specific `vim.{type}` or direct usage of lua operators in case translator is able to infer types. If `1 + 1` will be translated to `1 + 1` I probably will not have to do constant folding myself. If I know that in `let i = 1` `i` is the correct variable name and `1` is not a funcref I can reduce used code to just a) checking for locks and b) direct dictionary assignment.\n\nThese optimizations are not “rewrite part of lua code in C”, they are “generate faster code”. This may though mean that many parts of `vim.lua` will move to C code during optimization.\n\nThis “planned” is though planned very late in the future.\n",
            "created_at": "2014-07-06T16:13:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-48115854",
            "id": 48115854,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MTE1ODU0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48115854/reactions"
            },
            "updated_at": "2014-07-06T16:14:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48115854",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I do not expect luajit to be able to do constant folding).\n\nI [do](http://wiki.luajit.org/Optimizations#Constant-Folding). LuaJIT does a lot of things and it's quite difficult to write regular Lua code that doesn't optimize at all with LuaJIT. Sadly, this VimL-on-Lua doesn't fall in those cases yet.\n\n> direct usage of lua operators in case translator is able to infer types\n\nI suspect that will make things a lot faster indeed.\n\n> If 1 + 1 will be translated to 1 + 1 I probably will not have to do constant folding myself.\n\nIndeed, LuaJIT will happily do that for you, it also helps with debugging the translator if there aren't too many pre-optimization passes.\n",
            "created_at": "2014-07-06T16:45:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-48116650",
            "id": 48116650,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MTE2NjUw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48116650/reactions"
            },
            "updated_at": "2014-07-06T16:45:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48116650",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I do. LuaJIT does a lot of things and it's quite difficult to write regular Lua code that doesn't optimize at all with LuaJIT. Sadly, this VimL-on-Lua doesn't fall in those cases yet.\n\nThis is exactly why I do not expect LuaJIT to do constant folding: `vim.op.add` is not generally pure, it is only pure when types are compatible.\n",
            "created_at": "2014-07-06T17:10:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-48117275",
            "id": 48117275,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MTE3Mjc1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48117275/reactions"
            },
            "updated_at": "2014-07-06T17:10:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48117275",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "By the way @ZyX-I, you probably already knew about it, but just in case: https://github.com/jgrahamc/lulip/\n\nIt's a pretty spiffy line-level profiler for LuaJIT, at least it will allow us to see which part of the VimL-on-lua emulation is most onerous (of course it won't detect the high-level difficulties, such as prevent many LuaJIT optimizations that usually happen in straight-line code).\n\n**EDIT**: also some tips from Mike Pall himself: http://wiki.luajit.org/Numerical-Computing-Performance-Guide (it says just numerical computing, but it provides a lot of general info too).\n\n**EDIT 2**: And for LuaJIT 2.1, there's also a profiler made by Mike Pall. It looks great: http://www.freelists.org/post/luajit/LuaJIT-21-Profiler-released\n",
            "created_at": "2014-07-11T10:35:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-48716366",
            "id": 48716366,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NzE2MzY2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48716366/reactions"
            },
            "updated_at": "2014-07-12T15:41:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/48716366",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "While this was a worthwhile initiative, with the advance of the lua plugins (and vim9script plugins at the other side of the pond) this is not relevant anymore.\r\n\r\nResolution: Neovim will use vim script with `scriptversion 1` unmodified. For better behaviors and performance, use lua.",
            "created_at": "2021-11-30T21:46:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/392#issuecomment-983049159",
            "id": 983049159,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/392",
            "node_id": "IC_kwDOAPphoM46mCPH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/983049159/reactions"
            },
            "updated_at": "2021-11-30T21:46:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/983049159",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        }
    ],
    "comments": 47,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/392/comments",
    "created_at": "2014-03-22T19:27:55Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/392/events",
    "html_url": "https://github.com/neovim/neovim/issues/392",
    "id": 29970734,
    "labels": [
        {
            "color": "c7def8",
            "default": false,
            "description": "",
            "id": 109899557,
            "name": "vimscript",
            "node_id": "MDU6TGFiZWwxMDk4OTk1NTc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/vimscript"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/392/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWUyOTk3MDczNA==",
    "number": 392,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/392/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/392/timeline",
    "title": "Results of translation",
    "updated_at": "2024-09-04T14:00:01Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/392",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
        "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
        "followers_url": "https://api.github.com/users/ZyX-I/followers",
        "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
        "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ZyX-I",
        "id": 322097,
        "login": "ZyX-I",
        "node_id": "MDQ6VXNlcjMyMjA5Nw==",
        "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
        "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
        "repos_url": "https://api.github.com/users/ZyX-I/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ZyX-I"
    }
}