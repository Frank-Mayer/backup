{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "### Problem\r\n\r\nIt seems that at the moment displaying documentation for LSP completion does not work. If I'm wrong please close this issue. \r\n\r\nWe probably need to call [completionItem/resolve](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#completionItem_resolve) for each item. The only such call seems to be made for single submitted item. \r\n\r\n### Expected behavior\r\n\r\nDisplay documentation attached to an item - maybe by the user choice with some new option on `vim.lsp.completion.BufferOpts`.\r\n\r\nI have created a simple [example](https://gist.github.com/przepompownia/0690ebe28a24bd10b45118fceb980dfd) containing autocommand on `CompleteChanged` that shows that it's not difficult but not sure how it should like as a built-in functionality so I didn't create PR. \r\n \r\n```lua\r\nvim.api.nvim_create_autocmd('FileType', {\r\n  pattern = 'lua',\r\n  callback = function (args)\r\n    vim.treesitter.start(args.buf, 'lua')\r\n    vim.lsp.start({\r\n      name = 'lua-ls',\r\n      cmd = {'lua-language-server'},\r\n      root_dir = vim.fs.root(args.buf, 'init.lua'),\r\n    })\r\n  end,\r\n})\r\n\r\nvim.api.nvim_create_autocmd('LspAttach', {\r\n  callback = function (args)\r\n    local client = vim.lsp.get_client_by_id(args.data.client_id)\r\n\r\n    vim.lsp.completion.enable(true, args.data.client_id, args.buf, {autotrigger = true})\r\n\r\n    vim.keymap.set({'i'}, '<C-Space>', function ()\r\n      vim.lsp.completion.trigger()\r\n    end, {buffer = args.buf})\r\n\r\n    vim.api.nvim_create_autocmd('CompleteChanged', {\r\n      buffer = args.buf,\r\n      callback = function ()\r\n        local info = vim.fn.complete_info({'selected'})\r\n        local completionItem = vim.tbl_get(vim.v.completed_item, 'user_data', 'nvim', 'lsp', 'completion_item')\r\n        if nil == completionItem then\r\n          return\r\n        end\r\n\r\n        client.request(vim.lsp.protocol.Methods.completionItem_resolve, completionItem, function (_err, result)\r\n          if nil == result then\r\n            return\r\n          end\r\n\r\n          local winData = vim.api.nvim__complete_set(info['selected'], {info = result.documentation.value})\r\n          if not vim.api.nvim_win_is_valid(winData.winid) then\r\n            return\r\n          end\r\n          vim.api.nvim_win_set_config(winData.winid, {border = 'rounded'})\r\n          vim.treesitter.start(winData.bufnr, 'markdown')\r\n          vim.wo[winData.winid].conceallevel = 3\r\n        end, args.buf)\r\n\r\n        vim.api.nvim_create_autocmd({'TextChangedI'}, {\r\n          buffer = args.buf,\r\n          callback = function ()\r\n            vim.lsp.completion.trigger()\r\n          end\r\n        })\r\n      end\r\n    })\r\n  end\r\n})\r\n\r\nvim.go.completeopt = 'menu,noselect,menuone,popup'\r\n\r\nlocal pumMaps = {\r\n  ['<Tab>'] = '<C-n>',\r\n  ['<Down>'] = '<C-n>',\r\n  ['<S-Tab>'] = '<C-p>',\r\n  ['<Up>'] = '<C-p>',\r\n  ['<CR>'] = '<C-y>',\r\n}\r\n\r\nfor insertKmap, pumKmap in pairs(pumMaps) do\r\n  vim.keymap.set(\r\n    {'i'},\r\n    insertKmap,\r\n    function ()\r\n      return vim.fn.pumvisible() == 1 and pumKmap or insertKmap\r\n    end,\r\n    {expr = true}\r\n  )\r\nend\r\n```\r\n\r\n![Screenshot](https://github.com/neovim/neovim/assets/11404453/8ba8f9b0-9c15-454d-8e9f-2ebefebfbd79)\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Tips: request is asynchronous, it is best to use a timer to ensure that selected is the same before you invoke nvim__set_complete. and when no result  you also need close exist info window.",
            "created_at": "2024-06-07T05:56:20Z",
            "html_url": "https://github.com/neovim/neovim/issues/29225#issuecomment-2154135840",
            "id": 2154135840,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29225",
            "node_id": "IC_kwDOAPphoM6AZYEg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2154135840/reactions"
            },
            "updated_at": "2024-06-07T07:42:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2154135840",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I then have updated the example to\r\n```lua\r\nvim.api.nvim_create_autocmd('FileType', {\r\n  pattern = 'lua',\r\n  callback = function (args)\r\n    vim.treesitter.start(args.buf, 'lua')\r\n    vim.lsp.start({\r\n      name = 'lua-ls',\r\n      cmd = {'lua-language-server'},\r\n      root_dir = vim.fs.root(args.buf, 'init.lua'),\r\n    })\r\n  end,\r\n})\r\n\r\nvim.api.nvim_create_autocmd('LspAttach', {\r\n  callback = function (args)\r\n    vim.lsp.completion.enable(true, args.data.client_id, args.buf, {autotrigger = true})\r\n\r\n    vim.keymap.set({'i'}, '<C-Space>', function ()\r\n      vim.lsp.completion.trigger()\r\n    end, {buffer = args.buf})\r\n\r\n    vim.api.nvim_create_autocmd('CompleteChanged', {\r\n      buffer = args.buf,\r\n      callback = function ()\r\n        local info = vim.fn.complete_info({'selected'})\r\n        local completionItem = vim.tbl_get(vim.v.completed_item, 'user_data', 'nvim', 'lsp', 'completion_item')\r\n        if nil == completionItem then\r\n          return\r\n        end\r\n\r\n        local resolvedItem = vim.lsp.buf_request_sync(\r\n          args.buf,\r\n          vim.lsp.protocol.Methods.completionItem_resolve,\r\n          completionItem,\r\n          500\r\n        )\r\n\r\n        local docs = vim.tbl_get(resolvedItem[args.data.client_id], 'result', 'documentation', 'value')\r\n        if nil == docs then\r\n          return\r\n        end\r\n\r\n        local winData = vim.api.nvim__complete_set(info['selected'], {info = docs})\r\n        if not winData.winid or not vim.api.nvim_win_is_valid(winData.winid) then\r\n          return\r\n        end\r\n\r\n        vim.api.nvim_win_set_config(winData.winid, {border = 'rounded'})\r\n        vim.treesitter.start(winData.bufnr, 'markdown')\r\n        vim.wo[winData.winid].conceallevel = 3\r\n\r\n        vim.api.nvim_create_autocmd({'TextChangedI'}, {\r\n          buffer = args.buf,\r\n          callback = function ()\r\n            vim.lsp.completion.trigger()\r\n          end\r\n        })\r\n      end\r\n    })\r\n  end\r\n})\r\n\r\nvim.go.completeopt = 'menu,noselect,menuone,popup'\r\n\r\nlocal pumMaps = {\r\n  ['<Tab>'] = '<C-n>',\r\n  ['<Down>'] = '<C-n>',\r\n  ['<S-Tab>'] = '<C-p>',\r\n  ['<Up>'] = '<C-p>',\r\n  ['<CR>'] = '<C-y>',\r\n}\r\n\r\nfor insertKmap, pumKmap in pairs(pumMaps) do\r\n  vim.keymap.set(\r\n    {'i'},\r\n    insertKmap,\r\n    function ()\r\n      return vim.fn.pumvisible() == 1 and pumKmap or insertKmap\r\n    end,\r\n    {expr = true}\r\n  )\r\nend\r\n```",
            "created_at": "2024-06-10T22:40:00Z",
            "html_url": "https://github.com/neovim/neovim/issues/29225#issuecomment-2159428607",
            "id": 2159428607,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29225",
            "node_id": "IC_kwDOAPphoM6AtkP_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2159428607/reactions"
            },
            "updated_at": "2024-06-10T22:40:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2159428607",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/11404453?v=4",
                "events_url": "https://api.github.com/users/przepompownia/events{/privacy}",
                "followers_url": "https://api.github.com/users/przepompownia/followers",
                "following_url": "https://api.github.com/users/przepompownia/following{/other_user}",
                "gists_url": "https://api.github.com/users/przepompownia/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/przepompownia",
                "id": 11404453,
                "login": "przepompownia",
                "node_id": "MDQ6VXNlcjExNDA0NDUz",
                "organizations_url": "https://api.github.com/users/przepompownia/orgs",
                "received_events_url": "https://api.github.com/users/przepompownia/received_events",
                "repos_url": "https://api.github.com/users/przepompownia/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/przepompownia/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/przepompownia/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/przepompownia"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/29225/comments",
    "created_at": "2024-06-06T21:43:42Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/29225/events",
    "html_url": "https://github.com/neovim/neovim/issues/29225",
    "id": 2339200419,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/29225/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6LbV2j",
    "number": 29225,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/29225/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/29225/timeline",
    "title": "LSP completion: display documentation if exists for an item",
    "updated_at": "2024-06-10T22:40:01Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/29225",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/11404453?v=4",
        "events_url": "https://api.github.com/users/przepompownia/events{/privacy}",
        "followers_url": "https://api.github.com/users/przepompownia/followers",
        "following_url": "https://api.github.com/users/przepompownia/following{/other_user}",
        "gists_url": "https://api.github.com/users/przepompownia/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/przepompownia",
        "id": 11404453,
        "login": "przepompownia",
        "node_id": "MDQ6VXNlcjExNDA0NDUz",
        "organizations_url": "https://api.github.com/users/przepompownia/orgs",
        "received_events_url": "https://api.github.com/users/przepompownia/received_events",
        "repos_url": "https://api.github.com/users/przepompownia/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/przepompownia/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/przepompownia/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/przepompownia"
    }
}