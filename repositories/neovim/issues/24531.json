{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\r\n\r\n`nvim-treesitter` will register `tsx` lang for `typescriptreact` filetype, see https://github.com/nvim-treesitter/nvim-treesitter/blob/4c4d586a05e236d8199ab6faab8cb733a9b5bd24/lua/nvim-treesitter/parsers.lua#L1588\r\n\r\nall `nvim-treesitter`'s plugins depend on this to work properly, otherwise issues like this will happen: https://github.com/nvim-treesitter/nvim-treesitter/issues/5146\r\n\r\nHere is how this issue triggered:\r\n\r\n1. `nvim-treesitter` is loaded, and register `tsx` lang for filetype `typescriptreact`.\r\n2. on buffer of typescriptreact file, some plugin called `vim.treesitter.start(bufnr, vim.bo.filetype)` which is equal to `vim.treesitter.start(123, 'typescriptreact')`. Like `mini.files` did in this: https://github.com/echasnovski/mini.nvim/blob/ddb435633319d06a466c74833ef340839b931bfe/lua/mini/files.lua#L1948\r\n3. following call stack will override `vim.treesitter.language#ft_to_lang`: [`LanguageTree.new`](https://github.com/neovim/neovim/blob/d086bc1e8590a92a70c414bd60e1e988bbdd3c0a/runtime/lua/vim/treesitter/languagetree.lua#L109) -> [language#add](https://github.com/neovim/neovim/blob/d086bc1e8590a92a70c414bd60e1e988bbdd3c0a/runtime/lua/vim/treesitter/language.lua#L85).\r\n\r\nBecause `LanguageTree.new` just called `language.add(lang)` which is `language.add(\"typescriptreact\")`, and `language` module doesn't check that `ft_to_lang` already has a key named `typescriptreact` and a value `tsx`, it just override it.\r\n\r\nhere are some stacktrace log to prove it:\r\n\r\n```txt\r\nstack traceback:\r\n^I/usr/local/share/nvim/runtime/lua/vim/treesitter.lua:133: in function 'get_parser'\r\n^I/usr/local/share/nvim/runtime/lua/vim/treesitter.lua:462: in function </usr/local/share/nvim/runtime/lua/vim/treesitter.lua:460>\r\n^I[C]: in function 'pcall'\r\n^I/private/tmp/.repro/plugins/mini.files/lua/mini/files.lua:1948: in function 'update_fun'\r\n^I/private/tmp/.repro/plugins/mini.files/lua/mini/files.lua:1872: in function 'buffer_update'\r\n^I/private/tmp/.repro/plugins/mini.files/lua/mini/files.lua:1666: in function 'view_ensure_proper'\r\n^I/private/tmp/.repro/plugins/mini.files/lua/mini/files.lua:1445: in function 'explorer_refresh_depth_window'\r\n^I/private/tmp/.repro/plugins/mini.files/lua/mini/files.lua:1253: in function 'explorer_refresh'\r\n^I/private/tmp/.repro/plugins/mini.files/lua/mini/files.lua:688: in function 'open'\r\n^I/private/tmp/init.lua:40: in function </private/tmp/init.lua:37>\r\ntsx-----\r\nstack traceback:\r\n^I/usr/local/share/nvim/runtime/lua/vim/treesitter.lua:133: in function 'get_parser'\r\n^I/usr/local/share/nvim/runtime/lua/vim/treesitter.lua:462: in function </usr/local/share/nvim/runtime/lua/vim/treesitter.lua:460>\r\n^I[C]: in function 'pcall'\r\n^I/private/tmp/.repro/plugins/mini.files/lua/mini/files.lua:1948: in function 'update_fun'\r\n^I/private/tmp/.repro/plugins/mini.files/lua/mini/files.lua:1872: in function 'buffer_update'\r\n^I/private/tmp/.repro/plugins/mini.files/lua/mini/files.lua:1666: in function 'view_ensure_proper'\r\n^I/private/tmp/.repro/plugins/mini.files/lua/mini/files.lua:1445: in function 'explorer_refresh_depth_window'\r\n^I/private/tmp/.repro/plugins/mini.files/lua/mini/files.lua:1253: in function 'explorer_refresh'\r\n^I/private/tmp/.repro/plugins/mini.files/lua/mini/files.lua:1741: in function ''\r\n^Ivim/_editor.lua: in function <vim/_editor.lua:0>\r\ntypescriptreact-----\r\n```\r\n\r\nYou can see first `tsx----` already there.\r\n\r\nThe debug code in vim.treesitter.language.lua\r\n\r\n```\r\nfunction M.register(lang, filetype)\r\n  vim.validate({\r\n    lang = { lang, 'string' },\r\n    filetype = { filetype, { 'string', 'table' } },\r\n  })\r\n\r\n  for _, f in ipairs(ensure_list(filetype)) do\r\n    if f ~= '' then\r\n      if ft_to_lang[f] ~= nil then\r\n        print(ft_to_lang[f] .. '-----')\r\n      end\r\n```\r\n\r\n### Steps to reproduce\r\n\r\nrun `nvim --version`:\r\n\r\n```\r\nNVIM v0.10.0-dev-745+g20bfdbe83\r\nBuild type: Release\r\nLuaJIT 2.1.0-beta3\r\nRun \"nvim -V1 -v\" for more info\r\n```\r\n\r\nminimal init.lua config file to repro, plugin required `mini.files`.\r\n\r\n```lua\r\nvim.g.mapleader = ' '\r\n-- vim.loader.disable()\r\nvim.opt.swapfile = false\r\n\r\nlocal root = vim.fn.fnamemodify('./.repro', ':p')\r\n\r\n-- set stdpaths to use .repro\r\nfor _, name in ipairs({ 'config', 'data', 'state', 'cache' }) do\r\n  vim.env[('XDG_%s_HOME'):format(name:upper())] = root .. '/' .. name\r\nend\r\n\r\n-- bootstrap lazy\r\nlocal lazypath = root .. '/plugins/lazy.nvim'\r\nif not vim.loop.fs_stat(lazypath) then\r\n  vim.fn.system({\r\n    'git',\r\n    'clone',\r\n    '--filter=blob:none',\r\n    '--single-branch',\r\n    'https://github.com/folke/lazy.nvim.git',\r\n    lazypath,\r\n  })\r\nend\r\nvim.opt.runtimepath:prepend(lazypath)\r\n\r\n-- install plugins\r\nlocal plugins = {\r\n  { 'nvim-lua/plenary.nvim' },\r\n  { 'stevearc/dressing.nvim', opts = {} },\r\n  {\r\n    \"echasnovski/mini.files\",\r\n    commit = \"2b3e9d27434273367e26f3\",\r\n    lazy = true,\r\n    keys = {\r\n      {\r\n        \"-\",\r\n        function()\r\n          local path = nil\r\n          path = vim.api.nvim_buf_get_name(0)\r\n          require(\"mini.files\").open(path, true)\r\n        end,\r\n        desc = \"Open mini.files (directory of current file)\",\r\n      },\r\n    },\r\n    enabled = true,\r\n    opts = {\r\n      windows = {\r\n        preview = true,\r\n        width_nofocus = 30,\r\n        width_preview = 60,\r\n      },\r\n      options = {\r\n        -- Whether to use for editing directories\r\n        -- Disabled by default in LazyVim because neo-tree is used for that\r\n        use_as_default_explorer = true,\r\n      },\r\n      mappings = {\r\n        go_in_plus = '<CR>',\r\n      }\r\n    },\r\n  },\r\n  {\r\n    'nvim-treesitter/nvim-treesitter',\r\n    commit = \"82c948653909d8c1582f283\",\r\n    build = function()\r\n      if #vim.api.nvim_list_uis() == 0 then\r\n        -- update sync if running headless\r\n        vim.cmd.TSUpdateSync()\r\n      else\r\n        -- otherwise update async\r\n        vim.cmd.TSUpdate()\r\n      end\r\n    end,\r\n    lazy = true,\r\n    event = { 'BufRead', 'BufNewFile' },\r\n    -- event = 'VeryLazy',\r\n    keys = {\r\n      -- { \"<Enter>\",    desc = \"Init Increment selection\" },\r\n      -- { \"<Enter>\",    desc = \"node node incremental selection\",      mode = \"x\" },\r\n      { \"<BS>\",       desc = \"Decrement selection\",                  mode = \"x\" },\r\n      { '<leader>cr', desc = 'Smart rename/nvim-treesitter-refactor' },\r\n    },\r\n    dependencies = {\r\n      'yioneko/nvim-yati',\r\n    },\r\n    init = function()\r\n      vim.opt.smartindent = false\r\n    end,\r\n    config = function()\r\n      require('nvim-treesitter.install').prefer_git = true\r\n      require('nvim-treesitter.configs').setup({\r\n        -- parser_install_dir = parser_install_dir,\r\n        ensure_installed = { 'typescript', 'tsx', 'javascript' }, -- one of \"all\", or a list of languages\r\n        sync_install = true,                                      -- install languages synchronously (only applied to `ensure_installed`)\r\n        auto_install = true,\r\n        ignore_install = {},                                      -- list of parsers to ignore installing\r\n        yati = {\r\n          -- https://github.com/yioneko/nvim-yati\r\n          enable = true,\r\n          disable = false,\r\n          default_lazy = true,\r\n          default_fallback = 'auto',\r\n          -- if ts.indent is truee, use below to suppress conflict warns.\r\n          suppress_conflict_warning = true,\r\n        },\r\n      })\r\n\r\n      vim.cmd('do User TreesitterLoaded')\r\n    end,\r\n  },\r\n  -- add any other pugins here\r\n}\r\n\r\nrequire('lazy').setup({\r\n  spec = plugins,\r\n  root = root .. '/plugins',\r\n  defaults = {\r\n    lazy = false,\r\n  },\r\n  state = root .. '/lazy/state.json',\r\n  performance = {\r\n    cache = {\r\n      enabled = false,\r\n    }\r\n  }\r\n})\r\n\r\n-- add anything else here\r\nvim.opt.termguicolors = true\r\nvim.cmd([[colorscheme default]])\r\n```\r\n\r\n## steps to trigger this\r\n\r\n1. put `init.lua` in `/tmp`\r\n2. `nvim -u init.lua`, wait for the lazy to setup, quit nvim if needed.\r\n3. just open a `.tsx` file to let nvim-treesitter download the all the parsers. (tsx etc)\r\n4. after all above steps is done, quit nvim.\r\n5. create `a.tsx`, `b.tsx`, files.\r\n6. run `nvim -u init.lua`, press `-` to open `mini.files`, move cursor and press `<enter>` to open `a.tsx`.\r\n7. press `-` again to open `mini.files`, move cursor and press `<enter>` to open `b.tsx`.\r\n8. press `-` again to open `a.tsx`.\r\n9. try to write some code, or press `o` to enter an new line to trigger `nvim-yati` treesitter based indent plugin.\r\n10. some errors will show.\r\n\r\n### Expected behavior\r\n\r\nSince `nvim-treesitter` already register `tsx` lang to `vim.treesitter.language#ft_to_lang`, does vim have to override it ?\r\n\r\n### Neovim version (nvim -v)\r\n\r\n0.10.0\r\n\r\n### Vim (not Nvim) behaves the same?\r\n\r\nno\r\n\r\n### Operating system/version\r\n\r\nmacos\r\n\r\n### Terminal name/version\r\n\r\nkitty\r\n\r\n### $TERM environment variable\r\n\r\nxterm-256\r\n\r\n### Installation\r\n\r\nbuild from repo",
    "closed_at": "2023-09-14T09:36:10Z",
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "This is an nvim-treesitter issue; the alias injection is just wrongly implemented (which has already been fixed on the main branch). (That branch also doesn't trigger start automatically, so you have more control.)",
            "created_at": "2023-08-02T11:02:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/24531#issuecomment-1662004654",
            "id": 1662004654,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24531",
            "node_id": "IC_kwDOAPphoM5jEC2u",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1662004654/reactions"
            },
            "updated_at": "2023-08-02T11:03:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1662004654",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "That being said, this specific point here: \r\n\r\n> Because LanguageTree.new just called language.add(lang) which is language.add(\"typescriptreact\"), and language module doesn't check that ft_to_lang already has a key named typescriptreact and a value tsx, it just override it.\r\n\r\ncould indeed be improved. \r\n\r\nBut this\r\n\r\n> all nvim-treesitter's plugins depend on this to work properly, otherwise issues like this will happen: https://github.com/nvim-treesitter/nvim-treesitter/issues/5146\r\n\r\nis an nvim-treesitter problem that will go away once plugins stop depending on it for treesitter handling logic (as they should).",
            "created_at": "2023-08-02T11:39:53Z",
            "html_url": "https://github.com/neovim/neovim/issues/24531#issuecomment-1662053260",
            "id": 1662053260,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24531",
            "node_id": "IC_kwDOAPphoM5jEOuM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1662053260/reactions"
            },
            "updated_at": "2023-08-02T11:41:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1662053260",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "NONE",
            "body": "@clason \r\n\r\n> which has already been fixed on the main branch\r\n\r\nI have reproduced the issue and updated nvim-treesitter to 4c4d586, but I am still able to reproduce it. (using my personal MacBook, previously encountered on my work MacBook)\r\n\r\nBased on my understanding from the debugging process, mini.files calls `vim.treesitter.start`, which is a public API that plugins can utilize, correct? Additionally, `nvim-yati` simply calls `vim.treesitter.language.get_lang`. You can refer to the code snippet here: https://github.com/yioneko/nvim-yati/blob/c4307e6855f17ff89f0132787e2daba27495d254/lua/nvim-yati/utils.lua#L11\r\n\r\n> will go away once plugins stop depending on it for treesitter handling logic (as they should).\r\n\r\nDidn't they already not depending on `nvim-treesitter`?",
            "created_at": "2023-08-02T11:58:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/24531#issuecomment-1662077980",
            "id": 1662077980,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24531",
            "node_id": "IC_kwDOAPphoM5jEUwc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1662077980/reactions"
            },
            "updated_at": "2023-08-02T12:04:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1662077980",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8279858?v=4",
                "events_url": "https://api.github.com/users/towry/events{/privacy}",
                "followers_url": "https://api.github.com/users/towry/followers",
                "following_url": "https://api.github.com/users/towry/following{/other_user}",
                "gists_url": "https://api.github.com/users/towry/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/towry",
                "id": 8279858,
                "login": "towry",
                "node_id": "MDQ6VXNlcjgyNzk4NTg=",
                "organizations_url": "https://api.github.com/users/towry/orgs",
                "received_events_url": "https://api.github.com/users/towry/received_events",
                "repos_url": "https://api.github.com/users/towry/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/towry/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/towry/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/towry"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I have reproduced the issue and updated nvim-treesitter to 4c4d586, but I am still able to reproduce it. (using my personal MacBook, previously encountered on my work MacBook)\r\n\r\nThe `main` branch is the WIP rewrite for 1.0; there are no relevant changes on `master` (the current default).\r\n\r\n\r\n",
            "created_at": "2023-08-02T16:41:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/24531#issuecomment-1662567854",
            "id": 1662567854,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24531",
            "node_id": "IC_kwDOAPphoM5jGMWu",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 2,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1662567854/reactions"
            },
            "updated_at": "2023-08-02T16:41:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1662567854",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        }
    ],
    "comments": 4,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/24531/comments",
    "created_at": "2023-08-02T10:16:40Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/24531/events",
    "html_url": "https://github.com/neovim/neovim/issues/24531",
    "id": 1832885168,
    "labels": [
        {
            "color": "f9d0c4",
            "default": true,
            "description": "issues reporting wrong behavior",
            "id": 77997474,
            "name": "bug",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3NA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1799626557,
            "name": "treesitter",
            "node_id": "MDU6TGFiZWwxNzk5NjI2NTU3",
            "url": "https://api.github.com/repos/neovim/neovim/labels/treesitter"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/24531/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM5tP5uw",
    "number": 24531,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/24531/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/24531/timeline",
    "title": "treesitter: language.add() overrides existing ft_to_lang mapping (typescriptreact=tsx)",
    "updated_at": "2023-09-14T09:36:11Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/24531",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/8279858?v=4",
        "events_url": "https://api.github.com/users/towry/events{/privacy}",
        "followers_url": "https://api.github.com/users/towry/followers",
        "following_url": "https://api.github.com/users/towry/following{/other_user}",
        "gists_url": "https://api.github.com/users/towry/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/towry",
        "id": 8279858,
        "login": "towry",
        "node_id": "MDQ6VXNlcjgyNzk4NTg=",
        "organizations_url": "https://api.github.com/users/towry/orgs",
        "received_events_url": "https://api.github.com/users/towry/received_events",
        "repos_url": "https://api.github.com/users/towry/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/towry/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/towry/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/towry"
    }
}