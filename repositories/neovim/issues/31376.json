{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "# (This is a stub; I will leave a comment when this is fully-formed and ready for comment)\n\n# Problem\n\nWe have a \"can't win\" situation:\n\n1. Users and plugin authors get exhausted by deprecation frequency.\n2. Core devs get exhausted by the API \"maturation\" cycle (including \"bikeshedding\" and other discussions to avoid hard-to-reverse mistakes), \n3. And *conversely*, core devs also get exhausted by\n    1. the deprecation phases, and/or\n    2. maintenance of old but disfavored APIs.\n\n\n# Expected behavior\n\nWe can actually have it both ways, roughly outlined here: https://sink.io/jmk/neovimconf-2024/#future-deprecation-strategy\n\n\n## Introduce a new deprecation option: \"frozen\"\n\nFrozen interfaces continue to be backwards-compatible at an \"ABI\" level (i.e. programmatic consumers won't break), but their docs and implementation are shuffled to a remote location, safely protecting innocent villagers from their ionizing radiation. \n\n1. move its implementation to `_deprecated.lua`\n2. its programmatic interface (\"ABI\" compatibility) continues to work\n3. delete its docs; it also should not auto-complete by `:lua vim.xx.<tab>`\n4. mention it in `:help deprecated`\n5. it is \"frozen\" and unsupported, though programmatic consumers can continue to use it without worrying about hard-breakage\n    - bug reports involving a frozen API get rejected.\n    - we will keep the old tests in `test/.../deprecated_spec.lua` and that's it. no other support.\n\nThis allows us to minimize the API (not ABI) much more aggressively, without breaking anyone.\n\nIt still leaves the door open for \"full removal\" as a later step, but completely avoids debates about whether it is \"worth it\" to make these kinds of interface-simplifications. And that is exactly the case for `start_client`. We can clear away all of its redundant docs and explanations, without breaking downstream.\n\n## Open questsions\n\n- Do we accept PRs for fixing bugs for these, even if they are very small?\n\n- What should be done with vim.deprecate? Should warnings still be printed to command line? Should functions be listed in deprecated checkhealth?\n\n## Closed Questions\n\n- tbd\n\n## Outcomes\n\n1. Doing a \"breaking change\" pr and shepherding it through, advocating for it, etc is exhausting. It's much easier to do that as 1 batch where a bunch of already-frozen APIs get full-removed in 1 PR.\n\n## Todo\n\n1. document `:help stdlib-contract` , `:help stdlib-frozen`\n    - Q: what if a bug is reported on a frozen API? (A: rejected)",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/31376/comments",
    "created_at": "2024-11-28T22:28:00Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/31376/events",
    "html_url": "https://github.com/neovim/neovim/issues/31376",
    "id": 2703365459,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "e6e6e6",
            "default": false,
            "description": "Neovim project matters (release process, logo, etc.)",
            "id": 146825875,
            "name": "project-management",
            "node_id": "MDU6TGFiZWwxNDY4MjU4NzU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/project-management"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/31376/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 106,
        "created_at": "2023-12-07T23:09:35Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "",
        "due_on": "2025-02-14T08:00:00Z",
        "html_url": "https://github.com/neovim/neovim/milestone/41",
        "id": 10283236,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/41/labels",
        "node_id": "MI_kwDOAPphoM4AnOjk",
        "number": 41,
        "open_issues": 56,
        "state": "open",
        "title": "0.11",
        "updated_at": "2024-12-02T14:11:53Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/41"
    },
    "node_id": "I_kwDOAPphoM6hIhVT",
    "number": 31376,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 2,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 2,
        "url": "https://api.github.com/repos/neovim/neovim/issues/31376/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/31376/timeline",
    "title": "Lua stdlib deprecation strategy; \"frozen\" phase",
    "updated_at": "2024-12-02T15:26:15Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/31376",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    }
}