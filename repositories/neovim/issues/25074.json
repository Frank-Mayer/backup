{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "EDIT: I found the offending edit. PR opened: #25075\r\n\r\n### Problem\r\n\r\nWhen typing on https://github.com/neovim/neovim/commit/2ca076e45fb3f1c08f6a1a374834df0701b8d778 or later, there is significant latency and CPU spike to 100%. When typing in the same file on any commit before https://github.com/neovim/neovim/commit/2ca076e45fb3f1c08f6a1a374834df0701b8d778, there is no latency and the CPU spikes to 3% at most.\r\n\r\nNote:\r\n* `cursorcolumn` isn't necessary to reproduce the issue, but if you turn it on it's much more clear (otherwise it's only noticeable on some keystrokes).\r\n* Needs both highlight and indent enabled, won't reproduce without one of them disabled.\r\n\r\nPinging author @lewis6991 for any insight.\r\n\r\n### UPDATE: Found blowup in `iter_captures`:\r\n```diff\r\ndiff --git a/runtime/lua/vim/treesitter/query.lua b/runtime/lua/vim/treesitter/query.lua\r\nindex 309365731..0f8b2502f 100644\r\n--- a/runtime/lua/vim/treesitter/query.lua\r\n+++ b/runtime/lua/vim/treesitter/query.lua\r\n@@ -680,6 +680,7 @@ local function value_or_node_range(start, stop, node)\r\n   return start, stop\r\n end\r\n \r\n+local my_count = 0\r\n --- Iterate over all captures from all matches inside {node}\r\n ---\r\n --- {source} is needed if the query contains predicates; then the caller\r\n@@ -716,7 +717,10 @@ function Query:iter_captures(node, source, start, stop)\r\n   start, stop = value_or_node_range(start, stop, node)\r\n \r\n   local raw_iter = node:_rawquery(self.query, true, start, stop)\r\n-  local function iter()\r\n+  local function iter(depth)\r\n+    my_count = my_count + 1\r\n+    print(\"my_count\", my_count)\r\n+    print(\"my_depth\", depth)\r\n     local capture, captured_node, match = raw_iter()\r\n     local metadata = {}\r\n \r\n@@ -724,7 +728,7 @@ function Query:iter_captures(node, source, start, stop)\r\n       local active = self:match_preds(match, match.pattern, source)\r\n       match.active = active\r\n       if not active then\r\n-        return iter() -- tail call: try next match\r\n+        return iter((depth or 0) + 1) -- tail call: try next match\r\n       end\r\n \r\n       self:apply_directives(match, match.pattern, source, metadata)\r\n```\r\n\r\nAfter typing a single char (`nvim -u init.lua` w/ provided file, then `Of<Esc>:messages`):\r\n\r\n| after #24647 | before #24647 |\r\n| --- | --- |\r\n| my_depth 2618 | my_depth 5 |\r\n| my_count 24966 | my_count 1639 |\r\n\r\nAdding:\r\n```lua\r\n    if depth and depth > 2000 then\r\n      if captured_node then\r\n        a, b, c, d = captured_node:range()\r\n        print(a, b, c, d)\r\n      end\r\n      -- print(self.dbgquery)\r\n    end\r\n```\r\nShows that every single token is being matched (and many multiple times):\r\n```\r\n96 20 96 23\r\n96 24 96 36\r\n96 24 96 36\r\n96 24 96 36\r\n96 24 96 36\r\n96 24 96 36\r\n96 36 96 37\r\n96 36 96 37\r\n96 36 96 37\r\n96 36 96 37\r\n96 36 96 37\r\n```\r\n\r\nfor the query:\r\n```lisp\r\n(_) @spell\r\n((tag\r\n  (name) @text.todo @nospell\r\n  (\"(\" @punctuation.bracket (user) @constant \")\" @punctuation.bracket)?\r\n  \":\" @punctuation.delimiter)\r\n  (#any-of? @text.todo \"TODO\" \"WIP\"))\r\n(\"text\" @text.todo @nospell\r\n (#any-of? @text.todo \"TODO\" \"WIP\"))\r\n((tag\r\n  (name) @text.note @nospell\r\n  (\"(\" @punctuation.bracket (user) @constant \")\" @punctuation.bracket)?\r\n  \":\" @punctuation.delimiter)\r\n  (#any-of? @text.note \"NOTE\" \"XXX\" \"INFO\" \"DOCS\" \"PERF\" \"TEST\"))\r\n(\"text\" @text.note @nospell\r\n (#any-of? @text.note \"NOTE\" \"XXX\" \"INFO\" \"DOCS\" \"PERF\" \"TEST\"))\r\n((tag\r\n  (name) @text.warning @nospell\r\n  (\"(\" @punctuation.bracket (user) @constant \")\" @punctuation.bracket)?\r\n  \":\" @punctuation.delimiter)\r\n  (#any-of? @text.warning \"HACK\" \"WARNING\" \"WARN\" \"FIX\"))\r\n(\"text\" @text.warning @nospell\r\n (#any-of? @text.warning \"HACK\" \"WARNING\" \"WARN\" \"FIX\"))\r\n((tag\r\n  (name) @text.danger @nospell\r\n  (\"(\" @punctuation.bracket (user) @constant \")\" @punctuation.bracket)?\r\n  \":\" @punctuation.delimiter)\r\n  (#any-of? @text.danger \"FIXME\" \"BUG\" \"ERROR\"))\r\n(\"text\" @text.danger @nospell\r\n (#any-of? @text.danger \"FIXME\" \"BUG\" \"ERROR\"))\r\n; Issue number (#123)\r\n(\"text\" @number\r\n (#lua-match? @number \"^#[0-9]+$\"))\r\n((uri) @text.uri @nospell)\r\n\r\n```\r\n\r\n^ this query shouldn't even be running on the source code; it's for comments only.\r\n\r\n### Flame graphs (download and open locally for interactive):\r\n\r\nBefore #24647\r\n![flame](https://github.com/neovim/neovim/assets/5601392/65ee5f4b-54d4-4ce1-a4a3-da1e559a9522)\r\nAfter #24647\r\n![flame2](https://github.com/neovim/neovim/assets/5601392/44af8a26-20ed-420a-b9bb-d949829c13fd)\r\n\r\n### Steps to reproduce\r\n\r\n`nvim -u init.lua`:\r\n\r\n```lua\r\nvim.opt.cursorcolumn = true\r\n\r\nlocal lazypath = vim.fn.stdpath(\"data\") .. \"/lazy/lazy.nvim\"\r\nif not vim.loop.fs_stat(lazypath) then\r\n  vim.fn.system({\r\n    \"git\",\r\n    \"clone\",\r\n    \"--filter=blob:none\",\r\n    \"https://github.com/folke/lazy.nvim.git\",\r\n    \"--branch=stable\",\r\n    lazypath,\r\n  })\r\nend\r\nvim.opt.rtp:prepend(lazypath)\r\n\r\n\r\nlocal plugins = {\r\n\t{\r\n\t\t\"nvim-treesitter/nvim-treesitter\",\r\n\t\tbuild = \":TSUpdate\",\r\n\t\tevent = { \"BufReadPost\", \"BufNewFile\" },\r\n\t\topts = {\r\n\t\t\thighlight = {\r\n\t\t\t\tenable = true,\r\n\t\t\t},\r\n\t\t\tindent = { enable = true },\r\n\t\t\tensure_installed = \"typescript\",\r\n\t\t\tsync_install = false,\r\n\t\t\tauto_install = true,\r\n\t\t},\r\n\t\tconfig = function(_, opts)\r\n\t\t\trequire(\"nvim-treesitter.configs\").setup(opts)\r\n\t\tend,\r\n\t},\r\n}\r\n\r\nrequire(\"lazy\").setup(plugins)\r\n```\r\n\r\n`repro.ts` (sorry, I couldn't get a super clear effect with <100 LOC - just paste it in, press O and start typing):\r\n```typescript\r\nexport function findClosestFoundryToml(\r\n    directory: string | undefined,\r\n): string | null {\r\n    let currentDir = directory;\r\n    const root = path.parse(directory).root;\r\n\r\n    while (currentDir !== root) {\r\n        const tomlPath = path.join(currentDir, \"foundry.toml\");\r\n        if (fs.existsSync(tomlPath)) {\r\n            return currentDir;\r\n        }\r\n        const nextDir = path.dirname(currentDir);\r\n        if (nextDir.length >= currentDir.length) break;\r\n        currentDir = nextDir;\r\n    }\r\n    return null;\r\n}\r\n\r\nasync function runFoundry(\r\n    testData: FoundryTestData,\r\n    item: vscode.TestItem,\r\n    run: vscode.TestRun,\r\n): Promise<string> {\r\n    const { filename, contractName, testName } = testData;\r\n    const verbosity =\r\n        vscode.workspace.getConfiguration(\"foundryTestRunner\").verbosity;\r\n    const cwd = filename && findClosestFoundryToml(item.uri?.path);\r\n\r\n    let command = `forge test ${verbosity}`;\r\n    if (cwd) command = `cd ${cwd} && ${command}`;\r\n    if (filename)\r\n        command += ` --match-path \"**/${filename}${\r\n            filename.endsWith(\".t.sol\") ? \"\" : \"/**\"\r\n        }\"`;\r\n    if (contractName) command += ` --match-contract ${contractName}`;\r\n    if (testName) command += ` --match-test ${testName}`;\r\n\r\n    let ret: { stdout: string; stderr: string };\r\n    let code = 0;\r\n    try {\r\n        ret = await promisify(cp.exec)(command);\r\n    } catch (e) {\r\n        ret = e as { stdout: string; stderr: string };\r\n        code = (e as { code: number }).code;\r\n    }\r\n    const { stdout, stderr } = ret;\r\n\r\n    run.appendOutput(`Foundry command: ${command}\\r\\n`);\r\n    run.appendOutput(`Working directory: ${process.cwd()}\\r\\n`);\r\n    run.appendOutput(unixToDos(stdout));\r\n    run.appendOutput(unixToDos(stderr));\r\n    if (code !== 0) {\r\n        run.appendOutput(`Foundry exited with code: ${code}\\r\\n`);\r\n    }\r\n\r\n    return stdout;\r\n}\r\nexport class TestFile extends FoundryTestData {\r\n    /**\r\n     * Parses the tests from the input text, and updates the tests contained\r\n     * by this file to be those from the text,\r\n     */\r\n    public updateFromContents(\r\n        controller: vscode.TestController,\r\n        content: string,\r\n        item: vscode.TestItem,\r\n    ) {\r\n        parseSolidity(content, {\r\n            onTest: (range, testName) => {\r\n                const data = new TestCase(\r\n                    testName,\r\n                    currentContractName,\r\n                    filename,\r\n                    thisGeneration,\r\n                );\r\n                const id = `${item.uri}/${testName}`;\r\n                const tcase = controller.createTestItem(id, testName, item.uri);\r\n                testData.set(tcase, data);\r\n                tcase.range = range;\r\n                parent?.children.add(tcase);\r\n            },\r\n\r\n            onContract: (range, contractName) => {\r\n                const id = `${item.uri}/${contractName}`;\r\n\r\n                const tcontract = controller.createTestItem(\r\n                    id,\r\n                    contractName,\r\n                    item.uri,\r\n                );\r\n                parent = tcontract;\r\n                currentContractName = contractName;\r\n                tcontract.range = range;\r\n                testData.set(\r\n                    tcontract,\r\n                    new TestContract(contractName, filename, thisGeneration),\r\n                );\r\n                item.children.add(tcontract);\r\n            },\r\n        });\r\n    }\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nno performance issues as in `2ca076e45^`\r\n\r\n### Neovim version (nvim -v)\r\n\r\nNVIM v0.10.0-dev-814+g2ca076e45\r\n\r\n### Vim (not Nvim) behaves the same?\r\n\r\nno\r\n\r\n### Operating system/version\r\n\r\nmacOS 13.4.1\r\n\r\n### Terminal name/version\r\n\r\nkitty 0.28.1\r\n\r\n### $TERM environment variable\r\n\r\nxterm-kitty\r\n\r\n### Installation\r\n\r\nbuild from repo",
    "closed_at": "2023-09-10T19:53:45Z",
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "nvim-treesitter's indent reparses basically all regions, highlighting I don't think is the issue here.\r\n\r\nRelated: nvim-treesitter/nvim-treesitter#5347",
            "created_at": "2023-09-10T07:14:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/25074#issuecomment-1712736146",
            "id": 1712736146,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25074",
            "node_id": "IC_kwDOAPphoM5mFkeS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1712736146/reactions"
            },
            "updated_at": "2023-09-10T07:14:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1712736146",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29790821?v=4",
                "events_url": "https://api.github.com/users/lucario387/events{/privacy}",
                "followers_url": "https://api.github.com/users/lucario387/followers",
                "following_url": "https://api.github.com/users/lucario387/following{/other_user}",
                "gists_url": "https://api.github.com/users/lucario387/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lucario387",
                "id": 29790821,
                "login": "lucario387",
                "node_id": "MDQ6VXNlcjI5NzkwODIx",
                "organizations_url": "https://api.github.com/users/lucario387/orgs",
                "received_events_url": "https://api.github.com/users/lucario387/received_events",
                "repos_url": "https://api.github.com/users/lucario387/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lucario387/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lucario387/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lucario387"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "The problem is that indent and highlighting are fighting with each other.\n\nWhen highlight does an update, it does a partial parse of the tree but also invalidates all injections. And then when indent runs it does a complete parse of all the trees.\n\nThis is a problem I'm already aware about, and is something I plan to address at some point.",
            "created_at": "2023-09-10T07:22:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/25074#issuecomment-1712737795",
            "id": 1712737795,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25074",
            "node_id": "IC_kwDOAPphoM5mFk4D",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1712737795/reactions"
            },
            "updated_at": "2023-09-10T07:22:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1712737795",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "NONE",
            "body": "> When highlight does an update, it does a partial parse of the tree but also invalidates all injections. And then when indent runs it does a complete parse of all the trees.\r\n\r\nI think it's more than just full-reparsing the tree. There is an actual bugged query that I just found which is returning 2600 matches on a 3300 character document. I've updated the issue description.",
            "created_at": "2023-09-10T18:43:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/25074#issuecomment-1712908851",
            "id": 1712908851,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25074",
            "node_id": "IC_kwDOAPphoM5mGOoz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1712908851/reactions"
            },
            "updated_at": "2023-09-10T19:05:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1712908851",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5601392?v=4",
                "events_url": "https://api.github.com/users/llllvvuu/events{/privacy}",
                "followers_url": "https://api.github.com/users/llllvvuu/followers",
                "following_url": "https://api.github.com/users/llllvvuu/following{/other_user}",
                "gists_url": "https://api.github.com/users/llllvvuu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/llllvvuu",
                "id": 5601392,
                "login": "llllvvuu",
                "node_id": "MDQ6VXNlcjU2MDEzOTI=",
                "organizations_url": "https://api.github.com/users/llllvvuu/orgs",
                "received_events_url": "https://api.github.com/users/llllvvuu/received_events",
                "repos_url": "https://api.github.com/users/llllvvuu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/llllvvuu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/llllvvuu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/llllvvuu"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Isn't that the injection query that is running on every parse? This is why `parse(true)` is so inefficient and why nvim-treesitter-indent should avoid using it.\n\nEDIT: actually yeah, it seems like nvim-treesitter-indent may be calling a reparse in the languagetree callbacks.",
            "created_at": "2023-09-10T18:52:52Z",
            "html_url": "https://github.com/neovim/neovim/issues/25074#issuecomment-1712910514",
            "id": 1712910514,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25074",
            "node_id": "IC_kwDOAPphoM5mGPCy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1712910514/reactions"
            },
            "updated_at": "2023-09-10T18:57:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1712910514",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Isn't that the injection query that is running on every parse? This is why `parse(true)` is so inefficient and why nvim-treesitter-indent should avoid using it.\r\n\r\nHaving that query run more often isn't enough to explain it, since `parse(true)` actually fixes things. There seems to be an additional issue where the injected query is running on the parent instead of the injection.\r\n\r\ni.e. the sexpr that I just put in the issue description should only run inside a comment, but it's running on the whole source file and matching every token. `parse(true)` by itself isn't enough to explain 2600 matches, it would still get <5 matches, just it would run more often.",
            "created_at": "2023-09-10T19:31:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/25074#issuecomment-1712917979",
            "id": 1712917979,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25074",
            "node_id": "IC_kwDOAPphoM5mGQ3b",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1712917979/reactions"
            },
            "updated_at": "2023-09-10T19:39:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1712917979",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5601392?v=4",
                "events_url": "https://api.github.com/users/llllvvuu/events{/privacy}",
                "followers_url": "https://api.github.com/users/llllvvuu/followers",
                "following_url": "https://api.github.com/users/llllvvuu/following{/other_user}",
                "gists_url": "https://api.github.com/users/llllvvuu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/llllvvuu",
                "id": 5601392,
                "login": "llllvvuu",
                "node_id": "MDQ6VXNlcjU2MDEzOTI=",
                "organizations_url": "https://api.github.com/users/llllvvuu/orgs",
                "received_events_url": "https://api.github.com/users/llllvvuu/received_events",
                "repos_url": "https://api.github.com/users/llllvvuu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/llllvvuu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/llllvvuu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/llllvvuu"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Interesting, sounds like this needs to be reduced down much further then.",
            "created_at": "2023-09-10T19:36:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/25074#issuecomment-1712919141",
            "id": 1712919141,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25074",
            "node_id": "IC_kwDOAPphoM5mGRJl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1712919141/reactions"
            },
            "updated_at": "2023-09-10T19:36:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1712919141",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Interesting, sounds like this needs to be reduced down much further then.\r\n\r\nYes, you're right, I had a lot of wrong leads in this issue, I'll archive this investigation and open a cleaner issue. #25088",
            "created_at": "2023-09-10T19:53:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/25074#issuecomment-1712922828",
            "id": 1712922828,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25074",
            "node_id": "IC_kwDOAPphoM5mGSDM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1712922828/reactions"
            },
            "updated_at": "2023-09-10T19:53:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1712922828",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5601392?v=4",
                "events_url": "https://api.github.com/users/llllvvuu/events{/privacy}",
                "followers_url": "https://api.github.com/users/llllvvuu/followers",
                "following_url": "https://api.github.com/users/llllvvuu/following{/other_user}",
                "gists_url": "https://api.github.com/users/llllvvuu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/llllvvuu",
                "id": 5601392,
                "login": "llllvvuu",
                "node_id": "MDQ6VXNlcjU2MDEzOTI=",
                "organizations_url": "https://api.github.com/users/llllvvuu/orgs",
                "received_events_url": "https://api.github.com/users/llllvvuu/received_events",
                "repos_url": "https://api.github.com/users/llllvvuu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/llllvvuu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/llllvvuu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/llllvvuu"
            }
        }
    ],
    "comments": 7,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/25074/comments",
    "created_at": "2023-09-10T03:25:38Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/25074/events",
    "html_url": "https://github.com/neovim/neovim/issues/25074",
    "id": 1888948125,
    "labels": [
        {
            "color": "FEF2C0",
            "default": false,
            "description": "issues reporting performance problems",
            "id": 101930601,
            "name": "performance",
            "node_id": "MDU6TGFiZWwxMDE5MzA2MDE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/performance"
        },
        {
            "color": "f9d0c4",
            "default": false,
            "description": "wrong behavior that was introduced in a previous commit (please bisect)",
            "id": 619474658,
            "name": "bug-regression",
            "node_id": "MDU6TGFiZWw2MTk0NzQ2NTg=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug-regression"
        },
        {
            "color": "0E8A16",
            "default": false,
            "description": "issue has been tracked to a specific commit",
            "id": 1481421490,
            "name": "has:bisected",
            "node_id": "MDU6TGFiZWwxNDgxNDIxNDkw",
            "url": "https://api.github.com/repos/neovim/neovim/labels/has:bisected"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1799626557,
            "name": "treesitter",
            "node_id": "MDU6TGFiZWwxNzk5NjI2NTU3",
            "url": "https://api.github.com/repos/neovim/neovim/labels/treesitter"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/25074/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM5wlw-d",
    "number": 25074,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/25074/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/25074/timeline",
    "title": "bug: performance regression in `2ca076e45` - 100% CPU and lag on 100 LOC file",
    "updated_at": "2023-09-10T19:53:56Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/25074",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/5601392?v=4",
        "events_url": "https://api.github.com/users/llllvvuu/events{/privacy}",
        "followers_url": "https://api.github.com/users/llllvvuu/followers",
        "following_url": "https://api.github.com/users/llllvvuu/following{/other_user}",
        "gists_url": "https://api.github.com/users/llllvvuu/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/llllvvuu",
        "id": 5601392,
        "login": "llllvvuu",
        "node_id": "MDQ6VXNlcjU2MDEzOTI=",
        "organizations_url": "https://api.github.com/users/llllvvuu/orgs",
        "received_events_url": "https://api.github.com/users/llllvvuu/received_events",
        "repos_url": "https://api.github.com/users/llllvvuu/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/llllvvuu/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/llllvvuu/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/llllvvuu"
    }
}