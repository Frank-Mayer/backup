{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "### Problem\r\n\r\nTreesitter highlight works incorrectly with some certain queries with predicates. This example was brought by an user `refp`:\r\n\r\nLanguage: `go`\r\n\r\n<img src=\"https://github.com/neovim/neovim/assets/1009873/c61f6553-a04a-4a0f-b4e5-97a5ae72fb39\" width=500 />\r\n\r\n<br/>\r\n\r\nWith the following query, whose intention is to capture highlight a string in some function call with `@sql` when the method name is `Query`:\r\n\r\n```query\r\n((call_expression\r\n  (selector_expression\r\n    field: (field_identifier) @_field)\r\n  (argument_list\r\n    [\r\n      (raw_string_literal)\r\n      (interpreted_string_literal)\r\n    ] @sql))\r\n  (#eq? @_field \"Query\")\r\n  ; (#offset! @sql 0 0 0 0); <----------- note this hack [optional]\r\n)\r\n```\r\n\r\nThis should match only for `db.Query(\"SELECT ...\")`, but NOT for `db.NotQuery(\"SELECT ...\")`. But treesitter is returning two captures as shown in the screenshot.\r\n\r\nWhat's strange is, **when we add the directive**\r\n```\r\n(#offset! @sql 0 0 0 0)\r\n```\r\n\r\nwhich semantically does nothing, *it works*: the capture group is correct. Please see the minimal reproduction below.\r\n\r\nThis bug could be either:\r\n\r\n- a bug of neovim (in `treesitter.c` code)\r\n- or a bug of the upstream tree-sitter\r\n\r\nRelated to #23664 but slightly different (it's not about metadata, `match` being incorrect), probably sharing the same root cause.\r\n\r\n\r\n### Steps to reproduce\r\n\r\nHave a go parser installed on VIMRUNTIME.\r\n\r\n```lua\r\n-- ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n-- 1. Prepare parser (tree) and the query.\r\n-- ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n\r\nlocal code = [[\r\ndb.Query(\"INTERPRETED STRING\")\r\ndb.NotQuery(`RAW STRING`)\r\n]] -- lang:go\r\n\r\nlocal parser = vim.treesitter.get_string_parser(code, 'go', {}) ---@type LanguageTree\r\nlocal tree = parser:parse()[1] ---@type TSTree\r\nlocal root = tree:root() ---@type TSNode\r\n\r\nlocal query = [[\r\n((call_expression\r\n  (selector_expression\r\n    field: (field_identifier) @_field)\r\n  (argument_list\r\n    [\r\n      (raw_string_literal)\r\n      (interpreted_string_literal)\r\n    ] @sql))\r\n  (#eq? @_field \"Query\")\r\n  ; (#offset! @sql 0 0 0 0); <----------- note this hack [optional]\r\n)\r\n]]\r\n\r\n---@type Query\r\nlocal ts_query = vim.treesitter.query.parse('go', query)\r\n-- vim.print(ts_query)\r\n-- {\r\n--   captures = <1>{ \"_field\", \"sql\" },\r\n--   info = {\r\n--     captures = <table 1>,\r\n--     patterns = { {\r\n--        { \"any-of?\", 1, \"Query\" },\r\n--        { \"offset!\", 2, \"0\", \"0\", \"0\", \"0\" }  -- <--------------- optional\r\n--     } }\r\n--   },\r\n--   ...\r\n-- }\r\n\r\n-- ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n-- 2. Execute the query and get all the captures.\r\n-- ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n\r\nfor capture_id, node, metadata in ts_query:iter_captures(root, code, 0, 3) do\r\n  ---@cast node TSNode\r\n  ---@cast metadata TSMetadata\r\n\r\n  local name = ts_query.captures[capture_id]\r\n\r\n  local node_text = vim.treesitter.get_node_text(node, code, { metadata = metadata })\r\n  vim.print(('id=%d @%-8s : node = %s'):format(capture_id, name, node_text))\r\nend\r\n\r\n-- Result (BUG!) there is an errorneous match.\r\n-- id=1 @_field   : node = Query\r\n-- id=2 @sql      : node = \"INTERPRETED STRING\"\r\n-- id=2 @sql      : node = `RAW STRING`  <---------- should not match.\r\n\r\n-- Result with (#offset! @sql 0 0 0 0) enabled: correctly captures only one `@sql` match\r\n-- id=1 @_field   : node = Query\r\n-- id=2 @sql      : node = \"INTERPRETED STRING\"\r\n```\r\n\r\n### Expected behavior\r\n\r\n<details>\r\n<summary>(Folded: with the `dummy` directive applied)</summary>\r\n\r\n<img src=\"https://github.com/neovim/neovim/assets/1009873/1e63feae-2004-420a-98fd-0f99841dc5b2\" width=500 />\r\n\r\n</details>\r\n\r\nCorrect result: only one capture is returned for `@sql`.\r\n\r\n```diff\r\n -- id=1 @_field   : node = Query\r\n -- id=2 @sql      : node = \"INTERPRETED STRING\"\r\n```\r\n\r\nBut the above code gives an erroneous capture:\r\n\r\n```diff\r\n -- id=1 @_field   : node = Query\r\n -- id=2 @sql      : node = \"INTERPRETED STRING\"\r\n--- id=2 @sql      : node = `RAW STRING`  <---------- should not match.\r\n```\r\n\r\n\r\n### Neovim version (nvim -v)\r\n\r\n0.10-HEAD 2cd76a758\r\n\r\n<details>\r\n<summary>Other details (irrelevant)</summary>\r\n\r\n### Vim (not Nvim) behaves the same?\r\n\r\nN/A\r\n\r\n### Operating system/version\r\n\r\nmacOS 14\r\n\r\n### Terminal name/version\r\n\r\ndoesn't matter\r\n\r\n### $TERM environment variable\r\n\r\nxterm-256color\r\n\r\n### Installation\r\n\r\nbuild from source\r\n\r\n</details>\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "Thank you very much, both for the assistance in figuring out this odd behavior - but also for helping me understand more about tree-sitter! @wookayin :muscle:\r\n\r\nPerhaps this is the start of some contributions from me, I surely got inspired messing around (even though I seem to have been unlucky in what I tested and in what order, a lot learnt though)!",
            "created_at": "2024-01-28T01:56:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/27239#issuecomment-1913409330",
            "id": 1913409330,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27239",
            "node_id": "IC_kwDOAPphoM5yDE8y",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1913409330/reactions"
            },
            "updated_at": "2024-01-28T01:56:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1913409330",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5598866?v=4",
                "events_url": "https://api.github.com/users/FilipRoseen-refp/events{/privacy}",
                "followers_url": "https://api.github.com/users/FilipRoseen-refp/followers",
                "following_url": "https://api.github.com/users/FilipRoseen-refp/following{/other_user}",
                "gists_url": "https://api.github.com/users/FilipRoseen-refp/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/FilipRoseen-refp",
                "id": 5598866,
                "login": "FilipRoseen-refp",
                "node_id": "MDQ6VXNlcjU1OTg4NjY=",
                "organizations_url": "https://api.github.com/users/FilipRoseen-refp/orgs",
                "received_events_url": "https://api.github.com/users/FilipRoseen-refp/received_events",
                "repos_url": "https://api.github.com/users/FilipRoseen-refp/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/FilipRoseen-refp/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/FilipRoseen-refp/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/FilipRoseen-refp"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I remember similar reports in the past, e.g., https://github.com/neovim/neovim/issues/20948.\r\n\r\nMight also be related to https://github.com/neovim/neovim/issues/23664 (wrong metadata with multiple captures).",
            "created_at": "2024-01-28T08:50:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/27239#issuecomment-1913519616",
            "id": 1913519616,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27239",
            "node_id": "IC_kwDOAPphoM5yDf4A",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1913519616/reactions"
            },
            "updated_at": "2024-01-28T08:50:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1913519616",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Some progress on debugging. I see two issues here:\r\n\r\nAn iterator `TSNode:_rawquery()` would enumerate \"captures\" `(capture_id: integer, node: TSNode, match: TSMatch)`\r\n\r\n- First, **`match` is nil** from the second capture. Therefore, the information whether a predicate has been filtered out this match is *lost* for this capture. \r\n  - https://github.com/neovim/neovim/blob/v0.9.5/runtime/lua/vim/treesitter/query.lua#L649-L658\r\n  - https://github.com/neovim/neovim/blob/v0.9.5/src/nvim/lua/treesitter.c#L1334\r\n  - This confirms that #23664 (reports wrong information from the second capture within a match) is also caused by the same issue.\r\n\r\n- Second, the same instance of `match` Lua table is returned across different matches. This is C implementation issue -- we should be returning a copy (Cf. #17099 tries to create a new table, so could be a relevant fix). This wouldn't be a big problem unless the mutating table `match` is stored somewhere other than the predicates.\r\n  - See the highlighted line below in the tracing result.\r\n \r\nThis bug has existed since the first implementation 440695c29696f261337227e5c419aa1cf313c2dd of treesitter. My question is: Is the behavior of `query_next_capture` [returning only 2 values: `[index, node]`](https://github.com/neovim/neovim/blob/v0.9.5/src/nvim/lua/treesitter.c#L1334), `match` being `nil` intended? /cc @bfredl If not, I can fix this to always return the correct, non-nil `match` table.\r\n\r\n\r\n### Tracing Result\r\n\r\nTraces in the chronological order; important lines are highlighted.\r\n\r\nFor the first match:\r\n\r\n```diff\r\n -- [iter_captures:raw_iter] {{ \r\n+\tmatch = table: 0x0101fb8d70 { <userdata<node field_identifier> 1>, pattern = 1 }\r\n \tcapture_id = 1, captured_node = <userdata<node field_identifier> 1> range={ 0, 3, 0, 8 }\r\n -- }}\r\n -- predicate returned TRUE\r\n -- match is not nil, predicates have been applied.\r\n capture_id=1 @_field   : node = Query, metadata = {}\r\n \r\n -- [iter_captures:raw_iter] {{ \r\n-\tmatch =  nil\r\n \tcapture_id = 2, captured_node = <userdata<node interpreted_string_literal> 1> range={ 0, 9, 0, 29 }\r\n -- }}\r\n--- 🐉 match == nil, so predicates are not applied.\r\ncapture_id=2 @sql      : node = \"INTERPRETED STRING\", metadata = {}\r\n```\r\n\r\nFor the second match:\r\n```diff\r\n -- [iter_captures:raw_iter] {{ \r\n+\tmatch = table: 0x0101fb8d70 { <userdata<node field_identifier> 1>, active = true, pattern = 1 }\r\n \tcapture_id = 1, captured_node = <userdata<node field_identifier> 1> range={ 1, 3, 1, 11 }\r\n -- }}\r\n+-- predicate returned FALSE, excluding this match\r\n --------------- tail call: try next match -----------------\r\n \r\n -- [iter_captures:raw_iter] {{ \r\n-\tmatch =  nil\r\n \tcapture_id = 2, captured_node = <userdata<node raw_string_literal> 1> range={ 1, 12, 1, 24 \r\n }\r\n -- }}\r\n--- 🐉 match == nil, so predicates are not applied.\r\n capture_id=2 @sql      : node = `RAW STRING`, metadata = {}\r\n```\r\n\r\n(iterator terminates)\r\n\r\n```\r\n-- [iter_captures:raw_iter] {{ \r\n\tmatch =  nil\r\n\tcapture_id = nil, captured_node = nil \r\n-- }}\r\n```",
            "created_at": "2024-01-29T01:19:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/27239#issuecomment-1913805826",
            "id": 1913805826,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27239",
            "node_id": "IC_kwDOAPphoM5yElwC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1913805826/reactions"
            },
            "updated_at": "2024-01-29T01:25:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1913805826",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> My question is: Is the behavior of query_next_capture [returning only 2 values: [index, node]](https://github.com/neovim/neovim/blob/v0.9.5/src/nvim/lua/treesitter.c#L1334), match being nil intended?\r\n\r\nI believe this is not the case, if the code is that old. This situation just wasn't considered, most likely.",
            "created_at": "2024-01-29T08:44:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/27239#issuecomment-1914217908",
            "id": 1914217908,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27239",
            "node_id": "IC_kwDOAPphoM5yGKW0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1914217908/reactions"
            },
            "updated_at": "2024-01-29T08:44:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1914217908",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> An iterator TSNode:_rawquery() would enumerate \"captures\" (capture_id: integer, node: TSNode, match: TSMatch)\r\n\r\n> - First, match is nil from the second capture.\r\n> - Second, the same instance of match Lua table is returned across different matches.\r\n\r\n> This bug has existed since the first implementation https://github.com/neovim/neovim/commit/440695c29696f261337227e5c419aa1cf313c2dd of treesitter.\r\n\r\nif one only were to go a little step further, and consider these two points _together_ , it would almost look like it was intentional at the time: \r\n\r\n- As the `match` table only was used _once_ to filter out based one predicates, and it wasn't used to keep track of the \"identity\" of a match, there was no need original to allocate extra memory for every single match that immediately would have become GC garbage to clean up.\r\n\r\nOf course it is perfectly fine to change the code if we now _need_ that information. But that old code didn't allocate memory on stuff  *before* someone came around with an usecase which needed that stuff, is not a bug.  \r\n\r\nAlthough if possible I would still do that duplication in the lua layer, so you can opt-in only were this is necessary.",
            "created_at": "2024-01-29T09:02:37Z",
            "html_url": "https://github.com/neovim/neovim/issues/27239#issuecomment-1914247646",
            "id": 1914247646,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27239",
            "node_id": "IC_kwDOAPphoM5yGRne",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1914247646/reactions"
            },
            "updated_at": "2024-01-29T09:02:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1914247646",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/27239/comments",
    "created_at": "2024-01-28T01:38:12Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/27239/events",
    "html_url": "https://github.com/neovim/neovim/issues/27239",
    "id": 2103907291,
    "labels": [
        {
            "color": "f9d0c4",
            "default": true,
            "description": "issues reporting wrong behavior",
            "id": 77997474,
            "name": "bug",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3NA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1799626557,
            "name": "treesitter",
            "node_id": "MDU6TGFiZWwxNzk5NjI2NTU3",
            "url": "https://api.github.com/repos/neovim/neovim/labels/treesitter"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/27239/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM59ZxPb",
    "number": 27239,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 1,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 1,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 2,
        "url": "https://api.github.com/repos/neovim/neovim/issues/27239/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/27239/timeline",
    "title": "Treesitter captures a wrong pattern after applying predicates",
    "updated_at": "2024-02-15T10:02:55Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/27239",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
        "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
        "followers_url": "https://api.github.com/users/wookayin/followers",
        "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
        "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/wookayin",
        "id": 1009873,
        "login": "wookayin",
        "node_id": "MDQ6VXNlcjEwMDk4NzM=",
        "organizations_url": "https://api.github.com/users/wookayin/orgs",
        "received_events_url": "https://api.github.com/users/wookayin/received_events",
        "repos_url": "https://api.github.com/users/wookayin/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/wookayin"
    }
}