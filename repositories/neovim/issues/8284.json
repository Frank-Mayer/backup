{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "In the current state there are various functions which take a dictionary, use some values from it and ignore the rest. In some cases they even use that very same dictionary as `self` for callbacks found inside. I propose to stop this practice and error out if dictionary happens to contain unknown values. For the dictionaries used for `self` I propose to have some prefix for user data (e.g. `u_`) which is the only one allowed to be ignored. Reasoning:\r\n\r\n1. Having errors for unknown keys allows testing presence of certain features in EAFP style without fearing of unintended side-effects in case function with `opts` changes state.\r\n2. Errors present uniform way of testing for features, without errors it would be needed to construct a test based on what function does which may be convoluted.\r\n3. If programmer bothered to supply some value to a function then he did it for a reason. If key is simply ignored function may deviate from intended behaviour and produce bugs which are hard to find.\r\n\r\nTo implement such behaviour it is logical to create a function or macros similar to Python’s [PyArg_ParseTupleAndKeywords](https://docs.python.org/3/c-api/arg.html#c.PyArg_ParseTupleAndKeywords) which may also be made responsible for parsing positional parameters, otherwise adding code implementing such behaviour will result in too much of a hassle. (Actually two functions: one for Dictionary, one for typval_T.)\r\n\r\nSame reasoning applies to string flags, based on what I know only `writefile()` does not ignore unknown flags (and only because I modified it to not do so).\r\n\r\nProposed change, of course, destroys backwards compatibility. But for functions other then ones taking callbacks this should be harmless, and functions which do were introduced in Neovim and there is no Vim compatibility in any case. But this is a thing which needs to be decided before the 1.0 release as there will be backwards compatibility to keep at that time.",
    "closed_at": "2024-09-04T10:21:52Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
        "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
        "followers_url": "https://api.github.com/users/lewis6991/followers",
        "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
        "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/lewis6991",
        "id": 7904185,
        "login": "lewis6991",
        "node_id": "MDQ6VXNlcjc5MDQxODU=",
        "organizations_url": "https://api.github.com/users/lewis6991/orgs",
        "received_events_url": "https://api.github.com/users/lewis6991/received_events",
        "repos_url": "https://api.github.com/users/lewis6991/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/lewis6991"
    },
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "> For the dictionaries used for `self` I propose to have some prefix for user data (e.g. `u_`) which is the only one allowed to be ignored\r\n\r\nInstead of a special prefix, why not just a `userdata` key which may contain a dictionary with any arbitrary data.\r\n\r\n> Same reasoning applies to string flags, based on what I know only writefile() does not ignore unknown flags\r\n\r\nIsn't the reason for ignoring unknown flags, so that plugins \"mostly work\" on older versions of Vim?",
            "created_at": "2018-05-01T21:22:34Z",
            "html_url": "https://github.com/neovim/neovim/issues/8284#issuecomment-385794592",
            "id": 385794592,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8284",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTc5NDU5Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/385794592/reactions"
            },
            "updated_at": "2018-05-01T21:22:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/385794592",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "The “mostly work” is a problem. Imagine that you are using `writefile()` in a plugin and want to append to a file. You use `a` flag with an old version of Vim and function succeeds, except for one thing: it does not append, it overwrites. Best case of that “mostly working” is that you lost all log entries, except one which made some problem not debuggable. Worst case is that you lost all data entries, except one and plugin ceased to function properly as it needs to read the data back and data is not there.",
            "created_at": "2018-05-01T21:29:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/8284#issuecomment-385796658",
            "id": 385796658,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8284",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTc5NjY1OA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/385796658/reactions"
            },
            "updated_at": "2018-05-01T21:29:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/385796658",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "There are some harmless flags out there like flag for `fsync()`: it is ignored or it is not ignored is mostly a matter of making plugin work faster. But old version of Vim cannot possibly know that `s` flag states for fsync and not e.g. for “substitute mode”: like regular writing, but in place of truncating and then writing it would write and not truncate, leaving data past the last byte intact. And this is essential semantic change. Check out how much of existing flags are actually harmless:\r\n\r\n- `writefile()`: 2 harmless out of 4:\r\n\r\n  - Ignoring `b` may result in a corrupt file if file is for some tool and it expects certain format.\r\n  - Ignoring `a` will result in a data loss.\r\n  - Ignoring `s`/`S` is mostly fine.\r\n\r\n- `substitute()`: 0 harmless of 1, 1 if you are lucky: ignoring `g` will result in incorrect output each time there is more then one match, but it is fine when there is only one.\r\n- `delete()`: 0 harmless of 2: each of `d` and `rf` alters the behaviour when used with directory argument, and AFAIR without these flags `delete()` will simply fail on directories.\r\n- `feedkeys()`: 1 harmless of 6 and only because it is the default. Though additionally 2 if you are lucky:\r\n\r\n  - Ignoring `n` may result in unexpected behaviour depending on which mappings user has. This is what I named “lucky”.\r\n  - Ignoring `t` will result in unexpected behaviour if flag is used properly because flag is there to workaround differences of handling different kinds of input.\r\n  - Ignoring `i` is only fine when there is no typeahead, otherwise it is a change in behaviour. If I am not mistaking this would primary hit using feedkeys() in macros and mappings.\r\n  - Ignoring `x` means that next VimL line will be executed before `feedkeys()` input was processed. This is going to result in unexpected behaviour because if plugin developer would be fine with executing actions after his function completes he would not write `x` in first place.\r\n  - `!` is another workaround for `feedkeys()` problems which is to be used under specific circumstances. Ignoring it would break some tests at least.\r\n\r\n- `fnamemodify()`: 5 harmless out of 11, all if you are lucky (`:p`, `:8`, `:~`, `:.`, `:S`). “Lucky” highly depends on what path is used for: e.g. sometimes failing to use `:p` will result in attempting to access file `./~/foo/bar.baz` in place of `/home/user/foo/bar.baz` which would not end well, `:S` is harmless only if path is special, etc.\r\n\r\n- `hasmapto()`: may safely return 0 for any unknown mode as if mode is not known to Vim it would definitely contain no mappings for it. Though `{mode}` argument is not really a flag collection.\r\n\r\n- `input()`/`inputdialog()`: 4 out of 5 will only degrade user experience. Not the case for `cancelreturn` though, it may render plugin unable to determine whether user cancelled input.\r\n\r\n- `job_start()`: 2 harmless out of 12 (`*_buffered`), additionally 4 (width, height, TERM, detach) if you are lucky.\r\n\r\n- `mkdir()`: 0 harmless out of 1 as ignoring `p` will result in failure to create some directory.\r\n\r\n- `readfile()`: 0 harmless out of 1  as ignoring `b` may result in failure to parse binary file properly.\r\n\r\n- `search[pos]()`: 6 relatively harmless out of 9, zero absolutely harmless. I see `n` to be used for purpose “perform search without interferring with user”, so ignoring it may make user upset but not alter plugin functions. If you are lucky ignoring `w`/`W` is fine (especially if wrapscan has needed value), ignoring `z` and `c` may result in less matches found, ignoring `e` may result in infinite loop if `c` is not ignored at the same time, `p` alters the behaviour of the function significantly and ignoring it is never an option (though I have no idea what it is useful for), same for `b`. `s` malfunction may also upset user if it is used to return to previous position once plugin did its job.\r\n\r\n- `searchpair[pos]()`: similar situation to `search()`: 4 relatively harmless out of 8, zero absolutely harmless. Excluded `c` as I see that searching pair at cursor position should be not uncommon. Additional two flags (`r` and `m`) alter function behaviour too significantly to call ignoring them relatively harmless.\r\n\r\n- `sockconnect()`: 1 harmless out of 3 (data_buffered).\r\n\r\n- `timer_start()`: 0 harmless out of 1: would make unintenionally infinitely repeated timer if ignored.\r\n\r\nWould not like to bet whether ignoring some new flag will result in plugin “mostly working” with such odds of the opposite after observing existing flags.",
            "created_at": "2018-05-01T22:24:39Z",
            "html_url": "https://github.com/neovim/neovim/issues/8284#issuecomment-385808785",
            "id": 385808785,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8284",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTgwODc4NQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/385808785/reactions"
            },
            "updated_at": "2018-05-01T22:24:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/385808785",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@justinmk Coming to think of that, do we *need* `userdata`? Vim just requires partials should plugin author need `self`, we did not *have* partials when jobs were introduced (partials were added in 521e45f2, 24 Oct 2016 and I see earlier commits related to jobs, specifically 13f77ca0f, 13 Sep 2014 is when job functions first appeared in eval.txt), but now they are there.",
            "created_at": "2018-05-02T08:21:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/8284#issuecomment-385901045",
            "id": 385901045,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8284",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTkwMTA0NQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/385901045/reactions"
            },
            "updated_at": "2018-05-02T08:22:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/385901045",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I find partials really awkward but either way is fine with me. I think `userdata` is a useful convention in general though.",
            "created_at": "2018-05-02T08:24:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/8284#issuecomment-385901793",
            "id": 385901793,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8284",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTkwMTc5Mw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/385901793/reactions"
            },
            "updated_at": "2018-05-02T08:24:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/385901793",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "`userdata` is only needed for callbacks to store something into. If to have `self` partials are required there would not be any need to do so as they come with a different dictionary.",
            "created_at": "2018-05-02T08:42:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/8284#issuecomment-385906148",
            "id": 385906148,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8284",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTkwNjE0OA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/385906148/reactions"
            },
            "updated_at": "2018-05-02T08:42:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/385906148",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "To be able to build a prototype dict with options and handlers, and then send in a copy to `jobstart()` etc is handy. Therefore I think something like `userdata` should still be allowed.",
            "created_at": "2018-05-02T08:49:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/8284#issuecomment-385908183",
            "id": 385908183,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8284",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTkwODE4Mw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/385908183/reactions"
            },
            "updated_at": "2018-05-02T08:49:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/385908183",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@bfredl Prototyping just as well may be done in another dict, I do not see a reason to do so exactly in options dictionary. Also using a separate dictionary rather then accessing anything via `self.userdata` is easier to write. And note that options dictionary in this case is essentially read-only: it is read once on invocation and changes are ignored after that. Userdata breaks this, without that I can write in documentation that user should not expect any changes to options to have any effect. Why should one expect that modifying `userdata` has effect on next callback calls and modifying `on_stdout` has no effect at all, except for maybe confusing other dictionary users?",
            "created_at": "2018-05-02T09:30:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/8284#issuecomment-385919049",
            "id": 385919049,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8284",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTkxOTA0OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/385919049/reactions"
            },
            "updated_at": "2018-05-02T09:30:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/385919049",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Prototyping just as well may be done in another dict, I do not see a reason to do so exactly in options dictionary.\r\n\r\nWell, for the simple reason you can specify options in the prototype. I'm not sure why this is pattern that should be forbidden _a priori_.\r\n\r\n> Also using a separate dictionary rather then accessing anything via self.userdata is easier to write.\r\n\r\nNot sure of that, you have to first bind all you callbacks to your private self dict before placing them in the options dict, which seems a bit clumsy, and the `copy()` pattern doesn't work anymore. Or if you think it does, please show how.\r\n\r\n> Userdata breaks this, without that I can write in documentation that user should not expect any changes to options to have any effect. Why should one expect that modifying userdata has effect on next callback calls and modifying on_stdout has no effect at all, except for maybe confusing other dictionary users?\r\n\r\nI have not ever seen this being a confusion all this time we have allowed this. (and I have seen many confusions regarding job control). But if this truly is a concern, `userdata` can of course be read-only; if it is the _only_ user key it will likely be a internally mutable dict anyway.\r\n\r\nAlso, currently streams can be added to the options/`self` dict for `on_exit` (or `jobwait()`), in buffered mode with no dedicated stream callbacks. If we really want to hammer in that options dict is read-only, we might want to change this, to specify the other dict or something. (it is not in a release yet, so it wouldn't at least be release-breaking to change it)",
            "created_at": "2018-05-02T10:00:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/8284#issuecomment-385927000",
            "id": 385927000,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8284",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTkyNzAwMA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/385927000/reactions"
            },
            "updated_at": "2018-05-02T10:00:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/385927000",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Well, for the simple reason you can specify options in the prototype. I'm not sure why this is pattern that should be forbidden _a priori_.\r\n\r\nIf something should not be done in actual code then no need to allow that in prototype as well. Or it will be done outside of prototyping for sure.\r\n\r\n> Not sure of that, you have to first bind all you callbacks to your private self dict before placing them in the options dict, which seems a bit clumsy, and the `copy()` pattern doesn't work anymore. Or if you think it does, please show how.\r\n\r\nFor copy you just copy that private dictionary. Basically\r\n\r\n```VimL\r\nlet opts = {}\r\nfunction opts.on_stdout(...)\r\nendfunction\r\n…\r\nlet ocpy = copy(opts)\r\ncall job_start(['echo', 'abc'], ocpy)\r\n```\r\n\r\nvs\r\n\r\n```VimL\r\nlet slf = {}\r\nfunction slf.on_stdout(...)\r\nendfunction\r\n…\r\nlet slfcpy = copy(slf)\r\ncall job_start(['echo', 'abc'], {'on_stdout': slfcpy.on_stdout})\r\n```\r\n\r\nI do not really see a big deal here, it maybe is even better as you see used options in `job_start()` invocation rather then needing to scroll somewhere else. If there is really a need to have a copy of options too and having dictionary literal is not an option for some reason then you would certainly have to resolve to holding lambda accepting `slfcpy`, rather then options dictionary itself though.\r\n\r\n> I have not ever seen this being a confusion all this time we have allowed this. (and I have seen many confusions regarding job control). But if this truly is a concern, `userdata` can of course be read-only; if it is the _only_ user key it will likely be a internally mutable dict anyway.\r\n\r\nWhich would still stand out, not to mention the fact that making `self` dictionary *actually* read-only requires VAR_FIXED and may tamper other uses. Though what I actually wanted to say is more “oneshot” then “read-only”: value is examined and applied only once, after that you are free to do with the dictionary and values whatever you like to.\r\n\r\n> Also, currently streams can be added to the options/`self` dict for `on_exit` (or `jobwait()`), in buffered mode with no dedicated stream callbacks. If we really want to hammer in that options dict is read-only, we might want to change this, to specify the other dict or something. (it is not in a release yet, so it wouldn't at least be release-breaking to change it)\r\n\r\nDid not really understand that paragraph. How do you add streams, like the above examples with `copy()` removed? I see that would work in both examples identically.",
            "created_at": "2018-05-02T10:33:05Z",
            "html_url": "https://github.com/neovim/neovim/issues/8284#issuecomment-385934616",
            "id": 385934616,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8284",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTkzNDYxNg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/385934616/reactions"
            },
            "updated_at": "2018-05-02T10:33:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/385934616",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">  it maybe is even better as you see used options in job_start() invocation rather then needing to scroll somewhere else\r\n\r\nFair enough, that might be worth the indirection.\r\n\r\n> Which would still stand out,\r\n\r\nWell, partials also contain inner mutability for sure. \r\n\r\n> How do you add streams, like the above examples with copy() removed?\r\n\r\nBy setting the `stdout_buffered` option but not `on_stdout`. Then it is available as `self.stdout` to `on_exit`, which allows to use only one callback and not three if one only is interested in final result. This will no longer be true with indirect self, unless we change it. (it can also be used with `jobwait()` to emulate a more flexible `systemlist()`, though this is not affected by this change)  ",
            "created_at": "2018-05-02T10:54:50Z",
            "html_url": "https://github.com/neovim/neovim/issues/8284#issuecomment-385939175",
            "id": 385939175,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8284",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTkzOTE3NQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/385939175/reactions"
            },
            "updated_at": "2018-05-02T10:54:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/385939175",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "`self.stdout` is a thing which looks inconsisent with the rest of the API: none of other variants *require* using dictionary function in a callback. And there is a number of less inconsistent alternatives:\r\n\r\n- Pass collected data as another argument (dictionary since there are stdout and stderr).\r\n- Transform event `data` argument (currently holds exit code) into a dictionary and pass everything there. Probably a good idea anyway since it allows passing other additional data: e.g. could have signal name here if job was finished by a signal (`rc` shell authors actually found it useful to transform some exit codes into signal names, but I would not like exit codes be either numbers or strings).\r\n- Add `jobrecv()` function which will flush collected data. Using that is valid up until exit callback has finished.\r\n\r\nOr really do not actually bother, I see that documented behaviour is invoking `on_stdout` with data and not use `stdout` key. I would more like to see `{'on_stdout': Callback, 'stdout_buffered': 1, 'on_stderr': 'stdout'}` working: this is *not* invoking one callback for stdout and stderr, this is making stdout and stderr use one and the same pipe (BTW, Vim does allow such binding with `'err_io': 'out'`; I find that useful despite that using separate key looks unneccessary here). Should be sufficient in many cases, though otherwise it would be three callbacks where two store data and one is `on_exit`.",
            "created_at": "2018-05-03T22:05:21Z",
            "html_url": "https://github.com/neovim/neovim/issues/8284#issuecomment-386451457",
            "id": 386451457,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8284",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjQ1MTQ1Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/386451457/reactions"
            },
            "updated_at": "2018-05-03T22:05:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/386451457",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> none of other variants require using dictionary function in a callback.\r\n\r\nWell it doesn't require it  (you just need any reference to the dict), it is just the most convenient way. It can also work with `jobwait()` and no callback at all. For this reason `chanrecv()` sounds best of the alternatives, but also allow it to use after `jobwait()`. Though a downside is another root for leaked value: If `stdout_buffered` is used with `jobwait()` and no callbacks, but the value is never `chanrecv()`, the buffer will be leaked. But I guess we can free leaked buffer when the main loop is reached after `jobwait()` (so it is guaranteed to work in `on_exit` or just after `jobwait()` but not later)\r\n\r\n> 'on_stderr': 'stdout'\r\n\r\nWould also be nice to have.",
            "created_at": "2018-05-04T10:49:53Z",
            "html_url": "https://github.com/neovim/neovim/issues/8284#issuecomment-386565910",
            "id": 386565910,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8284",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjU2NTkxMA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/386565910/reactions"
            },
            "updated_at": "2018-05-04T10:49:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/386565910",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Improving vimscript is no longer a goal.",
            "created_at": "2024-09-04T10:21:52Z",
            "html_url": "https://github.com/neovim/neovim/issues/8284#issuecomment-2328484810",
            "id": 2328484810,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8284",
            "node_id": "IC_kwDOAPphoM6KydvK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2328484810/reactions"
            },
            "updated_at": "2024-09-04T10:21:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2328484810",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@lewis6991 this topic applies generally to the API and Lua stdlib too. But it's unlikely that we would implement this because it would make backwards compatible options awkward to use.",
            "created_at": "2024-09-04T11:01:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/8284#issuecomment-2328589561",
            "id": 2328589561,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/8284",
            "node_id": "IC_kwDOAPphoM6Ky3T5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2328589561/reactions"
            },
            "updated_at": "2024-09-04T11:01:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2328589561",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comments": 15,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/8284/comments",
    "created_at": "2018-04-15T19:52:29Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/8284/events",
    "html_url": "https://github.com/neovim/neovim/issues/8284",
    "id": 314445994,
    "labels": [
        {
            "color": "FBCA04",
            "default": false,
            "description": "discussion has run its course, need decision how to proceed",
            "id": 83851236,
            "name": "needs:decision",
            "node_id": "MDU6TGFiZWw4Mzg1MTIzNg==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/needs:decision"
        },
        {
            "color": "c7def8",
            "default": false,
            "description": "",
            "id": 109899557,
            "name": "vimscript",
            "node_id": "MDU6TGFiZWwxMDk4OTk1NTc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/vimscript"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "compatibility with Vim or older Neovim",
            "id": 109899712,
            "name": "compatibility",
            "node_id": "MDU6TGFiZWwxMDk4OTk3MTI=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/compatibility"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 114040313,
            "name": "robustness",
            "node_id": "MDU6TGFiZWwxMTQwNDAzMTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/robustness"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "OS processes, spawn",
            "id": 182884815,
            "name": "job-control",
            "node_id": "MDU6TGFiZWwxODI4ODQ4MTU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/job-control"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "",
            "id": 4457150369,
            "name": "architecture",
            "node_id": "LA_kwDOAPphoM8AAAABCaq3oQ",
            "url": "https://api.github.com/repos/neovim/neovim/labels/architecture"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/8284/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 240,
        "created_at": "2014-11-26T22:13:11Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk"
        },
        "description": "We don't plan to work on this, but will accept high quality contributions from someone who will own the feature and follow up on bug reports.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/9",
        "id": 881978,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/9/labels",
        "node_id": "MDk6TWlsZXN0b25lODgxOTc4",
        "number": 9,
        "open_issues": 257,
        "state": "open",
        "title": "needs-owner",
        "updated_at": "2024-09-09T20:31:15Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/9"
    },
    "node_id": "MDU6SXNzdWUzMTQ0NDU5OTQ=",
    "number": 8284,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/8284/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "not_planned",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/8284/timeline",
    "title": "Do not allow random values in opts dictionaries",
    "updated_at": "2024-09-04T11:02:13Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/8284",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
        "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
        "followers_url": "https://api.github.com/users/ZyX-I/followers",
        "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
        "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ZyX-I",
        "id": 322097,
        "login": "ZyX-I",
        "node_id": "MDQ6VXNlcjMyMjA5Nw==",
        "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
        "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
        "repos_url": "https://api.github.com/users/ZyX-I/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ZyX-I"
    }
}