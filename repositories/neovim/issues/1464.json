{
    "active_lock_reason": "resolved",
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "I stumbled upon [Jaxbot's browserlink](https://github.com/jaxbot/browserlink.vim) which is actually a neat plugin. I thought about building a function, that checks if the node is activated, Vim will autowrite html/css filetypes every 10 seconds with < silent >, you don't get bothered with endless \"writed\" messages displayed. \nSo you get always live feedback on your another display (in this case, the browser), without the need to saving your buffer again and again. \n\nBut that's going to be tricky. Vim will freeze when it's writing. You will especially notice the freezing when it's writing a large chunk of buffer. \n\nI know that Neovim is targeting on a non-blocking feature of Vim plugins, in order to get asynchronous interaction. So I' m wondering if Neovim's non-blocking feature would be possible too to Vim's internal functions? \n\nLike when you initiate the writing commando, Neovim will write it behind the scenes, while you can still move your cursor. \nNeovim will not writing first, freezing all other things, then it's your turn to have your interaction with Neovim again. You will get noticed it with the \"written\" message. \n\nWhen all internal features of Vim could be asynchronously executed, Neovim will not be freezing anymore for some seconds (aka non-blocking, if you want to call), but this could introduce new bugs. \n\nBut on the other side, I believe this will greatly improve the speed and the snappy feel of Neovim, since there are internal commands everywhere, that the experience benefits of Neovim will outweigh the possibility of new bugs IMHO. \n",
    "closed_at": "2024-09-03T15:21:35Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk"
    },
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "> So I' m wondering if Neovim's non-blocking feature would be possible too to Vim's internal functions?\n\nOnly for a _child_ Nvim process.  #1446 and #1404 could get an 80% solution, but if you edit the buffer in between writing and reloading it, what happens? \n\nWe could set `textlock` (see `:help textlock`) during the write, so you could move around but not edit.\n\n> Vim will freeze when it's writing. You notice it especially when it's writing a large chunk of buffer.\n\nSaving to disk should not block the UI, I agree.\n\n> when all internal features of Vim could be asynchronously executed.\n\nThat is not realistically on the roadmap for the next 2 years (if ever) as far as I can tell. It's better to isolate the core and offload whatever we can to out-of-process features/handlers/providers/plugins.\n",
            "created_at": "2014-11-13T00:14:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/1464#issuecomment-62819714",
            "id": 62819714,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1464",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyODE5NzE0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62819714/reactions"
            },
            "updated_at": "2014-11-13T00:38:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62819714",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "It is better not to bother user with textlock. If you will set textlock the first request I would make is make writing _blocking_ again because I constantly save while I am writing something and textlock throws away my work while blocking write just processes new keypresses after write is finished.\n",
            "created_at": "2014-11-13T03:43:42Z",
            "html_url": "https://github.com/neovim/neovim/issues/1464#issuecomment-62837488",
            "id": 62837488,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1464",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyODM3NDg4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62837488/reactions"
            },
            "updated_at": "2014-11-13T03:43:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62837488",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@ZyX-I Thanks for mentioning that. We can rule that out as a solution then.\n",
            "created_at": "2014-11-13T05:06:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/1464#issuecomment-62842454",
            "id": 62842454,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1464",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyODQyNDU0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62842454/reactions"
            },
            "updated_at": "2014-11-13T05:06:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62842454",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> @ZyX-I Thanks for mentioning that. We can rule that out as a solution then.\n\nWe could do the writeout asynchronously for buffers that are not being edited, but as soon as the user starts editing, it would start to block. This would, in my opinion, provide the best of both worlds. Mind, from what I learned of Vim's fileio, changing this will not be a simple task.\n",
            "created_at": "2014-11-13T09:27:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/1464#issuecomment-62863567",
            "id": 62863567,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1464",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyODYzNTY3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62863567/reactions"
            },
            "updated_at": "2014-11-13T09:27:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62863567",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> as soon as the user starts editing, it would start to block.\n\nVery nice. That may be the most practical short-term solution. \n\nI keep wanting to use undo tree to solve these problems. Here's an unfinished idea:\n1. tag the current undo point with a hash\n2. start an asynchronous write\n3. user continues editing merrily; undo tree is appended as normal\n4. when the write finishes, compare the hash of the file contents to the tagged undo point \n   - if it matches, great\n   - if it differs, panic and show the \"swap file\" dialog. This should almost never happen, I think.\n",
            "created_at": "2014-11-13T14:06:20Z",
            "html_url": "https://github.com/neovim/neovim/issues/1464#issuecomment-62894409",
            "id": 62894409,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1464",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyODk0NDA5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62894409/reactions"
            },
            "updated_at": "2014-11-13T14:47:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62894409",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> when the write finishes, compare the hash of the file contents to the tagged undo point...\n\nI'm not familiar yet with the undo tree so this was puzzling me: does the undo tree automatically calculate/keep a hash? On the other side: do we run the writeout through a hashing filter (for a good example of it, look at Go's hashers, very nice design)?\n",
            "created_at": "2014-11-13T14:43:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/1464#issuecomment-62899671",
            "id": 62899671,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1464",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyODk5Njcx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62899671/reactions"
            },
            "updated_at": "2014-11-13T14:43:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62899671",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> does the undo tree automatically calculate/keep a hash\n\nNo, we would need to calculate the hash on the current buffer. But I think the hash is not needed: either the write fails or it doesn't.\n\nOther ideas...\n\nNaive solution: \n1. copy the entire buffer on the heap\n2. send the copy to a libuv worker for async write\n3. `write_cb` schedules FileWritePost in next event loop tick\n\nA twist on the \"naive solution\": \n- Keep a shadow buffer in memory at all times. \n  - This doubles the space needed for a buffer, but avoids a giant copy step whenever we need an immutable copy to send to libuv. \n- All edits are sent to the buffer and its shadow\n- Whenever the shadow buffer is needed for asynchronous processing, it is locked.\n- When shadow buffer is unlocked, it is synced with the buffer by replaying the last N undo steps.\n\nIdeal solution: \n1. refactor Vim buffer object to use a persistent data structure (like [rope](http://en.wikipedia.org/wiki/Rope_%28data_structure%29) as you have mentioned)\n2. since it's cheap to make a \"copy\" of a persistent data structure, the naive solution should perform well.\n",
            "created_at": "2014-11-13T16:14:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/1464#issuecomment-62918282",
            "id": 62918282,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1464",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTE4Mjgy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62918282/reactions"
            },
            "updated_at": "2014-11-13T16:17:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62918282",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "The ideal solution sounds nice, but will take time to implement/mature. In the meanwhile, async until edit as I said earlier could be a midway point.\n",
            "created_at": "2014-11-13T17:17:39Z",
            "html_url": "https://github.com/neovim/neovim/issues/1464#issuecomment-62929873",
            "id": 62929873,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1464",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTI5ODcz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62929873/reactions"
            },
            "updated_at": "2014-11-13T17:17:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62929873",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> async until edit \n\n:+1: \n",
            "created_at": "2014-11-13T17:20:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/1464#issuecomment-62930317",
            "id": 62930317,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1464",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTMwMzE3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62930317/reactions"
            },
            "updated_at": "2014-11-13T17:20:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/62930317",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "NONE",
            "body": "What about remote files opened with netrw. Saving invokes `scp`. Is it possible to get the scp call non-blocking. I assume the temp file is saved first (internal save command) and afterwards the scp call is executed.  I would think only the second step leads to a noticable block of the UI. Does the plugin netrw has to adopt the new neovim async features?\n",
            "created_at": "2015-03-31T16:30:24Z",
            "html_url": "https://github.com/neovim/neovim/issues/1464#issuecomment-88161035",
            "id": 88161035,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1464",
            "node_id": "MDEyOklzc3VlQ29tbWVudDg4MTYxMDM1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/88161035/reactions"
            },
            "updated_at": "2015-03-31T16:30:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/88161035",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/371756?v=4",
                "events_url": "https://api.github.com/users/kiryph/events{/privacy}",
                "followers_url": "https://api.github.com/users/kiryph/followers",
                "following_url": "https://api.github.com/users/kiryph/following{/other_user}",
                "gists_url": "https://api.github.com/users/kiryph/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/kiryph",
                "id": 371756,
                "login": "kiryph",
                "node_id": "MDQ6VXNlcjM3MTc1Ng==",
                "organizations_url": "https://api.github.com/users/kiryph/orgs",
                "received_events_url": "https://api.github.com/users/kiryph/received_events",
                "repos_url": "https://api.github.com/users/kiryph/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/kiryph/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kiryph/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/kiryph"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">  with netrw. Saving invokes scp. Is it possible to get the scp call non-blocking\n\n@kiryph Yes, that's possible in Neovim already with `jobstart()`. netrw will never add that feature though.\n",
            "created_at": "2015-08-18T23:53:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/1464#issuecomment-132394057",
            "id": 132394057,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1464",
            "node_id": "MDEyOklzc3VlQ29tbWVudDEzMjM5NDA1Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/132394057/reactions"
            },
            "updated_at": "2015-08-18T23:53:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/132394057",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I think It would be nice to have a way of sending change log out of neovim. It's kinda updateing `.swp` file in real time.  Then any external program would be able to make a shadow buffer in realtime by itself.\nI believe this would be a cheap implementation\n\nEDIT:\n[vim-gitgutter](https://github.com/airblade/vim-gitgutter) is another plugin which would benefit from this feature. I also found people trying to find similar solution on this [Stackoverflow Post](http://stackoverflow.com/questions/29317107/what-is-the-structure-of-a-vim-swp-file)\n",
            "created_at": "2016-09-02T07:04:13Z",
            "html_url": "https://github.com/neovim/neovim/issues/1464#issuecomment-244299367",
            "id": 244299367,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1464",
            "node_id": "MDEyOklzc3VlQ29tbWVudDI0NDI5OTM2Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/244299367/reactions"
            },
            "updated_at": "2016-09-02T07:36:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/244299367",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4538941?v=4",
                "events_url": "https://api.github.com/users/roxma/events{/privacy}",
                "followers_url": "https://api.github.com/users/roxma/followers",
                "following_url": "https://api.github.com/users/roxma/following{/other_user}",
                "gists_url": "https://api.github.com/users/roxma/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/roxma",
                "id": 4538941,
                "login": "roxma",
                "node_id": "MDQ6VXNlcjQ1Mzg5NDE=",
                "organizations_url": "https://api.github.com/users/roxma/orgs",
                "received_events_url": "https://api.github.com/users/roxma/received_events",
                "repos_url": "https://api.github.com/users/roxma/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/roxma/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/roxma/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/roxma"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> netrw will never add that feature though.\r\n\r\n@justinmk ehm, why?\r\n",
            "created_at": "2019-01-24T16:42:33Z",
            "html_url": "https://github.com/neovim/neovim/issues/1464#issuecomment-457266931",
            "id": 457266931,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1464",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NzI2NjkzMQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/457266931/reactions"
            },
            "updated_at": "2019-01-24T16:42:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/457266931",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/198999?v=4",
                "events_url": "https://api.github.com/users/mcepl/events{/privacy}",
                "followers_url": "https://api.github.com/users/mcepl/followers",
                "following_url": "https://api.github.com/users/mcepl/following{/other_user}",
                "gists_url": "https://api.github.com/users/mcepl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mcepl",
                "id": 198999,
                "login": "mcepl",
                "node_id": "MDQ6VXNlcjE5ODk5OQ==",
                "organizations_url": "https://api.github.com/users/mcepl/orgs",
                "received_events_url": "https://api.github.com/users/mcepl/received_events",
                "repos_url": "https://api.github.com/users/mcepl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mcepl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mcepl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mcepl"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "This request is now mostly resolved or replaced by other topics:\r\n\r\n- https://github.com/neovim/neovim/issues/12857\r\n- https://github.com/neovim/neovim/labels/multiproc\r\n- https://github.com/neovim/neovim/issues/1180",
            "created_at": "2024-09-03T15:21:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/1464#issuecomment-2326802746",
            "id": 2326802746,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1464",
            "node_id": "IC_kwDOAPphoM6KsDE6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2326802746/reactions"
            },
            "updated_at": "2024-09-03T15:21:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2326802746",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comments": 14,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/1464/comments",
    "created_at": "2014-11-12T23:47:56Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/1464/events",
    "html_url": "https://github.com/neovim/neovim/issues/1464",
    "id": 48579383,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "FEF2C0",
            "default": false,
            "description": "performance, latency, cpu/memory usage",
            "id": 101930601,
            "name": "performance",
            "node_id": "MDU6TGFiZWwxMDE5MzA2MDE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/performance"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/1464/labels{/name}",
    "locked": true,
    "milestone": {
        "closed_at": null,
        "closed_issues": 645,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 566,
        "state": "open",
        "title": "backlog",
        "updated_at": "2024-09-09T18:06:19Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "MDU6SXNzdWU0ODU3OTM4Mw==",
    "number": 1464,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/1464/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/1464/timeline",
    "title": "asynchronous VimL/vimscript",
    "updated_at": "2024-09-03T15:21:43Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/1464",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/5211845?v=4",
        "events_url": "https://api.github.com/users/ReneFroger/events{/privacy}",
        "followers_url": "https://api.github.com/users/ReneFroger/followers",
        "following_url": "https://api.github.com/users/ReneFroger/following{/other_user}",
        "gists_url": "https://api.github.com/users/ReneFroger/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ReneFroger",
        "id": 5211845,
        "login": "ReneFroger",
        "node_id": "MDQ6VXNlcjUyMTE4NDU=",
        "organizations_url": "https://api.github.com/users/ReneFroger/orgs",
        "received_events_url": "https://api.github.com/users/ReneFroger/received_events",
        "repos_url": "https://api.github.com/users/ReneFroger/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ReneFroger/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ReneFroger/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ReneFroger"
    }
}