{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\nI don't want gc, gcc & co. to use treesitter-derived commentstrings in htmldjango files. I would always like to use the buffer-specified `{# %s #}` comment string. \n\nAs far as I could find out, there's no supported way to easily do this. So I've made my own `~/.config/nvim/after/ftplugin/htmldjango.lua` file with the contents (mostly copypasted from nvim source):\n\n```lua\nvim.opt_local.commentstring = '{# %s #}'\nvim.bo.commentstring = '{# %s #}'\n---@nodoc\n---@class vim._comment.Parts\n---@field left string Left part of comment\n---@field right string Right part of comment\n\n--- Get 'commentstring' at cursor\n---@param ref_position integer[]\n---@return string\nlocal function get_commentstring(ref_position)\n    local buf_cs = vim.bo.commentstring\n    return buf_cs\nend\n\n--- Compute comment parts from 'commentstring'\n---@param ref_position integer[]\n---@return vim._comment.Parts\nlocal function get_comment_parts(ref_position)\n    local cs = get_commentstring(ref_position)\n\n    if cs == nil or cs == '' then\n        vim.api.nvim_echo({ { \"Option 'commentstring' is empty.\", 'WarningMsg' } }, true, {})\n        return { left = '', right = '' }\n    end\n\n    if not (type(cs) == 'string' and cs:find('%%s') ~= nil) then\n        error(vim.inspect(cs) .. \" is not a valid 'commentstring'.\")\n    end\n\n    -- Structure of 'commentstring': <left part> <%s> <right part>\n    local left, right = cs:match('^(.-)%%s(.-)$')\n    return { left = left, right = right }\nend\n\n--- Make a function that checks if a line is commented\n---@param parts vim._comment.Parts\n---@return fun(line: string): boolean\nlocal function make_comment_check(parts)\n    local l_esc, r_esc = vim.pesc(parts.left), vim.pesc(parts.right)\n\n    -- Commented line has the following structure:\n    -- <whitespace> <trimmed left> <anything> <trimmed right> <whitespace>\n    local regex = '^%s-' .. vim.trim(l_esc) .. '.*' .. vim.trim(r_esc) .. '%s-$'\n\n    return function(line)\n        return line:find(regex) ~= nil\n    end\nend\n\n--- Compute comment-related information about lines\n---@param lines string[]\n---@param parts vim._comment.Parts\n---@return string indent\n---@return boolean is_commented\nlocal function get_lines_info(lines, parts)\n    local comment_check = make_comment_check(parts)\n\n    local is_commented = true\n    local indent_width = math.huge\n    ---@type string\n    local indent\n\n    for _, l in ipairs(lines) do\n        -- Update lines indent: minimum of all indents except blank lines\n        local _, indent_width_cur, indent_cur = l:find('^(%s*)')\n\n        -- Ignore blank lines completely when making a decision\n        if indent_width_cur < l:len() then\n            -- NOTE: Copying actual indent instead of recreating it with `indent_width`\n            -- allows to handle both tabs and spaces\n            if indent_width_cur < indent_width then\n                ---@diagnostic disable-next-line:cast-local-type\n                indent_width, indent = indent_width_cur, indent_cur\n            end\n\n            -- Update comment info: commented if every non-blank line is commented\n            if is_commented then\n                is_commented = comment_check(l)\n            end\n        end\n    end\n\n    -- `indent` can still be `nil` in case all `lines` are empty\n    return indent or '', is_commented\nend\n\n--- Compute whether a string is blank\n---@param x string\n---@return boolean is_blank\nlocal function is_blank(x)\n    return x:find('^%s*$') ~= nil\nend\n\n--- Make a function which comments a line\n---@param parts vim._comment.Parts\n---@param indent string\n---@return fun(line: string): string\nlocal function make_comment_function(parts, indent)\n    local prefix, nonindent_start, suffix = indent .. parts.left, indent:len() + 1, parts.right\n    local blank_comment = indent .. vim.trim(parts.left) .. vim.trim(parts.right)\n\n    return function(line)\n        if is_blank(line) then\n            return blank_comment\n        end\n        return prefix .. line:sub(nonindent_start) .. suffix\n    end\nend\n\n--- Make a function which uncomments a line\n---@param parts vim._comment.Parts\n---@return fun(line: string): string\nlocal function make_uncomment_function(parts)\n    local l_esc, r_esc = vim.pesc(parts.left), vim.pesc(parts.right)\n    local regex = '^(%s*)' .. l_esc .. '(.*)' .. r_esc .. '(%s-)$'\n    local regex_trimmed = '^(%s*)' .. vim.trim(l_esc) .. '(.*)' .. vim.trim(r_esc) .. '(%s-)$'\n\n    return function(line)\n        -- Try regex with exact comment parts first, fall back to trimmed parts\n        local indent, new_line, trail = line:match(regex)\n        if new_line == nil then\n            indent, new_line, trail = line:match(regex_trimmed)\n        end\n\n        -- Return original if line is not commented\n        if new_line == nil then\n            return line\n        end\n\n        -- Prevent trailing whitespace\n        if is_blank(new_line) then\n            indent, trail = '', ''\n        end\n\n        return indent .. new_line .. trail\n    end\nend\n\n--- Comment/uncomment buffer range\n---@param line_start integer\n---@param line_end integer\n---@param ref_position? integer[]\nlocal function toggle_lines(line_start, line_end, ref_position)\n    ref_position = ref_position or { line_start, 0 }\n    local parts = get_comment_parts(ref_position)\n    local lines = vim.api.nvim_buf_get_lines(0, line_start - 1, line_end, false)\n    local indent, is_comment = get_lines_info(lines, parts)\n\n    local f = is_comment and make_uncomment_function(parts) or make_comment_function(parts, indent)\n\n    -- Direct `nvim_buf_set_lines()` essentially removes both regular and\n    -- extended marks  (squashes to empty range at either side of the region)\n    -- inside region. Use 'lockmarks' to preserve regular marks.\n    -- Preserving extmarks is not a universally good thing to do:\n    -- - Good for non-highlighting in text area extmarks (like showing signs).\n    -- - Debatable for highlighting in text area (like LSP semantic tokens).\n    --   Mostly because it causes flicker as highlighting is preserved during\n    --   comment toggling.\n    vim._with({ lockmarks = true }, function()\n        vim.api.nvim_buf_set_lines(0, line_start - 1, line_end, false, vim.tbl_map(f, lines))\n    end)\nend\n\n--- Operator which toggles user-supplied range of lines\n---@param mode string?\n---|\"'line'\"\n---|\"'char'\"\n---|\"'block'\"\nlocal function operator(mode)\n    -- Used without arguments as part of expression mapping. Otherwise it is\n    -- called as 'operatorfunc'.\n    if mode == nil then\n        vim.o.operatorfunc = \"v:lua.require'vim._comment'.operator\"\n        return 'g@'\n    end\n\n    -- Compute target range\n    local mark_from, mark_to = \"'[\", \"']\"\n    local lnum_from, col_from = vim.fn.line(mark_from), vim.fn.col(mark_from)\n    local lnum_to, col_to = vim.fn.line(mark_to), vim.fn.col(mark_to)\n\n    -- Do nothing if \"from\" mark is after \"to\" (like in empty textobject)\n    if (lnum_from > lnum_to) or (lnum_from == lnum_to and col_from > col_to) then\n        return\n    end\n\n    -- NOTE: use cursor position as reference for possibly computing local\n    -- tree-sitter-based 'commentstring'. Recompute every time for a proper\n    -- dot-repeat. In Visual and sometimes Normal mode it uses start position.\n    toggle_lines(lnum_from, lnum_to, vim.api.nvim_win_get_cursor(0))\n    return ''\nend\n\n--- Select contiguous commented lines at cursor\nlocal function textobject()\n    local lnum_cur = vim.fn.line('.')\n    local parts = get_comment_parts({ lnum_cur, vim.fn.col('.') })\n    local comment_check = make_comment_check(parts)\n\n    if not comment_check(vim.fn.getline(lnum_cur)) then\n        return\n    end\n\n    -- Compute commented range\n    local lnum_from = lnum_cur\n    while (lnum_from >= 2) and comment_check(vim.fn.getline(lnum_from - 1)) do\n        lnum_from = lnum_from - 1\n    end\n\n    local lnum_to = lnum_cur\n    local n_lines = vim.api.nvim_buf_line_count(0)\n    while (lnum_to <= n_lines - 1) and comment_check(vim.fn.getline(lnum_to + 1)) do\n        lnum_to = lnum_to + 1\n    end\n\n    -- Select range linewise for operator to act upon\n    vim.cmd('normal! ' .. lnum_from .. 'GV' .. lnum_to .. 'G')\nend\n\nlocal bufno = vim.api.nvim_buf_get_number(0)\n\nlocal operator_rhs = function()\n    return operator()\nend\nvim.keymap.set({ 'n', 'x' }, 'gc', operator_rhs, { buffer = bufno, noremap = true, expr = true, desc = 'Toggle comment' })\n\nlocal line_rhs = function()\n    vim.notify('my gcc called')\n    return operator() .. '_'\nend\nvim.keymap.set('n', 'gcc', line_rhs, { buffer = bufno, noremap = true, expr = true, desc = 'Toggle comment line' })\n\nlocal textobject_rhs = function()\n    return textobject()\nend\nvim.keymap.set({ 'o' }, 'gc', textobject_rhs, { buffer = bufno, noremap = true, desc = 'Comment textobject' })\n\n\nvim.notify('after/ftplugin/htmldjango.lua' .. bufno)\n```\n\n\nWhen I enter an htmldjango file now, I, as expected, receive the `'after/ftplugin/htmldjango.lua' .. bufno` message with the correct buffer number.\n\nAnd afterwards, `:map gcc` shows me that the mappings have been applied:\n\n\n```\no  gc          *@<Lua 412: ~/.config/nvim/after/ftplugin/htmldjango.lua:235>                                                                                                 \n                 Comment textobject                                                                                                                                                                     \nn  gcc         *@<Lua 184: ~/.config/nvim/after/ftplugin/jinja htmldjango.lua lua:229>                                                                                                          \n                 Toggle comment line                                                                                                                                                                    \nx  gc          *@<Lua 425: ~/.config/nvim/after/ftplugin/htmldjango.lua:224>                                                                                                           \n                 Toggle comment                                                                                                                                                                         \nn  gc          *@<Lua 428: ~/.config/nvim/after/ftplugin/htmldjango.lua:224>                                                                                                          \n                 Toggle comment                                                                                                                                                                         \no  gc          * <Lua 13: vim/_defaults.lua:0>                                                                                                                                                          \n                 Comment textobject                                                                                                                                                                     \nn  gcc         * <Lua 12: vim/_defaults.lua:0>                                                                                                                                                          \n                 Toggle comment line                                                                                                                                                                    \nx  gc          * <Lua 11: vim/_defaults.lua:0>                                                                                                                                                          \n                 Toggle comment                                                                                                                                                                         \nn  gc          * <Lua 10: vim/_defaults.lua:0>                                                                                                                                                          \n                 Toggle comment \n```\n\nbut using any of these mappings still uses the default, treesitter-context-aware behaviour.\n\nI do receive the message from the `vim.notify('my gcc called')` line, so my mappings are being hit, but the changes to the buffer are coming from the _defaults mappings, rather than the overrides I'm trying to set here.\n\n### Steps to reproduce\n\n1. Put [`_comment.lua`](https://github.com/neovim/neovim/blob/e2ad251c8d01726ecd54d925b5280ab32b448c13/runtime/lua/vim/_comment.lua#L9) into `~/.config/nvim/after/ftplugin/htmldjango.lua`, but change the line 9 function so that it doesn't use treesitter:\n\n```lua\nlocal function get_commentstring(ref_position)\n  return vim.bo.commentstring\nend\n```\n\n2. Add some buffer-local remaps for the `gc` commands, that use the new `vim.bio.commentstring`-only `get_commentstring`. No treesitter.\n\n```lua\nlocal bufno = vim.api.nvim_buf_get_number(0)\n\nlocal operator_rhs = function()\n    return operator()\nend\nvim.keymap.set({ 'n', 'x' }, 'gc', operator_rhs, { buffer = bufno, noremap = true, expr = true, desc = 'Toggle comment' })\n\nlocal line_rhs = function()\n    vim.notify('my gcc called')\n    return operator() .. '_'\nend\nvim.keymap.set('n', 'gcc', line_rhs, { buffer = bufno, noremap = true, expr = true, desc = 'Toggle comment line' })\n\nlocal textobject_rhs = function()\n    return textobject()\nend\nvim.keymap.set({ 'o' }, 'gc', textobject_rhs, { buffer = bufno, noremap = true, desc = 'Comment textobject' })\n```\n\n4. `vim anything.html +':set ft=htmldjango' +':norm ihello' +':norm o<script>' +':norm yyp0a/' +':norm Ohello'`\n5. comment lines with `gcc`\n\n### Expected behavior\n\nIt should use `{# ... #}` comments,\n\nBut it actually uses html comments `<!-- ... -->`, and inside of a `<script>` tag it uses `//` JS comments.\n\n\n\n### Nvim version (nvim -v)\n\nNVIM v0.10.2  // nvim 0.10.2_1\n\n### Vim (not Nvim) behaves the same?\n\nno\n\n### Operating system/version\n\nmacOS\n\n### Terminal name/version\n\nTerminal.app\n\n### $TERM environment variable\n\nxterm-256color\n\n### Installation\n\nbrew",
    "closed_at": "2024-11-18T17:35:45Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    },
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "discussed to death, search previous issues and PRs",
            "created_at": "2024-11-18T17:35:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/31257#issuecomment-2483698446",
            "id": 2483698446,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31257",
            "node_id": "IC_kwDOAPphoM6UCjsO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2483698446/reactions"
            },
            "updated_at": "2024-11-18T17:35:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2483698446",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@justinmk I cannot find anything about this. I've tried searching for \"comment\" and \"comment treesitter\" in Issues.\n\n",
            "created_at": "2024-11-19T09:33:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/31257#issuecomment-2485164733",
            "id": 2485164733,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31257",
            "node_id": "IC_kwDOAPphoM6UIJq9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2485164733/reactions"
            },
            "updated_at": "2024-11-19T09:33:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2485164733",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/47053826?v=4",
                "events_url": "https://api.github.com/users/myarcana/events{/privacy}",
                "followers_url": "https://api.github.com/users/myarcana/followers",
                "following_url": "https://api.github.com/users/myarcana/following{/other_user}",
                "gists_url": "https://api.github.com/users/myarcana/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/myarcana",
                "id": 47053826,
                "login": "myarcana",
                "node_id": "MDQ6VXNlcjQ3MDUzODI2",
                "organizations_url": "https://api.github.com/users/myarcana/orgs",
                "received_events_url": "https://api.github.com/users/myarcana/received_events",
                "repos_url": "https://api.github.com/users/myarcana/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/myarcana/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/myarcana/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/myarcana",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@dundargoc thanks, I've now read all of the issues tagged https://github.com/neovim/neovim/labels/comment and I couldn't find anything about the specific issue I was trying to report:\n\n-  I had written and set my own mappings for `gc` and `gcc`, but neovim was still using treesitter to comment lines.\n\nHowever, I've figured out the actual reason I was seeing this behaviour was due to a logical error on my part.\n\nThese lines in `operator` were obviously applying the builtin behaviour:\n\n```lua\nvim.o.operatorfunc = \"v:lua.require'vim._comment'.operator\"\nreturn 'g@'\n```\n\nAfter changing them, I've seen that overriding the `gc`, `gcc` keymaps works just like any other mapping.\n\n----\n\nBut it's a shame that I won't be able to \n\n```lua\nvim._with({ lockmarks = true }, function()\n    vim.api.nvim_buf_set_lines(0, line_start - 1, line_end, false, vim.tbl_map(f, lines))\nend)\n```\n\nin my own plugin, because `vim._with` is nil.",
            "created_at": "2024-11-19T22:49:01Z",
            "html_url": "https://github.com/neovim/neovim/issues/31257#issuecomment-2486908369",
            "id": 2486908369,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31257",
            "node_id": "IC_kwDOAPphoM6UOzXR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2486908369/reactions"
            },
            "updated_at": "2024-11-19T22:49:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2486908369",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/47053826?v=4",
                "events_url": "https://api.github.com/users/myarcana/events{/privacy}",
                "followers_url": "https://api.github.com/users/myarcana/followers",
                "following_url": "https://api.github.com/users/myarcana/following{/other_user}",
                "gists_url": "https://api.github.com/users/myarcana/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/myarcana",
                "id": 47053826,
                "login": "myarcana",
                "node_id": "MDQ6VXNlcjQ3MDUzODI2",
                "organizations_url": "https://api.github.com/users/myarcana/orgs",
                "received_events_url": "https://api.github.com/users/myarcana/received_events",
                "repos_url": "https://api.github.com/users/myarcana/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/myarcana/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/myarcana/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/myarcana",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "vim.with isn't really ready yet, it doesn't work half the time.",
            "created_at": "2024-11-19T22:58:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/31257#issuecomment-2486920379",
            "id": 2486920379,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31257",
            "node_id": "IC_kwDOAPphoM6UO2S7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2486920379/reactions"
            },
            "updated_at": "2024-11-19T22:58:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2486920379",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 4,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/31257/comments",
    "created_at": "2024-11-18T17:26:45Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/31257/events",
    "html_url": "https://github.com/neovim/neovim/issues/31257",
    "id": 2669296094,
    "labels": [
        {
            "color": "f9d0c4",
            "default": true,
            "description": "issues reporting wrong behavior",
            "id": 77997474,
            "name": "bug",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3NA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 7015106619,
            "name": "comment",
            "node_id": "LA_kwDOAPphoM8AAAABoiIIOw",
            "url": "https://api.github.com/repos/neovim/neovim/labels/comment"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/31257/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM6fGjne",
    "number": 31257,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/31257/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "not_planned",
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/31257/timeline",
    "title": "Default gc* maps are overriding my own gc* maps",
    "updated_at": "2024-11-19T22:58:31Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/31257",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/47053826?v=4",
        "events_url": "https://api.github.com/users/myarcana/events{/privacy}",
        "followers_url": "https://api.github.com/users/myarcana/followers",
        "following_url": "https://api.github.com/users/myarcana/following{/other_user}",
        "gists_url": "https://api.github.com/users/myarcana/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/myarcana",
        "id": 47053826,
        "login": "myarcana",
        "node_id": "MDQ6VXNlcjQ3MDUzODI2",
        "organizations_url": "https://api.github.com/users/myarcana/orgs",
        "received_events_url": "https://api.github.com/users/myarcana/received_events",
        "repos_url": "https://api.github.com/users/myarcana/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/myarcana/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/myarcana/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/myarcana",
        "user_view_type": "public"
    }
}