{
    "active_lock_reason": "resolved",
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "# Problem\r\n\r\nLSP and diagnostics don't have core mappings. In the case of LSP some of its natural mappings \"conflict\" with ftplugins or the builtin normal commands.\r\n\r\nRelated:\r\n\r\n- https://github.com/neovim/neovim/pull/24331\r\n- https://github.com/neovim/neovim/pull/16230\r\n- https://github.com/neovim/neovim/pull/28500\r\n- https://github.com/neovim/neovim/pull/26745\r\n- https://github.com/neovim/neovim/issues/24054\r\n    - https://github.com/neovim/neovim/pull/18506\r\n\r\n# Expected behavior\r\n\r\nWe could introduce a way to _opt-in_ to more aggressive, more risky defaults (essentially the antithesis of https://github.com/neovim/neovim/issues/6293 , which proposed a way to enable \"nineties mode\" for slow devices/networks). But that kind of sucks, it's not really a long-term solution, it creates an \"inner platform\" that then gets its own inertia and baggage.\r\n\r\nInstead:\r\n\r\n- ✅ revisit [#16230](https://github.com/neovim/neovim/pull/16230) (was there objection to `]g` and friends? potentially better alternatives, borrowing from vim-unimpaired, vim-scriptease, something else?)\r\n    - ✅ we can probably claim `]d` and friends, the default behavior is rarely useful.\r\n- ✅ resolve https://github.com/neovim/neovim/issues/24252#issuecomment-1620459930\r\n- finish [#18506](https://github.com/neovim/neovim/pull/18506) to deliver the full `vim.lsp.config` interface\r\n- ~~add `vim.lsp.buf.set_defaults({buf})`, which sets recommended default mappings and other settings.~~\r\n\r\n## LSP defaults\r\n\r\nThe defaults should answer these questions:\r\n\r\n> - What about all the lsp functions that one can call?\r\n> - What do I need to do to trigger auto-formatting?\r\n> - ✅ Does gd call the LSP by default when one is attached?\r\n>   - ✅ What about K?\r\n> - ✅ How do I run code actions?\r\n> - ✅ What if I want to see the documentation of the completion entry while I browse them?\r\n> - ✅ What if I need the entries to show more than just plain white text without context?\r\n> - ✅ Inlay hints are cool but do I really need a custom on_attach function to enable them globally?",
    "closed_at": "2024-05-01T21:42:15Z",
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "I'll start things off with a small selection from my [personal LSP mappings](https://github.com/YodaEmbedding/dotfiles/blob/master/nvim/.config/nvim/lua/mappings/_nvim_lsp.lua):\r\n\r\n```lua\r\nnnoremap(\"gd\", vim.lsp.buf.definition)\r\nnnoremap(\"gr\", vim.lsp.buf.references)\r\nnnoremap(\"K\",  vim.lsp.buf.hover)\r\n```\r\n\r\nA couple others I also use frequently, but may need more discussion:\r\n\r\n```lua\r\ninoremap(\"<C-k>\",    vim.lsp.buf.signature_help)\r\nnnoremap(\"<space>a\", vim.lsp.buf.code_action)  -- actually, I use require(\"actions-preview\").code_actions\r\n```\r\n\r\n...Everything else, I barely (if ever) use as a Python programmer.\r\n\r\n---\r\n\r\nRegarding `vim.diagnostic.goto_next`, I prefer `]d` (next diagnostic) since it fits with motions like `]m` (next method) or `]c` (next class). `]g` doesn't really convey *diagnostic*; actually, I would reserve `]g` for (next git hunk).",
            "created_at": "2023-07-04T14:06:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/24252#issuecomment-1620314199",
            "id": 1620314199,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24252",
            "node_id": "IC_kwDOAPphoM5glAhX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1620314199/reactions"
            },
            "updated_at": "2024-05-01T01:27:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1620314199",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/721196?v=4",
                "events_url": "https://api.github.com/users/YodaEmbedding/events{/privacy}",
                "followers_url": "https://api.github.com/users/YodaEmbedding/followers",
                "following_url": "https://api.github.com/users/YodaEmbedding/following{/other_user}",
                "gists_url": "https://api.github.com/users/YodaEmbedding/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/YodaEmbedding",
                "id": 721196,
                "login": "YodaEmbedding",
                "node_id": "MDQ6VXNlcjcyMTE5Ng==",
                "organizations_url": "https://api.github.com/users/YodaEmbedding/orgs",
                "received_events_url": "https://api.github.com/users/YodaEmbedding/received_events",
                "repos_url": "https://api.github.com/users/YodaEmbedding/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/YodaEmbedding/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/YodaEmbedding/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/YodaEmbedding"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Note that `vim.diagnostic` is separate from `vim.lsp` and `vim.lsp` is just _one_ of many possible diagnostic providers. Anything part of `vim.lsp` should imho _not_ set up default mappings for `vim.diagnostic`.\r\n\r\n\r\n---\r\n\r\n> nnoremap(\"gd\", vim.lsp.buf.definition)\r\n\r\n\r\nWe already set `tagfunc` by default, which has default keymaps and is more powerful (e.g. it works properly for multiple clients as it can merge results). I'm not even sure why we have a `vim.lsp.buf.definition` in addition\r\n\r\n---\r\n\r\nI think `K` for hover and `gr` for references are the least controversial.\r\nFor `K` we could also use a similar approach like we do with formatexpr, tagfunc or omnifunc and check if `keywordprg` is already set to a non-default value, and if not, override it. One reason we didn't do that yet was because it doesn't support lua function refs and we were deferring this, to see if it will be supported with the ongoing options refactoring. (Otherwise we'd have to add some kind of `:lsp hover` command)\r\n\r\n\r\nFor others like `code_action` there seem to be a lot of different choices.\r\n",
            "created_at": "2023-07-04T15:37:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/24252#issuecomment-1620459930",
            "id": 1620459930,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24252",
            "node_id": "IC_kwDOAPphoM5glkGa",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 4,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1620459930/reactions"
            },
            "updated_at": "2023-07-04T15:37:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1620459930",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "author_association": "NONE",
            "body": "What about the `F` keys? They could be useful.\r\n\r\n* `<F2>` -> vim.lsp.buf.rename()\r\n* `<F3>` -> vim.lsp.buf.format({async = true})\r\n* `<F4>` -> vim.lsp.buf.code_action()\r\n\r\nOther functions that don't have a default behavior could be behind a prefix. Something like `gl` or maybe `<LocalLeader>`.\r\n\r\n* `gld` -> vim.lsp.buf.declaration()\r\n* `gls` -> vim.lsp.buf.signature_help()\r\n* `gli` -> vim.lsp.buf.implementation()\r\n* `glt` -> vim.lsp.buf.type_definition()\r\n",
            "created_at": "2023-07-04T23:36:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/24252#issuecomment-1620831799",
            "id": 1620831799,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24252",
            "node_id": "IC_kwDOAPphoM5gm-43",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1620831799/reactions"
            },
            "updated_at": "2023-07-05T10:18:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1620831799",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/20980671?v=4",
                "events_url": "https://api.github.com/users/VonHeikemen/events{/privacy}",
                "followers_url": "https://api.github.com/users/VonHeikemen/followers",
                "following_url": "https://api.github.com/users/VonHeikemen/following{/other_user}",
                "gists_url": "https://api.github.com/users/VonHeikemen/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/VonHeikemen",
                "id": 20980671,
                "login": "VonHeikemen",
                "node_id": "MDQ6VXNlcjIwOTgwNjcx",
                "organizations_url": "https://api.github.com/users/VonHeikemen/orgs",
                "received_events_url": "https://api.github.com/users/VonHeikemen/received_events",
                "repos_url": "https://api.github.com/users/VonHeikemen/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/VonHeikemen/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/VonHeikemen/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/VonHeikemen"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "- `<Fx>` keys are absolutely out of the question. \r\n- `gl` is owned by https://github.com/tommcdo/vim-lion (which is simple and reliable enough that it should probably be in core)\r\n\r\nThis issue is not an invitation for drive-by half-baked suggestions. ",
            "created_at": "2023-07-05T10:17:53Z",
            "html_url": "https://github.com/neovim/neovim/issues/24252#issuecomment-1621464448",
            "id": 1621464448,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24252",
            "node_id": "IC_kwDOAPphoM5gpZWA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1621464448/reactions"
            },
            "updated_at": "2023-07-05T10:18:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1621464448",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Added a PR for K/hover: https://github.com/neovim/neovim/pull/24331\r\nI think that's the last easy pick.\r\n\r\nWith `gr` we'd have the first that overrides a builtin with _different_ functionality. I'm not sure if that's really a good idea.  The `formatexpr` change already caused quite some confusion for sudden `gq` behaviour changes,  and that ought to be a drop-in replacement. \r\n\r\nI also had a look at what kind of mappings people use for the remaining functions via github code search. There are a few popular choices like `<leader>ca` for code actions, but there are also lots of different choices.  For other functions it's even more mixed up. \r\n\r\nI think if we want mappings for these we'd have to lay down the law. I'm not really interested in doing that,  so I'll leave any further work in regards to default keymaps up to others\r\n",
            "created_at": "2023-07-13T14:01:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/24252#issuecomment-1634302936",
            "id": 1634302936,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24252",
            "node_id": "IC_kwDOAPphoM5haXvY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1634302936/reactions"
            },
            "updated_at": "2024-05-01T01:28:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1634302936",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I actually am not in favor of automatically mapping `K` to hover. I rely on `'keywordprg'` in C and C++ quite a bit, so I prefer to keep `K` for man pages and use a separate mapping for hover. `'keywordprg'` and LSP's hover are not interchangeable in many (maybe most?) cases, so I don't think automatically remapping `K` is an obvious choice.\r\n\r\n>I think K for hover and gr for references are the least controversial.\r\n\r\nI don't personally use the default `gr` behavior, but I think we should avoid overriding any builtin keys. That is also why I prefer using `g` as the diagnostics key (e.g. `]g`, `[g`, etc.) instead of `]d` and `[d`. The builtin `[d` and `]d` may not be very popular or useful for many people, but if we are talking about default mappings then I think we should have a very high bar for what behavior we are overriding. And if even a small subset of people use `[d` and friends, we should not clobber it.\r\n\r\n(The exception is if the new default mapping \"improves\" on the builtin behavior, e.g. the default mappings for `Y`, `<C-L>`, etc. make sense to me).\r\n\r\nFor references, I personally use `[R`, which mirrors the builtin `[I` and `[D` and I think has a similar principle (`[I` finds references to the keyword in include files, `[D` finds references from `#defines`, `[R` finds references from LSP).",
            "created_at": "2023-07-13T14:55:18Z",
            "html_url": "https://github.com/neovim/neovim/issues/24252#issuecomment-1634393710",
            "id": 1634393710,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24252",
            "node_id": "IC_kwDOAPphoM5hat5u",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1634393710/reactions"
            },
            "updated_at": "2024-05-01T01:28:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1634393710",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> There are a few popular choices like `<leader>ca` for code actions,\r\n\r\n`cr` is a great prefix for code actions/fixes/refactors. E.g. `crn` for \"rename\".\r\n\r\n> but if we are talking about default mappings then I think we should have a very high bar for what behavior we are overriding.\r\n\r\nThe escape-hatch is that we make it opt-in or opt-out (via some sort of `...set_defaults()` thing). That allows us to avoid getting bogged down. Builtin `gr` is useless, it should be an LSP default mapping. I also think `]d` is available, it doesn't matter that some people use it for its current over-specific purpose.\r\n\r\nWe need to be bold/opinionated here, and the escape-hatch enables us to do so.\r\n\r\n> For references, I personally use `[R`,\r\n\r\nI have found in practice that uppercase mappings are hard to use and hard to remember.",
            "created_at": "2023-07-13T15:07:52Z",
            "html_url": "https://github.com/neovim/neovim/issues/24252#issuecomment-1634417353",
            "id": 1634417353,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24252",
            "node_id": "IC_kwDOAPphoM5hazrJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1634417353/reactions"
            },
            "updated_at": "2023-07-13T15:08:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1634417353",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">cr is a great prefix for code actions/fixes/refactors. E.g. crn for \"rename\".\r\n\r\nAgreed, though we should be careful not to conflict with anything from [vim-abolish](https://github.com/tpope/vim-abolish#coercion).",
            "created_at": "2023-07-13T15:10:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/24252#issuecomment-1634421745",
            "id": 1634421745,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24252",
            "node_id": "IC_kwDOAPphoM5ha0vx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1634421745/reactions"
            },
            "updated_at": "2023-07-13T15:10:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1634421745",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I rely on 'keywordprg' in C and C++ quite a bit, so I prefer to keep K for man pages use a separate mapping for hover. 'keywordprg' and LSP's hover are not interchangeable in many (maybe most?) cases, so I don't think automatically remapping K is an obvious choice.\r\n\r\nIf `keywordprg` is customized or `K` is already mapped, it won't add the mapping to hover. \r\nI think for most languages, having `K` open a man page is not useful and C/C++ are the exception. So the assumption is that having `K` map to `hover()` is the more sensible thing (at least looking at languages where it is useful vs. not, and not at the % of people writing those languages with neovim)\r\n\r\nBut maybe we move the discussion specific to K/keywordprg to the PR. I don't really have a strong opinion on it, so I don't mind either way.\r\n\r\n> The escape hatch is that we make it opt-in or opt-out (via some sort of ...set_defaults() thing)\r\n\r\nWould this affect the tagfunc/formatexpr/omnifunc behavior or would we have two kinds of defaults? \r\n\r\n",
            "created_at": "2023-07-13T15:14:20Z",
            "html_url": "https://github.com/neovim/neovim/issues/24252#issuecomment-1634428072",
            "id": 1634428072,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24252",
            "node_id": "IC_kwDOAPphoM5ha2So",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1634428072/reactions"
            },
            "updated_at": "2023-07-13T15:14:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1634428072",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > The escape hatch is that we make it opt-in or opt-out (via some sort of ...set_defaults() thing)\r\n> \r\n> Would this affect the tagfunc/formatexpr/omnifunc behavior or would we have two kinds of defaults?\r\n\r\nAll-or-nothing is easier to explain and maintain. Don't see a need for two kinds of defaults.",
            "created_at": "2023-07-14T16:32:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/24252#issuecomment-1636100308",
            "id": 1636100308,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24252",
            "node_id": "IC_kwDOAPphoM5hhOjU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1636100308/reactions"
            },
            "updated_at": "2023-07-14T16:32:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1636100308",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "NONE",
            "body": "Hi everyone! I just tested nightly to check how new default mappings work and would like to ask some questions about them:\r\n\r\nWe now have `crn` and `crr` mappings that collide with the vim's default `c` operator and now when I press `c`, I'm not instantly in the operator-pending mode. Just my opinion: I believe when you press a key that's related to any of default operators, mode switch should be instant.\r\n\r\nIf I want to avoid this behaviour, do I have to remove `crn` and `crr` mappings in the `LspAttach` event? Has this colliding been considered? Maybe it's just not that important in terms of default api, I just wanna know :)",
            "created_at": "2024-05-01T01:16:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/24252#issuecomment-2087807938",
            "id": 2087807938,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24252",
            "node_id": "IC_kwDOAPphoM58cWvC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2087807938/reactions"
            },
            "updated_at": "2024-05-01T21:16:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2087807938",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/80093436?v=4",
                "events_url": "https://api.github.com/users/rasulomaroff/events{/privacy}",
                "followers_url": "https://api.github.com/users/rasulomaroff/followers",
                "following_url": "https://api.github.com/users/rasulomaroff/following{/other_user}",
                "gists_url": "https://api.github.com/users/rasulomaroff/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rasulomaroff",
                "id": 80093436,
                "login": "rasulomaroff",
                "node_id": "MDQ6VXNlcjgwMDkzNDM2",
                "organizations_url": "https://api.github.com/users/rasulomaroff/orgs",
                "received_events_url": "https://api.github.com/users/rasulomaroff/received_events",
                "repos_url": "https://api.github.com/users/rasulomaroff/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rasulomaroff/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rasulomaroff/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rasulomaroff"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> We now have `crn` and `crr` mappings that collide with the vim's default `c` operator and now when I press `c`, I'm not instantly in the operator-pending mode\r\n\r\n\"Instantly in operator pending mode\" is a new one, haven't heard that before. By that logic, the `ys` mapping from vim-surround also would interfere, despite having no overlap with any builtin key sequence.\r\n\r\nWhy does it matter if \"c\" enters operator-pending mode immediately? What is the use-case?",
            "created_at": "2024-05-01T01:26:31Z",
            "html_url": "https://github.com/neovim/neovim/issues/24252#issuecomment-2087829625",
            "id": 2087829625,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24252",
            "node_id": "IC_kwDOAPphoM58ccB5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2087829625/reactions"
            },
            "updated_at": "2024-05-01T01:26:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2087829625",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "NONE",
            "body": "Yes, you're right, it interferes with the `y` operator and this is the reason I remapped it to be `<leader>sa` for adding, `<leader>sd` for deleting etc\r\n\r\nThe use-cases are plugins that track the operator-pending mode to do something. For example, my plugin `reactive.nvim` tracks mode changes to apply window or global highlights when mode changes occur. `modes.nvim` works the same way I guess.\r\n\r\nEven if you don't use plugins for that, I think it's a very popular situation where you want to highlight a current line (or a statusline? like in `lualine`) depending on the mode you're in, right? A lot of people and plugin developers just use `ModeChanged` event to do that. Right now in nvim 0.9.5 it will work instantly, if you check `vim.v.operator` to be equal `c` in `ModeChanged` event, but in nightly you have to wait for `vim.opt.timeout` ms after pressing `c` to actually see any changes on the screen.\r\n\r\nYes, it still works and highlights after the timeout, but it's kind of inconsistent with other default operators. I don't know how crucial this is, but I'm just raising it up so that you know :)\r\n\r\nAnd I don't know how many beginners actually pay attention to the `modemsg` message that tells you which mode you're in, but I remember myself as a beginner in neovim and I used that thing as an indicator constantly. Seeing immediate feedback after pressing any of default operators was convenient. Edited: This is for sure not the case with the operator-pending mode (no message is displayed for it), but I think my point here is clear - instant feedback was very important for me as a beginner (whether it was a `modemsg` or a cursor shape change) because I was blown away by the number of different operators, key combinations etc.\r\n\r\nP.S. I don't know about other people, but even now I really don't like it when mappings collide with operators. Maybe that's because it drove me crazy in the past when I was debugging this colliding behaviour when I didn't see feedback from the editor instantly.\r\n\r\nP.S.S. In regards to `vim-surround`, when you install a plugin, you acknowledge that it has mappings that can interfere with yours or with default ones and that's totally okay, but having defaults ones doing that is a bit.. strange? At least for me. And the fact that when you press `y` or `d` you'll get your cursor shape changed (with default cursor settings by the way) because it enters operator-pending mode instantly and you don't have the same experience with `c` is a bit inconsistent. And what even more inconsistent is that you only get this collision if you started an lsp server. I even suppose not any lsp server, but only the one that has those `document/feature` available/supported?\r\n\r\nAnyway, it's just my opinion. Thank you for your time.",
            "created_at": "2024-05-01T01:52:43Z",
            "html_url": "https://github.com/neovim/neovim/issues/24252#issuecomment-2087859106",
            "id": 2087859106,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24252",
            "node_id": "IC_kwDOAPphoM58cjOi",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2087859106/reactions"
            },
            "updated_at": "2024-05-01T21:19:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2087859106",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/80093436?v=4",
                "events_url": "https://api.github.com/users/rasulomaroff/events{/privacy}",
                "followers_url": "https://api.github.com/users/rasulomaroff/followers",
                "following_url": "https://api.github.com/users/rasulomaroff/following{/other_user}",
                "gists_url": "https://api.github.com/users/rasulomaroff/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rasulomaroff",
                "id": 80093436,
                "login": "rasulomaroff",
                "node_id": "MDQ6VXNlcjgwMDkzNDM2",
                "organizations_url": "https://api.github.com/users/rasulomaroff/orgs",
                "received_events_url": "https://api.github.com/users/rasulomaroff/received_events",
                "repos_url": "https://api.github.com/users/rasulomaroff/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rasulomaroff/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rasulomaroff/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rasulomaroff"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> If I want to avoid this behaviour, do I have to remove `crn` and `crr` mappings in the `LspAttach` event?\r\n\r\nThese are (intentionally) mapped [unconditionally](https://github.com/neovim/neovim/blob/e778e0116198470ba037b9426f4ff7fa5cb7f880/runtime/lua/vim/_defaults.lua#L167-L169), so you don't need a `LspAttach` event handler.\r\n\r\n> I really don't like it when mappings collide with operators.\r\n\r\nOpen a separate issue for this. It's mostly a limitation of the current mappings behavior; we can have a default `cr` mapping while still emitting \"op pending\" after `c`. I have some ideas, but will save them for the separate issue.",
            "created_at": "2024-05-01T21:18:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/24252#issuecomment-2089155960",
            "id": 2089155960,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24252",
            "node_id": "IC_kwDOAPphoM58hf14",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2089155960/reactions"
            },
            "updated_at": "2024-05-01T21:22:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2089155960",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "## Status/Resolution/Summary\r\n\r\nResolved by:\r\n- https://github.com/neovim/neovim/pull/28500\r\n- https://github.com/neovim/neovim/pull/16230\r\n\r\nRemaining, potential work is tracked in:\r\n- https://github.com/neovim/neovim/issues/28479\r\n- https://github.com/neovim/neovim/issues/24054\r\n- https://github.com/neovim/neovim/pull/26745\r\n\r\n---\r\n_Locked to keep the summary visible. You can always [chat](https://neovim.io/#chat) or open an issue if you have new information/topics to discuss._",
            "created_at": "2024-05-01T21:42:15Z",
            "html_url": "https://github.com/neovim/neovim/issues/24252#issuecomment-2089183276",
            "id": 2089183276,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24252",
            "node_id": "IC_kwDOAPphoM58hmgs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2089183276/reactions"
            },
            "updated_at": "2024-05-01T21:43:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2089183276",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comments": 15,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/24252/comments",
    "created_at": "2023-07-04T13:13:06Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/24252/events",
    "html_url": "https://github.com/neovim/neovim/issues/24252",
    "id": 1787911655,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "issues or PRs involving changing the defaults",
            "id": 103777064,
            "name": "defaults",
            "node_id": "MDU6TGFiZWwxMDM3NzcwNjQ=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/defaults"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "",
            "id": 3361645105,
            "name": "diagnostic",
            "node_id": "MDU6TGFiZWwzMzYxNjQ1MTA1",
            "url": "https://api.github.com/repos/neovim/neovim/labels/diagnostic"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/24252/labels{/name}",
    "locked": true,
    "milestone": {
        "closed_at": null,
        "closed_issues": 408,
        "created_at": "2023-02-02T14:11:43Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
            "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
            "followers_url": "https://api.github.com/users/bfredl/followers",
            "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
            "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bfredl",
            "id": 1363104,
            "login": "bfredl",
            "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
            "organizations_url": "https://api.github.com/users/bfredl/orgs",
            "received_events_url": "https://api.github.com/users/bfredl/received_events",
            "repos_url": "https://api.github.com/users/bfredl/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bfredl"
        },
        "description": "",
        "due_on": "2024-05-12T07:00:00Z",
        "html_url": "https://github.com/neovim/neovim/milestone/36",
        "id": 8997654,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/36/labels",
        "node_id": "MI_kwDOAPphoM4AiUsW",
        "number": 36,
        "open_issues": 9,
        "state": "open",
        "title": "0.10",
        "updated_at": "2024-05-06T11:42:31Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/36"
    },
    "node_id": "I_kwDOAPphoM5qkV3n",
    "number": 24252,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 5,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 5,
        "url": "https://api.github.com/repos/neovim/neovim/issues/24252/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/24252/timeline",
    "title": "default mappings for LSP, diagnostics, etc",
    "updated_at": "2024-05-01T21:43:10Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/24252",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk"
    }
}