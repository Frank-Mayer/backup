{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "_(This is partly to check my understanding, partly to write down rationale, and partly to propose a potential change.)_ @gpanders \r\n\r\n### Problem\r\n\r\nCurrently to check if a table is a list, we use `pairs()` to iterate (potentially) the entire table. Calls to `Iter.new()` always pay this cost and can't opt-out of it.\r\nhttps://github.com/neovim/neovim/blob/e928161bde262c238f79bc0fd84e60178ff6a321/runtime/lua/vim/iter.lua#L906-L917\r\n\r\nArguments in favor of the current logic?\r\n\r\n- Iter pipelines inherently are O(n) so doing an extra scan is a reasonable cost.\r\n- Handles unusual lists/arrays.\r\n\r\n\r\nRelated: https://github.com/neovim/neovim/issues/24141\r\n\r\n### Expected behavior\r\n\r\nInstead of using `pairs()`, treat any table where `t[1] == nil or t[#t] == nil` as non-list, and `t[1] ~= nil and t[#t] ~= nil` as list. Change the logic to:\r\n\r\n```lua\r\n-- Decide if the source table is a list.\r\nif src[1] == nil and src[#src] == nil then\r\n  return Iter.new(pairs(src))\r\nend\r\nend\r\nreturn ListIter.new(ipairs(src))\r\n```\r\n\r\n**Advantages:**\r\n\r\n- easy to document and understand\r\n- fast\r\n\r\n**Disadvantages:**\r\n\r\n- May treat a non-list as a list, if `t[1]` and `t[#t]` are non-nil in a dict-like table.\r\n    - Callers can workaround this by setting `t[1] = nil`.\r\n\r\n",
    "closed_at": "2023-11-28T00:25:28Z",
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "A list-like table _must_ have consecutive integer indices starting at 1 if we want to be able to use the length (`#`) operator, which we make heavy use of for the list optimizations.\r\n\r\nFrom the [Lua reference manual](https://www.lua.org/manual/5.1/manual.html#2.5.5) (emphasis added):\r\n\r\n>The length of a table t is defined to be any integer index n such that `t[n]` is not nil and `t[n+1]` is nil; moreover, if `t[1]` is nil, `n` can be zero. For a regular array, with non-nil values from 1 to a given `n`, its length is exactly that `n`, the index of its last value. **If the array has \"holes\" (that is, nil values between other non-nil values), then `#t` can be any of the indices that directly precedes a nil value (that is, it may consider any such nil value as the end of the array).**\r\n\r\nIt is insufficient to only check that `t[1] ~= nil` to infer that `t` is a list. A table such as `{ 'a', 'b', nil, 'd', 'e' }` might have length 5, or length 2. According to the standard, it's undefined.\r\n\r\nThe `pairs()` check in the constructor is kind of a bummer, it's obviously slow for large tables, but I don't know of a better way to ensure correct behavior.",
            "created_at": "2023-08-17T13:52:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/24746#issuecomment-1682328753",
            "id": 1682328753,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24746",
            "node_id": "IC_kwDOAPphoM5kRkyx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1682328753/reactions"
            },
            "updated_at": "2023-08-17T13:52:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1682328753",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "[this answer](https://stackoverflow.com/a/66370080) from StackOverflow seems promising apart from the last case because of the behaviour gpanders mentioned above.\r\n> A table such as { 'a', 'b', nil, 'd', 'e' } might have length 5, or length 2. According to the standard, it's undefined.\r\n```lua\r\nfunction isarray(t)\r\n  return #t > 0 and next(t, #t) == nil\r\nend\r\n\r\nprint(isarray{}) --> false\r\nprint(isarray{1, 2, 3}) --> true\r\nprint(isarray{a = 1, b = 2, c = 3}) --> false\r\nprint(isarray{1, 2, 3, a = 1, b = 2, c = 3}) --> false\r\nprint(isarray{1, 2, 3, nil, 5}) --> true (PUC Lua) | false (LuaJIT)\r\n```",
            "created_at": "2023-08-20T04:37:20Z",
            "html_url": "https://github.com/neovim/neovim/issues/24746#issuecomment-1685174233",
            "id": 1685174233,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24746",
            "node_id": "IC_kwDOAPphoM5kcbfZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1685174233/reactions"
            },
            "updated_at": "2023-08-20T04:37:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1685174233",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/74924917?v=4",
                "events_url": "https://api.github.com/users/T-727/events{/privacy}",
                "followers_url": "https://api.github.com/users/T-727/followers",
                "following_url": "https://api.github.com/users/T-727/following{/other_user}",
                "gists_url": "https://api.github.com/users/T-727/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/T-727",
                "id": 74924917,
                "login": "T-727",
                "node_id": "MDQ6VXNlcjc0OTI0OTE3",
                "organizations_url": "https://api.github.com/users/T-727/orgs",
                "received_events_url": "https://api.github.com/users/T-727/received_events",
                "repos_url": "https://api.github.com/users/T-727/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/T-727/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/T-727/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/T-727"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "There really is no better way than iterating the table and checking for nils.\r\n\r\nOpenresty/LuaJIT does the same but compiled; that is the only option for better performance.",
            "created_at": "2023-08-20T04:40:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/24746#issuecomment-1685174652",
            "id": 1685174652,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24746",
            "node_id": "IC_kwDOAPphoM5kcbl8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1685174652/reactions"
            },
            "updated_at": "2023-08-20T04:40:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1685174652",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> if we want to be able to use the length (`#`) operator, which we make heavy use of for the list optimizations.\r\n\r\nThanks, that's the key info. \r\n\r\nI was thinking that if we document \"a list is a table with an item at `t[1]`\", then `vim.iter` callers are responsible for checking for that, to avoid undefined behavior. Advantages are:\r\n\r\n- Gives a way to \"opt out\" of the full scan that every `vim.iter` caller pays. With the current impl there's no way to opt-out of that scan.\r\n- Improves performance for the common case. I expect \"hetergenous\" tables to be unusual for `vim.iter`. Any evidence that I'm wrong?",
            "created_at": "2023-09-10T23:47:18Z",
            "html_url": "https://github.com/neovim/neovim/issues/24746#issuecomment-1712974599",
            "id": 1712974599,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24746",
            "node_id": "IC_kwDOAPphoM5mGesH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1712974599/reactions"
            },
            "updated_at": "2023-09-10T23:48:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1712974599",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Disadvantage: we use a different definition of \"list\" than everybody else...\r\n",
            "created_at": "2023-09-11T07:47:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/24746#issuecomment-1713347476",
            "id": 1713347476,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24746",
            "node_id": "IC_kwDOAPphoM5mH5uU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1713347476/reactions"
            },
            "updated_at": "2023-09-11T07:47:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1713347476",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Different compared to what? The Lua `#` behavior implies that this definition is a Lua convention.\r\n\r\n~~Side-note: could we skip certain things if the table has defined `__len()` ?~~ (edit: Lua 5.2)",
            "created_at": "2023-09-11T12:04:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/24746#issuecomment-1713743181",
            "id": 1713743181,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24746",
            "node_id": "IC_kwDOAPphoM5mJaVN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1713743181/reactions"
            },
            "updated_at": "2023-09-11T13:21:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1713743181",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "`__len` is a lua 5.2 thing.",
            "created_at": "2023-09-11T12:06:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/24746#issuecomment-1713746454",
            "id": 1713746454,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24746",
            "node_id": "IC_kwDOAPphoM5mJbIW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1713746454/reactions"
            },
            "updated_at": "2023-09-11T12:06:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1713746454",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Different compared to what? The Lua # behavior implies that this definition is a Lua convention\r\n\r\nDifferent to the Lua convention everywhere else.",
            "created_at": "2023-09-11T12:11:20Z",
            "html_url": "https://github.com/neovim/neovim/issues/24746#issuecomment-1713753454",
            "id": 1713753454,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24746",
            "node_id": "IC_kwDOAPphoM5mJc1u",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1713753454/reactions"
            },
            "updated_at": "2023-09-11T12:11:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1713753454",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> `__len` is a lua 5.2 thing.\r\n\r\nit's  in our luaref.txt though?",
            "created_at": "2023-09-11T13:03:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/24746#issuecomment-1713838640",
            "id": 1713838640,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24746",
            "node_id": "IC_kwDOAPphoM5mJxow",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1713838640/reactions"
            },
            "updated_at": "2023-09-11T13:03:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1713838640",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "That shouldn't be in their. Not even LuaJIT enables `__len` by default.\r\n\r\nhttp://www.lua.org/manual/5.2/readme.html\r\n\r\n> tables honor the __len metamethod ",
            "created_at": "2023-09-11T13:07:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/24746#issuecomment-1713845825",
            "id": 1713845825,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24746",
            "node_id": "IC_kwDOAPphoM5mJzZB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1713845825/reactions"
            },
            "updated_at": "2023-09-11T13:07:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1713845825",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "We could add an optional keyword argument to `vim.iter()` called `skipcheck` or something that always uses `ListIter` for table arguments. This would basically be a \"trust me I know what I'm doing\" kind of thing. If stuff doesn't work it's explicitly on the user.\r\n\r\nAlternatively we could expose the `ListIter` table directly which would allow `vim.iter.ListIter(t)`. Though I don't think this should be broadly advertised as `vim.iter()` should be the main entry point of the API.",
            "created_at": "2023-09-11T13:15:00Z",
            "html_url": "https://github.com/neovim/neovim/issues/24746#issuecomment-1713858761",
            "id": 1713858761,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24746",
            "node_id": "IC_kwDOAPphoM5mJ2jJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1713858761/reactions"
            },
            "updated_at": "2023-09-11T13:15:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1713858761",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> `skipcheck` or something that always uses `ListIter` for table arguments\r\n\r\nWould dict-like tables continue to pay the [\"is this a list?\"](https://github.com/neovim/neovim/blob/e928161bde262c238f79bc0fd84e60178ff6a321/runtime/lua/vim/iter.lua#L906) cost? Maybe need an arg like `kind='list'|'dict'` ?\r\n\r\nIt's quite possible that I'm prematurely optimizing, so again the purpose of this issue is just to check my assumptions and, at minimum, (1) document some things and (2) understand any one-way doors we are entering.",
            "created_at": "2023-09-11T13:23:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/24746#issuecomment-1713876933",
            "id": 1713876933,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24746",
            "node_id": "IC_kwDOAPphoM5mJ6_F",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1713876933/reactions"
            },
            "updated_at": "2023-09-11T13:26:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1713876933",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">Would dict-like tables continue to pay the [\"is this a list?\"](https://github.com/neovim/neovim/blob/e928161bde262c238f79bc0fd84e60178ff6a321/runtime/lua/vim/iter.lua#L906) cost?\r\n\r\nDict-like tables can already avoid this with `vim.iter(pairs(t))`, which is what `vim.iter` does anyway if `t` is not list-like.\r\n\r\n> Maybe need an arg like `kind='list'|'dict'` ?\r\n\r\nIf we want to provide a \"danger zone/experts only\" interface, I think the simplest option would simply be to expose `ListIter` directly.",
            "created_at": "2023-09-11T17:14:50Z",
            "html_url": "https://github.com/neovim/neovim/issues/24746#issuecomment-1714282464",
            "id": 1714282464,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24746",
            "node_id": "IC_kwDOAPphoM5mLd_g",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1714282464/reactions"
            },
            "updated_at": "2023-09-11T17:14:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1714282464",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Alternatively we could expose the `ListIter` table directly which would allow `vim.iter.ListIter(t)`.\r\n\r\nNot in favor of that, exposing a separate \"class\" adds lots of new surface area (+docs) compared to an optional `vim.iter('list', ...)` entrypoint.",
            "created_at": "2023-11-25T13:54:42Z",
            "html_url": "https://github.com/neovim/neovim/issues/24746#issuecomment-1826326033",
            "id": 1826326033,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24746",
            "node_id": "IC_kwDOAPphoM5s24YR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1826326033/reactions"
            },
            "updated_at": "2023-11-25T14:03:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1826326033",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@justinmk Thinking about this more. I think I'd be in favor of making this change along with clear documentation of how it works. We are sacrificing correctness for performance, but I think that's reasonable, because:\r\n\r\n1. In Lua, the fast majority of tables for which `t[1] ~= nil and t[#t] ~= nil` is true _will_ be real lists\r\n2. In the uncommon case where that is not true, it is easy to tell a user to use `pairs()` manually",
            "created_at": "2023-11-27T15:53:15Z",
            "html_url": "https://github.com/neovim/neovim/issues/24746#issuecomment-1828111093",
            "id": 1828111093,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24746",
            "node_id": "IC_kwDOAPphoM5s9sL1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1828111093/reactions"
            },
            "updated_at": "2023-11-27T15:53:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1828111093",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> majority of tables for which `t[1] ~= nil and t[#t] ~= nil` is true _will_ be real lists\r\n\r\nThat's my intuition also. \r\n\r\n- Current situation: common case is always slow, and no way to opt-out of the table scan.\r\n- Proposal: common case is always fast, and uncommon case can opt-out of list treatment via `pairs()`.\r\n    - con: may accidentally treat dict or sparse array as a dense array.\r\n        - counterargument: the same \"con\" applies to `#`, so it's reasonable to expect callers to explicitly call `vim.iter(pairs(...))` if they want to be \"safe\" (and take the performance hit).",
            "created_at": "2023-11-27T16:11:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/24746#issuecomment-1828149671",
            "id": 1828149671,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24746",
            "node_id": "IC_kwDOAPphoM5s91mn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1828149671/reactions"
            },
            "updated_at": "2023-11-27T16:12:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1828149671",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Note this change also has another (subtle) effect in that it will now modify the original source table. Currently we make a copy of the `src` table (during the \"scan\" step) which is passed to `ListIter`, so the original table is unmodified.\r\n\r\nWe can tell users to `deepcopy()` the list if they don't want it modified, but this also needs to be documented.\r\n\r\nEDIT: I'm not very happy about this part, actually. Imo the mental model of an iterator is that the changes only take place \"inside\" the iterator pipeline, until they are \"collapsed\" with something like `totable()` or `fold()`, at which point the modified table is returned while the original table is left intact. This change would make the semantics of iterators meaningfully different for lists vs other kinds of iterators.",
            "created_at": "2023-11-27T16:18:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/24746#issuecomment-1828162048",
            "id": 1828162048,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24746",
            "node_id": "IC_kwDOAPphoM5s94oA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1828162048/reactions"
            },
            "updated_at": "2023-11-27T16:22:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1828162048",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> In Lua, the fast majority of tables for which t[1] ~= nil and t[#t] ~= nil is true will be real lists\r\n\r\nDoes this even work? `#` doesn't include all items if there are gaps\r\n\r\n```\r\nlocal buffers = {}\r\n\r\nbuffers[1] = 'foo'\r\nbuffers[3] = 'bar'\r\n\r\nprint(#buffers)\r\n-- 1\r\n```\r\n\r\n(It probably doesn't matter for the discussion here, but there have been a couple of bugs caused by using `ipairs` on tables indexed by buffer, and having it seemingly work because buffers start at 1 and increment by 1)\r\n\r\n---\r\n\r\n> Note this change also has another (subtle) effect in that it will now modify the original source table\r\n\r\nI second the concerns. Modifying table's by iterating over it would be very surprising.",
            "created_at": "2023-11-27T16:42:18Z",
            "html_url": "https://github.com/neovim/neovim/issues/24746#issuecomment-1828208159",
            "id": 1828208159,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24746",
            "node_id": "IC_kwDOAPphoM5s-D4f",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1828208159/reactions"
            },
            "updated_at": "2023-11-27T16:42:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1828208159",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Does this even work? `#` doesn't include all items if there are gaps\r\n\r\nThe `t[#t]` check is only a best-effort, and for non-dense arrays the caller is expected to opt-out of \"list\" behavior.\r\n\r\n> Note this change also has another (subtle) effect in that it will now modify the original source table. Currently we make a copy of the `src` table (during the \"scan\" step) which is passed to `ListIter`, so the original table is unmodified.\r\n\r\nOh, yeah that's a dealbreaker. Could we not maintain separate state to track the current head/tail/etc? But if that complicates the code, probably not worth it.\r\n\r\nSo it seems the current status is:\r\n\r\n- Caller can opt-out of table-scan by wrapping input with pairs().\r\n- Anyone that _doesn't_ opt out presumably wants \"list\" behaviors (`rev()`/`slice()`/etc), which requires a copy (and thus a scan) anyway.\r\n\r\nSo I think there's nothing left to do here? We don't need to [expose ListIter or `vim.iter('list',...)`](https://github.com/neovim/neovim/issues/24746#issuecomment-1826326033) because list behavior requires a copy so a scan is unavoidable.",
            "created_at": "2023-11-27T22:19:08Z",
            "html_url": "https://github.com/neovim/neovim/issues/24746#issuecomment-1828716739",
            "id": 1828716739,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24746",
            "node_id": "IC_kwDOAPphoM5tAADD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1828716739/reactions"
            },
            "updated_at": "2023-11-27T22:22:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1828716739",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">Could we not maintain separate state to track the current head/tail/etc? But if that complicates the code, probably not worth it.\r\n\r\nWe do do this already, but functions like `map()` can change the actual values in the table, apart from the head/tail position.\r\n\r\n>So I think there's nothing left to do here? We don't need to https://github.com/neovim/neovim/issues/24746#issuecomment-1826326033 because list behavior requires a copy so a scan is unavoidable.\r\n\r\nAgreed.",
            "created_at": "2023-11-27T22:30:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/24746#issuecomment-1828731191",
            "id": 1828731191,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24746",
            "node_id": "IC_kwDOAPphoM5tADk3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1828731191/reactions"
            },
            "updated_at": "2023-11-27T22:30:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1828731191",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        }
    ],
    "comments": 20,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/24746/comments",
    "created_at": "2023-08-16T23:59:17Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/24746/events",
    "html_url": "https://github.com/neovim/neovim/issues/24746",
    "id": 1854044139,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "FEF2C0",
            "default": false,
            "description": "issues reporting performance problems",
            "id": 101930601,
            "name": "performance",
            "node_id": "MDU6TGFiZWwxMDE5MzA2MDE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/performance"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/24746/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 193,
        "created_at": "2023-02-02T14:11:43Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
            "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
            "followers_url": "https://api.github.com/users/bfredl/followers",
            "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
            "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bfredl",
            "id": 1363104,
            "login": "bfredl",
            "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
            "organizations_url": "https://api.github.com/users/bfredl/orgs",
            "received_events_url": "https://api.github.com/users/bfredl/received_events",
            "repos_url": "https://api.github.com/users/bfredl/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bfredl"
        },
        "description": "",
        "due_on": "2024-03-01T08:00:00Z",
        "html_url": "https://github.com/neovim/neovim/milestone/36",
        "id": 8997654,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/36/labels",
        "node_id": "MI_kwDOAPphoM4AiUsW",
        "number": 36,
        "open_issues": 128,
        "state": "open",
        "title": "0.10",
        "updated_at": "2023-11-28T00:25:28Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/36"
    },
    "node_id": "I_kwDOAPphoM5ugnfr",
    "number": 24746,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/24746/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/24746/timeline",
    "title": "vim.iter: faster check for list-like table",
    "updated_at": "2023-11-28T00:25:28Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/24746",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk"
    }
}