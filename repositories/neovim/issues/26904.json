{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\nI have noticed that certain LSPs (such as [ruff-lsp](https://github.com/astral-sh/ruff-lsp)) fall over when they are attached to a buffer that has no backing file. That lead me to looking at how to \"prevent\" an LSP from connecting to a buffer if there is no file associated with the buffer. Unless I am missing something, that seems to be (currently) impossible. While we have the ability to _sort of_ specify which file types to associate the lsp with, we have no way of doing stuff like \"only attach to a buffer if there is a file\" or any other sort of complex logic.\n\n### Expected behavior\n\n\r\nIn theory this should be pretty easy to add (provided the neovim team is open to a PR for it). Adding a new option to the lspconfig spec for something like `lsp.ClientConfig.pre_connect` and look for true on its return would work. You could put this logic check right here: https://github.com/neovim/neovim/blob/3734519e3b4ba1bf19ca772104170b0ef776be46/runtime/lua/vim/lsp.lua#L534-L535\r\n\r\nNote, there is a spot in the LSP for this kind of logic with `lsp.ClientConfig.before_init` however that seems to be being used to allow the user to modify the parameter being passed to the LSP. It doesn't appear that the output of this function is being consumed beyond \"did it work\" though so we could potentially utilize the the return of this function to indicate if we _should_ connect or abort as well. \r\n\r\nI am not **super** familiar with the LSP spec so I have no idea if this idea goes against that. If however, this is something that neovim is open to, I feel relatively confident I can get it put together :)",
    "closed_at": "2024-01-05T19:50:56Z",
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": ">  That lead me to looking at how to \"prevent\" an LSP from connecting to a buffer if there is no file associated with the buffer. Unless I am missing something, that seems to be (currently) impossible\r\n\r\nIt's very much possible. Currently Neovim provides 3 functions to control clients:\r\n\r\n- `vim.lsp.start_client()`\r\n- `vim.lsp.buf_attach_client()`\r\n- `vim.lsp.start()` (combination of both, `start_client()` and `buf_attach_client()`)\r\n\r\nYou can just _not_ call `buf_attach_client` if you don't want it to attach to a buffer that's not saved on disk.\r\n",
            "created_at": "2024-01-05T19:50:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/26904#issuecomment-1879183594",
            "id": 1879183594,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26904",
            "node_id": "IC_kwDOAPphoM5wAhDq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1879183594/reactions"
            },
            "updated_at": "2024-01-05T19:50:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1879183594",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        }
    ],
    "comments": 1,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/26904/comments",
    "created_at": "2024-01-05T17:24:44Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/26904/events",
    "html_url": "https://github.com/neovim/neovim/issues/26904",
    "id": 2067741733,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/26904/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM57Pzwl",
    "number": 26904,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/26904/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/26904/timeline",
    "title": "Add option to vim.lsp for dynamic validation of _if lsp should connect_ to buffer",
    "updated_at": "2024-01-05T19:50:57Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/26904",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/2640668?v=4",
        "events_url": "https://api.github.com/users/miversen33/events{/privacy}",
        "followers_url": "https://api.github.com/users/miversen33/followers",
        "following_url": "https://api.github.com/users/miversen33/following{/other_user}",
        "gists_url": "https://api.github.com/users/miversen33/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/miversen33",
        "id": 2640668,
        "login": "miversen33",
        "node_id": "MDQ6VXNlcjI2NDA2Njg=",
        "organizations_url": "https://api.github.com/users/miversen33/orgs",
        "received_events_url": "https://api.github.com/users/miversen33/received_events",
        "repos_url": "https://api.github.com/users/miversen33/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/miversen33/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/miversen33/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/miversen33"
    }
}