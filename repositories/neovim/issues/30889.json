{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "(This story is WIP)\n\n# Problem\n\nNo API to load images as bytes and disiplay them using e.g. kitty image protocol.\n\n# Expected behavior\n\n- `vim.ui.img` (is `vim.ui` the right place for this? or `vim.os`, or ...?)\n    - Could shell out to `imagemagick` CLI. For reference, https://github.com/3rd/image.nvim uses FFI but that seems unnecessary.\n    - `show`\n    - `load`\n\n# Related\n\n- https://github.com/neovim/neovim/issues/24164\n- https://github.com/neovim/neovim/issues/27119",
    "closed_at": null,
    "closed_by": null,
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "@justinmk what kind of appetite is there for this and the related issues being resolved? Both in the terminal emulator and within neovim itself. I'd potentially be interested in tackling part of this given some of the usecases this would open up. Not sure where to discuss in detail.\n\nPersonally, I like how [timg](https://github.com/hzeller/timg/) abstracts the logic to support rendering images with different backends (kitty, iterm2, sixel, etc) and how it handles support for loading and scaling images. If only it offered a way to specify an x & y coordinate for the location of the image within the terminal, I'd argue for using it instead of `imagemagick` as the shell out option. It provides a clean codebase to see which libraries to bring in to load images, handle encoding/decoding, and rendering to terminals that support different protocols.\n\n### References for image protocols\n\n1. [iterm2 images](https://iterm2.com/documentation-images.html) seems the most straightforward to do. You move your cursor to some position and output a base64 encoded image. There's [even a script](https://iterm2.com/utilities/imgcat) that illustrates how to do this pretty easily with external tools like `base64`.\n2. [kitty images](https://sw.kovidgoyal.net/kitty/graphics-protocol/) are more complex, but still boil down to easy-to-understand escape codes. \n3. [sixel images](https://en.wikipedia.org/wiki/Sixel) seem more complex and the examples I can find like [timg's sixel canvas](https://github.com/hzeller/timg/blob/main/src/sixel-canvas.cc) make use of [libsixel](https://github.com/saitoha/libsixel)\n\n\ncc @3rd",
            "created_at": "2024-11-02T22:51:09Z",
            "html_url": "https://github.com/neovim/neovim/issues/30889#issuecomment-2453217194",
            "id": 2453217194,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30889",
            "node_id": "IC_kwDOAPphoM6SOR-q",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 2,
                "heart": 2,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453217194/reactions"
            },
            "updated_at": "2024-11-02T23:06:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453217194",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Let's keep vterm out of this for now. Regarding protocol, I would focus on kitty for now; that has by far the widest adoption across terminals. (And we don't want to chase individual terminals. If one protocol won't do the job, it's not time for that feature yet.)",
            "created_at": "2024-11-02T22:54:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/30889#issuecomment-2453217750",
            "id": 2453217750,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30889",
            "node_id": "IC_kwDOAPphoM6SOSHW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453217750/reactions"
            },
            "updated_at": "2024-11-02T22:54:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453217750",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "@justinmk @clason @3rd I read through a bit of the escape code logic for both kitty and iterm2 as well as looked to see how hologram.nvim and image.nvim applied the escape codes. My intent was to see what the minimum needed was to be able to show an image within neovim to figure out what you actually need to do. Here's an example for each terminal.\n\n### kitty example\n\n<details>\n\n<summary>kitty terminal gif</summary>\n\n![Image](https://github.com/user-attachments/assets/ed0e3d42-085e-47c9-a7e7-24a278b45172)\n\n</details>\n\n### iterm2 example\n\nThe kitty example does NOT work on wezterm, despite wezterm being mentioned as implementing most of the protocol. So not sure if it doesn't actually support chunked images or if it's something else, but wanted to highlight this given wezterm's and iterm2's penetration. See [wezterm tracker for kitty image protocol](https://github.com/wez/wezterm/issues/986).\n\ncc @wez\n\n<details>\n\n<summary>wezterm terminal gif</summary>\n\n![Image](https://github.com/user-attachments/assets/09883966-6645-4b11-9259-a542fd282eb1)\n\n</details>\n\n### Steps to create\n\n1. In order for the escape sequences to be sent, it seems like plugins like hologram.nvim and image.nvim grabbed the tty from the `/dev` path, which I'm assuming already limits them to Unix-like systems (i.e. Linux, MacOS, FreeBSD).\n\n    <details>\n\n    <summary>get_tty_name() function</summary>\n\n    ```lua\n    ---Retrieve the tty name used by the editor.\n    ---\n    ---E.g. /dev/ttys008\n    ---@return string|nil\n    local function get_tty_name()\n        -- Leverage tty, which reads the terminal name\n        local handle = io.popen(\"tty 2>/dev/null\")\n        if not handle then return nil end\n        local result = handle:read(\"*a\")\n        handle:close()\n        result = vim.fn.trim(result)\n        if result == \"\" then return nil end\n        return result\n    end\n    ```\n\n    </details>\n\n2. You can definitely implement base64 encoding and decoding purely in Lua, and I've seen the same source code (https://github.com/iskolbin/lbase64) passed around everywhere. For me, I just wrote a wrapper that works on MacOS to use `base64` to encode a PNG.\n\n    <details>\n\n    <summary>base64_encode_file() function</summary>\n\n    ```lua\n    local function base64_encode_file(file_path)\n        -- NOTE: Use -b 0 to ensure no newlines are contained by wrapping the content\n        local handle = assert(\n            io.popen(\"base64 -b 0 -i \" .. file_path, \"r\"),\n            \"failed to base64 encode\"\n        )\n        local result = handle:read(\"*a\")\n        handle:close()\n\n        return result\n    end\n    ```\n\n    </details>\n\n3. From there, we abstract writing to the tty device that can be used by any of the backends (i.e. kitty or iterm2):\n\n    <details>\n\n    <summary>write() function</summary>\n\n    ```lua\n    local TTY_NAME = assert(get_tty_name(), \"failed to read editor tty name\")\n\n    ---Writes data to the editor tty.\n    ---@param ... string|number\n    local function write(...)\n        local handle = io.open(TTY_NAME, \"w\")\n        if not handle then\n            error(\"failed to open \" .. TTY_NAME)\n        end\n        handle:write(...)\n        handle:close()\n    end\n    ```\n\n    </details>\n\n4. By default, the image seems to be placed wherever the cursor is, so we need to support moving the cursor and restoring its position in order to place the image at some specific point. When I looked at `image.nvim`, there was extra logic to account for some quirk of ssh + tmux, which I left commented out here:\n\n    <details>\n\n    <summary>move_cursor() and restore_cursor() functions</summary>\n\n    ```lua\n    local CODES = {\n        BEL = \"\\x07\", -- aka ^G\n        ESC = \"\\x1B\", -- aka ^[\n    }\n\n    local function move_cursor(x, y, save)\n        -- if is_SSH and utils.tmux.is_tmux then\n        --     -- When tmux is running over ssh, set-cursor sometimes doesn't actually get sent\n        --     -- I don't know why this fixes the issue...\n        --     utils.tmux.get_cursor_x()\n        --     utils.tmux.get_cursor_y()\n        -- end\n        if save then write(CODES.ESC .. \"[s\") end\n        write(CODES.ESC .. \"[\" .. y .. \";\" .. x .. \"H\")\n        vim.uv.sleep(1)\n    end\n\n    local function restore_cursor()\n        write(CODES.ESC .. \"[u\")\n    end\n    ```\n\n    </details>\n\n5. Finally, we've got a function that puts it together and sends either an `iterm2` or `kitty` escape sequence to display the image. Both support chunked streaming of images, although I only did that for kitty and not iterm2.\n\n    <details>\n\n    <summary>show() function</summary>\n\n    ```lua\n    ---@param opts? {data?:string, filename?:string, pixelation?:\"iterm2\"|\"kitty\"}\n    local function show(opts)\n        opts = opts or {}\n\n        local data = opts.data\n        if opts.filename then\n            data = base64_encode_file(opts.filename)\n        end\n\n        -- Exit early if nothing to show\n        if not data or string.len(data) == 0 then\n            print(\"NO DATA\")\n            return\n        end\n\n        local pixelation = opts.pixelation or \"iterm2\"\n\n        move_cursor(0, 0, true)\n\n        if pixelation == \"iterm2\" then\n            -- NOTE: We MUST mark as inline otherwise not rendered and put in a\n            --       downloads folder\n            write(CODES.ESC .. \"]1337\") -- Begin sequence\n            write(\";File=inline=1\")     -- Display image inline\n            write(\":\" .. data)          -- Transmit base64 data\n            write(CODES.BEL)            -- End sequence\n        elseif pixelation == \"kitty\" then\n            local CHUNK_SIZE = 4096\n            local pos = 1\n            local DATA_LEN = string.len(data)\n\n            -- For kitty, we need to write an image in chunks\n            --\n            --     Graphics codes are in this form:\n            --\n            --         <ESC>_G<control data>;<payload><ESC>\\\n            --\n            --     To stream data for a PNG, we specify the format `f=100`.\n            --\n            --     To simultaneously transmit and display an image, we use `a=T`.\n            --\n            --     Chunking data (such as from over a network) requires the\n            --     specification of `m=0|1`, where all chunks must have a\n            --     value of `1` except the very last chunk.\n            while pos <= DATA_LEN do\n                write(CODES.ESC .. \"_G\") -- Begin sequence\n\n                -- If at the beginning of our image, mark as a PNG to be\n                -- transmitted and displayed immediately\n                if pos == 1 then\n                    write(\"a=T,f=100,\")\n                end\n\n                -- Get our specific chunk of data and increment position\n                local chunk = data:sub(pos, pos + CHUNK_SIZE)\n                pos = pos + CHUNK_SIZE\n\n                -- If we are still sending chunks and not at the end\n                if pos <= DATA_LEN then\n                    write(\"m=1\")\n                end\n\n                -- If we have a chunk available, write it\n                if string.len(chunk) > 0 then\n                    write(\";\")\n                    write(chunk)\n                end\n\n                write(CODES.ESC .. \"\\\\\") -- End sequence\n            end\n        end\n\n        restore_cursor()\n    end\n    ```\n\n    </details>\n",
            "created_at": "2024-11-03T01:59:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/30889#issuecomment-2453258781",
            "id": 2453258781,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30889",
            "node_id": "IC_kwDOAPphoM6SOcId",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 3,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453258781/reactions"
            },
            "updated_at": "2024-11-03T02:32:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453258781",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> what kind of appetite is there for this and the related issues being resolved?\n\nHunger level 9000. \n\n> [timg](https://github.com/hzeller/timg/) ... If only it offered a way to specify an x & y coordinate for the location of the image\n\nHas anyone requested that, is there a tracking issue?\n\nThanks for mentioning timg and providing minimal proof of concept, that is hugely helpful. Looks like this won't require much code at all.\n\nP.S. nvim has `vim.base64` (for terminal features such as URL support and... images).",
            "created_at": "2024-11-03T16:25:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/30889#issuecomment-2453485516",
            "id": 2453485516,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30889",
            "node_id": "IC_kwDOAPphoM6SPTfM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 4,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453485516/reactions"
            },
            "updated_at": "2024-11-03T16:27:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453485516",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Has anyone requested that, is there a tracking issue?\n\nNot that I'm aware of. There was an ask about turning timg into a library, where I mentioned neovim offhand in relation to this issue. \n\nhttps://github.com/hzeller/timg/issues/82\n\n> Thanks for mentioning timg and providing minimal proof of concept, that is hugely helpful. Looks like this won't require much code at all.\n\nI think the complexity comes from a handful of design decisions:\n\n1. Should the image persist (kitty) or move in line with neovim (iterm2)? I would think persisting is the desired effect for this example. \n2. Showing an image in absolute coordinates to the editor is a quick implementation. Where this is used in practice is embedding within buffers to display relative to other lines of text, which involves a lot of complexity to provide logic to wrap text around the image. \n3. Animations and videa streams are a different beast that I haven't familiarized myself with.\n\n> P.S. nvim has `vim.base64` (for terminal features such as URL support and... images).\n\nOh, cool. :) Nice to have that as an option! \n",
            "created_at": "2024-11-03T16:59:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/30889#issuecomment-2453496135",
            "id": 2453496135,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30889",
            "node_id": "IC_kwDOAPphoM6SPWFH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453496135/reactions"
            },
            "updated_at": "2024-11-03T17:01:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453496135",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2481802?v=4",
                "events_url": "https://api.github.com/users/chipsenkbeil/events{/privacy}",
                "followers_url": "https://api.github.com/users/chipsenkbeil/followers",
                "following_url": "https://api.github.com/users/chipsenkbeil/following{/other_user}",
                "gists_url": "https://api.github.com/users/chipsenkbeil/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/chipsenkbeil",
                "id": 2481802,
                "login": "chipsenkbeil",
                "node_id": "MDQ6VXNlcjI0ODE4MDI=",
                "organizations_url": "https://api.github.com/users/chipsenkbeil/orgs",
                "received_events_url": "https://api.github.com/users/chipsenkbeil/received_events",
                "repos_url": "https://api.github.com/users/chipsenkbeil/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/chipsenkbeil/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/chipsenkbeil/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/chipsenkbeil",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I'm not sure how useful the Kitty protocol is for non-terminal UIs, like Neovide. \n\nWhile we haven't done anything yet, I have been looking at different ways of implementing image support, with the current design being very lightweight, see this https://github.com/neovide/neovide/issues/2088#issuecomment-2466919869\n\n> 1. The images are marked using https://neovim.io/doc/user/api.html#extmarks, with a Neovide specific namespace\n> 2. A table `neovide_multimedia` stores the actual image data, which can be an URL, a file, or embedded raw data. It also contains the mime type, and metadata like size, if the image should be scaled. The reason for calling the table. `neovide_multimedia` instead of `neovide_image`, is reserve future support for vector graphics, videos, sounds and so on.\n>\n> When Neovide encounters a supported extmark, it fetches the actual data from `neovide_multimedia` using the extmark id. \n\nThis could perhaps be extended to be more generic, and supported directly by Nvim, so that in terminal mode, it interprets the same extmarks and draws the images using the kitty protocol.",
            "created_at": "2024-11-10T21:19:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/30889#issuecomment-2466921753",
            "id": 2466921753,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30889",
            "node_id": "IC_kwDOAPphoM6TCj0Z",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2466921753/reactions"
            },
            "updated_at": "2024-11-10T21:19:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2466921753",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "The point of a protocol is that it covers more than one consumer. ",
            "created_at": "2024-11-10T21:24:29Z",
            "html_url": "https://github.com/neovim/neovim/issues/30889#issuecomment-2466923328",
            "id": 2466923328,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30889",
            "node_id": "IC_kwDOAPphoM6TCkNA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2466923328/reactions"
            },
            "updated_at": "2024-11-10T21:24:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2466923328",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> The point of a protocol is that it covers more than one consumer.\n\nExactly, that's why I suggest to not use Kitty as the base.\n\nAnd I also mentioned how my proposal could be extended to support terminal UIs\n> This could perhaps be extended to be more generic, and supported directly by Nvim, so that in terminal mode, it interprets the same extmarks and draws the images using the kitty protocol.",
            "created_at": "2024-11-10T21:30:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/30889#issuecomment-2466934887",
            "id": 2466934887,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30889",
            "node_id": "IC_kwDOAPphoM6TCnBn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2466934887/reactions"
            },
            "updated_at": "2024-11-10T21:30:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2466934887",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yes, but Kitty is already a protocol, and supported by several terminals. That makes discouraging it in favor of a new vaporware \"protocol\" that is specific to _your_ GUI a hard sell.",
            "created_at": "2024-11-10T21:35:53Z",
            "html_url": "https://github.com/neovim/neovim/issues/30889#issuecomment-2466936872",
            "id": 2466936872,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30889",
            "node_id": "IC_kwDOAPphoM6TCngo",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2466936872/reactions"
            },
            "updated_at": "2024-11-10T21:36:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2466936872",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "The major problem with Kitty is that it's purely meant for terminal applications and Nvim with its UI protocol is not a terminal application. \n\nFor example, it operates in screen/terminal coordinates, which makes it impossible to display images attached to scrolling buffers, or overlapping floating windows for example. We need something that is attached to buffers and windows.\n\nI'm not saying that you should ditch the Kitty protocol completely. It makes complete sense to emit it that in the TUI implementation. But to base the whole Nvim implementation on it and force external UIs to implement a parser does not sound like a good idea in my ears.\n\n",
            "created_at": "2024-11-10T21:53:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/30889#issuecomment-2466949873",
            "id": 2466949873,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30889",
            "node_id": "IC_kwDOAPphoM6TCqrx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 8,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 8,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2466949873/reactions"
            },
            "updated_at": "2024-11-10T21:53:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2466949873",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9946255?v=4",
                "events_url": "https://api.github.com/users/fredizzimo/events{/privacy}",
                "followers_url": "https://api.github.com/users/fredizzimo/followers",
                "following_url": "https://api.github.com/users/fredizzimo/following{/other_user}",
                "gists_url": "https://api.github.com/users/fredizzimo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fredizzimo",
                "id": 9946255,
                "login": "fredizzimo",
                "node_id": "MDQ6VXNlcjk5NDYyNTU=",
                "organizations_url": "https://api.github.com/users/fredizzimo/orgs",
                "received_events_url": "https://api.github.com/users/fredizzimo/received_events",
                "repos_url": "https://api.github.com/users/fredizzimo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fredizzimo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fredizzimo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fredizzimo",
                "user_view_type": "public"
            }
        }
    ],
    "comments": 10,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/30889/comments",
    "created_at": "2024-10-21T15:21:59Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/30889/events",
    "html_url": "https://github.com/neovim/neovim/issues/30889",
    "id": 2602894677,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 144672485,
            "name": "provider",
            "node_id": "MDU6TGFiZWwxNDQ2NzI0ODU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/provider"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/30889/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 660,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 614,
        "state": "open",
        "title": "backlog",
        "updated_at": "2024-11-07T08:21:30Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "I_kwDOAPphoM6bJQVV",
    "number": 30889,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 13,
        "-1": 0,
        "confused": 0,
        "eyes": 3,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 16,
        "url": "https://api.github.com/repos/neovim/neovim/issues/30889/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "sub_issues_summary": {
        "completed": 0,
        "percent_completed": 0,
        "total": 0
    },
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/30889/timeline",
    "title": "image API",
    "updated_at": "2024-11-10T21:53:11Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/30889",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    }
}