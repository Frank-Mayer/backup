{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\r\n\r\n## Problem\r\nWhen using a system to automatically attach buffers to a language server that reinitializes itself, or responds to the `initialize` RPC query slowly, or something similar, if one of those buffers becomes invalid then the `_on_attach` method of LSP Clients produces an invalid buffer-number error. \r\n\r\nThis problem is compounded if for one reason or another the initialize query is repeatedly responded to or multiple buffers attached to a client become invalid over time (for example, if significant numbers of ephemeral preview buffers are attached to a language server and then removed in short succession), as all of these invalid buffers are provided to `_on_attach` on what I assume are repeated `initialize` responses from the LSP server, every time, creating a large error log spam which greatly interferes with typing >.<\r\n\r\nWhile this is most acute when using a system that happens to attach and invalidate ephemeral buffers, it is (again, as far as I can tell) a race condition that should apply in any case where an LSP server reinitializes itself after any of it's attached buffers are rendered invalid. However, in practice it seems extremely difficult to reproduce....\r\n\r\n```\r\nError executing vim.schedule lua callback: /usr/share/nvim/runtime/lua/vim/lsp/_changetracking.lua:154: Invalid buffer id: 44                                                                     \r\nstack traceback:                                                                                                                                                                                  \r\n        [C]: in function 'nvim_buf_get_name'                                                                                                                                                      \r\n        /usr/share/nvim/runtime/lua/vim/lsp/_changetracking.lua:154: in function 'init'                                                                                                           \r\n        /usr/share/nvim/runtime/lua/vim/lsp/client.lua:915: in function '_text_document_did_open_handler'                                                                                         \r\n        /usr/share/nvim/runtime/lua/vim/lsp/client.lua:950: in function '_on_attach'                                                                                                              \r\n        /usr/share/nvim/runtime/lua/vim/lsp/client.lua:623: in function ''                                                                                                                        \r\n        vim/_editor.lua: in function <vim/_editor.lua:0> \r\n```\r\n\r\n## Originating Code Path\r\n`runtime/lua/vim/lsp/client.lua:608` - this is inside a callback passed to `rpc.request` with method `initialize`\r\n```lua\r\n    -- If server is being restarted, make sure to re-attach to any previously attached buffers.\r\n    -- Save which buffers before on_init in case new buffers are attached.\r\n    local reattach_bufs = vim.deepcopy(self.attached_buffers) -- <=== This is the source of the invalid bufnrs \r\n\r\n    self:_run_callbacks(self._on_init_cbs, lsp.client_errors.ON_INIT_CALLBACK_ERROR, self, result)\r\n\r\n    for buf in pairs(reattach_bufs) do\r\n      self:_on_attach(buf) -- <==== this is the source of the error(s) when the bufnr is invalid, which we will traverse into\r\n    end\r\n```\r\n\r\n`runtime/lua/vim/lsp/client.lua:938` - this is the actual `_on_attach` method. The error comes from inside `_text_document_did_open_handler` method\r\n```lua\r\n--- @package\r\n--- Runs the on_attach function from the client's config if it was defined.\r\n--- @param bufnr integer Buffer number\r\nfunction Client:_on_attach(bufnr)\r\n  self:_text_document_did_open_handler(bufnr) -- <=== Source of error. \r\n\r\n  lsp._set_defaults(self, bufnr)\r\n\r\n  api.nvim_exec_autocmds('LspAttach', {\r\n    buffer = bufnr,\r\n    modeline = false,\r\n    data = { client_id = self.id },\r\n  })\r\n```\r\n\r\n`runtime/lua/vim/lsp/client.lua:902`\r\n```lua\r\n--- @package\r\n--- Default handler for the 'textDocument/didOpen' LSP notification.\r\n---\r\n--- @param bufnr integer Number of the buffer, or 0 for current\r\nfunction Client:_text_document_did_open_handler(bufnr)\r\n  changetracking.init(self, bufnr)  -- <=== Error comes from here. Note that further down there is some kind of bufnr validation\r\n  if not vim.tbl_get(self.server_capabilities, 'textDocumentSync', 'openClose') then\r\n    return\r\n  end\r\n  if not api.nvim_buf_is_loaded(bufnr) then\r\n    return\r\n  end\r\n  local filetype = vim.bo[bufnr].filetype\r\n```\r\n\r\n`runtime/lua/vim/lsp/_changetracking.lua:149`, inside the `M.init` module function. \r\n```lua\r\n  local buf_state = state.buffers[bufnr]\r\n  if buf_state then\r\n    buf_state.refs = buf_state.refs + 1\r\n  else\r\n    buf_state = {\r\n      name = api.nvim_buf_get_name(bufnr), -- <=== The real source of the error ^.^\r\n      lines = {},\r\n      lines_tmp = {},\r\n      pending_changes = {},\r\n      needs_flush = false,\r\n      refs = 1,\r\n    }\r\n    state.buffers[bufnr] = buf_state\r\n```\r\n\r\n### Steps to reproduce using \"nvim -u minimal_init.lua\"\r\n\r\nI could not get a minimal reproduction, unfortunately. I spent many many hours trying. However, minimal reproductions of race conditions are rather difficult. In particular, I've failed to get a minimal config to get an invalid bufnr into the `attached_buffers` of any LSP server, even though I know it is possible because my custom LSP setup (which is a bit of an abomination at this point...) has a status command which I modified to report on that (among other things like listing files with each language server client, filtering by language, etc.)\r\n\r\n## My final failed attempt at `minimal_init.lua`\r\n```lua\r\nlocal pattern = 'lua'\r\nlocal cmd = { 'lua-language-server' }\r\n-- Add files/folders here that indicate the root of a project\r\nlocal root_markers = { '.git', '.editorconfig' }\r\n-- Change to table with settings if required\r\nlocal settings = vim.empty_dict()\r\n\r\n-- LSP that we want to directly attach to\r\nlocal client_id = nil\r\n\r\n-- Files to open\r\n--\r\n-- First is the one put in a buffer to immediately wipe it out, second is to induce a re-initialize\r\nlocal bufhidewipe_file = \"dummy-lua.lua\"\r\nlocal reinit_trigger_file = \"dummy-lua-two.lua\"\r\n\r\n-- Start the LSP with the bufnr, using the filename as the location...\r\n--\r\n-- Bufnr may not actually be a standard buffer constructed from something like `:edit` ^.^\r\nlocal function do_start(bufnr, fname)\r\n\tlocal match = vim.fs.find(root_markers, { path = fname, upward = true })[1]\r\n\tlocal root_dir = match and vim.fn.fnamemodify(match, ':p:h') or nil\r\n\treturn vim.lsp.start({\r\n\t\tname = 'lua-language-server',\r\n\t\tcmd = cmd,\r\n\t\troot_dir = root_dir,\r\n\t\tsettings = settings,\t\r\n\t}, { bufnr = bufnr })\r\nend\r\n\r\n--[[\r\nvim.api.nvim_create_autocmd('FileType', {\r\n\tpattern = pattern,\r\n\tcallback = function(args)\r\n\t\tclient_id = do_start(0, args.file)\r\n\tend\r\n})]]--\r\n\r\n\r\n\r\n-- Open a file and heuristically locate it's buffer number\r\n--\r\n-- Note that this will totally break with duplicate files in different current working directories :p\r\n-- It's just intended to be a very quick method of getting buffer numbers to work with :)\r\n--\r\n-- Optionally, specify `preview = true` to open in the preview window....\r\nlocal function open_buffer_via_name(filename, preview)\r\n\t-- Open file in split.\r\n\tif not preview then\r\n\t\tvim.cmd.vsplit(filename)\r\n\telse\r\n\t\tvim.cmd.pedit(filename)\r\n\tend\r\n\t-- We need to find the bufnr for this buffer... can't find a way to actually directly create/edit a buffer in a way that gets the bufnr >.<\r\n\tlocal test_bufnr = nil\r\n\tfor _, bufnr in ipairs(vim.api.nvim_list_bufs()) do\r\n\t\tlocal name = vim.api.nvim_buf_get_name(bufnr)\r\n\t\t-- Plain search\r\n\t\tif string.find(name, filename, 1, true) ~= nil then\r\n\t\t\ttest_bufnr = bufnr\r\n\t\tend\r\n\tend\r\n\treturn test_bufnr\r\nend\r\n\r\n-- Load a file into a scratch buffer. Will still have the filename as the name. Returns the bufnr\r\n-- also allows you to set a filetype. Also reads contents from the file in question into the buffer.\r\n--\r\n-- This sets the scratch buffer's `bufhidden` option to `wipe`, which will wipe the buffer when it's not in a window\r\n-- Importantly, this doesn't trigger autocommands! :p (i think this might be related).\r\n--\r\n-- It also creates a window (to prevent immediate wipe).\r\n--\r\n-- Returns the scratch buffer id as well as the scratch window id. The important thing is to destroy the buffer by hiding\r\n-- the window and not deleting it directly ^.^\r\n\r\n-- is in fzf-lua, which suggests this may be related to lsp??\r\nlocal function open_scratch_buffer_via_name(filename, set_filetype)\r\n\t-- Read data into the buffer.\r\n\t--\r\n\t-- We read before creating the buffer so if there are errors no extranuous buffers\r\n\t-- are left hanging around :p\r\n\tlocal filelines = {}\r\n\tfor l in io.lines(filename) do\r\n\t\t-- one-based indices ðŸ¤¢\r\n\t\tfilelines[#filelines + 1] = l\r\n\tend\r\n\tlocal scratch_buffer = vim.api.nvim_create_buf(false, true)\r\n\tvim.api.nvim_buf_set_lines(scratch_buffer, 0, 1, false, filelines)\r\n\tvim.api.nvim_buf_set_name(scratch_buffer, filename)\r\n\t-- This is probably the important bit. FZF sets `bufhidden=wipe` which does NOT CALL AUTOCMDS\r\n\tvim.api.nvim_set_option_value(\"bufhidden\", \"wipe\", { buf = scratch_buffer })\r\n\tvim.api.nvim_set_option_value(\"filetype\", set_filetype, { buf = scratch_buffer })\r\n\r\n\t-- Create the window. Doesn't need to be float or anything :p\r\n\t-- Automatically enter it.\r\n\tlocal scratch_window = vim.api.nvim_open_win(scratch_buffer, true, {\r\n\t\trelative = \"cursor\",\r\n\t\trow = 0,\r\n\t\tcol = 0,\r\n\t\theight = 40,\r\n\t\twidth = 30,\r\n\t\tnoautocmd = true,\r\n\t\tborder = \"rounded\"\r\n\t})\r\n\treturn scratch_buffer, scratch_window\r\nend\r\n\r\n\r\nvim.api.nvim_create_user_command(\"ReproduceRaceCondition\", function(args) \r\n\tlocal bufhidewipe_bufnr, bufhidewipe_win_id = open_scratch_buffer_via_name(bufhidewipe_file, \"lua\")\r\n\tlocal ephemeral_client_id = do_start(bufhidewipe_bufnr, bufhidewipe_file)\r\n\tvim.defer_fn(function()\r\n\t\tvim.api.nvim_win_close(bufhidewipe_win_id, true)\r\n\t\t--[[vim.defer_fn(function() \r\n\t\t\tlocal client = vim.lsp.get_client_by_id(ephemeral_client_id)\r\n\t\t\tclient:stop()\r\n\t\tend)]]\r\n\r\n\t\tvim.defer_fn(function()\r\n\t\t\tlocal nonephemeral_bufnr = open_buffer_via_name(bufhidewipe_file, false)\r\n\t\t\tvim.lsp.buf_attach_client(nonephemeral_bufnr, ephemeral_client_id)\r\n\t\tend, 100)\r\n\tend, 50)\r\nend, {\r\n\tnargs = 0\r\n})\r\n```\r\n## Folder Arrangement\r\nJust placing `minimal_init.lua` in a folder with an empty `.editorfile`, and `dummy-lua.lua` (the `.editorfile` is for lsp sharing) will get the configuration i was using while writing this failed minimal config.\r\n\r\n## Actual Setup Behaviour\r\nIt's probably worth noting that the actual setup I have is more complex than this in certain ways that may be relevant. Importantly, the main LSP servers that I see in my listing (`:LspStatus`) command with invalid bufnrs is `marksman` (the markdown LSP I use). \r\n\r\nMy suspicion is that somehow the autocmd I have that automatically produces a popup when typing (which is constantly being refreshed) manages to trigger this race condition. But it also seems to occur more after I use preview windows with `fzf-lua` if they are scrolled through very rapidly (I use no plugins for the popup/documentation aspect, so it's not an fzf-lua thing). However, this is not `marksman` stuff, even if I havent seen it in any kind of `:LspStatus` listing yet :/\r\n\r\n## Logs\r\nI have looked in logs, but there doesn't seem to be much useful there (though there are a signifcant number of errors from `marksman` and a few from my `lua-language-server` in some of the other earlier loglines. Still:\r\n```\r\n[START][2024-04-30 00:08:27] LSP logging initiated\r\n[ERROR][2024-04-30 00:08:27] .../vim/lsp/rpc.lua:752\t\"rpc\"\t\"/usr/bin/marksman\"\t\"stderr\"\t\"[00:08:26 INF] <LSP Entry> Starting Marksman LSP server: {}\\n\"\r\n[ERROR][2024-04-30 00:26:00] .../vim/lsp/rpc.lua:752\t\"rpc\"\t\"/usr/bin/marksman\"\t\"stderr\"\t\"[00:26:00 INF] <LSP Entry> Starting Marksman LSP server: {}\\n\"\r\n[ERROR][2024-04-30 00:26:36] .../vim/lsp/rpc.lua:752\t\"rpc\"\t\"/usr/bin/marksman\"\t\"stderr\"\t\"[00:26:35 INF] <LSP Entry> Starting Marksman LSP server: {}\\n\"\r\n[ERROR][2024-04-30 00:27:09] .../vim/lsp/rpc.lua:752\t\"rpc\"\t\"/usr/bin/marksman\"\t\"stderr\"\t\"[00:27:09 INF] <LSP Entry> Starting Marksman LSP server: {}\\n\"\r\n[ERROR][2024-04-30 00:27:17] .../vim/lsp/rpc.lua:752\t\"rpc\"\t\"/usr/bin/marksman\"\t\"stderr\"\t\"[00:27:17 INF] <LSP Entry> Starting Marksman LSP server: {}\\n\"\r\n[ERROR][2024-04-30 00:28:13] .../vim/lsp/rpc.lua:752\t\"rpc\"\t\"/usr/bin/marksman\"\t\"stderr\"\t\"[00:28:13 INF] <LSP Entry> Starting Marksman LSP server: {}\\n\"\r\n[ERROR][2024-04-30 00:35:52] .../vim/lsp/rpc.lua:752\t\"rpc\"\t\"/usr/bin/marksman\"\t\"stderr\"\t\"[00:35:51 INF] <LSP Entry> Starting Marksman LSP server: {}\\n\"\r\n[ERROR][2024-04-30 00:35:52] .../vim/lsp/rpc.lua:752\t\"rpc\"\t\"/usr/bin/marksman\"\t\"stderr\"\t\"[00:35:52 INF] <LSP Entry> Starting Marksman LSP server: {}\\n\"\r\n[ERROR][2024-04-30 00:35:54] .../vim/lsp/rpc.lua:752\t\"rpc\"\t\"/usr/bin/marksman\"\t\"stderr\"\t\"[00:35:54 INF] <LSP Entry> Starting Marksman LSP server: {}\\n\"\r\n[ERROR][2024-04-30 00:35:55] .../vim/lsp/rpc.lua:752\t\"rpc\"\t\"/usr/bin/marksman\"\t\"stderr\"\t\"[00:35:54 INF] <LSP Entry> Starting Marksman LSP server: {}\\n\"\r\n[ERROR][2024-04-30 00:35:55] .../vim/lsp/rpc.lua:752\t\"rpc\"\t\"/usr/bin/marksman\"\t\"stderr\"\t\"[00:35:54 INF] <LSP Entry> Starting Marksman LSP server: {}\\n\"\r\n[ERROR][2024-04-30 00:35:55] .../vim/lsp/rpc.lua:752\t\"rpc\"\t\"/usr/bin/marksman\"\t\"stderr\"\t\"[00:35:54 INF] <LSP Entry> Starting Marksman LSP server: {}\\n\"\r\n[ERROR][2024-04-30 00:35:57] .../vim/lsp/rpc.lua:752\t\"rpc\"\t\"/usr/bin/marksman\"\t\"stderr\"\t\"[00:35:56 INF] <LSP Entry> Starting Marksman LSP server: {}\\n\"\r\n[ERROR][2024-04-30 00:35:58] .../vim/lsp/rpc.lua:752\t\"rpc\"\t\"/usr/bin/marksman\"\t\"stderr\"\t\"[00:35:57 INF] <LSP Entry> Starting Marksman LSP server: {}\\n\"\r\n[ERROR][2024-04-30 00:36:24] ...m/lsp/client.lua:980\t\"LSP[marksman]\"\t\"on_error\"\t{  code = \"ON_EXIT_CALLBACK_ERROR\",  err = \"vim/_editor.lua:0: E5560: Vimscript function must not be called in a lua loop callback\"}\r\n[ERROR][2024-04-30 00:36:24] ...m/lsp/client.lua:980\t\"LSP[marksman]\"\t\"on_error\"\t{  code = \"ON_EXIT_CALLBACK_ERROR\",  err = \"vim/_editor.lua:0: E5560: Vimscript function must not be called in a lua loop callback\"}\r\n[ERROR][2024-04-30 00:36:24] ...m/lsp/client.lua:980\t\"LSP[marksman]\"\t\"on_error\"\t{  code = \"ON_EXIT_CALLBACK_ERROR\",  err = \"vim/_editor.lua:0: E5560: Vimscript function must not be called in a lua loop callback\"}\r\n[ERROR][2024-04-30 00:36:24] ...m/lsp/client.lua:980\t\"LSP[marksman]\"\t\"on_error\"\t{  code = \"ON_EXIT_CALLBACK_ERROR\",  err = \"vim/_editor.lua:0: E5560: Vimscript function must not be called in a lua loop callback\"}\r\n[ERROR][2024-04-30 00:36:24] ...m/lsp/client.lua:980\t\"LSP[marksman]\"\t\"on_error\"\t{  code = \"ON_EXIT_CALLBACK_ERROR\",  err = \"vim/_editor.lua:0: E5560: Vimscript function must not be called in a lua loop callback\"}\r\n[ERROR][2024-04-30 00:36:24] ...m/lsp/client.lua:980\t\"LSP[marksman]\"\t\"on_error\"\t{  code = \"ON_EXIT_CALLBACK_ERROR\",  err = \"vim/_editor.lua:0: E5560: Vimscript function must not be called in a lua loop callback\"}\r\n[ERROR][2024-04-30 00:36:24] ...m/lsp/client.lua:980\t\"LSP[marksman]\"\t\"on_error\"\t{  code = \"ON_EXIT_CALLBACK_ERROR\",  err = \"vim/_editor.lua:0: E5560: Vimscript function must not be called in a lua loop callback\"}\r\n[ERROR][2024-04-30 00:36:24] ...m/lsp/client.lua:980\t\"LSP[marksman]\"\t\"on_error\"\t{  code = \"ON_EXIT_CALLBACK_ERROR\",  err = \"vim/_editor.lua:0: E5560: Vimscript function must not be called in a lua loop callback\"}\r\n[ERROR][2024-04-30 00:36:40] ...m/lsp/client.lua:980\t\"LSP[rust-analyzer]\"\t\"on_error\"\t{  code = \"ON_EXIT_CALLBACK_ERROR\",  err = \"vim/_editor.lua:0: E5560: Vimscript function must not be called in a lua loop callback\"}\r\n[ERROR][2024-04-30 00:36:59] .../vim/lsp/rpc.lua:752\t\"rpc\"\t\"/usr/bin/marksman\"\t\"stderr\"\t\"[00:36:59 INF] <LSP Entry> Starting Marksman LSP server: {}\\n\"\r\n[ERROR][2024-04-30 00:36:59] .../vim/lsp/rpc.lua:752\t\"rpc\"\t\"/usr/bin/marksman\"\t\"stderr\"\t\"[00:36:59 INF] <LSP Entry> Starting Marksman LSP server: {}\\n\"\r\n```\r\n(I don't know what exactly is causing the loop callback error and it seems to sometimes not appear... I think it is not related since it seems to only occur after the first epoch reload I do, whereas the actual issue I'm reporting occurs all of the time - and yes, I have an epoch system for reloading my config... it's about 10x as horrifying as it sounds especially because I was rushing at the time :p)\r\n\r\n## `:LspStatus` (my version) - probably not useful, but putting it here anyway in case it is potentially useful in figuring out the underlying causes\r\n```\r\nClient ID [1] did not have a client!                                                                                                                                                              \r\nmarksman [ID: 112]                                                                                                                                                                                \r\n Status:                                                                                                                                                                                          \r\n  - Running                                                                                                                                                                                       \r\n Root Directory (config):                                                                                                                                                                         \r\n  - (none)                                                                                                                                                                                        \r\n Workspace Directories (initial config):                                                                                                                                                          \r\n  - (none)                                                                                                                                                                                        \r\n Workspace Directories (live):                                                                                                                                                                    \r\n  - (none)                                                                                                                                                                                        \r\n Attached Buffers                                                                                                                                                                                 \r\n  - [228] [INVALID BUFFER]                                                                                                                                                                        \r\nrust-analyzer [ID: 111]                                                                                                                                                                           \r\n Status:                                                                                                                                                                                          \r\n  - Running                                                                                                                                                                                       \r\n Root Directory (config):                                                                                                                                                                         \r\n  - [anon]/sapient/self/limg                                                                                                                                                           \r\n Workspace Directories (initial config):                                                                                                                                                          \r\n  - (none)                                                                                                                                                                                        \r\n Workspace Directories (live):                                                                                                                                                                    \r\n  - file://[anon]/sapient/self/limg                                                                                                                                                    \r\n Attached Buffers                                                                                                                                                                                 \r\n  - [1] [anon]/sapient/self/limg/src/lib.rs                                                                                                                                            \r\n  - [27] [anon]/sapient/self/limg/src/bin/limg.rs                                                                                                                                      \r\n  - [118] [anon]/sapient/self/limg/src/semantic_region.rs (current)                                                                                                                    \r\n  - [72] [anon]/sapient/self/limg/src/locator.rs                                                                                                                                       \r\nmarksman [ID: 113]                                                                                                                                                                                \r\n Status:                                                                                                                                                                                          \r\n  - Running                                                                                                                                                                                       \r\n Root Directory (config):                                                                                                                                                                         \r\n  - (none)                                                                                                                                                                                        \r\n Workspace Directories (initial config):                                                                                                                                                          \r\n  - (none)                                                                                                                                                                                        \r\n Workspace Directories (live):                                                                                                                                                                    \r\n  - (none)                                                                                                                                                                                        \r\n Attached Buffers                                                                                                                                                                                 \r\n  - [229] [INVALID BUFFER]                                                                                                                                                                        \r\n```\r\n\r\n### Expected behavior\r\n\r\nHandle invalid buffers gracefully in whatever way is most conceptually in line with how the LSP infrastructure is meant to work - I don't know the best place to put the fix, even if it is extremely simple (just a check with `vim.api.nvim_buf_is_valid` ^.^). It may also not be worth doing as it seems to be quite hard to produce without some pretty weird config stuff, although it might just be that I didn't put the language servers under enough pressure in my many attempts at `minimal_init.lua`? \r\n\r\nIt might be related to the todo in `runtime/vim/lsp.lua:70` relating to `resolve_bufnr` on scratch buffers, but I really just don't know \r\n\r\nFrom a practical perspective, fixing this issue could probably occur in two locations - the `rpc.request` call, and deep in the `_changetracker` init method - and it would be a very simple check. \r\n\r\n### Neovim version (nvim -v)\r\n\r\nNVIM v0.10.0-dev-2995+ga1550dbf0a (but applies in all versions with relevant code)\r\n\r\n### Language server name/version\r\n\r\nlua-language-server (3.8.3-1), marksman (2023_12_09-1), rust-analyzer (1.79.0-nightly), presumably others\r\n\r\n### Operating system/version\r\n\r\nArch Linux\r\n\r\n### Log file\r\n\r\n_No response_",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "> From a practical perspective, fixing this issue could probably occur in two locations - the `rpc.request` call, and deep in the `_changetracker` init method - and it would be a very simple check.\r\n\r\nSomething like that. \r\n\r\nPossibly related: https://github.com/neovim/neovim/issues/27383",
            "created_at": "2024-05-01T21:51:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/28575#issuecomment-2089192933",
            "id": 2089192933,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28575",
            "node_id": "IC_kwDOAPphoM58ho3l",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2089192933/reactions"
            },
            "updated_at": "2024-05-01T21:51:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2089192933",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comments": 1,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/28575/comments",
    "created_at": "2024-04-30T00:02:59Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/28575/events",
    "html_url": "https://github.com/neovim/neovim/issues/28575",
    "id": 2270234348,
    "labels": [
        {
            "color": "f9d0c4",
            "default": true,
            "description": "issues reporting wrong behavior",
            "id": 77997474,
            "name": "bug",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3NA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/28575/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 614,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk"
        },
        "description": "Low priority. Not planned for the current target, may be reassigned.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 534,
        "state": "open",
        "title": "backlog",
        "updated_at": "2024-05-06T09:58:15Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "I_kwDOAPphoM6HUQbs",
    "number": 28575,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/28575/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/28575/timeline",
    "title": "LSP: _changetracking.lua:154: Invalid buffer id: (race condition in 'initialize' RPC?)",
    "updated_at": "2024-05-01T21:51:46Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/28575",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/4654798?v=4",
        "events_url": "https://api.github.com/users/sapient-cogbag/events{/privacy}",
        "followers_url": "https://api.github.com/users/sapient-cogbag/followers",
        "following_url": "https://api.github.com/users/sapient-cogbag/following{/other_user}",
        "gists_url": "https://api.github.com/users/sapient-cogbag/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/sapient-cogbag",
        "id": 4654798,
        "login": "sapient-cogbag",
        "node_id": "MDQ6VXNlcjQ2NTQ3OTg=",
        "organizations_url": "https://api.github.com/users/sapient-cogbag/orgs",
        "received_events_url": "https://api.github.com/users/sapient-cogbag/received_events",
        "repos_url": "https://api.github.com/users/sapient-cogbag/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/sapient-cogbag/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sapient-cogbag/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/sapient-cogbag"
    }
}