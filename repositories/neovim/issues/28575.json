{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\r\n\r\n## Problem\r\nWhen using a system to automatically attach buffers to a language server that reinitializes itself, or responds to the `initialize` RPC query slowly, or something similar, if one of those buffers becomes invalid then the `_on_attach` method of LSP Clients produces an invalid buffer-number error. \r\n\r\nThis problem is compounded if for one reason or another the initialize query is repeatedly responded to or multiple buffers attached to a client become invalid over time (for example, if significant numbers of ephemeral preview buffers are attached to a language server and then removed in short succession), as all of these invalid buffers are provided to `_on_attach` on what I assume are repeated `initialize` responses from the LSP server, every time, creating a large error log spam which greatly interferes with typing >.<\r\n\r\nWhile this is most acute when using a system that happens to attach and invalidate ephemeral buffers, it is (again, as far as I can tell) a race condition that should apply in any case where an LSP server reinitializes itself after any of it's attached buffers are rendered invalid. However, in practice it seems extremely difficult to reproduce....\r\n\r\n```\r\nError executing vim.schedule lua callback: /usr/share/nvim/runtime/lua/vim/lsp/_changetracking.lua:154: Invalid buffer id: 44                                                                     \r\nstack traceback:                                                                                                                                                                                  \r\n        [C]: in function 'nvim_buf_get_name'                                                                                                                                                      \r\n        /usr/share/nvim/runtime/lua/vim/lsp/_changetracking.lua:154: in function 'init'                                                                                                           \r\n        /usr/share/nvim/runtime/lua/vim/lsp/client.lua:915: in function '_text_document_did_open_handler'                                                                                         \r\n        /usr/share/nvim/runtime/lua/vim/lsp/client.lua:950: in function '_on_attach'                                                                                                              \r\n        /usr/share/nvim/runtime/lua/vim/lsp/client.lua:623: in function ''                                                                                                                        \r\n        vim/_editor.lua: in function <vim/_editor.lua:0> \r\n```\r\n\r\n## Originating Code Path\r\n`runtime/lua/vim/lsp/client.lua:608` - this is inside a callback passed to `rpc.request` with method `initialize`\r\n```lua\r\n    -- If server is being restarted, make sure to re-attach to any previously attached buffers.\r\n    -- Save which buffers before on_init in case new buffers are attached.\r\n    local reattach_bufs = vim.deepcopy(self.attached_buffers) -- <=== This is the source of the invalid bufnrs \r\n\r\n    self:_run_callbacks(self._on_init_cbs, lsp.client_errors.ON_INIT_CALLBACK_ERROR, self, result)\r\n\r\n    for buf in pairs(reattach_bufs) do\r\n      self:_on_attach(buf) -- <==== this is the source of the error(s) when the bufnr is invalid, which we will traverse into\r\n    end\r\n```\r\n\r\n`runtime/lua/vim/lsp/client.lua:938` - this is the actual `_on_attach` method. The error comes from inside `_text_document_did_open_handler` method\r\n```lua\r\n--- @package\r\n--- Runs the on_attach function from the client's config if it was defined.\r\n--- @param bufnr integer Buffer number\r\nfunction Client:_on_attach(bufnr)\r\n  self:_text_document_did_open_handler(bufnr) -- <=== Source of error. \r\n\r\n  lsp._set_defaults(self, bufnr)\r\n\r\n  api.nvim_exec_autocmds('LspAttach', {\r\n    buffer = bufnr,\r\n    modeline = false,\r\n    data = { client_id = self.id },\r\n  })\r\n```\r\n\r\n`runtime/lua/vim/lsp/client.lua:902`\r\n```lua\r\n--- @package\r\n--- Default handler for the 'textDocument/didOpen' LSP notification.\r\n---\r\n--- @param bufnr integer Number of the buffer, or 0 for current\r\nfunction Client:_text_document_did_open_handler(bufnr)\r\n  changetracking.init(self, bufnr)  -- <=== Error comes from here. Note that further down there is some kind of bufnr validation\r\n  if not vim.tbl_get(self.server_capabilities, 'textDocumentSync', 'openClose') then\r\n    return\r\n  end\r\n  if not api.nvim_buf_is_loaded(bufnr) then\r\n    return\r\n  end\r\n  local filetype = vim.bo[bufnr].filetype\r\n```\r\n\r\n`runtime/lua/vim/lsp/_changetracking.lua:149`, inside the `M.init` module function. \r\n```lua\r\n  local buf_state = state.buffers[bufnr]\r\n  if buf_state then\r\n    buf_state.refs = buf_state.refs + 1\r\n  else\r\n    buf_state = {\r\n      name = api.nvim_buf_get_name(bufnr), -- <=== The real source of the error ^.^\r\n      lines = {},\r\n      lines_tmp = {},\r\n      pending_changes = {},\r\n      needs_flush = false,\r\n      refs = 1,\r\n    }\r\n    state.buffers[bufnr] = buf_state\r\n```\r\n\r\n### Steps to reproduce using \"nvim -u minimal_init.lua\"\r\n\r\nI could not get a minimal reproduction, unfortunately. I spent many many hours trying. However, minimal reproductions of race conditions are rather difficult. In particular, I've failed to get a minimal config to get an invalid bufnr into the `attached_buffers` of any LSP server, even though I know it is possible because my custom LSP setup (which is a bit of an abomination at this point...) has a status command which I modified to report on that (among other things like listing files with each language server client, filtering by language, etc.)\r\n\r\n## My final failed attempt at `minimal_init.lua`\r\n```lua\r\nlocal pattern = 'lua'\r\nlocal cmd = { 'lua-language-server' }\r\n-- Add files/folders here that indicate the root of a project\r\nlocal root_markers = { '.git', '.editorconfig' }\r\n-- Change to table with settings if required\r\nlocal settings = vim.empty_dict()\r\n\r\n-- LSP that we want to directly attach to\r\nlocal client_id = nil\r\n\r\n-- Files to open\r\n--\r\n-- First is the one put in a buffer to immediately wipe it out, second is to induce a re-initialize\r\nlocal bufhidewipe_file = \"dummy-lua.lua\"\r\nlocal reinit_trigger_file = \"dummy-lua-two.lua\"\r\n\r\n-- Start the LSP with the bufnr, using the filename as the location...\r\n--\r\n-- Bufnr may not actually be a standard buffer constructed from something like `:edit` ^.^\r\nlocal function do_start(bufnr, fname)\r\n\tlocal match = vim.fs.find(root_markers, { path = fname, upward = true })[1]\r\n\tlocal root_dir = match and vim.fn.fnamemodify(match, ':p:h') or nil\r\n\treturn vim.lsp.start({\r\n\t\tname = 'lua-language-server',\r\n\t\tcmd = cmd,\r\n\t\troot_dir = root_dir,\r\n\t\tsettings = settings,\t\r\n\t}, { bufnr = bufnr })\r\nend\r\n\r\n--[[\r\nvim.api.nvim_create_autocmd('FileType', {\r\n\tpattern = pattern,\r\n\tcallback = function(args)\r\n\t\tclient_id = do_start(0, args.file)\r\n\tend\r\n})]]--\r\n\r\n\r\n\r\n-- Open a file and heuristically locate it's buffer number\r\n--\r\n-- Note that this will totally break with duplicate files in different current working directories :p\r\n-- It's just intended to be a very quick method of getting buffer numbers to work with :)\r\n--\r\n-- Optionally, specify `preview = true` to open in the preview window....\r\nlocal function open_buffer_via_name(filename, preview)\r\n\t-- Open file in split.\r\n\tif not preview then\r\n\t\tvim.cmd.vsplit(filename)\r\n\telse\r\n\t\tvim.cmd.pedit(filename)\r\n\tend\r\n\t-- We need to find the bufnr for this buffer... can't find a way to actually directly create/edit a buffer in a way that gets the bufnr >.<\r\n\tlocal test_bufnr = nil\r\n\tfor _, bufnr in ipairs(vim.api.nvim_list_bufs()) do\r\n\t\tlocal name = vim.api.nvim_buf_get_name(bufnr)\r\n\t\t-- Plain search\r\n\t\tif string.find(name, filename, 1, true) ~= nil then\r\n\t\t\ttest_bufnr = bufnr\r\n\t\tend\r\n\tend\r\n\treturn test_bufnr\r\nend\r\n\r\n-- Load a file into a scratch buffer. Will still have the filename as the name. Returns the bufnr\r\n-- also allows you to set a filetype. Also reads contents from the file in question into the buffer.\r\n--\r\n-- This sets the scratch buffer's `bufhidden` option to `wipe`, which will wipe the buffer when it's not in a window\r\n-- Importantly, this doesn't trigger autocommands! :p (i think this might be related).\r\n--\r\n-- It also creates a window (to prevent immediate wipe).\r\n--\r\n-- Returns the scratch buffer id as well as the scratch window id. The important thing is to destroy the buffer by hiding\r\n-- the window and not deleting it directly ^.^\r\n\r\n-- is in fzf-lua, which suggests this may be related to lsp??\r\nlocal function open_scratch_buffer_via_name(filename, set_filetype)\r\n\t-- Read data into the buffer.\r\n\t--\r\n\t-- We read before creating the buffer so if there are errors no extranuous buffers\r\n\t-- are left hanging around :p\r\n\tlocal filelines = {}\r\n\tfor l in io.lines(filename) do\r\n\t\t-- one-based indices ðŸ¤¢\r\n\t\tfilelines[#filelines + 1] = l\r\n\tend\r\n\tlocal scratch_buffer = vim.api.nvim_create_buf(false, true)\r\n\tvim.api.nvim_buf_set_lines(scratch_buffer, 0, 1, false, filelines)\r\n\tvim.api.nvim_buf_set_name(scratch_buffer, filename)\r\n\t-- This is probably the important bit. FZF sets `bufhidden=wipe` which does NOT CALL AUTOCMDS\r\n\tvim.api.nvim_set_option_value(\"bufhidden\", \"wipe\", { buf = scratch_buffer })\r\n\tvim.api.nvim_set_option_value(\"filetype\", set_filetype, { buf = scratch_buffer })\r\n\r\n\t-- Create the window. Doesn't need to be float or anything :p\r\n\t-- Automatically enter it.\r\n\tlocal scratch_window = vim.api.nvim_open_win(scratch_buffer, true, {\r\n\t\trelative = \"cursor\",\r\n\t\trow = 0,\r\n\t\tcol = 0,\r\n\t\theight = 40,\r\n\t\twidth = 30,\r\n\t\tnoautocmd = true,\r\n\t\tborder = \"rounded\"\r\n\t})\r\n\treturn scratch_buffer, scratch_window\r\nend\r\n\r\n\r\nvim.api.nvim_create_user_command(\"ReproduceRaceCondition\", function(args) \r\n\tlocal bufhidewipe_bufnr, bufhidewipe_win_id = open_scratch_buffer_via_name(bufhidewipe_file, \"lua\")\r\n\tlocal ephemeral_client_id = do_start(bufhidewipe_bufnr, bufhidewipe_file)\r\n\tvim.defer_fn(function()\r\n\t\tvim.api.nvim_win_close(bufhidewipe_win_id, true)\r\n\t\t--[[vim.defer_fn(function() \r\n\t\t\tlocal client = vim.lsp.get_client_by_id(ephemeral_client_id)\r\n\t\t\tclient:stop()\r\n\t\tend)]]\r\n\r\n\t\tvim.defer_fn(function()\r\n\t\t\tlocal nonephemeral_bufnr = open_buffer_via_name(bufhidewipe_file, false)\r\n\t\t\tvim.lsp.buf_attach_client(nonephemeral_bufnr, ephemeral_client_id)\r\n\t\tend, 100)\r\n\tend, 50)\r\nend, {\r\n\tnargs = 0\r\n})\r\n```\r\n## Folder Arrangement\r\nJust placing `minimal_init.lua` in a folder with an empty `.editorfile`, and `dummy-lua.lua` (the `.editorfile` is for lsp sharing) will get the configuration i was using while writing this failed minimal config.\r\n\r\n## Actual Setup Behaviour\r\nIt's probably worth noting that the actual setup I have is more complex than this in certain ways that may be relevant. Importantly, the main LSP servers that I see in my listing (`:LspStatus`) command with invalid bufnrs is `marksman` (the markdown LSP I use). \r\n\r\nMy suspicion is that somehow the autocmd I have that automatically produces a popup when typing (which is constantly being refreshed) manages to trigger this race condition. But it also seems to occur more after I use preview windows with `fzf-lua` if they are scrolled through very rapidly (I use no plugins for the popup/documentation aspect, so it's not an fzf-lua thing). However, this is not `marksman` stuff, even if I havent seen it in any kind of `:LspStatus` listing yet :/\r\n\r\n## Logs\r\nI have looked in logs, but there doesn't seem to be much useful there (though there are a signifcant number of errors from `marksman` and a few from my `lua-language-server` in some of the other earlier loglines. Still:\r\n```\r\n[START][2024-04-30 00:08:27] LSP logging initiated\r\n[ERROR][2024-04-30 00:08:27] .../vim/lsp/rpc.lua:752\t\"rpc\"\t\"/usr/bin/marksman\"\t\"stderr\"\t\"[00:08:26 INF] <LSP Entry> Starting Marksman LSP server: {}\\n\"\r\n[ERROR][2024-04-30 00:26:00] .../vim/lsp/rpc.lua:752\t\"rpc\"\t\"/usr/bin/marksman\"\t\"stderr\"\t\"[00:26:00 INF] <LSP Entry> Starting Marksman LSP server: {}\\n\"\r\n[ERROR][2024-04-30 00:26:36] .../vim/lsp/rpc.lua:752\t\"rpc\"\t\"/usr/bin/marksman\"\t\"stderr\"\t\"[00:26:35 INF] <LSP Entry> Starting Marksman LSP server: {}\\n\"\r\n[ERROR][2024-04-30 00:27:09] .../vim/lsp/rpc.lua:752\t\"rpc\"\t\"/usr/bin/marksman\"\t\"stderr\"\t\"[00:27:09 INF] <LSP Entry> Starting Marksman LSP server: {}\\n\"\r\n[ERROR][2024-04-30 00:27:17] .../vim/lsp/rpc.lua:752\t\"rpc\"\t\"/usr/bin/marksman\"\t\"stderr\"\t\"[00:27:17 INF] <LSP Entry> Starting Marksman LSP server: {}\\n\"\r\n[ERROR][2024-04-30 00:28:13] .../vim/lsp/rpc.lua:752\t\"rpc\"\t\"/usr/bin/marksman\"\t\"stderr\"\t\"[00:28:13 INF] <LSP Entry> Starting Marksman LSP server: {}\\n\"\r\n[ERROR][2024-04-30 00:35:52] .../vim/lsp/rpc.lua:752\t\"rpc\"\t\"/usr/bin/marksman\"\t\"stderr\"\t\"[00:35:51 INF] <LSP Entry> Starting Marksman LSP server: {}\\n\"\r\n[ERROR][2024-04-30 00:35:52] .../vim/lsp/rpc.lua:752\t\"rpc\"\t\"/usr/bin/marksman\"\t\"stderr\"\t\"[00:35:52 INF] <LSP Entry> Starting Marksman LSP server: {}\\n\"\r\n[ERROR][2024-04-30 00:35:54] .../vim/lsp/rpc.lua:752\t\"rpc\"\t\"/usr/bin/marksman\"\t\"stderr\"\t\"[00:35:54 INF] <LSP Entry> Starting Marksman LSP server: {}\\n\"\r\n[ERROR][2024-04-30 00:35:55] .../vim/lsp/rpc.lua:752\t\"rpc\"\t\"/usr/bin/marksman\"\t\"stderr\"\t\"[00:35:54 INF] <LSP Entry> Starting Marksman LSP server: {}\\n\"\r\n[ERROR][2024-04-30 00:35:55] .../vim/lsp/rpc.lua:752\t\"rpc\"\t\"/usr/bin/marksman\"\t\"stderr\"\t\"[00:35:54 INF] <LSP Entry> Starting Marksman LSP server: {}\\n\"\r\n[ERROR][2024-04-30 00:35:55] .../vim/lsp/rpc.lua:752\t\"rpc\"\t\"/usr/bin/marksman\"\t\"stderr\"\t\"[00:35:54 INF] <LSP Entry> Starting Marksman LSP server: {}\\n\"\r\n[ERROR][2024-04-30 00:35:57] .../vim/lsp/rpc.lua:752\t\"rpc\"\t\"/usr/bin/marksman\"\t\"stderr\"\t\"[00:35:56 INF] <LSP Entry> Starting Marksman LSP server: {}\\n\"\r\n[ERROR][2024-04-30 00:35:58] .../vim/lsp/rpc.lua:752\t\"rpc\"\t\"/usr/bin/marksman\"\t\"stderr\"\t\"[00:35:57 INF] <LSP Entry> Starting Marksman LSP server: {}\\n\"\r\n[ERROR][2024-04-30 00:36:24] ...m/lsp/client.lua:980\t\"LSP[marksman]\"\t\"on_error\"\t{  code = \"ON_EXIT_CALLBACK_ERROR\",  err = \"vim/_editor.lua:0: E5560: Vimscript function must not be called in a lua loop callback\"}\r\n[ERROR][2024-04-30 00:36:24] ...m/lsp/client.lua:980\t\"LSP[marksman]\"\t\"on_error\"\t{  code = \"ON_EXIT_CALLBACK_ERROR\",  err = \"vim/_editor.lua:0: E5560: Vimscript function must not be called in a lua loop callback\"}\r\n[ERROR][2024-04-30 00:36:24] ...m/lsp/client.lua:980\t\"LSP[marksman]\"\t\"on_error\"\t{  code = \"ON_EXIT_CALLBACK_ERROR\",  err = \"vim/_editor.lua:0: E5560: Vimscript function must not be called in a lua loop callback\"}\r\n[ERROR][2024-04-30 00:36:24] ...m/lsp/client.lua:980\t\"LSP[marksman]\"\t\"on_error\"\t{  code = \"ON_EXIT_CALLBACK_ERROR\",  err = \"vim/_editor.lua:0: E5560: Vimscript function must not be called in a lua loop callback\"}\r\n[ERROR][2024-04-30 00:36:24] ...m/lsp/client.lua:980\t\"LSP[marksman]\"\t\"on_error\"\t{  code = \"ON_EXIT_CALLBACK_ERROR\",  err = \"vim/_editor.lua:0: E5560: Vimscript function must not be called in a lua loop callback\"}\r\n[ERROR][2024-04-30 00:36:24] ...m/lsp/client.lua:980\t\"LSP[marksman]\"\t\"on_error\"\t{  code = \"ON_EXIT_CALLBACK_ERROR\",  err = \"vim/_editor.lua:0: E5560: Vimscript function must not be called in a lua loop callback\"}\r\n[ERROR][2024-04-30 00:36:24] ...m/lsp/client.lua:980\t\"LSP[marksman]\"\t\"on_error\"\t{  code = \"ON_EXIT_CALLBACK_ERROR\",  err = \"vim/_editor.lua:0: E5560: Vimscript function must not be called in a lua loop callback\"}\r\n[ERROR][2024-04-30 00:36:24] ...m/lsp/client.lua:980\t\"LSP[marksman]\"\t\"on_error\"\t{  code = \"ON_EXIT_CALLBACK_ERROR\",  err = \"vim/_editor.lua:0: E5560: Vimscript function must not be called in a lua loop callback\"}\r\n[ERROR][2024-04-30 00:36:40] ...m/lsp/client.lua:980\t\"LSP[rust-analyzer]\"\t\"on_error\"\t{  code = \"ON_EXIT_CALLBACK_ERROR\",  err = \"vim/_editor.lua:0: E5560: Vimscript function must not be called in a lua loop callback\"}\r\n[ERROR][2024-04-30 00:36:59] .../vim/lsp/rpc.lua:752\t\"rpc\"\t\"/usr/bin/marksman\"\t\"stderr\"\t\"[00:36:59 INF] <LSP Entry> Starting Marksman LSP server: {}\\n\"\r\n[ERROR][2024-04-30 00:36:59] .../vim/lsp/rpc.lua:752\t\"rpc\"\t\"/usr/bin/marksman\"\t\"stderr\"\t\"[00:36:59 INF] <LSP Entry> Starting Marksman LSP server: {}\\n\"\r\n```\r\n(I don't know what exactly is causing the loop callback error and it seems to sometimes not appear... I think it is not related since it seems to only occur after the first epoch reload I do, whereas the actual issue I'm reporting occurs all of the time - and yes, I have an epoch system for reloading my config... it's about 10x as horrifying as it sounds especially because I was rushing at the time :p)\r\n\r\n## `:LspStatus` (my version) - probably not useful, but putting it here anyway in case it is potentially useful in figuring out the underlying causes\r\n```\r\nClient ID [1] did not have a client!                                                                                                                                                              \r\nmarksman [ID: 112]                                                                                                                                                                                \r\n Status:                                                                                                                                                                                          \r\n  - Running                                                                                                                                                                                       \r\n Root Directory (config):                                                                                                                                                                         \r\n  - (none)                                                                                                                                                                                        \r\n Workspace Directories (initial config):                                                                                                                                                          \r\n  - (none)                                                                                                                                                                                        \r\n Workspace Directories (live):                                                                                                                                                                    \r\n  - (none)                                                                                                                                                                                        \r\n Attached Buffers                                                                                                                                                                                 \r\n  - [228] [INVALID BUFFER]                                                                                                                                                                        \r\nrust-analyzer [ID: 111]                                                                                                                                                                           \r\n Status:                                                                                                                                                                                          \r\n  - Running                                                                                                                                                                                       \r\n Root Directory (config):                                                                                                                                                                         \r\n  - [anon]/sapient/self/limg                                                                                                                                                           \r\n Workspace Directories (initial config):                                                                                                                                                          \r\n  - (none)                                                                                                                                                                                        \r\n Workspace Directories (live):                                                                                                                                                                    \r\n  - file://[anon]/sapient/self/limg                                                                                                                                                    \r\n Attached Buffers                                                                                                                                                                                 \r\n  - [1] [anon]/sapient/self/limg/src/lib.rs                                                                                                                                            \r\n  - [27] [anon]/sapient/self/limg/src/bin/limg.rs                                                                                                                                      \r\n  - [118] [anon]/sapient/self/limg/src/semantic_region.rs (current)                                                                                                                    \r\n  - [72] [anon]/sapient/self/limg/src/locator.rs                                                                                                                                       \r\nmarksman [ID: 113]                                                                                                                                                                                \r\n Status:                                                                                                                                                                                          \r\n  - Running                                                                                                                                                                                       \r\n Root Directory (config):                                                                                                                                                                         \r\n  - (none)                                                                                                                                                                                        \r\n Workspace Directories (initial config):                                                                                                                                                          \r\n  - (none)                                                                                                                                                                                        \r\n Workspace Directories (live):                                                                                                                                                                    \r\n  - (none)                                                                                                                                                                                        \r\n Attached Buffers                                                                                                                                                                                 \r\n  - [229] [INVALID BUFFER]                                                                                                                                                                        \r\n```\r\n\r\n### Expected behavior\r\n\r\nHandle invalid buffers gracefully in whatever way is most conceptually in line with how the LSP infrastructure is meant to work - I don't know the best place to put the fix, even if it is extremely simple (just a check with `vim.api.nvim_buf_is_valid` ^.^). It may also not be worth doing as it seems to be quite hard to produce without some pretty weird config stuff, although it might just be that I didn't put the language servers under enough pressure in my many attempts at `minimal_init.lua`? \r\n\r\nIt might be related to the todo in `runtime/vim/lsp.lua:70` relating to `resolve_bufnr` on scratch buffers, but I really just don't know \r\n\r\nFrom a practical perspective, fixing this issue could probably occur in two locations - the `rpc.request` call, and deep in the `_changetracker` init method - and it would be a very simple check. \r\n\r\n### Neovim version (nvim -v)\r\n\r\nNVIM v0.10.0-dev-2995+ga1550dbf0a (but applies in all versions with relevant code)\r\n\r\n### Language server name/version\r\n\r\nlua-language-server (3.8.3-1), marksman (2023_12_09-1), rust-analyzer (1.79.0-nightly), presumably others\r\n\r\n### Operating system/version\r\n\r\nArch Linux\r\n\r\n### Log file\r\n\r\n_No response_",
    "closed_at": "2024-05-27T15:06:04Z",
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "> From a practical perspective, fixing this issue could probably occur in two locations - the `rpc.request` call, and deep in the `_changetracker` init method - and it would be a very simple check.\r\n\r\nSomething like that. \r\n\r\nPossibly related: https://github.com/neovim/neovim/issues/27383",
            "created_at": "2024-05-01T21:51:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/28575#issuecomment-2089192933",
            "id": 2089192933,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28575",
            "node_id": "IC_kwDOAPphoM58ho3l",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2089192933/reactions"
            },
            "updated_at": "2024-05-01T21:51:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2089192933",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Assuming this is fixed by https://github.com/neovim/neovim/pull/28875",
            "created_at": "2024-05-21T22:54:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/28575#issuecomment-2123561657",
            "id": 2123561657,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28575",
            "node_id": "IC_kwDOAPphoM5-kvq5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2123561657/reactions"
            },
            "updated_at": "2024-05-21T22:54:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2123561657",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@justinmk I'm not sure if this is the same bug.",
            "created_at": "2024-05-21T23:29:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/28575#issuecomment-2123590539",
            "id": 2123590539,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28575",
            "node_id": "IC_kwDOAPphoM5-k2uL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2123590539/reactions"
            },
            "updated_at": "2024-05-21T23:29:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2123590539",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/943597?v=4",
                "events_url": "https://api.github.com/users/icholy/events{/privacy}",
                "followers_url": "https://api.github.com/users/icholy/followers",
                "following_url": "https://api.github.com/users/icholy/following{/other_user}",
                "gists_url": "https://api.github.com/users/icholy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/icholy",
                "id": 943597,
                "login": "icholy",
                "node_id": "MDQ6VXNlcjk0MzU5Nw==",
                "organizations_url": "https://api.github.com/users/icholy/orgs",
                "received_events_url": "https://api.github.com/users/icholy/received_events",
                "repos_url": "https://api.github.com/users/icholy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/icholy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/icholy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/icholy"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@sapient-cogbag I've been using this to simulate misbehaving LSPs https://github.com/icholy/dummylsp . For your case, it sounds like you'll want to put a `time.Sleep` in the `Initialize` [method](https://github.com/icholy/dummylsp/blob/58237f3bb1f3964733891bb06cd5ddf3da51f0a0/main.go#L33). Here's a minimal example of attaching it to a buffer:\r\n\r\n``` lua\r\nlocal dummy = vim.lsp.start_client({ name = \"dummy\", cmd = { \"dummylsp\" } })\r\n\r\nvim.api.nvim_create_autocmd(\"FileType\", {\r\n\tpattern = { \"go\" },\r\n\tcallback = function()\r\n\t\tvim.lsp.buf_attach_client(0, dummy)\r\n\tend\r\n})\r\n```",
            "created_at": "2024-05-22T00:30:25Z",
            "html_url": "https://github.com/neovim/neovim/issues/28575#issuecomment-2123642681",
            "id": 2123642681,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28575",
            "node_id": "IC_kwDOAPphoM5-lDc5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2123642681/reactions"
            },
            "updated_at": "2024-05-22T15:24:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2123642681",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/943597?v=4",
                "events_url": "https://api.github.com/users/icholy/events{/privacy}",
                "followers_url": "https://api.github.com/users/icholy/followers",
                "following_url": "https://api.github.com/users/icholy/following{/other_user}",
                "gists_url": "https://api.github.com/users/icholy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/icholy",
                "id": 943597,
                "login": "icholy",
                "node_id": "MDQ6VXNlcjk0MzU5Nw==",
                "organizations_url": "https://api.github.com/users/icholy/orgs",
                "received_events_url": "https://api.github.com/users/icholy/received_events",
                "repos_url": "https://api.github.com/users/icholy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/icholy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/icholy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/icholy"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "You can consistently get a bad buffer into `reattach_bufs` by deleting the buffer in the `on_init` callback.\r\n\r\n``` lua\r\nlocal dummy = vim.lsp.start_client({\r\n\tname = \"dummy\",\r\n\tcmd = { \"dummylsp\" },\r\n\ton_init = function()\r\n\t\tvim.api.nvim_buf_delete(0, {})\r\n\tend\r\n})\r\n\r\nvim.api.nvim_create_autocmd(\"FileType\", {\r\n\tpattern = { \"go\" },\r\n\tcallback = function()\r\n\t\tvim.lsp.buf_attach_client(0, dummy)\r\n\tend\r\n})\r\n```\r\n\r\n~~This doesn't cause the reported error though. The `nvim_buf_get_name` and `nvim_buf_get_lines` succeed. The actual buffer deletion appears to be deferred:~~\r\n\r\n**edit:** using `nvim_buf_delete` makes it fail. ",
            "created_at": "2024-05-22T15:00:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/28575#issuecomment-2125024071",
            "id": 2125024071,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28575",
            "node_id": "IC_kwDOAPphoM5-qUtH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2125024071/reactions"
            },
            "updated_at": "2024-05-22T15:13:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2125024071",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/943597?v=4",
                "events_url": "https://api.github.com/users/icholy/events{/privacy}",
                "followers_url": "https://api.github.com/users/icholy/followers",
                "following_url": "https://api.github.com/users/icholy/following{/other_user}",
                "gists_url": "https://api.github.com/users/icholy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/icholy",
                "id": 943597,
                "login": "icholy",
                "node_id": "MDQ6VXNlcjk0MzU5Nw==",
                "organizations_url": "https://api.github.com/users/icholy/orgs",
                "received_events_url": "https://api.github.com/users/icholy/received_events",
                "repos_url": "https://api.github.com/users/icholy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/icholy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/icholy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/icholy"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@sapient-cogbag can you test out https://github.com/neovim/neovim/pull/28914 ?",
            "created_at": "2024-05-22T15:42:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/28575#issuecomment-2125118959",
            "id": 2125118959,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28575",
            "node_id": "IC_kwDOAPphoM5-qr3v",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2125118959/reactions"
            },
            "updated_at": "2024-05-22T15:42:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2125118959",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/943597?v=4",
                "events_url": "https://api.github.com/users/icholy/events{/privacy}",
                "followers_url": "https://api.github.com/users/icholy/followers",
                "following_url": "https://api.github.com/users/icholy/following{/other_user}",
                "gists_url": "https://api.github.com/users/icholy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/icholy",
                "id": 943597,
                "login": "icholy",
                "node_id": "MDQ6VXNlcjk0MzU5Nw==",
                "organizations_url": "https://api.github.com/users/icholy/orgs",
                "received_events_url": "https://api.github.com/users/icholy/received_events",
                "repos_url": "https://api.github.com/users/icholy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/icholy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/icholy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/icholy"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> `runtime/lua/vim/lsp/client.lua:902`\r\n> \r\n> ```lua\r\n> --- @package\r\n> --- Default handler for the 'textDocument/didOpen' LSP notification.\r\n> ---\r\n> --- @param bufnr integer Number of the buffer, or 0 for current\r\n> function Client:_text_document_did_open_handler(bufnr)\r\n>   changetracking.init(self, bufnr)  -- <=== Error comes from here. Note that further down there is some kind of bufnr validation\r\n>   if not vim.tbl_get(self.server_capabilities, 'textDocumentSync', 'openClose') then\r\n>     return\r\n>   end\r\n>   if not api.nvim_buf_is_loaded(bufnr) then\r\n>     return\r\n>   end\r\n>   local filetype = vim.bo[bufnr].filetype\r\n> ```\r\n> \r\n> `runtime/lua/vim/lsp/_changetracking.lua:149`, inside the `M.init` module function.\r\n> \r\n> ```lua\r\n>   local buf_state = state.buffers[bufnr]\r\n>   if buf_state then\r\n>     buf_state.refs = buf_state.refs + 1\r\n>   else\r\n>     buf_state = {\r\n>       name = api.nvim_buf_get_name(bufnr), -- <=== The real source of the error ^.^\r\n>       lines = {},\r\n>       lines_tmp = {},\r\n>       pending_changes = {},\r\n>       needs_flush = false,\r\n>       refs = 1,\r\n>     }\r\n>     state.buffers[bufnr] = buf_state\r\n> ```\r\n\r\nQuestion: if `changetracking.init` is the culprit who doesn't correctly validate the buffer, wouldn't it suffice to perform a check earlier?\r\n\r\n```diff\r\n+   if not api.nvim_buf_is_loaded(bufnr) then\r\n+     return\r\n+   end\r\n    changetracking.init(self, bufnr)  -- <=== Error comes from here. Note that further down there is some kind of bufnr validation\r\n    if not vim.tbl_get(self.server_capabilities, 'textDocumentSync', 'openClose') then\r\n      return\r\n    end\r\n-   if not api.nvim_buf_is_loaded(bufnr) then\r\n-     return\r\n-   end\r\n    local filetype = vim.bo[bufnr].filetype\r\n```\r\nor having such a logic inside `changetracking.init` so that it doesn't work for a buffer that is no longer valid?",
            "created_at": "2024-05-22T19:05:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/28575#issuecomment-2125553529",
            "id": 2125553529,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28575",
            "node_id": "IC_kwDOAPphoM5-sV95",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2125553529/reactions"
            },
            "updated_at": "2024-05-22T19:05:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2125553529",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@wookayin see https://github.com/neovim/neovim/pull/28913\r\n\r\nTLDR: right now it's failing at the `changetracking.init`, but if we put a guard in `_text_document_did_open_handler`, then `_on_attach` will just fail further down because it's still dealing with a bad buffer number.",
            "created_at": "2024-05-22T19:09:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/28575#issuecomment-2125560821",
            "id": 2125560821,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28575",
            "node_id": "IC_kwDOAPphoM5-sXv1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2125560821/reactions"
            },
            "updated_at": "2024-05-22T19:13:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2125560821",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/943597?v=4",
                "events_url": "https://api.github.com/users/icholy/events{/privacy}",
                "followers_url": "https://api.github.com/users/icholy/followers",
                "following_url": "https://api.github.com/users/icholy/following{/other_user}",
                "gists_url": "https://api.github.com/users/icholy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/icholy",
                "id": 943597,
                "login": "icholy",
                "node_id": "MDQ6VXNlcjk0MzU5Nw==",
                "organizations_url": "https://api.github.com/users/icholy/orgs",
                "received_events_url": "https://api.github.com/users/icholy/received_events",
                "repos_url": "https://api.github.com/users/icholy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/icholy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/icholy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/icholy"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@sapient-cogbag please report back if the issue persist after applying #28914",
            "created_at": "2024-05-23T14:09:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/28575#issuecomment-2127224982",
            "id": 2127224982,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28575",
            "node_id": "IC_kwDOAPphoM5-yuCW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2127224982/reactions"
            },
            "updated_at": "2024-05-23T14:09:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2127224982",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/943597?v=4",
                "events_url": "https://api.github.com/users/icholy/events{/privacy}",
                "followers_url": "https://api.github.com/users/icholy/followers",
                "following_url": "https://api.github.com/users/icholy/following{/other_user}",
                "gists_url": "https://api.github.com/users/icholy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/icholy",
                "id": 943597,
                "login": "icholy",
                "node_id": "MDQ6VXNlcjk0MzU5Nw==",
                "organizations_url": "https://api.github.com/users/icholy/orgs",
                "received_events_url": "https://api.github.com/users/icholy/received_events",
                "repos_url": "https://api.github.com/users/icholy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/icholy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/icholy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/icholy"
            }
        },
        {
            "author_association": "NONE",
            "body": "Sorry for the delay in reply, I appreciate the effort that has gone into solving this.\r\n\r\nI just installed the latest neovim `master` branch on my machine (which includes the patch), and the issue does still persist (with the same error message as previously documented). \r\n\r\nWhen I examine `:LspStatus!` now, I see a significant number of listings for language server processes with only a single (invalid, now deleted) buffer number still attached to them. The language server in this case is `marksman`, which makes sense since the main trigger for this issue for me is my autohover system which is of course creating large numbers of markdown buffers and then destroying them. The actual hover window is not created by any plugin, only the native neovim LSP hover system (`vim.lsp.buf.hover()` with some custom config and keybinds). The hover opts are:\r\n```lua\r\n    local hover_opts = {\r\n        close_events = { \"InsertLeavePre\", \"InsertEnter\" },\r\n        focus = false,\r\n        border = \"rounded\",\r\n        max_height = 20\r\n    }\r\n```\r\n\r\nSomehow when the buffers are deleted they aren't getting detached from the language server when they're destroyed, which means that the check for `attached_buffers[bufnr]` seems not to work. I don't know how this is occurring >.<\r\n\r\nI see: **https://github.com/neovim/neovim/pull/28913**, but I don't think it was merged to `master`, as I don't see any guards inside my version of `changetracking.init` (and as was mentioned it won't completely solve the issue, and it probably doesn't deal with the fundamental architectural issue). I made sure to check that #28914 was present in the lua files for my neovim version (pulled from the AUR with some modifications to make the PKGBUILD work ^.^). \r\n\r\nNoticing that the buffer was not successfully detached, I also looked at the things I call on `LspDetach`, and this issue might be related to errors that occur during `LspDetach` callbacks or something associated with them? Though i have a system that explicitly manages all `LspDetach` callbacks and ensures that buffers are valid before the actual callbacks are called, in all cases (this system is actually designed so that I can call things only when the first LS is attached and the last LS is detached rather than for every LS attach/detach, but I put a guard in there a while back ^.^ - I checked every single reference to `LspDetach` in my config). Note though that some of my deletion/detach callbacks use `vim.schedule` for functions that might produce errors, which could be related.\r\n\r\nIf a language server then tries to send an initialize response (either the initial one or some kind of repeat) after some sort of failed detach, then that could still replicate the issue, especially if the failure to detach also means that the language server process isn't auto-stopped by someone's config when nothing is attached.\r\n\r\nMy config does not auto-stop any language servers though, unless I reload my config or manually stop them with my version of `:LspStop` or `:LspStop!`, anyhow.\r\n\r\nEither that, or buffers that get deleted in certain ways don't invoke the detach machinery and, if a language server responds to `initialize` after that, it causes the problem. Just using `:bdelete` definitely properly detaches, though. ",
            "created_at": "2024-05-25T02:25:11Z",
            "html_url": "https://github.com/neovim/neovim/issues/28575#issuecomment-2130673199",
            "id": 2130673199,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28575",
            "node_id": "IC_kwDOAPphoM5-_34v",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2130673199/reactions"
            },
            "updated_at": "2024-05-25T02:25:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2130673199",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4654798?v=4",
                "events_url": "https://api.github.com/users/sapient-cogbag/events{/privacy}",
                "followers_url": "https://api.github.com/users/sapient-cogbag/followers",
                "following_url": "https://api.github.com/users/sapient-cogbag/following{/other_user}",
                "gists_url": "https://api.github.com/users/sapient-cogbag/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sapient-cogbag",
                "id": 4654798,
                "login": "sapient-cogbag",
                "node_id": "MDQ6VXNlcjQ2NTQ3OTg=",
                "organizations_url": "https://api.github.com/users/sapient-cogbag/orgs",
                "received_events_url": "https://api.github.com/users/sapient-cogbag/received_events",
                "repos_url": "https://api.github.com/users/sapient-cogbag/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sapient-cogbag/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sapient-cogbag/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sapient-cogbag"
            }
        },
        {
            "author_association": "NONE",
            "body": "Also, I explicitly (myself) add an autocmd to all buffers that manually detaches buffers from clients when they are deleted (which actually doesn't check for buffer validity). This may also be related.\r\n\r\nThe relevant code is as follows:\r\n```lua\r\n    local augid = vim.api.nvim_create_augroup(\"lsp-client-detach-on-buffer-deletion\", { clear = true })\r\n\r\n    vim.api.nvim_create_autocmd({ \"LspAttach\" }, {\r\n        group = augid,\r\n        desc = \"Add autocmds to attached buffers so their deletion detaches them from the LSP client\",\r\n        callback = function(event)\r\n            local bufnr = event.buf\r\n            local client = vim.lsp.get_client_by_id(event.data.client_id)\r\n            if client ~= nil then\r\n                -- Create the buffer-local autocmd\r\n                --\r\n                -- `BufUnload` is not something ok for this as unloading seems to be quite common and will result in weird duplication.\r\n                vim.api.nvim_create_autocmd({ \"BufDelete\" }, {\r\n                    group = augid,\r\n                    buffer = bufnr,\r\n                    desc = \"Detach this buffer from LSP client - [\" .. client.name .. \"] - when the buffer is deleted\",\r\n                    callback = function(buflocal_event)\r\n                        -- only detach if the buffer is actually still attached to the client.\r\n                        if client.attached_buffers[bufnr] then\r\n                            -- If the buffer is invalid, buf_detach_client won't work, so we just delete it from the array \r\n                            -- directly.\r\n                            --[[if not vim.api.nvim_buf_is_valid(bufnr) then\r\n                                client.attached_buffers[bufnr] = nil\r\n                            else]]--\r\n                            vim.lsp.buf_detach_client(bufnr, client.id)\r\n                            -- end\r\n                        end\r\n                    end\r\n                })\r\n            end\r\n        end\r\n    })\r\n```\r\nEdit:\r\nI tried removing this, and it made zero difference.",
            "created_at": "2024-05-25T02:29:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/28575#issuecomment-2130674878",
            "id": 2130674878,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28575",
            "node_id": "IC_kwDOAPphoM5-_4S-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2130674878/reactions"
            },
            "updated_at": "2024-05-25T02:35:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2130674878",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4654798?v=4",
                "events_url": "https://api.github.com/users/sapient-cogbag/events{/privacy}",
                "followers_url": "https://api.github.com/users/sapient-cogbag/followers",
                "following_url": "https://api.github.com/users/sapient-cogbag/following{/other_user}",
                "gists_url": "https://api.github.com/users/sapient-cogbag/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sapient-cogbag",
                "id": 4654798,
                "login": "sapient-cogbag",
                "node_id": "MDQ6VXNlcjQ2NTQ3OTg=",
                "organizations_url": "https://api.github.com/users/sapient-cogbag/orgs",
                "received_events_url": "https://api.github.com/users/sapient-cogbag/received_events",
                "repos_url": "https://api.github.com/users/sapient-cogbag/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sapient-cogbag/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sapient-cogbag/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sapient-cogbag"
            }
        },
        {
            "author_association": "NONE",
            "body": "Looking inside `lsp.lua` it actually seems like it'd be theoretically possible for an `LspDetach` callback to be invoked *before* an `LspAttach` callback. \r\n\r\nMoreover, this also applies to the functions that call those autocmds, which also manage the attached buffer information. The `on_attach` stuff seems to forcefully mark a bufnr as attached to a client, so if it was somehow invoked after the buffer deletion event but before the buffer was *actually* deleted/rendered invalid, it could end up re-inserting that buffer into a client's buffer list.\r\n\r\nIn particular, note the following:\r\n* Inside `vim/lsp.lua:577`, `api.nvim_buf_attach` is called with the `on_detach` callback itself calling `buf_detach_client@vim/lsp.lua:506`. `buf_detach_client` sets `client.attached_buffers[bufnr]` to `nil`, but only *after* invoking the `LspDetach` callbacks. If those somehow error, or something - or some of the *other* functions called inside `buf_detach_client` before it sets `client.attached_buffers[bufnr] = nil` fail - then this will not clear out `bufnr` from the `attached_buffers` table.\r\n* `api.nvim_buf_attach` (and the containing function - `buf_attach@vim/lsp.lua:532`)  are invoked before `Client:_on_attach` inside `vim.lsp.buf_attach_client:vim/lsp.lua:623` ^.^\r\n* `Client:_on_attach` is only invoked if the client is already initialized by the time of this call, otherwise it *waits until the `initialize` RPC gets a reply* (unless there are other ways `Client:_on_attach` is invoked ^.^).\r\n* Therefore, if the `on_detach` callback to `api.nvim_buf_attach` is ever invoked before some particular call to `Client:_on_attach` - which is then itself only called when the LS indicates initialization - and some error inside that stops the `attached_buffers[bufnr]` from getting set to nil - an invalid bufnr will remain inside the list of attached bufnrs for a client when `Client:_on_attach` checks it!\r\n\r\nThe sequence of events that triggers this issue - if my hypothesis is correct - is then as follows:\r\n* `vim.lsp.buf_attach_client()` is invoked - either directly or by `vim.lsp.start`. This immediately marks a buffer as attached to the client.  \r\n* This invokes `buf_attach`, which uses `api.nvim_buf_attach` to register an `on_detach` callback that will automatically remove a bufnr from all clients. \r\n* Meanwhile, the client has sent the `initialize` RPC and is waiting for a response for the language server.\r\n* At some point here, before the LS has responded to the `initialize` request but *after* the `api.nvim_buf_attach` callbacks have been registered, the buffer is deleted and rendered invalid. The `on_detach` callback is invoked (or it might actually *not be invoked*, which would cause the same issue), but somehow there is an error that causes it not to reach the parts of the code that set `client.attached_buffers[bufnr] = nil`\r\n* Then, sometime later, the LS finally responds, invoking the `initialize` callback. An invalid bufnr remains in `client.attached_buffers`, and the error is induced in spite of the check ^.^\r\n\r\nHopefully this is helpful, as I suspect the real issue is now related to buffer deletion and the `on_detach` callback and the things inside of it.",
            "created_at": "2024-05-25T03:47:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/28575#issuecomment-2130732737",
            "id": 2130732737,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28575",
            "node_id": "IC_kwDOAPphoM5_AGbB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2130732737/reactions"
            },
            "updated_at": "2024-05-25T03:47:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2130732737",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4654798?v=4",
                "events_url": "https://api.github.com/users/sapient-cogbag/events{/privacy}",
                "followers_url": "https://api.github.com/users/sapient-cogbag/followers",
                "following_url": "https://api.github.com/users/sapient-cogbag/following{/other_user}",
                "gists_url": "https://api.github.com/users/sapient-cogbag/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sapient-cogbag",
                "id": 4654798,
                "login": "sapient-cogbag",
                "node_id": "MDQ6VXNlcjQ2NTQ3OTg=",
                "organizations_url": "https://api.github.com/users/sapient-cogbag/orgs",
                "received_events_url": "https://api.github.com/users/sapient-cogbag/received_events",
                "repos_url": "https://api.github.com/users/sapient-cogbag/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sapient-cogbag/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sapient-cogbag/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sapient-cogbag"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@sapient-cogbag I cannot reproduce the error using your `minimal_init.lua`. I'm getting a different error: `Vim:E95: Buffer with this name already exists`.",
            "created_at": "2024-05-25T17:28:19Z",
            "html_url": "https://github.com/neovim/neovim/issues/28575#issuecomment-2131368595",
            "id": 2131368595,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28575",
            "node_id": "IC_kwDOAPphoM5_ChqT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2131368595/reactions"
            },
            "updated_at": "2024-05-25T17:28:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2131368595",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/943597?v=4",
                "events_url": "https://api.github.com/users/icholy/events{/privacy}",
                "followers_url": "https://api.github.com/users/icholy/followers",
                "following_url": "https://api.github.com/users/icholy/following{/other_user}",
                "gists_url": "https://api.github.com/users/icholy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/icholy",
                "id": 943597,
                "login": "icholy",
                "node_id": "MDQ6VXNlcjk0MzU5Nw==",
                "organizations_url": "https://api.github.com/users/icholy/orgs",
                "received_events_url": "https://api.github.com/users/icholy/received_events",
                "repos_url": "https://api.github.com/users/icholy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/icholy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/icholy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/icholy"
            }
        },
        {
            "author_association": "NONE",
            "body": "Yes, the `minimal_init.lua` doesn't work, I just posted it to attempt to illustrate my attempt at reproducing the bug a while back. I spent a lot of time trying to do it but couldn't actually reproduce it :/\r\n\r\nI have a better understanding of the actual issue now (documented above is my new hypothesis) after the recent commit, but I still don't know exactly what could cause the buffer detach-on-delete machinery to fail. I can dig around some more in the `lsp.lua` code later to try and figure it out, but i'm not really that familiar with the deeper internals of neovim (especially `api.nvim_buf_attach` >.<).",
            "created_at": "2024-05-25T18:28:21Z",
            "html_url": "https://github.com/neovim/neovim/issues/28575#issuecomment-2131385496",
            "id": 2131385496,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28575",
            "node_id": "IC_kwDOAPphoM5_ClyY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2131385496/reactions"
            },
            "updated_at": "2024-05-25T18:28:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2131385496",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4654798?v=4",
                "events_url": "https://api.github.com/users/sapient-cogbag/events{/privacy}",
                "followers_url": "https://api.github.com/users/sapient-cogbag/followers",
                "following_url": "https://api.github.com/users/sapient-cogbag/following{/other_user}",
                "gists_url": "https://api.github.com/users/sapient-cogbag/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sapient-cogbag",
                "id": 4654798,
                "login": "sapient-cogbag",
                "node_id": "MDQ6VXNlcjQ2NTQ3OTg=",
                "organizations_url": "https://api.github.com/users/sapient-cogbag/orgs",
                "received_events_url": "https://api.github.com/users/sapient-cogbag/received_events",
                "repos_url": "https://api.github.com/users/sapient-cogbag/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sapient-cogbag/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sapient-cogbag/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sapient-cogbag"
            }
        },
        {
            "author_association": "NONE",
            "body": "Until I know the root cause of the failure to remove from the `attached_buffers` inside `on_detach`, I probably can't reproduce this issue (or if `on_detach` is not being called, why that is the case for my setup and not other setups)",
            "created_at": "2024-05-25T18:31:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/28575#issuecomment-2131386184",
            "id": 2131386184,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28575",
            "node_id": "IC_kwDOAPphoM5_Cl9I",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2131386184/reactions"
            },
            "updated_at": "2024-05-25T18:31:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2131386184",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4654798?v=4",
                "events_url": "https://api.github.com/users/sapient-cogbag/events{/privacy}",
                "followers_url": "https://api.github.com/users/sapient-cogbag/followers",
                "following_url": "https://api.github.com/users/sapient-cogbag/following{/other_user}",
                "gists_url": "https://api.github.com/users/sapient-cogbag/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sapient-cogbag",
                "id": 4654798,
                "login": "sapient-cogbag",
                "node_id": "MDQ6VXNlcjQ2NTQ3OTg=",
                "organizations_url": "https://api.github.com/users/sapient-cogbag/orgs",
                "received_events_url": "https://api.github.com/users/sapient-cogbag/received_events",
                "repos_url": "https://api.github.com/users/sapient-cogbag/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sapient-cogbag/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sapient-cogbag/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sapient-cogbag"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "How consistently can you reproduce this using your config?",
            "created_at": "2024-05-25T18:47:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/28575#issuecomment-2131389636",
            "id": 2131389636,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28575",
            "node_id": "IC_kwDOAPphoM5_CmzE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2131389636/reactions"
            },
            "updated_at": "2024-05-25T18:47:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2131389636",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/943597?v=4",
                "events_url": "https://api.github.com/users/icholy/events{/privacy}",
                "followers_url": "https://api.github.com/users/icholy/followers",
                "following_url": "https://api.github.com/users/icholy/following{/other_user}",
                "gists_url": "https://api.github.com/users/icholy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/icholy",
                "id": 943597,
                "login": "icholy",
                "node_id": "MDQ6VXNlcjk0MzU5Nw==",
                "organizations_url": "https://api.github.com/users/icholy/orgs",
                "received_events_url": "https://api.github.com/users/icholy/received_events",
                "repos_url": "https://api.github.com/users/icholy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/icholy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/icholy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/icholy"
            }
        },
        {
            "author_association": "NONE",
            "body": "My own config produces this constantly (I have to turn my autohover/auto-documentation off to even be able to type something without 20 different errors getting in the way). I can work somewhat without the autohover but it also pops up with manual hover too, so every time I look at docs. \r\n\r\nThis is related to the fact that my markdown LS is attaching to the hover popups, but it works with other LSes as well e.g. sometimes it happens when using fzf-lua and preview mode (and having language server stuff there turns out to be surprisingly useful because I can scan through documents and see issues quickly), and it also sonetimes happens when I use the config reload mechanism.\r\n\r\nI'll attempt a new `minimal_init.lua` later today with my new understanding from yesterday, try and figure out how the deletion mechanism is broken. Trying to minimally reproduce this has been pretty difficult, sorry >.<\r\n\r\nFor this I'll see about creating an LspDetach callback that errors, and some other things. ",
            "created_at": "2024-05-25T18:58:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/28575#issuecomment-2131396815",
            "id": 2131396815,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28575",
            "node_id": "IC_kwDOAPphoM5_CojP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2131396815/reactions"
            },
            "updated_at": "2024-05-25T19:01:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2131396815",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4654798?v=4",
                "events_url": "https://api.github.com/users/sapient-cogbag/events{/privacy}",
                "followers_url": "https://api.github.com/users/sapient-cogbag/followers",
                "following_url": "https://api.github.com/users/sapient-cogbag/following{/other_user}",
                "gists_url": "https://api.github.com/users/sapient-cogbag/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sapient-cogbag",
                "id": 4654798,
                "login": "sapient-cogbag",
                "node_id": "MDQ6VXNlcjQ2NTQ3OTg=",
                "organizations_url": "https://api.github.com/users/sapient-cogbag/orgs",
                "received_events_url": "https://api.github.com/users/sapient-cogbag/received_events",
                "repos_url": "https://api.github.com/users/sapient-cogbag/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sapient-cogbag/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sapient-cogbag/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sapient-cogbag"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@sapient-cogbag if you share your config + some setup/repro steps I can take a look.",
            "created_at": "2024-05-26T01:35:21Z",
            "html_url": "https://github.com/neovim/neovim/issues/28575#issuecomment-2131905542",
            "id": 2131905542,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28575",
            "node_id": "IC_kwDOAPphoM5_EkwG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2131905542/reactions"
            },
            "updated_at": "2024-05-26T01:35:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2131905542",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/943597?v=4",
                "events_url": "https://api.github.com/users/icholy/events{/privacy}",
                "followers_url": "https://api.github.com/users/icholy/followers",
                "following_url": "https://api.github.com/users/icholy/following{/other_user}",
                "gists_url": "https://api.github.com/users/icholy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/icholy",
                "id": 943597,
                "login": "icholy",
                "node_id": "MDQ6VXNlcjk0MzU5Nw==",
                "organizations_url": "https://api.github.com/users/icholy/orgs",
                "received_events_url": "https://api.github.com/users/icholy/received_events",
                "repos_url": "https://api.github.com/users/icholy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/icholy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/icholy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/icholy"
            }
        },
        {
            "author_association": "NONE",
            "body": "My config is [here](https://gitlab.com/sapient_cogbag/dotfiles/-/tree/fix-epoch/nvim?ref_type=heads). I will warn you it's an absolute disaster though because it was made in a massive rush, and then I piled hacks on top of other hacks to fix issues but now it's... really something :/, honestly it's a bit embarrassing xP. Make sure to stay with the `fix_epoch` branch as that's the latest version of my config ^.^.\r\n\r\nThe main thing is that it still uses the old Packer plugin repo, and it should automatically bootstrap on that when you first load it, then you'll want to run `:PackerSync`. To be honest even I'm not sure if this is completely enough to initialize it. You can probably get rid of most of the old Packer plugin entries inside `cfg/plugins.lua:381` and it should be fine as this issue is not really related to them - you just need to keep the `cmp-nvim-lua` stuff (of which I have a small fork on my repo) and the `neodev` stuff because that's used in language server initialization, all other plugin config is done via callbacks and will be fine if you just delete things, though you could also just get rid of some of that stuff too and not use the language server stuff it's relevant for. \r\n\r\nIt also produces a lot of log messages (based on it's discovery of various natively installed language servers). The main thing here is that it won't do the standard `lspconfig` thing of downloading language servers - it uses the native language servers installed via a package manager. This also applies if you keep the `fzf-lua` plugin, which uses the natively installed `fzf` binary and I don't know how that will react if it's not installed >.<\r\n\r\nThe most reliable way to trigger the issue is:\r\n* Install the `marksman` language server specifically (as the documentation popup is markdown, and that's by far the most reliable way of triggering the issue, though it has worked for FzfLua previews before I disabled language servers for those because it was even more unusable than the autohover being enabled). \r\n* Install some other language server for one of the languages in `cfg/lsp/<language>.lua`. `lua-language-server`, `rust-analyzer`, and `clangd` are easy options for this. You can also only install `marksman` and then open markdown files, the effect will still work fine ^.^\r\n* Open some project in one of the languages, and start typing or find somewhere you can get a documentation popup. Then run `:LspHover` on that location (or, if autohover is enabled, just start trying to type), and move the cursor until the hover window goes away. Wait a couple seconds and you should get serious error spam. \r\n\r\nOn another note, I put logging inside the runtime itself while I've been trying to create a minimal reproduction, and it seems like with my config enabled, `on_detach` just *isn't getting called at all* somehow (I checked with the minimal_init.lua efforts to ensure that the logging does work on things which don't induce the issue), which is why the invalid bufnrs are remaining inside `client.attached_buffers`. \r\n\r\nOne problem I have with creating a minimal reproduction is that my config is multi-file, so instead of trying to cut out bits of config and localise the issue, I'm stuck trying to rebuild the actual causative scenario from scratch. If you have any tips for reducing a large and complex multi-file config (where I can't just glob everything into one file, and modifying it in place would cause serious issues because I also need to use neovim to, well, edit and work on other stuff, including the minimal reproduction itself), I'd appreciate it ^.^ - in particular, how does `-u` and `--no-plugins` interact with lua imports? \r\n\r\nI've found additional evidence that it's related to invalid bufnrs somehow remaining inside `client.attached_buffers`, as when I forcefully stop all LSP servers via `:LspStop!`, I get similar errors to the initial issue, but relating to attempts to run `on_exit` callbacks for the client - rather than issues in `on_attach` and changetracking. \r\n\r\nEDIT: I've discovered `NVIM_APPNAME`, hopefully this will accelerate finding a minimal config.",
            "created_at": "2024-05-26T03:05:54Z",
            "html_url": "https://github.com/neovim/neovim/issues/28575#issuecomment-2132043213",
            "id": 2132043213,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28575",
            "node_id": "IC_kwDOAPphoM5_FGXN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2132043213/reactions"
            },
            "updated_at": "2024-05-26T04:23:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2132043213",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4654798?v=4",
                "events_url": "https://api.github.com/users/sapient-cogbag/events{/privacy}",
                "followers_url": "https://api.github.com/users/sapient-cogbag/followers",
                "following_url": "https://api.github.com/users/sapient-cogbag/following{/other_user}",
                "gists_url": "https://api.github.com/users/sapient-cogbag/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sapient-cogbag",
                "id": 4654798,
                "login": "sapient-cogbag",
                "node_id": "MDQ6VXNlcjQ2NTQ3OTg=",
                "organizations_url": "https://api.github.com/users/sapient-cogbag/orgs",
                "received_events_url": "https://api.github.com/users/sapient-cogbag/received_events",
                "repos_url": "https://api.github.com/users/sapient-cogbag/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sapient-cogbag/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sapient-cogbag/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sapient-cogbag"
            }
        },
        {
            "author_association": "NONE",
            "body": "Trying to make a `minimal_init.lua` seems almost impossible without me being able to reduce from my config rather than trying to build one up from scratch, though. I'm going to start digging through the neovim C codebase to see if I can find out what might be causing `nvim_buf_attach` not to call `on_detach`...",
            "created_at": "2024-05-26T03:12:53Z",
            "html_url": "https://github.com/neovim/neovim/issues/28575#issuecomment-2132044229",
            "id": 2132044229,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28575",
            "node_id": "IC_kwDOAPphoM5_FGnF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2132044229/reactions"
            },
            "updated_at": "2024-05-26T03:12:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2132044229",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4654798?v=4",
                "events_url": "https://api.github.com/users/sapient-cogbag/events{/privacy}",
                "followers_url": "https://api.github.com/users/sapient-cogbag/followers",
                "following_url": "https://api.github.com/users/sapient-cogbag/following{/other_user}",
                "gists_url": "https://api.github.com/users/sapient-cogbag/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sapient-cogbag",
                "id": 4654798,
                "login": "sapient-cogbag",
                "node_id": "MDQ6VXNlcjQ2NTQ3OTg=",
                "organizations_url": "https://api.github.com/users/sapient-cogbag/orgs",
                "received_events_url": "https://api.github.com/users/sapient-cogbag/received_events",
                "repos_url": "https://api.github.com/users/sapient-cogbag/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sapient-cogbag/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sapient-cogbag/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sapient-cogbag"
            }
        },
        {
            "author_association": "NONE",
            "body": "So, I've had a look for all references to `BufUpdateCallbacks.on_detach` in the C files. The only place where that callback is called is inside `buf_updates_unload@src/nvim/buffer_updates.c:151`. There is also an `on_reload` callback specified inside the lua code that controls `on_detach`, so the primary determinant as to whether or not `on_detach` is called is whether or not `buf_updates_unload` is called with `can_reload = true` or `can_reload = false`. i.e., if `buf_updates_unload` is even called, then in the error case, it's being unloaded with `can_reload = true` when it *should* be being called with `can_reload = false` ^.^\r\n\r\nEither that, or a buffer is being detached when it should not be, then being somehow reattached. The detaching process cleans up all callbacks but leaves the list of callbacks in a valid state that could theoretically be re-appended to (just from a cursory glance, idk if this is true for sure :p)\r\n\r\nThe only places where that function is called with `can_reload = true` are:\r\n* `src/nvim/fileio.c:3179` - in `buf_reload`, and only if the buffer is the *current active buffer* and valid, and it didn't save ok? there's a lot of conditionality going on in this function and it's beyond my ability to easily trace further back at the minute >.<\r\n* `src/nvim/undo.c:2442` - inside `undoredo`, and specifically inside a condition on whether something was previously-reloaded (at least, I'm *assuming* that's what `UH_RELOAD` means, I really am not familiar with any of this).\r\n\r\nThere are also several places where `can_reload = false`, that may have some condition preventing them from being called properly, but I haven't looked at those yet >.<\r\n\r\nAnother note: Reloading a file with `:e!` will ensure that the buffer is detached and reattached just fine. ",
            "created_at": "2024-05-26T03:52:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/28575#issuecomment-2132052240",
            "id": 2132052240,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28575",
            "node_id": "IC_kwDOAPphoM5_FIkQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2132052240/reactions"
            },
            "updated_at": "2024-05-26T04:05:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2132052240",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4654798?v=4",
                "events_url": "https://api.github.com/users/sapient-cogbag/events{/privacy}",
                "followers_url": "https://api.github.com/users/sapient-cogbag/followers",
                "following_url": "https://api.github.com/users/sapient-cogbag/following{/other_user}",
                "gists_url": "https://api.github.com/users/sapient-cogbag/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sapient-cogbag",
                "id": 4654798,
                "login": "sapient-cogbag",
                "node_id": "MDQ6VXNlcjQ2NTQ3OTg=",
                "organizations_url": "https://api.github.com/users/sapient-cogbag/orgs",
                "received_events_url": "https://api.github.com/users/sapient-cogbag/received_events",
                "repos_url": "https://api.github.com/users/sapient-cogbag/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sapient-cogbag/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sapient-cogbag/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sapient-cogbag"
            }
        },
        {
            "author_association": "NONE",
            "body": "I managed to figure out a change to my (minimal) config that fixes the issue. So I can hopefully reproduce it now! (the short story is that having `vim.lsp.start` directly inside a filetype autogroup that is triggered on some sort of ephemeral buffer seems to cause this issue, as wrapping that `vim.lsp.start` in a `vim.schedule` seemed to fix the problem). \r\n\r\nHopefully, I will have a `minimal_init.lua` now I actually am pretty sure I know what the cause is! ^.^\r\n\r\nEDIT: still having some trouble, but I will try and make it so the filetype autocmd is triggered during textlock, as my current setup of manually creating a scratchbuffer is not sufficient. I need to sleep though, but I think we might actually be able to reproduce this at somepoint! And even if not, I have managed to fix it for my own config by wrapping `vim.lsp.start` in `vim.schedule`. \r\n\r\nBasically, in some situations, if you don't wrap `vim.lsp.start` in `vim.schedule` in certain environments, then it can leave the `client.attached_buffers` set contaminated with invalid bufnrs (or perhaps valid bufnrs that fail to register some on_detach hooks and can't notify the client when they become invalid), which won't immediately error but causes issues down the line, such as if an initialization reply is received after  the buffers become invalid, or while your client is exiting ^.^",
            "created_at": "2024-05-26T06:46:52Z",
            "html_url": "https://github.com/neovim/neovim/issues/28575#issuecomment-2132091435",
            "id": 2132091435,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28575",
            "node_id": "IC_kwDOAPphoM5_FSIr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2132091435/reactions"
            },
            "updated_at": "2024-05-26T07:34:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2132091435",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4654798?v=4",
                "events_url": "https://api.github.com/users/sapient-cogbag/events{/privacy}",
                "followers_url": "https://api.github.com/users/sapient-cogbag/followers",
                "following_url": "https://api.github.com/users/sapient-cogbag/following{/other_user}",
                "gists_url": "https://api.github.com/users/sapient-cogbag/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sapient-cogbag",
                "id": 4654798,
                "login": "sapient-cogbag",
                "node_id": "MDQ6VXNlcjQ2NTQ3OTg=",
                "organizations_url": "https://api.github.com/users/sapient-cogbag/orgs",
                "received_events_url": "https://api.github.com/users/sapient-cogbag/received_events",
                "repos_url": "https://api.github.com/users/sapient-cogbag/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sapient-cogbag/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sapient-cogbag/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sapient-cogbag"
            }
        },
        {
            "author_association": "NONE",
            "body": "guys,\r\n\r\nthanks so much for looking into this, seems like this has fixed it - and even for say a file type lua which i do not even have a callback such as below.\r\n\r\n\r\n![image](https://github.com/neovim/neovim/assets/7300251/544d6da8-ffe5-4a88-84f9-ee9a97ce6137)\r\n\r\n\r\ne.g. https://github.com/TimelordUK/configs/blob/main/.config/nvim/lua/plugins/lspconfig.lua\r\n\r\n```lua\r\n       local function start_lsp(cfg)\r\n         vim.schedule(function()\r\n            vim.lsp.start(cfg)\r\n         end)\r\n      end\r\n\r\n      vim.api.nvim_create_autocmd('FileType', {\r\n         pattern = 'cpp',\r\n         callback = function()\r\n            start_lsp({\r\n               name = 'clangd',\r\n               cmd = { 'clangd' },\r\n            })\r\n         end,\r\n      })\r\n```",
            "created_at": "2024-05-26T11:11:43Z",
            "html_url": "https://github.com/neovim/neovim/issues/28575#issuecomment-2132180661",
            "id": 2132180661,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28575",
            "node_id": "IC_kwDOAPphoM5_Fn61",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2132180661/reactions"
            },
            "updated_at": "2024-05-26T11:13:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2132180661",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7300251?v=4",
                "events_url": "https://api.github.com/users/TimelordUK/events{/privacy}",
                "followers_url": "https://api.github.com/users/TimelordUK/followers",
                "following_url": "https://api.github.com/users/TimelordUK/following{/other_user}",
                "gists_url": "https://api.github.com/users/TimelordUK/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TimelordUK",
                "id": 7300251,
                "login": "TimelordUK",
                "node_id": "MDQ6VXNlcjczMDAyNTE=",
                "organizations_url": "https://api.github.com/users/TimelordUK/orgs",
                "received_events_url": "https://api.github.com/users/TimelordUK/received_events",
                "repos_url": "https://api.github.com/users/TimelordUK/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TimelordUK/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TimelordUK/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TimelordUK"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Here's a minimal repro: https://github.com/icholy/nvim-lsp-bug-4\r\n\r\n@zeertzjq can you re-open this?",
            "created_at": "2024-05-26T16:23:40Z",
            "html_url": "https://github.com/neovim/neovim/issues/28575#issuecomment-2132276887",
            "id": 2132276887,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28575",
            "node_id": "IC_kwDOAPphoM5_F_aX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2132276887/reactions"
            },
            "updated_at": "2024-05-26T16:23:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2132276887",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/943597?v=4",
                "events_url": "https://api.github.com/users/icholy/events{/privacy}",
                "followers_url": "https://api.github.com/users/icholy/followers",
                "following_url": "https://api.github.com/users/icholy/following{/other_user}",
                "gists_url": "https://api.github.com/users/icholy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/icholy",
                "id": 943597,
                "login": "icholy",
                "node_id": "MDQ6VXNlcjk0MzU5Nw==",
                "organizations_url": "https://api.github.com/users/icholy/orgs",
                "received_events_url": "https://api.github.com/users/icholy/received_events",
                "repos_url": "https://api.github.com/users/icholy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/icholy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/icholy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/icholy"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "The `on_detach` isn't called because this condition is hit https://github.com/neovim/neovim/blob/4f24e1b1d743a13f5a7b536f8acce9552143794d/runtime/lua/vim/lsp.lua#L580",
            "created_at": "2024-05-26T18:18:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/28575#issuecomment-2132305519",
            "id": 2132305519,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28575",
            "node_id": "IC_kwDOAPphoM5_GGZv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2132305519/reactions"
            },
            "updated_at": "2024-05-26T18:18:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2132305519",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/943597?v=4",
                "events_url": "https://api.github.com/users/icholy/events{/privacy}",
                "followers_url": "https://api.github.com/users/icholy/followers",
                "following_url": "https://api.github.com/users/icholy/following{/other_user}",
                "gists_url": "https://api.github.com/users/icholy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/icholy",
                "id": 943597,
                "login": "icholy",
                "node_id": "MDQ6VXNlcjk0MzU5Nw==",
                "organizations_url": "https://api.github.com/users/icholy/orgs",
                "received_events_url": "https://api.github.com/users/icholy/received_events",
                "repos_url": "https://api.github.com/users/icholy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/icholy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/icholy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/icholy"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The `on_detach` isn't called because this condition is hit\r\n> \r\n> https://github.com/neovim/neovim/blob/4f24e1b1d743a13f5a7b536f8acce9552143794d/runtime/lua/vim/lsp.lua#L580\r\n\r\nCan you try with `#lsp.get_clients({ bufnr = bufnr, _uninitialized = true }` in the condition instead?\r\n\r\nOr actually, we shouldn't send changes for the uninitialized clients. But we shouldn't detach either.",
            "created_at": "2024-05-26T18:47:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/28575#issuecomment-2132350873",
            "id": 2132350873,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28575",
            "node_id": "IC_kwDOAPphoM5_GReZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2132350873/reactions"
            },
            "updated_at": "2024-05-26T18:49:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2132350873",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@mfussenegger yeah that works.\r\n\r\n``` diff\r\ndiff --git a/runtime/lua/vim/lsp.lua b/runtime/lua/vim/lsp.lua\r\nindex 1592fd315..60b3f3e50 100644\r\n--- a/runtime/lua/vim/lsp.lua\r\n+++ b/runtime/lua/vim/lsp.lua\r\n@@ -577,7 +577,8 @@ local function buf_attach(bufnr)\r\n   api.nvim_buf_attach(bufnr, false, {\r\n     on_lines = function(_, _, changedtick, firstline, lastline, new_lastline)\r\n       if #lsp.get_clients({ bufnr = bufnr }) == 0 then\r\n-        return true -- detach\r\n+        -- detach if there are no clients\r\n+        return #lsp.get_clients({ bufnr = bufnr, _uninitialized = true }) == 0\r\n       end\r\n       util.buf_versions[bufnr] = changedtick\r\n       changetracking.send_changes(bufnr, firstline, lastline, new_lastline)\r\n```",
            "created_at": "2024-05-26T18:56:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/28575#issuecomment-2132363966",
            "id": 2132363966,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28575",
            "node_id": "IC_kwDOAPphoM5_GUq-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2132363966/reactions"
            },
            "updated_at": "2024-05-26T18:56:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2132363966",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/943597?v=4",
                "events_url": "https://api.github.com/users/icholy/events{/privacy}",
                "followers_url": "https://api.github.com/users/icholy/followers",
                "following_url": "https://api.github.com/users/icholy/following{/other_user}",
                "gists_url": "https://api.github.com/users/icholy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/icholy",
                "id": 943597,
                "login": "icholy",
                "node_id": "MDQ6VXNlcjk0MzU5Nw==",
                "organizations_url": "https://api.github.com/users/icholy/orgs",
                "received_events_url": "https://api.github.com/users/icholy/received_events",
                "repos_url": "https://api.github.com/users/icholy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/icholy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/icholy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/icholy"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@sapient-cogbag I'm pretty sure it's actually fixed this time",
            "created_at": "2024-05-27T15:10:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/28575#issuecomment-2133670693",
            "id": 2133670693,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28575",
            "node_id": "IC_kwDOAPphoM5_LTsl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2133670693/reactions"
            },
            "updated_at": "2024-05-27T15:10:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2133670693",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/943597?v=4",
                "events_url": "https://api.github.com/users/icholy/events{/privacy}",
                "followers_url": "https://api.github.com/users/icholy/followers",
                "following_url": "https://api.github.com/users/icholy/following{/other_user}",
                "gists_url": "https://api.github.com/users/icholy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/icholy",
                "id": 943597,
                "login": "icholy",
                "node_id": "MDQ6VXNlcjk0MzU5Nw==",
                "organizations_url": "https://api.github.com/users/icholy/orgs",
                "received_events_url": "https://api.github.com/users/icholy/received_events",
                "repos_url": "https://api.github.com/users/icholy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/icholy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/icholy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/icholy"
            }
        },
        {
            "author_association": "NONE",
            "body": "This fixes the problem for me, I just pulled the latest version. Thanks :)",
            "created_at": "2024-05-27T20:20:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/28575#issuecomment-2134012429",
            "id": 2134012429,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28575",
            "node_id": "IC_kwDOAPphoM5_MnIN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 2,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2134012429/reactions"
            },
            "updated_at": "2024-05-27T20:20:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2134012429",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4654798?v=4",
                "events_url": "https://api.github.com/users/sapient-cogbag/events{/privacy}",
                "followers_url": "https://api.github.com/users/sapient-cogbag/followers",
                "following_url": "https://api.github.com/users/sapient-cogbag/following{/other_user}",
                "gists_url": "https://api.github.com/users/sapient-cogbag/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sapient-cogbag",
                "id": 4654798,
                "login": "sapient-cogbag",
                "node_id": "MDQ6VXNlcjQ2NTQ3OTg=",
                "organizations_url": "https://api.github.com/users/sapient-cogbag/orgs",
                "received_events_url": "https://api.github.com/users/sapient-cogbag/received_events",
                "repos_url": "https://api.github.com/users/sapient-cogbag/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sapient-cogbag/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sapient-cogbag/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sapient-cogbag"
            }
        }
    ],
    "comments": 29,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/28575/comments",
    "created_at": "2024-04-30T00:02:59Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/28575/events",
    "html_url": "https://github.com/neovim/neovim/issues/28575",
    "id": 2270234348,
    "labels": [
        {
            "color": "f9d0c4",
            "default": true,
            "description": "issues reporting wrong behavior",
            "id": 77997474,
            "name": "bug",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3NA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/28575/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 37,
        "created_at": "2024-05-14T14:02:12Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
            "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
            "followers_url": "https://api.github.com/users/zeertzjq/followers",
            "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
            "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/zeertzjq",
            "id": 35768171,
            "login": "zeertzjq",
            "node_id": "MDQ6VXNlcjM1NzY4MTcx",
            "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
            "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
            "repos_url": "https://api.github.com/users/zeertzjq/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/zeertzjq"
        },
        "description": "",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/42",
        "id": 11051793,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/42/labels",
        "node_id": "MI_kwDOAPphoM4AqKMR",
        "number": 42,
        "open_issues": 5,
        "state": "open",
        "title": "0.10.1",
        "updated_at": "2024-06-03T00:15:21Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/42"
    },
    "node_id": "I_kwDOAPphoM6HUQbs",
    "number": 28575,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 4,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 4,
        "url": "https://api.github.com/repos/neovim/neovim/issues/28575/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/28575/timeline",
    "title": "LSP: _changetracking.lua:154: Invalid buffer id: (race condition in 'initialize' RPC?)",
    "updated_at": "2024-05-28T03:28:55Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/28575",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/4654798?v=4",
        "events_url": "https://api.github.com/users/sapient-cogbag/events{/privacy}",
        "followers_url": "https://api.github.com/users/sapient-cogbag/followers",
        "following_url": "https://api.github.com/users/sapient-cogbag/following{/other_user}",
        "gists_url": "https://api.github.com/users/sapient-cogbag/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/sapient-cogbag",
        "id": 4654798,
        "login": "sapient-cogbag",
        "node_id": "MDQ6VXNlcjQ2NTQ3OTg=",
        "organizations_url": "https://api.github.com/users/sapient-cogbag/orgs",
        "received_events_url": "https://api.github.com/users/sapient-cogbag/received_events",
        "repos_url": "https://api.github.com/users/sapient-cogbag/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/sapient-cogbag/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sapient-cogbag/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/sapient-cogbag"
    }
}