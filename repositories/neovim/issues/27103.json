{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\r\n\r\nNowadays, `:so` only can load lua config if current file name extension is `.lua`. Not support range. Not support load code in a buffer but not in a file.\r\n\r\n### Expected behavior\r\n\r\n~~Maybe we can have a separate `:luaso` command to support load lua config like `:so` for vimscript.~~\r\n\r\n`:[range]lua` can execute selected Lua code regardless of buffer type.",
    "closed_at": "2024-01-27T01:00:51Z",
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "I often want to try lua example code in help file, it would be convenient if we have `:so` that support range select and scratch buffer for lua code.",
            "created_at": "2024-01-20T12:39:51Z",
            "html_url": "https://github.com/neovim/neovim/issues/27103#issuecomment-1902084364",
            "id": 1902084364,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27103",
            "node_id": "IC_kwDOAPphoM5xX4EM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902084364/reactions"
            },
            "updated_at": "2024-01-20T12:39:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902084364",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/149415622?v=4",
                "events_url": "https://api.github.com/users/Song-Tianxiang/events{/privacy}",
                "followers_url": "https://api.github.com/users/Song-Tianxiang/followers",
                "following_url": "https://api.github.com/users/Song-Tianxiang/following{/other_user}",
                "gists_url": "https://api.github.com/users/Song-Tianxiang/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Song-Tianxiang",
                "id": 149415622,
                "login": "Song-Tianxiang",
                "node_id": "U_kgDOCOfmxg",
                "organizations_url": "https://api.github.com/users/Song-Tianxiang/orgs",
                "received_events_url": "https://api.github.com/users/Song-Tianxiang/received_events",
                "repos_url": "https://api.github.com/users/Song-Tianxiang/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Song-Tianxiang/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Song-Tianxiang/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Song-Tianxiang"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "It can, though, as long as the _filetype_ is Lua. I think that's a reasonable constraint.",
            "created_at": "2024-01-20T12:44:48Z",
            "html_url": "https://github.com/neovim/neovim/issues/27103#issuecomment-1902085274",
            "id": 1902085274,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27103",
            "node_id": "IC_kwDOAPphoM5xX4Sa",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902085274/reactions"
            },
            "updated_at": "2024-01-20T12:45:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902085274",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">  Not support range. Not support load code in a buffer but not in a file.\r\n\r\nThis is not correct --- `:so` *does* support range on a buffer (try visual block and then `:so` or something like `:3,4so`).\r\n\r\n",
            "created_at": "2024-01-20T12:44:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/27103#issuecomment-1902085295",
            "id": 1902085295,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27103",
            "node_id": "IC_kwDOAPphoM5xX4Sv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902085295/reactions"
            },
            "updated_at": "2024-01-20T12:45:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902085295",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "All that said, I think the crux of OP's request is a way to run Lua snippets from *non*-lua-files (e.g. vimdoc), especially when injection is used (which I think is a reasonable request).\r\n\r\nI can think of something like `:so ++lua` BTW. But `[++opt]` is reserved for specific use, so `++lua` won't be valid.",
            "created_at": "2024-01-20T12:50:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/27103#issuecomment-1902086435",
            "id": 1902086435,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27103",
            "node_id": "IC_kwDOAPphoM5xX4kj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902086435/reactions"
            },
            "updated_at": "2024-01-20T12:51:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902086435",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "As a workaround, one can write manually a custom user command or keymap that does the similar job:\r\n\r\n(Extracted and slightly modified from my config)\r\n\r\n```lua\r\nvim.keymap.set('x', '<leader>so', function()\r\n  local vstart = assert(vim.fn.getpos(\"v\"))\r\n  local vend = assert(vim.fn.getpos(\".\"))\r\n  local line_start = vstart[2]\r\n  local line_end = vend[2]\r\n  if line_start > line_end then\r\n    line_start, line_end = line_end, line_start\r\n  end\r\n  local lines = vim.api.nvim_buf_get_lines(0, line_start - 1, line_end, true)\r\n\r\n  local code = table.concat(lines, '\\n')\r\n\r\n  -- \"evaluate\" the lines literally as a Lua script\r\n  loadstring(code)()\r\n\r\n  -- exit the visual mode\r\n  return '<Esc>'\r\n\r\nend, { expr = true, remap = false })\r\n```\r\n\r\nNote: this is not complete -- it's not a User cmd that doesn't support `<range>`. But it'd be straightforward to make it support them as well.",
            "created_at": "2024-01-20T12:57:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/27103#issuecomment-1902087788",
            "id": 1902087788,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27103",
            "node_id": "IC_kwDOAPphoM5xX45s",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902087788/reactions"
            },
            "updated_at": "2024-01-20T13:05:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902087788",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "author_association": "NONE",
            "body": "> It can, th\r\n\r\n> It can, though, as long as the _filetype_ is Lua. I think that's a reasonable constraint.\r\nI have try to `:set filetype=lua` in a [No Name] buffer but it not make `:so` work like in a file with `.lua` extension. `:so` does not recognize `filetype` option.",
            "created_at": "2024-01-20T14:19:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/27103#issuecomment-1902111926",
            "id": 1902111926,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27103",
            "node_id": "IC_kwDOAPphoM5xX-y2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902111926/reactions"
            },
            "updated_at": "2024-01-21T23:14:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902111926",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/149415622?v=4",
                "events_url": "https://api.github.com/users/Song-Tianxiang/events{/privacy}",
                "followers_url": "https://api.github.com/users/Song-Tianxiang/followers",
                "following_url": "https://api.github.com/users/Song-Tianxiang/following{/other_user}",
                "gists_url": "https://api.github.com/users/Song-Tianxiang/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Song-Tianxiang",
                "id": 149415622,
                "login": "Song-Tianxiang",
                "node_id": "U_kgDOCOfmxg",
                "organizations_url": "https://api.github.com/users/Song-Tianxiang/orgs",
                "received_events_url": "https://api.github.com/users/Song-Tianxiang/received_events",
                "repos_url": "https://api.github.com/users/Song-Tianxiang/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Song-Tianxiang/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Song-Tianxiang/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Song-Tianxiang"
            }
        },
        {
            "author_association": "NONE",
            "body": "\r\n\r\n> As a workaround, one can write manually a custom user command or keymap that does the similar job:\r\n> \r\n> (Extracted and slightly modified from my config)\r\n> \r\n> ```lua\r\n> vim.keymap.set('x', '<leader>so', function()\r\n>   local vstart = assert(vim.fn.getpos(\"v\"))\r\n>   local vend = assert(vim.fn.getpos(\".\"))\r\n>   local line_start = vstart[2]\r\n>   local line_end = vend[2]\r\n>   if line_start > line_end then\r\n>     line_start, line_end = line_end, line_start\r\n>   end\r\n>   local lines = vim.api.nvim_buf_get_lines(0, line_start - 1, line_end, true)\r\n> \r\n>   local code = table.concat(lines, '\\n')\r\n> \r\n>   -- \"evaluate\" the lines literally as a Lua script\r\n>   loadstring(code)()\r\n> \r\n>   -- exit the visual mode\r\n>   return '<Esc>'\r\n> \r\n> end, { expr = true, remap = false })\r\n> ```\r\n> \r\n> Note: this is not complete -- it's not a User cmd that doesn't support `<range>`. But it'd be straightforward to make it support them as well.\r\n\r\nThank you, It works for me. I think this custom keymap or command is enough for me.",
            "created_at": "2024-01-20T14:26:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/27103#issuecomment-1902113450",
            "id": 1902113450,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27103",
            "node_id": "IC_kwDOAPphoM5xX_Kq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902113450/reactions"
            },
            "updated_at": "2024-01-21T23:11:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902113450",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/149415622?v=4",
                "events_url": "https://api.github.com/users/Song-Tianxiang/events{/privacy}",
                "followers_url": "https://api.github.com/users/Song-Tianxiang/followers",
                "following_url": "https://api.github.com/users/Song-Tianxiang/following{/other_user}",
                "gists_url": "https://api.github.com/users/Song-Tianxiang/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Song-Tianxiang",
                "id": 149415622,
                "login": "Song-Tianxiang",
                "node_id": "U_kgDOCOfmxg",
                "organizations_url": "https://api.github.com/users/Song-Tianxiang/orgs",
                "received_events_url": "https://api.github.com/users/Song-Tianxiang/received_events",
                "repos_url": "https://api.github.com/users/Song-Tianxiang/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Song-Tianxiang/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Song-Tianxiang/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Song-Tianxiang"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> OP's request is a way to run Lua snippets from _non_-lua-files (e.g. vimdoc)\r\n\r\nDefinitely would like that. How about adding range support to `:lua` ?",
            "created_at": "2024-01-21T23:10:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/27103#issuecomment-1902797687",
            "id": 1902797687,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27103",
            "node_id": "IC_kwDOAPphoM5xamN3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902797687/reactions"
            },
            "updated_at": "2024-01-21T23:10:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902797687",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comments": 8,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/27103/comments",
    "created_at": "2024-01-20T12:36:44Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/27103/events",
    "html_url": "https://github.com/neovim/neovim/issues/27103",
    "id": 2092038743,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/27103/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 266,
        "created_at": "2023-02-02T14:11:43Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
            "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
            "followers_url": "https://api.github.com/users/bfredl/followers",
            "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
            "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bfredl",
            "id": 1363104,
            "login": "bfredl",
            "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
            "organizations_url": "https://api.github.com/users/bfredl/orgs",
            "received_events_url": "https://api.github.com/users/bfredl/received_events",
            "repos_url": "https://api.github.com/users/bfredl/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bfredl"
        },
        "description": "",
        "due_on": "2024-03-01T08:00:00Z",
        "html_url": "https://github.com/neovim/neovim/milestone/36",
        "id": 8997654,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/36/labels",
        "node_id": "MI_kwDOAPphoM4AiUsW",
        "number": 36,
        "open_issues": 135,
        "state": "open",
        "title": "0.10",
        "updated_at": "2024-01-29T07:22:06Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/36"
    },
    "node_id": "I_kwDOAPphoM58sfpX",
    "number": 27103,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/27103/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/27103/timeline",
    "title": "Support sourcing range of non-lua buffer as lua",
    "updated_at": "2024-01-27T01:00:52Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/27103",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/149415622?v=4",
        "events_url": "https://api.github.com/users/Song-Tianxiang/events{/privacy}",
        "followers_url": "https://api.github.com/users/Song-Tianxiang/followers",
        "following_url": "https://api.github.com/users/Song-Tianxiang/following{/other_user}",
        "gists_url": "https://api.github.com/users/Song-Tianxiang/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/Song-Tianxiang",
        "id": 149415622,
        "login": "Song-Tianxiang",
        "node_id": "U_kgDOCOfmxg",
        "organizations_url": "https://api.github.com/users/Song-Tianxiang/orgs",
        "received_events_url": "https://api.github.com/users/Song-Tianxiang/received_events",
        "repos_url": "https://api.github.com/users/Song-Tianxiang/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/Song-Tianxiang/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Song-Tianxiang/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/Song-Tianxiang"
    }
}