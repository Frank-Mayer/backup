{
    "active_lock_reason": "resolved",
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "After reviewing some PRs and hearing people discuss various aspects of using LSP, I've been trying to figure out how we can make the experience more easily customizable (and particularly, without having to copy and paste the source and replace one line).\r\n\r\nSome strategies:\r\n1. As linked here: https://github.com/neovim/neovim/pull/12257#issuecomment-625260364 , expose more functions, even as \"private\" functions that people can override to change behavior slightly.\r\n2. Develop some sort of LSP config (whether through global variables [eww] or some other method). I think this would be useful anyway in a more structured way because a lot of people have similar complaints about a few things (like updating diagnostics while in insert mode always).\r\n3. Others?\r\n\r\n@teto @justinmk wondering what your thoughts are for this or if I missed something we've discussed elsewhere.\r\n\r\ncc @clason ",
    "closed_at": "2020-11-13T03:54:18Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/4466899?v=4",
        "events_url": "https://api.github.com/users/tjdevries/events{/privacy}",
        "followers_url": "https://api.github.com/users/tjdevries/followers",
        "following_url": "https://api.github.com/users/tjdevries/following{/other_user}",
        "gists_url": "https://api.github.com/users/tjdevries/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/tjdevries",
        "id": 4466899,
        "login": "tjdevries",
        "node_id": "MDQ6VXNlcjQ0NjY4OTk=",
        "organizations_url": "https://api.github.com/users/tjdevries/orgs",
        "received_events_url": "https://api.github.com/users/tjdevries/received_events",
        "repos_url": "https://api.github.com/users/tjdevries/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/tjdevries/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tjdevries/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/tjdevries"
    },
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "> 1. As linked here: [#12257 (comment)](https://github.com/neovim/neovim/pull/12257#issuecomment-625260364) , expose more functions, even as \"private\" functions that people can override to change behavior slightly.\r\n\r\nThe main argument in that comment was actually the other way around: if I want to override a utility function, I may not want to override all the local functions that are used there as well. At the moment I have to look for all the local functions used and copy them into my own lua file; if they were exposed, I could just replace every `M.xxx` with, say, `util.xxx` in the overriden function and call it a day. (And, more importantly, profit from bugfixes in core.)",
            "created_at": "2020-05-08T14:05:31Z",
            "html_url": "https://github.com/neovim/neovim/issues/12277#issuecomment-625832111",
            "id": 625832111,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12277",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTgzMjExMQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/625832111/reactions"
            },
            "updated_at": "2020-05-08T14:05:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/625832111",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I am very happy with diagnostic-nvim so it is possible to get pretty far with the current interfaces.\r\nAs a first step it's good enough to provide a common server description interface that can be leveraged by coc, lsp-vim, LanguageClient etc.\r\nThe out of the box experience could be improved for sure but I would postpone any commitment to a more advanced interface to another release such as 0.5.1.",
            "created_at": "2020-05-16T11:50:01Z",
            "html_url": "https://github.com/neovim/neovim/issues/12277#issuecomment-629633605",
            "id": 629633605,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12277",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTYzMzYwNQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/629633605/reactions"
            },
            "updated_at": "2020-05-16T11:50:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/629633605",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/886074?v=4",
                "events_url": "https://api.github.com/users/teto/events{/privacy}",
                "followers_url": "https://api.github.com/users/teto/followers",
                "following_url": "https://api.github.com/users/teto/following{/other_user}",
                "gists_url": "https://api.github.com/users/teto/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/teto",
                "id": 886074,
                "login": "teto",
                "node_id": "MDQ6VXNlcjg4NjA3NA==",
                "organizations_url": "https://api.github.com/users/teto/orgs",
                "received_events_url": "https://api.github.com/users/teto/received_events",
                "repos_url": "https://api.github.com/users/teto/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/teto/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/teto/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/teto"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I am very happy with diagnostic-nvim so it is possible to get pretty far with the current interfaces.\r\n\r\nThe point is relevant here, too: If you look at the actual code, you see ~~a _lot_ of~~(this has been reduced in recent commits) functions there that are just copied (without changes) from the built-in code (where they are local). This brings with it the danger of bitrot (every bugfix and improvement has to be backported manually -- not just to this but to all other plugins that build on core). Vice versa, bugfixes to shared code end up in the plugin and not in core.\r\n\r\nI'd argue that allowing them to (optionally)  reuse _any_ internal function would lead to a better experience. (Not going to push it further, though; just wanted to clarify my point.)",
            "created_at": "2020-05-16T11:57:34Z",
            "html_url": "https://github.com/neovim/neovim/issues/12277#issuecomment-629634446",
            "id": 629634446,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12277",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTYzNDQ0Ng==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/629634446/reactions"
            },
            "updated_at": "2020-05-16T11:59:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/629634446",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> This brings with it the danger of bitrot (every bugfix and improvement has to be backported manually -- not just to this but to all other plugins that build on core). Vice versa, bugfixes to shared code end up in the plugin and not in core.\r\n\r\nThe downside of this is that any change in neovim that changes the signatures of those functions may end up breaking plugins.\r\n\r\nI think for the long-term health of the code base - from a maintenance perspective -  it is beneficial to keep being restrictive with access to internals.\r\n\r\nLet plugin authors continue to explore what kind of functionality is useful. If that involves copy and paste so be it. The low-level building blocks with `buf_request` are already incredibly powerful.\r\n\r\nThen decide on a use-case basis whether something should be in the core to begin with, or whether it makes sense to expose functions that were not exposed in the beginning. Keep YAGNI in mind.\r\n\r\nMaking changes to LSP parts already starts becoming more painful because of BWC.\r\n\r\n\r\n\r\n\r\n\r\n",
            "created_at": "2020-05-16T15:27:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/12277#issuecomment-629663362",
            "id": 629663362,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12277",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTY2MzM2Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/629663362/reactions"
            },
            "updated_at": "2020-05-16T15:27:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/629663362",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I guess there are two aspects I'm looking to discuss, probably should have made it more clear.\r\n\r\n1. Provide some sort of configuration options (via global, global dictoinary, functions, json, ???, etc.) so that people can do a few things more easily (choose which autocmds fire for diagnostics, for example).\r\n\r\n2. Make the code more composable so you can override certain aspects of the builtin LSP.\r\n\r\nFor example, we recently merged something and used `vim.fn.inputlist` which is a fine choice. But we could have chosen to do something like make a function `util.select_input_from_strings` or make it private via `util._select_input_from_strings` and allowed people to easily override that by patching over that function (maybe they want to use FZF or denite).\r\n\r\nI think we could expose more in a way that says \"this is private and we make no guarantees it will stay working\", which the convention has been preceding underscore. This seems in some way to be a good compromise (at least initially) because we get to change those things whenever we want but if the adventurous plugin developer / personal user wants to override some aspect, they can. Over time, as we're confident that people are using X or Y, we can move them from private to public and then be concerned w/ BWC.\r\n\r\nI don't think we should expose everything, but perhaps we can keep an eye out for composability while developing and reviewing PRs so that it can allow people to customize their experience even more so. That is one thing I love about nvim. I can spend more time customizing than working ;)\r\n\r\nBut you do bring up some very good points @mfussenegger . I think we have already exposed very powerful building blocks and people are using them in exciting ways :)",
            "created_at": "2020-05-17T13:10:15Z",
            "html_url": "https://github.com/neovim/neovim/issues/12277#issuecomment-629795637",
            "id": 629795637,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12277",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTc5NTYzNw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/629795637/reactions"
            },
            "updated_at": "2020-05-17T13:10:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/629795637",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4466899?v=4",
                "events_url": "https://api.github.com/users/tjdevries/events{/privacy}",
                "followers_url": "https://api.github.com/users/tjdevries/followers",
                "following_url": "https://api.github.com/users/tjdevries/following{/other_user}",
                "gists_url": "https://api.github.com/users/tjdevries/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tjdevries",
                "id": 4466899,
                "login": "tjdevries",
                "node_id": "MDQ6VXNlcjQ0NjY4OTk=",
                "organizations_url": "https://api.github.com/users/tjdevries/orgs",
                "received_events_url": "https://api.github.com/users/tjdevries/received_events",
                "repos_url": "https://api.github.com/users/tjdevries/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tjdevries/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tjdevries/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tjdevries"
            }
        },
        {
            "author_association": "NONE",
            "body": "Just some of my opinion about easier lsp config. Is that possible to create a `lsp_config.lua` and put the configuration option in there as a table? Something like\r\n```lua\r\nM.lsp_config_option = {\r\n  diagnostic_virtual_text = true\r\n  diagnostic_sign = true\r\n...\r\n}\r\n```\r\nUsers can overwrite this by copy this file into `~/.config/nvim/lua` and overwrite it. This should at least be much better than having to copy and delete lines of code from source and modified them. ",
            "created_at": "2020-05-17T13:52:47Z",
            "html_url": "https://github.com/neovim/neovim/issues/12277#issuecomment-629802212",
            "id": 629802212,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12277",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTgwMjIxMg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 7,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 7,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/629802212/reactions"
            },
            "updated_at": "2020-05-17T14:08:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/629802212",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35623968?v=4",
                "events_url": "https://api.github.com/users/haorenW1025/events{/privacy}",
                "followers_url": "https://api.github.com/users/haorenW1025/followers",
                "following_url": "https://api.github.com/users/haorenW1025/following{/other_user}",
                "gists_url": "https://api.github.com/users/haorenW1025/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/haorenW1025",
                "id": 35623968,
                "login": "haorenW1025",
                "node_id": "MDQ6VXNlcjM1NjIzOTY4",
                "organizations_url": "https://api.github.com/users/haorenW1025/orgs",
                "received_events_url": "https://api.github.com/users/haorenW1025/received_events",
                "repos_url": "https://api.github.com/users/haorenW1025/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/haorenW1025/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/haorenW1025/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/haorenW1025"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@haorenW1025 Yes. I think we should do something similar to that. I have proposed in https://github.com/neovim/neovim/pull/12333 a way to make the configuration better than simply a table (as it's easy to mistype the table, have your table go out of date, change the value and not have it update, etc.).\r\n\r\nThis should allow us to do things like set autocmds via the \"callback\" or \"side effect\" functions in the configuration, so we don't have to litter those kind of configuration options all over the place.",
            "created_at": "2020-05-17T18:06:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/12277#issuecomment-629837600",
            "id": 629837600,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12277",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTgzNzYwMA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/629837600/reactions"
            },
            "updated_at": "2020-05-17T18:06:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/629837600",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4466899?v=4",
                "events_url": "https://api.github.com/users/tjdevries/events{/privacy}",
                "followers_url": "https://api.github.com/users/tjdevries/followers",
                "following_url": "https://api.github.com/users/tjdevries/following{/other_user}",
                "gists_url": "https://api.github.com/users/tjdevries/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tjdevries",
                "id": 4466899,
                "login": "tjdevries",
                "node_id": "MDQ6VXNlcjQ0NjY4OTk=",
                "organizations_url": "https://api.github.com/users/tjdevries/orgs",
                "received_events_url": "https://api.github.com/users/tjdevries/received_events",
                "repos_url": "https://api.github.com/users/tjdevries/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tjdevries/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tjdevries/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tjdevries"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I'm contributing to @ckipp01's nvim-lsp port of his coc-metals for the popular scala 'metals' LSP server. First of all thank you for the fantastic work done with nvim-lsp. I have done a small but fully functional POC to showcase an approach that I think will help with the configuration scenarios user will come up with: https://github.com/neovim/neovim/pull/12347\r\n\r\nI'm first focusing on the location queries, ```textDocument/definition...references```, etc. Many user configuration needs will be regarding these queries as they are an important part of the UI.\r\n\r\nI like the power of quicklists but I also think other options with previews and fuzzy search eye candy will be important to attract users from coc.nvim and vscode. I personally use vim#fzf for fuzzy selecting like preview, as it also allows to select entries to to go to cf if I want to cdo. IMO the configurability here is key. We already see some challenges like the peek_defintion request: https://github.com/neovim/neovim/pull/12232\r\n\r\nMy proposal is to accept high level callbacks as arguments to this functions if we want to override the default UI. For the location queries, the callback is function(locations) that gets the list of locations in case of no errors or locations available. We removed the error cases and sanitized the differences were location can be a string or a list. The POC is fully functional and allows my config to be:\r\n\r\n```vim\r\nnnoremap <silent> gd          <cmd>lua vim.lsp.buf.definition()<CR>\r\nif exists('fzf')\r\n  nnoremap <silent> gD        <cmd>lua vim.lsp.buf.definition { on_locations=metals.fuzzy_select }<CR>\r\nendif\r\nnnoremap <silent> gr          <cmd>lua vim.lsp.buf.references { includeDeclaration = true }<CR>\r\nnnoremap <silent> gp          <cmd>\r\n  \\lua vim.lsp.buf.definition { on_locations= function(locs) vim.lsp.util.preview_location(locs[1]) end } <CR>\r\n```\r\nIt fullfils the peek request https://github.com/neovim/neovim/pull/12232 by simply copying @clason's M.preview_location function, without any of the other extra complexity of extensions and the potential to having to rewrite functions.\r\n\r\nThis makes the configuration for these RPC requests very vim like and declarative when using lua tables like in my working config example. As a bonus they don't interact with the lsp client setup function, simplifying the code and config.\r\n\r\nI think it's also clearer to separate, both in code and in terminology, what is esentially handlers for server initiated request, e.g. like workspaceEdits or diagnostics, from the async callbacks to process the server responses to the client requests. The request handlers need to be attached and registered. On the other hand the callbacks thar process the reponse when the client sends a request, those can be passed at call time allowing the extra flexibility and clarity with IMHO no downsides, other than some extra complexity of the function composition technique. But I think it's worth it to reap the benefits of the great foundations of buf_request, and the underlying neovim infrastructure and lua engine. It really makes it shine. ",
            "created_at": "2020-05-19T21:42:04Z",
            "html_url": "https://github.com/neovim/neovim/issues/12277#issuecomment-631098910",
            "id": 631098910,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12277",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTA5ODkxMA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/631098910/reactions"
            },
            "updated_at": "2020-05-19T22:40:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/631098910",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2878996?v=4",
                "events_url": "https://api.github.com/users/landerlo/events{/privacy}",
                "followers_url": "https://api.github.com/users/landerlo/followers",
                "following_url": "https://api.github.com/users/landerlo/following{/other_user}",
                "gists_url": "https://api.github.com/users/landerlo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/landerlo",
                "id": 2878996,
                "login": "landerlo",
                "node_id": "MDQ6VXNlcjI4Nzg5OTY=",
                "organizations_url": "https://api.github.com/users/landerlo/orgs",
                "received_events_url": "https://api.github.com/users/landerlo/received_events",
                "repos_url": "https://api.github.com/users/landerlo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/landerlo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/landerlo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/landerlo"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> My proposal is to accept high level callbacks as arguments to this functions if we want to override the default UI. For the location queries, the callback is function(locations) that gets the list of locations in case of no errors or locations available.\r\n\r\n> On the other hand the callbacks thar process the reponse when the client sends a request, those can be passed at call time allowing the extra flexibility and clarity with IMHO no downsides, other than some extra complexity of the function composition technique.\r\n\r\n\r\nTo me it seems that this solution would be some kind of middle-ground to the current state. It's neither a low level API, nor high level. Having disadvantages from both. It narrows what kind of customization can be done, although that specific customization will be easier. \r\n\r\nI also fear that such an approach would be prone to leaking implementation details into the API - making it harder to change things in the future.\r\n\r\n---\r\n\r\nTo recap:\r\n\r\n1. The current request/callback model is easy to understand, and allows both users and plugins to customize pretty much anything. I think this model is working really well and don't think the overall approach should be changed.\r\n\r\n\r\n2. Customization can involve quite a bit of boilerplate\r\n\r\n\r\nI think there are several aspects and questions here:\r\n\r\n\r\n- What customizations and options do users even want? One common thing that came up so far is changing the behavior of the diagnostics (which is why https://github.com/haorenW1025/diagnostic-nvim got created)\r\n\r\n- Which customizations should be done by plugins, which should have options? My opinion here is that in a first step this could be delegated mostly to plugins - it has already happened anyway, and then we could look at what options users commonly set and introduce this into the neovim core. \r\nFor those that should have options, I think the config table/option approach referenced looks good.\r\n\r\n- What can be done to make these customizations easier? \r\n\r\nOne thing that comes to mind here is that maybe this question shouldn't focus on LSP alone, but also think outside of the LSP box and consider neovim extension in general. \r\nJust as an example as fzf over quickfix-list was mentioned: What if neovim provided an extension point independent of LSP, that allows to tweak or even override the quickfix list?\r\n\r\nAnother thought: There is quite some complexity in the LSP utils section because some of the nvim APIs don't fit well with the structures used in the language server protocol. One example is the range/position conversion (handling byteindex). Maybe what's missing and what leads to a lot of boilerplate / code copying is a lack of APIs that fit better with the given structures. Some of that is already being resolved (e.g. what is happening with a `nvim_buf_set_text` method).\r\nMaybe we can put some effort into extracting some more low-level functions - which would be useful outside of the LSP scope) - before exposing all the high and mid-level util methods.\r\n",
            "created_at": "2020-05-20T06:21:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/12277#issuecomment-631262722",
            "id": 631262722,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12277",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTI2MjcyMg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 1,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/631262722/reactions"
            },
            "updated_at": "2020-05-20T06:21:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/631262722",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> \r\n> To me it seems that this solution would be some kind of middle-ground to the current state. It's neither a low level API, nor high level. Having disadvantages from both. It narrows what kind of customization can be done, although that specific customization will be easier.\r\n> \r\n> I also fear that such an approach would be prone to leaking implementation details into the API - making it harder to change things in the future.\r\n\r\nI'd be great if you could elaborate on the downsides and the leaking API fears. Just to clarify, I'm not proposing to change what's already there for diagnostics, edits, etc. Those work great and they need to be attached and registered as they are now.\r\n\r\nI'm only focusing on the interactions started by the client that follow the RPC client request -> server response (locations, available actions, symbols) -> choice of action by the user. These involve UI and are very likely to be customised, and more importantly, can have more than one response. Peek is a great example.  One binding could call textDocument/definition and peek on the returned location and another does the jump/qf, etc. And the request is the same textDocument/definition, we cannot have a single callback for this request, and having to go lower level to have more than one callback it's going to create issues and difficulties for the user.\r\n\r\nThere is a lot of value to have these 'configured' on the binding call site, so they are orthogonal to the plugin setup and don't have interactions with them. The user can choose what they want and we just provide the util functions that compose with the reponse, i.e. jump_to_location or preview_location.\r\nSimpler configuration and less error prone than the user having to register callbacks in the setup function with more possibilities of error and misconfiguration.\r\n\r\nFor the kind of callbacks like workspaceEdit -that's most of them-, what we have works great, the user expects the edits to just work and I cannot think of a way to apply them differently. It'll be only advanced users or plugins wanting to change it and it will require careful thought anyway so the ease of use considerations are less relevant and there is safety in keeping the configurability more hidden from the average user and low level.\r\n\r\nAs an example for the metals LSP server my ideal would be to have Plug nvim-metals, nvim-diagnostics and nvim-completions, which works out of the box without having to configure anything as my lsp server executable is in the path and I don't want to change the other default like the JVM path.\r\n\r\nIt can do the setup automatically if I don't override it or provides a setup_nvim_metals( {overrides}). Then i can configure UI element for the choices and for the actions on locations codeActions in my normal key bindings. YMMV but I think is important to provide ease of use to attract people  comfortable with coc.nvim.\r\n",
            "created_at": "2020-05-20T08:16:37Z",
            "html_url": "https://github.com/neovim/neovim/issues/12277#issuecomment-631316745",
            "id": 631316745,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12277",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTMxNjc0NQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/631316745/reactions"
            },
            "updated_at": "2020-05-20T08:36:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/631316745",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2878996?v=4",
                "events_url": "https://api.github.com/users/landerlo/events{/privacy}",
                "followers_url": "https://api.github.com/users/landerlo/followers",
                "following_url": "https://api.github.com/users/landerlo/following{/other_user}",
                "gists_url": "https://api.github.com/users/landerlo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/landerlo",
                "id": 2878996,
                "login": "landerlo",
                "node_id": "MDQ6VXNlcjI4Nzg5OTY=",
                "organizations_url": "https://api.github.com/users/landerlo/orgs",
                "received_events_url": "https://api.github.com/users/landerlo/received_events",
                "repos_url": "https://api.github.com/users/landerlo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/landerlo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/landerlo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/landerlo"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Having been trained by Stackexchange never to downvote without leaving a comment, here's my take on @mfussenegger's point (which is kind of orthogonal to the initial question of exposing more low-level API, where I agree with your comment that this should be done in a more considered fashion than merely making _everything_ public).\r\n\r\nFirst, like @landerlo, I feel that your recap is a bit unfair and one-sided and requires a bit of elaboration. Second, I would argue that a clear separation of client--server communication and response handling is in the spirit of the original proposal (making a powerful lsp library with reasonable out-of-the-box defaults) and that, to the contrary, is _less_ leaky since it hides _more_ implementation (response validation and conversion) from the user wishing to configure the lsp.\r\n\r\nPolemically turning tables for a moment, the approach you seem to advocate would lead to users having to install `definition.nvim`, `typeDefinition.nvim`, `references.nvim`... just to (say) open the target in a new split<sup>1</sup>. Another use case of @landerlo's approach is to turn on wrapping in the `hover` window -- which I think metals does, and so do I in my config.\r\n\r\n(Completion.nvim is kind of different since what it does is in principle independent of LSP.) \r\n\r\n---\r\n\r\n<sup>1</sup> or briefly highlights the target symbol when jumped to -- which actually sounds quite useful, now that I think about it... 🤔 ",
            "created_at": "2020-05-20T08:27:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/12277#issuecomment-631322934",
            "id": 631322934,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12277",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTMyMjkzNA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/631322934/reactions"
            },
            "updated_at": "2020-05-20T08:56:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/631322934",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I'd be great if you could elaborate on the downsides and the leaking API fears. Just to clarify, I'm not proposing to change what's already there for diagnostics, edits, etc. Those work great and they need to be attached and registered as they are now.\r\n\r\nLet me try:\r\n\r\nI like to split use-cases into the 90-95% majority case, and then the remaining 5% special cases.\r\n\r\nIn the neovim case, I'd think that the ~90% users probably don't want to customize too much. They've a `init.vim` where they set a couple of option that they found useful. They treat it as a config file and don't want to write code.\r\n\r\nFor those, configuration options like `set lsp_diagnostics-=virtualtext` or something like that - options that feel like other \"vim\" options - would probably work best. (Similar to how `completeopt` and other stuff works). Using Lua config tables may work for them too.\r\n\r\nThe goal for them should be to make the out-of-the-box experience good, and to provide options where the preferences have a wide range or where the behavior is controversial. (E.g. the diagnostics being too aggressive popped up a lot).\r\nIf people (from the other group, further below) now want to customize X, the question shouldn't just be whether how to make X easier to customize, but also ask why they want to do that, and consider improving the out-of-box behavior for the majority group.\r\nFor example I think the `hover` output has been customized by a few, probably because the formatting of the current built-in could use some tweaks.\r\n\r\nThese users are likely also comfortable with adding plugins, for the cases where the out-of-the-box experience is not yet good enough.\r\n\r\n\r\n\r\nThen you've the remaining ~5-10%, with a very wide range of requirements and preferences, including plugin authors. Trying to provide extension points and configuration option for each and every use-case is a difficult task. That's why the low-level API is so powerful, it is generic and allows pretty much any customization.\r\n\r\n\r\nThe proposed POC (https://github.com/neovim/neovim/pull/12347) has a couple of use cases in mind. One to open the location elsewhere. So an option is added to customize that. The next user will ask to be able to add the last error message to the status line, so there will be an option for that. Then somebody wants to keep it in the quickfix list, but without opening the quickfix list. So there will be an option for that. It's `n+1` to accommodate all imaginable use-case. Each of which can already be accomplished by using `vim.lsp.buf_request(0, method, params, callback)`.\r\n\r\n(I'm aware I'm exaggerating here, but I hope the point I'm trying to make is understood)\r\n\r\nUsing `vim.lsp.buf_request(0, method, params, callback)` directly requires more boilerplate, but I think in the end it is *simpler* (not *easier*) to understand. More importantly, it keeps the API narrow and reduces complexity.\r\n\r\nIntroducing configuration options to functions that don't influence the behavior, but rather change the behavior also tends to lead to functions like this:\r\n\r\n```\r\nif user_wants_behavior_a then\r\n  do_a()\r\nelseif user_wants_behavior_b then\r\n  do_b()\r\n...\r\n```\r\n\r\nWhich to me is a sign that there really should be multiple functions instead.\r\n\r\nTo clarify my point about leaking implementation details:\r\n\r\nThe `peekDefinition` case was mentioned. Now you may add that as a callback to a function, in which case you tell the user about the implementation: This function fetches definitions, you can then customize how and where to display it. vs. having two different functions, because for a end-user peeking a definition and listing the definitions are not necessarily related.\r\n\r\n\r\nIn any case, this is just my perspective/feedback. With software there is often no right or wrong, just different trade-offs and different people value different things.\r\n",
            "created_at": "2020-05-20T18:45:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/12277#issuecomment-631656060",
            "id": 631656060,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12277",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTY1NjA2MA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/631656060/reactions"
            },
            "updated_at": "2020-05-20T18:55:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/631656060",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "If I'm able to intermingle a couple question with some comments.\r\n\r\n> As a first step it's good enough to provide a common server description interface that can be leveraged by coc, lsp-vim, LanguageClient etc.\r\n\r\nIs this actually a goal? I also wasn't around when the initial LSP conversations were happening, but I never heard this before, and didn't assume that this was actual the case. Like do we know that coc.nvim is intending to use the interface for LSP that nvim provides? My naive thought on that is that there is no way they are going to. Any insight on this?\r\n\r\nMy biggest point probably goes to the initial question posed here by @tjdevries \r\n\r\n> Develop some sort of LSP config (whether through global variables [eww] or some other method). I think this would be useful anyway in a more structured way because a lot of people have similar complaints about a few things (like updating diagnostics while in insert mode always).\r\n\r\nAt this point this is my biggest concern, and to broaden the conversation a bit, I also think that nvim-lsp should be brought into this conversation since that's where for most basic users this all starts. I know for [Metals](https://scalameta.org/metals/) for example we need to have a base configuration that is currently living in nvim-lsp that works for a user that wants the absolute bare minimum, but then if we want to actually support the other huge chunk that Metals has to offer (different detection of the root workspace, LSP extensions, commands to import the build, etc), then they need to use [nvim-metals](https://github.com/scalameta/nvim-metals). When they do that, a new set of problems arise. The user has to override some of the `init_options`, override some callbacks, and add some new callbacks in to support the LSP extensions. Some of that can be simplified and is possibly my crappy design, but if we then also introduce a config table like is outlined here https://github.com/neovim/neovim/pull/12333, then we now have like 3 different ways the user has to set stuff in order to get their LSP experience to work as desired. I know some of this will probably be smoothed out, but I think that is going to kill the user experience. Many users from coc for example are going to expect to install something, and then have everything just work.\r\n\r\nTo summarize this up in a couple points:\r\n\r\n1. I think having a centralized place for _user_ configuration is key, whether it's all contained in nvim-lsp, only in a configuration table, etc.\r\n2. I agree with @landerlo that the more UI centric settings are important. At times if someone is overriding a callback due to something small, they also may be conflicting with other plugins. As an example I override hover to get the text to wrap, but that conflicted with completion-nvim https://github.com/haorenW1025/completion-nvim/issues/63. So the more plugins that get created, I'm curious how they will all start to work together if multiple are attempting to override the same thing.\r\n",
            "created_at": "2020-05-20T19:16:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/12277#issuecomment-631672528",
            "id": 631672528,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12277",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTY3MjUyOA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/631672528/reactions"
            },
            "updated_at": "2020-05-20T19:16:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/631672528",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13974112?v=4",
                "events_url": "https://api.github.com/users/ckipp01/events{/privacy}",
                "followers_url": "https://api.github.com/users/ckipp01/followers",
                "following_url": "https://api.github.com/users/ckipp01/following{/other_user}",
                "gists_url": "https://api.github.com/users/ckipp01/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ckipp01",
                "id": 13974112,
                "login": "ckipp01",
                "node_id": "MDQ6VXNlcjEzOTc0MTEy",
                "organizations_url": "https://api.github.com/users/ckipp01/orgs",
                "received_events_url": "https://api.github.com/users/ckipp01/received_events",
                "repos_url": "https://api.github.com/users/ckipp01/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ckipp01/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ckipp01/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ckipp01"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "My impression from the development around last year's end (and the regulars may correct me on that) as well as the experience with the lsp functionality:\r\n\r\n1. The goal was to get a flexible, performant base infrastructure for lsp in together with a bare-bones but functional frontend that is more a proof of concept than a turn-key solution. Then came norcalli/nvim-common-lsp, and then some posts on reddit, and then people got excited...\r\n2. coc-nvim is based on VS Code extension and therefore a completely different ecosystem. On the other hand, vim-lsp and Language-Client make significant efforts to support both neovim and vim (in all the versions). So neither is very likely to change, especially if they aim to support older versions of neovim too.\r\n3. So the main audience (at least in my view at that time) is people implementing file-type or, rather, server-specific plugins (exactly like @ckipp01 is doing, or a texlab-nvim).\r\n4. However, after spending time with it, I find the design of the lsp functionality is inspired and so easy to get into that I would say @mfussenegger's 90/10 split is missing a sizeable percentage of people who'd never think of putting more than a dozen `let g:whatever = 1` in their `.vimrc` before that are now considering hacking lua to get the functionality _just right_. (Case in point: me, who knew zero lua and wouldn't touch vimscript with a ten-pole stick if possible.) Separating backend from frontend would lower the bar to get more people there (maybe from 10 to 20%? I don't know). And everyone of them potentially becomes a neovim contributor...\r\n5. Regarding configuration, I think the separation is clear: _server_ options go in the setup function provided by `nvim-lsp` (soon to be renamed, hopefully, and stripped of utility functions that are moved to core); `client` options go into the proposed table from #12333. \r\n",
            "created_at": "2020-05-20T19:38:43Z",
            "html_url": "https://github.com/neovim/neovim/issues/12277#issuecomment-631683682",
            "id": 631683682,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12277",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTY4MzY4Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/631683682/reactions"
            },
            "updated_at": "2020-05-20T19:38:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/631683682",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@mfussenegger I agree with the approach of limiting variability, but the POC doesn't compromise on any of those goals. On the contrary, by being more composable and not interacting with the setup and the registering of other callbacks it's IMO a simpler solution that reduces some complexity.\r\n\r\n> The `peekDefinition` case was mentioned. Now you may add that as a callback to a function, in which case you tell the user about the implementation: This function fetches definitions, you can then customize how and where to display it. vs. having two different functions, because for a end-user peeking a definition and listing the definitions are not necessarily related.\r\n\r\nThis is the problem, you suggest to have two functions. For this case we cannot have two functions because the registered callback is unique, so you propose that to have another function we have to go to a lower level and copy paste code, I don't see the need for that in cases like this as showcased in the PR.\r\n\r\nFor the plugin ecosystem to work we'll need some kind of shared configuration, but for a subset of cases like the location query cases covered in my PR the high level callback passed as an argument works well. More importantly, it doesn't interact with the setup function, the callback registering and some possible centralized part. I'm hammering again on the same point, but we really need to remove as many configuration moving parts as possible whenever we have a composable and orthogonal solution that doesn't incur in compromises or more complexity. For the 80% of the config needs I'd bet the configuration can be done in the binding by reusing some composable building blocks like jump, preview, to_qf, etc.\r\n\r\nI see the bindings I pasted and I think it's a very pleasing and powerful configuration snippet, enabled by a trivial PR that I'd argue simplifies the code. It simply bridges to the great design underneath and lua's niceties. But again, I'm biased, so if you have some particular concerns about the examples or how things could go wrong I'd love to hear. They are just an example configuration but I'd argue it'll be quite relevant for people wanting to tweak the UI of these location query actions. And these location UI tweaks are safer because they are localized in the binding call site, they don't have the risk of a ripple effect of issues if people need to touch shared config tables or setup functions where they really can screw up things if not careful. For changes in things like publishing or edits the risks need to be managed, for things like where the locations go or whether to jump or not, that risk can be eliminated for the 80% of tweaks.",
            "created_at": "2020-05-20T20:12:42Z",
            "html_url": "https://github.com/neovim/neovim/issues/12277#issuecomment-631700472",
            "id": 631700472,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12277",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTcwMDQ3Mg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/631700472/reactions"
            },
            "updated_at": "2020-05-20T20:33:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/631700472",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2878996?v=4",
                "events_url": "https://api.github.com/users/landerlo/events{/privacy}",
                "followers_url": "https://api.github.com/users/landerlo/followers",
                "following_url": "https://api.github.com/users/landerlo/following{/other_user}",
                "gists_url": "https://api.github.com/users/landerlo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/landerlo",
                "id": 2878996,
                "login": "landerlo",
                "node_id": "MDQ6VXNlcjI4Nzg5OTY=",
                "organizations_url": "https://api.github.com/users/landerlo/orgs",
                "received_events_url": "https://api.github.com/users/landerlo/received_events",
                "repos_url": "https://api.github.com/users/landerlo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/landerlo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/landerlo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/landerlo"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Regarding configuration, I think the separation is clear: server options go in the setup function provided by nvim-lsp (soon to be renamed, hopefully, and stripped of utility functions that are moved to core); client options go into the proposed table from #12333.\r\n\r\nSure, I didn't mean to imply the separation wasn't clear, but a lot of users don't care about the separation, they are just going to see that they have to got to multiple different places to set things. Not to keep bringing up coc, but users coming from coc-land will be used to having both server configuration and client configuration for all LSP related things being done in the same place, in their CocConfig. That's a _huge_ strength, because again a lot of users aren't going to care about the separation of server vs client settings.\r\n\r\nRegarding the table in #12333, I'll be honest, I don't understand it as it's presented. The value and type for a config value being checked is nice I guess, but this part I don't fully get:\r\n\r\n```\r\n`optional_on_set_function` is a function to be called when a value is set for the config.\r\n  --            It is passed the new value\r\n```\r\nSo this effect is fired when the value is set or changed? So is this meant to be changed during an active session? Can you provide a real-world example of how this table config will be used?",
            "created_at": "2020-05-21T08:20:34Z",
            "html_url": "https://github.com/neovim/neovim/issues/12277#issuecomment-631955357",
            "id": 631955357,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12277",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTk1NTM1Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/631955357/reactions"
            },
            "updated_at": "2020-05-21T08:34:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/631955357",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13974112?v=4",
                "events_url": "https://api.github.com/users/ckipp01/events{/privacy}",
                "followers_url": "https://api.github.com/users/ckipp01/followers",
                "following_url": "https://api.github.com/users/ckipp01/following{/other_user}",
                "gists_url": "https://api.github.com/users/ckipp01/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ckipp01",
                "id": 13974112,
                "login": "ckipp01",
                "node_id": "MDQ6VXNlcjEzOTc0MTEy",
                "organizations_url": "https://api.github.com/users/ckipp01/orgs",
                "received_events_url": "https://api.github.com/users/ckipp01/received_events",
                "repos_url": "https://api.github.com/users/ckipp01/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ckipp01/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ckipp01/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ckipp01"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@landerlo  I think I get your point better now. I saw it too much under the lenses of \"strategy for LSP configuration\" instead of the more concrete case that you are trying to address there. So my remarks were more on a meta level and probably not useful feedback for the POC PR.\r\n\r\n\r\n---\r\n\r\nI agree also with @ckipp01  that the current split with nvim-lsp is a bit problematic. \r\n\r\n`nvim-jdtls` also needs `init_options` and extended client capabilities for some of the functionality. Currently it looks as if the best option is to delegate that responsibility to the users, which makes using it a bit more difficult.\r\n\r\nBut I hope this will get better once nvim-lsp focuses more on pure configuration and some of the utilities (like the buffer/client attach manager and some of path functions) move into core.\r\n",
            "created_at": "2020-05-21T08:32:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/12277#issuecomment-631960330",
            "id": 631960330,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12277",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTk2MDMzMA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 4,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/631960330/reactions"
            },
            "updated_at": "2020-05-21T08:32:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/631960330",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Yes, I was suspecting I hadn't being clear on the intent and  I completely agree with the meta level approach you outlined.\r\n\r\nThe gist of what I'm proposing for how to have composable building blocks is an extra layering of callbacks: e.g. ```process_location_response_callback(on_locations)``` so the outer callback can do the nitty gritty and sanitize, e.g. for a single location some servers return string and other returns array of one element.\r\n\r\nThe result is passed to the higher lever callback that only takes a  sanitized array of locations of at least one element tha's why is easy to pass function(locs) lsp.util.jump_to_locations(locs[1]) end. This layering of callbacks is the equivalent of decomposing functions: f(g(c)) but in the async world, and I havent's seen it used and I think it can simplify things a lot. Leverages the integration of the callback system and lua engine, making this viable.\r\n\r\nI'm saying stick to protocol and have one 80% callback. If somebody wants to do something different when there are no locations returned then they replace the outer level and do it. I think we should encourage and leverage this calllback composition technique where the outer layer does the nitty gritty of range calculation, etc. and passing a canonical list of elements that can be easily processed in a one liner function that pass them to other utiliy functions.\r\n\r\nAs in my PR the default UI behaviour is still kept, but now is separated to a smaller composable function that it can be easily replaced: \r\n```vim \r\nM.location_req_default_callback = function(locations)\r\n  if #locations == 1 then\r\n    util.jump_to_location(locations[1])\r\n  else\r\n    util.set_qflist(util.locations_to_items(locations))\r\n    api.nvim_command(\"copen\")\r\n    api.nvim_command(\"wincmd p\")\r\n  end\r\nend```",
            "created_at": "2020-05-21T08:56:54Z",
            "html_url": "https://github.com/neovim/neovim/issues/12277#issuecomment-631970819",
            "id": 631970819,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12277",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTk3MDgxOQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/631970819/reactions"
            },
            "updated_at": "2020-05-21T09:01:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/631970819",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2878996?v=4",
                "events_url": "https://api.github.com/users/landerlo/events{/privacy}",
                "followers_url": "https://api.github.com/users/landerlo/followers",
                "following_url": "https://api.github.com/users/landerlo/following{/other_user}",
                "gists_url": "https://api.github.com/users/landerlo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/landerlo",
                "id": 2878996,
                "login": "landerlo",
                "node_id": "MDQ6VXNlcjI4Nzg5OTY=",
                "organizations_url": "https://api.github.com/users/landerlo/orgs",
                "received_events_url": "https://api.github.com/users/landerlo/received_events",
                "repos_url": "https://api.github.com/users/landerlo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/landerlo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/landerlo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/landerlo"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@mfussenegger Not to beat a dead horse, but another argument for exposing utility functions (marked as `_private`) is to be able to write tests for them (which otherwise isn't possible with the current infrastructure).",
            "created_at": "2020-05-30T09:01:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/12277#issuecomment-636302118",
            "id": 636302118,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12277",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYzNjMwMjExOA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/636302118/reactions"
            },
            "updated_at": "2020-05-30T09:01:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/636302118",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Inspired by @landerlo 's PR, I have begun work on extending the idea in my PR that was originally just about the config table ( https://github.com/neovim/neovim/pull/12333 ). The end result would allow configuration like the below. The PR is currently still WIP (and names are up for discussion), but I think this snippet gives an example of how easy it could be to chain together multiple, built-in callbacks to provide a very extensible experience for end-users with no copy and paste for small nit picks.\r\n\r\n```vim\r\nlua Location = require('vim.lsp.actions').Location\r\n\r\n\" Jump & then highlight the definition\r\nnnoremap <space>gd <cmd>lua vim.lsp.buf.definition { callbacks = { Location.jump_first, Location.highlight } }<CR>\r\n\r\n\" Preview definition\r\nnnoremap <space>pd <cmd>lua vim.lsp.buf.definition { callbacks = Location.preview }<CR>\r\n```\r\n\r\nThis method provides a variety of other benefits as well, but I need to settle on some implementation details before I can describe them easily in comment form.\r\n\r\nP.S. I have been writing up a response to several of the discussions above but it is taking a long time and I prefer code as example rather than me trying to explain everything. ",
            "created_at": "2020-06-01T16:28:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/12277#issuecomment-636970694",
            "id": 636970694,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12277",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYzNjk3MDY5NA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 5,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 3,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 8,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/636970694/reactions"
            },
            "updated_at": "2020-06-01T16:29:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/636970694",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4466899?v=4",
                "events_url": "https://api.github.com/users/tjdevries/events{/privacy}",
                "followers_url": "https://api.github.com/users/tjdevries/followers",
                "following_url": "https://api.github.com/users/tjdevries/following{/other_user}",
                "gists_url": "https://api.github.com/users/tjdevries/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tjdevries",
                "id": 4466899,
                "login": "tjdevries",
                "node_id": "MDQ6VXNlcjQ0NjY4OTk=",
                "organizations_url": "https://api.github.com/users/tjdevries/orgs",
                "received_events_url": "https://api.github.com/users/tjdevries/received_events",
                "repos_url": "https://api.github.com/users/tjdevries/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tjdevries/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tjdevries/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tjdevries"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "There have now been multiple requests for the ability to let plugins add support for certain LSP capabilities (#12573: Support for snippets completion items, #12392: Support for `$/progress`).\r\n\r\nEdit: [Filed an issue](https://github.com/neovim/neovim/issues/12833).",
            "created_at": "2020-09-02T08:52:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/12277#issuecomment-685455358",
            "id": 685455358,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12277",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY4NTQ1NTM1OA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/685455358/reactions"
            },
            "updated_at": "2020-09-02T09:01:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/685455358",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/620981?v=4",
                "events_url": "https://api.github.com/users/runiq/events{/privacy}",
                "followers_url": "https://api.github.com/users/runiq/followers",
                "following_url": "https://api.github.com/users/runiq/following{/other_user}",
                "gists_url": "https://api.github.com/users/runiq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/runiq",
                "id": 620981,
                "login": "runiq",
                "node_id": "MDQ6VXNlcjYyMDk4MQ==",
                "organizations_url": "https://api.github.com/users/runiq/orgs",
                "received_events_url": "https://api.github.com/users/runiq/received_events",
                "repos_url": "https://api.github.com/users/runiq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/runiq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/runiq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/runiq"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "This is resolved with `vim.lsp.with` which you can see an example of with `vim.lsp.diagnostic.on_publish_diagnostics()` in the latest master.",
            "created_at": "2020-11-13T03:54:18Z",
            "html_url": "https://github.com/neovim/neovim/issues/12277#issuecomment-726491783",
            "id": 726491783,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12277",
            "node_id": "MDEyOklzc3VlQ29tbWVudDcyNjQ5MTc4Mw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 3,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/726491783/reactions"
            },
            "updated_at": "2020-11-13T03:54:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/726491783",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4466899?v=4",
                "events_url": "https://api.github.com/users/tjdevries/events{/privacy}",
                "followers_url": "https://api.github.com/users/tjdevries/followers",
                "following_url": "https://api.github.com/users/tjdevries/following{/other_user}",
                "gists_url": "https://api.github.com/users/tjdevries/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tjdevries",
                "id": 4466899,
                "login": "tjdevries",
                "node_id": "MDQ6VXNlcjQ0NjY4OTk=",
                "organizations_url": "https://api.github.com/users/tjdevries/orgs",
                "received_events_url": "https://api.github.com/users/tjdevries/received_events",
                "repos_url": "https://api.github.com/users/tjdevries/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tjdevries/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tjdevries/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tjdevries"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "`on_func` https://github.com/neovim/neovim/pull/22598 is a proposed generalization of `vim.lsp.with`. Though the ideal solution for LSP extensions is https://github.com/neovim/neovim/pull/22598#issuecomment-1463367606 : \r\n\r\n> * Have some kind of future/promise/async-thunk/whatever (relates a bit to [Lua: structured concurrency, Promises, task pipelines #19624](https://github.com/neovim/neovim/issues/19624)) that each of the `vim.lsp.buf` methods returns that allows to\r\n>   a) cancel\r\n>   b) use the _synthesized_ result of the operation by being able to attach an additional callback or map the result. This would address [feat(lsp): return result of buf_request() in LSP functions #18372](https://github.com/neovim/neovim/pull/18372) and lots of other feature requests.\r\n>   c) await (coroutine aware) or get(blocking) the result.\r\n>   I already have some local version where I played around with this a bit. There I also have a new `vim.lsp.request` that would replace `buf_request`, `buf_request_all` and `buf_request_sync` and also solve the mixed-encoding warnings.\r\n> * Maybe add a `LspResponse` autocmd that's triggered whenever a response is received with `data` set to the payload as a generic listener mechanism.\r\n\r\n",
            "created_at": "2024-09-29T22:33:39Z",
            "html_url": "https://github.com/neovim/neovim/issues/12277#issuecomment-2381635929",
            "id": 2381635929,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/12277",
            "node_id": "IC_kwDOAPphoM6N9OFZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2381635929/reactions"
            },
            "updated_at": "2024-09-29T22:33:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2381635929",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comments": 23,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/12277/comments",
    "created_at": "2020-05-08T13:51:58Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/12277/events",
    "html_url": "https://github.com/neovim/neovim/issues/12277",
    "id": 614756514,
    "labels": [
        {
            "color": "FBCA04",
            "default": false,
            "description": "issue needs attention from an expert, or PR proposes significant changes to architecture or API",
            "id": 212680983,
            "name": "needs:discussion",
            "node_id": "MDU6TGFiZWwyMTI2ODA5ODM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/needs:discussion"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/12277/labels{/name}",
    "locked": true,
    "milestone": null,
    "node_id": "MDU6SXNzdWU2MTQ3NTY1MTQ=",
    "number": 12277,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 2,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 2,
        "url": "https://api.github.com/repos/neovim/neovim/issues/12277/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/12277/timeline",
    "title": "Lua: Strategy for LSP configuration",
    "updated_at": "2024-09-29T22:33:51Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/12277",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/4466899?v=4",
        "events_url": "https://api.github.com/users/tjdevries/events{/privacy}",
        "followers_url": "https://api.github.com/users/tjdevries/followers",
        "following_url": "https://api.github.com/users/tjdevries/following{/other_user}",
        "gists_url": "https://api.github.com/users/tjdevries/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/tjdevries",
        "id": 4466899,
        "login": "tjdevries",
        "node_id": "MDQ6VXNlcjQ0NjY4OTk=",
        "organizations_url": "https://api.github.com/users/tjdevries/orgs",
        "received_events_url": "https://api.github.com/users/tjdevries/received_events",
        "repos_url": "https://api.github.com/users/tjdevries/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/tjdevries/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tjdevries/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/tjdevries"
    }
}