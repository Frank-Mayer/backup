{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\nPaths to network storages in Windows starts with double backslashes `\\\\` but is broken when passed to `vim.fs.normalize`.\r\nI think this issue was introduced in https://github.com/neovim/neovim/pull/22791. Could you give me your opinion @lewis6991 ?\r\n\r\nSuch examples are as below.\r\n\r\n- `\\\\wsl$\\Ubuntu\\home\\user`\r\n- `\\\\127.0.0.1\\path`\r\n\r\nWhen passed to `vim.fs.normalize`, the first backslash is deleted.\r\n\r\n```lua\r\nvim.print(vim.fs.normalize([[\\\\wsl$\\Ubuntu\\home\\user]]))\r\n--> /wsl$/Ubuntu/home/user\r\n```\n\n### Steps to reproduce\n\n```lua\r\nvim.print(vim.fs.normalize([[\\\\wsl$\\Ubuntu\\home\\user]]))\r\n--> /wsl$/Ubuntu/home/user\r\n```\n\n### Expected behavior\n\n```lua\r\nvim.print(vim.fs.normalize([[\\\\wsl$\\Ubuntu\\home\\user]]))\r\n-- This should return //wsl$/Ubuntu/home/user, with double slash at the front.\r\n```\n\n### Neovim version (nvim -v)\n\nnightly\n\n### Vim (not Nvim) behaves the same?\n\nNo. It does not have `vim.fs.*`.\n\n### Operating system/version\n\nWindows 10\n\n### Terminal name/version\n\nWindows Terminal Preview\n\n### $TERM environment variable\n\n''\n\n### Installation\n\nwinget",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "I'm not sure if UNC paths should be supported in `vim.fs` since they have no mapping to unix. The most reasonable thing I can think of is the current behaviour of `\\\\` -> `/`.\r\n\r\nThoughts @gpanders ",
            "created_at": "2024-01-19T12:00:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/27068#issuecomment-1900287481",
            "id": 1900287481,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27068",
            "node_id": "IC_kwDOAPphoM5xRBX5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1900287481/reactions"
            },
            "updated_at": "2024-01-19T12:00:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1900287481",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">The most reasonable thing I can think of is the current behaviour of \\\\ -> /.\r\n\r\nYep I agree, can't think of much else we could do.",
            "created_at": "2024-01-19T14:20:29Z",
            "html_url": "https://github.com/neovim/neovim/issues/27068#issuecomment-1900506733",
            "id": 1900506733,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27068",
            "node_id": "IC_kwDOAPphoM5xR25t",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1900506733/reactions"
            },
            "updated_at": "2024-01-19T14:20:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1900506733",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "NONE",
            "body": "> The most reasonable thing I can think of is the current behaviour of `\\\\` -> `/`.\r\n\r\nThis is very unfortunate.\r\n\r\nI do need the information that the path starts with a double slash, but I want to evaluate that after `expand_env`, so I can't just check it against the path before running this function as well.\r\n\r\nCould you add an option something like `opts.keep_dup_slashes (default: false)` that does not delete the duplicated slashes, and return the slashes as-is? (don't `:gsub('/+', '/')`).\r\n\r\nI'd love to hear your opinions @lewis6991 @gpanders .\r\n\r\nBTW, I don't have problem with `gsub('/+$', '')` (I hope this regex is correct) to delete the trailing slash.",
            "created_at": "2024-01-19T19:05:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/27068#issuecomment-1900957987",
            "id": 1900957987,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27068",
            "node_id": "IC_kwDOAPphoM5xTlEj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1900957987/reactions"
            },
            "updated_at": "2024-01-19T19:30:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1900957987",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41065736?v=4",
                "events_url": "https://api.github.com/users/pysan3/events{/privacy}",
                "followers_url": "https://api.github.com/users/pysan3/followers",
                "following_url": "https://api.github.com/users/pysan3/following{/other_user}",
                "gists_url": "https://api.github.com/users/pysan3/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pysan3",
                "id": 41065736,
                "login": "pysan3",
                "node_id": "MDQ6VXNlcjQxMDY1NzM2",
                "organizations_url": "https://api.github.com/users/pysan3/orgs",
                "received_events_url": "https://api.github.com/users/pysan3/received_events",
                "repos_url": "https://api.github.com/users/pysan3/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pysan3/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pysan3/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pysan3"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Like I've already said. It's out of scope for`vim.fs` to handle UNC paths like this since they cannot be represented as Unix style paths.\n\nI suggest you handle this specially with custom code. `vim.fs.normaliize` is only a few lines of code anyway.",
            "created_at": "2024-01-26T01:50:52Z",
            "html_url": "https://github.com/neovim/neovim/issues/27068#issuecomment-1911282622",
            "id": 1911282622,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27068",
            "node_id": "IC_kwDOAPphoM5x69u-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1911282622/reactions"
            },
            "updated_at": "2024-01-26T01:52:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1911282622",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "NONE",
            "body": "@lewis6991 \r\n\r\nThanks for your feedback. However, I don't see any doc that states that `fs.normalize` (has to) supports Unix style paths, and even if not, imo I don't see a reason.\r\n\r\nBesides, my PR is not meant to support UNC paths (above is just one usecase example) but it is just to add one option to branch out `gsub(\"/+\", \"/\")` since slashes may include important information. And as the option defaults to true, this does not bring any breaking changes as well.\r\n\r\nMay I ask you why you want to stick to UNIX paths even though it is not mentioned anywhere in the docs?\r\n\r\nPS. It's actually not just a [few lines of code](https://github.com/neovim/neovim/blob/6116495e6e6d3508eb99720faad7e55ba7cbe978/runtime/lua/vim/fs.lua#L321-L370) now. It's become pretty complicated (eg detect `C:/`) that I don't want to reimplement just because of `gsub(\"/+\", \"/\")`.",
            "created_at": "2024-01-26T02:18:06Z",
            "html_url": "https://github.com/neovim/neovim/issues/27068#issuecomment-1911303964",
            "id": 1911303964,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27068",
            "node_id": "IC_kwDOAPphoM5x7C8c",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1911303964/reactions"
            },
            "updated_at": "2024-01-26T02:18:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1911303964",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41065736?v=4",
                "events_url": "https://api.github.com/users/pysan3/events{/privacy}",
                "followers_url": "https://api.github.com/users/pysan3/followers",
                "following_url": "https://api.github.com/users/pysan3/following{/other_user}",
                "gists_url": "https://api.github.com/users/pysan3/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pysan3",
                "id": 41065736,
                "login": "pysan3",
                "node_id": "MDQ6VXNlcjQxMDY1NzM2",
                "organizations_url": "https://api.github.com/users/pysan3/orgs",
                "received_events_url": "https://api.github.com/users/pysan3/received_events",
                "repos_url": "https://api.github.com/users/pysan3/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pysan3/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pysan3/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pysan3"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Thanks for your feedback. However, I don't see any doc that states that fs.normalize (has to) supports Unix style paths, and even if not, imo I don't see a reason.\n\nIt's implied as it outputs paths with `/` which are Unix paths. UNC paths use `\\`. Therefore paths that begin with `//` don't mean anything.\n\n> PS. It's actually not just a few lines of code now. It's become pretty complicated (eg detect C:/) that I don't want to reimplement just because of gsub(\"/+\", \"/\").\n\nI'd prefer we don't make it any more complicated to support something that has no official meaning.",
            "created_at": "2024-01-26T02:20:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/27068#issuecomment-1911306123",
            "id": 1911306123,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27068",
            "node_id": "IC_kwDOAPphoM5x7DeL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1911306123/reactions"
            },
            "updated_at": "2024-01-26T02:22:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1911306123",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "NONE",
            "body": "> It's implied as it outputs paths with `/` which are Unix paths. UNC paths use `\\`. Therefore paths that begin with `//` don't mean anything.\r\n\r\nSince the user must toggle the option off manually, `//` must mean _something_ important to that user and he must be aware of that. And let me reiterate that my PR is not meant to support UNC paths but it is just to add one option to branch out gsub(\"/+\", \"/\").\r\n\r\n> > PS. It's actually not just a few lines of code now. It's become pretty complicated (eg detect C:/) that I don't want to reimplement just because of gsub(\"/+\", \"/\").\r\n> \r\n> I'd prefer we don't make it any more complicated to support something that has no official meaning.\r\n\r\n`//home//user//` is a valid Unix style path so I think unix commands have no problems handling them.\r\n\r\nCould you advise me if there's a way to workaround `gsub(\"/+\", \"/\")`? That would be very helpful.",
            "created_at": "2024-01-26T02:50:30Z",
            "html_url": "https://github.com/neovim/neovim/issues/27068#issuecomment-1911326088",
            "id": 1911326088,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27068",
            "node_id": "IC_kwDOAPphoM5x7IWI",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1911326088/reactions"
            },
            "updated_at": "2024-01-26T02:50:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1911326088",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41065736?v=4",
                "events_url": "https://api.github.com/users/pysan3/events{/privacy}",
                "followers_url": "https://api.github.com/users/pysan3/followers",
                "following_url": "https://api.github.com/users/pysan3/following{/other_user}",
                "gists_url": "https://api.github.com/users/pysan3/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pysan3",
                "id": 41065736,
                "login": "pysan3",
                "node_id": "MDQ6VXNlcjQxMDY1NzM2",
                "organizations_url": "https://api.github.com/users/pysan3/orgs",
                "received_events_url": "https://api.github.com/users/pysan3/received_events",
                "repos_url": "https://api.github.com/users/pysan3/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pysan3/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pysan3/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pysan3"
            }
        }
    ],
    "comments": 7,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/27068/comments",
    "created_at": "2024-01-17T18:29:13Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/27068/events",
    "html_url": "https://github.com/neovim/neovim/issues/27068",
    "id": 2086747809,
    "labels": [
        {
            "color": "f9d0c4",
            "default": true,
            "description": "issues reporting wrong behavior",
            "id": 77997474,
            "name": "bug",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3NA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug"
        },
        {
            "color": "d4c5f9",
            "default": false,
            "description": null,
            "id": 109461219,
            "name": "platform:windows",
            "node_id": "MDU6TGFiZWwxMDk0NjEyMTk=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/platform:windows"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/27068/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "I_kwDOAPphoM58YT6h",
    "number": 27068,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/27068/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/27068/timeline",
    "title": "BUG: `vim.fs.normalize` breaks Windows network storage paths.",
    "updated_at": "2024-01-26T02:50:31Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/27068",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/41065736?v=4",
        "events_url": "https://api.github.com/users/pysan3/events{/privacy}",
        "followers_url": "https://api.github.com/users/pysan3/followers",
        "following_url": "https://api.github.com/users/pysan3/following{/other_user}",
        "gists_url": "https://api.github.com/users/pysan3/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/pysan3",
        "id": 41065736,
        "login": "pysan3",
        "node_id": "MDQ6VXNlcjQxMDY1NzM2",
        "organizations_url": "https://api.github.com/users/pysan3/orgs",
        "received_events_url": "https://api.github.com/users/pysan3/received_events",
        "repos_url": "https://api.github.com/users/pysan3/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/pysan3/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pysan3/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/pysan3"
    }
}