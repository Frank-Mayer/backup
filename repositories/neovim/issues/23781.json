{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "### Problem\r\n\r\nNeovim crashes.\r\n\r\n### Steps to reproduce\r\n\r\n```\r\nprintf 'Â”' | nvim --embed\r\n```\r\n\r\n### Expected behavior\r\n\r\nNo crash. Note that while this reproducer may seem contrived, it actually comes from an actual use case (piping messagepack commands to an embedded neovim from the shell).\r\n\r\n\r\nThis crash may or may not be related to https://github.com/neovim/neovim/issues/21604 .\r\n\r\n### Neovim version (nvim -v)\r\n\r\n8e6971695383047ee5ba2921c91d98acb18c6d7a\r\n\r\n### Vim (not Nvim) behaves the same?\r\n\r\nN/A\r\n\r\n### Operating system/version\r\n\r\nlinux\r\n\r\n### Terminal name/version\r\n\r\nN/A\r\n\r\n### $TERM environment variable\r\n\r\nN/A\r\n\r\n### Installation\r\n\r\nBuilt from source",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "So I came across the exact same issue, but my payload was valid msgpack (but slightly invalid rpc because I made a mistake).\r\n\r\nHere is a trace:\r\n\r\n```gdb\r\nProgram received signal SIGABRT, Aborted.\r\n0x00007f6d37f94fec in __pthread_kill_implementation () from /gnu/store/gsjczqir1wbz8p770zndrpw4rnppmxi3-glibc-2.35/lib/libc.so.6\r\n\r\n(ins)(gdb) bt\r\n#0  0x00007f6d37f94fec in __pthread_kill_implementation () from /gnu/store/gsjczqir1wbz8p770zndrpw4rnppmxi3-glibc-2.35/lib/libc.so.6\r\n#1  0x00007f6d37f4b202 in raise () from /gnu/store/gsjczqir1wbz8p770zndrpw4rnppmxi3-glibc-2.35/lib/libc.so.6\r\n#2  0x00007f6d37f3645b in abort () from /gnu/store/gsjczqir1wbz8p770zndrpw4rnppmxi3-glibc-2.35/lib/libc.so.6\r\n#3  0x00007f6d37f36395 in __assert_fail_base.cold () from /gnu/store/gsjczqir1wbz8p770zndrpw4rnppmxi3-glibc-2.35/lib/libc.so.6\r\n#4  0x00007f6d37f444d2 in __assert_fail () from /gnu/store/gsjczqir1wbz8p770zndrpw4rnppmxi3-glibc-2.35/lib/libc.so.6\r\n#5  0x00000000005f9771 in rbuffer_consumed (buf=buf@entry=0xe4b880, count=<optimized out>) at /tmp/guix-build-neovim-0.9.1.drv-0/source/src/nvim/rbuffer.c:144\r\n#6  0x00000000005f9792 in rbuffer_consumed_compact (buf=0xe4b880, count=<optimized out>) at /tmp/guix-build-neovim-0.9.1.drv-0/source/src/nvim/rbuffer.c:166\r\n#7  0x00000000005b3325 in receive_msgpack (stream=<optimized out>, rbuf=0xe4b880, c=<optimized out>, data=0xe4b0a0, eof=<optimized out>)\r\n    at /tmp/guix-build-neovim-0.9.1.drv-0/source/src/nvim/msgpack_rpc/channel.c:305\r\n#8  0x0000000000518040 in read_event (argv=argv@entry=0x7ffd06e966d0) at /tmp/guix-build-neovim-0.9.1.drv-0/source/src/nvim/event/rstream.c:192\r\n#9  0x000000000051812c in invoke_read_cb (stream=stream@entry=0xe4b0c0, count=count@entry=14, eof=eof@entry=false)\r\n    at /tmp/guix-build-neovim-0.9.1.drv-0/source/src/nvim/event/rstream.c:205\r\n#10 0x000000000051967c in read_cb (uvstream=<optimized out>, cnt=14, buf=<optimized out>) at /tmp/guix-build-neovim-0.9.1.drv-0/source/src/nvim/event/rstream.c:134\r\n#11 0x00007f6d3813e7b7 in ?? () from /gnu/store/f8xqz1n89vdm6cf609l6fmqrhi979xbp-libuv-1.43.0/lib/libuv.so.1\r\n#12 0x00007f6d3813f058 in ?? () from /gnu/store/f8xqz1n89vdm6cf609l6fmqrhi979xbp-libuv-1.43.0/lib/libuv.so.1\r\n#13 0x00007f6d38146ad5 in ?? () from /gnu/store/f8xqz1n89vdm6cf609l6fmqrhi979xbp-libuv-1.43.0/lib/libuv.so.1\r\n#14 0x00007f6d38134474 in uv_run () from /gnu/store/f8xqz1n89vdm6cf609l6fmqrhi979xbp-libuv-1.43.0/lib/libuv.so.1\r\n#15 0x00000000005145df in loop_uv_run (loop=loop@entry=0x7dbba0 <main_loop>, ms=-1, once=once@entry=true)\r\n    at /tmp/guix-build-neovim-0.9.1.drv-0/source/src/nvim/event/loop.c:65\r\n#16 0x00000000005151b8 in loop_poll_events (loop=0x7dbba0 <main_loop>, ms=<optimized out>) at /tmp/guix-build-neovim-0.9.1.drv-0/source/src/nvim/event/loop.c:87\r\n#17 0x00000000005e4196 in inbuf_poll (ms=ms@entry=-1, events=events@entry=0xe014e0) at /tmp/guix-build-neovim-0.9.1.drv-0/source/src/nvim/os/input.c:459\r\n#18 0x00000000005e4697 in os_inchar (buf=0x0, maxlen=0, ms=<optimized out>, tb_change_cnt=1, events=0xe014e0)\r\n    at /tmp/guix-build-neovim-0.9.1.drv-0/source/src/nvim/os/input.c:143\r\n#19 0x0000000000654ef4 in state_enter (s=0x7ffd06e99bd0) at /tmp/guix-build-neovim-0.9.1.drv-0/source/src/nvim/state.c:78\r\n#20 0x00000000005b8fc6 in normal_enter (cmdwin=<optimized out>, noexmode=<optimized out>) at /tmp/guix-build-neovim-0.9.1.drv-0/source/src/nvim/normal.c:497\r\n#21 0x00000000004581f4 in main (argc=<optimized out>, argv=<optimized out>) at /tmp/guix-build-neovim-0.9.1.drv-0/source/src/nvim/main.c:641\r\n```\r\n\r\nThe assertion being hit in line 144 is \r\n\r\n```\r\nassert(count && count <= buf->size);\r\n```\r\n\r\ngdb also shows us a bit more about the buffer\r\n\r\n```\r\n(ins)(gdb) p buf->size \r\n$4 = 14\r\n(ins)(gdb) p buf->data\r\n$14 = (void *) 0xe4b0c0\r\n(ins)(gdb) x/14xb buf->data\r\n0xe4b0c0:       0x01    0x00    0x00    0x00    0x00    0x00    0x00    0x00\r\n0xe4b0c8:       0xc0    0xb0    0xe4    0x00    0x00    0x00\r\n```\r\n\r\nThat data does not look like my msgpack payload, the size is correct in that my raw msgpack is 14 bytes long (hex 9400a57265716964a46e616d6590).\r\n\r\nGoing up the stack trace, the count value has been optimized out and I lacked the source files when I started gdb, but hopefully I loaded them properly. The original caller is receive_msgpack in line 305, and consumed is just size - p->read_size.\r\n\r\n```gdb\r\n(ins)(gdb) up\r\n#7  0x00000000005b3325 in receive_msgpack (stream=<optimized out>, rbuf=0xe4b880, c=<optimized out>, data=0xe4b0a0, eof=<optimized out>)\r\n    at /tmp/guix-build-neovim-0.9.1.drv-0/source/src/nvim/msgpack_rpc/channel.c:305\r\n305       rbuffer_consumed_compact(rbuf, consumed);\r\n(ins)(gdb) list\r\n300       size_t size = 0;\r\n301       p->read_ptr = rbuffer_read_ptr(rbuf, &size);\r\n302       p->read_size = size;\r\n303       parse_msgpack(channel);\r\n304       size_t consumed = size - p->read_size;\r\n305       rbuffer_consumed_compact(rbuf, consumed);\r\n306\r\n307     end:\r\n308       channel_decref(channel);\r\n309     }\r\n```\r\n\r\nHowever it looks like consumed will end up begin 0, which would explain the failed assert\r\n\r\n```gdb\r\n(ins)(gdb) p size\r\n$19 = 14\r\n(ins)(gdb) p p->read_size \r\n$20 = 14\r\n```\r\n\r\nStill need to dig inside rbuffer_read_ptr to see what is happening.",
            "created_at": "2023-08-12T18:33:52Z",
            "html_url": "https://github.com/neovim/neovim/issues/23781#issuecomment-1676046632",
            "id": 1676046632,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23781",
            "node_id": "IC_kwDOAPphoM5j5nEo",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1676046632/reactions"
            },
            "updated_at": "2023-08-12T18:33:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1676046632",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/715238?v=4",
                "events_url": "https://api.github.com/users/equalsraf/events{/privacy}",
                "followers_url": "https://api.github.com/users/equalsraf/followers",
                "following_url": "https://api.github.com/users/equalsraf/following{/other_user}",
                "gists_url": "https://api.github.com/users/equalsraf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/equalsraf",
                "id": 715238,
                "login": "equalsraf",
                "node_id": "MDQ6VXNlcjcxNTIzOA==",
                "organizations_url": "https://api.github.com/users/equalsraf/orgs",
                "received_events_url": "https://api.github.com/users/equalsraf/received_events",
                "repos_url": "https://api.github.com/users/equalsraf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/equalsraf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/equalsraf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/equalsraf"
            }
        },
        {
            "author_association": "NONE",
            "body": "`unpacker_parse_header` doesn't update Unpacker's `read_ptr` and `read_size` in case of an error, any invalid header should crash nvim \r\nThis patch seems to fix the issue:\r\n```diff\r\ndiff --git a/src/nvim/msgpack_rpc/unpacker.c b/src/nvim/msgpack_rpc/unpacker.c\r\nindex c3b1022db..d14d06f95 100644\r\n--- a/src/nvim/msgpack_rpc/unpacker.c\r\n+++ b/src/nvim/msgpack_rpc/unpacker.c\r\n@@ -202,13 +202,10 @@ bool unpacker_parse_header(Unpacker *p)\r\n   mpack_token_t tok;\r\n   int result;\r\n \r\n-  const char *data = p->read_ptr;\r\n-  size_t size = p->read_size;\r\n-\r\n   assert(!ERROR_SET(&p->unpack_error));\r\n \r\n #define NEXT(tok) \\\r\n-  result = mpack_read(&p->reader, &data, &size, &tok); \\\r\n+  result = mpack_read(&p->reader, &p->read_ptr, &p->read_size, &tok); \\\r\n   if (result) { goto error; }\r\n \r\n   NEXT(tok);\r\n@@ -257,8 +254,6 @@ bool unpacker_parse_header(Unpacker *p)\r\n                                              tok.length, &p->unpack_error);\r\n   }\r\n \r\n-  p->read_ptr = data;\r\n-  p->read_size = size;\r\n   return true;\r\n #undef NEXT\r\n \r\n```",
            "created_at": "2023-08-12T22:52:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/23781#issuecomment-1676134017",
            "id": 1676134017,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23781",
            "node_id": "IC_kwDOAPphoM5j58aB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1676134017/reactions"
            },
            "updated_at": "2023-08-12T22:52:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1676134017",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/105592020?v=4",
                "events_url": "https://api.github.com/users/nwounkn/events{/privacy}",
                "followers_url": "https://api.github.com/users/nwounkn/followers",
                "following_url": "https://api.github.com/users/nwounkn/following{/other_user}",
                "gists_url": "https://api.github.com/users/nwounkn/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nwounkn",
                "id": 105592020,
                "login": "nwounkn",
                "node_id": "U_kgDOBks01A",
                "organizations_url": "https://api.github.com/users/nwounkn/orgs",
                "received_events_url": "https://api.github.com/users/nwounkn/received_events",
                "repos_url": "https://api.github.com/users/nwounkn/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nwounkn/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nwounkn/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nwounkn"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/23781/comments",
    "created_at": "2023-05-27T05:56:15Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/23781/events",
    "html_url": "https://github.com/neovim/neovim/issues/23781",
    "id": 1728478459,
    "labels": [
        {
            "color": "c7def8",
            "default": false,
            "description": null,
            "id": 242522707,
            "name": "rpc",
            "node_id": "MDU6TGFiZWwyNDI1MjI3MDc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/rpc"
        },
        {
            "color": "0E8A16",
            "default": false,
            "description": "issue contains minimal reproducing steps",
            "id": 435851959,
            "name": "has:repro",
            "node_id": "MDU6TGFiZWw0MzU4NTE5NTk=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/has:repro"
        },
        {
            "color": "F9D0C4",
            "default": false,
            "description": "issue reporting a crash or segfault",
            "id": 435854234,
            "name": "bug-crash",
            "node_id": "MDU6TGFiZWw0MzU4NTQyMzQ=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug-crash"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/23781/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 107,
        "created_at": "2023-02-02T14:11:43Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
            "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
            "followers_url": "https://api.github.com/users/bfredl/followers",
            "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
            "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bfredl",
            "id": 1363104,
            "login": "bfredl",
            "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
            "organizations_url": "https://api.github.com/users/bfredl/orgs",
            "received_events_url": "https://api.github.com/users/bfredl/received_events",
            "repos_url": "https://api.github.com/users/bfredl/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bfredl"
        },
        "description": "",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/36",
        "id": 8997654,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/36/labels",
        "node_id": "MI_kwDOAPphoM4AiUsW",
        "number": 36,
        "open_issues": 141,
        "state": "open",
        "title": "0.10",
        "updated_at": "2023-08-12T15:11:37Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/36"
    },
    "node_id": "I_kwDOAPphoM5nBnz7",
    "number": 23781,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 1,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 1,
        "url": "https://api.github.com/repos/neovim/neovim/issues/23781/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/23781/timeline",
    "title": "rbuffer.c:144: rbuffer_consumed: Assertion `count && count <= buf->size' failed.",
    "updated_at": "2023-08-12T22:52:17Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/23781",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/11534587?v=4",
        "events_url": "https://api.github.com/users/glacambre/events{/privacy}",
        "followers_url": "https://api.github.com/users/glacambre/followers",
        "following_url": "https://api.github.com/users/glacambre/following{/other_user}",
        "gists_url": "https://api.github.com/users/glacambre/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/glacambre",
        "id": 11534587,
        "login": "glacambre",
        "node_id": "MDQ6VXNlcjExNTM0NTg3",
        "organizations_url": "https://api.github.com/users/glacambre/orgs",
        "received_events_url": "https://api.github.com/users/glacambre/received_events",
        "repos_url": "https://api.github.com/users/glacambre/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/glacambre/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/glacambre/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/glacambre"
    }
}