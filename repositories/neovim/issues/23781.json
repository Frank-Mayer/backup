{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "### Problem\r\n\r\nNeovim crashes.\r\n\r\n### Steps to reproduce\r\n\r\n```\r\nprintf 'Â”' | nvim --embed\r\n```\r\n\r\n### Expected behavior\r\n\r\nNo crash. Note that while this reproducer may seem contrived, it actually comes from an actual use case (piping messagepack commands to an embedded neovim from the shell).\r\n\r\n\r\nThis crash may or may not be related to https://github.com/neovim/neovim/issues/21604 .\r\n\r\n### Neovim version (nvim -v)\r\n\r\n8e6971695383047ee5ba2921c91d98acb18c6d7a\r\n\r\n### Vim (not Nvim) behaves the same?\r\n\r\nN/A\r\n\r\n### Operating system/version\r\n\r\nlinux\r\n\r\n### Terminal name/version\r\n\r\nN/A\r\n\r\n### $TERM environment variable\r\n\r\nN/A\r\n\r\n### Installation\r\n\r\nBuilt from source",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "So I came across the exact same issue, but my payload was valid msgpack (but slightly invalid rpc because I made a mistake).\r\n\r\nHere is a trace:\r\n\r\n```gdb\r\nProgram received signal SIGABRT, Aborted.\r\n0x00007f6d37f94fec in __pthread_kill_implementation () from /gnu/store/gsjczqir1wbz8p770zndrpw4rnppmxi3-glibc-2.35/lib/libc.so.6\r\n\r\n(ins)(gdb) bt\r\n#0  0x00007f6d37f94fec in __pthread_kill_implementation () from /gnu/store/gsjczqir1wbz8p770zndrpw4rnppmxi3-glibc-2.35/lib/libc.so.6\r\n#1  0x00007f6d37f4b202 in raise () from /gnu/store/gsjczqir1wbz8p770zndrpw4rnppmxi3-glibc-2.35/lib/libc.so.6\r\n#2  0x00007f6d37f3645b in abort () from /gnu/store/gsjczqir1wbz8p770zndrpw4rnppmxi3-glibc-2.35/lib/libc.so.6\r\n#3  0x00007f6d37f36395 in __assert_fail_base.cold () from /gnu/store/gsjczqir1wbz8p770zndrpw4rnppmxi3-glibc-2.35/lib/libc.so.6\r\n#4  0x00007f6d37f444d2 in __assert_fail () from /gnu/store/gsjczqir1wbz8p770zndrpw4rnppmxi3-glibc-2.35/lib/libc.so.6\r\n#5  0x00000000005f9771 in rbuffer_consumed (buf=buf@entry=0xe4b880, count=<optimized out>) at /tmp/guix-build-neovim-0.9.1.drv-0/source/src/nvim/rbuffer.c:144\r\n#6  0x00000000005f9792 in rbuffer_consumed_compact (buf=0xe4b880, count=<optimized out>) at /tmp/guix-build-neovim-0.9.1.drv-0/source/src/nvim/rbuffer.c:166\r\n#7  0x00000000005b3325 in receive_msgpack (stream=<optimized out>, rbuf=0xe4b880, c=<optimized out>, data=0xe4b0a0, eof=<optimized out>)\r\n    at /tmp/guix-build-neovim-0.9.1.drv-0/source/src/nvim/msgpack_rpc/channel.c:305\r\n#8  0x0000000000518040 in read_event (argv=argv@entry=0x7ffd06e966d0) at /tmp/guix-build-neovim-0.9.1.drv-0/source/src/nvim/event/rstream.c:192\r\n#9  0x000000000051812c in invoke_read_cb (stream=stream@entry=0xe4b0c0, count=count@entry=14, eof=eof@entry=false)\r\n    at /tmp/guix-build-neovim-0.9.1.drv-0/source/src/nvim/event/rstream.c:205\r\n#10 0x000000000051967c in read_cb (uvstream=<optimized out>, cnt=14, buf=<optimized out>) at /tmp/guix-build-neovim-0.9.1.drv-0/source/src/nvim/event/rstream.c:134\r\n#11 0x00007f6d3813e7b7 in ?? () from /gnu/store/f8xqz1n89vdm6cf609l6fmqrhi979xbp-libuv-1.43.0/lib/libuv.so.1\r\n#12 0x00007f6d3813f058 in ?? () from /gnu/store/f8xqz1n89vdm6cf609l6fmqrhi979xbp-libuv-1.43.0/lib/libuv.so.1\r\n#13 0x00007f6d38146ad5 in ?? () from /gnu/store/f8xqz1n89vdm6cf609l6fmqrhi979xbp-libuv-1.43.0/lib/libuv.so.1\r\n#14 0x00007f6d38134474 in uv_run () from /gnu/store/f8xqz1n89vdm6cf609l6fmqrhi979xbp-libuv-1.43.0/lib/libuv.so.1\r\n#15 0x00000000005145df in loop_uv_run (loop=loop@entry=0x7dbba0 <main_loop>, ms=-1, once=once@entry=true)\r\n    at /tmp/guix-build-neovim-0.9.1.drv-0/source/src/nvim/event/loop.c:65\r\n#16 0x00000000005151b8 in loop_poll_events (loop=0x7dbba0 <main_loop>, ms=<optimized out>) at /tmp/guix-build-neovim-0.9.1.drv-0/source/src/nvim/event/loop.c:87\r\n#17 0x00000000005e4196 in inbuf_poll (ms=ms@entry=-1, events=events@entry=0xe014e0) at /tmp/guix-build-neovim-0.9.1.drv-0/source/src/nvim/os/input.c:459\r\n#18 0x00000000005e4697 in os_inchar (buf=0x0, maxlen=0, ms=<optimized out>, tb_change_cnt=1, events=0xe014e0)\r\n    at /tmp/guix-build-neovim-0.9.1.drv-0/source/src/nvim/os/input.c:143\r\n#19 0x0000000000654ef4 in state_enter (s=0x7ffd06e99bd0) at /tmp/guix-build-neovim-0.9.1.drv-0/source/src/nvim/state.c:78\r\n#20 0x00000000005b8fc6 in normal_enter (cmdwin=<optimized out>, noexmode=<optimized out>) at /tmp/guix-build-neovim-0.9.1.drv-0/source/src/nvim/normal.c:497\r\n#21 0x00000000004581f4 in main (argc=<optimized out>, argv=<optimized out>) at /tmp/guix-build-neovim-0.9.1.drv-0/source/src/nvim/main.c:641\r\n```\r\n\r\nThe assertion being hit in line 144 is \r\n\r\n```\r\nassert(count && count <= buf->size);\r\n```\r\n\r\ngdb also shows us a bit more about the buffer\r\n\r\n```\r\n(ins)(gdb) p buf->size \r\n$4 = 14\r\n(ins)(gdb) p buf->data\r\n$14 = (void *) 0xe4b0c0\r\n(ins)(gdb) x/14xb buf->data\r\n0xe4b0c0:       0x01    0x00    0x00    0x00    0x00    0x00    0x00    0x00\r\n0xe4b0c8:       0xc0    0xb0    0xe4    0x00    0x00    0x00\r\n```\r\n\r\nThat data does not look like my msgpack payload, the size is correct in that my raw msgpack is 14 bytes long (hex 9400a57265716964a46e616d6590).\r\n\r\nGoing up the stack trace, the count value has been optimized out and I lacked the source files when I started gdb, but hopefully I loaded them properly. The original caller is receive_msgpack in line 305, and consumed is just size - p->read_size.\r\n\r\n```gdb\r\n(ins)(gdb) up\r\n#7  0x00000000005b3325 in receive_msgpack (stream=<optimized out>, rbuf=0xe4b880, c=<optimized out>, data=0xe4b0a0, eof=<optimized out>)\r\n    at /tmp/guix-build-neovim-0.9.1.drv-0/source/src/nvim/msgpack_rpc/channel.c:305\r\n305       rbuffer_consumed_compact(rbuf, consumed);\r\n(ins)(gdb) list\r\n300       size_t size = 0;\r\n301       p->read_ptr = rbuffer_read_ptr(rbuf, &size);\r\n302       p->read_size = size;\r\n303       parse_msgpack(channel);\r\n304       size_t consumed = size - p->read_size;\r\n305       rbuffer_consumed_compact(rbuf, consumed);\r\n306\r\n307     end:\r\n308       channel_decref(channel);\r\n309     }\r\n```\r\n\r\nHowever it looks like consumed will end up begin 0, which would explain the failed assert\r\n\r\n```gdb\r\n(ins)(gdb) p size\r\n$19 = 14\r\n(ins)(gdb) p p->read_size \r\n$20 = 14\r\n```\r\n\r\nStill need to dig inside rbuffer_read_ptr to see what is happening.",
            "created_at": "2023-08-12T18:33:52Z",
            "html_url": "https://github.com/neovim/neovim/issues/23781#issuecomment-1676046632",
            "id": 1676046632,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23781",
            "node_id": "IC_kwDOAPphoM5j5nEo",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1676046632/reactions"
            },
            "updated_at": "2023-08-12T18:33:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1676046632",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/715238?v=4",
                "events_url": "https://api.github.com/users/equalsraf/events{/privacy}",
                "followers_url": "https://api.github.com/users/equalsraf/followers",
                "following_url": "https://api.github.com/users/equalsraf/following{/other_user}",
                "gists_url": "https://api.github.com/users/equalsraf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/equalsraf",
                "id": 715238,
                "login": "equalsraf",
                "node_id": "MDQ6VXNlcjcxNTIzOA==",
                "organizations_url": "https://api.github.com/users/equalsraf/orgs",
                "received_events_url": "https://api.github.com/users/equalsraf/received_events",
                "repos_url": "https://api.github.com/users/equalsraf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/equalsraf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/equalsraf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/equalsraf"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "`unpacker_parse_header` doesn't update Unpacker's `read_ptr` and `read_size` in case of an error, any invalid header should crash nvim \r\nThis patch seems to fix the issue:\r\n```diff\r\ndiff --git a/src/nvim/msgpack_rpc/unpacker.c b/src/nvim/msgpack_rpc/unpacker.c\r\nindex c3b1022db..d14d06f95 100644\r\n--- a/src/nvim/msgpack_rpc/unpacker.c\r\n+++ b/src/nvim/msgpack_rpc/unpacker.c\r\n@@ -202,13 +202,10 @@ bool unpacker_parse_header(Unpacker *p)\r\n   mpack_token_t tok;\r\n   int result;\r\n \r\n-  const char *data = p->read_ptr;\r\n-  size_t size = p->read_size;\r\n-\r\n   assert(!ERROR_SET(&p->unpack_error));\r\n \r\n #define NEXT(tok) \\\r\n-  result = mpack_read(&p->reader, &data, &size, &tok); \\\r\n+  result = mpack_read(&p->reader, &p->read_ptr, &p->read_size, &tok); \\\r\n   if (result) { goto error; }\r\n \r\n   NEXT(tok);\r\n@@ -257,8 +254,6 @@ bool unpacker_parse_header(Unpacker *p)\r\n                                              tok.length, &p->unpack_error);\r\n   }\r\n \r\n-  p->read_ptr = data;\r\n-  p->read_size = size;\r\n   return true;\r\n #undef NEXT\r\n \r\n```",
            "created_at": "2023-08-12T22:52:17Z",
            "html_url": "https://github.com/neovim/neovim/issues/23781#issuecomment-1676134017",
            "id": 1676134017,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23781",
            "node_id": "IC_kwDOAPphoM5j58aB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 4,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1676134017/reactions"
            },
            "updated_at": "2023-08-12T22:52:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1676134017",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/105592020?v=4",
                "events_url": "https://api.github.com/users/nwounkn/events{/privacy}",
                "followers_url": "https://api.github.com/users/nwounkn/followers",
                "following_url": "https://api.github.com/users/nwounkn/following{/other_user}",
                "gists_url": "https://api.github.com/users/nwounkn/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nwounkn",
                "id": 105592020,
                "login": "nwounkn",
                "node_id": "U_kgDOBks01A",
                "organizations_url": "https://api.github.com/users/nwounkn/orgs",
                "received_events_url": "https://api.github.com/users/nwounkn/received_events",
                "repos_url": "https://api.github.com/users/nwounkn/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nwounkn/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nwounkn/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nwounkn"
            }
        },
        {
            "author_association": "NONE",
            "body": "I'm pretty sure I've hit exactly this with a plugin I wrote in Rust and it seems to be down to how Rust chooses to flush it's buffers. I've tracked it down to that Rust sometimes will send just this bytes snippet:\r\n```[94, 00, 0A]```\r\nrather than the following more complete which works fine:\r\n```['94', '00', '0A', 'A9', '6E', '76', '69', '6D', '5F', '65', '78', '65', '63', '92', 'D9', '38', '73', '69', '67', '6E', '20', '70', '6C', '61', '63', '65', '20', '31', '31', '35', '37', '38', '33', '31', '20', '6C', '69', '6E', '65', '3D', '35', '30', '20', '6E', '61', '6D', '65', '3D', '56', '61', '64', '72', '65', '42', '72', '65', '61', '6B', '70', '6F', '69', '6E', '74', '20', '62', '75', '66', '66', '65', '72', '3D', '31', 'C2']```\r\nI'd say whatever is connecting should be able to flush buffers however it chooses and Neovim should support this, but I hit the above error: `Assertion ``count && count <= buf->size'`\r\nIf I remove this assertion everything works fine, and I think it's even only the `count` assertion so I can use the plugin with this line removed, but ideally I'd rather not long term ofc.\r\n\r\nIndeed I can trigger it with the following as per the above:\r\n```\r\n$ echo -e -n '\\x94\\x00\\x0a' | ./build/bin/nvim --embed\r\nnvim: /home/strotter/code/nvim/neovim/src/nvim/rbuffer.c:144: rbuffer_consumed: Assertion `count && count <= buf->size' failed.\r\nAborted (core dumped)\r\n```\r\nbut if I remove the count assertion fine:\r\n```\r\n$ echo -e -n '\\x94\\x00\\x0a' | ./build/bin/nvim --embed\r\n$\r\n```\r\nThere may be a better fix though, but it seems to work.\r\n\r\nIncidentally, of the fixes I've seen in this ticket, neither of them seem to fix the problem I've hit where just removing the assertion on `count` does.",
            "created_at": "2023-10-29T10:07:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/23781#issuecomment-1784054717",
            "id": 1784054717,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23781",
            "node_id": "IC_kwDOAPphoM5qVoO9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1784054717/reactions"
            },
            "updated_at": "2023-10-29T11:40:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1784054717",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/17785785?v=4",
                "events_url": "https://api.github.com/users/strottos/events{/privacy}",
                "followers_url": "https://api.github.com/users/strottos/followers",
                "following_url": "https://api.github.com/users/strottos/following{/other_user}",
                "gists_url": "https://api.github.com/users/strottos/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/strottos",
                "id": 17785785,
                "login": "strottos",
                "node_id": "MDQ6VXNlcjE3Nzg1Nzg1",
                "organizations_url": "https://api.github.com/users/strottos/orgs",
                "received_events_url": "https://api.github.com/users/strottos/received_events",
                "repos_url": "https://api.github.com/users/strottos/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/strottos/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/strottos/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/strottos"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Also occasionally happens on CI: https://github.com/neovim/neovim/actions/runs/6820700694/job/18550025712",
            "created_at": "2023-11-10T07:29:36Z",
            "html_url": "https://github.com/neovim/neovim/issues/23781#issuecomment-1805230055",
            "id": 1805230055,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23781",
            "node_id": "IC_kwDOAPphoM5rmZ_n",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1805230055/reactions"
            },
            "updated_at": "2023-11-10T07:29:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1805230055",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "author_association": "NONE",
            "body": "I'm hitting this issue as well.  Within a rust rpc plugin as well.\r\n\r\nI believe this is because 0x0A is the newline code point and would get general println flushing treatment.  Low positive numbers get a 0 on the first bit, which means as soon I hit 10 messages sent the message id would trigger this issue.\r\n\r\nHopefully this is a useful/interesting observation.",
            "created_at": "2023-12-12T03:47:14Z",
            "html_url": "https://github.com/neovim/neovim/issues/23781#issuecomment-1851253760",
            "id": 1851253760,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23781",
            "node_id": "IC_kwDOAPphoM5uV-QA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1851253760/reactions"
            },
            "updated_at": "2023-12-12T03:47:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1851253760",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/45528211?v=4",
                "events_url": "https://api.github.com/users/eulegang/events{/privacy}",
                "followers_url": "https://api.github.com/users/eulegang/followers",
                "following_url": "https://api.github.com/users/eulegang/following{/other_user}",
                "gists_url": "https://api.github.com/users/eulegang/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/eulegang",
                "id": 45528211,
                "login": "eulegang",
                "node_id": "MDQ6VXNlcjQ1NTI4MjEx",
                "organizations_url": "https://api.github.com/users/eulegang/orgs",
                "received_events_url": "https://api.github.com/users/eulegang/received_events",
                "repos_url": "https://api.github.com/users/eulegang/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/eulegang/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/eulegang/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/eulegang"
            }
        },
        {
            "author_association": "NONE",
            "body": "I was able to remedy by using an io type that does not flush after newlines are found.\r\n\r\n`unsafe { tokio::fs::File::from_raw_fd(1) }` opposed to `tokio::io::stdout()`",
            "created_at": "2023-12-12T04:27:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/23781#issuecomment-1851280456",
            "id": 1851280456,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23781",
            "node_id": "IC_kwDOAPphoM5uWExI",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1851280456/reactions"
            },
            "updated_at": "2023-12-12T04:27:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1851280456",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/45528211?v=4",
                "events_url": "https://api.github.com/users/eulegang/events{/privacy}",
                "followers_url": "https://api.github.com/users/eulegang/followers",
                "following_url": "https://api.github.com/users/eulegang/following{/other_user}",
                "gists_url": "https://api.github.com/users/eulegang/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/eulegang",
                "id": 45528211,
                "login": "eulegang",
                "node_id": "MDQ6VXNlcjQ1NTI4MjEx",
                "organizations_url": "https://api.github.com/users/eulegang/orgs",
                "received_events_url": "https://api.github.com/users/eulegang/received_events",
                "repos_url": "https://api.github.com/users/eulegang/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/eulegang/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/eulegang/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/eulegang"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I've started investigating this, and it's definitely entered Heisenterritory for me...\r\n\r\nFor reproduction, see https://github.com/KillTheMule/reqbug. Check out the neovim submodule, build with the [included script](https://github.com/KillTheMule/reqbug/blob/main/build_nvim) (just so we have a debug build), and then run [runit.sh](https://github.com/KillTheMule/reqbug/blob/main/runit.sh). This needs a working rust installation.\r\n\r\nNotes for reproduction:\r\n\r\n- Doesn't always reproduce, but so far I could always trigger it by manually repeating the runit script. \r\n- Harder to trigger when nvim does not find a valid runtime at the default location, but still possible\r\n- I've had some very light logging added https://github.com/neovim/neovim/blob/master/src/nvim/msgpack_rpc/channel.c#L285, which made triggering the problem less likely, but still possible\r\n- Using `nvim_buf_set_name` was somewhat necessary to trigger the crash. E.g. using `nvim_buf_set_lines` seemed to be immune to this.\r\n\r\nI've also added a neovim log from a [crash](https://github.com/KillTheMule/reqbug/blob/main/nvimlog_crash.txt) as well as a [non-crash](https://github.com/KillTheMule/reqbug/blob/main/nvimlog_nocrash.txt) (note that the latter also contains me typing `:qa!<Enter>` manually).\r\n\r\nSome notes and questions;\r\n- Channel 3 is used both for my job as well as communication with the TUI (at least that's what it seems like). Is that expected, are there no interactions? As far as I can tell, different streams (even when associated with the same channel) have their own ring buffers, so the shouldn't interfere, but I wanted to make sure. Seems strange to me anyways, since how does neovim determine what to use for e.g. `chansend`?\r\n- When sending our Request, nvim sometimes reads 27 bytes, and sometimes 26. I've no idea where that is coming from.\r\n- When neovim crashes, it always read 3 bytes directly before. That's always on message 10, so the last byte is 10, aka a newline.\r\n- Rust's `stdout` is line-buffered indeed, but that should be strictly deterministic. Whatever makes neovim sometimes read those 3 bytes, and sometimes not? Also, when sending other messages containing newlines, that just doesn't seem to happen, and I've not yet figured out why.\r\n- When sending huge messages, other buffers come into play (e.g. the one from the OS, or from out own wrapping of `stdout`), but neovim has no problems whatsover reading multpart-messages in these cases, at least not that I could discern.\r\n\r\nGuess the next step is trying out the linked PR, but if anyone has more insights or comments, that would certainly be welcome.",
            "created_at": "2024-01-20T16:53:55Z",
            "html_url": "https://github.com/neovim/neovim/issues/23781#issuecomment-1902174189",
            "id": 1902174189,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23781",
            "node_id": "IC_kwDOAPphoM5xYN_t",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902174189/reactions"
            },
            "updated_at": "2024-01-20T17:17:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902174189",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4117685?v=4",
                "events_url": "https://api.github.com/users/KillTheMule/events{/privacy}",
                "followers_url": "https://api.github.com/users/KillTheMule/followers",
                "following_url": "https://api.github.com/users/KillTheMule/following{/other_user}",
                "gists_url": "https://api.github.com/users/KillTheMule/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/KillTheMule",
                "id": 4117685,
                "login": "KillTheMule",
                "node_id": "MDQ6VXNlcjQxMTc2ODU=",
                "organizations_url": "https://api.github.com/users/KillTheMule/orgs",
                "received_events_url": "https://api.github.com/users/KillTheMule/received_events",
                "repos_url": "https://api.github.com/users/KillTheMule/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/KillTheMule/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/KillTheMule/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/KillTheMule"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I'm kind of a loss for words :D I've applied https://github.com/neovim/neovim/pull/25494 to neovim, and the following happens:\r\n\r\n- I can still trigger the crash\r\n- ~~When *not* crashing, the log says neovim read 29 bytes from our message. Note we're still sending 26.~~\r\n- ~~When crashing, the log says neovim read 28 bytes from our message. We're still sending 26.~~ The reading of message 10 again files with 3 bytes read.\r\n- We seem to be reading between 25 and 29 bytes for our 26 byte message somewhat randomly. With the PR, we seem to have 28/29 more often, without it 26/27. But this doesn't seem stable.\r\n- Except when crashing, then the last read is 3 bytes.\r\n\r\nI've noted though that the comment for [`rbuffer_read_ptr`](https://github.com/neovim/neovim/blob/master/src/nvim/msgpack_rpc/channel.c#L304C17-L304C33) says it needs to be called twice, possibly using a macro. I'm not seeing how to apply that here (my C is pretty rusty), but might that be a problem?",
            "created_at": "2024-01-20T17:05:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/23781#issuecomment-1902176915",
            "id": 1902176915,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23781",
            "node_id": "IC_kwDOAPphoM5xYOqT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902176915/reactions"
            },
            "updated_at": "2024-01-20T17:09:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902176915",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4117685?v=4",
                "events_url": "https://api.github.com/users/KillTheMule/events{/privacy}",
                "followers_url": "https://api.github.com/users/KillTheMule/followers",
                "following_url": "https://api.github.com/users/KillTheMule/following{/other_user}",
                "gists_url": "https://api.github.com/users/KillTheMule/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/KillTheMule",
                "id": 4117685,
                "login": "KillTheMule",
                "node_id": "MDQ6VXNlcjQxMTc2ODU=",
                "organizations_url": "https://api.github.com/users/KillTheMule/orgs",
                "received_events_url": "https://api.github.com/users/KillTheMule/received_events",
                "repos_url": "https://api.github.com/users/KillTheMule/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/KillTheMule/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/KillTheMule/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/KillTheMule"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Ok, I've worked through it. See [the repository](https://github.com/KillTheMule/reqbug) if you want to try any of it yourself.\r\n\r\nI've been able to log the stdout of my plugin, and I could very well see the linebuffering happening. The indeterminism probably comes from our flushing of the buffer, which could well happen before neovim reads the flushed message from the pipe, and then the pipe does contain the full message. So it's pretty timing dependent, agreeing with what I saw before.\r\n\r\nIt's not just in the msgpack metadata, but of course also happens when the payload contains a newline, as in `feedkeys(\"ia\\n<Esc>\")`. Nvim doesn't crash in that case though, but just does not read on from the pipe and therefore does not act upon the message (which includes responding here, I don't know what happens if I send another message after that).\r\n\r\n@zeertzjq @bfredl @justinmk So it seems neovim can't handle partial messages from flushing a buffer early. If the flushing happens after the message ID, neovim crashes (as in this issue), if it happens in the payload, neovim seems to just be stuck in the communication of that channel. I'd suggest treating this as a bug, although I'm not aware of any spec saying anything about this (and I don't know how hard it is to change this).\r\n\r\nI'll fix this in my lib by disabling line buffering.",
            "created_at": "2024-01-21T21:50:46Z",
            "html_url": "https://github.com/neovim/neovim/issues/23781#issuecomment-1902777820",
            "id": 1902777820,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23781",
            "node_id": "IC_kwDOAPphoM5xahXc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902777820/reactions"
            },
            "updated_at": "2024-01-21T21:50:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902777820",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4117685?v=4",
                "events_url": "https://api.github.com/users/KillTheMule/events{/privacy}",
                "followers_url": "https://api.github.com/users/KillTheMule/followers",
                "following_url": "https://api.github.com/users/KillTheMule/following{/other_user}",
                "gists_url": "https://api.github.com/users/KillTheMule/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/KillTheMule",
                "id": 4117685,
                "login": "KillTheMule",
                "node_id": "MDQ6VXNlcjQxMTc2ODU=",
                "organizations_url": "https://api.github.com/users/KillTheMule/orgs",
                "received_events_url": "https://api.github.com/users/KillTheMule/received_events",
                "repos_url": "https://api.github.com/users/KillTheMule/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/KillTheMule/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/KillTheMule/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/KillTheMule"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">  Nvim doesn't crash in that case though, but just does not read on from the pipe and therefore does not act upon the message (which includes responding here, I don't know what happens if I send another message after that).\r\n\r\nNot sure I follow. if the external library does \"line buffering\" it is quite expected nvim will do nothing when `\\n` is received, nvim will act once a complete message has been received. Nvim itself has no idea about line buffering in an RPC channel. it is just a sequence of bytes. \r\n\r\nI mean the real issue in nvim seems to be about handling of messages of large enough byte sizes (so multiple separate `read()` events are expected to stitch together a full message), not about lines per se.",
            "created_at": "2024-01-21T22:12:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/23781#issuecomment-1902783246",
            "id": 1902783246,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23781",
            "node_id": "IC_kwDOAPphoM5xaisO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902783246/reactions"
            },
            "updated_at": "2024-01-21T22:12:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902783246",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> nvim will act once a complete message has been received\r\n\r\nThat does not seem to be the case here. I hope my c&p and manual counting works out, but it seems the following:\r\n\r\nTake the message ` [148, 0, 10,177, 110, 118, 105, 109, 95, 98, 117, 102, 95, 115, 101, 116, 95, 110, 97, 109, 101, 146, 212, 0, 1, 162, 97, 57]`, which is the request`nvim_buf_set_name(1, \"a9\")` with ID 10 in msgpack. If the buffer is flushed to the pipe after the third byte, the pipe contains `[148, 0, 10]`. If neovim reads that, it crashes, and does not wait for the rest of the message (this is what this issue seems to be about).\r\n\r\nTake the message `[148, 0, 1, 173, 110, 118, 105, 109, 95, 102, 101, 101, 100, 107, 101, 121, 115, 147, 176, 105, 97, 10, 60, 69, 115, 99, 62, 105, 97, 10, 60, 69, 115, 99, 62, 160, 195]`, which is the request `nvim_feedkeys(\"ia\\n<Esc>ia\\n<Esc>\",\"\", true)` with ID 1 in messagepack. If the buffer is flushed to the pipe after the last 10, but before the 60, neovim reads the 30 bytes of the first part of the message, but never seems to read the rest which would complete the message and enable neovim to answer the request.\r\n\r\n> not about lines per se.\r\n\r\nSure, lines come only into play here because I did use a linebuffered stdout in my library, so they \"merely\" serve as examples here.\r\n",
            "created_at": "2024-01-21T22:25:02Z",
            "html_url": "https://github.com/neovim/neovim/issues/23781#issuecomment-1902786034",
            "id": 1902786034,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23781",
            "node_id": "IC_kwDOAPphoM5xajXy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902786034/reactions"
            },
            "updated_at": "2024-01-21T23:05:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902786034",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4117685?v=4",
                "events_url": "https://api.github.com/users/KillTheMule/events{/privacy}",
                "followers_url": "https://api.github.com/users/KillTheMule/followers",
                "following_url": "https://api.github.com/users/KillTheMule/following{/other_user}",
                "gists_url": "https://api.github.com/users/KillTheMule/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/KillTheMule",
                "id": 4117685,
                "login": "KillTheMule",
                "node_id": "MDQ6VXNlcjQxMTc2ODU=",
                "organizations_url": "https://api.github.com/users/KillTheMule/orgs",
                "received_events_url": "https://api.github.com/users/KillTheMule/received_events",
                "repos_url": "https://api.github.com/users/KillTheMule/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/KillTheMule/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/KillTheMule/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/KillTheMule"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> the pipe contains `[148, 0, 10]`. If neovim reads that, it crashes,\r\n\r\nIf you can't you reproduce that with a Lua test, can you try hardcoding it in Nvim C code and confirm that it causes the crash, then share the patch here?",
            "created_at": "2024-01-21T23:48:21Z",
            "html_url": "https://github.com/neovim/neovim/issues/23781#issuecomment-1902808527",
            "id": 1902808527,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23781",
            "node_id": "IC_kwDOAPphoM5xao3P",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902808527/reactions"
            },
            "updated_at": "2024-01-21T23:48:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902808527",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "FWIW, the mpack `Unpacker` would be a good candidate for systematic fuzz testing. Could be done somewhat regularly by taking some large dictionary of valid message strings (like the functional test suite) and split them into (at least) two pieces at any breaking point. ",
            "created_at": "2024-01-22T07:59:33Z",
            "html_url": "https://github.com/neovim/neovim/issues/23781#issuecomment-1903441644",
            "id": 1903441644,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23781",
            "node_id": "IC_kwDOAPphoM5xdDbs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1903441644/reactions"
            },
            "updated_at": "2024-01-22T07:59:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1903441644",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> > the pipe contains `[148, 0, 10]`. If neovim reads that, it crashes,\r\n> \r\n> If you can't you reproduce that with a Lua test, can you try hardcoding it in Nvim C code and confirm that it causes the crash, then share the patch here?\r\n\r\nI've no idea how to go about this with a lua test... I'll have a look around, otherwise I'm gonna try the C route.",
            "created_at": "2024-01-22T19:20:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/23781#issuecomment-1904652798",
            "id": 1904652798,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23781",
            "node_id": "IC_kwDOAPphoM5xhrH-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1904652798/reactions"
            },
            "updated_at": "2024-01-22T19:20:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1904652798",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4117685?v=4",
                "events_url": "https://api.github.com/users/KillTheMule/events{/privacy}",
                "followers_url": "https://api.github.com/users/KillTheMule/followers",
                "following_url": "https://api.github.com/users/KillTheMule/following{/other_user}",
                "gists_url": "https://api.github.com/users/KillTheMule/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/KillTheMule",
                "id": 4117685,
                "login": "KillTheMule",
                "node_id": "MDQ6VXNlcjQxMTc2ODU=",
                "organizations_url": "https://api.github.com/users/KillTheMule/orgs",
                "received_events_url": "https://api.github.com/users/KillTheMule/received_events",
                "repos_url": "https://api.github.com/users/KillTheMule/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/KillTheMule/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/KillTheMule/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/KillTheMule"
            }
        }
    ],
    "comments": 14,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/23781/comments",
    "created_at": "2023-05-27T05:56:15Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/23781/events",
    "html_url": "https://github.com/neovim/neovim/issues/23781",
    "id": 1728478459,
    "labels": [
        {
            "color": "c7def8",
            "default": false,
            "description": null,
            "id": 242522707,
            "name": "rpc",
            "node_id": "MDU6TGFiZWwyNDI1MjI3MDc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/rpc"
        },
        {
            "color": "0E8A16",
            "default": false,
            "description": "issue contains minimal reproducing steps",
            "id": 435851959,
            "name": "has:repro",
            "node_id": "MDU6TGFiZWw0MzU4NTE5NTk=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/has:repro"
        },
        {
            "color": "F9D0C4",
            "default": false,
            "description": "issue reporting a crash or segfault",
            "id": 435854234,
            "name": "bug-crash",
            "node_id": "MDU6TGFiZWw0MzU4NTQyMzQ=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/bug-crash"
        },
        {
            "color": "0E8A16",
            "default": false,
            "description": "",
            "id": 606691254,
            "name": "has:plan",
            "node_id": "MDU6TGFiZWw2MDY2OTEyNTQ=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/has:plan"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/23781/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 252,
        "created_at": "2023-02-02T14:11:43Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
            "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
            "followers_url": "https://api.github.com/users/bfredl/followers",
            "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
            "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bfredl",
            "id": 1363104,
            "login": "bfredl",
            "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
            "organizations_url": "https://api.github.com/users/bfredl/orgs",
            "received_events_url": "https://api.github.com/users/bfredl/received_events",
            "repos_url": "https://api.github.com/users/bfredl/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bfredl"
        },
        "description": "",
        "due_on": "2024-03-01T08:00:00Z",
        "html_url": "https://github.com/neovim/neovim/milestone/36",
        "id": 8997654,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/36/labels",
        "node_id": "MI_kwDOAPphoM4AiUsW",
        "number": 36,
        "open_issues": 134,
        "state": "open",
        "title": "0.10",
        "updated_at": "2024-01-22T22:15:07Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/36"
    },
    "node_id": "I_kwDOAPphoM5nBnz7",
    "number": 23781,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 4,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 4,
        "url": "https://api.github.com/repos/neovim/neovim/issues/23781/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "open",
    "state_reason": "reopened",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/23781/timeline",
    "title": "rbuffer.c:144: rbuffer_consumed: Assertion `count && count <= buf->size' failed.",
    "updated_at": "2024-01-22T19:20:43Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/23781",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/11534587?v=4",
        "events_url": "https://api.github.com/users/glacambre/events{/privacy}",
        "followers_url": "https://api.github.com/users/glacambre/followers",
        "following_url": "https://api.github.com/users/glacambre/following{/other_user}",
        "gists_url": "https://api.github.com/users/glacambre/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/glacambre",
        "id": 11534587,
        "login": "glacambre",
        "node_id": "MDQ6VXNlcjExNTM0NTg3",
        "organizations_url": "https://api.github.com/users/glacambre/orgs",
        "received_events_url": "https://api.github.com/users/glacambre/received_events",
        "repos_url": "https://api.github.com/users/glacambre/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/glacambre/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/glacambre/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/glacambre"
    }
}