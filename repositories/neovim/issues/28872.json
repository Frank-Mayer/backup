{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "### Problem\n\nCurrently the built in comment module is using the commentstring option as is, and does not assume anything about the format of it. I understand that this is intended, and I am all for this when _adding_ a comment. However, IMO, it is a bit restrictive when toggling a comment (uncommenting).\r\n\r\nSay I have the following file. I am working together with someone, and they have added a comment here and does so without a trailing space. Maybe they have done this without a comment plugin or something\r\n\r\n```lua\r\n--local foo = 10\r\n```\r\n\r\nMy commentstring is the default one `-- %s`.\r\nToggling the comment will result in this:\r\n```lua\r\n-- --local foo = 10\r\n```\r\nThis can easily be fixed with using visual block mode, or adding a space and then uncommenting.\r\n\r\nHowever, say I have a project in C, and someone is commenting with the default commentstring of `/*%s*/`.\r\n\r\n```c\r\nint main() {\r\n    /*int foo = 10;*/\r\n}\r\n```\r\n\r\nThen I have the autocmd from the PR that always add a space, or maybe I have changed the commentstring to have a space: `/* %s */`. This is a surrounding comment, and will result in:\r\n\r\n```c\r\nint main() {\r\n    /* /*int foo = 10;*/ */\r\n}\r\n```\r\n\r\nThis is even more annoying,, and I have to delete it from both sides of the line(s)\n\n### Expected behavior\n\nI would expect it to respect the commentstring 100% when commenting, and adding however many spaces there is in the commentstring option. However, I would also expect it to properly uncomment both of these examples, since they actually are comments, and I technically have the correct commentstring.\r\n\r\nI am open to looking into this, and sending a PR, but I would like to open an issue first to see what the general opinion is for this.",
    "closed_at": "2024-05-23T20:30:54Z",
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "> Currently the built in comment module is using the commentstring option as is, and does not assume anything about the format of it. I understand that this is intended, and I am all for this when adding a comment. \r\n\r\nIndeed, and this is a deliberate choice in order to avoid configuration. \"Smarter\" commenting is left to dedicated plugins.",
            "created_at": "2024-05-20T17:36:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/28872#issuecomment-2120900449",
            "id": 2120900449,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28872",
            "node_id": "IC_kwDOAPphoM5-al9h",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2120900449/reactions"
            },
            "updated_at": "2024-05-20T17:36:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2120900449",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "NONE",
            "body": "It won't add any configuration though... It will just properly be able to uncomment when it makes sense, instead of adding nested comments",
            "created_at": "2024-05-20T17:55:22Z",
            "html_url": "https://github.com/neovim/neovim/issues/28872#issuecomment-2120928724",
            "id": 2120928724,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28872",
            "node_id": "IC_kwDOAPphoM5-as3U",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2120928724/reactions"
            },
            "updated_at": "2024-05-20T17:55:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2120928724",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5160701?v=4",
                "events_url": "https://api.github.com/users/seblj/events{/privacy}",
                "followers_url": "https://api.github.com/users/seblj/followers",
                "following_url": "https://api.github.com/users/seblj/following{/other_user}",
                "gists_url": "https://api.github.com/users/seblj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seblj",
                "id": 5160701,
                "login": "seblj",
                "node_id": "MDQ6VXNlcjUxNjA3MDE=",
                "organizations_url": "https://api.github.com/users/seblj/orgs",
                "received_events_url": "https://api.github.com/users/seblj/received_events",
                "repos_url": "https://api.github.com/users/seblj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seblj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seblj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seblj"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "The point is (and this was discussed _at length_) that the mapping is documented to act depending on whether a line matches `commentstring`. This change would break that. ",
            "created_at": "2024-05-20T18:00:56Z",
            "html_url": "https://github.com/neovim/neovim/issues/28872#issuecomment-2120937036",
            "id": 2120937036,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28872",
            "node_id": "IC_kwDOAPphoM5-au5M",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2120937036/reactions"
            },
            "updated_at": "2024-05-20T18:00:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2120937036",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "NONE",
            "body": "I know. But I couldn't see anything related to this specific issue. It 100% makes sense for commenting, but it seems like it is only cons for uncommenting (except for maybe 5 lines of extra code)",
            "created_at": "2024-05-20T18:08:01Z",
            "html_url": "https://github.com/neovim/neovim/issues/28872#issuecomment-2120948406",
            "id": 2120948406,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28872",
            "node_id": "IC_kwDOAPphoM5-axq2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2120948406/reactions"
            },
            "updated_at": "2024-05-20T18:08:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2120948406",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5160701?v=4",
                "events_url": "https://api.github.com/users/seblj/events{/privacy}",
                "followers_url": "https://api.github.com/users/seblj/followers",
                "following_url": "https://api.github.com/users/seblj/following{/other_user}",
                "gists_url": "https://api.github.com/users/seblj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seblj",
                "id": 5160701,
                "login": "seblj",
                "node_id": "MDQ6VXNlcjUxNjA3MDE=",
                "organizations_url": "https://api.github.com/users/seblj/orgs",
                "received_events_url": "https://api.github.com/users/seblj/received_events",
                "repos_url": "https://api.github.com/users/seblj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seblj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seblj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seblj"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "And 20 lines of documentation. The current limitations were the price to get it included at all; anything beyond the bare minimum was deemed out of scope for bundling. ",
            "created_at": "2024-05-20T18:14:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/28872#issuecomment-2120959021",
            "id": 2120959021,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28872",
            "node_id": "IC_kwDOAPphoM5-a0Qt",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2120959021/reactions"
            },
            "updated_at": "2024-05-20T18:14:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2120959021",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "NONE",
            "body": "Oh well, I'll give up argumenting, and accept the decision. I'll just continue to use vim-commentary then. Thank you for taking the time to explain",
            "created_at": "2024-05-20T18:17:26Z",
            "html_url": "https://github.com/neovim/neovim/issues/28872#issuecomment-2120963088",
            "id": 2120963088,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28872",
            "node_id": "IC_kwDOAPphoM5-a1QQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2120963088/reactions"
            },
            "updated_at": "2024-05-20T18:17:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2120963088",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5160701?v=4",
                "events_url": "https://api.github.com/users/seblj/events{/privacy}",
                "followers_url": "https://api.github.com/users/seblj/followers",
                "following_url": "https://api.github.com/users/seblj/following{/other_user}",
                "gists_url": "https://api.github.com/users/seblj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seblj",
                "id": 5160701,
                "login": "seblj",
                "node_id": "MDQ6VXNlcjUxNjA3MDE=",
                "organizations_url": "https://api.github.com/users/seblj/orgs",
                "received_events_url": "https://api.github.com/users/seblj/received_events",
                "repos_url": "https://api.github.com/users/seblj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seblj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seblj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seblj"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "IMO we should match vim-commentary's behavior here. This is a common use case that we should support out of the box.",
            "created_at": "2024-05-20T18:22:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/28872#issuecomment-2120972577",
            "id": 2120972577,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28872",
            "node_id": "IC_kwDOAPphoM5-a3kh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 21,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 21,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2120972577/reactions"
            },
            "updated_at": "2024-05-20T18:22:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2120972577",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> And 20 lines of documentation. \n\nSeems like a good trade-off to me.\n\n> The current limitations were the price to get it included at all; anything beyond the bare minimum was deemed out of scope for bundling.\n\nMy understanding was that there was a general consensus to include something that was vim-commentary-like. Anything in that should be in scope for inclusion (with extra consideration where necessary).",
            "created_at": "2024-05-21T07:18:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/28872#issuecomment-2121925343",
            "id": 2121925343,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28872",
            "node_id": "IC_kwDOAPphoM5-egLf",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2121925343/reactions"
            },
            "updated_at": "2024-05-21T07:18:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2121925343",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> My understanding was that there was a general consensus to include something\r\n> that was vim-commentary-like.\r\n\r\nI think that was more because it was the path of least resistance to get\r\n*something* in core that we could iterate on rather than getting stuck in\r\nbikeshed limbo. I don't think mimicking vim-commentary is inherently desirable\r\nor an explicit goal. Case in point is that we didn't opt to upstream\r\nvim-commentary because it lacked necessary features we wanted.\r\n\r\nThat said I don't personally mind changing the behavior in this case as it\r\nseems useful enough.",
            "created_at": "2024-05-21T12:41:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/28872#issuecomment-2122548787",
            "id": 2122548787,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28872",
            "node_id": "IC_kwDOAPphoM5-g4Yz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2122548787/reactions"
            },
            "updated_at": "2024-05-21T12:41:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2122548787",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> My understanding was that there was a general consensus to include something that was vim-commentary-like. Anything in that should be in scope for inclusion (with extra consideration where necessary).\r\n\r\nMy understanding about general consensus after discussions and PR reviews was that suggested implementation was enough vim-commentary-like while differing in all relevant cases (tree-sitter support, tests, sane implementation, etc.). The use case in issue question even has [explicit test](https://github.com/neovim/neovim/blob/47c741e30c872cb1a535c7577684e0da4580992f/test/functional/lua/comment_spec.lua#L304-L325).\r\n\r\n------\r\n\r\nThe core of the issue seems to stem from the requirement that commenting functionality needs to be not configurable and work out of the box. This lead to the adoption of \"100% rely on 'commentstring' when making a decision about comment structure\". This means all checks (decide whether a line is commented or not), comment, and uncomment rely on the same 'commentstring'.\r\n\r\nTreating \"--aaa\" line as commented with `-- %s` commentstring is reasonable for Lua. Yet, I don't think \"ignore whitespace in comment parts when checking for comment\" is universal for any language. In particular, [`b` flag in 'comments' option](https://github.com/neovim/neovim/blob/47c741e30c872cb1a535c7577684e0da4580992f/runtime/doc/change.txt#L1512) is there for a reason and is used in the wild for simple line commenting ([Python](https://github.com/neovim/neovim/blob/47c741e30c872cb1a535c7577684e0da4580992f/runtime/ftplugin/python.vim#L38), [bdf](https://github.com/neovim/neovim/blob/47c741e30c872cb1a535c7577684e0da4580992f/runtime/ftplugin/bdf.vim#L16), [netrc](https://github.com/neovim/neovim/blob/47c741e30c872cb1a535c7577684e0da4580992f/runtime/ftplugin/netrc.vim#L17), and maybe more).\r\n\r\nThe most proper solution would be to have a separate options for \"comment structure for adding comment\" and \"comment regex to match commented line\", but there is no such thing. The closest is 'comments' option but it is more about how to place proper prefixes during editing (like after `<CR>`, `O`, `J`, etc.). It is also quite popularly used to define bulleted lists and has somewhat complicated set of flags to implement.\r\n\r\n------\r\n\r\nI personally would like to avoid adding special behavior which is not (at least very-very near) 100% correct. That said, after looking at the code, this is [already kind of done for blank lines](https://github.com/neovim/neovim/blob/47c741e30c872cb1a535c7577684e0da4580992f/runtime/lua/vim/_comment.lua#L83-L84). So a line \"--\" in Lua and \"/**/\" in C (with \"/* %s */\" commentstring) **are** treated as commented.\r\n\r\nWhat I can suggest as a solution is to use the following (for better wording I might need @clason's help):\r\n- Line is commented if it matches 'commentstring' with trimmed parts.\r\n- Adding comment is 100% relying on 'commentstring' structure (as it is now).\r\n- Removing comment is first trying explicit 'commentstring' with fallback on trying its trimmed parts.\r\n\r\nHere is the patch which passes tests:\r\n\r\n<details><summary>Trimmed comment parts fallback patch</summary>\r\n\r\n```diff\r\ndiff --git a/runtime/lua/vim/_comment.lua b/runtime/lua/vim/_comment.lua\r\nindex b6cb6c988..044cd6971 100644\r\n--- a/runtime/lua/vim/_comment.lua\r\n+++ b/runtime/lua/vim/_comment.lua\r\n@@ -77,14 +77,11 @@ local function make_comment_check(parts)\r\n   local l_esc, r_esc = vim.pesc(parts.left), vim.pesc(parts.right)\r\n \r\n   -- Commented line has the following structure:\r\n-  -- <possible whitespace> <left> <anything> <right> <possible whitespace>\r\n-  local nonblank_regex = '^%s-' .. l_esc .. '.*' .. r_esc .. '%s-$'\r\n-\r\n-  -- Commented blank line can have any amount of whitespace around parts\r\n-  local blank_regex = '^%s-' .. vim.trim(l_esc) .. '%s*' .. vim.trim(r_esc) .. '%s-$'\r\n+  -- <whitespace> <trimmed left> <anything> <trimmed right> <whitespace>\r\n+  local regex = '^%s-' .. vim.trim(l_esc) .. '.*' .. vim.trim(r_esc) .. '%s-$'\r\n \r\n   return function(line)\r\n-    return line:find(nonblank_regex) ~= nil or line:find(blank_regex) ~= nil\r\n+    return line:find(regex) ~= nil\r\n   end\r\n end\r\n \r\n@@ -153,14 +150,14 @@ end\r\n ---@return fun(line: string): string\r\n local function make_uncomment_function(parts)\r\n   local l_esc, r_esc = vim.pesc(parts.left), vim.pesc(parts.right)\r\n-  local nonblank_regex = '^(%s*)' .. l_esc .. '(.*)' .. r_esc .. '(%s-)$'\r\n-  local blank_regex = '^(%s*)' .. vim.trim(l_esc) .. '(%s*)' .. vim.trim(r_esc) .. '(%s-)$'\r\n+  local regex = '^(%s*)' .. l_esc .. '(.*)' .. r_esc .. '(%s-)$'\r\n+  local regex_trimmed = '^(%s*)' .. vim.trim(l_esc) .. '(.*)' .. vim.trim(r_esc) .. '(%s-)$'\r\n \r\n   return function(line)\r\n-    -- Try both non-blank and blank regexes\r\n-    local indent, new_line, trail = line:match(nonblank_regex)\r\n+    -- Try regex with exact comment parts first, fall back to trimmed parts\r\n+    local indent, new_line, trail = line:match(regex)\r\n     if new_line == nil then\r\n-      indent, new_line, trail = line:match(blank_regex)\r\n+      indent, new_line, trail = line:match(regex_trimmed)\r\n     end\r\n \r\n     -- Return original if line is not commented\r\ndiff --git a/test/functional/lua/comment_spec.lua b/test/functional/lua/comment_spec.lua\r\nindex 9b1d9613c..0ca4f2158 100644\r\n--- a/test/functional/lua/comment_spec.lua\r\n+++ b/test/functional/lua/comment_spec.lua\r\n@@ -314,13 +314,13 @@ describe('commenting', function()\r\n       validate(3, 3, { '#aa', '# aa', '  aa' })\r\n \r\n       set_commentstring('# %s')\r\n-      validate(1, 3, { '# #aa', '# # aa', '# #  aa' })\r\n+      validate(1, 3, { 'aa', 'aa', ' aa' })\r\n       validate(2, 3, { '#aa', 'aa', ' aa' })\r\n       validate(3, 3, { '#aa', '# aa', ' aa' })\r\n \r\n       set_commentstring('#  %s')\r\n-      validate(1, 3, { '#  #aa', '#  # aa', '#  #  aa' })\r\n-      validate(2, 3, { '#aa', '#  # aa', '#  #  aa' })\r\n+      validate(1, 3, { 'aa', ' aa', 'aa' })\r\n+      validate(2, 3, { '#aa', ' aa', 'aa' })\r\n       validate(3, 3, { '#aa', '# aa', 'aa' })\r\n     end)\r\n```\r\n\r\n</details>\r\n\r\n@gpanders, @lewis6991, @clason: will *this* be enough? Please, look closely at how test cases changed.",
            "created_at": "2024-05-21T14:06:27Z",
            "html_url": "https://github.com/neovim/neovim/issues/28872#issuecomment-2122721668",
            "id": 2122721668,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28872",
            "node_id": "IC_kwDOAPphoM5-himE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 5,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2122721668/reactions"
            },
            "updated_at": "2024-05-21T14:06:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2122721668",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "If it's reasonably straightforward to document understandably and -- crucially -- works for every commentstring (yes, even COBOL) then I don't mind.\r\n\r\nHaving support for multi-valued commentstrings would be interesting as well but would require upstream buy-in (and is effectively blocked by option refactor). (But since Vim recently added their own built-in commenting, they may be interested in this as well; this would allow supporting both `/*%s*/` and `// %s` in C, for example.)",
            "created_at": "2024-05-21T14:13:45Z",
            "html_url": "https://github.com/neovim/neovim/issues/28872#issuecomment-2122737189",
            "id": 2122737189,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28872",
            "node_id": "IC_kwDOAPphoM5-hmYl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2122737189/reactions"
            },
            "updated_at": "2024-05-21T14:13:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2122737189",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "NONE",
            "body": "> What I can suggest as a solution is to use the following (for better wording I might need @clason's help):\r\n> \r\n> * Line is commented if it matches 'commentstring' with trimmed parts.\r\n> * Adding comment is 100% relying on 'commentstring' structure (as it is now).\r\n> * Removing comment is first trying explicit 'commentstring' with fallback on trying its trimmed parts.\r\n\r\nThis is _exactly_ what I was thinking at least\r\n\r\n",
            "created_at": "2024-05-21T14:17:35Z",
            "html_url": "https://github.com/neovim/neovim/issues/28872#issuecomment-2122745490",
            "id": 2122745490,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28872",
            "node_id": "IC_kwDOAPphoM5-hoaS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2122745490/reactions"
            },
            "updated_at": "2024-05-21T14:17:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2122745490",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5160701?v=4",
                "events_url": "https://api.github.com/users/seblj/events{/privacy}",
                "followers_url": "https://api.github.com/users/seblj/followers",
                "following_url": "https://api.github.com/users/seblj/following{/other_user}",
                "gists_url": "https://api.github.com/users/seblj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seblj",
                "id": 5160701,
                "login": "seblj",
                "node_id": "MDQ6VXNlcjUxNjA3MDE=",
                "organizations_url": "https://api.github.com/users/seblj/orgs",
                "received_events_url": "https://api.github.com/users/seblj/received_events",
                "repos_url": "https://api.github.com/users/seblj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seblj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seblj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seblj"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> If it's reasonably straightforward to document understandably ...\r\n\r\nMy best attempt at documenting was in the comment. May be not concise enough for help.\r\n\r\n> ... and -- crucially -- works for every commentstring (yes, even COBOL) then I don't mind.\r\n\r\nIt works in a sense of \"does not break editing\", but not necessarily in a sense \"aligns with how comments are treated by the language\" (as those might *require* having whitespace). And COBOL fieltype does not have 'commentstring' set 🤔",
            "created_at": "2024-05-21T14:22:01Z",
            "html_url": "https://github.com/neovim/neovim/issues/28872#issuecomment-2122754830",
            "id": 2122754830,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28872",
            "node_id": "IC_kwDOAPphoM5-hqsO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2122754830/reactions"
            },
            "updated_at": "2024-05-21T14:22:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2122754830",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "It does:\r\n```vim\r\nsetlocal commentstring=\\ \\ \\ \\ \\ \\ *%s\r\n```",
            "created_at": "2024-05-21T14:23:44Z",
            "html_url": "https://github.com/neovim/neovim/issues/28872#issuecomment-2122758466",
            "id": 2122758466,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28872",
            "node_id": "IC_kwDOAPphoM5-hrlC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 1,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2122758466/reactions"
            },
            "updated_at": "2024-05-21T14:23:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2122758466",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">It works in a sense of \"does not break editing\", but not necessarily in a sense \"aligns with how comments are treated by the language\" (as those might require having whitespace).\r\n\r\nI still am not aware of a single language in existence that requires whitespace after a comment character. Even the examples you gave in your earlier comment are sus: the Python ftplugin uses the `b` flag in the `'comments'` option, but you certainly _do not_ need whitespace after `#` for a comment in Python. So I would not trust the existing runtime files in that regard.",
            "created_at": "2024-05-21T14:27:07Z",
            "html_url": "https://github.com/neovim/neovim/issues/28872#issuecomment-2122765653",
            "id": 2122765653,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28872",
            "node_id": "IC_kwDOAPphoM5-htVV",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2122765653/reactions"
            },
            "updated_at": "2024-05-21T14:27:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2122765653",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@echasnovski Your patch looks good to me and gives the behavior I would expect.",
            "created_at": "2024-05-22T16:25:54Z",
            "html_url": "https://github.com/neovim/neovim/issues/28872#issuecomment-2125225642",
            "id": 2125225642,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28872",
            "node_id": "IC_kwDOAPphoM5-rF6q",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 5,
                "laugh": 0,
                "rocket": 0,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2125225642/reactions"
            },
            "updated_at": "2024-05-22T16:25:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2125225642",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I tested and it also works perfectly with two-sided commentstrings like `<!--\\ %s\\ -->`!",
            "created_at": "2024-05-22T19:26:32Z",
            "html_url": "https://github.com/neovim/neovim/issues/28872#issuecomment-2125591737",
            "id": 2125591737,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28872",
            "node_id": "IC_kwDOAPphoM5-sfS5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2125591737/reactions"
            },
            "updated_at": "2024-05-22T19:26:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2125591737",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "And also COBOL?",
            "created_at": "2024-05-22T19:35:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/28872#issuecomment-2125609282",
            "id": 2125609282,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28872",
            "node_id": "IC_kwDOAPphoM5-sjlC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2125609282/reactions"
            },
            "updated_at": "2024-05-22T19:35:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2125609282",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Yes! (Maybe the two cases should get their own additional tests)",
            "created_at": "2024-05-22T19:37:57Z",
            "html_url": "https://github.com/neovim/neovim/issues/28872#issuecomment-2125612338",
            "id": 2125612338,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28872",
            "node_id": "IC_kwDOAPphoM5-skUy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2125612338/reactions"
            },
            "updated_at": "2024-05-22T19:37:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2125612338",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/55766287?v=4",
                "events_url": "https://api.github.com/users/ribru17/events{/privacy}",
                "followers_url": "https://api.github.com/users/ribru17/followers",
                "following_url": "https://api.github.com/users/ribru17/following{/other_user}",
                "gists_url": "https://api.github.com/users/ribru17/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ribru17",
                "id": 55766287,
                "login": "ribru17",
                "node_id": "MDQ6VXNlcjU1NzY2Mjg3",
                "organizations_url": "https://api.github.com/users/ribru17/orgs",
                "received_events_url": "https://api.github.com/users/ribru17/received_events",
                "repos_url": "https://api.github.com/users/ribru17/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ribru17/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ribru17/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ribru17"
            }
        }
    ],
    "comments": 19,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/28872/comments",
    "created_at": "2024-05-20T17:34:37Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/28872/events",
    "html_url": "https://github.com/neovim/neovim/issues/28872",
    "id": 2306446777,
    "labels": [
        {
            "color": "c2e0c6",
            "default": true,
            "description": "feature request",
            "id": 77997476,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3Nzk5NzQ3Ng==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/enhancement"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/28872/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 29,
        "created_at": "2024-05-14T14:02:12Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
            "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
            "followers_url": "https://api.github.com/users/zeertzjq/followers",
            "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
            "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/zeertzjq",
            "id": 35768171,
            "login": "zeertzjq",
            "node_id": "MDQ6VXNlcjM1NzY4MTcx",
            "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
            "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
            "repos_url": "https://api.github.com/users/zeertzjq/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/zeertzjq"
        },
        "description": "",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/42",
        "id": 11051793,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/42/labels",
        "node_id": "MI_kwDOAPphoM4AqKMR",
        "number": 42,
        "open_issues": 6,
        "state": "open",
        "title": "0.10.1",
        "updated_at": "2024-05-28T01:49:49Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/42"
    },
    "node_id": "I_kwDOAPphoM6JeZW5",
    "number": 28872,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 20,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 20,
        "url": "https://api.github.com/repos/neovim/neovim/issues/28872/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/28872/timeline",
    "title": "Commenting is too restrictive for toggling uncomment",
    "updated_at": "2024-05-23T20:30:54Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/28872",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/5160701?v=4",
        "events_url": "https://api.github.com/users/seblj/events{/privacy}",
        "followers_url": "https://api.github.com/users/seblj/followers",
        "following_url": "https://api.github.com/users/seblj/following{/other_user}",
        "gists_url": "https://api.github.com/users/seblj/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/seblj",
        "id": 5160701,
        "login": "seblj",
        "node_id": "MDQ6VXNlcjUxNjA3MDE=",
        "organizations_url": "https://api.github.com/users/seblj/orgs",
        "received_events_url": "https://api.github.com/users/seblj/received_events",
        "repos_url": "https://api.github.com/users/seblj/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/seblj/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/seblj/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/seblj"
    }
}