{
    "active_lock_reason": "resolved",
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "Rationale:\r\n1. Why C and not remote protocol based on msgpack?\r\n   \r\n   There are lots of things which require fast VimL execution. I am very unsure that one can implement fast `vim.eval` if it will first send message to NeoVim and then send message to VimL interpreter, which will in turn send NeoVim message back which NeoVim should resend to Python. I.e. it doubles amount of messages that are needed to be send.\r\n2. Why only public API?\r\n   - It can be abstracted so that at some point in the future one may choose whether to use embedded VimL interpreter or VimL interpreter in the separate process. Depending on implementation (details below) it may be useful for parallel execution of plugins or for providing virtual environments (e.g. to workaround plugin conflicts or to allow language-agnostic sandbox mode which restricts the API).\r\n   - Current Python/Ruby/whatever interfaces are very incomplete: a large set of features is available only via `vim.eval` or even `vim.command`. Restricting VimL to public API is the easiest way to make sure that any feature that programmer may use appears in all languages almost at once via saner API then `vim.eval`/`vim.command`.\r\n   - Currently there is a number of things which are not possible even with VimL: e.g. you cannot get a list of signs without using `:redir` hack. Restricting VimL to public API is an easy way to make sure that we cover all functions with more or less sane API. This will also allow us to move formatting code from C to lua.\r\n   - If some restrictions (like thread safety) are put on functions they are most likely officially put only on public API functions. Unofficially thread safety should be a property of any or almost any function, but actually it may be implemented via some hacks at some intermediate level. There is some code for parallel VimL execution, this restriction should make it safer. It is also less stress for developers: to make something …-safe for all languages you need to make API …-safe, not make VimL _and_ API safe.\r\n\r\nSome details I am not sure about:\r\n1. Where should be scopes kept? Keeping them in NeoVim will provide faster access, keeping them in VimL implementation seems cleaner. I would stick with the second.\r\n2. Where should specifically be `v:` scope variables kept. Some variables (like v:count) are logical to keep inside NeoVim, some may be kept anywhere (like `v:progname`: it is readonly), some are logical to keep only in VimL interpreter (like `v:key`). I would special-case `v:` dictionary, making it dictionary-like object, in long term they may be optimized for direct API calls or interpreter state access (keeping dictionary-like object for compatibility with those people who use `v:` as a scope dictionary directly).\r\n3. What to do with options like `&isident`: some options are needed for parsing/execution, but are checked really often to use API calls or are checked without using public API via non-VimL-interpreter vim functions. I would stick with what is in the next point:\r\n4. I still use non-API Vim functions in the parser. To separate NeoVim and VimL interpreter this should be avoided. I think best is to move all functions I can to VimL without breaking NeoVim (only applicable for functions that were used for nothing, but implementing features moved to VimL), all functions I can’t should reside in files disconnected from NeoVim as much as possible, ideally in a separate namespace (directory) without imports not from that namespace (this is mostly relevant for `memory.c`).\r\n   \r\n   This includes functions using options: they will accept options as an argument and their caller will be made responsible for providing correct ones.\r\n   \r\n   `&isident`-depending options which appear to use optimized variant of option will require additional overhead for checking whether option changed, this check may be promoted to the higher level (e.g. happen only once per expression parsing or per one command parsing). If such functions appear in a separate namespace as they are used by NeoVim then it is supposed that they define optimized structure and option converter in that namespace and accept optimized structure in argument. Caching will be responsibility of the caller.\r\n\r\n\r\n",
    "closed_at": "2023-03-08T17:41:18Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk"
    },
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Decoupling VimL from Neovim and putting it on the same level as other languages is a nice idea. I can't say anything for sure without thinking more about the subject, but I guess this would be much easier to do in a more distant future when Neovim decides to reduce compatibility with Vim.\n",
            "created_at": "2014-06-02T16:32:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/801#issuecomment-44859948",
            "id": 44859948,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/801",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ0ODU5OTQ4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/44859948/reactions"
            },
            "updated_at": "2014-06-02T16:32:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/44859948",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Even though I'm fuzzy on the specifics (I'm not a VimL veteran like you guys), I support the idea. This will ensure a sane API that can be implemented by all languages.\n\nThe way I understood it, ZyX, is that this proposal would make `vim.eval` and `vim.command` redundant in the future. That would be nice as well.\n",
            "created_at": "2014-06-02T16:37:54Z",
            "html_url": "https://github.com/neovim/neovim/issues/801#issuecomment-44860612",
            "id": 44860612,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/801",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ0ODYwNjEy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/44860612/reactions"
            },
            "updated_at": "2014-06-02T16:37:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/44860612",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "By the way, there is a proposal for new python interfaces which I once made for vim: https://gist.github.com/ZyX-I/5561409. Was deferred for unknown amount of time when I realized I cannot finish this in time (before 7.4 release). I think it should go to a separate issue though.\n",
            "created_at": "2014-06-02T17:08:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/801#issuecomment-44864248",
            "id": 44864248,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/801",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ0ODY0MjQ4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/44864248/reactions"
            },
            "updated_at": "2014-06-02T17:08:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/44864248",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "NONE",
            "body": "Excerpts from Thiago de Arruda's message of Mon Jun 02 16:32:11 +0000 2014:\n\n> Decoupling VimL from Neovim and putting it on the same level as other\n> languages is a nice idea.\n> Moreover it allows VimL to be developped outside of Vim.\n",
            "created_at": "2014-06-02T21:03:43Z",
            "html_url": "https://github.com/neovim/neovim/issues/801#issuecomment-44890937",
            "id": 44890937,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/801",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ0ODkwOTM3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/44890937/reactions"
            },
            "updated_at": "2014-06-02T21:03:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/44890937",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/34086?v=4",
                "events_url": "https://api.github.com/users/MarcWeber/events{/privacy}",
                "followers_url": "https://api.github.com/users/MarcWeber/followers",
                "following_url": "https://api.github.com/users/MarcWeber/following{/other_user}",
                "gists_url": "https://api.github.com/users/MarcWeber/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MarcWeber",
                "id": 34086,
                "login": "MarcWeber",
                "node_id": "MDQ6VXNlcjM0MDg2",
                "organizations_url": "https://api.github.com/users/MarcWeber/orgs",
                "received_events_url": "https://api.github.com/users/MarcWeber/received_events",
                "repos_url": "https://api.github.com/users/MarcWeber/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MarcWeber/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MarcWeber/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MarcWeber"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I've mentioned something like this on an email to @tarruda. I think my\nemail had many wrong assumptions about neovim architecture at the time but\nthere were useful things there.\n\nI was concerned with how the `vim.eval` method is the equivalent of a RPC\nthat uses VimL as the serialization format. That's not elegant. My\nsuggestion was a bigger RPC API that would make the use of `vim.eval`\nunnecessary or very infrequent in plugins.\n\nThat's different from what is proposed here. I didn't think about VimL on\ntop of the RPC API. IMO the best decision is to have VimL and RPC as\nseparate things.\n\nThe benefit/(cost*complexity) ratio of reimplementing a language like VimL\non top of a RPC seems pretty small to me. The reason why there's a cross\nlanguage RPC service in neovim is to free developers from the\nsingle-language model imposed by Vim in the first place.\n",
            "created_at": "2014-06-03T01:52:31Z",
            "html_url": "https://github.com/neovim/neovim/issues/801#issuecomment-44911959",
            "id": 44911959,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/801",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ0OTExOTU5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/44911959/reactions"
            },
            "updated_at": "2014-06-03T01:52:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/44911959",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/207795?v=4",
                "events_url": "https://api.github.com/users/felipecrv/events{/privacy}",
                "followers_url": "https://api.github.com/users/felipecrv/followers",
                "following_url": "https://api.github.com/users/felipecrv/following{/other_user}",
                "gists_url": "https://api.github.com/users/felipecrv/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/felipecrv",
                "id": 207795,
                "login": "felipecrv",
                "node_id": "MDQ6VXNlcjIwNzc5NQ==",
                "organizations_url": "https://api.github.com/users/felipecrv/orgs",
                "received_events_url": "https://api.github.com/users/felipecrv/received_events",
                "repos_url": "https://api.github.com/users/felipecrv/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/felipecrv/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/felipecrv/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/felipecrv"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> The benefit/(cost*complexity) ratio of reimplementing a language like VimL on top of a RPC seems pretty small to me.\n\nIt is impossible and not needed to implement _the language_ on top of that API. But it is possible to make the implementation use that API.\n\n> The benefit/(cost*complexity) ratio of reimplementing a language like VimL on top of a RPC seems pretty small to me. The reason why there's a cross language RPC service in neovim is to free developers from the single-language model imposed by Vim in the first place.\n\nYou are missing some points:\n1. VimL is being completely rewritten.\n2. API is supposed to cover every feature NeoVim has.\n\nThus a) reimplementing on top of API is going to contribute almost nothing because VimL is being already reimplemented, b) in any case we are going to cover everything with this API thus c) if VimL is implemented _not_ on top of this API it is _double_ work: first to implement feature interface in the API, then in VimL.\n\nAnd, by the way, this suggestion was to use the RPC API implementation functions, but not RPC API itself on the first stage.\n",
            "created_at": "2014-06-03T17:20:00Z",
            "html_url": "https://github.com/neovim/neovim/issues/801#issuecomment-44993998",
            "id": 44993998,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/801",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ0OTkzOTk4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/44993998/reactions"
            },
            "updated_at": "2014-06-03T17:20:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/44993998",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I wanted to answer this morning but got lost in work. If I understand ZyX right I agree with him. Currently we have this:\n\n```\ncore --- VimL\n     `-----`------- API ------ msgpack layer\n```\n\nNote that API functions sometimes defer to VimL (even if indirectly) through `eval`/`command`. What I _think_ ZyX is proposing is this:\n\n```\ncore ---- API\n             `----- VimL\n             `----- LuaJIT ffi vim module (runs plugins written in Lua)\n             `----- Msgpack RPC ----------------- external plugin / GUI processes\n```\n\nThis would ensure that all functionality required to \"drive\" vim is available in a nice, clean form in the API. It would allow us to separate VimL from the core as well.\n\nThe end-situation where I think we're going to go is:\n\n```\ncore ---- API\n            `----- LuaJIT ffi vim module (also runs translated VimL code)\n            `----- Msgpack RPC ----------------- external plugin / GUI processes\n```\n\nI personally think this design is entirely cleaner. And allows us to choose between very low overhead and maximum flexibility at runtime.\n\nAm I wrong, ZyX?\n\n**EDIT**: Also @philix. While it would be technically possible to really rip out the VimL implementation, put it in a plugin process and make it communicate over RPC, I really don't think that's going to net us a lot of benefits.\n\n**EDIT 2**: ZyX, your use of \"contribute\" is completely correct here: \"API is going to contribute almost nothing because VimL\", but it's ambigeous, because it could be (1) contributing to the neovim project (in a good way) or (2) contribute extra cost to @philix's equation. I think you meant the later, but I first read it as the former.\n",
            "created_at": "2014-06-03T17:26:41Z",
            "html_url": "https://github.com/neovim/neovim/issues/801#issuecomment-44994830",
            "id": 44994830,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/801",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ0OTk0ODMw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/44994830/reactions"
            },
            "updated_at": "2014-06-03T17:35:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/44994830",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I am not going to use LuaJIT ffi for VimL: I think NeoVim must support lua. Also if we are using RPC then there is no need in requiring LuaJIT and ffi here.\n\nI think sticking with only LuaJIT support is fine if it only touches build system, but already built NeoVim should work with either.\n\nIt is also not safe to run translated VimL code and lua code in one interpreter instances, so the picture should look like this:\n\n```\ncore --- API --- VimL (using lua C extensions)\n           ` --- Msgpack RPC --- other languages\n```\n\n. No lua special casing, only VimL special casing and only due to performance reasons.\n",
            "created_at": "2014-06-05T03:35:38Z",
            "html_url": "https://github.com/neovim/neovim/issues/801#issuecomment-45177838",
            "id": 45177838,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/801",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTc3ODM4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45177838/reactions"
            },
            "updated_at": "2014-06-05T03:35:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45177838",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "`LuaJIT` is already in core, it already works. I tested creating and destroying a state to implement `os_libcall` with the ffi (it worked, but I found the libuv solution cleaner). So if it's _not_ over RPC, then there's not reason not to use the ffi. LuaJIT works on all our target platforms (and then some) and we bundle it in (statically I believe), so there's no reason not to use its functionality. Already built neovim, as you call it, already includes LuaJIT. Just like redis includes vanilla Lua. There's no separating them. We chose this to have a fast runtime for our scripting needs. LuaJIT is also the only thing that will make the convoluted code that the luaviml translator must generate, run fast. Its tracing feature takes care of that. Vanilla Lua, though no slouch, will surely be quite slow at that. I have no interest in seeing posts appear that say: neovim slower than vim. To summarize:\n- LuaJIT is builtin\n- When JIT compilation is on (which is true for all our target platforms), the LuaJIT ffi is much faster than call to Lua C libraries\n- Any Lua C library would effectively be stack-pushing boilerplate on top of `api.h` and consorts. Why not just call the `api.h` functions directly via the ffi?\n\nThe RPC, in my eyes, is so that any language under the sun can have support for controlling vim as long as it can communicate (over sockets, named pipes, ...) and encode/decode msgpack. It doesn't mean that our standard scripting languages (namely `VimL` and `Lua`), should be similarly handicapped. (I mean that in the speed department, functionality wise they'll be the same). If a user really wants to use plain vanilla Lua, then that will be possible over the RPC.\n\n**EDIT**: your diagram is also misleading, it connects VimL directly with the API, which is not what's going to happen in any case. The VimL is translated to Lua, and that (would) connect to the API. When you take that into account, there's no need to _not_ allow Lua as a standard scripting language for anyone that wants it. Moreover, there's absolutely no need to special case as you say. Not for VimL (which will become Lua code), nor for Lua (which will hopefully call via the ffi). Vim core will be unaware.\n\n**EDIT 2**: I also don't understand why you cite performance reasons and contemplate using vanilla Lua running the translated code at the same time.\n",
            "created_at": "2014-06-05T06:20:54Z",
            "html_url": "https://github.com/neovim/neovim/issues/801#issuecomment-45184662",
            "id": 45184662,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/801",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTg0NjYy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45184662/reactions"
            },
            "updated_at": "2014-06-05T06:25:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45184662",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@aktau The beauty of luajit is that its API is 100% compatible with plain lua, so they can be replaced with no effort. One advantage of making neovim compatible with lua standard API, is that we can use luajit for releasing but lua development/testing, since luajit does not seem to play well with tools like valgrind or ASAN\n",
            "created_at": "2014-06-05T10:20:16Z",
            "html_url": "https://github.com/neovim/neovim/issues/801#issuecomment-45203138",
            "id": 45203138,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/801",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjAzMTM4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45203138/reactions"
            },
            "updated_at": "2014-06-05T10:20:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45203138",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> @aktau The beauty of luajit is that its API is 100% compatible with plain lua, so they can be replaced with no effort. \n\nIt's compatible with Lua 5.1 and a subset of Lua 5.2 (depending on compilation options), most users instinctively use 5.1 anyway so that's fine. The API is indeed Lua 5.1. (also note that they are diverging more and more, let's see what happens with Lua 5.3)\n\n> One advantage of making neovim compatible with lua standard API, is that we can use luajit for releasing but lua development/testing, since luajit does not seem to play well with tools like valgrind or ASAN\n\nThe argument for *SAN is a good one, a sound technical reason for allowing it. I hadn't thought of that yet. It needn't be a big problem anyway. We can just as well not load the C library when LuaJIT is being used and have it use an ffi based variant. I was just thinking that this would be another layer to maintain that's basically just pushing/popping from the Lua stack over and over again. It shouldn't contain any extra functionality because the entirety of the API should be available from `api.h`. The ffi is, in my opinion, a better way to do this.   However, the argument for the sanitizers has convinced me that it could be beneficial to also have plain Lua as an optional built-in interpreter.\n\nI still think we should also provide an ffi layer though. If LuaJIT is present, it would just not load the C module, but provide its own `vim` module that uses the ffi.\n",
            "created_at": "2014-06-05T10:26:54Z",
            "html_url": "https://github.com/neovim/neovim/issues/801#issuecomment-45203585",
            "id": 45203585,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/801",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjAzNTg1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45203585/reactions"
            },
            "updated_at": "2014-06-05T10:28:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45203585",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> It's compatible with Lua 5.1 and a subset of Lua 5.2 (depending on compilation options), most users instinctively use 5.1 anyway so that's fine. The API is indeed Lua 5.1. (also note that they are diverging more and more, let's see what happens with Lua 5.3)\n\nI do not think this is instinct: e.g. in Gentoo lua-5.2 is masked (since 06 Mar 2012, [blocker issue](https://bugs.gentoo.org/show_bug.cgi?id=407091) is more then two years old) and it looks like Gentoo maintainers are going to introduce lua slots (which will allow parallel installation of more then one lua package).\n\nNote that luajit in Gentoo is considered unstable (no stable versions at all). This is one of the reasons I do not like depending on luajit: if not NeoVim I would not have installed it at all (trying to keep as less unstable versions as possible, with some exceptions).\n\n> I still think we should also provide an ffi layer though. If LuaJIT is present, it would just not load the C module, but provide its own vim module that uses the ffi.\n\nI am very unsure this has any sense: I would only consider this as an option if it introduced significant speed improvement. Though I think it is possible to use lua C API as a thin generated wrapper around NeoVim API functions and (if needed) generate a luaJIT ffi-based module, so significant speed improvement will have to be less significant due to task being much easier.\n\nOther advantages are not applicable: you cannot say using ffi is going to make code more readable because non-ffi version is not thrown away, maintaining and testing the code will be harder due to having two implementations, LuaJIT ffi is definitely less wide-spread then lua C API (as LuaJIT is compatible with the latter systems with `ffi` support is a subset of the systems which allow using lua C API).\n",
            "created_at": "2014-06-05T17:01:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/801#issuecomment-45245944",
            "id": 45245944,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/801",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjQ1OTQ0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45245944/reactions"
            },
            "updated_at": "2014-06-05T17:01:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45245944",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Note that luajit in Gentoo is considered unstable (no stable versions at all). This is one of the reasons I do not like depending on luajit: if not NeoVim I would not have installed it at all (trying to keep as less unstable versions as possible, with some exceptions).\n\nThis sounds a bit FUD-y. For one, we're including LuaJIT (as a library) in neovim, just like redis includes vanilla Lua. Yet, to install redis one does not need to install lua. In the same way, someone need not install LuaJIT to use neovim.\n\nTo say that LuaJIT is unstable is also FUD-like. It is not unstable, in my experience. It has a pretty wide usebase (especially among games) and bugs that are reported are fixed in trunk immediately. If you don't believe me, follow the mailing list, Mike Pall is not only an exceptional dev, he's also a great maintainer. Master is basically always the most stable version, as he has said himself.\n\n> I am very unsure this has any sense: I would only consider this as an option if it introduced significant speed improvement.\n\nIt does have a speed advantage, those calls are optimized by the JIT, you can find this in the mailing list as well. As for the significance: we will have to test it. I do not believe this will be difficult. Creating an ffi wrapper is usually quite a bit simpler than creating the equivalent Lua C module.\n\n> LuaJIT ffi is definitely less wide-spread then lua C API (as LuaJIT is compatible with the latter systems with ffi support is a subset of the systems which allow using lua C API).\n\nWhile technically correct, when you reduce the scope to neovim (we'll be shipping with LuaJIT), that statement is moot. More to the point, all our target platforms support the JIT compiler and thus have fast ffi calls: http://luajit.org/luajit.html\n\nNote that even though it is not mentioned, LuaJIT also supports Illumos (Mike has committed patches for that), should that be a goal in the future.\n\nIt does not matter very much though, you can develop the C module and I (or someone else) will just bind it directly to the ffi and then we can see on objective grounds which approach should be favoured for distribution.\n",
            "created_at": "2014-06-05T18:42:43Z",
            "html_url": "https://github.com/neovim/neovim/issues/801#issuecomment-45258034",
            "id": 45258034,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/801",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjU4MDM0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45258034/reactions"
            },
            "updated_at": "2014-06-05T18:43:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45258034",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> This sounds a bit FUD-y. For one, we're including LuaJIT (as a library) in neovim, just like redis includes vanilla Lua. Yet, to install redis one does not need to install lua. In the same way, someone need not install LuaJIT to use neovim.\n\nI do not like the idea of bundled dependencies and disable them immediately as I see if I can. Otherwise I should perform additional steps to verify that my `lua` I use to test code has the same features as NeoVim one and I do not like the idea. If there was NeoVim release I would not like the idea of potentially seeing buggy or insecure code because after updating system NeoVim continued to use older bundled version. Dependencies in package management systems were developed to solve certain problems, not for creating additional fun for developers. Bundling has its own advantages, but I like them less then dependencies.\n\nAfter some point in the past NeoVim stopped bothering me with trying to download and compile lujit/luarocks/libuv or whatever, not to mention using them, and I hope that it will continue to be the case and that package maintainers will also set up their systems to disallow NeoVim to violate dependency system.\n\n> To say that LuaJIT is unstable is also FUD-like. It is not unstable, in my experience. It has a pretty wide usebase (especially among games) and bugs that are reported are fixed in trunk immediately. If you don't believe me, follow the mailing list, Mike Pall is not only an exceptional dev, he's also a great maintainer. Master is basically always the most stable version, as he has said himself.\n\nI was not saying “LuaJIT is unstable”. I was saying that “_in Gentoo_ LuaJIT is considered unstable”. There are plenty of valid reasons to consider LuaJIT package unstable including, but not limited to, the case when upstream codebase is unstable. E.g. LuaJIT is just not well-tested or has unstable dependencies.\n\nI am generally trying to avoid using unstable packages, though not very actively. But depending on how much I need whatever I am installing it may be a blocker (mostly in cases when I just want to try out something, especially if “something” is both considered unstable on its own and has unstable dependencies).\n\n> It does have a speed advantage, those calls are optimized by the JIT, you can find this in the mailing list as well. As for the significance: we will have to test it. I do not believe this will be difficult. Creating an ffi wrapper is usually quite a bit simpler than creating the equivalent Lua C module.\n\nI think I can construct a solution which allows easily replacing C variant with ffi one (described in the sentence you have not quoted). I know that calls are optimized, but besides these calls there is much going on. It may appear that performance is limited to NeoVim own code. Or that using C API disabled most of JIT optimizations in surrounding code. As benchmarks for the former obviously cannot exist at this point, benchmarks for the latter certainly can, though I have not found them.\n",
            "created_at": "2014-06-05T20:22:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/801#issuecomment-45269310",
            "id": 45269310,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/801",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjY5MzEw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45269310/reactions"
            },
            "updated_at": "2014-06-05T20:22:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45269310",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I do not like the idea of bundled dependencies and disable them immediately as I see if I can. Otherwise I should perform additional steps to verify that my lua I use to test code has the same features as NeoVim one and I do not like the idea. If there was NeoVim release I would not like the idea of potentially seeing buggy or insecure code because after updating system NeoVim continued to use older bundled version. Dependencies in package management systems were developed to solve certain problems, not for creating additional fun for developers. Bundling has its own advantages, but I like them less then dependencies.\n> \n> After some point in the past NeoVim stopped bothering me with trying to download and compile lujit/luarocks/libuv or whatever, not to mention using them, and I hope that it will continue to be the case and that package maintainers will also set up their systems to disallow NeoVim to violate dependency system.\n\nWe will provide prebuilt packages with all dependencies bundled for users that just want to get started fast without having to resolve dependencies manually. Those who want to use system dependencies(such as package maintainers) can do so very easily by passing `-DUSE_BUNDLED=OFF` to cmake , so we are not violating anything.\n",
            "created_at": "2014-06-05T20:40:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/801#issuecomment-45271550",
            "id": 45271550,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/801",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjcxNTUw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45271550/reactions"
            },
            "updated_at": "2014-06-05T20:40:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45271550",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/842846?v=4",
                "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
                "followers_url": "https://api.github.com/users/tarruda/followers",
                "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
                "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tarruda",
                "id": 842846,
                "login": "tarruda",
                "node_id": "MDQ6VXNlcjg0Mjg0Ng==",
                "organizations_url": "https://api.github.com/users/tarruda/orgs",
                "received_events_url": "https://api.github.com/users/tarruda/received_events",
                "repos_url": "https://api.github.com/users/tarruda/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tarruda"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> ..., and I hope that it will continue to be the case and that package maintainers will also set up their systems to disallow NeoVim to violate dependency system.\n\nThis seems to be as much a philosophical issue as a technical one, as even very experienced developers can't seem to agree on that. I reference the ascendance of the Go language, which is basically static-everything made manifest. No matter which side you are on, you can't deny that Go has a nice pedigree. I was under the impression we would be shipping the scripting runtime with neovim as that would (1) enable us to know exactly which versions are being used, (2) know that they work together, (3) is not any different from VimL shipping with vim, (4) patch things ourselves if desired/necessary, (5) make things less complicated for the user, (6) seems to work fine for redis (which is UNIX-only, by the way), (7) allow us to upgrade on our own pace (no need to keep compatiblity with lua x.x because some important distribution decides they don't like anything else) and I'll think of some other things in the meantime.\n\nThat said, I'm not against dynamic linking for those that really do wish it, and I agree that especially for security libraries this is a very, very necessary thing. It's just that I don't believe that this should be the main focus.\n",
            "created_at": "2014-06-05T20:41:12Z",
            "html_url": "https://github.com/neovim/neovim/issues/801#issuecomment-45271681",
            "id": 45271681,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/801",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjcxNjgx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45271681/reactions"
            },
            "updated_at": "2014-06-05T20:41:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45271681",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nOn June 6, 2014 12:40:23 AM GMT+03:00, Thiago de Arruda notifications@github.com wrote:\n\n> > I do not like the idea of bundled dependencies and disable them\n> > immediately as I see if I can. Otherwise I should perform additional\n> > steps to verify that my lua I use to test code has the same features as\n> > NeoVim one and I do not like the idea. If there was NeoVim release I\n> > would not like the idea of potentially seeing buggy or insecure code\n> > because after updating system NeoVim continued to use older bundled\n> > version. Dependencies in package management systems were developed to\n> > solve certain problems, not for creating additional fun for developers.\n> > Bundling has its own advantages, but I like them less then\n> > dependencies.\n> > \n> > After some point in the past NeoVim stopped bothering me with trying\n> > to download and compile lujit/luarocks/libuv or whatever, not to\n> > mention using them, and I hope that it will continue to be the case and\n> > that package maintainers will also set up their systems to disallow\n> > NeoVim to violate dependency system.\n> \n> We will provide prebuilt packages with all dependencies bundled for\n> users that just want to get started fast without having to resolve\n> dependencies manually. Those who want to use system dependencies(such\n> as package maintainers) can do so very easily by passing\n> `-DUSE_BUNDLED=OFF` to cmake , so we are not violating anything.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/neovim/neovim/issues/801#issuecomment-45271550\n\nThis variant seems to be the most satisfactory for both sides. After giving redis as the example (I have checked: its ebuild does not list lua as a dependency) I was put under the impression that current situation is going to be altered.\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niQJNBAEBCgA3BQJTkOSdMBwfMDI7PjIgHTg6PjswOSAQOzU6QTA9NEA+MjhHIDxr\ncC1wYXZAeWFuZGV4LnJ1PgAKCRBu+P2/AXZZIqXQEACHlJGH9E/otlJG78auMgZ8\nGT1ZPl7OGbuC+qFLMa27zpBYu/O8EE7TEiBii1vaPJNKITb+Cr1fiRgyWD1ux5Q9\nBGVAucXDyR5ZJX6xex12MKHQ+u9nKK1Qtr9biJdQADK2hJ8S3kuedihZcO2fsgXS\nVgFgJkb6EI8W4pZYjZGh/emchOoFS0X65vXMR58WA8KwHGhZoBaJa2pxTIwIPlaI\nhWOdA70VbdscxNLOAO6Sfmwc4tNUBXu1ABvoviZd0gWcK7gS3E1GEjbW+0L641SD\n64VoUELXO3gKSKCfpEE3FyTDildtUopvFZiof6XvJBSUTQzpVIE+O07+1mwvHKwn\nH8Ytu1yq5HJu0xN5CJ/dmfhXzlWLJAkRs1Sa7Ihx4+/eEDPRK3mfgEDVRxwdzs3L\nxGxgwgo87+mRmQ8d52q+0VdLnWs/3vHNP0rG7100ayW56cmjJsJzxoS0iag74k6V\nAlowLHPCEvF1hCUpQHhzbdL+BM3yioTMkycKCCt5kiqfHlOEny3evWCFEZo41Res\nkOvK5Fe5meALJzT6ePWMGGvJKK8Cp6/ZMxJPKDnoUrzH1eVblYGhjmTG98ly99tj\nK3+iS1OpKIE8vuMrxBA0VnjK6C3XaKBxpypgo+22D90T0H2LPcJdEJtQ4vCatTGo\n+vlGvusSNXwlwwKlGLQ4/g==\n=kQto\n-----END PGP SIGNATURE-----\n",
            "created_at": "2014-06-05T21:44:11Z",
            "html_url": "https://github.com/neovim/neovim/issues/801#issuecomment-45279107",
            "id": 45279107,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/801",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Mjc5MTA3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45279107/reactions"
            },
            "updated_at": "2014-06-05T21:44:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45279107",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "As expected creating C API bindings generator was very trivial. What was not and is still not finished is creating converter functions which convert lua types to C types and vice versa (converting lua to C is much more boilerplate then C to lua though).\n",
            "created_at": "2014-06-08T06:48:10Z",
            "html_url": "https://github.com/neovim/neovim/issues/801#issuecomment-45429901",
            "id": 45429901,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/801",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDI5OTAx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45429901/reactions"
            },
            "updated_at": "2014-06-08T06:48:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45429901",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> As expected creating C API bindings generator was very trivial. What was not and is still not finished is creating converter functions which convert lua types to C types and vice versa (converting lua to C is much more boilerplate then C to lua though).\n\nWhich types exactly are you talking talking about? Primitives like `LUA_TNUMBER`? Or more complex things like `LUA_TLIGHTUSERDATA` or `LUA_TUSERDATA`, converting lua objects to C objects? Can you give a specific example? Perhaps I can be of assistance.\n",
            "created_at": "2014-06-08T08:06:37Z",
            "html_url": "https://github.com/neovim/neovim/issues/801#issuecomment-45431102",
            "id": 45431102,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/801",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDMxMTAy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45431102/reactions"
            },
            "updated_at": "2014-06-08T08:07:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45431102",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I do not need to convert `LUA_T*USERDATA` at all. By “unfinished” I was mainly meaning not working lists and dictionaries which appeared to not work just because I changed two functions for testing purposes and forgot to change them back.\n\nThere are also index integer types (specifically `Buffer*`/`Window*`/`Tabpage*`) which really need to be converted to userdata or something like that, but are now converted only from/to lua numbers. And non-index Integer and Float types which are all as well converted from/to `lua_Number` while I am not making sure they will fit. Either is fixable, but I did not want to bother right now and neither is really fixable without ffi (and now not only lua C API because necessary changes will disable JIT almost everywhere).\n\nBut there definitely is going to be an issue with function references. Nvim API is not able to hold them at all and for implementing `vim.bindeval` this is a requirement.\n",
            "created_at": "2014-06-08T11:34:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/801#issuecomment-45434620",
            "id": 45434620,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/801",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDM0NjIw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45434620/reactions"
            },
            "updated_at": "2014-06-08T11:34:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45434620",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> And non-index Integer and Float types which are all as well converted from/to lua_Number while I am not making sure they will fit.\n\nLuaJIT enables one to do reasonable (and very performant) integer arithmetic with customizable precedence rules as I've tested in another issue. Perhaps it's best to separate the integer handling as well as possible and load a different Lua module depending on the interpreter.\n\n> Either is fixable, but I did not want to bother right now and neither is really fixable without ffi (and now not only lua C API because necessary changes will disable JIT almost everywhere).\n\nThis sentence (especially the part between parentheses) is difficult to parse for me. Could you please elaborate? What would disable the JIT almost everywhere, for example? Can't it be abstracted away such that a different module can be loaded depending on the interpreter. I think it's fine that we support Lua as much as possible, because it allows us to run the sanitizers, but to cripple LuaJIT just for Lua support seems a bit much.\n\n> But there definitely is going to be an issue with function references. Nvim API is not able to hold them at all and for implementing vim.bindeval this is a requirement.\n\nNot sure how vim function references work. As I see it, lightuserdata is for (almost) naked pointers and userdata for objects with metadata, so perhaps the latter is required. I assume there is also no way to turn vim function references into Lua functions (which are first-class, as we know)?\n",
            "created_at": "2014-06-08T12:20:19Z",
            "html_url": "https://github.com/neovim/neovim/issues/801#issuecomment-45435496",
            "id": 45435496,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/801",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDM1NDk2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45435496/reactions"
            },
            "updated_at": "2014-06-08T12:20:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45435496",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> This sentence (especially the part between parentheses) is difficult to parse for me. Could you please elaborate? What would disable the JIT almost everywhere, for example? Can't it be abstracted away such that a different module can be loaded depending on the interpreter. I think it's fine that we support Lua as much as possible, because it allows us to run the sanitizers, but to cripple LuaJIT just for Lua support seems a bit much.\n\nIf I used userdata with custom metatable written in C for handling integers (which API defines to be 64-bit) it should disable JIT because integers are very widespread across VimL code.\n\n> Not sure how vim function references work. As I see it, lightuserdata is for (almost) naked pointers and userdata for objects with metadata, so perhaps the latter is required. I assume there is also no way to turn vim function references into Lua functions (which are first-class, as we know)?\n\nTurning vim function references to Lua functions is not needed: vim functions are _already_ translated to lua and they produce a funcref (currently just a lua function, but this may be changed). What _is_ needed is a way to pass these funcrefs to Python.\n\n> LuaJIT enables one to do reasonable (and very performant) integer arithmetic with customizable precedence rules as I've tested in another issue. Perhaps it's best to separate the integer handling as well as possible and load a different Lua module depending on the interpreter.\n\nI remember that benchmark. What are “customizable precedence rules” though?\n\nBy the way, lua-5.3 introduces integer type. lua-5.2 has interesting function `lua_pushunsigned` and a number of other `lua*unsigned` functions, but I am not sure what their result is exactly. LuaJIT and lua-5.3 both have 64-bit (signed, but this does not matter for indexes since we are not doing arithmetics on indexes and can simply cast the value) integers and use `lua_pushinteger` for them, so I think I will replace all current calls to `lua_pushnumber` used for integers with macros that uses `lua_pushinteger` or `lua_pushnumber`. There is still an issue with the fact that any lua may just be compiled with 32-bit types.\n",
            "created_at": "2014-06-08T13:09:49Z",
            "html_url": "https://github.com/neovim/neovim/issues/801#issuecomment-45436401",
            "id": 45436401,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/801",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDM2NDAx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45436401/reactions"
            },
            "updated_at": "2014-06-08T13:09:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45436401",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I remember that benchmark. What are “customizable precedence rules” though?\n\nThat was an error on my part, I apologize. What I meant was: customizable type coercion rules. And that's what was demonstrated with the LuaJIT metatype.\n\n> By the way, lua-5.3 introduces integer type\n\nI know, but seeing the rate of adoption of Lua 5.2, I wouldn't bet the farm on it just yet.\n\n> LuaJIT and lua-5.3 both have 64-bit (signed, but this does not matter for indexes since we are not doing arithmetics on indexes and can simply cast the value) integers and use lua_pushinteger for them, so I think I will replace all current calls to lua_pushnumber used for integers with macros that uses lua_pushinteger or lua_pushnumber\n\nSounds reasonable (at least for vanilla Lua). It would be easier for LuaJIT to work with its own native 64-bit type and the ffi, which interoperate just fine, but it doesn't matter.\n\n> There is still an issue with the fact that any lua may just be compiled with 32-bit types.\n\nThese fringe cases really needn't be supported, changing the default Number type for Lua is possible but entirely non-standard (and I've never seen this in the wild). When people go there, they need to take care of the results themselves, in my opinion. It wrecks a lot of assumptions.\n",
            "created_at": "2014-06-08T13:15:29Z",
            "html_url": "https://github.com/neovim/neovim/issues/801#issuecomment-45436504",
            "id": 45436504,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/801",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDM2NTA0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45436504/reactions"
            },
            "updated_at": "2014-06-08T13:15:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45436504",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "There is a problem: by reading `/usr/include/luajit-2.0/lua.h` I cannot find any defines which indicate that it is luajit, so probably cmake will have to add define for luajit. Will have to version-check to determine whether `lua_*integer` is supported in lua. What I do not like is that neither lua-5.3 nor luajit bothered to define a new LUA_T* for integers (I checked only documentation for lua-5.3 though, do not have it installed). If I am going to customize conversion rules in `vim.*` and keep table for floats this is not much of a problem though.\n\nThere is a question though: why luajit is on the list in NVIM_LINK_LIBRARIES? I just ripped it out and `nvim` executable compiled fine, so I will rip it out for `nvim` and keep only for `nvim-test.so` until I reach a stage where including my code in `nvim` makes sense. Will also introduce new cmake variable to control whether it is going to include lua or luajit libraries.\n\n> That was an error on my part, I apologize. What I meant was: customizable type coercion rules. And that's what was demonstrated with the LuaJIT metatype.\n\nCan you elaborate? I do not seem to find relevant documentation. `ffi.metatype` is said to work only on complex types:\n\n> Creates a ctype object for the given ct and associates it with a metatable. Only struct/union types, complex numbers and vectors are allowed. Other types may be wrapped in a struct, if needed.\n",
            "created_at": "2014-06-08T13:54:59Z",
            "html_url": "https://github.com/neovim/neovim/issues/801#issuecomment-45437329",
            "id": 45437329,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/801",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDM3MzI5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45437329/reactions"
            },
            "updated_at": "2014-06-08T13:54:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45437329",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> There is a question though: why luajit is on the list in NVIM_LINK_LIBRARIES? I just ripped it out and nvim executable compiled fine, so I will rip it out for nvim and keep only for nvim-test.so until I reach a stage where including my code in nvim makes sense. Will also introduce new cmake variable to control whether it is going to include lua or luajit libraries.\n\nBecause it was planned that LuaJIT will be the builtin interpreter, like libuv us the platform abstraction layer. So it is linked (either statically or dynamically) with the executable, even though Lua isn't used yet. I tested this in issue https://github.com/neovim/neovim/issues/795. By creating a short-lived Lua(JIT) state to load the dynamic library. It worked perfectly. We will have to add a Lua library in the medium-term anyway. We can just leave it in. Is it bothering you?\n\n> Can you elaborate? I do not seem to find relevant documentation. ffi.metatype is said to work only on complex types:\n\nYou can wrap a struct around an int64_t, which is how I defined an alternate integer type with the correct semantics (the ones you said were required for VimL). This is the proof of concept and benchmark: https://gist.github.com/aktau/9732390. For reference, this is the issue in which this was discussed and I proposed a metatype-based solution: https://github.com/neovim/neovim/issues/392.\n\n**EDIT**: The greatest thing about this metatype is that it supports the regular `+`, `-` et cetera operations. So it should require less special casing and makes the translated come more readable (debuggable?). Also, it performs as well as a regular lua Number, which astounds me.\n",
            "created_at": "2014-06-08T14:13:58Z",
            "html_url": "https://github.com/neovim/neovim/issues/801#issuecomment-45437755",
            "id": 45437755,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/801",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDM3NzU1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45437755/reactions"
            },
            "updated_at": "2014-06-08T14:20:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45437755",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> You can wrap a struct around an int64_t, which is how I defined an alternate integer type with the correct semantics (the ones you said were required for VimL). This is the proof of concept and benchmark: https://gist.github.com/aktau/9732390. For reference, this is the issue in which this was discussed and I proposed a metatype-based solution: #392.\n\nI will still have to use `vim.operation` for the reasons explained in that issue, so it is more a theoretical question. I could have probably made code a bit cleaner with overriding metatype, but code with boxing/unboxing does not look cleaner for me.\n\n> Because it was planned that LuaJIT will be the builtin interpreter, like libuv us the platform abstraction layer. \n\nIf I am not mistaking it was planned this way because VimL is going to be translated to lua. Not that it is bothering me much, but it is something I do not understand.\n",
            "created_at": "2014-06-08T14:28:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/801#issuecomment-45438089",
            "id": 45438089,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/801",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDM4MDg5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45438089/reactions"
            },
            "updated_at": "2014-06-08T14:28:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45438089",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Recent commit have added _two_ cmake variables: USE_LUAJIT and USE_LUA. First forces cmake to use luajit, second forces lua and third makes cmake try first load luajit and if it fails fall back to lua.\n",
            "created_at": "2014-06-08T14:30:40Z",
            "html_url": "https://github.com/neovim/neovim/issues/801#issuecomment-45438138",
            "id": 45438138,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/801",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDM4MTM4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45438138/reactions"
            },
            "updated_at": "2014-06-08T14:30:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45438138",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "By the way, lua appears to have a nice feature for forcing people to use `vim.VIM_*` constants and not hardcode integers: just use tables. `{} ~= {}`, `t[{}]=1; print (t[{}]) -- nil` and it still can hold arbitrary data (though same as well applies to any userdata value).\n",
            "created_at": "2014-06-08T14:36:50Z",
            "html_url": "https://github.com/neovim/neovim/issues/801#issuecomment-45438268",
            "id": 45438268,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/801",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDM4MjY4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45438268/reactions"
            },
            "updated_at": "2014-06-08T14:36:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45438268",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> EDIT: The greatest thing about this metatype is that it supports the regular +, - et cetera operations. So it should require less special casing and makes the translated come more readable (debuggable?). Also, it performs as well as a regular lua Number, which astounds me.\n\nAs I said earlier if I have `1 + []` I need to throw error and if I need to throw error I need to know context (whether code is run inside `try`). So using regular operators is impossible unless using thread-local storage is acceptable. I would rather not use this because currently I am copying interpreter state over to rely on lua stack to restore values that need to be restored when exiting some scope and thread-local storage will force me to use non-trivial code to unwind stack stored in TLS on exception.\n",
            "created_at": "2014-06-08T14:48:00Z",
            "html_url": "https://github.com/neovim/neovim/issues/801#issuecomment-45438510",
            "id": 45438510,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/801",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDM4NTEw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45438510/reactions"
            },
            "updated_at": "2014-06-08T14:48:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45438510",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> thread-local storage will force me to use non-trivial code to unwind stack stored in TLS on exception.\n\nLet's not go there, indeed. \n\n> As I said earlier if I have 1 + [] I need to throw error and if I need to throw error I need to know context (whether code is run inside try).\n\nAnd this state couldn't be put on a (private) part of the global `vim` object? try-level? I see you're talking about per-thread so you're planning on doing threading in lua?\n",
            "created_at": "2014-06-08T15:07:40Z",
            "html_url": "https://github.com/neovim/neovim/issues/801#issuecomment-45439037",
            "id": 45439037,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/801",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDM5MDM3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45439037/reactions"
            },
            "updated_at": "2014-06-08T15:07:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45439037",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Threading support would be nice and I plan to write such code that will not forbid us adding threads in the future. Currently I do not modify any lua global values after startup. Everything that is supposed to be modified lives in `state` variable. Will have to have locks for modifying values in `state.global` though (here will live mutable things that do not need to be modified when entering/exiting scopes) (`state.global` was added during refactoring I am currently doing).\n\nI was expecting to find a way to use threads with one lua instance, apparently this is currently not the case so there probably will be no threads. I.e. I was writing code as I would have written it for language based on python where read/write operations on built-in types are atomic so locks are rarely needed: assuming that I cannot write lua code that will lead to internal C structure corruption and that API is going to be multi-threaded I can just leave all the necessary synchronization for VimL plugin developers. The only thing I would need in this case will be avoiding global state for scope values. Current implementation has some things which do not fit though.\n\n> And this state couldn't be put on a (private) part of the global vim object?\n\nWith a single-threaded application it is not a tiny bit different from thread-local storage except that you can no longer add threads. I need to store information somewhere about whether I am inside `:try`/`:silent!` and I need to update this information when exception occurs. I can sure add code for this (which is indeed will be trylevel and not a simple boolean like now), just before the place where I handle exceptions, but this code will be less robust then simply passing copied `state` with updated data on to the next level and letting lua do the job.\n",
            "created_at": "2014-06-08T16:26:23Z",
            "html_url": "https://github.com/neovim/neovim/issues/801#issuecomment-45441167",
            "id": 45441167,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/801",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDQxMTY3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45441167/reactions"
            },
            "updated_at": "2014-06-08T16:26:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45441167",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Threading support would be nice and I plan to write such code that will not forbid us adding threads in the future. \n\nI must admit I haven't recently looked at how Lua and threads cooperate. When I looked (long ago), you basically had to have different `lua_State` in each thread (created by the host program). Doing anything else (with f.ex C-Lua bindings to pthreads) wasn't advisable because the interpreter relies on one state = one thread.\n",
            "created_at": "2014-06-08T17:12:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/801#issuecomment-45442308",
            "id": 45442308,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/801",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDQyMzA4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45442308/reactions"
            },
            "updated_at": "2014-06-08T17:12:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45442308",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I must admit I haven't recently looked at how Lua and threads cooperate. When I looked (long ago), you basically had to have different lua_State in each thread (created by the host program). Doing anything else (with f.ex C-Lua bindings to pthreads) wasn't advisable because the interpreter relies on one state = one thread.\n\nI have not found anything that contradicts these words.\n\nIt looks like the best variant will be using C types for all collection types and one lua_State* per thread, but this raises the question with user-defined functions (and commands if I succeed at implementing them as functions): after translation they are pure lua and as such cannot live outside of lua_State*. I do not like idea of string funcrefs (like they are implemented currently in Vim), but even with string funcrefs (which solve the problem of storing them inside shared dictionaries) there is a question about pushing newly-defined function into all lua threads (broadcast messages telling about updates on the matter? Or use shared storage with translated code (accessed each time function is run) and, probably, thread local cache with compiled code?).\n",
            "created_at": "2014-06-08T19:35:28Z",
            "html_url": "https://github.com/neovim/neovim/issues/801#issuecomment-45446075",
            "id": 45446075,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/801",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDQ2MDc1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45446075/reactions"
            },
            "updated_at": "2014-06-08T19:35:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45446075",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> It looks like the best variant will be using C types for all collection types and one lua_State\\* per thread\n\nYou mean dictionaries and arrays right? Sure you can do that, but I imagine you'll be fighting the interpreter more than anything, and/or implementing what Lua tables does under the hood, and less well-tested.\n\n> I do not like idea of string funcrefs (like they are implemented currently in Vim), but even with string funcrefs (which solve the problem of storing them inside shared dictionaries) there is a question about pushing newly-defined function into all lua threads (broadcast messages telling about updates on the matter? Or use shared storage with translated code (accessed each time function is run) and, probably, thread local cache with compiled code?).\n\nYou're a braver man than I, making a translator and trying to thread it at the same time with semantics that don't fit the host language. But since you have complete control over the generated code, I think it might be possible to call a C broadcastLuaString function that evaluates in all threads. But my mind is already starting to hurt with all the other things that could go wrong. What state needs to be shared between the threads? As noted by the Lua creators, one needs to manually share all state between different lua_State's. It won't be pretty to retain the same semantics as the vanilla VimL interpreter under threading, I imagine.\n\nI get that you're thinking of this in advance so that you don't find yourself blocked with an unworkable design when we do get around to adding threads, but I'd urge you to reconsider and try to keep it simple at this point. The big load (i.e.: the translator/quasi-interpreter) is mostly portable between threaded and non-threaded variants anyway. The threaded version will probably have all kinds of synchronization shim-code calling C functions that broadcast changes. One possible way of solving that is with hooks in the translator:\n- preFunctionDefineHook\n- postFunctionDefineHook\n\nThe multi-threaded version would insert synchronization shims through those hooks and the regular translator wouldn't be made (much) more complicated by it.\n",
            "created_at": "2014-06-08T20:16:39Z",
            "html_url": "https://github.com/neovim/neovim/issues/801#issuecomment-45447239",
            "id": 45447239,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/801",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDQ3MjM5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45447239/reactions"
            },
            "updated_at": "2014-06-08T20:17:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45447239",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> You mean dictionaries and arrays right? Sure you can do that, but I imagine you'll be fighting the interpreter more than anything, and/or implementing what Lua tables does under the hood, and less well-tested.\n\nThere are lots of well-tested container types (including the one vim currently uses). I do not see how I will be fighting the interpreter since it is basically usual userdata with metatable. I will have to have separate GC for my containers though.\n\n> I get that you're thinking of this in advance so that you don't find yourself blocked with an unworkable design when we do get around to adding threads, but I'd urge you to reconsider and try to keep it simple at this point. The big load (i.e.: the translator/quasi-interpreter) is mostly portable between threaded and non-threaded variants anyway. The threaded version will probably have all kinds of synchronization shim-code calling C functions that broadcast changes. One possible way of solving that is with hooks in the translator:\n> - preFunctionDefineHook\n> - postFunctionDefineHook\n> \n> The multi-threaded version would insert synchronization shims through those hooks and the regular translator wouldn't be made (much) more complicated by it.\n\nIf I am using the lua containers and not C ones (i.e. have thread-local state for each and every global state) then I need to broadcast virtually every change. In addition to functions and comands which form rather plain structure (only two containers and each item is not a container on its own) there are globals, script-locals, `v:` globals and each container (including `l:` and `a:`) may potentially appear as a part (possibly nested) of it.\n\nThis will probably mean that I will be either posting messages about every change to every container (including function-local ones) or have to implement something like reference counting to mark containers accessible through globals to know messages about what should I post.\n\nNext problem is making broadcasted changes apply right so that I do not end up with one global having two different values depending on thread. This is much less likely situation in case of functions (they are rarely redefined) which protects us even if we do not bother with either C container for functions or adding a way to ignore certain messages because they are too late (I see a workaround for this situation: have a “master” thread which is responsible for bookkeeping and broadcasting messages in “correct” order, which will also broadcast received messages back to senders).\n\nThird problem is the time where messages can be applied. Lua has single-threaded nature so I will either have to scatter `vim.update_globals()` calls all over the code which will check on input from other threads or have it in main loop (and on demand: I think in this case programmer should have access to `vim.update_globals()` since there is certainly  going to be some thread interaction). Main loop means late updates and additionally bothering programmers with what they do not need. Scattering means we are going to significantly slow down all code because `vim.update_globals()` will receive lots of unrelated changes. True (`g:`/`v:`) globals are rare used and even rarely changed, so `rwlock` on containers is not going to bother us too much. And given that I initially wanted to use threads to speed up startup (i.e. parallel loading of scripts) and to add parallel processing (that works with already loaded plugins) this takes `s:` globals out of equation almost completely (even some poorly written plugins like CtrlP which use `s:` globals to pass parameters all over the code with this model do not add much possibilities to lock waiting for `s:` in this case).\n\n---\n\nSwitching to C containers in the future seem to not cause me to rethink what I currently have though, neither is using messages.\n",
            "created_at": "2014-06-09T03:45:03Z",
            "html_url": "https://github.com/neovim/neovim/issues/801#issuecomment-45459013",
            "id": 45459013,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/801",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDU5MDEz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45459013/reactions"
            },
            "updated_at": "2014-06-09T03:45:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/45459013",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
                "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
                "followers_url": "https://api.github.com/users/ZyX-I/followers",
                "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
                "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ZyX-I",
                "id": 322097,
                "login": "ZyX-I",
                "node_id": "MDQ6VXNlcjMyMjA5Nw==",
                "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
                "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
                "repos_url": "https://api.github.com/users/ZyX-I/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ZyX-I"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Next steps for public C API are tracked in https://github.com/neovim/neovim/issues/21693\r\n\r\n> Where should be scopes kept?\r\n\r\nRelated: `:help nvim_get_context()`\r\n\r\n",
            "created_at": "2023-03-08T17:41:18Z",
            "html_url": "https://github.com/neovim/neovim/issues/801#issuecomment-1460567644",
            "id": 1460567644,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/801",
            "node_id": "IC_kwDOAPphoM5XDn5c",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1460567644/reactions"
            },
            "updated_at": "2023-03-08T17:41:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1460567644",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comments": 36,
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/801/comments",
    "created_at": "2014-06-02T16:12:10Z",
    "events_url": "https://api.github.com/repos/neovim/neovim/issues/801/events",
    "html_url": "https://github.com/neovim/neovim/issues/801",
    "id": 34787683,
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "changes that are not features or bugfixes",
            "id": 106949155,
            "name": "refactor",
            "node_id": "MDU6TGFiZWwxMDY5NDkxNTU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/refactor"
        }
    ],
    "labels_url": "https://api.github.com/repos/neovim/neovim/issues/801/labels{/name}",
    "locked": true,
    "milestone": {
        "closed_at": null,
        "closed_issues": 645,
        "created_at": "2014-05-10T20:43:04Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk"
        },
        "description": "Low priority items. We plan to work on this but don't have a target date.",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/6",
        "id": 655037,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/6/labels",
        "node_id": "MDk6TWlsZXN0b25lNjU1MDM3",
        "number": 6,
        "open_issues": 566,
        "state": "open",
        "title": "backlog",
        "updated_at": "2024-09-09T18:06:19Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/6"
    },
    "node_id": "MDU6SXNzdWUzNDc4NzY4Mw==",
    "number": 801,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/neovim/neovim/issues/801/reactions"
    },
    "repository_url": "https://api.github.com/repos/neovim/neovim",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/neovim/neovim/issues/801/timeline",
    "title": "make new VimL implementation use only public API, but with C",
    "updated_at": "2024-09-04T13:59:55Z",
    "url": "https://api.github.com/repos/neovim/neovim/issues/801",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/322097?v=4",
        "events_url": "https://api.github.com/users/ZyX-I/events{/privacy}",
        "followers_url": "https://api.github.com/users/ZyX-I/followers",
        "following_url": "https://api.github.com/users/ZyX-I/following{/other_user}",
        "gists_url": "https://api.github.com/users/ZyX-I/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ZyX-I",
        "id": 322097,
        "login": "ZyX-I",
        "node_id": "MDQ6VXNlcjMyMjA5Nw==",
        "organizations_url": "https://api.github.com/users/ZyX-I/orgs",
        "received_events_url": "https://api.github.com/users/ZyX-I/received_events",
        "repos_url": "https://api.github.com/users/ZyX-I/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ZyX-I/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ZyX-I/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ZyX-I"
    }
}