{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/21115/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/21115/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/21115"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/21115"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/21115/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/21115"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/e2d6409b0c92cef2189150936c3646f9b65983de"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5277,
            "forks_count": 5277,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1705,
            "open_issues_count": 1705,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-04-23T00:28:51Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 267079,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 76421,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-04-23T01:19:16Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 76421,
            "watchers_count": 76421,
            "web_commit_signoff_required": false
        },
        "sha": "d41e93d5a83642f90898cae211e017d99ff97fd9",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "closes #16843\r\nrelated #13896\r\n\r\nI decided to reuse existing c logic so that in all cases (block-selection, virtualmode=all, selection=inclusive/exclusive, double-width characters etc) result is consistent with what would be yanked.\r\n\r\nQuestions:\r\n\r\n1. What namespace should be used (`vim.fn.xxx` vs `vim.xxx` vs `vim.api.nvim_xxx`)?\r\n1. Should I make PR directly to vim, if so do I need to rewrite tests?\r\n1. Not sure about the name, is it ok ? I was also considering `get_selected_lines`/`get_selection`, `get_visual_selection` is strange in the way that AFAIK selection can't be not visual.\r\n",
    "closed_at": "2024-02-22T22:57:09Z",
    "comment_data": [],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "The namespace is not really a choice:\r\n1. If it's exposed via vimscript (`selectedlines()`), it'll (automatically) go into `vim.fn.selectedlines()` -- and should indeed first(!) be offered to Vim.\r\n2. If it's a C function, it should be exposed through the Neovim API (to C, RPC, vimscript, Lua, ...) via `nvim_get_selection`, which will automatically go into `vim.api.nvim_get_selection()` -- but then we really need to think about the signature as this will be under a strict contract (can't change until Neovim 2.0), see `:h api-contract`. \r\n3. If it's pure Lua, it'll be somewhere under `vim.xxx` -- to be discussed where.\r\n\r\nOption 3 doesn't look to be the case, so the choice is between option 1 (submit to Vim, port, and expose through `vim.fn`) or option 2 (add it to the Neovim API and expose through `vim.api`).",
            "created_at": "2022-11-19T10:13:09Z",
            "html_url": "https://github.com/neovim/neovim/pull/21115#issuecomment-1320851572",
            "id": 1320851572,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21115",
            "node_id": "IC_kwDOAPphoM5Ouph0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1320851572/reactions"
            },
            "updated_at": "2022-11-19T10:13:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1320851572",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Can't this simply be achieved with something like:\r\n\r\n```lua\r\nfunction get_visual()\r\n  local _, ls, cs = unpack(vim.fn.getpos('v'))\r\n  local _, le, ce = unpack(vim.fn.getpos('.'))\r\n  return vim.api.nvim_buf_get_text(0, ls-1, cs-1, le-1, ce, {})\r\nend\r\n```\r\n\r\nSeems preferable to adding ~150 lines of C code.",
            "created_at": "2022-11-19T14:45:19Z",
            "html_url": "https://github.com/neovim/neovim/pull/21115#issuecomment-1320900205",
            "id": 1320900205,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21115",
            "node_id": "IC_kwDOAPphoM5Ou1Zt",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 5,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1320900205/reactions"
            },
            "updated_at": "2022-11-19T14:46:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1320900205",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@lewis6991 what about virtualedit?\r\n\r\n```\r\nab\r\ncdefgh\r\nijk\r\nlmnopqrst\r\n\r\n    uvwxyz\r\n\u0001\u0002\u0003\u0004\r\näƃĉđē'\r\n\r\n```\r\n\r\n`set virtualedit=all selection=exclusive`\r\n\r\nnow make block selection from pos 2,2 to 9-20 (1,1-indexed), and try all corners (`o`/`O`)\r\n",
            "created_at": "2022-11-19T18:18:00Z",
            "html_url": "https://github.com/neovim/neovim/pull/21115#issuecomment-1320939203",
            "id": 1320939203,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21115",
            "node_id": "IC_kwDOAPphoM5Ou-7D",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1320939203/reactions"
            },
            "updated_at": "2022-11-19T18:18:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1320939203",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2602750?v=4",
                "events_url": "https://api.github.com/users/doubleloop/events{/privacy}",
                "followers_url": "https://api.github.com/users/doubleloop/followers",
                "following_url": "https://api.github.com/users/doubleloop/following{/other_user}",
                "gists_url": "https://api.github.com/users/doubleloop/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/doubleloop",
                "id": 2602750,
                "login": "doubleloop",
                "node_id": "MDQ6VXNlcjI2MDI3NTA=",
                "organizations_url": "https://api.github.com/users/doubleloop/orgs",
                "received_events_url": "https://api.github.com/users/doubleloop/received_events",
                "repos_url": "https://api.github.com/users/doubleloop/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/doubleloop/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/doubleloop/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/doubleloop"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "That's known to be broken. ",
            "created_at": "2022-11-19T18:19:14Z",
            "html_url": "https://github.com/neovim/neovim/pull/21115#issuecomment-1320939444",
            "id": 1320939444,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21115",
            "node_id": "IC_kwDOAPphoM5Ou--0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1320939444/reactions"
            },
            "updated_at": "2022-11-19T18:19:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1320939444",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": ">If it's exposed via vimscript (selectedlines()), it'll (automatically) go into vim.fn.selectedlines() -- and should indeed first(!) be offered to Vim.\r\n\r\nhttps://github.com/vim/vim/pull/11579\r\n\r\n>Seems preferable to adding ~150 lines of C code.\r\n\r\nNote that most of the code is actually dealing with special cases of virtualedit/exclusive. Any implementation which does not handle this cases is incomplete. IMO it is be better to share/reuse code form `op_yank_reg` and `do_pending_operator` rather then having separate lua implementation which can diverge.",
            "created_at": "2022-11-20T05:43:56Z",
            "html_url": "https://github.com/neovim/neovim/pull/21115#issuecomment-1321045444",
            "id": 1321045444,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21115",
            "node_id": "IC_kwDOAPphoM5OvY3E",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1321045444/reactions"
            },
            "updated_at": "2022-11-20T06:09:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1321045444",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2602750?v=4",
                "events_url": "https://api.github.com/users/doubleloop/events{/privacy}",
                "followers_url": "https://api.github.com/users/doubleloop/followers",
                "following_url": "https://api.github.com/users/doubleloop/following{/other_user}",
                "gists_url": "https://api.github.com/users/doubleloop/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/doubleloop",
                "id": 2602750,
                "login": "doubleloop",
                "node_id": "MDQ6VXNlcjI2MDI3NTA=",
                "organizations_url": "https://api.github.com/users/doubleloop/orgs",
                "received_events_url": "https://api.github.com/users/doubleloop/received_events",
                "repos_url": "https://api.github.com/users/doubleloop/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/doubleloop/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/doubleloop/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/doubleloop"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Note that most of the code is actually dealing with special cases of virtualedit/exclusive.\r\n\r\nDoes it handle block selection with multi-byte unicode (emoji, kanji/hanzi)? If so, it would be better to turn this into a generic API to use for `vim.region` so other functions (like `highlight.on_yank`) also get these improvements for free.",
            "created_at": "2022-11-20T10:13:32Z",
            "html_url": "https://github.com/neovim/neovim/pull/21115#issuecomment-1321088845",
            "id": 1321088845,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21115",
            "node_id": "IC_kwDOAPphoM5OvjdN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1321088845/reactions"
            },
            "updated_at": "2022-11-20T10:13:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1321088845",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Thanks for referencing https://github.com/neovim/neovim/pull/13896 , but  I don't see an explanation of why this PR takes the approach of  a special-purpose function instead of the general-purpose \"region\" (aka \"range\": name TBD) interface of https://github.com/neovim/neovim/pull/13896 . Even if you only want to implement visual selection here, this could be done by documenting something like:\r\n\r\n    Only visual selection (the '< and '> marks) is supported currently.\r\n\r\nIs there some other reason a special function is needed?\r\n\r\n- If there is a strong need for a special function, I would use precedent from existing functions to help with discoverability. E.g. `visualmode()` already exists, so maybe this should be named `visualtext()`. \r\n- Or  new parameters on the existing function `getbufline()`.\r\n- _And_ new `opt` parameters to `nvim_buf_get_text()` ?",
            "created_at": "2022-11-21T14:34:29Z",
            "html_url": "https://github.com/neovim/neovim/pull/21115#issuecomment-1322153511",
            "id": 1322153511,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21115",
            "node_id": "IC_kwDOAPphoM5OznYn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1322153511/reactions"
            },
            "updated_at": "2022-11-21T14:47:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1322153511",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": ">  it would be better to turn this into a generic API to use for vim.region so other functions (like highlight.on_yank) also get these improvements for free\r\n\r\n> I don't see an explanation of why this PR takes the approach of a special-purpose function instead of the general-purpose \"region\" (aka \"range\": name TBD)\r\n\r\nhmm, to make it work so that `get_visual_selection` (name TBD) do not need to analyze line content after calling `vim.region`, the former would need to return values other then startcol/endcol, in particular something that allows calculating values which in vim structure is called [startspaces/endspaces](https://github.com/neovim/neovim/blob/master/src/nvim/ops.c#L80).\r\n\r\nNot sure if it is obvious what are this values used for so just in case I will give 2 examples where they are needed: a) multiwidth characters in  blockwise-visual, b) virtualedit\r\n\r\nConsider buffer:\r\n\r\n```vim\r\nset noet sw=0 ts=4 noai\r\nset list listchars=tab:-->,space:⋅\r\ncall feedkeys(\"iaaaaaa\\<cr>\\<tab>aa\\<cr>aaa\\<c-v>\\<c-a>a\\<cr>aaaaaa\\<esc>\")\r\n```\r\n\r\nwhich would visually look like this\r\n```\r\naaaaaa\r\n--->aa\r\naaa^Aa\r\naaaaaa\r\n```\r\n\r\na) `:call feedkeys(\"gg02l\\<c-v>4jl\")` when yanked produces `{'aa', '⋅⋅', 'a⋅', 'aa'}` (I denoted space as `⋅` , note that multiwidth characters which are partially selected are converted to spaces),\r\nline 2: startcol=0, endcol=0 (meaning nothink from the line should be copied to the result), startspaces=2, endspaces=0\r\nline 3: startcol=2, endcol=3, startspaces=0, endspaces=1\r\nb) `set virtualedit=all`, `:call feedkeys(\"gg0j2lv10l\")` when yanked produces `'⋅⋅aa⋅⋅⋅⋅⋅⋅⋅'`\r\nstartcol=1, endcol=3, startspaces=2, endspaces=7 \r\n\r\nIn both cases, information about how many spaces need to be added pre/post area taken from buffer mus be available.\n\nAs for reusing this in `highlight.on_yank` I need to read how hilighting works. Can you hilight only part of multiwidth character?\n\nIf so, IMO it is better to move `vim.region` into c because:\r\n1. it can reuse existing code of op_yank (otherwise some logic needs to be duplicated), \r\n1. in lua I could not find easy access to [getvcol](https://github.com/neovim/neovim/blob/4b02291f81b76eda029d4eae1c1d59c1a946a032/src/nvim/charset.c#L913) and [getvvcol](https://github.com/neovim/neovim/blob/4b02291f81b76eda029d4eae1c1d59c1a946a032/src/nvim/charset.c#L1126), `vim.fn.virtcol()` is somehow limited.\r\n1. when `vim.region` is in lua, as far as I understand (correct me if I am wrong) the contents of the line needs to be copied in memory even though what is returned is just a table of indexes. This would be painful for example when you open very big file with single line and try to yank even short text with highlight.on_yank turned on. In c, line can be analyzed readonly.\r\n\r\nQuestions:\r\n1. What was the idea behind using regtype result as mode, in particular `<CTRL-V>{width}` ? AFAIK register needs to store width because pos1/pos2 of what was yanked may not be available but in case of `vim.region` positions are passed so width is redundant (and not easy to calculate for function caller)?\r\n1. Are you really sure about using (0,0) indexes as input/output positions in `vim.region`? Nvim indexing convention is strange to me given that a) all vim functions return 1,1 indexes, b) lua lists are 1- indexed, c) marks are 1,0 indexed.. some things are end inclusive and some end exclusive.. What is the pattern/guideline ?",
            "created_at": "2022-11-22T03:49:25Z",
            "html_url": "https://github.com/neovim/neovim/pull/21115#issuecomment-1323000547",
            "id": 1323000547,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21115",
            "node_id": "IC_kwDOAPphoM5O22Lj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1323000547/reactions"
            },
            "updated_at": "2024-04-20T22:31:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1323000547",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2602750?v=4",
                "events_url": "https://api.github.com/users/doubleloop/events{/privacy}",
                "followers_url": "https://api.github.com/users/doubleloop/followers",
                "following_url": "https://api.github.com/users/doubleloop/following{/other_user}",
                "gists_url": "https://api.github.com/users/doubleloop/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/doubleloop",
                "id": 2602750,
                "login": "doubleloop",
                "node_id": "MDQ6VXNlcjI2MDI3NTA=",
                "organizations_url": "https://api.github.com/users/doubleloop/orgs",
                "received_events_url": "https://api.github.com/users/doubleloop/received_events",
                "repos_url": "https://api.github.com/users/doubleloop/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/doubleloop/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/doubleloop/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/doubleloop"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> If so, IMO it is better to move `vim.region` into c because:\r\n> \r\n> 1. it can reuse existing code of op_yank (otherwise some logic needs to be duplicated),\r\n> 2. in lua I could not find easy access to [getvcol](https://github.com/neovim/neovim/blob/4b02291f81b76eda029d4eae1c1d59c1a946a032/src/nvim/charset.c#L913) and [getvvcol](https://github.com/neovim/neovim/blob/4b02291f81b76eda029d4eae1c1d59c1a946a032/src/nvim/charset.c#L1126), `vim.fn.virtcol()` is somehow limited.\r\n> 3. ... In c, line can be analyzed readonly.\r\n\r\nI think we are open to the idea of implementing `vim.region` in C, if necessary.\r\n\r\n> 1. What was the idea behind using regtype result as mode, in particular `<CTRL-V>{width}`\r\n\r\nJust based on precedent from existing vim functions.\r\n\r\n> Nvim indexing convention is strange\r\n\r\nIndexing quirks are inherited from Vim, see `:help api-indexing`. ",
            "created_at": "2022-11-22T12:06:07Z",
            "html_url": "https://github.com/neovim/neovim/pull/21115#issuecomment-1323563001",
            "id": 1323563001,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21115",
            "node_id": "IC_kwDOAPphoM5O4_f5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1323563001/reactions"
            },
            "updated_at": "2023-07-05T18:49:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1323563001",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Ok, but we should determine what `vim.region` should return. My proposition:\r\n\r\ntable with elements of the form:\r\n```lua\r\n{\r\n  lnum=lnum,\r\n  colstart = {col, off, width/colnext},\r\n  colend = {col, off},\r\n}\r\n```\r\n* `col`, `off` are values like in `getpos` (note: in case of blockwise-visual `off` can be positive even without virtualedit)\r\n* `width` / `colnext` (only one should be chosen) need to be known to determine how many visual columns are from position to the start of next character  (in case colstart is somewhere in the middle of multiwidht character)\r\n* lnum: IMO indexing the whole table with linenumbers (which are 0-indexed) is potential confusion (it might not be common to see table with 0 index in lua), also I do not know about all future plans but I can imagine situation when range result could in the future return multiple entries for single line (wrapped blockwise-visual ? multiple cursor ? :P).\r\n\r\n> Indexing quirks are inherited from Vim, see :help api-indexing.\r\n\r\nI am aware of this part but what do you mean by API? I thought api functions are placed in vim.api.nvim_xxx,   so is `vim.region` considered API function? Why is it in `vim.region` and not `vim.api.nvim_region` ?\r\n",
            "created_at": "2022-11-22T14:53:43Z",
            "html_url": "https://github.com/neovim/neovim/pull/21115#issuecomment-1323804240",
            "id": 1323804240,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21115",
            "node_id": "IC_kwDOAPphoM5O56ZQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1323804240/reactions"
            },
            "updated_at": "2022-11-22T15:20:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1323804240",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2602750?v=4",
                "events_url": "https://api.github.com/users/doubleloop/events{/privacy}",
                "followers_url": "https://api.github.com/users/doubleloop/followers",
                "following_url": "https://api.github.com/users/doubleloop/following{/other_user}",
                "gists_url": "https://api.github.com/users/doubleloop/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/doubleloop",
                "id": 2602750,
                "login": "doubleloop",
                "node_id": "MDQ6VXNlcjI2MDI3NTA=",
                "organizations_url": "https://api.github.com/users/doubleloop/orgs",
                "received_events_url": "https://api.github.com/users/doubleloop/received_events",
                "repos_url": "https://api.github.com/users/doubleloop/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/doubleloop/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/doubleloop/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/doubleloop"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I am aware of this part but what do you mean by API? I thought api functions are placed in vim.api.nvim_xxx, so is vim.region considered API function? Why is it in vim.region and not vim.api.nvim_region ?\r\n\r\n\"API functions\" specifically are the functions in the Neovim API (`:h api`) that are mostly implemented in C and exposed to Vimscript, Lua (under `vim.api`), and RPC plugins (not all for all consumers, though). These are covered by a strong contract (`:h api-contract`). Anything else under `vim` is implemented in Lua and can change more easily.",
            "created_at": "2022-11-22T16:43:12Z",
            "html_url": "https://github.com/neovim/neovim/pull/21115#issuecomment-1323962377",
            "id": 1323962377,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21115",
            "node_id": "IC_kwDOAPphoM5O6hAJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1323962377/reactions"
            },
            "updated_at": "2022-11-22T16:43:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1323962377",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@doubleloop \r\n\r\n> lnum: IMO indexing the whole table with linenumbers (which are 0-indexed) is potential confusion (it might not be common to see table with 0 index in lua),\r\n\r\nIt is, but it works fine with `pairs()`, and we can just show an example in the `vim.region` docs, so let's not make that breaking change. OTOH, `vim.region()` [can't be serialized...](https://github.com/neovim/neovim/blob/1de82e16c1216e1dbe22cf7a8ec9ea9e9e69b631/src/nvim/lua/converter.c#L379-L382)\r\n\r\n> also I can imagine situation when range result could in the future return multiple entries for single line (wrapped blockwise-visual ? multiple cursor ? :P).\r\n\r\nYes. Is it possible to augment the result of `vim.region` without breaking changes? If not, perhaps a keyword-args form `vim.region` could be introduced which returns the nested dict shape that you suggested.",
            "created_at": "2023-07-05T18:49:30Z",
            "html_url": "https://github.com/neovim/neovim/pull/21115#issuecomment-1622294029",
            "id": 1622294029,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21115",
            "node_id": "IC_kwDOAPphoM5gsj4N",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1622294029/reactions"
            },
            "updated_at": "2023-07-06T07:57:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1622294029",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/21115/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/21115/commits",
    "created_at": "2022-11-19T06:39:43Z",
    "diff_url": "https://github.com/neovim/neovim/pull/21115.diff",
    "draft": true,
    "head": {
        "label": "doubleloop:visual_selection_c",
        "ref": "visual_selection_c",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/doubleloop/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/doubleloop/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/doubleloop/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/doubleloop/neovim/branches{/branch}",
            "clone_url": "https://github.com/doubleloop/neovim.git",
            "collaborators_url": "https://api.github.com/repos/doubleloop/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/doubleloop/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/doubleloop/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/doubleloop/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/doubleloop/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/doubleloop/neovim/contributors",
            "created_at": "2018-01-28T22:49:19Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/doubleloop/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/doubleloop/neovim/downloads",
            "events_url": "https://api.github.com/repos/doubleloop/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/doubleloop/neovim/forks",
            "full_name": "doubleloop/neovim",
            "git_commits_url": "https://api.github.com/repos/doubleloop/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/doubleloop/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/doubleloop/neovim/git/tags{/sha}",
            "git_url": "git://github.com/doubleloop/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://salt.bountysource.com/teams/neovim",
            "hooks_url": "https://api.github.com/repos/doubleloop/neovim/hooks",
            "html_url": "https://github.com/doubleloop/neovim",
            "id": 119305055,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/doubleloop/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/doubleloop/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/doubleloop/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/doubleloop/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/doubleloop/neovim/labels{/name}",
            "language": "Vim script",
            "languages_url": "https://api.github.com/repos/doubleloop/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/doubleloop/neovim/merges",
            "milestones_url": "https://api.github.com/repos/doubleloop/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMTkzMDUwNTU=",
            "notifications_url": "https://api.github.com/repos/doubleloop/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2602750?v=4",
                "events_url": "https://api.github.com/users/doubleloop/events{/privacy}",
                "followers_url": "https://api.github.com/users/doubleloop/followers",
                "following_url": "https://api.github.com/users/doubleloop/following{/other_user}",
                "gists_url": "https://api.github.com/users/doubleloop/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/doubleloop",
                "id": 2602750,
                "login": "doubleloop",
                "node_id": "MDQ6VXNlcjI2MDI3NTA=",
                "organizations_url": "https://api.github.com/users/doubleloop/orgs",
                "received_events_url": "https://api.github.com/users/doubleloop/received_events",
                "repos_url": "https://api.github.com/users/doubleloop/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/doubleloop/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/doubleloop/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/doubleloop"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/doubleloop/neovim/pulls{/number}",
            "pushed_at": "2023-03-25T08:03:04Z",
            "releases_url": "https://api.github.com/repos/doubleloop/neovim/releases{/id}",
            "size": 232747,
            "ssh_url": "git@github.com:doubleloop/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/doubleloop/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/doubleloop/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/doubleloop/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/doubleloop/neovim/subscription",
            "svn_url": "https://github.com/doubleloop/neovim",
            "tags_url": "https://api.github.com/repos/doubleloop/neovim/tags",
            "teams_url": "https://api.github.com/repos/doubleloop/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/doubleloop/neovim/git/trees{/sha}",
            "updated_at": "2018-01-28T22:49:27Z",
            "url": "https://api.github.com/repos/doubleloop/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "e2d6409b0c92cef2189150936c3646f9b65983de",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/2602750?v=4",
            "events_url": "https://api.github.com/users/doubleloop/events{/privacy}",
            "followers_url": "https://api.github.com/users/doubleloop/followers",
            "following_url": "https://api.github.com/users/doubleloop/following{/other_user}",
            "gists_url": "https://api.github.com/users/doubleloop/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/doubleloop",
            "id": 2602750,
            "login": "doubleloop",
            "node_id": "MDQ6VXNlcjI2MDI3NTA=",
            "organizations_url": "https://api.github.com/users/doubleloop/orgs",
            "received_events_url": "https://api.github.com/users/doubleloop/received_events",
            "repos_url": "https://api.github.com/users/doubleloop/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/doubleloop/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/doubleloop/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/doubleloop"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/21115",
    "id": 1128600587,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/21115",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "21d8722252366efdf2abd61005302f9a32226f5a",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5DRRQL",
    "number": 21115,
    "patch_url": "https://github.com/neovim/neovim/pull/21115.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/21115/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/e2d6409b0c92cef2189150936c3646f9b65983de",
    "title": "vim.region (or visualtext, or get_visual_selection)",
    "updated_at": "2024-04-20T22:31:47Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/21115",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/2602750?v=4",
        "events_url": "https://api.github.com/users/doubleloop/events{/privacy}",
        "followers_url": "https://api.github.com/users/doubleloop/followers",
        "following_url": "https://api.github.com/users/doubleloop/following{/other_user}",
        "gists_url": "https://api.github.com/users/doubleloop/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/doubleloop",
        "id": 2602750,
        "login": "doubleloop",
        "node_id": "MDQ6VXNlcjI2MDI3NTA=",
        "organizations_url": "https://api.github.com/users/doubleloop/orgs",
        "received_events_url": "https://api.github.com/users/doubleloop/received_events",
        "repos_url": "https://api.github.com/users/doubleloop/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/doubleloop/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/doubleloop/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/doubleloop"
    }
}