{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/28715/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/28715/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/28715"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/28715"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/28715/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/28715"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/0bbee15ec030b691d788bdef84b71a0d3bc0c314"
        }
    },
    "active_lock_reason": null,
    "assignee": {
        "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
        "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
        "followers_url": "https://api.github.com/users/lewis6991/followers",
        "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
        "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/lewis6991",
        "id": 7904185,
        "login": "lewis6991",
        "node_id": "MDQ6VXNlcjc5MDQxODU=",
        "organizations_url": "https://api.github.com/users/lewis6991/orgs",
        "received_events_url": "https://api.github.com/users/lewis6991/received_events",
        "repos_url": "https://api.github.com/users/lewis6991/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/lewis6991"
    },
    "assignees": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
            "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
            "followers_url": "https://api.github.com/users/lewis6991/followers",
            "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
            "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/lewis6991",
            "id": 7904185,
            "login": "lewis6991",
            "node_id": "MDQ6VXNlcjc5MDQxODU=",
            "organizations_url": "https://api.github.com/users/lewis6991/orgs",
            "received_events_url": "https://api.github.com/users/lewis6991/received_events",
            "repos_url": "https://api.github.com/users/lewis6991/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/lewis6991"
        }
    ],
    "author_association": "FIRST_TIME_CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5573,
            "forks_count": 5573,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1771,
            "open_issues_count": 1771,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-09-09T12:14:47Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 284802,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 81560,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-09-10T01:50:42Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 81560,
            "watchers_count": 81560,
            "web_commit_signoff_required": false
        },
        "sha": "4e5c633ed4871a948aff7338b793ac5f93484153",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "Problem:\r\nThere is no way to reload current parser for buffer. This is needed when\r\n`vim.opt.rtp` changes and new paths have treesitter queries. For example\r\nwhen loading plugins lazily.\r\n\r\nSolution:\r\nAdd options `reload` to `vim.treesitter.get_parser()`, that will\r\nremove previous parser and create new one, effectively loading new\r\nqueries from `runtimepath`\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28715#discussion_r1597621689"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28715"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1597621689"
                }
            },
            "author_association": "MEMBER",
            "body": "why is this different than `LanguageTree:invalidate()` ? in fact we have something called `_on_reload` that currently calls invalidate(): https://github.com/neovim/neovim/blob/c1396afa7c41c2009d06a54c8aaf1ca5689a9786/runtime/lua/vim/treesitter/languagetree.lua#L1042-L1044\r\n\r\nWould be very helpful to determine which semantics are correct and tighten things up",
            "commit_id": "0bbee15ec030b691d788bdef84b71a0d3bc0c314",
            "created_at": "2024-05-12T11:53:09Z",
            "diff_hunk": "@@ -106,6 +106,16 @@ function M.get_parser(bufnr, lang, opts)\n   elseif parsers[bufnr] == nil or parsers[bufnr]:lang() ~= lang then\n     assert(lang, 'lang should be valid')\n     parsers[bufnr] = M._create_parser(bufnr, lang, opts)\n+  elseif opts.reload then\n+    opts.reload = nil -- do not pass reload to _create_parser\n+    assert(lang, 'lang should be valid')\n+    parsers[bufnr]:destroy()\n+    parsers[bufnr] = M._create_parser(bufnr, lang, opts)\n+\n+    if M.highlighter.active[bufnr] then\n+      M.highlighter.active[bufnr]:destroy()\n+      M.highlighter.new(parsers[bufnr])\n+    end",
            "html_url": "https://github.com/neovim/neovim/pull/28715#discussion_r1597621689",
            "id": 1597621689,
            "line": 121,
            "node_id": "PRRC_kwDOAPphoM5fOcW5",
            "original_commit_id": "f74018cb4724d343c7cfd59155dee07083f57e8b",
            "original_line": 118,
            "original_position": 22,
            "original_start_line": 112,
            "path": "runtime/lua/vim/treesitter.lua",
            "position": 25,
            "pull_request_review_id": 2051362195,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28715",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1597621689/reactions"
            },
            "side": "RIGHT",
            "start_line": 115,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-05-12T11:53:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1597621689",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28715#discussion_r1597625896"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28715"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1597625896"
                }
            },
            "author_association": "NONE",
            "body": "`invalidate()` does not reload `LanguageTree._inject_query` which is the reason I want to reload the parser. If there is different way it should be done, I am happy to do it.\r\n\r\nWhat happens there is basically what is going to happen if `:edit` executed. When `:edit` executed fires event \"detach\" for buffer, which triggers `detach_cb` and this deletes parser. Then `vim.treesitter.start()` called by ft plugin and creates new parser.\r\n\r\nhttps://github.com/neovim/neovim/blob/4e5c633ed4871a948aff7338b793ac5f93484153/runtime/lua/vim/treesitter.lua#L47-L52\r\n\r\nRight now my goal is to make parser read queries from filesystem again, because I change `vim.opt.rtp` where I add more queries from plugin.",
            "commit_id": "0bbee15ec030b691d788bdef84b71a0d3bc0c314",
            "created_at": "2024-05-12T12:16:53Z",
            "diff_hunk": "@@ -106,6 +106,16 @@ function M.get_parser(bufnr, lang, opts)\n   elseif parsers[bufnr] == nil or parsers[bufnr]:lang() ~= lang then\n     assert(lang, 'lang should be valid')\n     parsers[bufnr] = M._create_parser(bufnr, lang, opts)\n+  elseif opts.reload then\n+    opts.reload = nil -- do not pass reload to _create_parser\n+    assert(lang, 'lang should be valid')\n+    parsers[bufnr]:destroy()\n+    parsers[bufnr] = M._create_parser(bufnr, lang, opts)\n+\n+    if M.highlighter.active[bufnr] then\n+      M.highlighter.active[bufnr]:destroy()\n+      M.highlighter.new(parsers[bufnr])\n+    end",
            "html_url": "https://github.com/neovim/neovim/pull/28715#discussion_r1597625896",
            "id": 1597625896,
            "in_reply_to_id": 1597621689,
            "line": 121,
            "node_id": "PRRC_kwDOAPphoM5fOdYo",
            "original_commit_id": "f74018cb4724d343c7cfd59155dee07083f57e8b",
            "original_line": 118,
            "original_position": 22,
            "original_start_line": 112,
            "path": "runtime/lua/vim/treesitter.lua",
            "position": 25,
            "pull_request_review_id": 2051366343,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28715",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1597625896/reactions"
            },
            "side": "RIGHT",
            "start_line": 115,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-05-12T12:16:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1597625896",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1163040?v=4",
                "events_url": "https://api.github.com/users/DanilaMihailov/events{/privacy}",
                "followers_url": "https://api.github.com/users/DanilaMihailov/followers",
                "following_url": "https://api.github.com/users/DanilaMihailov/following{/other_user}",
                "gists_url": "https://api.github.com/users/DanilaMihailov/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/DanilaMihailov",
                "id": 1163040,
                "login": "DanilaMihailov",
                "node_id": "MDQ6VXNlcjExNjMwNDA=",
                "organizations_url": "https://api.github.com/users/DanilaMihailov/orgs",
                "received_events_url": "https://api.github.com/users/DanilaMihailov/received_events",
                "repos_url": "https://api.github.com/users/DanilaMihailov/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/DanilaMihailov/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/DanilaMihailov/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/DanilaMihailov"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28715#discussion_r1597663199"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28715"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1597663199"
                }
            },
            "author_association": "NONE",
            "body": "@clason speaking about `vim.treesitter.query.get()`, I hit cache in tests, but never did when just running nvim, so I thought I misunderstood how caching suppose to work there.\r\n\r\nI guess we need to invalidate query cache when getting new parser with `reload = true`?",
            "commit_id": "0bbee15ec030b691d788bdef84b71a0d3bc0c314",
            "created_at": "2024-05-12T15:29:54Z",
            "diff_hunk": "@@ -959,4 +959,57 @@ int x = INT_MAX;\n       )\n     end)\n   end)\n+\n+  it('option reload works', function()\n+    eq(\n+      true,\n+      exec_lua('return vim.treesitter.get_parser(0, \"lua\") == vim.treesitter.get_parser(0, \"lua\")')\n+    )\n+    eq(\n+      false,\n+      exec_lua(\n+        'return vim.treesitter.get_parser(0, \"lua\") == vim.treesitter.get_parser(0, \"lua\", {reload=true})'\n+      )\n+    )\n+  end)\n+\n+  it('reloading parser refreshes queries', function()\n+    local plug_dir = vim.uv.fs_mkdtemp(vim.fs.dirname(t.tmpname()) .. '/pluginXXXXXX')\n+    local query_dir = plug_dir .. '/queries/lua'\n+\n+    exec_lua('vim.fn.mkdir(..., \"p\")', query_dir)\n+\n+    t.write_file(\n+      query_dir .. '/injections.scm',\n+      [[;; extends\n+        (string \n+          content: _ @injection.content\n+          (#lua-match? @injection.content \"^TEST_INJ\")\n+          (#set! injection.language \"c\"))\n+      ]]\n+    )\n+\n+    insert([[\n+      local s = \"TEST_INJ test\"\n+    ]])\n+\n+    local langs = exec_lua(\n+      [[\n+      vim.treesitter.get_parser(0, \"lua\")\n+      vim.opt.rtp:append(...)\n+      collectgarbage() -- without it keeps cached queries",
            "html_url": "https://github.com/neovim/neovim/pull/28715#discussion_r1597663199",
            "id": 1597663199,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5fOmff",
            "original_commit_id": "a9c4d6b33c163448cf7d97c9452fff486b9483f6",
            "original_line": 1000,
            "original_position": 42,
            "original_start_line": null,
            "path": "test/functional/treesitter/parser_spec.lua",
            "position": null,
            "pull_request_review_id": 2051406399,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28715",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1597663199/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-12T15:29:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1597663199",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1163040?v=4",
                "events_url": "https://api.github.com/users/DanilaMihailov/events{/privacy}",
                "followers_url": "https://api.github.com/users/DanilaMihailov/followers",
                "following_url": "https://api.github.com/users/DanilaMihailov/following{/other_user}",
                "gists_url": "https://api.github.com/users/DanilaMihailov/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/DanilaMihailov",
                "id": 1163040,
                "login": "DanilaMihailov",
                "node_id": "MDQ6VXNlcjExNjMwNDA=",
                "organizations_url": "https://api.github.com/users/DanilaMihailov/orgs",
                "received_events_url": "https://api.github.com/users/DanilaMihailov/received_events",
                "repos_url": "https://api.github.com/users/DanilaMihailov/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/DanilaMihailov/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/DanilaMihailov/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/DanilaMihailov"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28715#discussion_r1597664903"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28715"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1597664903"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes, indeed, as reloading the queries is what you want in the first place. Possibly it's enough for this purpose if we allow invalidating the cache explicitly (maybe for now with a private function prefixed by `_`).",
            "commit_id": "0bbee15ec030b691d788bdef84b71a0d3bc0c314",
            "created_at": "2024-05-12T15:40:54Z",
            "diff_hunk": "@@ -959,4 +959,57 @@ int x = INT_MAX;\n       )\n     end)\n   end)\n+\n+  it('option reload works', function()\n+    eq(\n+      true,\n+      exec_lua('return vim.treesitter.get_parser(0, \"lua\") == vim.treesitter.get_parser(0, \"lua\")')\n+    )\n+    eq(\n+      false,\n+      exec_lua(\n+        'return vim.treesitter.get_parser(0, \"lua\") == vim.treesitter.get_parser(0, \"lua\", {reload=true})'\n+      )\n+    )\n+  end)\n+\n+  it('reloading parser refreshes queries', function()\n+    local plug_dir = vim.uv.fs_mkdtemp(vim.fs.dirname(t.tmpname()) .. '/pluginXXXXXX')\n+    local query_dir = plug_dir .. '/queries/lua'\n+\n+    exec_lua('vim.fn.mkdir(..., \"p\")', query_dir)\n+\n+    t.write_file(\n+      query_dir .. '/injections.scm',\n+      [[;; extends\n+        (string \n+          content: _ @injection.content\n+          (#lua-match? @injection.content \"^TEST_INJ\")\n+          (#set! injection.language \"c\"))\n+      ]]\n+    )\n+\n+    insert([[\n+      local s = \"TEST_INJ test\"\n+    ]])\n+\n+    local langs = exec_lua(\n+      [[\n+      vim.treesitter.get_parser(0, \"lua\")\n+      vim.opt.rtp:append(...)\n+      collectgarbage() -- without it keeps cached queries",
            "html_url": "https://github.com/neovim/neovim/pull/28715#discussion_r1597664903",
            "id": 1597664903,
            "in_reply_to_id": 1597663199,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5fOm6H",
            "original_commit_id": "a9c4d6b33c163448cf7d97c9452fff486b9483f6",
            "original_line": 1000,
            "original_position": 42,
            "original_start_line": null,
            "path": "test/functional/treesitter/parser_spec.lua",
            "position": null,
            "pull_request_review_id": 2051408214,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28715",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1597664903/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-12T15:40:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1597664903",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28715#discussion_r1597673497"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28715"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1597673497"
                }
            },
            "author_association": "NONE",
            "body": "I did not completely get what you mean by \"invalidating the cache explicitly with a private function\", could you elaborate, please?\r\n\r\nLooked into `memoize` function and it is a closure over `cache`, and so cache is not accessible from outside. \r\n\r\nhttps://github.com/neovim/neovim/blob/4e5c633ed4871a948aff7338b793ac5f93484153/runtime/lua/vim/func/_memoize.lua#L41-L63\r\n\r\nIt can be converted to a table with `__call` that calls original function and some method like `_invalidate` attached, that clears cache (or specific key). And this would allow us to do something like this `vim.treesitter.query.get._invalidate_cache()`.\r\n\r\nOr another option is to change what parameters used for cache, I tried this\r\n\r\n```lua\r\nM.get = function(lang, query_name)\r\n  return getCachedQuery(lang, query_name, vim.o.rtp)\r\nend\r\n```\r\n\r\nand `getCachedQuery` is original function, with one param for cache\r\n```lua\r\nlocal getCachedQuery = memoize('concat-3', function(lang, query_name, _rtp)\r\n...\r\nend)\r\n```",
            "commit_id": "0bbee15ec030b691d788bdef84b71a0d3bc0c314",
            "created_at": "2024-05-12T16:40:58Z",
            "diff_hunk": "@@ -959,4 +959,57 @@ int x = INT_MAX;\n       )\n     end)\n   end)\n+\n+  it('option reload works', function()\n+    eq(\n+      true,\n+      exec_lua('return vim.treesitter.get_parser(0, \"lua\") == vim.treesitter.get_parser(0, \"lua\")')\n+    )\n+    eq(\n+      false,\n+      exec_lua(\n+        'return vim.treesitter.get_parser(0, \"lua\") == vim.treesitter.get_parser(0, \"lua\", {reload=true})'\n+      )\n+    )\n+  end)\n+\n+  it('reloading parser refreshes queries', function()\n+    local plug_dir = vim.uv.fs_mkdtemp(vim.fs.dirname(t.tmpname()) .. '/pluginXXXXXX')\n+    local query_dir = plug_dir .. '/queries/lua'\n+\n+    exec_lua('vim.fn.mkdir(..., \"p\")', query_dir)\n+\n+    t.write_file(\n+      query_dir .. '/injections.scm',\n+      [[;; extends\n+        (string \n+          content: _ @injection.content\n+          (#lua-match? @injection.content \"^TEST_INJ\")\n+          (#set! injection.language \"c\"))\n+      ]]\n+    )\n+\n+    insert([[\n+      local s = \"TEST_INJ test\"\n+    ]])\n+\n+    local langs = exec_lua(\n+      [[\n+      vim.treesitter.get_parser(0, \"lua\")\n+      vim.opt.rtp:append(...)\n+      collectgarbage() -- without it keeps cached queries",
            "html_url": "https://github.com/neovim/neovim/pull/28715#discussion_r1597673497",
            "id": 1597673497,
            "in_reply_to_id": 1597663199,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5fOpAZ",
            "original_commit_id": "a9c4d6b33c163448cf7d97c9452fff486b9483f6",
            "original_line": 1000,
            "original_position": 42,
            "original_start_line": null,
            "path": "test/functional/treesitter/parser_spec.lua",
            "position": null,
            "pull_request_review_id": 2051415702,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28715",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1597673497/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-12T16:40:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1597673497",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1163040?v=4",
                "events_url": "https://api.github.com/users/DanilaMihailov/events{/privacy}",
                "followers_url": "https://api.github.com/users/DanilaMihailov/followers",
                "following_url": "https://api.github.com/users/DanilaMihailov/following{/other_user}",
                "gists_url": "https://api.github.com/users/DanilaMihailov/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/DanilaMihailov",
                "id": 1163040,
                "login": "DanilaMihailov",
                "node_id": "MDQ6VXNlcjExNjMwNDA=",
                "organizations_url": "https://api.github.com/users/DanilaMihailov/orgs",
                "received_events_url": "https://api.github.com/users/DanilaMihailov/received_events",
                "repos_url": "https://api.github.com/users/DanilaMihailov/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/DanilaMihailov/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/DanilaMihailov/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/DanilaMihailov"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28715#discussion_r1597680935"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28715"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1597680935"
                }
            },
            "author_association": "NONE",
            "body": "changed `memoize` could look something like this\r\n```lua\r\nreturn function(hash, fn, strong)\r\n  -- ...\r\n  local cache = {}\r\n  local invalidate_cache = function(...)\r\n    if #{ ... } == 0 then\r\n      cache = {}\r\n    else\r\n      cache[hash(...)] = nil\r\n    end\r\n  end\r\n\r\n  local wrapped = function(_self, ...)\r\n    -- ...\r\n  end\r\n\r\n  return setmetatable({ _invalidate_cache = invalidate_cache }, { __call = wrapped })\r\nend\r\n```",
            "commit_id": "0bbee15ec030b691d788bdef84b71a0d3bc0c314",
            "created_at": "2024-05-12T17:35:55Z",
            "diff_hunk": "@@ -959,4 +959,57 @@ int x = INT_MAX;\n       )\n     end)\n   end)\n+\n+  it('option reload works', function()\n+    eq(\n+      true,\n+      exec_lua('return vim.treesitter.get_parser(0, \"lua\") == vim.treesitter.get_parser(0, \"lua\")')\n+    )\n+    eq(\n+      false,\n+      exec_lua(\n+        'return vim.treesitter.get_parser(0, \"lua\") == vim.treesitter.get_parser(0, \"lua\", {reload=true})'\n+      )\n+    )\n+  end)\n+\n+  it('reloading parser refreshes queries', function()\n+    local plug_dir = vim.uv.fs_mkdtemp(vim.fs.dirname(t.tmpname()) .. '/pluginXXXXXX')\n+    local query_dir = plug_dir .. '/queries/lua'\n+\n+    exec_lua('vim.fn.mkdir(..., \"p\")', query_dir)\n+\n+    t.write_file(\n+      query_dir .. '/injections.scm',\n+      [[;; extends\n+        (string \n+          content: _ @injection.content\n+          (#lua-match? @injection.content \"^TEST_INJ\")\n+          (#set! injection.language \"c\"))\n+      ]]\n+    )\n+\n+    insert([[\n+      local s = \"TEST_INJ test\"\n+    ]])\n+\n+    local langs = exec_lua(\n+      [[\n+      vim.treesitter.get_parser(0, \"lua\")\n+      vim.opt.rtp:append(...)\n+      collectgarbage() -- without it keeps cached queries",
            "html_url": "https://github.com/neovim/neovim/pull/28715#discussion_r1597680935",
            "id": 1597680935,
            "in_reply_to_id": 1597663199,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5fOq0n",
            "original_commit_id": "a9c4d6b33c163448cf7d97c9452fff486b9483f6",
            "original_line": 1000,
            "original_position": 42,
            "original_start_line": null,
            "path": "test/functional/treesitter/parser_spec.lua",
            "position": null,
            "pull_request_review_id": 2051421839,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28715",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1597680935/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-12T17:35:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1597680935",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1163040?v=4",
                "events_url": "https://api.github.com/users/DanilaMihailov/events{/privacy}",
                "followers_url": "https://api.github.com/users/DanilaMihailov/followers",
                "following_url": "https://api.github.com/users/DanilaMihailov/following{/other_user}",
                "gists_url": "https://api.github.com/users/DanilaMihailov/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/DanilaMihailov",
                "id": 1163040,
                "login": "DanilaMihailov",
                "node_id": "MDQ6VXNlcjExNjMwNDA=",
                "organizations_url": "https://api.github.com/users/DanilaMihailov/orgs",
                "received_events_url": "https://api.github.com/users/DanilaMihailov/received_events",
                "repos_url": "https://api.github.com/users/DanilaMihailov/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/DanilaMihailov/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/DanilaMihailov/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/DanilaMihailov"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28715#discussion_r1598795441"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28715"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1598795441"
                }
            },
            "author_association": "NONE",
            "body": "Settled for changing memozie function and added `treesitter.query._reset_cache` function, that calls _reset_cache internally, but allows simplier api for clearing all queries for lang: `query._reset_cache(\"lua\")`.\r\n\r\nUpdated tests as well.",
            "commit_id": "0bbee15ec030b691d788bdef84b71a0d3bc0c314",
            "created_at": "2024-05-13T17:11:12Z",
            "diff_hunk": "@@ -959,4 +959,57 @@ int x = INT_MAX;\n       )\n     end)\n   end)\n+\n+  it('option reload works', function()\n+    eq(\n+      true,\n+      exec_lua('return vim.treesitter.get_parser(0, \"lua\") == vim.treesitter.get_parser(0, \"lua\")')\n+    )\n+    eq(\n+      false,\n+      exec_lua(\n+        'return vim.treesitter.get_parser(0, \"lua\") == vim.treesitter.get_parser(0, \"lua\", {reload=true})'\n+      )\n+    )\n+  end)\n+\n+  it('reloading parser refreshes queries', function()\n+    local plug_dir = vim.uv.fs_mkdtemp(vim.fs.dirname(t.tmpname()) .. '/pluginXXXXXX')\n+    local query_dir = plug_dir .. '/queries/lua'\n+\n+    exec_lua('vim.fn.mkdir(..., \"p\")', query_dir)\n+\n+    t.write_file(\n+      query_dir .. '/injections.scm',\n+      [[;; extends\n+        (string \n+          content: _ @injection.content\n+          (#lua-match? @injection.content \"^TEST_INJ\")\n+          (#set! injection.language \"c\"))\n+      ]]\n+    )\n+\n+    insert([[\n+      local s = \"TEST_INJ test\"\n+    ]])\n+\n+    local langs = exec_lua(\n+      [[\n+      vim.treesitter.get_parser(0, \"lua\")\n+      vim.opt.rtp:append(...)\n+      collectgarbage() -- without it keeps cached queries",
            "html_url": "https://github.com/neovim/neovim/pull/28715#discussion_r1598795441",
            "id": 1598795441,
            "in_reply_to_id": 1597663199,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5fS66x",
            "original_commit_id": "a9c4d6b33c163448cf7d97c9452fff486b9483f6",
            "original_line": 1000,
            "original_position": 42,
            "original_start_line": null,
            "path": "test/functional/treesitter/parser_spec.lua",
            "position": null,
            "pull_request_review_id": 2053262703,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28715",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1598795441/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-13T17:11:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1598795441",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1163040?v=4",
                "events_url": "https://api.github.com/users/DanilaMihailov/events{/privacy}",
                "followers_url": "https://api.github.com/users/DanilaMihailov/followers",
                "following_url": "https://api.github.com/users/DanilaMihailov/following{/other_user}",
                "gists_url": "https://api.github.com/users/DanilaMihailov/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/DanilaMihailov",
                "id": 1163040,
                "login": "DanilaMihailov",
                "node_id": "MDQ6VXNlcjExNjMwNDA=",
                "organizations_url": "https://api.github.com/users/DanilaMihailov/orgs",
                "received_events_url": "https://api.github.com/users/DanilaMihailov/received_events",
                "repos_url": "https://api.github.com/users/DanilaMihailov/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/DanilaMihailov/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/DanilaMihailov/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/DanilaMihailov"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28715#discussion_r1599966666"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28715"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1599966666"
                }
            },
            "author_association": "NONE",
            "body": "I was thinking, maybe a better idea would be refreshing queries in `invalidate`? Something like this\r\n```lua\r\nfunction LanguageTree:invalidate(reload, refresh_queries)\r\n  self._valid = false\r\n\r\n  if refresh_queries then\r\n    if not self._opts.injections then\r\n      query._reset_cache(self:lang(), 'injections')\r\n      self._injection_query = query.get(self:lang(), 'injections')\r\n    end\r\n    self:_do_callback('changedquery', self:lang())\r\n  end\r\n    -- ...\r\n```\r\n\r\nand then highlighter.lua would register callback\r\n\r\n```lua\r\n -- ...\r\n    on_changedquery = function(lang)\r\n      -- just remove queires, they are loaded later on demand\r\n      query._reset_cache(lang, 'highlights')\r\n      self._queries[lang] = nil\r\n    end,\r\n```",
            "commit_id": "0bbee15ec030b691d788bdef84b71a0d3bc0c314",
            "created_at": "2024-05-14T12:44:46Z",
            "diff_hunk": "@@ -106,6 +106,16 @@ function M.get_parser(bufnr, lang, opts)\n   elseif parsers[bufnr] == nil or parsers[bufnr]:lang() ~= lang then\n     assert(lang, 'lang should be valid')\n     parsers[bufnr] = M._create_parser(bufnr, lang, opts)\n+  elseif opts.reload then\n+    opts.reload = nil -- do not pass reload to _create_parser\n+    assert(lang, 'lang should be valid')\n+    parsers[bufnr]:destroy()\n+    parsers[bufnr] = M._create_parser(bufnr, lang, opts)\n+\n+    if M.highlighter.active[bufnr] then\n+      M.highlighter.active[bufnr]:destroy()\n+      M.highlighter.new(parsers[bufnr])\n+    end",
            "html_url": "https://github.com/neovim/neovim/pull/28715#discussion_r1599966666",
            "id": 1599966666,
            "in_reply_to_id": 1597621689,
            "line": 121,
            "node_id": "PRRC_kwDOAPphoM5fXY3K",
            "original_commit_id": "f74018cb4724d343c7cfd59155dee07083f57e8b",
            "original_line": 118,
            "original_position": 22,
            "original_start_line": 112,
            "path": "runtime/lua/vim/treesitter.lua",
            "position": 25,
            "pull_request_review_id": 2055255783,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28715",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1599966666/reactions"
            },
            "side": "RIGHT",
            "start_line": 115,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-05-14T12:44:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1599966666",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1163040?v=4",
                "events_url": "https://api.github.com/users/DanilaMihailov/events{/privacy}",
                "followers_url": "https://api.github.com/users/DanilaMihailov/followers",
                "following_url": "https://api.github.com/users/DanilaMihailov/following{/other_user}",
                "gists_url": "https://api.github.com/users/DanilaMihailov/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/DanilaMihailov",
                "id": 1163040,
                "login": "DanilaMihailov",
                "node_id": "MDQ6VXNlcjExNjMwNDA=",
                "organizations_url": "https://api.github.com/users/DanilaMihailov/orgs",
                "received_events_url": "https://api.github.com/users/DanilaMihailov/received_events",
                "repos_url": "https://api.github.com/users/DanilaMihailov/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/DanilaMihailov/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/DanilaMihailov/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/DanilaMihailov"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28715#discussion_r1600114620"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28715"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1600114620"
                }
            },
            "author_association": "MEMBER",
            "body": "`invalidate` is only supposed to be called when the tracked state of the Languagetree is not valid against the parse tree in tree-sitter, and is called fairly often. I expect clearing file system caches will kill performance.",
            "commit_id": "0bbee15ec030b691d788bdef84b71a0d3bc0c314",
            "created_at": "2024-05-14T14:09:58Z",
            "diff_hunk": "@@ -106,6 +106,16 @@ function M.get_parser(bufnr, lang, opts)\n   elseif parsers[bufnr] == nil or parsers[bufnr]:lang() ~= lang then\n     assert(lang, 'lang should be valid')\n     parsers[bufnr] = M._create_parser(bufnr, lang, opts)\n+  elseif opts.reload then\n+    opts.reload = nil -- do not pass reload to _create_parser\n+    assert(lang, 'lang should be valid')\n+    parsers[bufnr]:destroy()\n+    parsers[bufnr] = M._create_parser(bufnr, lang, opts)\n+\n+    if M.highlighter.active[bufnr] then\n+      M.highlighter.active[bufnr]:destroy()\n+      M.highlighter.new(parsers[bufnr])\n+    end",
            "html_url": "https://github.com/neovim/neovim/pull/28715#discussion_r1600114620",
            "id": 1600114620,
            "in_reply_to_id": 1597621689,
            "line": 121,
            "node_id": "PRRC_kwDOAPphoM5fX8-8",
            "original_commit_id": "f74018cb4724d343c7cfd59155dee07083f57e8b",
            "original_line": 118,
            "original_position": 22,
            "original_start_line": 112,
            "path": "runtime/lua/vim/treesitter.lua",
            "position": 25,
            "pull_request_review_id": 2055505049,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28715",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1600114620/reactions"
            },
            "side": "RIGHT",
            "start_line": 115,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-05-14T14:09:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1600114620",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28715#discussion_r1600343846"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28715"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1600343846"
                }
            },
            "author_association": "MEMBER",
            "body": "> `invalidate` is only supposed to be called when the tracked state of the Languagetree is not valid against the parse tree in tree-sitter, and is called fairly often\r\n\r\nI attempted to mention this in the docstring of invalidate() https://github.com/neovim/neovim/pull/28747",
            "commit_id": "0bbee15ec030b691d788bdef84b71a0d3bc0c314",
            "created_at": "2024-05-14T16:35:23Z",
            "diff_hunk": "@@ -106,6 +106,16 @@ function M.get_parser(bufnr, lang, opts)\n   elseif parsers[bufnr] == nil or parsers[bufnr]:lang() ~= lang then\n     assert(lang, 'lang should be valid')\n     parsers[bufnr] = M._create_parser(bufnr, lang, opts)\n+  elseif opts.reload then\n+    opts.reload = nil -- do not pass reload to _create_parser\n+    assert(lang, 'lang should be valid')\n+    parsers[bufnr]:destroy()\n+    parsers[bufnr] = M._create_parser(bufnr, lang, opts)\n+\n+    if M.highlighter.active[bufnr] then\n+      M.highlighter.active[bufnr]:destroy()\n+      M.highlighter.new(parsers[bufnr])\n+    end",
            "html_url": "https://github.com/neovim/neovim/pull/28715#discussion_r1600343846",
            "id": 1600343846,
            "in_reply_to_id": 1597621689,
            "line": 121,
            "node_id": "PRRC_kwDOAPphoM5fY08m",
            "original_commit_id": "f74018cb4724d343c7cfd59155dee07083f57e8b",
            "original_line": 118,
            "original_position": 22,
            "original_start_line": 112,
            "path": "runtime/lua/vim/treesitter.lua",
            "position": 25,
            "pull_request_review_id": 2055909017,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28715",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1600343846/reactions"
            },
            "side": "RIGHT",
            "start_line": 115,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-05-14T16:35:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1600343846",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "Do we really need a new method for this? Can't we instead add a `reload` or `force` parameter (name TBD) to `vim.treesitter.query.get()`? \r\n\r\n(Also needs tests.)",
            "created_at": "2024-05-12T08:47:40Z",
            "html_url": "https://github.com/neovim/neovim/pull/28715#issuecomment-2106170328",
            "id": 2106170328,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28715",
            "node_id": "IC_kwDOAPphoM59iZvY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2106170328/reactions"
            },
            "updated_at": "2024-05-12T08:47:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2106170328",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Do we really need a new method for this? Can't we instead add a `reload` or `force` parameter (name TBD) to `vim.treesitter.query.get()`?\r\n> \r\n> (Also needs tests.)\r\n\r\nNot sure about `vim.treesitter.query.get()`. The problem is I want to update `LanguageTree.__injection_query` field in parser, but it is a private field. Maybe `vim.treesitter.get_parser(bufnr, lang, {force = true})`? That would remove current parser and create new one with `vim.treesitter._create_parser()` and effectively reload `_injection_query`.\r\n\r\nI would love to add tests, but is there an example how to test function that depends on `vim.opt.rtp` changes? As I understand I would need to create parser, than add new paths to `vim.opt.rtp` and then reload quieries. Should I store queries somewhere or just create files on the fly and then remove? ",
            "created_at": "2024-05-12T08:57:40Z",
            "html_url": "https://github.com/neovim/neovim/pull/28715#issuecomment-2106172710",
            "id": 2106172710,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28715",
            "node_id": "IC_kwDOAPphoM59iaUm",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2106172710/reactions"
            },
            "updated_at": "2024-05-12T08:57:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2106172710",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1163040?v=4",
                "events_url": "https://api.github.com/users/DanilaMihailov/events{/privacy}",
                "followers_url": "https://api.github.com/users/DanilaMihailov/followers",
                "following_url": "https://api.github.com/users/DanilaMihailov/following{/other_user}",
                "gists_url": "https://api.github.com/users/DanilaMihailov/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/DanilaMihailov",
                "id": 1163040,
                "login": "DanilaMihailov",
                "node_id": "MDQ6VXNlcjExNjMwNDA=",
                "organizations_url": "https://api.github.com/users/DanilaMihailov/orgs",
                "received_events_url": "https://api.github.com/users/DanilaMihailov/received_events",
                "repos_url": "https://api.github.com/users/DanilaMihailov/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/DanilaMihailov/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/DanilaMihailov/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/DanilaMihailov"
            }
        },
        {
            "author_association": "NONE",
            "body": "Here is an example how I would use this method\r\n\r\n```lua\r\n-- after plugin is loaded check if there is any open lua buffers,\r\n-- if so, we need to refresh their parsers, so our treesitter queries will work\r\nfor bufnr in vim.iter(vim.api.nvim_list_bufs()) do\r\n  if vim.api.nvim_buf_is_loaded(bufnr) and vim.bo[bufnr].ft == \"lua\" then\r\n    local parser = vim.treesitter.get_parser(bufnr)\r\n    parser:load_injection_query()\r\n    parser:parse(true)\r\n  end\r\nend\r\n```",
            "created_at": "2024-05-12T09:01:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/28715#issuecomment-2106173923",
            "id": 2106173923,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28715",
            "node_id": "IC_kwDOAPphoM59ianj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2106173923/reactions"
            },
            "updated_at": "2024-05-13T05:52:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2106173923",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1163040?v=4",
                "events_url": "https://api.github.com/users/DanilaMihailov/events{/privacy}",
                "followers_url": "https://api.github.com/users/DanilaMihailov/followers",
                "following_url": "https://api.github.com/users/DanilaMihailov/following{/other_user}",
                "gists_url": "https://api.github.com/users/DanilaMihailov/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/DanilaMihailov",
                "id": 1163040,
                "login": "DanilaMihailov",
                "node_id": "MDQ6VXNlcjExNjMwNDA=",
                "organizations_url": "https://api.github.com/users/DanilaMihailov/orgs",
                "received_events_url": "https://api.github.com/users/DanilaMihailov/received_events",
                "repos_url": "https://api.github.com/users/DanilaMihailov/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/DanilaMihailov/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/DanilaMihailov/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/DanilaMihailov"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Maybe vim.treesitter.get_parser(bufnr, lang, {force = true})? That would remove current parser and create new one with vim.treesitter._create_parser() and effectively reload _injection_query.\r\n\r\nYes, that is exactly what I was thinking of. What I don't like about it is that it's specific to injections, but you (sometimes) want to reload the main queries. Even if that is the actual effect, the API is misleading then, hurting discoverability.\r\n\r\n> I would love to add tests, but is there an example how to test function that depends on vim.opt.rtp changes? As I understand I would need to create parser, than add new paths to vim.opt.rtp and then reload quieries. Should I store queries somewhere or just create files on the fly and then remove?\r\n\r\nNeovim already ships with queries in runtimepath, so, yes, creating a temporary file and adding that directory to runtimepath could work. The best thing would be to look through the `test/functional/treesitter` tests and see if there is one that loads queries from a file, then adapt it.",
            "created_at": "2024-05-12T09:05:06Z",
            "html_url": "https://github.com/neovim/neovim/pull/28715#issuecomment-2106175001",
            "id": 2106175001,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28715",
            "node_id": "IC_kwDOAPphoM59ia4Z",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2106175001/reactions"
            },
            "updated_at": "2024-05-12T09:06:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2106175001",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Yes, that is exactly what I was thinking of. What I don't like about it is that it's specific to injections, but you (sometimes) want to reload the main queries. Even if that is the actual effect, the API is misleading then, hurting discoverability.\r\n\r\nYeah, more general \"reload parser\" is what I was looking for initially. So I would do it this way. But there is a lot happening with callbacks, that I don't fully grasp. Do I need to do any specific clean up for this:\r\n\r\n```lua\r\n  api.nvim_buf_attach(\r\n    source,\r\n    false,\r\n    { on_bytes = bytes_cb, on_detach = detach_cb, on_reload = reload_cb, preview = true }\r\n  )\r\n```\r\n\r\n",
            "created_at": "2024-05-12T09:16:00Z",
            "html_url": "https://github.com/neovim/neovim/pull/28715#issuecomment-2106179860",
            "id": 2106179860,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28715",
            "node_id": "IC_kwDOAPphoM59icEU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2106179860/reactions"
            },
            "updated_at": "2024-05-12T09:16:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2106179860",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1163040?v=4",
                "events_url": "https://api.github.com/users/DanilaMihailov/events{/privacy}",
                "followers_url": "https://api.github.com/users/DanilaMihailov/followers",
                "following_url": "https://api.github.com/users/DanilaMihailov/following{/other_user}",
                "gists_url": "https://api.github.com/users/DanilaMihailov/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/DanilaMihailov",
                "id": 1163040,
                "login": "DanilaMihailov",
                "node_id": "MDQ6VXNlcjExNjMwNDA=",
                "organizations_url": "https://api.github.com/users/DanilaMihailov/orgs",
                "received_events_url": "https://api.github.com/users/DanilaMihailov/received_events",
                "repos_url": "https://api.github.com/users/DanilaMihailov/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/DanilaMihailov/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/DanilaMihailov/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/DanilaMihailov"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I don't think so; tests will show.",
            "created_at": "2024-05-12T09:17:30Z",
            "html_url": "https://github.com/neovim/neovim/pull/28715#issuecomment-2106180294",
            "id": 2106180294,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28715",
            "node_id": "IC_kwDOAPphoM59icLG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2106180294/reactions"
            },
            "updated_at": "2024-05-12T09:17:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2106180294",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> There is no way to reload current parser for buffer. This is needed when\r\nvim.opt.rtp changes and new paths have treesitter queries. For example\r\nwhen loading plugins lazily.\r\n\r\nWhich plugins are we talking about? Is the lazy loading being done meaningfully or just blindly? And why can't the plugin be improved so it doesn't need to be lazy loaded (assuming it does).\r\n\r\nIt's still up in the air whether we want to support `rtp` changes, since there is so much state that needs to be reset and will get more difficult if we want to add more caches. I'm not sure if the added complexity is worth it for the 0.2ms startup time you get from avoiding a specific plugins `plugin/` dir.",
            "created_at": "2024-05-14T14:14:50Z",
            "html_url": "https://github.com/neovim/neovim/pull/28715#issuecomment-2110358155",
            "id": 2110358155,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28715",
            "node_id": "IC_kwDOAPphoM59yYKL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2110358155/reactions"
            },
            "updated_at": "2024-05-14T14:14:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2110358155",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Which plugins are we talking about? Is the lazy loading being done meaningfully or just blindly? And why can't the plugin be improved so it doesn't need to be lazy loaded (assuming it does).\r\n\r\nThis one https://github.com/S1M0N38/love2d.nvim , I actually added the queries there and thats when I hit the problem with rtp changes.\r\n\r\n> It's still up in the air whether we want to support rtp changes, since there is so much state that needs to be reset and will get more difficult if we want to add more caches. I'm not sure if the added complexity is worth it for the 0.2ms startup time you get from avoiding a specific plugins plugin/ dir.\r\n\r\nIn my case I load this plugin only in specific projects, so it is not about speed, but more about per project configuration. \r\n\r\nThere is similar idea in another PR https://github.com/neovim/neovim/pull/27392 that may solve my problem. \r\n\r\n",
            "created_at": "2024-05-14T15:49:51Z",
            "html_url": "https://github.com/neovim/neovim/pull/28715#issuecomment-2110578545",
            "id": 2110578545,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28715",
            "node_id": "IC_kwDOAPphoM59zN9x",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2110578545/reactions"
            },
            "updated_at": "2024-05-14T15:49:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2110578545",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1163040?v=4",
                "events_url": "https://api.github.com/users/DanilaMihailov/events{/privacy}",
                "followers_url": "https://api.github.com/users/DanilaMihailov/followers",
                "following_url": "https://api.github.com/users/DanilaMihailov/following{/other_user}",
                "gists_url": "https://api.github.com/users/DanilaMihailov/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/DanilaMihailov",
                "id": 1163040,
                "login": "DanilaMihailov",
                "node_id": "MDQ6VXNlcjExNjMwNDA=",
                "organizations_url": "https://api.github.com/users/DanilaMihailov/orgs",
                "received_events_url": "https://api.github.com/users/DanilaMihailov/received_events",
                "repos_url": "https://api.github.com/users/DanilaMihailov/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/DanilaMihailov/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/DanilaMihailov/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/DanilaMihailov"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "love2d.nvim creates two user commands: https://github.com/S1M0N38/love2d.nvim/blob/main/plugin/love2d.lua\r\n\r\nIs having this enabled only for specific projects really gaining you anything?",
            "created_at": "2024-05-14T15:52:37Z",
            "html_url": "https://github.com/neovim/neovim/pull/28715#issuecomment-2110583743",
            "id": 2110583743,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28715",
            "node_id": "IC_kwDOAPphoM59zPO_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2110583743/reactions"
            },
            "updated_at": "2024-05-14T15:52:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2110583743",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "NONE",
            "body": "> love2d.nvim creates two user commands: https://github.com/S1M0N38/love2d.nvim/blob/main/plugin/love2d.lua\r\n> \r\n> Is having this enabled only for specific projects really gaining you anything?\r\n\r\nIt adds love2d library to lua_ls path as well. But sure, this plugin can be loaded eagerly without a problem. I will have some irrelevant functions in autocomplete, but it is not a big deal.\r\n\r\nBefore creating PR I tried to solve this with available apis, but had to use private field\r\n```lua\r\nlocal parser = vim.treesitter.get_parser()\r\nparser._injection_query = vim.treesitter.query.get(\"lua\", \"injections\")\r\nparser:invalidate(true)\r\nparser:parse(true)\r\n```\r\n\r\nWeirdly never hit cache with this call, so it worked, but using private field bothers me :)\r\n\r\n\r\n\r\n",
            "created_at": "2024-05-14T16:10:06Z",
            "html_url": "https://github.com/neovim/neovim/pull/28715#issuecomment-2110617982",
            "id": 2110617982,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28715",
            "node_id": "IC_kwDOAPphoM59zXl-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2110617982/reactions"
            },
            "updated_at": "2024-05-14T16:10:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2110617982",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1163040?v=4",
                "events_url": "https://api.github.com/users/DanilaMihailov/events{/privacy}",
                "followers_url": "https://api.github.com/users/DanilaMihailov/followers",
                "following_url": "https://api.github.com/users/DanilaMihailov/following{/other_user}",
                "gists_url": "https://api.github.com/users/DanilaMihailov/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/DanilaMihailov",
                "id": 1163040,
                "login": "DanilaMihailov",
                "node_id": "MDQ6VXNlcjExNjMwNDA=",
                "organizations_url": "https://api.github.com/users/DanilaMihailov/orgs",
                "received_events_url": "https://api.github.com/users/DanilaMihailov/received_events",
                "repos_url": "https://api.github.com/users/DanilaMihailov/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/DanilaMihailov/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/DanilaMihailov/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/DanilaMihailov"
            }
        },
        {
            "author_association": "NONE",
            "body": "> It's still up in the air whether we want to support rtp changes, since there is so much state that needs to be reset and will get more difficult if we want to add more caches.\r\n\r\nThe whole parser already getting dropped and new one created when executing `:edit` command for example\r\n\r\nhttps://github.com/neovim/neovim/blob/6a264e08974bcb1b91f891eb65ef374f350d2827/runtime/lua/vim/treesitter.lua#L47-L52\r\n\r\nhttps://github.com/neovim/neovim/blob/6a264e08974bcb1b91f891eb65ef374f350d2827/runtime/lua/vim/treesitter.lua#L106-L109\r\n\r\nI am doing the same, when calling `vim.treesitter.get_parser(..., {reload = true})`, so no state from previous parser is kept or managed in any way. The only thing is I have to clear cache for queries, which does not seem like a big deal. But you saying there might be added more query files and then more cache is needed to be cleared?",
            "created_at": "2024-05-14T16:47:54Z",
            "html_url": "https://github.com/neovim/neovim/pull/28715#issuecomment-2110689645",
            "id": 2110689645,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28715",
            "node_id": "IC_kwDOAPphoM59zpFt",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2110689645/reactions"
            },
            "updated_at": "2024-05-14T16:47:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2110689645",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1163040?v=4",
                "events_url": "https://api.github.com/users/DanilaMihailov/events{/privacy}",
                "followers_url": "https://api.github.com/users/DanilaMihailov/followers",
                "following_url": "https://api.github.com/users/DanilaMihailov/following{/other_user}",
                "gists_url": "https://api.github.com/users/DanilaMihailov/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/DanilaMihailov",
                "id": 1163040,
                "login": "DanilaMihailov",
                "node_id": "MDQ6VXNlcjExNjMwNDA=",
                "organizations_url": "https://api.github.com/users/DanilaMihailov/orgs",
                "received_events_url": "https://api.github.com/users/DanilaMihailov/received_events",
                "repos_url": "https://api.github.com/users/DanilaMihailov/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/DanilaMihailov/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/DanilaMihailov/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/DanilaMihailov"
            }
        },
        {
            "author_association": "NONE",
            "body": "If explicitly dropping query cache is a problem (or could become a problem in the future) how about just having an api to remove parser from a buffer?\r\n\r\n```lua\r\nfunction M.drop_parser(bufnr)\r\n  parsers[bufnr]:destroy()\r\n  parsers[bufnr] = nil\r\nend\r\n```\r\n\r\nOr making `parsers` available outside of module? Like in `vim.treesitter.highliger.active[bufnr]`?\r\n\r\nOr even adding parameter to `vim.treesitter.stop(bufnr, {drop = true})` that will delete parser?\r\n\r\nThis will enable me to write something like this (probably in a loop for all lua buffers)\r\n```lua\r\nvim.treesitter.stop(bufnr, {drop = true})\r\ncollectgarbage() -- maybe clear query cache\r\nvim.treesitter.start(bufnr, \"lua\") -- create new parser with fresh queries\r\n```\r\n\r\n",
            "created_at": "2024-05-15T10:21:05Z",
            "html_url": "https://github.com/neovim/neovim/pull/28715#issuecomment-2112130665",
            "id": 2112130665,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28715",
            "node_id": "IC_kwDOAPphoM595I5p",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2112130665/reactions"
            },
            "updated_at": "2024-05-15T10:21:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2112130665",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1163040?v=4",
                "events_url": "https://api.github.com/users/DanilaMihailov/events{/privacy}",
                "followers_url": "https://api.github.com/users/DanilaMihailov/followers",
                "following_url": "https://api.github.com/users/DanilaMihailov/following{/other_user}",
                "gists_url": "https://api.github.com/users/DanilaMihailov/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/DanilaMihailov",
                "id": 1163040,
                "login": "DanilaMihailov",
                "node_id": "MDQ6VXNlcjExNjMwNDA=",
                "organizations_url": "https://api.github.com/users/DanilaMihailov/orgs",
                "received_events_url": "https://api.github.com/users/DanilaMihailov/received_events",
                "repos_url": "https://api.github.com/users/DanilaMihailov/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/DanilaMihailov/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/DanilaMihailov/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/DanilaMihailov"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Remember that the highlighter is not the only \"module\" that is using treesitter parsers (which are shared!) and queries.",
            "created_at": "2024-05-15T10:22:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/28715#issuecomment-2112133764",
            "id": 2112133764,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28715",
            "node_id": "IC_kwDOAPphoM595JqE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2112133764/reactions"
            },
            "updated_at": "2024-05-15T10:22:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2112133764",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Remember that the highlighter is not the only \"module\" that is using treesitter parsers (which are shared!) and queries.\r\n\r\nYeah, but they already have to handle buffer detaching \r\nhttps://github.com/neovim/neovim/blob/6a264e08974bcb1b91f891eb65ef374f350d2827/runtime/lua/vim/treesitter.lua#L47-L52\r\n\r\nSo calling `self:_on_detach()` should be enough to handle this. \r\n\r\n```lua\r\nfunction M.drop_parser(bufnr)\r\n  if parsers[bufnr] then\r\n    parsers[bufnr]:_on_detach()\r\n    parsers[bufnr] = nil\r\n  end\r\nend\r\n```\r\n\r\nRegarding queries, query cache already drops if no one is referencing given query. So by removing parser this way I try to create situation where no one references `queries/lua/injections.scm`, so it will be dropped from cache.",
            "created_at": "2024-05-15T10:37:04Z",
            "html_url": "https://github.com/neovim/neovim/pull/28715#issuecomment-2112159334",
            "id": 2112159334,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28715",
            "node_id": "IC_kwDOAPphoM595P5m",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2112159334/reactions"
            },
            "updated_at": "2024-05-15T10:37:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2112159334",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1163040?v=4",
                "events_url": "https://api.github.com/users/DanilaMihailov/events{/privacy}",
                "followers_url": "https://api.github.com/users/DanilaMihailov/followers",
                "following_url": "https://api.github.com/users/DanilaMihailov/following{/other_user}",
                "gists_url": "https://api.github.com/users/DanilaMihailov/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/DanilaMihailov",
                "id": 1163040,
                "login": "DanilaMihailov",
                "node_id": "MDQ6VXNlcjExNjMwNDA=",
                "organizations_url": "https://api.github.com/users/DanilaMihailov/orgs",
                "received_events_url": "https://api.github.com/users/DanilaMihailov/received_events",
                "repos_url": "https://api.github.com/users/DanilaMihailov/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/DanilaMihailov/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/DanilaMihailov/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/DanilaMihailov"
            }
        },
        {
            "author_association": "NONE",
            "body": "@lewis6991 please, let me know if this is a good idea. This is the only needed change. Not touching query cache. Just an ability to optionally destroy a parser. \r\n\r\n```lua\r\n-- vim/treesitter.lua\r\nfunction M.stop(bufnr, opts)\r\n  opts = opts or {}\r\n  -- ...\r\n  if opts.destroy and parsers[bufnr] then\r\n    parsers[bufnr]:_on_detach()\r\n    parsers[bufnr]:destroy()\r\n    parsers[bufnr] = nil\r\n  end\r\n  -- ...\r\nend\r\n```",
            "created_at": "2024-05-15T15:23:04Z",
            "html_url": "https://github.com/neovim/neovim/pull/28715#issuecomment-2112848059",
            "id": 2112848059,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28715",
            "node_id": "IC_kwDOAPphoM5974C7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2112848059/reactions"
            },
            "updated_at": "2024-05-15T15:23:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2112848059",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1163040?v=4",
                "events_url": "https://api.github.com/users/DanilaMihailov/events{/privacy}",
                "followers_url": "https://api.github.com/users/DanilaMihailov/followers",
                "following_url": "https://api.github.com/users/DanilaMihailov/following{/other_user}",
                "gists_url": "https://api.github.com/users/DanilaMihailov/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/DanilaMihailov",
                "id": 1163040,
                "login": "DanilaMihailov",
                "node_id": "MDQ6VXNlcjExNjMwNDA=",
                "organizations_url": "https://api.github.com/users/DanilaMihailov/orgs",
                "received_events_url": "https://api.github.com/users/DanilaMihailov/received_events",
                "repos_url": "https://api.github.com/users/DanilaMihailov/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/DanilaMihailov/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/DanilaMihailov/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/DanilaMihailov"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> let me know if this is a good idea. This is the only needed change. Not touching query cache.\r\n\r\n@DanilaMihailov that looks like a good start to me. Even if we can't get it perfect, we need to introduce an interface for this and start hacking away at an implementation. It's very annoying to develop parsers if I can't clear away the existing parser.\r\n\r\nRelated: https://github.com/neovim/neovim/pull/29530",
            "created_at": "2024-09-03T13:05:40Z",
            "html_url": "https://github.com/neovim/neovim/pull/28715#issuecomment-2326477880",
            "id": 2326477880,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28715",
            "node_id": "IC_kwDOAPphoM6Kqzw4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2326477880/reactions"
            },
            "updated_at": "2024-09-03T13:05:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2326477880",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/28715/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/28715/commits",
    "created_at": "2024-05-12T08:43:07Z",
    "diff_url": "https://github.com/neovim/neovim/pull/28715.diff",
    "draft": false,
    "head": {
        "label": "DanilaMihailov:treesitter-load-queries",
        "ref": "treesitter-load-queries",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/DanilaMihailov/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/DanilaMihailov/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/DanilaMihailov/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/DanilaMihailov/neovim/branches{/branch}",
            "clone_url": "https://github.com/DanilaMihailov/neovim.git",
            "collaborators_url": "https://api.github.com/repos/DanilaMihailov/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/DanilaMihailov/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/DanilaMihailov/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/DanilaMihailov/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/DanilaMihailov/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/DanilaMihailov/neovim/contributors",
            "created_at": "2024-05-12T06:45:40Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/DanilaMihailov/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/DanilaMihailov/neovim/downloads",
            "events_url": "https://api.github.com/repos/DanilaMihailov/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/DanilaMihailov/neovim/forks",
            "full_name": "DanilaMihailov/neovim",
            "git_commits_url": "https://api.github.com/repos/DanilaMihailov/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/DanilaMihailov/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/DanilaMihailov/neovim/git/tags{/sha}",
            "git_url": "git://github.com/DanilaMihailov/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/DanilaMihailov/neovim/hooks",
            "html_url": "https://github.com/DanilaMihailov/neovim",
            "id": 799443225,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/DanilaMihailov/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/DanilaMihailov/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/DanilaMihailov/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/DanilaMihailov/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/DanilaMihailov/neovim/labels{/name}",
            "language": null,
            "languages_url": "https://api.github.com/repos/DanilaMihailov/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/DanilaMihailov/neovim/merges",
            "milestones_url": "https://api.github.com/repos/DanilaMihailov/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOL6aJGQ",
            "notifications_url": "https://api.github.com/repos/DanilaMihailov/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1163040?v=4",
                "events_url": "https://api.github.com/users/DanilaMihailov/events{/privacy}",
                "followers_url": "https://api.github.com/users/DanilaMihailov/followers",
                "following_url": "https://api.github.com/users/DanilaMihailov/following{/other_user}",
                "gists_url": "https://api.github.com/users/DanilaMihailov/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/DanilaMihailov",
                "id": 1163040,
                "login": "DanilaMihailov",
                "node_id": "MDQ6VXNlcjExNjMwNDA=",
                "organizations_url": "https://api.github.com/users/DanilaMihailov/orgs",
                "received_events_url": "https://api.github.com/users/DanilaMihailov/received_events",
                "repos_url": "https://api.github.com/users/DanilaMihailov/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/DanilaMihailov/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/DanilaMihailov/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/DanilaMihailov"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/DanilaMihailov/neovim/pulls{/number}",
            "pushed_at": "2024-05-13T05:39:32Z",
            "releases_url": "https://api.github.com/repos/DanilaMihailov/neovim/releases{/id}",
            "size": 263022,
            "ssh_url": "git@github.com:DanilaMihailov/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/DanilaMihailov/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/DanilaMihailov/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/DanilaMihailov/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/DanilaMihailov/neovim/subscription",
            "svn_url": "https://github.com/DanilaMihailov/neovim",
            "tags_url": "https://api.github.com/repos/DanilaMihailov/neovim/tags",
            "teams_url": "https://api.github.com/repos/DanilaMihailov/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/DanilaMihailov/neovim/git/trees{/sha}",
            "updated_at": "2024-05-12T06:45:40Z",
            "url": "https://api.github.com/repos/DanilaMihailov/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "0bbee15ec030b691d788bdef84b71a0d3bc0c314",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1163040?v=4",
            "events_url": "https://api.github.com/users/DanilaMihailov/events{/privacy}",
            "followers_url": "https://api.github.com/users/DanilaMihailov/followers",
            "following_url": "https://api.github.com/users/DanilaMihailov/following{/other_user}",
            "gists_url": "https://api.github.com/users/DanilaMihailov/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/DanilaMihailov",
            "id": 1163040,
            "login": "DanilaMihailov",
            "node_id": "MDQ6VXNlcjExNjMwNDA=",
            "organizations_url": "https://api.github.com/users/DanilaMihailov/orgs",
            "received_events_url": "https://api.github.com/users/DanilaMihailov/received_events",
            "repos_url": "https://api.github.com/users/DanilaMihailov/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/DanilaMihailov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/DanilaMihailov/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/DanilaMihailov"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/28715",
    "id": 1865212689,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28715",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1799626557,
            "name": "treesitter",
            "node_id": "MDU6TGFiZWwxNzk5NjI2NTU3",
            "url": "https://api.github.com/repos/neovim/neovim/labels/treesitter"
        }
    ],
    "locked": false,
    "merge_commit_sha": "6afe0039c8171c32371a8bf39c876910d01be889",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5vLOMR",
    "number": 28715,
    "patch_url": "https://github.com/neovim/neovim/pull/28715.patch",
    "requested_reviewers": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
            "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
            "followers_url": "https://api.github.com/users/bfredl/followers",
            "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
            "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bfredl",
            "id": 1363104,
            "login": "bfredl",
            "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
            "organizations_url": "https://api.github.com/users/bfredl/orgs",
            "received_events_url": "https://api.github.com/users/bfredl/received_events",
            "repos_url": "https://api.github.com/users/bfredl/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bfredl"
        },
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
            "events_url": "https://api.github.com/users/clason/events{/privacy}",
            "followers_url": "https://api.github.com/users/clason/followers",
            "following_url": "https://api.github.com/users/clason/following{/other_user}",
            "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/clason",
            "id": 2361214,
            "login": "clason",
            "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
            "organizations_url": "https://api.github.com/users/clason/orgs",
            "received_events_url": "https://api.github.com/users/clason/received_events",
            "repos_url": "https://api.github.com/users/clason/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/clason"
        },
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
            "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
            "followers_url": "https://api.github.com/users/lewis6991/followers",
            "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
            "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/lewis6991",
            "id": 7904185,
            "login": "lewis6991",
            "node_id": "MDQ6VXNlcjc5MDQxODU=",
            "organizations_url": "https://api.github.com/users/lewis6991/orgs",
            "received_events_url": "https://api.github.com/users/lewis6991/received_events",
            "repos_url": "https://api.github.com/users/lewis6991/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/lewis6991"
        }
    ],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/28715/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/0bbee15ec030b691d788bdef84b71a0d3bc0c314",
    "title": "feat(treesitter): add ability to reload parser",
    "updated_at": "2024-09-03T13:05:42Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/28715",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1163040?v=4",
        "events_url": "https://api.github.com/users/DanilaMihailov/events{/privacy}",
        "followers_url": "https://api.github.com/users/DanilaMihailov/followers",
        "following_url": "https://api.github.com/users/DanilaMihailov/following{/other_user}",
        "gists_url": "https://api.github.com/users/DanilaMihailov/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/DanilaMihailov",
        "id": 1163040,
        "login": "DanilaMihailov",
        "node_id": "MDQ6VXNlcjExNjMwNDA=",
        "organizations_url": "https://api.github.com/users/DanilaMihailov/orgs",
        "received_events_url": "https://api.github.com/users/DanilaMihailov/received_events",
        "repos_url": "https://api.github.com/users/DanilaMihailov/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/DanilaMihailov/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/DanilaMihailov/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/DanilaMihailov"
    }
}