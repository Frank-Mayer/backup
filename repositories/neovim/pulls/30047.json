{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/30047/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/30047/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/30047"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/30047"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/30047/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/30047"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/48a8eb9b07733b85b7a5bee8fd3765f2f79878f9"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": {
        "commit_message": "refactor: adopt termkey and eliminate duplicate code",
        "commit_title": "Merge pull request #30047 from dundargoc/refactor/termkey",
        "enabled_by": {
            "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
            "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
            "followers_url": "https://api.github.com/users/dundargoc/followers",
            "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
            "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/dundargoc",
            "id": 33953936,
            "login": "dundargoc",
            "node_id": "MDQ6VXNlcjMzOTUzOTM2",
            "organizations_url": "https://api.github.com/users/dundargoc/orgs",
            "received_events_url": "https://api.github.com/users/dundargoc/received_events",
            "repos_url": "https://api.github.com/users/dundargoc/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/dundargoc"
        },
        "merge_method": "rebase"
    },
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5573,
            "forks_count": 5573,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1771,
            "open_issues_count": 1771,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-09-09T12:14:47Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 284802,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 81560,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-09-10T01:50:42Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 81560,
            "watchers_count": 81560,
            "web_commit_signoff_required": false
        },
        "sha": "975aeee537375a14c0e16916e1ef312aae90b85f",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "Termkey is abandoned and it's now our code, so there's no reason not to\ntreat it as such. An alternative approach could be to have a proper repo\nthat we maintain such as with unibilium, although with this approach we\ncan make a few assumptions that will allow us to remove more code.\n\nAlso eliminate duplicate code from both termkey and libvterm.",
    "closed_at": "2024-09-05T12:28:12Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30047#discussion_r1720815422"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30047"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1720815422"
                }
            },
            "author_association": "MEMBER",
            "body": "Isn't that already `undef`ed in our `win_defs.h`?",
            "commit_id": "48a8eb9b07733b85b7a5bee8fd3765f2f79878f9",
            "created_at": "2024-08-17T18:30:10Z",
            "diff_hunk": "@@ -2,9 +2,11 @@\n \n #include <stdio.h>\n #include <string.h>\n+#include \"nvim/mbyte.h\"\n+#include \"nvim/tui/termkey.h\"\n \n #include \"rect.h\"\n-#include \"utf8.h\"\n+#undef small",
            "html_url": "https://github.com/neovim/neovim/pull/30047#discussion_r1720815422",
            "id": 1720815422,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5mkY8-",
            "original_commit_id": "bc551395bfb2f01070a0b4a078764648f56070bf",
            "original_line": 9,
            "original_position": 9,
            "original_start_line": null,
            "path": "src/vterm/screen.c",
            "position": null,
            "pull_request_review_id": 2244133968,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30047",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1720815422/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-08-17T18:30:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1720815422",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30047#discussion_r1720817871"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30047"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1720817871"
                }
            },
            "author_association": "MEMBER",
            "body": "Yeah, but I assume the problematic windows header is being included somewhere else. I suspect libuv. I'll just rename all variables named \"small\" to \"little\" or something instead, this is annoying to guard against.",
            "commit_id": "48a8eb9b07733b85b7a5bee8fd3765f2f79878f9",
            "created_at": "2024-08-17T18:49:21Z",
            "diff_hunk": "@@ -2,9 +2,11 @@\n \n #include <stdio.h>\n #include <string.h>\n+#include \"nvim/mbyte.h\"\n+#include \"nvim/tui/termkey.h\"\n \n #include \"rect.h\"\n-#include \"utf8.h\"\n+#undef small",
            "html_url": "https://github.com/neovim/neovim/pull/30047#discussion_r1720817871",
            "id": 1720817871,
            "in_reply_to_id": 1720815422,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5mkZjP",
            "original_commit_id": "bc551395bfb2f01070a0b4a078764648f56070bf",
            "original_line": 9,
            "original_position": 9,
            "original_start_line": null,
            "path": "src/vterm/screen.c",
            "position": null,
            "pull_request_review_id": 2244136072,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30047",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1720817871/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-08-17T18:49:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1720817871",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30047#discussion_r1720818767"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30047"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1720818767"
                }
            },
            "author_association": "MEMBER",
            "body": "\"tiny\"",
            "commit_id": "48a8eb9b07733b85b7a5bee8fd3765f2f79878f9",
            "created_at": "2024-08-17T18:56:16Z",
            "diff_hunk": "@@ -2,9 +2,11 @@\n \n #include <stdio.h>\n #include <string.h>\n+#include \"nvim/mbyte.h\"\n+#include \"nvim/tui/termkey.h\"\n \n #include \"rect.h\"\n-#include \"utf8.h\"\n+#undef small",
            "html_url": "https://github.com/neovim/neovim/pull/30047#discussion_r1720818767",
            "id": 1720818767,
            "in_reply_to_id": 1720815422,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5mkZxP",
            "original_commit_id": "bc551395bfb2f01070a0b4a078764648f56070bf",
            "original_line": 9,
            "original_position": 9,
            "original_start_line": null,
            "path": "src/vterm/screen.c",
            "position": null,
            "pull_request_review_id": 2244136842,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30047",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1720818767/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-08-17T18:56:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1720818767",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30047#discussion_r1720819926"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30047"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1720819926"
                }
            },
            "author_association": "MEMBER",
            "body": "OK, found a solution. `WIN32_LEAN_AND_MEAN` only includes core set of headers and not kitchen sink, so if CI passes with that let's go with that.",
            "commit_id": "48a8eb9b07733b85b7a5bee8fd3765f2f79878f9",
            "created_at": "2024-08-17T19:07:07Z",
            "diff_hunk": "@@ -2,9 +2,11 @@\n \n #include <stdio.h>\n #include <string.h>\n+#include \"nvim/mbyte.h\"\n+#include \"nvim/tui/termkey.h\"\n \n #include \"rect.h\"\n-#include \"utf8.h\"\n+#undef small",
            "html_url": "https://github.com/neovim/neovim/pull/30047#discussion_r1720819926",
            "id": 1720819926,
            "in_reply_to_id": 1720815422,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5mkaDW",
            "original_commit_id": "bc551395bfb2f01070a0b4a078764648f56070bf",
            "original_line": 9,
            "original_position": 9,
            "original_start_line": null,
            "path": "src/vterm/screen.c",
            "position": null,
            "pull_request_review_id": 2244137842,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30047",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1720819926/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-08-17T19:07:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1720819926",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30047#discussion_r1720847605"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30047"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1720847605"
                }
            },
            "author_association": "MEMBER",
            "body": "Why are `KeyEncoding` and `TermInput` moved to this file?",
            "commit_id": "48a8eb9b07733b85b7a5bee8fd3765f2f79878f9",
            "created_at": "2024-08-17T23:04:17Z",
            "diff_hunk": "@@ -0,0 +1,228 @@\n+#pragma once\n+\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <unibilium.h>\n+#include <uv.h>\n+\n+#include \"nvim/event/defs.h\"\n+#include \"nvim/tui/tui_defs.h\"\n+#include \"nvim/types_defs.h\"\n+\n+typedef struct TermKey TermKey;\n+\n+typedef struct {\n+  TermKey *tk;\n+  int saved_string_id;\n+  char *saved_string;\n+} TermKeyCsi;\n+\n+typedef enum {\n+  TERMKEY_RES_NONE,\n+  TERMKEY_RES_KEY,\n+  TERMKEY_RES_EOF,\n+  TERMKEY_RES_AGAIN,\n+  TERMKEY_RES_ERROR,\n+} TermKeyResult;\n+\n+typedef enum {\n+  TERMKEY_SYM_UNKNOWN = -1,\n+  TERMKEY_SYM_NONE = 0,\n+\n+  // Special names in C0\n+  TERMKEY_SYM_BACKSPACE,\n+  TERMKEY_SYM_TAB,\n+  TERMKEY_SYM_ENTER,\n+  TERMKEY_SYM_ESCAPE,\n+\n+  // Special names in G0\n+  TERMKEY_SYM_SPACE,\n+  TERMKEY_SYM_DEL,\n+\n+  // Special keys\n+  TERMKEY_SYM_UP,\n+  TERMKEY_SYM_DOWN,\n+  TERMKEY_SYM_LEFT,\n+  TERMKEY_SYM_RIGHT,\n+  TERMKEY_SYM_BEGIN,\n+  TERMKEY_SYM_FIND,\n+  TERMKEY_SYM_INSERT,\n+  TERMKEY_SYM_DELETE,\n+  TERMKEY_SYM_SELECT,\n+  TERMKEY_SYM_PAGEUP,\n+  TERMKEY_SYM_PAGEDOWN,\n+  TERMKEY_SYM_HOME,\n+  TERMKEY_SYM_END,\n+\n+  // Special keys from terminfo\n+  TERMKEY_SYM_CANCEL,\n+  TERMKEY_SYM_CLEAR,\n+  TERMKEY_SYM_CLOSE,\n+  TERMKEY_SYM_COMMAND,\n+  TERMKEY_SYM_COPY,\n+  TERMKEY_SYM_EXIT,\n+  TERMKEY_SYM_HELP,\n+  TERMKEY_SYM_MARK,\n+  TERMKEY_SYM_MESSAGE,\n+  TERMKEY_SYM_MOVE,\n+  TERMKEY_SYM_OPEN,\n+  TERMKEY_SYM_OPTIONS,\n+  TERMKEY_SYM_PRINT,\n+  TERMKEY_SYM_REDO,\n+  TERMKEY_SYM_REFERENCE,\n+  TERMKEY_SYM_REFRESH,\n+  TERMKEY_SYM_REPLACE,\n+  TERMKEY_SYM_RESTART,\n+  TERMKEY_SYM_RESUME,\n+  TERMKEY_SYM_SAVE,\n+  TERMKEY_SYM_SUSPEND,\n+  TERMKEY_SYM_UNDO,\n+\n+  // Numeric keypad special keys\n+  TERMKEY_SYM_KP0,\n+  TERMKEY_SYM_KP1,\n+  TERMKEY_SYM_KP2,\n+  TERMKEY_SYM_KP3,\n+  TERMKEY_SYM_KP4,\n+  TERMKEY_SYM_KP5,\n+  TERMKEY_SYM_KP6,\n+  TERMKEY_SYM_KP7,\n+  TERMKEY_SYM_KP8,\n+  TERMKEY_SYM_KP9,\n+  TERMKEY_SYM_KPENTER,\n+  TERMKEY_SYM_KPPLUS,\n+  TERMKEY_SYM_KPMINUS,\n+  TERMKEY_SYM_KPMULT,\n+  TERMKEY_SYM_KPDIV,\n+  TERMKEY_SYM_KPCOMMA,\n+  TERMKEY_SYM_KPPERIOD,\n+  TERMKEY_SYM_KPEQUALS,\n+\n+  // et cetera ad nauseum\n+  TERMKEY_N_SYMS,\n+} TermKeySym;\n+\n+typedef enum {\n+  TERMKEY_TYPE_UNICODE,\n+  TERMKEY_TYPE_FUNCTION,\n+  TERMKEY_TYPE_KEYSYM,\n+  TERMKEY_TYPE_MOUSE,\n+  TERMKEY_TYPE_POSITION,\n+  TERMKEY_TYPE_MODEREPORT,\n+  TERMKEY_TYPE_DCS,\n+  TERMKEY_TYPE_OSC,\n+  // add other recognised types here\n+\n+  TERMKEY_TYPE_UNKNOWN_CSI = -1,\n+} TermKeyType;\n+\n+typedef enum {\n+  TERMKEY_MOUSE_UNKNOWN,\n+  TERMKEY_MOUSE_PRESS,\n+  TERMKEY_MOUSE_DRAG,\n+  TERMKEY_MOUSE_RELEASE,\n+} TermKeyMouseEvent;\n+\n+enum {\n+  TERMKEY_KEYMOD_SHIFT = 1 << 0,\n+  TERMKEY_KEYMOD_ALT   = 1 << 1,\n+  TERMKEY_KEYMOD_CTRL  = 1 << 2,\n+};\n+\n+typedef struct {\n+  const unsigned char *param;\n+  size_t length;\n+} TermKeyCsiParam;\n+\n+enum {\n+  TERMKEY_FLAG_NOINTERPRET = 1 << 0,  // Do not interpret C0//DEL codes if possible\n+  TERMKEY_FLAG_CONVERTKP   = 1 << 1,  // Convert KP codes to regular keypresses\n+  TERMKEY_FLAG_RAW         = 1 << 2,  // Input is raw bytes, not UTF-8\n+  TERMKEY_FLAG_UTF8        = 1 << 3,  // Input is definitely UTF-8\n+  TERMKEY_FLAG_NOTERMIOS   = 1 << 4,  // Do not make initial termios calls on construction\n+  TERMKEY_FLAG_SPACESYMBOL = 1 << 5,  // Sets TERMKEY_CANON_SPACESYMBOL\n+  TERMKEY_FLAG_CTRLC       = 1 << 6,  // Allow Ctrl-C to be read as normal, disabling SIGINT\n+  TERMKEY_FLAG_EINTR       = 1 << 7,  // Return ERROR on signal (EINTR) rather than retry\n+  TERMKEY_FLAG_NOSTART     = 1 << 8,  // Do not call termkey_start() in constructor\n+};\n+\n+enum {\n+  TERMKEY_CANON_SPACESYMBOL = 1 << 0,  // Space is symbolic rather than Unicode\n+  TERMKEY_CANON_DELBS       = 1 << 1,  // Del is converted to Backspace\n+};\n+\n+typedef struct {\n+  TermKeyType type;\n+  union {\n+    long codepoint;  // TERMKEY_TYPE_UNICODE\n+    int number;    // TERMKEY_TYPE_FUNCTION\n+    TermKeySym sym;       // TERMKEY_TYPE_KEYSYM\n+    char mouse[4];  // TERMKEY_TYPE_MOUSE\n+                    // opaque. see termkey_interpret_mouse\n+  } code;\n+\n+  int modifiers;\n+\n+  // Any Unicode character can be UTF-8 encoded in no more than 6 bytes, plus\n+  // terminating NUL\n+  char utf8[7];\n+} TermKeyKey;\n+\n+// Mostly-undocumented hooks for doing evil evil things\n+typedef const char *TermKey_Terminfo_Getstr_Hook(const char *name, const char *value, void *data);\n+\n+typedef enum {\n+  TERMKEY_FORMAT_LONGMOD     = 1 << 0,  // Shift-... instead of S-...\n+  TERMKEY_FORMAT_CARETCTRL   = 1 << 1,  // ^X instead of C-X\n+  TERMKEY_FORMAT_ALTISMETA   = 1 << 2,  // Meta- or M- instead of Alt- or A-\n+  TERMKEY_FORMAT_WRAPBRACKET = 1 << 3,  // Wrap special keys in brackets like <Escape>\n+  TERMKEY_FORMAT_SPACEMOD    = 1 << 4,  // M Foo instead of M-Foo\n+  TERMKEY_FORMAT_LOWERMOD    = 1 << 5,  // meta or m instead of Meta or M\n+  TERMKEY_FORMAT_LOWERSPACE  = 1 << 6,  // page down instead of PageDown\n+\n+  TERMKEY_FORMAT_MOUSE_POS   = 1 << 8,  // Include mouse position if relevant; @ col,line\n+} TermKeyFormat;\n+\n+// Some useful combinations\n+\n+#define TERMKEY_FORMAT_VIM (TermKeyFormat)(TERMKEY_FORMAT_ALTISMETA|TERMKEY_FORMAT_WRAPBRACKET)\n+\n+typedef enum {\n+  kKeyEncodingLegacy,  ///< Legacy key encoding\n+  kKeyEncodingKitty,   ///< Kitty keyboard protocol encoding\n+  kKeyEncodingXterm,   ///< Xterm's modifyOtherKeys encoding (XTMODKEYS)\n+} KeyEncoding;\n+\n+#define KEY_BUFFER_SIZE 0x1000\n+typedef struct {\n+  int in_fd;\n+  // Phases: -1=all 0=disabled 1=first-chunk 2=continue 3=last-chunk\n+  int8_t paste;\n+  bool ttimeout;\n+\n+  bool waiting_for_kkp_response;  ///< True if we are expecting to receive a response to a query for\n+                                  ///< Kitty keyboard protocol support\n+\n+  KeyEncoding key_encoding;       ///< The key encoding used by the terminal emulator\n+\n+  OptInt ttimeoutlen;\n+  TermKey *tk;\n+  TermKey_Terminfo_Getstr_Hook *tk_ti_hook_fn;  ///< libtermkey terminfo hook\n+  uv_timer_t timer_handle;\n+  Loop *loop;\n+  RStream read_stream;\n+  TUIData *tui_data;\n+  char key_buffer[KEY_BUFFER_SIZE];\n+  size_t key_buffer_len;\n+} TermInput;",
            "html_url": "https://github.com/neovim/neovim/pull/30047#discussion_r1720847605",
            "id": 1720847605,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5mkgz1",
            "original_commit_id": "bd7d0ee7799bf52c4308b81ef0cfc14eb404f63c",
            "original_line": 217,
            "original_position": 217,
            "original_start_line": 189,
            "path": "src/nvim/tui/termkey_defs.h",
            "position": null,
            "pull_request_review_id": 2244164499,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30047",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1720847605/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-08-17T23:04:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1720847605",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30047#discussion_r1720867533"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30047"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1720867533"
                }
            },
            "author_association": "MEMBER",
            "body": "Fix clint warnings. I can revert and include termkey_defs instead if you prefer",
            "commit_id": "48a8eb9b07733b85b7a5bee8fd3765f2f79878f9",
            "created_at": "2024-08-18T01:06:45Z",
            "diff_hunk": "@@ -0,0 +1,228 @@\n+#pragma once\n+\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <unibilium.h>\n+#include <uv.h>\n+\n+#include \"nvim/event/defs.h\"\n+#include \"nvim/tui/tui_defs.h\"\n+#include \"nvim/types_defs.h\"\n+\n+typedef struct TermKey TermKey;\n+\n+typedef struct {\n+  TermKey *tk;\n+  int saved_string_id;\n+  char *saved_string;\n+} TermKeyCsi;\n+\n+typedef enum {\n+  TERMKEY_RES_NONE,\n+  TERMKEY_RES_KEY,\n+  TERMKEY_RES_EOF,\n+  TERMKEY_RES_AGAIN,\n+  TERMKEY_RES_ERROR,\n+} TermKeyResult;\n+\n+typedef enum {\n+  TERMKEY_SYM_UNKNOWN = -1,\n+  TERMKEY_SYM_NONE = 0,\n+\n+  // Special names in C0\n+  TERMKEY_SYM_BACKSPACE,\n+  TERMKEY_SYM_TAB,\n+  TERMKEY_SYM_ENTER,\n+  TERMKEY_SYM_ESCAPE,\n+\n+  // Special names in G0\n+  TERMKEY_SYM_SPACE,\n+  TERMKEY_SYM_DEL,\n+\n+  // Special keys\n+  TERMKEY_SYM_UP,\n+  TERMKEY_SYM_DOWN,\n+  TERMKEY_SYM_LEFT,\n+  TERMKEY_SYM_RIGHT,\n+  TERMKEY_SYM_BEGIN,\n+  TERMKEY_SYM_FIND,\n+  TERMKEY_SYM_INSERT,\n+  TERMKEY_SYM_DELETE,\n+  TERMKEY_SYM_SELECT,\n+  TERMKEY_SYM_PAGEUP,\n+  TERMKEY_SYM_PAGEDOWN,\n+  TERMKEY_SYM_HOME,\n+  TERMKEY_SYM_END,\n+\n+  // Special keys from terminfo\n+  TERMKEY_SYM_CANCEL,\n+  TERMKEY_SYM_CLEAR,\n+  TERMKEY_SYM_CLOSE,\n+  TERMKEY_SYM_COMMAND,\n+  TERMKEY_SYM_COPY,\n+  TERMKEY_SYM_EXIT,\n+  TERMKEY_SYM_HELP,\n+  TERMKEY_SYM_MARK,\n+  TERMKEY_SYM_MESSAGE,\n+  TERMKEY_SYM_MOVE,\n+  TERMKEY_SYM_OPEN,\n+  TERMKEY_SYM_OPTIONS,\n+  TERMKEY_SYM_PRINT,\n+  TERMKEY_SYM_REDO,\n+  TERMKEY_SYM_REFERENCE,\n+  TERMKEY_SYM_REFRESH,\n+  TERMKEY_SYM_REPLACE,\n+  TERMKEY_SYM_RESTART,\n+  TERMKEY_SYM_RESUME,\n+  TERMKEY_SYM_SAVE,\n+  TERMKEY_SYM_SUSPEND,\n+  TERMKEY_SYM_UNDO,\n+\n+  // Numeric keypad special keys\n+  TERMKEY_SYM_KP0,\n+  TERMKEY_SYM_KP1,\n+  TERMKEY_SYM_KP2,\n+  TERMKEY_SYM_KP3,\n+  TERMKEY_SYM_KP4,\n+  TERMKEY_SYM_KP5,\n+  TERMKEY_SYM_KP6,\n+  TERMKEY_SYM_KP7,\n+  TERMKEY_SYM_KP8,\n+  TERMKEY_SYM_KP9,\n+  TERMKEY_SYM_KPENTER,\n+  TERMKEY_SYM_KPPLUS,\n+  TERMKEY_SYM_KPMINUS,\n+  TERMKEY_SYM_KPMULT,\n+  TERMKEY_SYM_KPDIV,\n+  TERMKEY_SYM_KPCOMMA,\n+  TERMKEY_SYM_KPPERIOD,\n+  TERMKEY_SYM_KPEQUALS,\n+\n+  // et cetera ad nauseum\n+  TERMKEY_N_SYMS,\n+} TermKeySym;\n+\n+typedef enum {\n+  TERMKEY_TYPE_UNICODE,\n+  TERMKEY_TYPE_FUNCTION,\n+  TERMKEY_TYPE_KEYSYM,\n+  TERMKEY_TYPE_MOUSE,\n+  TERMKEY_TYPE_POSITION,\n+  TERMKEY_TYPE_MODEREPORT,\n+  TERMKEY_TYPE_DCS,\n+  TERMKEY_TYPE_OSC,\n+  // add other recognised types here\n+\n+  TERMKEY_TYPE_UNKNOWN_CSI = -1,\n+} TermKeyType;\n+\n+typedef enum {\n+  TERMKEY_MOUSE_UNKNOWN,\n+  TERMKEY_MOUSE_PRESS,\n+  TERMKEY_MOUSE_DRAG,\n+  TERMKEY_MOUSE_RELEASE,\n+} TermKeyMouseEvent;\n+\n+enum {\n+  TERMKEY_KEYMOD_SHIFT = 1 << 0,\n+  TERMKEY_KEYMOD_ALT   = 1 << 1,\n+  TERMKEY_KEYMOD_CTRL  = 1 << 2,\n+};\n+\n+typedef struct {\n+  const unsigned char *param;\n+  size_t length;\n+} TermKeyCsiParam;\n+\n+enum {\n+  TERMKEY_FLAG_NOINTERPRET = 1 << 0,  // Do not interpret C0//DEL codes if possible\n+  TERMKEY_FLAG_CONVERTKP   = 1 << 1,  // Convert KP codes to regular keypresses\n+  TERMKEY_FLAG_RAW         = 1 << 2,  // Input is raw bytes, not UTF-8\n+  TERMKEY_FLAG_UTF8        = 1 << 3,  // Input is definitely UTF-8\n+  TERMKEY_FLAG_NOTERMIOS   = 1 << 4,  // Do not make initial termios calls on construction\n+  TERMKEY_FLAG_SPACESYMBOL = 1 << 5,  // Sets TERMKEY_CANON_SPACESYMBOL\n+  TERMKEY_FLAG_CTRLC       = 1 << 6,  // Allow Ctrl-C to be read as normal, disabling SIGINT\n+  TERMKEY_FLAG_EINTR       = 1 << 7,  // Return ERROR on signal (EINTR) rather than retry\n+  TERMKEY_FLAG_NOSTART     = 1 << 8,  // Do not call termkey_start() in constructor\n+};\n+\n+enum {\n+  TERMKEY_CANON_SPACESYMBOL = 1 << 0,  // Space is symbolic rather than Unicode\n+  TERMKEY_CANON_DELBS       = 1 << 1,  // Del is converted to Backspace\n+};\n+\n+typedef struct {\n+  TermKeyType type;\n+  union {\n+    long codepoint;  // TERMKEY_TYPE_UNICODE\n+    int number;    // TERMKEY_TYPE_FUNCTION\n+    TermKeySym sym;       // TERMKEY_TYPE_KEYSYM\n+    char mouse[4];  // TERMKEY_TYPE_MOUSE\n+                    // opaque. see termkey_interpret_mouse\n+  } code;\n+\n+  int modifiers;\n+\n+  // Any Unicode character can be UTF-8 encoded in no more than 6 bytes, plus\n+  // terminating NUL\n+  char utf8[7];\n+} TermKeyKey;\n+\n+// Mostly-undocumented hooks for doing evil evil things\n+typedef const char *TermKey_Terminfo_Getstr_Hook(const char *name, const char *value, void *data);\n+\n+typedef enum {\n+  TERMKEY_FORMAT_LONGMOD     = 1 << 0,  // Shift-... instead of S-...\n+  TERMKEY_FORMAT_CARETCTRL   = 1 << 1,  // ^X instead of C-X\n+  TERMKEY_FORMAT_ALTISMETA   = 1 << 2,  // Meta- or M- instead of Alt- or A-\n+  TERMKEY_FORMAT_WRAPBRACKET = 1 << 3,  // Wrap special keys in brackets like <Escape>\n+  TERMKEY_FORMAT_SPACEMOD    = 1 << 4,  // M Foo instead of M-Foo\n+  TERMKEY_FORMAT_LOWERMOD    = 1 << 5,  // meta or m instead of Meta or M\n+  TERMKEY_FORMAT_LOWERSPACE  = 1 << 6,  // page down instead of PageDown\n+\n+  TERMKEY_FORMAT_MOUSE_POS   = 1 << 8,  // Include mouse position if relevant; @ col,line\n+} TermKeyFormat;\n+\n+// Some useful combinations\n+\n+#define TERMKEY_FORMAT_VIM (TermKeyFormat)(TERMKEY_FORMAT_ALTISMETA|TERMKEY_FORMAT_WRAPBRACKET)\n+\n+typedef enum {\n+  kKeyEncodingLegacy,  ///< Legacy key encoding\n+  kKeyEncodingKitty,   ///< Kitty keyboard protocol encoding\n+  kKeyEncodingXterm,   ///< Xterm's modifyOtherKeys encoding (XTMODKEYS)\n+} KeyEncoding;\n+\n+#define KEY_BUFFER_SIZE 0x1000\n+typedef struct {\n+  int in_fd;\n+  // Phases: -1=all 0=disabled 1=first-chunk 2=continue 3=last-chunk\n+  int8_t paste;\n+  bool ttimeout;\n+\n+  bool waiting_for_kkp_response;  ///< True if we are expecting to receive a response to a query for\n+                                  ///< Kitty keyboard protocol support\n+\n+  KeyEncoding key_encoding;       ///< The key encoding used by the terminal emulator\n+\n+  OptInt ttimeoutlen;\n+  TermKey *tk;\n+  TermKey_Terminfo_Getstr_Hook *tk_ti_hook_fn;  ///< libtermkey terminfo hook\n+  uv_timer_t timer_handle;\n+  Loop *loop;\n+  RStream read_stream;\n+  TUIData *tui_data;\n+  char key_buffer[KEY_BUFFER_SIZE];\n+  size_t key_buffer_len;\n+} TermInput;",
            "html_url": "https://github.com/neovim/neovim/pull/30047#discussion_r1720867533",
            "id": 1720867533,
            "in_reply_to_id": 1720847605,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5mklrN",
            "original_commit_id": "bd7d0ee7799bf52c4308b81ef0cfc14eb404f63c",
            "original_line": 217,
            "original_position": 217,
            "original_start_line": 189,
            "path": "src/nvim/tui/termkey_defs.h",
            "position": null,
            "pull_request_review_id": 2244182604,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30047",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1720867533/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-08-18T01:06:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1720867533",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30047#discussion_r1720867804"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30047"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1720867804"
                }
            },
            "author_association": "MEMBER",
            "body": "Actually keyencoding has to be there to silence clint warning. So that is correct.",
            "commit_id": "48a8eb9b07733b85b7a5bee8fd3765f2f79878f9",
            "created_at": "2024-08-18T01:10:09Z",
            "diff_hunk": "@@ -0,0 +1,228 @@\n+#pragma once\n+\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <unibilium.h>\n+#include <uv.h>\n+\n+#include \"nvim/event/defs.h\"\n+#include \"nvim/tui/tui_defs.h\"\n+#include \"nvim/types_defs.h\"\n+\n+typedef struct TermKey TermKey;\n+\n+typedef struct {\n+  TermKey *tk;\n+  int saved_string_id;\n+  char *saved_string;\n+} TermKeyCsi;\n+\n+typedef enum {\n+  TERMKEY_RES_NONE,\n+  TERMKEY_RES_KEY,\n+  TERMKEY_RES_EOF,\n+  TERMKEY_RES_AGAIN,\n+  TERMKEY_RES_ERROR,\n+} TermKeyResult;\n+\n+typedef enum {\n+  TERMKEY_SYM_UNKNOWN = -1,\n+  TERMKEY_SYM_NONE = 0,\n+\n+  // Special names in C0\n+  TERMKEY_SYM_BACKSPACE,\n+  TERMKEY_SYM_TAB,\n+  TERMKEY_SYM_ENTER,\n+  TERMKEY_SYM_ESCAPE,\n+\n+  // Special names in G0\n+  TERMKEY_SYM_SPACE,\n+  TERMKEY_SYM_DEL,\n+\n+  // Special keys\n+  TERMKEY_SYM_UP,\n+  TERMKEY_SYM_DOWN,\n+  TERMKEY_SYM_LEFT,\n+  TERMKEY_SYM_RIGHT,\n+  TERMKEY_SYM_BEGIN,\n+  TERMKEY_SYM_FIND,\n+  TERMKEY_SYM_INSERT,\n+  TERMKEY_SYM_DELETE,\n+  TERMKEY_SYM_SELECT,\n+  TERMKEY_SYM_PAGEUP,\n+  TERMKEY_SYM_PAGEDOWN,\n+  TERMKEY_SYM_HOME,\n+  TERMKEY_SYM_END,\n+\n+  // Special keys from terminfo\n+  TERMKEY_SYM_CANCEL,\n+  TERMKEY_SYM_CLEAR,\n+  TERMKEY_SYM_CLOSE,\n+  TERMKEY_SYM_COMMAND,\n+  TERMKEY_SYM_COPY,\n+  TERMKEY_SYM_EXIT,\n+  TERMKEY_SYM_HELP,\n+  TERMKEY_SYM_MARK,\n+  TERMKEY_SYM_MESSAGE,\n+  TERMKEY_SYM_MOVE,\n+  TERMKEY_SYM_OPEN,\n+  TERMKEY_SYM_OPTIONS,\n+  TERMKEY_SYM_PRINT,\n+  TERMKEY_SYM_REDO,\n+  TERMKEY_SYM_REFERENCE,\n+  TERMKEY_SYM_REFRESH,\n+  TERMKEY_SYM_REPLACE,\n+  TERMKEY_SYM_RESTART,\n+  TERMKEY_SYM_RESUME,\n+  TERMKEY_SYM_SAVE,\n+  TERMKEY_SYM_SUSPEND,\n+  TERMKEY_SYM_UNDO,\n+\n+  // Numeric keypad special keys\n+  TERMKEY_SYM_KP0,\n+  TERMKEY_SYM_KP1,\n+  TERMKEY_SYM_KP2,\n+  TERMKEY_SYM_KP3,\n+  TERMKEY_SYM_KP4,\n+  TERMKEY_SYM_KP5,\n+  TERMKEY_SYM_KP6,\n+  TERMKEY_SYM_KP7,\n+  TERMKEY_SYM_KP8,\n+  TERMKEY_SYM_KP9,\n+  TERMKEY_SYM_KPENTER,\n+  TERMKEY_SYM_KPPLUS,\n+  TERMKEY_SYM_KPMINUS,\n+  TERMKEY_SYM_KPMULT,\n+  TERMKEY_SYM_KPDIV,\n+  TERMKEY_SYM_KPCOMMA,\n+  TERMKEY_SYM_KPPERIOD,\n+  TERMKEY_SYM_KPEQUALS,\n+\n+  // et cetera ad nauseum\n+  TERMKEY_N_SYMS,\n+} TermKeySym;\n+\n+typedef enum {\n+  TERMKEY_TYPE_UNICODE,\n+  TERMKEY_TYPE_FUNCTION,\n+  TERMKEY_TYPE_KEYSYM,\n+  TERMKEY_TYPE_MOUSE,\n+  TERMKEY_TYPE_POSITION,\n+  TERMKEY_TYPE_MODEREPORT,\n+  TERMKEY_TYPE_DCS,\n+  TERMKEY_TYPE_OSC,\n+  // add other recognised types here\n+\n+  TERMKEY_TYPE_UNKNOWN_CSI = -1,\n+} TermKeyType;\n+\n+typedef enum {\n+  TERMKEY_MOUSE_UNKNOWN,\n+  TERMKEY_MOUSE_PRESS,\n+  TERMKEY_MOUSE_DRAG,\n+  TERMKEY_MOUSE_RELEASE,\n+} TermKeyMouseEvent;\n+\n+enum {\n+  TERMKEY_KEYMOD_SHIFT = 1 << 0,\n+  TERMKEY_KEYMOD_ALT   = 1 << 1,\n+  TERMKEY_KEYMOD_CTRL  = 1 << 2,\n+};\n+\n+typedef struct {\n+  const unsigned char *param;\n+  size_t length;\n+} TermKeyCsiParam;\n+\n+enum {\n+  TERMKEY_FLAG_NOINTERPRET = 1 << 0,  // Do not interpret C0//DEL codes if possible\n+  TERMKEY_FLAG_CONVERTKP   = 1 << 1,  // Convert KP codes to regular keypresses\n+  TERMKEY_FLAG_RAW         = 1 << 2,  // Input is raw bytes, not UTF-8\n+  TERMKEY_FLAG_UTF8        = 1 << 3,  // Input is definitely UTF-8\n+  TERMKEY_FLAG_NOTERMIOS   = 1 << 4,  // Do not make initial termios calls on construction\n+  TERMKEY_FLAG_SPACESYMBOL = 1 << 5,  // Sets TERMKEY_CANON_SPACESYMBOL\n+  TERMKEY_FLAG_CTRLC       = 1 << 6,  // Allow Ctrl-C to be read as normal, disabling SIGINT\n+  TERMKEY_FLAG_EINTR       = 1 << 7,  // Return ERROR on signal (EINTR) rather than retry\n+  TERMKEY_FLAG_NOSTART     = 1 << 8,  // Do not call termkey_start() in constructor\n+};\n+\n+enum {\n+  TERMKEY_CANON_SPACESYMBOL = 1 << 0,  // Space is symbolic rather than Unicode\n+  TERMKEY_CANON_DELBS       = 1 << 1,  // Del is converted to Backspace\n+};\n+\n+typedef struct {\n+  TermKeyType type;\n+  union {\n+    long codepoint;  // TERMKEY_TYPE_UNICODE\n+    int number;    // TERMKEY_TYPE_FUNCTION\n+    TermKeySym sym;       // TERMKEY_TYPE_KEYSYM\n+    char mouse[4];  // TERMKEY_TYPE_MOUSE\n+                    // opaque. see termkey_interpret_mouse\n+  } code;\n+\n+  int modifiers;\n+\n+  // Any Unicode character can be UTF-8 encoded in no more than 6 bytes, plus\n+  // terminating NUL\n+  char utf8[7];\n+} TermKeyKey;\n+\n+// Mostly-undocumented hooks for doing evil evil things\n+typedef const char *TermKey_Terminfo_Getstr_Hook(const char *name, const char *value, void *data);\n+\n+typedef enum {\n+  TERMKEY_FORMAT_LONGMOD     = 1 << 0,  // Shift-... instead of S-...\n+  TERMKEY_FORMAT_CARETCTRL   = 1 << 1,  // ^X instead of C-X\n+  TERMKEY_FORMAT_ALTISMETA   = 1 << 2,  // Meta- or M- instead of Alt- or A-\n+  TERMKEY_FORMAT_WRAPBRACKET = 1 << 3,  // Wrap special keys in brackets like <Escape>\n+  TERMKEY_FORMAT_SPACEMOD    = 1 << 4,  // M Foo instead of M-Foo\n+  TERMKEY_FORMAT_LOWERMOD    = 1 << 5,  // meta or m instead of Meta or M\n+  TERMKEY_FORMAT_LOWERSPACE  = 1 << 6,  // page down instead of PageDown\n+\n+  TERMKEY_FORMAT_MOUSE_POS   = 1 << 8,  // Include mouse position if relevant; @ col,line\n+} TermKeyFormat;\n+\n+// Some useful combinations\n+\n+#define TERMKEY_FORMAT_VIM (TermKeyFormat)(TERMKEY_FORMAT_ALTISMETA|TERMKEY_FORMAT_WRAPBRACKET)\n+\n+typedef enum {\n+  kKeyEncodingLegacy,  ///< Legacy key encoding\n+  kKeyEncodingKitty,   ///< Kitty keyboard protocol encoding\n+  kKeyEncodingXterm,   ///< Xterm's modifyOtherKeys encoding (XTMODKEYS)\n+} KeyEncoding;\n+\n+#define KEY_BUFFER_SIZE 0x1000\n+typedef struct {\n+  int in_fd;\n+  // Phases: -1=all 0=disabled 1=first-chunk 2=continue 3=last-chunk\n+  int8_t paste;\n+  bool ttimeout;\n+\n+  bool waiting_for_kkp_response;  ///< True if we are expecting to receive a response to a query for\n+                                  ///< Kitty keyboard protocol support\n+\n+  KeyEncoding key_encoding;       ///< The key encoding used by the terminal emulator\n+\n+  OptInt ttimeoutlen;\n+  TermKey *tk;\n+  TermKey_Terminfo_Getstr_Hook *tk_ti_hook_fn;  ///< libtermkey terminfo hook\n+  uv_timer_t timer_handle;\n+  Loop *loop;\n+  RStream read_stream;\n+  TUIData *tui_data;\n+  char key_buffer[KEY_BUFFER_SIZE];\n+  size_t key_buffer_len;\n+} TermInput;",
            "html_url": "https://github.com/neovim/neovim/pull/30047#discussion_r1720867804",
            "id": 1720867804,
            "in_reply_to_id": 1720847605,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5mklvc",
            "original_commit_id": "bd7d0ee7799bf52c4308b81ef0cfc14eb404f63c",
            "original_line": 217,
            "original_position": 217,
            "original_start_line": 189,
            "path": "src/nvim/tui/termkey_defs.h",
            "position": null,
            "pull_request_review_id": 2244182789,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30047",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1720867804/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-08-18T01:10:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1720867804",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30047#discussion_r1720868446"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30047"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1720868446"
                }
            },
            "author_association": "MEMBER",
            "body": "Why? I don't see it used in any other header.",
            "commit_id": "48a8eb9b07733b85b7a5bee8fd3765f2f79878f9",
            "created_at": "2024-08-18T01:18:40Z",
            "diff_hunk": "@@ -0,0 +1,228 @@\n+#pragma once\n+\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <unibilium.h>\n+#include <uv.h>\n+\n+#include \"nvim/event/defs.h\"\n+#include \"nvim/tui/tui_defs.h\"\n+#include \"nvim/types_defs.h\"\n+\n+typedef struct TermKey TermKey;\n+\n+typedef struct {\n+  TermKey *tk;\n+  int saved_string_id;\n+  char *saved_string;\n+} TermKeyCsi;\n+\n+typedef enum {\n+  TERMKEY_RES_NONE,\n+  TERMKEY_RES_KEY,\n+  TERMKEY_RES_EOF,\n+  TERMKEY_RES_AGAIN,\n+  TERMKEY_RES_ERROR,\n+} TermKeyResult;\n+\n+typedef enum {\n+  TERMKEY_SYM_UNKNOWN = -1,\n+  TERMKEY_SYM_NONE = 0,\n+\n+  // Special names in C0\n+  TERMKEY_SYM_BACKSPACE,\n+  TERMKEY_SYM_TAB,\n+  TERMKEY_SYM_ENTER,\n+  TERMKEY_SYM_ESCAPE,\n+\n+  // Special names in G0\n+  TERMKEY_SYM_SPACE,\n+  TERMKEY_SYM_DEL,\n+\n+  // Special keys\n+  TERMKEY_SYM_UP,\n+  TERMKEY_SYM_DOWN,\n+  TERMKEY_SYM_LEFT,\n+  TERMKEY_SYM_RIGHT,\n+  TERMKEY_SYM_BEGIN,\n+  TERMKEY_SYM_FIND,\n+  TERMKEY_SYM_INSERT,\n+  TERMKEY_SYM_DELETE,\n+  TERMKEY_SYM_SELECT,\n+  TERMKEY_SYM_PAGEUP,\n+  TERMKEY_SYM_PAGEDOWN,\n+  TERMKEY_SYM_HOME,\n+  TERMKEY_SYM_END,\n+\n+  // Special keys from terminfo\n+  TERMKEY_SYM_CANCEL,\n+  TERMKEY_SYM_CLEAR,\n+  TERMKEY_SYM_CLOSE,\n+  TERMKEY_SYM_COMMAND,\n+  TERMKEY_SYM_COPY,\n+  TERMKEY_SYM_EXIT,\n+  TERMKEY_SYM_HELP,\n+  TERMKEY_SYM_MARK,\n+  TERMKEY_SYM_MESSAGE,\n+  TERMKEY_SYM_MOVE,\n+  TERMKEY_SYM_OPEN,\n+  TERMKEY_SYM_OPTIONS,\n+  TERMKEY_SYM_PRINT,\n+  TERMKEY_SYM_REDO,\n+  TERMKEY_SYM_REFERENCE,\n+  TERMKEY_SYM_REFRESH,\n+  TERMKEY_SYM_REPLACE,\n+  TERMKEY_SYM_RESTART,\n+  TERMKEY_SYM_RESUME,\n+  TERMKEY_SYM_SAVE,\n+  TERMKEY_SYM_SUSPEND,\n+  TERMKEY_SYM_UNDO,\n+\n+  // Numeric keypad special keys\n+  TERMKEY_SYM_KP0,\n+  TERMKEY_SYM_KP1,\n+  TERMKEY_SYM_KP2,\n+  TERMKEY_SYM_KP3,\n+  TERMKEY_SYM_KP4,\n+  TERMKEY_SYM_KP5,\n+  TERMKEY_SYM_KP6,\n+  TERMKEY_SYM_KP7,\n+  TERMKEY_SYM_KP8,\n+  TERMKEY_SYM_KP9,\n+  TERMKEY_SYM_KPENTER,\n+  TERMKEY_SYM_KPPLUS,\n+  TERMKEY_SYM_KPMINUS,\n+  TERMKEY_SYM_KPMULT,\n+  TERMKEY_SYM_KPDIV,\n+  TERMKEY_SYM_KPCOMMA,\n+  TERMKEY_SYM_KPPERIOD,\n+  TERMKEY_SYM_KPEQUALS,\n+\n+  // et cetera ad nauseum\n+  TERMKEY_N_SYMS,\n+} TermKeySym;\n+\n+typedef enum {\n+  TERMKEY_TYPE_UNICODE,\n+  TERMKEY_TYPE_FUNCTION,\n+  TERMKEY_TYPE_KEYSYM,\n+  TERMKEY_TYPE_MOUSE,\n+  TERMKEY_TYPE_POSITION,\n+  TERMKEY_TYPE_MODEREPORT,\n+  TERMKEY_TYPE_DCS,\n+  TERMKEY_TYPE_OSC,\n+  // add other recognised types here\n+\n+  TERMKEY_TYPE_UNKNOWN_CSI = -1,\n+} TermKeyType;\n+\n+typedef enum {\n+  TERMKEY_MOUSE_UNKNOWN,\n+  TERMKEY_MOUSE_PRESS,\n+  TERMKEY_MOUSE_DRAG,\n+  TERMKEY_MOUSE_RELEASE,\n+} TermKeyMouseEvent;\n+\n+enum {\n+  TERMKEY_KEYMOD_SHIFT = 1 << 0,\n+  TERMKEY_KEYMOD_ALT   = 1 << 1,\n+  TERMKEY_KEYMOD_CTRL  = 1 << 2,\n+};\n+\n+typedef struct {\n+  const unsigned char *param;\n+  size_t length;\n+} TermKeyCsiParam;\n+\n+enum {\n+  TERMKEY_FLAG_NOINTERPRET = 1 << 0,  // Do not interpret C0//DEL codes if possible\n+  TERMKEY_FLAG_CONVERTKP   = 1 << 1,  // Convert KP codes to regular keypresses\n+  TERMKEY_FLAG_RAW         = 1 << 2,  // Input is raw bytes, not UTF-8\n+  TERMKEY_FLAG_UTF8        = 1 << 3,  // Input is definitely UTF-8\n+  TERMKEY_FLAG_NOTERMIOS   = 1 << 4,  // Do not make initial termios calls on construction\n+  TERMKEY_FLAG_SPACESYMBOL = 1 << 5,  // Sets TERMKEY_CANON_SPACESYMBOL\n+  TERMKEY_FLAG_CTRLC       = 1 << 6,  // Allow Ctrl-C to be read as normal, disabling SIGINT\n+  TERMKEY_FLAG_EINTR       = 1 << 7,  // Return ERROR on signal (EINTR) rather than retry\n+  TERMKEY_FLAG_NOSTART     = 1 << 8,  // Do not call termkey_start() in constructor\n+};\n+\n+enum {\n+  TERMKEY_CANON_SPACESYMBOL = 1 << 0,  // Space is symbolic rather than Unicode\n+  TERMKEY_CANON_DELBS       = 1 << 1,  // Del is converted to Backspace\n+};\n+\n+typedef struct {\n+  TermKeyType type;\n+  union {\n+    long codepoint;  // TERMKEY_TYPE_UNICODE\n+    int number;    // TERMKEY_TYPE_FUNCTION\n+    TermKeySym sym;       // TERMKEY_TYPE_KEYSYM\n+    char mouse[4];  // TERMKEY_TYPE_MOUSE\n+                    // opaque. see termkey_interpret_mouse\n+  } code;\n+\n+  int modifiers;\n+\n+  // Any Unicode character can be UTF-8 encoded in no more than 6 bytes, plus\n+  // terminating NUL\n+  char utf8[7];\n+} TermKeyKey;\n+\n+// Mostly-undocumented hooks for doing evil evil things\n+typedef const char *TermKey_Terminfo_Getstr_Hook(const char *name, const char *value, void *data);\n+\n+typedef enum {\n+  TERMKEY_FORMAT_LONGMOD     = 1 << 0,  // Shift-... instead of S-...\n+  TERMKEY_FORMAT_CARETCTRL   = 1 << 1,  // ^X instead of C-X\n+  TERMKEY_FORMAT_ALTISMETA   = 1 << 2,  // Meta- or M- instead of Alt- or A-\n+  TERMKEY_FORMAT_WRAPBRACKET = 1 << 3,  // Wrap special keys in brackets like <Escape>\n+  TERMKEY_FORMAT_SPACEMOD    = 1 << 4,  // M Foo instead of M-Foo\n+  TERMKEY_FORMAT_LOWERMOD    = 1 << 5,  // meta or m instead of Meta or M\n+  TERMKEY_FORMAT_LOWERSPACE  = 1 << 6,  // page down instead of PageDown\n+\n+  TERMKEY_FORMAT_MOUSE_POS   = 1 << 8,  // Include mouse position if relevant; @ col,line\n+} TermKeyFormat;\n+\n+// Some useful combinations\n+\n+#define TERMKEY_FORMAT_VIM (TermKeyFormat)(TERMKEY_FORMAT_ALTISMETA|TERMKEY_FORMAT_WRAPBRACKET)\n+\n+typedef enum {\n+  kKeyEncodingLegacy,  ///< Legacy key encoding\n+  kKeyEncodingKitty,   ///< Kitty keyboard protocol encoding\n+  kKeyEncodingXterm,   ///< Xterm's modifyOtherKeys encoding (XTMODKEYS)\n+} KeyEncoding;\n+\n+#define KEY_BUFFER_SIZE 0x1000\n+typedef struct {\n+  int in_fd;\n+  // Phases: -1=all 0=disabled 1=first-chunk 2=continue 3=last-chunk\n+  int8_t paste;\n+  bool ttimeout;\n+\n+  bool waiting_for_kkp_response;  ///< True if we are expecting to receive a response to a query for\n+                                  ///< Kitty keyboard protocol support\n+\n+  KeyEncoding key_encoding;       ///< The key encoding used by the terminal emulator\n+\n+  OptInt ttimeoutlen;\n+  TermKey *tk;\n+  TermKey_Terminfo_Getstr_Hook *tk_ti_hook_fn;  ///< libtermkey terminfo hook\n+  uv_timer_t timer_handle;\n+  Loop *loop;\n+  RStream read_stream;\n+  TUIData *tui_data;\n+  char key_buffer[KEY_BUFFER_SIZE];\n+  size_t key_buffer_len;\n+} TermInput;",
            "html_url": "https://github.com/neovim/neovim/pull/30047#discussion_r1720868446",
            "id": 1720868446,
            "in_reply_to_id": 1720847605,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5mkl5e",
            "original_commit_id": "bd7d0ee7799bf52c4308b81ef0cfc14eb404f63c",
            "original_line": 217,
            "original_position": 217,
            "original_start_line": 189,
            "path": "src/nvim/tui/termkey_defs.h",
            "position": null,
            "pull_request_review_id": 2244183303,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30047",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1720868446/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-08-18T01:18:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1720868446",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30047#discussion_r1720906072"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30047"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1720906072"
                }
            },
            "author_association": "MEMBER",
            "body": "Must've looked at the wrong place or something. Fixed.",
            "commit_id": "48a8eb9b07733b85b7a5bee8fd3765f2f79878f9",
            "created_at": "2024-08-18T06:45:43Z",
            "diff_hunk": "@@ -0,0 +1,228 @@\n+#pragma once\n+\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <unibilium.h>\n+#include <uv.h>\n+\n+#include \"nvim/event/defs.h\"\n+#include \"nvim/tui/tui_defs.h\"\n+#include \"nvim/types_defs.h\"\n+\n+typedef struct TermKey TermKey;\n+\n+typedef struct {\n+  TermKey *tk;\n+  int saved_string_id;\n+  char *saved_string;\n+} TermKeyCsi;\n+\n+typedef enum {\n+  TERMKEY_RES_NONE,\n+  TERMKEY_RES_KEY,\n+  TERMKEY_RES_EOF,\n+  TERMKEY_RES_AGAIN,\n+  TERMKEY_RES_ERROR,\n+} TermKeyResult;\n+\n+typedef enum {\n+  TERMKEY_SYM_UNKNOWN = -1,\n+  TERMKEY_SYM_NONE = 0,\n+\n+  // Special names in C0\n+  TERMKEY_SYM_BACKSPACE,\n+  TERMKEY_SYM_TAB,\n+  TERMKEY_SYM_ENTER,\n+  TERMKEY_SYM_ESCAPE,\n+\n+  // Special names in G0\n+  TERMKEY_SYM_SPACE,\n+  TERMKEY_SYM_DEL,\n+\n+  // Special keys\n+  TERMKEY_SYM_UP,\n+  TERMKEY_SYM_DOWN,\n+  TERMKEY_SYM_LEFT,\n+  TERMKEY_SYM_RIGHT,\n+  TERMKEY_SYM_BEGIN,\n+  TERMKEY_SYM_FIND,\n+  TERMKEY_SYM_INSERT,\n+  TERMKEY_SYM_DELETE,\n+  TERMKEY_SYM_SELECT,\n+  TERMKEY_SYM_PAGEUP,\n+  TERMKEY_SYM_PAGEDOWN,\n+  TERMKEY_SYM_HOME,\n+  TERMKEY_SYM_END,\n+\n+  // Special keys from terminfo\n+  TERMKEY_SYM_CANCEL,\n+  TERMKEY_SYM_CLEAR,\n+  TERMKEY_SYM_CLOSE,\n+  TERMKEY_SYM_COMMAND,\n+  TERMKEY_SYM_COPY,\n+  TERMKEY_SYM_EXIT,\n+  TERMKEY_SYM_HELP,\n+  TERMKEY_SYM_MARK,\n+  TERMKEY_SYM_MESSAGE,\n+  TERMKEY_SYM_MOVE,\n+  TERMKEY_SYM_OPEN,\n+  TERMKEY_SYM_OPTIONS,\n+  TERMKEY_SYM_PRINT,\n+  TERMKEY_SYM_REDO,\n+  TERMKEY_SYM_REFERENCE,\n+  TERMKEY_SYM_REFRESH,\n+  TERMKEY_SYM_REPLACE,\n+  TERMKEY_SYM_RESTART,\n+  TERMKEY_SYM_RESUME,\n+  TERMKEY_SYM_SAVE,\n+  TERMKEY_SYM_SUSPEND,\n+  TERMKEY_SYM_UNDO,\n+\n+  // Numeric keypad special keys\n+  TERMKEY_SYM_KP0,\n+  TERMKEY_SYM_KP1,\n+  TERMKEY_SYM_KP2,\n+  TERMKEY_SYM_KP3,\n+  TERMKEY_SYM_KP4,\n+  TERMKEY_SYM_KP5,\n+  TERMKEY_SYM_KP6,\n+  TERMKEY_SYM_KP7,\n+  TERMKEY_SYM_KP8,\n+  TERMKEY_SYM_KP9,\n+  TERMKEY_SYM_KPENTER,\n+  TERMKEY_SYM_KPPLUS,\n+  TERMKEY_SYM_KPMINUS,\n+  TERMKEY_SYM_KPMULT,\n+  TERMKEY_SYM_KPDIV,\n+  TERMKEY_SYM_KPCOMMA,\n+  TERMKEY_SYM_KPPERIOD,\n+  TERMKEY_SYM_KPEQUALS,\n+\n+  // et cetera ad nauseum\n+  TERMKEY_N_SYMS,\n+} TermKeySym;\n+\n+typedef enum {\n+  TERMKEY_TYPE_UNICODE,\n+  TERMKEY_TYPE_FUNCTION,\n+  TERMKEY_TYPE_KEYSYM,\n+  TERMKEY_TYPE_MOUSE,\n+  TERMKEY_TYPE_POSITION,\n+  TERMKEY_TYPE_MODEREPORT,\n+  TERMKEY_TYPE_DCS,\n+  TERMKEY_TYPE_OSC,\n+  // add other recognised types here\n+\n+  TERMKEY_TYPE_UNKNOWN_CSI = -1,\n+} TermKeyType;\n+\n+typedef enum {\n+  TERMKEY_MOUSE_UNKNOWN,\n+  TERMKEY_MOUSE_PRESS,\n+  TERMKEY_MOUSE_DRAG,\n+  TERMKEY_MOUSE_RELEASE,\n+} TermKeyMouseEvent;\n+\n+enum {\n+  TERMKEY_KEYMOD_SHIFT = 1 << 0,\n+  TERMKEY_KEYMOD_ALT   = 1 << 1,\n+  TERMKEY_KEYMOD_CTRL  = 1 << 2,\n+};\n+\n+typedef struct {\n+  const unsigned char *param;\n+  size_t length;\n+} TermKeyCsiParam;\n+\n+enum {\n+  TERMKEY_FLAG_NOINTERPRET = 1 << 0,  // Do not interpret C0//DEL codes if possible\n+  TERMKEY_FLAG_CONVERTKP   = 1 << 1,  // Convert KP codes to regular keypresses\n+  TERMKEY_FLAG_RAW         = 1 << 2,  // Input is raw bytes, not UTF-8\n+  TERMKEY_FLAG_UTF8        = 1 << 3,  // Input is definitely UTF-8\n+  TERMKEY_FLAG_NOTERMIOS   = 1 << 4,  // Do not make initial termios calls on construction\n+  TERMKEY_FLAG_SPACESYMBOL = 1 << 5,  // Sets TERMKEY_CANON_SPACESYMBOL\n+  TERMKEY_FLAG_CTRLC       = 1 << 6,  // Allow Ctrl-C to be read as normal, disabling SIGINT\n+  TERMKEY_FLAG_EINTR       = 1 << 7,  // Return ERROR on signal (EINTR) rather than retry\n+  TERMKEY_FLAG_NOSTART     = 1 << 8,  // Do not call termkey_start() in constructor\n+};\n+\n+enum {\n+  TERMKEY_CANON_SPACESYMBOL = 1 << 0,  // Space is symbolic rather than Unicode\n+  TERMKEY_CANON_DELBS       = 1 << 1,  // Del is converted to Backspace\n+};\n+\n+typedef struct {\n+  TermKeyType type;\n+  union {\n+    long codepoint;  // TERMKEY_TYPE_UNICODE\n+    int number;    // TERMKEY_TYPE_FUNCTION\n+    TermKeySym sym;       // TERMKEY_TYPE_KEYSYM\n+    char mouse[4];  // TERMKEY_TYPE_MOUSE\n+                    // opaque. see termkey_interpret_mouse\n+  } code;\n+\n+  int modifiers;\n+\n+  // Any Unicode character can be UTF-8 encoded in no more than 6 bytes, plus\n+  // terminating NUL\n+  char utf8[7];\n+} TermKeyKey;\n+\n+// Mostly-undocumented hooks for doing evil evil things\n+typedef const char *TermKey_Terminfo_Getstr_Hook(const char *name, const char *value, void *data);\n+\n+typedef enum {\n+  TERMKEY_FORMAT_LONGMOD     = 1 << 0,  // Shift-... instead of S-...\n+  TERMKEY_FORMAT_CARETCTRL   = 1 << 1,  // ^X instead of C-X\n+  TERMKEY_FORMAT_ALTISMETA   = 1 << 2,  // Meta- or M- instead of Alt- or A-\n+  TERMKEY_FORMAT_WRAPBRACKET = 1 << 3,  // Wrap special keys in brackets like <Escape>\n+  TERMKEY_FORMAT_SPACEMOD    = 1 << 4,  // M Foo instead of M-Foo\n+  TERMKEY_FORMAT_LOWERMOD    = 1 << 5,  // meta or m instead of Meta or M\n+  TERMKEY_FORMAT_LOWERSPACE  = 1 << 6,  // page down instead of PageDown\n+\n+  TERMKEY_FORMAT_MOUSE_POS   = 1 << 8,  // Include mouse position if relevant; @ col,line\n+} TermKeyFormat;\n+\n+// Some useful combinations\n+\n+#define TERMKEY_FORMAT_VIM (TermKeyFormat)(TERMKEY_FORMAT_ALTISMETA|TERMKEY_FORMAT_WRAPBRACKET)\n+\n+typedef enum {\n+  kKeyEncodingLegacy,  ///< Legacy key encoding\n+  kKeyEncodingKitty,   ///< Kitty keyboard protocol encoding\n+  kKeyEncodingXterm,   ///< Xterm's modifyOtherKeys encoding (XTMODKEYS)\n+} KeyEncoding;\n+\n+#define KEY_BUFFER_SIZE 0x1000\n+typedef struct {\n+  int in_fd;\n+  // Phases: -1=all 0=disabled 1=first-chunk 2=continue 3=last-chunk\n+  int8_t paste;\n+  bool ttimeout;\n+\n+  bool waiting_for_kkp_response;  ///< True if we are expecting to receive a response to a query for\n+                                  ///< Kitty keyboard protocol support\n+\n+  KeyEncoding key_encoding;       ///< The key encoding used by the terminal emulator\n+\n+  OptInt ttimeoutlen;\n+  TermKey *tk;\n+  TermKey_Terminfo_Getstr_Hook *tk_ti_hook_fn;  ///< libtermkey terminfo hook\n+  uv_timer_t timer_handle;\n+  Loop *loop;\n+  RStream read_stream;\n+  TUIData *tui_data;\n+  char key_buffer[KEY_BUFFER_SIZE];\n+  size_t key_buffer_len;\n+} TermInput;",
            "html_url": "https://github.com/neovim/neovim/pull/30047#discussion_r1720906072",
            "id": 1720906072,
            "in_reply_to_id": 1720847605,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5mkvFY",
            "original_commit_id": "bd7d0ee7799bf52c4308b81ef0cfc14eb404f63c",
            "original_line": 217,
            "original_position": 217,
            "original_start_line": 189,
            "path": "src/nvim/tui/termkey_defs.h",
            "position": null,
            "pull_request_review_id": 2244231490,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30047",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1720906072/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-08-18T06:45:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1720906072",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30047#discussion_r1721078127"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30047"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721078127"
                }
            },
            "author_association": "MEMBER",
            "body": "This cast is not needed anymore\r\n```suggestion\r\n  } else if (args[0] >= 0 && args[0] < NCSIFUNCS) {\r\n```",
            "commit_id": "48a8eb9b07733b85b7a5bee8fd3765f2f79878f9",
            "created_at": "2024-08-18T22:39:15Z",
            "diff_hunk": "@@ -131,17 +130,16 @@ static TermKeyResult handle_csifunc(TermKey *tk, TermKeyKey *key, int cmd, TermK\n     int mod = key->modifiers;\n     (*tk->method.emit_codepoint)(tk, args[2], key);\n     key->modifiers |= mod;\n-  }\n-  else if(args[0] >= 0 && args[0] < NCSIFUNCS) {\n+  } else if (args[0] >= 0 && (size_t)args[0] < NCSIFUNCS) {",
            "html_url": "https://github.com/neovim/neovim/pull/30047#discussion_r1721078127",
            "id": 1721078127,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5mlZFv",
            "original_commit_id": "40c6eef49c4a2925e7376b1f5f9bd319c2410ac9",
            "original_line": 133,
            "original_position": 137,
            "original_start_line": null,
            "path": "src/nvim/tui/driver-csi.c",
            "position": null,
            "pull_request_review_id": 2244424781,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30047",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721078127/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-08-18T22:39:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721078127",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30047#discussion_r1721078145"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30047"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721078145"
                }
            },
            "author_association": "MEMBER",
            "body": "ditto\r\n```suggestion\r\n  if (number >= NCSIFUNCS) {\r\n```",
            "commit_id": "48a8eb9b07733b85b7a5bee8fd3765f2f79878f9",
            "created_at": "2024-08-18T22:39:28Z",
            "diff_hunk": "@@ -153,7 +151,7 @@ static TermKeyResult handle_csifunc(TermKey *tk, TermKeyKey *key, int cmd, TermK\n \n static void register_csifunc(TermKeyType type, TermKeySym sym, int number)\n {\n-  if(number >= NCSIFUNCS) {\n+  if ((size_t)number >= NCSIFUNCS) {",
            "html_url": "https://github.com/neovim/neovim/pull/30047#discussion_r1721078145",
            "id": 1721078145,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5mlZGB",
            "original_commit_id": "40c6eef49c4a2925e7376b1f5f9bd319c2410ac9",
            "original_line": 154,
            "original_position": 158,
            "original_start_line": null,
            "path": "src/nvim/tui/driver-csi.c",
            "position": null,
            "pull_request_review_id": 2244424781,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30047",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721078145/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-08-18T22:39:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721078145",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30047#discussion_r1721078216"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30047"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721078216"
                }
            },
            "author_association": "MEMBER",
            "body": "ditto\r\n```suggestion\r\n  for (i = 0; i < NCSIFUNCS; i++) {\r\n```",
            "commit_id": "48a8eb9b07733b85b7a5bee8fd3765f2f79878f9",
            "created_at": "2024-08-18T22:39:42Z",
            "diff_hunk": "@@ -547,14 +559,15 @@ static int register_keys(void)\n {\n   int i;\n \n-  for(i = 0; i < 64; i++) {\n+  for (i = 0; i < 64; i++) {\n     csi_ss3s[i].sym = TERMKEY_SYM_UNKNOWN;\n-    ss3s[i].sym     = TERMKEY_SYM_UNKNOWN;\n+    ss3s[i].sym = TERMKEY_SYM_UNKNOWN;\n     ss3_kpalts[i] = 0;\n   }\n \n-  for(i = 0; i < NCSIFUNCS; i++)\n+  for (i = 0; (size_t)i < NCSIFUNCS; i++) {",
            "html_url": "https://github.com/neovim/neovim/pull/30047#discussion_r1721078216",
            "id": 1721078216,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5mlZHI",
            "original_commit_id": "40c6eef49c4a2925e7376b1f5f9bd319c2410ac9",
            "original_line": 568,
            "original_position": 654,
            "original_start_line": null,
            "path": "src/nvim/tui/driver-csi.c",
            "position": null,
            "pull_request_review_id": 2244424781,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30047",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721078216/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-08-18T22:39:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721078216",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30047#discussion_r1721079107"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30047"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721079107"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n```",
            "commit_id": "48a8eb9b07733b85b7a5bee8fd3765f2f79878f9",
            "created_at": "2024-08-18T22:45:04Z",
            "diff_hunk": "@@ -632,15 +646,18 @@ static int register_keys(void)\n   return 1;\n }\n \n-static void *new_driver(TermKey *tk, const char *term)\n+void *new_driver_csi(TermKey *tk, const char *term)\n {\n-  if(!keyinfo_initialised)\n-    if(!register_keys())\n+  if (!keyinfo_initialised) {\n+    if (!register_keys()) {\n       return NULL;\n+    }\n+  }\n \n-  TermKeyCsi *csi = malloc(sizeof *csi);\n-  if(!csi)\n+  TermKeyCsi *csi = xmalloc(sizeof *csi);\n+  if (!csi) {\n     return NULL;\n+  }",
            "html_url": "https://github.com/neovim/neovim/pull/30047#discussion_r1721079107",
            "id": 1721079107,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5mlZVD",
            "original_commit_id": "40c6eef49c4a2925e7376b1f5f9bd319c2410ac9",
            "original_line": 660,
            "original_position": 690,
            "original_start_line": 658,
            "path": "src/nvim/tui/driver-csi.c",
            "position": null,
            "pull_request_review_id": 2244425659,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30047",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721079107/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-08-18T22:52:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721079107",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30047#discussion_r1721079294"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30047"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721079294"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n```",
            "commit_id": "48a8eb9b07733b85b7a5bee8fd3765f2f79878f9",
            "created_at": "2024-08-18T22:46:22Z",
            "diff_hunk": "@@ -125,126 +119,116 @@ struct trie_node_key {\n \n struct trie_node_arr {\n   trie_nodetype type;\n-  unsigned char min, max; /* INCLUSIVE endpoints of the extent range */\n-  struct trie_node *arr[]; /* dynamic size at allocation time */\n+  unsigned char min, max;  // INCLUSIVE endpoints of the extent range\n+  struct trie_node *arr[];  // dynamic size at allocation time\n };\n \n-typedef struct {\n-  TermKey *tk;\n-\n-#ifdef HAVE_UNIBILIUM\n-  unibi_term *unibi;  /* only valid until first 'start' call */\n-#else\n-  char *term; /* only valid until first 'start' call */\n-#endif\n-\n-  struct trie_node *root;\n-\n-  char *start_string;\n-  char *stop_string;\n-} TermKeyTI;\n-\n static int insert_seq(TermKeyTI *ti, const char *seq, struct trie_node *node);\n \n static struct trie_node *new_node_key(TermKeyType type, TermKeySym sym, int modmask, int modset)\n {\n-  struct trie_node_key *n = malloc(sizeof(*n));\n-  if(!n)\n+  struct trie_node_key *n = xmalloc(sizeof(*n));\n+  if (!n) {\n     return NULL;\n+  }",
            "html_url": "https://github.com/neovim/neovim/pull/30047#discussion_r1721079294",
            "id": 1721079294,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5mlZX-",
            "original_commit_id": "40c6eef49c4a2925e7376b1f5f9bd319c2410ac9",
            "original_line": 133,
            "original_position": 156,
            "original_start_line": 131,
            "path": "src/nvim/tui/driver-ti.c",
            "position": null,
            "pull_request_review_id": 2244425659,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30047",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721079294/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-08-18T22:52:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721079294",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30047#discussion_r1721079332"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30047"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721079332"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n```",
            "commit_id": "48a8eb9b07733b85b7a5bee8fd3765f2f79878f9",
            "created_at": "2024-08-18T22:46:32Z",
            "diff_hunk": "@@ -125,126 +119,116 @@ struct trie_node_key {\n \n struct trie_node_arr {\n   trie_nodetype type;\n-  unsigned char min, max; /* INCLUSIVE endpoints of the extent range */\n-  struct trie_node *arr[]; /* dynamic size at allocation time */\n+  unsigned char min, max;  // INCLUSIVE endpoints of the extent range\n+  struct trie_node *arr[];  // dynamic size at allocation time\n };\n \n-typedef struct {\n-  TermKey *tk;\n-\n-#ifdef HAVE_UNIBILIUM\n-  unibi_term *unibi;  /* only valid until first 'start' call */\n-#else\n-  char *term; /* only valid until first 'start' call */\n-#endif\n-\n-  struct trie_node *root;\n-\n-  char *start_string;\n-  char *stop_string;\n-} TermKeyTI;\n-\n static int insert_seq(TermKeyTI *ti, const char *seq, struct trie_node *node);\n \n static struct trie_node *new_node_key(TermKeyType type, TermKeySym sym, int modmask, int modset)\n {\n-  struct trie_node_key *n = malloc(sizeof(*n));\n-  if(!n)\n+  struct trie_node_key *n = xmalloc(sizeof(*n));\n+  if (!n) {\n     return NULL;\n+  }\n \n   n->type = TYPE_KEY;\n \n   n->key.type = type;\n-  n->key.sym  = sym;\n+  n->key.sym = sym;\n   n->key.modifier_mask = modmask;\n-  n->key.modifier_set  = modset;\n+  n->key.modifier_set = modset;\n \n-  return (struct trie_node*)n;\n+  return (struct trie_node *)n;\n }\n \n static struct trie_node *new_node_arr(unsigned char min, unsigned char max)\n {\n-  struct trie_node_arr *n = malloc(sizeof(*n) + ((int)max-min+1) * sizeof(n->arr[0]));\n-  if(!n)\n+  struct trie_node_arr *n = xmalloc(sizeof(*n) + (max - min + 1) * sizeof(n->arr[0]));\n+  if (!n) {\n     return NULL;\n+  }",
            "html_url": "https://github.com/neovim/neovim/pull/30047#discussion_r1721079332",
            "id": 1721079332,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5mlZYk",
            "original_commit_id": "40c6eef49c4a2925e7376b1f5f9bd319c2410ac9",
            "original_line": 150,
            "original_position": 178,
            "original_start_line": 148,
            "path": "src/nvim/tui/driver-ti.c",
            "position": null,
            "pull_request_review_id": 2244425659,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30047",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721079332/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-08-18T22:52:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721079332",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30047#discussion_r1721079432"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30047"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721079432"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n```",
            "commit_id": "48a8eb9b07733b85b7a5bee8fd3765f2f79878f9",
            "created_at": "2024-08-18T22:47:06Z",
            "diff_hunk": "@@ -278,288 +261,260 @@ static int load_terminfo(TermKeyTI *ti)\n {\n   int i;\n \n-#ifdef HAVE_UNIBILIUM\n   unibi_term *unibi = ti->unibi;\n-#else\n-  {\n-    int err;\n-\n-    /* Have to cast away the const. But it's OK - we know terminfo won't really\n-    * modify term */\n-    if(setupterm((char*)ti->term, 1, &err) != OK)\n-      return 0;\n-  }\n-#endif\n \n   ti->root = new_node_arr(0, 0xff);\n-  if(!ti->root)\n+  if (!ti->root) {\n     return 0;\n+  }\n \n-  /* First the regular key strings\n-   */\n-  for(i = 0; funcs[i].funcname; i++) {\n+  // First the regular key strings\n+  for (i = 0; funcs[i].funcname; i++) {\n     char name[MAX_FUNCNAME + 5 + 1];\n \n-    sprintf(name, \"key_%s\", funcs[i].funcname);\n-    if(!try_load_terminfo_key(ti, name, &(struct keyinfo){\n-          .type = funcs[i].type,\n-          .sym  = funcs[i].sym,\n-          .modifier_mask = funcs[i].mods,\n-          .modifier_set  = funcs[i].mods,\n-      }))\n+    sprintf(name, \"key_%s\", funcs[i].funcname);  // NOLINT(runtime/printf)\n+    if (!try_load_terminfo_key(ti, name, &(struct keyinfo){\n+      .type = funcs[i].type,\n+      .sym = funcs[i].sym,\n+      .modifier_mask = funcs[i].mods,\n+      .modifier_set = funcs[i].mods,\n+    })) {\n       continue;\n+    }\n \n-    /* Maybe it has a shifted version */\n-    sprintf(name, \"key_s%s\", funcs[i].funcname);\n+    // Maybe it has a shifted version\n+    sprintf(name, \"key_s%s\", funcs[i].funcname);  // NOLINT(runtime/printf)\n     try_load_terminfo_key(ti, name, &(struct keyinfo){\n-        .type = funcs[i].type,\n-        .sym  = funcs[i].sym,\n-        .modifier_mask = funcs[i].mods | TERMKEY_KEYMOD_SHIFT,\n-        .modifier_set  = funcs[i].mods | TERMKEY_KEYMOD_SHIFT,\n+      .type = funcs[i].type,\n+      .sym = funcs[i].sym,\n+      .modifier_mask = funcs[i].mods | TERMKEY_KEYMOD_SHIFT,\n+      .modifier_set = funcs[i].mods | TERMKEY_KEYMOD_SHIFT,\n     });\n   }\n \n-  /* Now the F<digit> keys\n-   */\n-  for(i = 1; i < 255; i++) {\n+  // Now the F<digit> keys\n+  for (i = 1; i < 255; i++) {\n     char name[9];\n-    sprintf(name, \"key_f%d\", i);\n-    if(!try_load_terminfo_key(ti, name, &(struct keyinfo){\n-          .type = TERMKEY_TYPE_FUNCTION,\n-          .sym  = i,\n-          .modifier_mask = 0,\n-          .modifier_set  = 0,\n-      }))\n+    sprintf(name, \"key_f%d\", i);  // NOLINT(runtime/printf)\n+    if (!try_load_terminfo_key(ti, name, &(struct keyinfo){\n+      .type = TERMKEY_TYPE_FUNCTION,\n+      .sym = i,\n+      .modifier_mask = 0,\n+      .modifier_set = 0,\n+    })) {\n       break;\n+    }\n   }\n \n-  /* Finally mouse mode */\n+  // Finally mouse mode\n   {\n     const char *value = NULL;\n \n-#ifdef HAVE_UNIBILIUM\n-    if(ti->unibi)\n+    if (ti->unibi) {\n       value = unibi_get_str_by_name(ti->unibi, \"key_mouse\");\n-#else\n-    if(ti->term)\n-      value = tigetstr(\"key_mouse\");\n-#endif\n+    }\n \n-    if(ti->tk->ti_getstr_hook)\n+    if (ti->tk->ti_getstr_hook) {\n       value = (ti->tk->ti_getstr_hook)(\"key_mouse\", value, ti->tk->ti_getstr_hook_data);\n+    }\n \n-    /* Some terminfos (e.g. xterm-1006) claim a different key_mouse that won't\n-     * give X10 encoding. We'll only accept this if it's exactly \"\\e[M\"\n-     */\n-    if(value && streq(value, \"\\x1b[M\")) {\n+    // Some terminfos (e.g. xterm-1006) claim a different key_mouse that won't\n+    // give X10 encoding. We'll only accept this if it's exactly \"\\e[M\"\n+    if (value && streq(value, \"\\x1b[M\")) {\n       struct trie_node *node = new_node_key(TERMKEY_TYPE_MOUSE, 0, 0, 0);\n       insert_seq(ti, value, node);\n     }\n   }\n \n-  /* Take copies of these terminfo strings, in case we build multiple termkey\n-   * instances for multiple different termtypes, and it's different by the\n-   * time we want to use it\n-   */\n-#ifdef HAVE_UNIBILIUM\n-  const char *keypad_xmit = unibi ?\n-    unibi_get_str(unibi, unibi_keypad_xmit) :\n-    NULL;\n-#endif\n+  // Take copies of these terminfo strings, in case we build multiple termkey\n+  // instances for multiple different termtypes, and it's different by the\n+  // time we want to use it\n+  const char *keypad_xmit = unibi\n+                            ? unibi_get_str(unibi, unibi_keypad_xmit)\n+                            : NULL;\n \n-  if(keypad_xmit)\n-    ti->start_string = strdup(keypad_xmit);\n-  else\n+  if (keypad_xmit) {\n+    ti->start_string = xstrdup(keypad_xmit);\n+  } else {\n     ti->start_string = NULL;\n+  }\n \n-#ifdef HAVE_UNIBILIUM\n-  const char *keypad_local = unibi ?\n-    unibi_get_str(unibi, unibi_keypad_local) :\n-    NULL;\n-#endif\n+  const char *keypad_local = unibi\n+                             ? unibi_get_str(unibi, unibi_keypad_local)\n+                             : NULL;\n \n-  if(keypad_local)\n-    ti->stop_string = strdup(keypad_local);\n-  else\n+  if (keypad_local) {\n+    ti->stop_string = xstrdup(keypad_local);\n+  } else {\n     ti->stop_string = NULL;\n+  }\n \n-#ifdef HAVE_UNIBILIUM\n-  if(unibi)\n+  if (unibi) {\n     unibi_destroy(unibi);\n+  }\n \n   ti->unibi = NULL;\n-#else\n-  if(ti->term)\n-    free(ti->term);\n-\n-  ti->term = NULL;\n-#endif\n \n   ti->root = compress_trie(ti->root);\n \n   return 1;\n }\n \n-static void *new_driver(TermKey *tk, const char *term)\n+void *new_driver_ti(TermKey *tk, const char *term)\n {\n-  TermKeyTI *ti = malloc(sizeof *ti);\n-  if(!ti)\n+  TermKeyTI *ti = xmalloc(sizeof *ti);\n+  if (!ti) {\n     return NULL;\n+  }",
            "html_url": "https://github.com/neovim/neovim/pull/30047#discussion_r1721079432",
            "id": 1721079432,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5mlZaI",
            "original_commit_id": "40c6eef49c4a2925e7376b1f5f9bd319c2410ac9",
            "original_line": 368,
            "original_position": 526,
            "original_start_line": 366,
            "path": "src/nvim/tui/driver-ti.c",
            "position": null,
            "pull_request_review_id": 2244425659,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30047",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721079432/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-08-18T22:52:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721079432",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30047#discussion_r1721079754"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30047"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721079754"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n```",
            "commit_id": "48a8eb9b07733b85b7a5bee8fd3765f2f79878f9",
            "created_at": "2024-08-18T22:49:04Z",
            "diff_hunk": "@@ -0,0 +1,1333 @@\n+#include <ctype.h>\n+#include <errno.h>\n+#include <stdbool.h>\n+#include <stdio.h>\n+#include <string.h>\n+\n+#include \"nvim/mbyte.h\"\n+#include \"nvim/memory.h\"\n+#include \"nvim/tui/driver-csi.h\"\n+#include \"nvim/tui/driver-ti.h\"\n+#include \"nvim/tui/termkey-internal.h\"\n+#include \"nvim/tui/termkey.h\"\n+#include \"nvim/tui/termkey_defs.h\"\n+\n+#ifndef _WIN32\n+# include <poll.h>\n+# include <strings.h>\n+# include <unistd.h>\n+#else\n+# include <io.h>\n+#endif\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"tui/termkey.c.generated.h\"\n+#endif\n+\n+#ifdef _MSC_VER\n+# define strcaseeq(a, b) (_stricmp(a, b) == 0)\n+#else\n+# define strcaseeq(a, b) (strcasecmp(a, b) == 0)\n+#endif\n+\n+struct TermKeyDriver termkey_driver_ti = {\n+  .name = \"terminfo\",\n+\n+  .new_driver = new_driver_ti,\n+  .free_driver = free_driver_ti,\n+\n+  .start_driver = start_driver_ti,\n+  .stop_driver = stop_driver_ti,\n+\n+  .peekkey = peekkey_ti,\n+};\n+\n+struct TermKeyDriver termkey_driver_csi = {\n+  .name = \"CSI\",\n+\n+  .new_driver = new_driver_csi,\n+  .free_driver = free_driver_csi,\n+\n+  .peekkey = peekkey_csi,\n+};\n+\n+static struct TermKeyDriver *drivers[] = {\n+  &termkey_driver_ti,\n+  &termkey_driver_csi,\n+  NULL,\n+};\n+\n+static struct {\n+  TermKeySym sym;\n+  const char *name;\n+} keynames[] = {\n+  { TERMKEY_SYM_NONE,      \"NONE\" },\n+  { TERMKEY_SYM_BACKSPACE, \"Backspace\" },\n+  { TERMKEY_SYM_TAB,       \"Tab\" },\n+  { TERMKEY_SYM_ENTER,     \"Enter\" },\n+  { TERMKEY_SYM_ESCAPE,    \"Escape\" },\n+  { TERMKEY_SYM_SPACE,     \"Space\" },\n+  { TERMKEY_SYM_DEL,       \"DEL\" },\n+  { TERMKEY_SYM_UP,        \"Up\" },\n+  { TERMKEY_SYM_DOWN,      \"Down\" },\n+  { TERMKEY_SYM_LEFT,      \"Left\" },\n+  { TERMKEY_SYM_RIGHT,     \"Right\" },\n+  { TERMKEY_SYM_BEGIN,     \"Begin\" },\n+  { TERMKEY_SYM_FIND,      \"Find\" },\n+  { TERMKEY_SYM_INSERT,    \"Insert\" },\n+  { TERMKEY_SYM_DELETE,    \"Delete\" },\n+  { TERMKEY_SYM_SELECT,    \"Select\" },\n+  { TERMKEY_SYM_PAGEUP,    \"PageUp\" },\n+  { TERMKEY_SYM_PAGEDOWN,  \"PageDown\" },\n+  { TERMKEY_SYM_HOME,      \"Home\" },\n+  { TERMKEY_SYM_END,       \"End\" },\n+  { TERMKEY_SYM_CANCEL,    \"Cancel\" },\n+  { TERMKEY_SYM_CLEAR,     \"Clear\" },\n+  { TERMKEY_SYM_CLOSE,     \"Close\" },\n+  { TERMKEY_SYM_COMMAND,   \"Command\" },\n+  { TERMKEY_SYM_COPY,      \"Copy\" },\n+  { TERMKEY_SYM_EXIT,      \"Exit\" },\n+  { TERMKEY_SYM_HELP,      \"Help\" },\n+  { TERMKEY_SYM_MARK,      \"Mark\" },\n+  { TERMKEY_SYM_MESSAGE,   \"Message\" },\n+  { TERMKEY_SYM_MOVE,      \"Move\" },\n+  { TERMKEY_SYM_OPEN,      \"Open\" },\n+  { TERMKEY_SYM_OPTIONS,   \"Options\" },\n+  { TERMKEY_SYM_PRINT,     \"Print\" },\n+  { TERMKEY_SYM_REDO,      \"Redo\" },\n+  { TERMKEY_SYM_REFERENCE, \"Reference\" },\n+  { TERMKEY_SYM_REFRESH,   \"Refresh\" },\n+  { TERMKEY_SYM_REPLACE,   \"Replace\" },\n+  { TERMKEY_SYM_RESTART,   \"Restart\" },\n+  { TERMKEY_SYM_RESUME,    \"Resume\" },\n+  { TERMKEY_SYM_SAVE,      \"Save\" },\n+  { TERMKEY_SYM_SUSPEND,   \"Suspend\" },\n+  { TERMKEY_SYM_UNDO,      \"Undo\" },\n+  { TERMKEY_SYM_KP0,       \"KP0\" },\n+  { TERMKEY_SYM_KP1,       \"KP1\" },\n+  { TERMKEY_SYM_KP2,       \"KP2\" },\n+  { TERMKEY_SYM_KP3,       \"KP3\" },\n+  { TERMKEY_SYM_KP4,       \"KP4\" },\n+  { TERMKEY_SYM_KP5,       \"KP5\" },\n+  { TERMKEY_SYM_KP6,       \"KP6\" },\n+  { TERMKEY_SYM_KP7,       \"KP7\" },\n+  { TERMKEY_SYM_KP8,       \"KP8\" },\n+  { TERMKEY_SYM_KP9,       \"KP9\" },\n+  { TERMKEY_SYM_KPENTER,   \"KPEnter\" },\n+  { TERMKEY_SYM_KPPLUS,    \"KPPlus\" },\n+  { TERMKEY_SYM_KPMINUS,   \"KPMinus\" },\n+  { TERMKEY_SYM_KPMULT,    \"KPMult\" },\n+  { TERMKEY_SYM_KPDIV,     \"KPDiv\" },\n+  { TERMKEY_SYM_KPCOMMA,   \"KPComma\" },\n+  { TERMKEY_SYM_KPPERIOD,  \"KPPeriod\" },\n+  { TERMKEY_SYM_KPEQUALS,  \"KPEquals\" },\n+  { 0, NULL },\n+};\n+\n+// Mouse event names\n+static const char *evnames[] = { \"Unknown\", \"Press\", \"Drag\", \"Release\" };\n+\n+#define CHARAT(i) (tk->buffer[tk->buffstart + (i)])\n+\n+#ifdef DEBUG\n+// Some internal debugging functions\n+\n+static void print_buffer(TermKey *tk)\n+{\n+  int i;\n+  for (i = 0; i < tk->buffcount && i < 20; i++) {\n+    fprintf(stderr, \"%02x \", CHARAT(i));\n+  }\n+  if (tk->buffcount > 20) {\n+    fprintf(stderr, \"...\");\n+  }\n+}\n+\n+static void print_key(TermKey *tk, TermKeyKey *key)\n+{\n+  switch (key->type) {\n+  case TERMKEY_TYPE_UNICODE:\n+    fprintf(stderr, \"Unicode codepoint=U+%04lx utf8='%s'\", key->code.codepoint, key->utf8);\n+    break;\n+  case TERMKEY_TYPE_FUNCTION:\n+    fprintf(stderr, \"Function F%d\", key->code.number);\n+    break;\n+  case TERMKEY_TYPE_KEYSYM:\n+    fprintf(stderr, \"Keysym sym=%d(%s)\", key->code.sym, termkey_get_keyname(tk, key->code.sym));\n+    break;\n+  case TERMKEY_TYPE_MOUSE: {\n+    TermKeyMouseEvent ev;\n+    int button, line, col;\n+    termkey_interpret_mouse(tk, key, &ev, &button, &line, &col);\n+    fprintf(stderr, \"Mouse ev=%d button=%d pos=(%d,%d)\\n\", ev, button, line, col);\n+  }\n+  break;\n+  case TERMKEY_TYPE_POSITION: {\n+    int line, col;\n+    termkey_interpret_position(tk, key, &line, &col);\n+    fprintf(stderr, \"Position report pos=(%d,%d)\\n\", line, col);\n+  }\n+  break;\n+  case TERMKEY_TYPE_MODEREPORT: {\n+    int initial, mode, value;\n+    termkey_interpret_modereport(tk, key, &initial, &mode, &value);\n+    fprintf(stderr, \"Mode report mode=%s %d val=%d\\n\", initial == '?' ? \"DEC\" : \"ANSI\", mode,\n+            value);\n+  }\n+  break;\n+  case TERMKEY_TYPE_DCS:\n+    fprintf(stderr, \"Device Control String\");\n+    break;\n+  case TERMKEY_TYPE_OSC:\n+    fprintf(stderr, \"Operating System Control\");\n+    break;\n+  case TERMKEY_TYPE_UNKNOWN_CSI:\n+    fprintf(stderr, \"unknown CSI\\n\");\n+    break;\n+  }\n+\n+  int m = key->modifiers;\n+  fprintf(stderr, \" mod=%s%s%s+%02x\",\n+          (m & TERMKEY_KEYMOD_CTRL ? \"C\" : \"\"),\n+          (m & TERMKEY_KEYMOD_ALT ? \"A\" : \"\"),\n+          (m & TERMKEY_KEYMOD_SHIFT ? \"S\" : \"\"),\n+          m & ~(TERMKEY_KEYMOD_CTRL|TERMKEY_KEYMOD_ALT|TERMKEY_KEYMOD_SHIFT));\n+}\n+\n+static const char *res2str(TermKeyResult res)\n+{\n+  static char errorbuffer[256];\n+\n+  switch (res) {\n+  case TERMKEY_RES_KEY:\n+    return \"TERMKEY_RES_KEY\";\n+  case TERMKEY_RES_EOF:\n+    return \"TERMKEY_RES_EOF\";\n+  case TERMKEY_RES_AGAIN:\n+    return \"TERMKEY_RES_AGAIN\";\n+  case TERMKEY_RES_NONE:\n+    return \"TERMKEY_RES_NONE\";\n+  case TERMKEY_RES_ERROR:\n+    snprintf(errorbuffer, sizeof errorbuffer, \"TERMKEY_RES_ERROR(errno=%d)\\n\", errno);\n+    return (const char *)errorbuffer;\n+  }\n+\n+  return \"unknown\";\n+}\n+#endif\n+\n+TermKeyResult termkey_interpret_string(TermKey *tk, const TermKeyKey *key, const char **strp)\n+{\n+  struct TermKeyDriverNode *p;\n+  for (p = tk->drivers; p; p = p->next) {\n+    if (p->driver == &termkey_driver_csi) {\n+      break;\n+    }\n+  }\n+\n+  if (!p) {\n+    return TERMKEY_RES_NONE;\n+  }\n+\n+  if (key->type != TERMKEY_TYPE_DCS\n+      && key->type != TERMKEY_TYPE_OSC) {\n+    return TERMKEY_RES_NONE;\n+  }\n+\n+  TermKeyCsi *csi = p->info;\n+\n+  if (csi->saved_string_id != key->code.number) {\n+    return TERMKEY_RES_NONE;\n+  }\n+\n+  *strp = csi->saved_string;\n+\n+  return TERMKEY_RES_KEY;\n+}\n+\n+/// Similar to snprintf(str, size, \"%s\", src) except it turns CamelCase into\n+/// space separated values\n+static int snprint_cameltospaces(char *str, size_t size, const char *src)\n+{\n+  int prev_lower = 0;\n+  size_t l = 0;\n+  while (*src && l < size - 1) {\n+    if (isupper(*src) && prev_lower) {\n+      if (str) {\n+        str[l++] = ' ';\n+      }\n+      if (l >= size - 1) {\n+        break;\n+      }\n+    }\n+    prev_lower = islower(*src);\n+    str[l++] = (char)tolower(*src++);\n+  }\n+  str[l] = 0;\n+  // For consistency with snprintf, return the number of bytes that would have\n+  // been written, excluding '\\0'\n+  while (*src) {\n+    if (isupper(*src) && prev_lower) {\n+      l++;\n+    }\n+    prev_lower = islower(*src);\n+    src++; l++;\n+  }\n+  return (int)l;\n+}\n+\n+/// Similar to strcmp(str, strcamel, n) except that:\n+///    it compares CamelCase in strcamel with space separated values in str;\n+///    it takes char**s and updates them\n+/// n counts bytes of strcamel, not str\n+static int strpncmp_camel(const char **strp, const char **strcamelp, size_t n)\n+{\n+  const char *str = *strp, *strcamel = *strcamelp;\n+  int prev_lower = 0;\n+\n+  for (; (*str || *strcamel) && n; n--) {\n+    char b = (char)tolower(*strcamel);\n+    if (isupper(*strcamel) && prev_lower) {\n+      if (*str != ' ') {\n+        break;\n+      }\n+      str++;\n+      if (*str != b) {\n+        break;\n+      }\n+    } else if (*str != b) {\n+      break;\n+    }\n+\n+    prev_lower = islower(*strcamel);\n+\n+    str++;\n+    strcamel++;\n+  }\n+\n+  *strp = str;\n+  *strcamelp = strcamel;\n+  return *str - *strcamel;\n+}\n+\n+static TermKey *termkey_alloc(void)\n+{\n+  TermKey *tk = xmalloc(sizeof(TermKey));\n+  if (!tk) {\n+    return NULL;\n+  }",
            "html_url": "https://github.com/neovim/neovim/pull/30047#discussion_r1721079754",
            "id": 1721079754,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5mlZfK",
            "original_commit_id": "40c6eef49c4a2925e7376b1f5f9bd319c2410ac9",
            "original_line": 318,
            "original_position": 318,
            "original_start_line": 316,
            "path": "src/nvim/tui/termkey.c",
            "position": null,
            "pull_request_review_id": 2244425659,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30047",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721079754/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-08-18T22:52:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721079754",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30047#discussion_r1721079853"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30047"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721079853"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n```",
            "commit_id": "48a8eb9b07733b85b7a5bee8fd3765f2f79878f9",
            "created_at": "2024-08-18T22:49:26Z",
            "diff_hunk": "@@ -0,0 +1,1333 @@\n+#include <ctype.h>\n+#include <errno.h>\n+#include <stdbool.h>\n+#include <stdio.h>\n+#include <string.h>\n+\n+#include \"nvim/mbyte.h\"\n+#include \"nvim/memory.h\"\n+#include \"nvim/tui/driver-csi.h\"\n+#include \"nvim/tui/driver-ti.h\"\n+#include \"nvim/tui/termkey-internal.h\"\n+#include \"nvim/tui/termkey.h\"\n+#include \"nvim/tui/termkey_defs.h\"\n+\n+#ifndef _WIN32\n+# include <poll.h>\n+# include <strings.h>\n+# include <unistd.h>\n+#else\n+# include <io.h>\n+#endif\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"tui/termkey.c.generated.h\"\n+#endif\n+\n+#ifdef _MSC_VER\n+# define strcaseeq(a, b) (_stricmp(a, b) == 0)\n+#else\n+# define strcaseeq(a, b) (strcasecmp(a, b) == 0)\n+#endif\n+\n+struct TermKeyDriver termkey_driver_ti = {\n+  .name = \"terminfo\",\n+\n+  .new_driver = new_driver_ti,\n+  .free_driver = free_driver_ti,\n+\n+  .start_driver = start_driver_ti,\n+  .stop_driver = stop_driver_ti,\n+\n+  .peekkey = peekkey_ti,\n+};\n+\n+struct TermKeyDriver termkey_driver_csi = {\n+  .name = \"CSI\",\n+\n+  .new_driver = new_driver_csi,\n+  .free_driver = free_driver_csi,\n+\n+  .peekkey = peekkey_csi,\n+};\n+\n+static struct TermKeyDriver *drivers[] = {\n+  &termkey_driver_ti,\n+  &termkey_driver_csi,\n+  NULL,\n+};\n+\n+static struct {\n+  TermKeySym sym;\n+  const char *name;\n+} keynames[] = {\n+  { TERMKEY_SYM_NONE,      \"NONE\" },\n+  { TERMKEY_SYM_BACKSPACE, \"Backspace\" },\n+  { TERMKEY_SYM_TAB,       \"Tab\" },\n+  { TERMKEY_SYM_ENTER,     \"Enter\" },\n+  { TERMKEY_SYM_ESCAPE,    \"Escape\" },\n+  { TERMKEY_SYM_SPACE,     \"Space\" },\n+  { TERMKEY_SYM_DEL,       \"DEL\" },\n+  { TERMKEY_SYM_UP,        \"Up\" },\n+  { TERMKEY_SYM_DOWN,      \"Down\" },\n+  { TERMKEY_SYM_LEFT,      \"Left\" },\n+  { TERMKEY_SYM_RIGHT,     \"Right\" },\n+  { TERMKEY_SYM_BEGIN,     \"Begin\" },\n+  { TERMKEY_SYM_FIND,      \"Find\" },\n+  { TERMKEY_SYM_INSERT,    \"Insert\" },\n+  { TERMKEY_SYM_DELETE,    \"Delete\" },\n+  { TERMKEY_SYM_SELECT,    \"Select\" },\n+  { TERMKEY_SYM_PAGEUP,    \"PageUp\" },\n+  { TERMKEY_SYM_PAGEDOWN,  \"PageDown\" },\n+  { TERMKEY_SYM_HOME,      \"Home\" },\n+  { TERMKEY_SYM_END,       \"End\" },\n+  { TERMKEY_SYM_CANCEL,    \"Cancel\" },\n+  { TERMKEY_SYM_CLEAR,     \"Clear\" },\n+  { TERMKEY_SYM_CLOSE,     \"Close\" },\n+  { TERMKEY_SYM_COMMAND,   \"Command\" },\n+  { TERMKEY_SYM_COPY,      \"Copy\" },\n+  { TERMKEY_SYM_EXIT,      \"Exit\" },\n+  { TERMKEY_SYM_HELP,      \"Help\" },\n+  { TERMKEY_SYM_MARK,      \"Mark\" },\n+  { TERMKEY_SYM_MESSAGE,   \"Message\" },\n+  { TERMKEY_SYM_MOVE,      \"Move\" },\n+  { TERMKEY_SYM_OPEN,      \"Open\" },\n+  { TERMKEY_SYM_OPTIONS,   \"Options\" },\n+  { TERMKEY_SYM_PRINT,     \"Print\" },\n+  { TERMKEY_SYM_REDO,      \"Redo\" },\n+  { TERMKEY_SYM_REFERENCE, \"Reference\" },\n+  { TERMKEY_SYM_REFRESH,   \"Refresh\" },\n+  { TERMKEY_SYM_REPLACE,   \"Replace\" },\n+  { TERMKEY_SYM_RESTART,   \"Restart\" },\n+  { TERMKEY_SYM_RESUME,    \"Resume\" },\n+  { TERMKEY_SYM_SAVE,      \"Save\" },\n+  { TERMKEY_SYM_SUSPEND,   \"Suspend\" },\n+  { TERMKEY_SYM_UNDO,      \"Undo\" },\n+  { TERMKEY_SYM_KP0,       \"KP0\" },\n+  { TERMKEY_SYM_KP1,       \"KP1\" },\n+  { TERMKEY_SYM_KP2,       \"KP2\" },\n+  { TERMKEY_SYM_KP3,       \"KP3\" },\n+  { TERMKEY_SYM_KP4,       \"KP4\" },\n+  { TERMKEY_SYM_KP5,       \"KP5\" },\n+  { TERMKEY_SYM_KP6,       \"KP6\" },\n+  { TERMKEY_SYM_KP7,       \"KP7\" },\n+  { TERMKEY_SYM_KP8,       \"KP8\" },\n+  { TERMKEY_SYM_KP9,       \"KP9\" },\n+  { TERMKEY_SYM_KPENTER,   \"KPEnter\" },\n+  { TERMKEY_SYM_KPPLUS,    \"KPPlus\" },\n+  { TERMKEY_SYM_KPMINUS,   \"KPMinus\" },\n+  { TERMKEY_SYM_KPMULT,    \"KPMult\" },\n+  { TERMKEY_SYM_KPDIV,     \"KPDiv\" },\n+  { TERMKEY_SYM_KPCOMMA,   \"KPComma\" },\n+  { TERMKEY_SYM_KPPERIOD,  \"KPPeriod\" },\n+  { TERMKEY_SYM_KPEQUALS,  \"KPEquals\" },\n+  { 0, NULL },\n+};\n+\n+// Mouse event names\n+static const char *evnames[] = { \"Unknown\", \"Press\", \"Drag\", \"Release\" };\n+\n+#define CHARAT(i) (tk->buffer[tk->buffstart + (i)])\n+\n+#ifdef DEBUG\n+// Some internal debugging functions\n+\n+static void print_buffer(TermKey *tk)\n+{\n+  int i;\n+  for (i = 0; i < tk->buffcount && i < 20; i++) {\n+    fprintf(stderr, \"%02x \", CHARAT(i));\n+  }\n+  if (tk->buffcount > 20) {\n+    fprintf(stderr, \"...\");\n+  }\n+}\n+\n+static void print_key(TermKey *tk, TermKeyKey *key)\n+{\n+  switch (key->type) {\n+  case TERMKEY_TYPE_UNICODE:\n+    fprintf(stderr, \"Unicode codepoint=U+%04lx utf8='%s'\", key->code.codepoint, key->utf8);\n+    break;\n+  case TERMKEY_TYPE_FUNCTION:\n+    fprintf(stderr, \"Function F%d\", key->code.number);\n+    break;\n+  case TERMKEY_TYPE_KEYSYM:\n+    fprintf(stderr, \"Keysym sym=%d(%s)\", key->code.sym, termkey_get_keyname(tk, key->code.sym));\n+    break;\n+  case TERMKEY_TYPE_MOUSE: {\n+    TermKeyMouseEvent ev;\n+    int button, line, col;\n+    termkey_interpret_mouse(tk, key, &ev, &button, &line, &col);\n+    fprintf(stderr, \"Mouse ev=%d button=%d pos=(%d,%d)\\n\", ev, button, line, col);\n+  }\n+  break;\n+  case TERMKEY_TYPE_POSITION: {\n+    int line, col;\n+    termkey_interpret_position(tk, key, &line, &col);\n+    fprintf(stderr, \"Position report pos=(%d,%d)\\n\", line, col);\n+  }\n+  break;\n+  case TERMKEY_TYPE_MODEREPORT: {\n+    int initial, mode, value;\n+    termkey_interpret_modereport(tk, key, &initial, &mode, &value);\n+    fprintf(stderr, \"Mode report mode=%s %d val=%d\\n\", initial == '?' ? \"DEC\" : \"ANSI\", mode,\n+            value);\n+  }\n+  break;\n+  case TERMKEY_TYPE_DCS:\n+    fprintf(stderr, \"Device Control String\");\n+    break;\n+  case TERMKEY_TYPE_OSC:\n+    fprintf(stderr, \"Operating System Control\");\n+    break;\n+  case TERMKEY_TYPE_UNKNOWN_CSI:\n+    fprintf(stderr, \"unknown CSI\\n\");\n+    break;\n+  }\n+\n+  int m = key->modifiers;\n+  fprintf(stderr, \" mod=%s%s%s+%02x\",\n+          (m & TERMKEY_KEYMOD_CTRL ? \"C\" : \"\"),\n+          (m & TERMKEY_KEYMOD_ALT ? \"A\" : \"\"),\n+          (m & TERMKEY_KEYMOD_SHIFT ? \"S\" : \"\"),\n+          m & ~(TERMKEY_KEYMOD_CTRL|TERMKEY_KEYMOD_ALT|TERMKEY_KEYMOD_SHIFT));\n+}\n+\n+static const char *res2str(TermKeyResult res)\n+{\n+  static char errorbuffer[256];\n+\n+  switch (res) {\n+  case TERMKEY_RES_KEY:\n+    return \"TERMKEY_RES_KEY\";\n+  case TERMKEY_RES_EOF:\n+    return \"TERMKEY_RES_EOF\";\n+  case TERMKEY_RES_AGAIN:\n+    return \"TERMKEY_RES_AGAIN\";\n+  case TERMKEY_RES_NONE:\n+    return \"TERMKEY_RES_NONE\";\n+  case TERMKEY_RES_ERROR:\n+    snprintf(errorbuffer, sizeof errorbuffer, \"TERMKEY_RES_ERROR(errno=%d)\\n\", errno);\n+    return (const char *)errorbuffer;\n+  }\n+\n+  return \"unknown\";\n+}\n+#endif\n+\n+TermKeyResult termkey_interpret_string(TermKey *tk, const TermKeyKey *key, const char **strp)\n+{\n+  struct TermKeyDriverNode *p;\n+  for (p = tk->drivers; p; p = p->next) {\n+    if (p->driver == &termkey_driver_csi) {\n+      break;\n+    }\n+  }\n+\n+  if (!p) {\n+    return TERMKEY_RES_NONE;\n+  }\n+\n+  if (key->type != TERMKEY_TYPE_DCS\n+      && key->type != TERMKEY_TYPE_OSC) {\n+    return TERMKEY_RES_NONE;\n+  }\n+\n+  TermKeyCsi *csi = p->info;\n+\n+  if (csi->saved_string_id != key->code.number) {\n+    return TERMKEY_RES_NONE;\n+  }\n+\n+  *strp = csi->saved_string;\n+\n+  return TERMKEY_RES_KEY;\n+}\n+\n+/// Similar to snprintf(str, size, \"%s\", src) except it turns CamelCase into\n+/// space separated values\n+static int snprint_cameltospaces(char *str, size_t size, const char *src)\n+{\n+  int prev_lower = 0;\n+  size_t l = 0;\n+  while (*src && l < size - 1) {\n+    if (isupper(*src) && prev_lower) {\n+      if (str) {\n+        str[l++] = ' ';\n+      }\n+      if (l >= size - 1) {\n+        break;\n+      }\n+    }\n+    prev_lower = islower(*src);\n+    str[l++] = (char)tolower(*src++);\n+  }\n+  str[l] = 0;\n+  // For consistency with snprintf, return the number of bytes that would have\n+  // been written, excluding '\\0'\n+  while (*src) {\n+    if (isupper(*src) && prev_lower) {\n+      l++;\n+    }\n+    prev_lower = islower(*src);\n+    src++; l++;\n+  }\n+  return (int)l;\n+}\n+\n+/// Similar to strcmp(str, strcamel, n) except that:\n+///    it compares CamelCase in strcamel with space separated values in str;\n+///    it takes char**s and updates them\n+/// n counts bytes of strcamel, not str\n+static int strpncmp_camel(const char **strp, const char **strcamelp, size_t n)\n+{\n+  const char *str = *strp, *strcamel = *strcamelp;\n+  int prev_lower = 0;\n+\n+  for (; (*str || *strcamel) && n; n--) {\n+    char b = (char)tolower(*strcamel);\n+    if (isupper(*strcamel) && prev_lower) {\n+      if (*str != ' ') {\n+        break;\n+      }\n+      str++;\n+      if (*str != b) {\n+        break;\n+      }\n+    } else if (*str != b) {\n+      break;\n+    }\n+\n+    prev_lower = islower(*strcamel);\n+\n+    str++;\n+    strcamel++;\n+  }\n+\n+  *strp = str;\n+  *strcamelp = strcamel;\n+  return *str - *strcamel;\n+}\n+\n+static TermKey *termkey_alloc(void)\n+{\n+  TermKey *tk = xmalloc(sizeof(TermKey));\n+  if (!tk) {\n+    return NULL;\n+  }\n+\n+  // Default all the object fields but don't allocate anything\n+\n+  tk->fd = -1;\n+  tk->flags = 0;\n+  tk->canonflags = 0;\n+\n+  tk->buffer = NULL;\n+  tk->buffstart = 0;\n+  tk->buffcount = 0;\n+  tk->buffsize = 256;  // bytes\n+  tk->hightide = 0;\n+\n+#ifdef HAVE_TERMIOS\n+  tk->restore_termios_valid = 0;\n+#endif\n+\n+  tk->ti_getstr_hook = NULL;\n+  tk->ti_getstr_hook_data = NULL;\n+\n+  tk->waittime = 50;  // msec\n+\n+  tk->is_closed = 0;\n+  tk->is_started = 0;\n+\n+  tk->nkeynames = 64;\n+  tk->keynames = NULL;\n+\n+  for (int i = 0; i < 32; i++) {\n+    tk->c0[i].sym = TERMKEY_SYM_NONE;\n+  }\n+\n+  tk->drivers = NULL;\n+\n+  tk->method.emit_codepoint = &emit_codepoint;\n+  tk->method.peekkey_simple = &peekkey_simple;\n+  tk->method.peekkey_mouse = &peekkey_mouse;\n+\n+  return tk;\n+}\n+\n+static int termkey_init(TermKey *tk, const char *term)\n+{\n+  tk->buffer = xmalloc(tk->buffsize);\n+  if (!tk->buffer) {\n+    return 0;\n+  }\n+",
            "html_url": "https://github.com/neovim/neovim/pull/30047#discussion_r1721079853",
            "id": 1721079853,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5mlZgt",
            "original_commit_id": "40c6eef49c4a2925e7376b1f5f9bd319c2410ac9",
            "original_line": 366,
            "original_position": 366,
            "original_start_line": 363,
            "path": "src/nvim/tui/termkey.c",
            "position": null,
            "pull_request_review_id": 2244425659,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30047",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721079853/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-08-18T22:52:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721079853",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30047#discussion_r1721079883"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30047"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721079883"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n```",
            "commit_id": "48a8eb9b07733b85b7a5bee8fd3765f2f79878f9",
            "created_at": "2024-08-18T22:49:39Z",
            "diff_hunk": "@@ -0,0 +1,1333 @@\n+#include <ctype.h>\n+#include <errno.h>\n+#include <stdbool.h>\n+#include <stdio.h>\n+#include <string.h>\n+\n+#include \"nvim/mbyte.h\"\n+#include \"nvim/memory.h\"\n+#include \"nvim/tui/driver-csi.h\"\n+#include \"nvim/tui/driver-ti.h\"\n+#include \"nvim/tui/termkey-internal.h\"\n+#include \"nvim/tui/termkey.h\"\n+#include \"nvim/tui/termkey_defs.h\"\n+\n+#ifndef _WIN32\n+# include <poll.h>\n+# include <strings.h>\n+# include <unistd.h>\n+#else\n+# include <io.h>\n+#endif\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"tui/termkey.c.generated.h\"\n+#endif\n+\n+#ifdef _MSC_VER\n+# define strcaseeq(a, b) (_stricmp(a, b) == 0)\n+#else\n+# define strcaseeq(a, b) (strcasecmp(a, b) == 0)\n+#endif\n+\n+struct TermKeyDriver termkey_driver_ti = {\n+  .name = \"terminfo\",\n+\n+  .new_driver = new_driver_ti,\n+  .free_driver = free_driver_ti,\n+\n+  .start_driver = start_driver_ti,\n+  .stop_driver = stop_driver_ti,\n+\n+  .peekkey = peekkey_ti,\n+};\n+\n+struct TermKeyDriver termkey_driver_csi = {\n+  .name = \"CSI\",\n+\n+  .new_driver = new_driver_csi,\n+  .free_driver = free_driver_csi,\n+\n+  .peekkey = peekkey_csi,\n+};\n+\n+static struct TermKeyDriver *drivers[] = {\n+  &termkey_driver_ti,\n+  &termkey_driver_csi,\n+  NULL,\n+};\n+\n+static struct {\n+  TermKeySym sym;\n+  const char *name;\n+} keynames[] = {\n+  { TERMKEY_SYM_NONE,      \"NONE\" },\n+  { TERMKEY_SYM_BACKSPACE, \"Backspace\" },\n+  { TERMKEY_SYM_TAB,       \"Tab\" },\n+  { TERMKEY_SYM_ENTER,     \"Enter\" },\n+  { TERMKEY_SYM_ESCAPE,    \"Escape\" },\n+  { TERMKEY_SYM_SPACE,     \"Space\" },\n+  { TERMKEY_SYM_DEL,       \"DEL\" },\n+  { TERMKEY_SYM_UP,        \"Up\" },\n+  { TERMKEY_SYM_DOWN,      \"Down\" },\n+  { TERMKEY_SYM_LEFT,      \"Left\" },\n+  { TERMKEY_SYM_RIGHT,     \"Right\" },\n+  { TERMKEY_SYM_BEGIN,     \"Begin\" },\n+  { TERMKEY_SYM_FIND,      \"Find\" },\n+  { TERMKEY_SYM_INSERT,    \"Insert\" },\n+  { TERMKEY_SYM_DELETE,    \"Delete\" },\n+  { TERMKEY_SYM_SELECT,    \"Select\" },\n+  { TERMKEY_SYM_PAGEUP,    \"PageUp\" },\n+  { TERMKEY_SYM_PAGEDOWN,  \"PageDown\" },\n+  { TERMKEY_SYM_HOME,      \"Home\" },\n+  { TERMKEY_SYM_END,       \"End\" },\n+  { TERMKEY_SYM_CANCEL,    \"Cancel\" },\n+  { TERMKEY_SYM_CLEAR,     \"Clear\" },\n+  { TERMKEY_SYM_CLOSE,     \"Close\" },\n+  { TERMKEY_SYM_COMMAND,   \"Command\" },\n+  { TERMKEY_SYM_COPY,      \"Copy\" },\n+  { TERMKEY_SYM_EXIT,      \"Exit\" },\n+  { TERMKEY_SYM_HELP,      \"Help\" },\n+  { TERMKEY_SYM_MARK,      \"Mark\" },\n+  { TERMKEY_SYM_MESSAGE,   \"Message\" },\n+  { TERMKEY_SYM_MOVE,      \"Move\" },\n+  { TERMKEY_SYM_OPEN,      \"Open\" },\n+  { TERMKEY_SYM_OPTIONS,   \"Options\" },\n+  { TERMKEY_SYM_PRINT,     \"Print\" },\n+  { TERMKEY_SYM_REDO,      \"Redo\" },\n+  { TERMKEY_SYM_REFERENCE, \"Reference\" },\n+  { TERMKEY_SYM_REFRESH,   \"Refresh\" },\n+  { TERMKEY_SYM_REPLACE,   \"Replace\" },\n+  { TERMKEY_SYM_RESTART,   \"Restart\" },\n+  { TERMKEY_SYM_RESUME,    \"Resume\" },\n+  { TERMKEY_SYM_SAVE,      \"Save\" },\n+  { TERMKEY_SYM_SUSPEND,   \"Suspend\" },\n+  { TERMKEY_SYM_UNDO,      \"Undo\" },\n+  { TERMKEY_SYM_KP0,       \"KP0\" },\n+  { TERMKEY_SYM_KP1,       \"KP1\" },\n+  { TERMKEY_SYM_KP2,       \"KP2\" },\n+  { TERMKEY_SYM_KP3,       \"KP3\" },\n+  { TERMKEY_SYM_KP4,       \"KP4\" },\n+  { TERMKEY_SYM_KP5,       \"KP5\" },\n+  { TERMKEY_SYM_KP6,       \"KP6\" },\n+  { TERMKEY_SYM_KP7,       \"KP7\" },\n+  { TERMKEY_SYM_KP8,       \"KP8\" },\n+  { TERMKEY_SYM_KP9,       \"KP9\" },\n+  { TERMKEY_SYM_KPENTER,   \"KPEnter\" },\n+  { TERMKEY_SYM_KPPLUS,    \"KPPlus\" },\n+  { TERMKEY_SYM_KPMINUS,   \"KPMinus\" },\n+  { TERMKEY_SYM_KPMULT,    \"KPMult\" },\n+  { TERMKEY_SYM_KPDIV,     \"KPDiv\" },\n+  { TERMKEY_SYM_KPCOMMA,   \"KPComma\" },\n+  { TERMKEY_SYM_KPPERIOD,  \"KPPeriod\" },\n+  { TERMKEY_SYM_KPEQUALS,  \"KPEquals\" },\n+  { 0, NULL },\n+};\n+\n+// Mouse event names\n+static const char *evnames[] = { \"Unknown\", \"Press\", \"Drag\", \"Release\" };\n+\n+#define CHARAT(i) (tk->buffer[tk->buffstart + (i)])\n+\n+#ifdef DEBUG\n+// Some internal debugging functions\n+\n+static void print_buffer(TermKey *tk)\n+{\n+  int i;\n+  for (i = 0; i < tk->buffcount && i < 20; i++) {\n+    fprintf(stderr, \"%02x \", CHARAT(i));\n+  }\n+  if (tk->buffcount > 20) {\n+    fprintf(stderr, \"...\");\n+  }\n+}\n+\n+static void print_key(TermKey *tk, TermKeyKey *key)\n+{\n+  switch (key->type) {\n+  case TERMKEY_TYPE_UNICODE:\n+    fprintf(stderr, \"Unicode codepoint=U+%04lx utf8='%s'\", key->code.codepoint, key->utf8);\n+    break;\n+  case TERMKEY_TYPE_FUNCTION:\n+    fprintf(stderr, \"Function F%d\", key->code.number);\n+    break;\n+  case TERMKEY_TYPE_KEYSYM:\n+    fprintf(stderr, \"Keysym sym=%d(%s)\", key->code.sym, termkey_get_keyname(tk, key->code.sym));\n+    break;\n+  case TERMKEY_TYPE_MOUSE: {\n+    TermKeyMouseEvent ev;\n+    int button, line, col;\n+    termkey_interpret_mouse(tk, key, &ev, &button, &line, &col);\n+    fprintf(stderr, \"Mouse ev=%d button=%d pos=(%d,%d)\\n\", ev, button, line, col);\n+  }\n+  break;\n+  case TERMKEY_TYPE_POSITION: {\n+    int line, col;\n+    termkey_interpret_position(tk, key, &line, &col);\n+    fprintf(stderr, \"Position report pos=(%d,%d)\\n\", line, col);\n+  }\n+  break;\n+  case TERMKEY_TYPE_MODEREPORT: {\n+    int initial, mode, value;\n+    termkey_interpret_modereport(tk, key, &initial, &mode, &value);\n+    fprintf(stderr, \"Mode report mode=%s %d val=%d\\n\", initial == '?' ? \"DEC\" : \"ANSI\", mode,\n+            value);\n+  }\n+  break;\n+  case TERMKEY_TYPE_DCS:\n+    fprintf(stderr, \"Device Control String\");\n+    break;\n+  case TERMKEY_TYPE_OSC:\n+    fprintf(stderr, \"Operating System Control\");\n+    break;\n+  case TERMKEY_TYPE_UNKNOWN_CSI:\n+    fprintf(stderr, \"unknown CSI\\n\");\n+    break;\n+  }\n+\n+  int m = key->modifiers;\n+  fprintf(stderr, \" mod=%s%s%s+%02x\",\n+          (m & TERMKEY_KEYMOD_CTRL ? \"C\" : \"\"),\n+          (m & TERMKEY_KEYMOD_ALT ? \"A\" : \"\"),\n+          (m & TERMKEY_KEYMOD_SHIFT ? \"S\" : \"\"),\n+          m & ~(TERMKEY_KEYMOD_CTRL|TERMKEY_KEYMOD_ALT|TERMKEY_KEYMOD_SHIFT));\n+}\n+\n+static const char *res2str(TermKeyResult res)\n+{\n+  static char errorbuffer[256];\n+\n+  switch (res) {\n+  case TERMKEY_RES_KEY:\n+    return \"TERMKEY_RES_KEY\";\n+  case TERMKEY_RES_EOF:\n+    return \"TERMKEY_RES_EOF\";\n+  case TERMKEY_RES_AGAIN:\n+    return \"TERMKEY_RES_AGAIN\";\n+  case TERMKEY_RES_NONE:\n+    return \"TERMKEY_RES_NONE\";\n+  case TERMKEY_RES_ERROR:\n+    snprintf(errorbuffer, sizeof errorbuffer, \"TERMKEY_RES_ERROR(errno=%d)\\n\", errno);\n+    return (const char *)errorbuffer;\n+  }\n+\n+  return \"unknown\";\n+}\n+#endif\n+\n+TermKeyResult termkey_interpret_string(TermKey *tk, const TermKeyKey *key, const char **strp)\n+{\n+  struct TermKeyDriverNode *p;\n+  for (p = tk->drivers; p; p = p->next) {\n+    if (p->driver == &termkey_driver_csi) {\n+      break;\n+    }\n+  }\n+\n+  if (!p) {\n+    return TERMKEY_RES_NONE;\n+  }\n+\n+  if (key->type != TERMKEY_TYPE_DCS\n+      && key->type != TERMKEY_TYPE_OSC) {\n+    return TERMKEY_RES_NONE;\n+  }\n+\n+  TermKeyCsi *csi = p->info;\n+\n+  if (csi->saved_string_id != key->code.number) {\n+    return TERMKEY_RES_NONE;\n+  }\n+\n+  *strp = csi->saved_string;\n+\n+  return TERMKEY_RES_KEY;\n+}\n+\n+/// Similar to snprintf(str, size, \"%s\", src) except it turns CamelCase into\n+/// space separated values\n+static int snprint_cameltospaces(char *str, size_t size, const char *src)\n+{\n+  int prev_lower = 0;\n+  size_t l = 0;\n+  while (*src && l < size - 1) {\n+    if (isupper(*src) && prev_lower) {\n+      if (str) {\n+        str[l++] = ' ';\n+      }\n+      if (l >= size - 1) {\n+        break;\n+      }\n+    }\n+    prev_lower = islower(*src);\n+    str[l++] = (char)tolower(*src++);\n+  }\n+  str[l] = 0;\n+  // For consistency with snprintf, return the number of bytes that would have\n+  // been written, excluding '\\0'\n+  while (*src) {\n+    if (isupper(*src) && prev_lower) {\n+      l++;\n+    }\n+    prev_lower = islower(*src);\n+    src++; l++;\n+  }\n+  return (int)l;\n+}\n+\n+/// Similar to strcmp(str, strcamel, n) except that:\n+///    it compares CamelCase in strcamel with space separated values in str;\n+///    it takes char**s and updates them\n+/// n counts bytes of strcamel, not str\n+static int strpncmp_camel(const char **strp, const char **strcamelp, size_t n)\n+{\n+  const char *str = *strp, *strcamel = *strcamelp;\n+  int prev_lower = 0;\n+\n+  for (; (*str || *strcamel) && n; n--) {\n+    char b = (char)tolower(*strcamel);\n+    if (isupper(*strcamel) && prev_lower) {\n+      if (*str != ' ') {\n+        break;\n+      }\n+      str++;\n+      if (*str != b) {\n+        break;\n+      }\n+    } else if (*str != b) {\n+      break;\n+    }\n+\n+    prev_lower = islower(*strcamel);\n+\n+    str++;\n+    strcamel++;\n+  }\n+\n+  *strp = str;\n+  *strcamelp = strcamel;\n+  return *str - *strcamel;\n+}\n+\n+static TermKey *termkey_alloc(void)\n+{\n+  TermKey *tk = xmalloc(sizeof(TermKey));\n+  if (!tk) {\n+    return NULL;\n+  }\n+\n+  // Default all the object fields but don't allocate anything\n+\n+  tk->fd = -1;\n+  tk->flags = 0;\n+  tk->canonflags = 0;\n+\n+  tk->buffer = NULL;\n+  tk->buffstart = 0;\n+  tk->buffcount = 0;\n+  tk->buffsize = 256;  // bytes\n+  tk->hightide = 0;\n+\n+#ifdef HAVE_TERMIOS\n+  tk->restore_termios_valid = 0;\n+#endif\n+\n+  tk->ti_getstr_hook = NULL;\n+  tk->ti_getstr_hook_data = NULL;\n+\n+  tk->waittime = 50;  // msec\n+\n+  tk->is_closed = 0;\n+  tk->is_started = 0;\n+\n+  tk->nkeynames = 64;\n+  tk->keynames = NULL;\n+\n+  for (int i = 0; i < 32; i++) {\n+    tk->c0[i].sym = TERMKEY_SYM_NONE;\n+  }\n+\n+  tk->drivers = NULL;\n+\n+  tk->method.emit_codepoint = &emit_codepoint;\n+  tk->method.peekkey_simple = &peekkey_simple;\n+  tk->method.peekkey_mouse = &peekkey_mouse;\n+\n+  return tk;\n+}\n+\n+static int termkey_init(TermKey *tk, const char *term)\n+{\n+  tk->buffer = xmalloc(tk->buffsize);\n+  if (!tk->buffer) {\n+    return 0;\n+  }\n+\n+  tk->keynames = xmalloc(sizeof(tk->keynames[0]) * (size_t)tk->nkeynames);\n+  if (!tk->keynames) {\n+    goto abort_free_buffer;\n+  }",
            "html_url": "https://github.com/neovim/neovim/pull/30047#discussion_r1721079883",
            "id": 1721079883,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5mlZhL",
            "original_commit_id": "40c6eef49c4a2925e7376b1f5f9bd319c2410ac9",
            "original_line": 370,
            "original_position": 370,
            "original_start_line": 368,
            "path": "src/nvim/tui/termkey.c",
            "position": null,
            "pull_request_review_id": 2244425659,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30047",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721079883/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-08-18T22:52:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721079883",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30047#discussion_r1721079928"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30047"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721079928"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n```",
            "commit_id": "48a8eb9b07733b85b7a5bee8fd3765f2f79878f9",
            "created_at": "2024-08-18T22:50:08Z",
            "diff_hunk": "@@ -0,0 +1,1333 @@\n+#include <ctype.h>\n+#include <errno.h>\n+#include <stdbool.h>\n+#include <stdio.h>\n+#include <string.h>\n+\n+#include \"nvim/mbyte.h\"\n+#include \"nvim/memory.h\"\n+#include \"nvim/tui/driver-csi.h\"\n+#include \"nvim/tui/driver-ti.h\"\n+#include \"nvim/tui/termkey-internal.h\"\n+#include \"nvim/tui/termkey.h\"\n+#include \"nvim/tui/termkey_defs.h\"\n+\n+#ifndef _WIN32\n+# include <poll.h>\n+# include <strings.h>\n+# include <unistd.h>\n+#else\n+# include <io.h>\n+#endif\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"tui/termkey.c.generated.h\"\n+#endif\n+\n+#ifdef _MSC_VER\n+# define strcaseeq(a, b) (_stricmp(a, b) == 0)\n+#else\n+# define strcaseeq(a, b) (strcasecmp(a, b) == 0)\n+#endif\n+\n+struct TermKeyDriver termkey_driver_ti = {\n+  .name = \"terminfo\",\n+\n+  .new_driver = new_driver_ti,\n+  .free_driver = free_driver_ti,\n+\n+  .start_driver = start_driver_ti,\n+  .stop_driver = stop_driver_ti,\n+\n+  .peekkey = peekkey_ti,\n+};\n+\n+struct TermKeyDriver termkey_driver_csi = {\n+  .name = \"CSI\",\n+\n+  .new_driver = new_driver_csi,\n+  .free_driver = free_driver_csi,\n+\n+  .peekkey = peekkey_csi,\n+};\n+\n+static struct TermKeyDriver *drivers[] = {\n+  &termkey_driver_ti,\n+  &termkey_driver_csi,\n+  NULL,\n+};\n+\n+static struct {\n+  TermKeySym sym;\n+  const char *name;\n+} keynames[] = {\n+  { TERMKEY_SYM_NONE,      \"NONE\" },\n+  { TERMKEY_SYM_BACKSPACE, \"Backspace\" },\n+  { TERMKEY_SYM_TAB,       \"Tab\" },\n+  { TERMKEY_SYM_ENTER,     \"Enter\" },\n+  { TERMKEY_SYM_ESCAPE,    \"Escape\" },\n+  { TERMKEY_SYM_SPACE,     \"Space\" },\n+  { TERMKEY_SYM_DEL,       \"DEL\" },\n+  { TERMKEY_SYM_UP,        \"Up\" },\n+  { TERMKEY_SYM_DOWN,      \"Down\" },\n+  { TERMKEY_SYM_LEFT,      \"Left\" },\n+  { TERMKEY_SYM_RIGHT,     \"Right\" },\n+  { TERMKEY_SYM_BEGIN,     \"Begin\" },\n+  { TERMKEY_SYM_FIND,      \"Find\" },\n+  { TERMKEY_SYM_INSERT,    \"Insert\" },\n+  { TERMKEY_SYM_DELETE,    \"Delete\" },\n+  { TERMKEY_SYM_SELECT,    \"Select\" },\n+  { TERMKEY_SYM_PAGEUP,    \"PageUp\" },\n+  { TERMKEY_SYM_PAGEDOWN,  \"PageDown\" },\n+  { TERMKEY_SYM_HOME,      \"Home\" },\n+  { TERMKEY_SYM_END,       \"End\" },\n+  { TERMKEY_SYM_CANCEL,    \"Cancel\" },\n+  { TERMKEY_SYM_CLEAR,     \"Clear\" },\n+  { TERMKEY_SYM_CLOSE,     \"Close\" },\n+  { TERMKEY_SYM_COMMAND,   \"Command\" },\n+  { TERMKEY_SYM_COPY,      \"Copy\" },\n+  { TERMKEY_SYM_EXIT,      \"Exit\" },\n+  { TERMKEY_SYM_HELP,      \"Help\" },\n+  { TERMKEY_SYM_MARK,      \"Mark\" },\n+  { TERMKEY_SYM_MESSAGE,   \"Message\" },\n+  { TERMKEY_SYM_MOVE,      \"Move\" },\n+  { TERMKEY_SYM_OPEN,      \"Open\" },\n+  { TERMKEY_SYM_OPTIONS,   \"Options\" },\n+  { TERMKEY_SYM_PRINT,     \"Print\" },\n+  { TERMKEY_SYM_REDO,      \"Redo\" },\n+  { TERMKEY_SYM_REFERENCE, \"Reference\" },\n+  { TERMKEY_SYM_REFRESH,   \"Refresh\" },\n+  { TERMKEY_SYM_REPLACE,   \"Replace\" },\n+  { TERMKEY_SYM_RESTART,   \"Restart\" },\n+  { TERMKEY_SYM_RESUME,    \"Resume\" },\n+  { TERMKEY_SYM_SAVE,      \"Save\" },\n+  { TERMKEY_SYM_SUSPEND,   \"Suspend\" },\n+  { TERMKEY_SYM_UNDO,      \"Undo\" },\n+  { TERMKEY_SYM_KP0,       \"KP0\" },\n+  { TERMKEY_SYM_KP1,       \"KP1\" },\n+  { TERMKEY_SYM_KP2,       \"KP2\" },\n+  { TERMKEY_SYM_KP3,       \"KP3\" },\n+  { TERMKEY_SYM_KP4,       \"KP4\" },\n+  { TERMKEY_SYM_KP5,       \"KP5\" },\n+  { TERMKEY_SYM_KP6,       \"KP6\" },\n+  { TERMKEY_SYM_KP7,       \"KP7\" },\n+  { TERMKEY_SYM_KP8,       \"KP8\" },\n+  { TERMKEY_SYM_KP9,       \"KP9\" },\n+  { TERMKEY_SYM_KPENTER,   \"KPEnter\" },\n+  { TERMKEY_SYM_KPPLUS,    \"KPPlus\" },\n+  { TERMKEY_SYM_KPMINUS,   \"KPMinus\" },\n+  { TERMKEY_SYM_KPMULT,    \"KPMult\" },\n+  { TERMKEY_SYM_KPDIV,     \"KPDiv\" },\n+  { TERMKEY_SYM_KPCOMMA,   \"KPComma\" },\n+  { TERMKEY_SYM_KPPERIOD,  \"KPPeriod\" },\n+  { TERMKEY_SYM_KPEQUALS,  \"KPEquals\" },\n+  { 0, NULL },\n+};\n+\n+// Mouse event names\n+static const char *evnames[] = { \"Unknown\", \"Press\", \"Drag\", \"Release\" };\n+\n+#define CHARAT(i) (tk->buffer[tk->buffstart + (i)])\n+\n+#ifdef DEBUG\n+// Some internal debugging functions\n+\n+static void print_buffer(TermKey *tk)\n+{\n+  int i;\n+  for (i = 0; i < tk->buffcount && i < 20; i++) {\n+    fprintf(stderr, \"%02x \", CHARAT(i));\n+  }\n+  if (tk->buffcount > 20) {\n+    fprintf(stderr, \"...\");\n+  }\n+}\n+\n+static void print_key(TermKey *tk, TermKeyKey *key)\n+{\n+  switch (key->type) {\n+  case TERMKEY_TYPE_UNICODE:\n+    fprintf(stderr, \"Unicode codepoint=U+%04lx utf8='%s'\", key->code.codepoint, key->utf8);\n+    break;\n+  case TERMKEY_TYPE_FUNCTION:\n+    fprintf(stderr, \"Function F%d\", key->code.number);\n+    break;\n+  case TERMKEY_TYPE_KEYSYM:\n+    fprintf(stderr, \"Keysym sym=%d(%s)\", key->code.sym, termkey_get_keyname(tk, key->code.sym));\n+    break;\n+  case TERMKEY_TYPE_MOUSE: {\n+    TermKeyMouseEvent ev;\n+    int button, line, col;\n+    termkey_interpret_mouse(tk, key, &ev, &button, &line, &col);\n+    fprintf(stderr, \"Mouse ev=%d button=%d pos=(%d,%d)\\n\", ev, button, line, col);\n+  }\n+  break;\n+  case TERMKEY_TYPE_POSITION: {\n+    int line, col;\n+    termkey_interpret_position(tk, key, &line, &col);\n+    fprintf(stderr, \"Position report pos=(%d,%d)\\n\", line, col);\n+  }\n+  break;\n+  case TERMKEY_TYPE_MODEREPORT: {\n+    int initial, mode, value;\n+    termkey_interpret_modereport(tk, key, &initial, &mode, &value);\n+    fprintf(stderr, \"Mode report mode=%s %d val=%d\\n\", initial == '?' ? \"DEC\" : \"ANSI\", mode,\n+            value);\n+  }\n+  break;\n+  case TERMKEY_TYPE_DCS:\n+    fprintf(stderr, \"Device Control String\");\n+    break;\n+  case TERMKEY_TYPE_OSC:\n+    fprintf(stderr, \"Operating System Control\");\n+    break;\n+  case TERMKEY_TYPE_UNKNOWN_CSI:\n+    fprintf(stderr, \"unknown CSI\\n\");\n+    break;\n+  }\n+\n+  int m = key->modifiers;\n+  fprintf(stderr, \" mod=%s%s%s+%02x\",\n+          (m & TERMKEY_KEYMOD_CTRL ? \"C\" : \"\"),\n+          (m & TERMKEY_KEYMOD_ALT ? \"A\" : \"\"),\n+          (m & TERMKEY_KEYMOD_SHIFT ? \"S\" : \"\"),\n+          m & ~(TERMKEY_KEYMOD_CTRL|TERMKEY_KEYMOD_ALT|TERMKEY_KEYMOD_SHIFT));\n+}\n+\n+static const char *res2str(TermKeyResult res)\n+{\n+  static char errorbuffer[256];\n+\n+  switch (res) {\n+  case TERMKEY_RES_KEY:\n+    return \"TERMKEY_RES_KEY\";\n+  case TERMKEY_RES_EOF:\n+    return \"TERMKEY_RES_EOF\";\n+  case TERMKEY_RES_AGAIN:\n+    return \"TERMKEY_RES_AGAIN\";\n+  case TERMKEY_RES_NONE:\n+    return \"TERMKEY_RES_NONE\";\n+  case TERMKEY_RES_ERROR:\n+    snprintf(errorbuffer, sizeof errorbuffer, \"TERMKEY_RES_ERROR(errno=%d)\\n\", errno);\n+    return (const char *)errorbuffer;\n+  }\n+\n+  return \"unknown\";\n+}\n+#endif\n+\n+TermKeyResult termkey_interpret_string(TermKey *tk, const TermKeyKey *key, const char **strp)\n+{\n+  struct TermKeyDriverNode *p;\n+  for (p = tk->drivers; p; p = p->next) {\n+    if (p->driver == &termkey_driver_csi) {\n+      break;\n+    }\n+  }\n+\n+  if (!p) {\n+    return TERMKEY_RES_NONE;\n+  }\n+\n+  if (key->type != TERMKEY_TYPE_DCS\n+      && key->type != TERMKEY_TYPE_OSC) {\n+    return TERMKEY_RES_NONE;\n+  }\n+\n+  TermKeyCsi *csi = p->info;\n+\n+  if (csi->saved_string_id != key->code.number) {\n+    return TERMKEY_RES_NONE;\n+  }\n+\n+  *strp = csi->saved_string;\n+\n+  return TERMKEY_RES_KEY;\n+}\n+\n+/// Similar to snprintf(str, size, \"%s\", src) except it turns CamelCase into\n+/// space separated values\n+static int snprint_cameltospaces(char *str, size_t size, const char *src)\n+{\n+  int prev_lower = 0;\n+  size_t l = 0;\n+  while (*src && l < size - 1) {\n+    if (isupper(*src) && prev_lower) {\n+      if (str) {\n+        str[l++] = ' ';\n+      }\n+      if (l >= size - 1) {\n+        break;\n+      }\n+    }\n+    prev_lower = islower(*src);\n+    str[l++] = (char)tolower(*src++);\n+  }\n+  str[l] = 0;\n+  // For consistency with snprintf, return the number of bytes that would have\n+  // been written, excluding '\\0'\n+  while (*src) {\n+    if (isupper(*src) && prev_lower) {\n+      l++;\n+    }\n+    prev_lower = islower(*src);\n+    src++; l++;\n+  }\n+  return (int)l;\n+}\n+\n+/// Similar to strcmp(str, strcamel, n) except that:\n+///    it compares CamelCase in strcamel with space separated values in str;\n+///    it takes char**s and updates them\n+/// n counts bytes of strcamel, not str\n+static int strpncmp_camel(const char **strp, const char **strcamelp, size_t n)\n+{\n+  const char *str = *strp, *strcamel = *strcamelp;\n+  int prev_lower = 0;\n+\n+  for (; (*str || *strcamel) && n; n--) {\n+    char b = (char)tolower(*strcamel);\n+    if (isupper(*strcamel) && prev_lower) {\n+      if (*str != ' ') {\n+        break;\n+      }\n+      str++;\n+      if (*str != b) {\n+        break;\n+      }\n+    } else if (*str != b) {\n+      break;\n+    }\n+\n+    prev_lower = islower(*strcamel);\n+\n+    str++;\n+    strcamel++;\n+  }\n+\n+  *strp = str;\n+  *strcamelp = strcamel;\n+  return *str - *strcamel;\n+}\n+\n+static TermKey *termkey_alloc(void)\n+{\n+  TermKey *tk = xmalloc(sizeof(TermKey));\n+  if (!tk) {\n+    return NULL;\n+  }\n+\n+  // Default all the object fields but don't allocate anything\n+\n+  tk->fd = -1;\n+  tk->flags = 0;\n+  tk->canonflags = 0;\n+\n+  tk->buffer = NULL;\n+  tk->buffstart = 0;\n+  tk->buffcount = 0;\n+  tk->buffsize = 256;  // bytes\n+  tk->hightide = 0;\n+\n+#ifdef HAVE_TERMIOS\n+  tk->restore_termios_valid = 0;\n+#endif\n+\n+  tk->ti_getstr_hook = NULL;\n+  tk->ti_getstr_hook_data = NULL;\n+\n+  tk->waittime = 50;  // msec\n+\n+  tk->is_closed = 0;\n+  tk->is_started = 0;\n+\n+  tk->nkeynames = 64;\n+  tk->keynames = NULL;\n+\n+  for (int i = 0; i < 32; i++) {\n+    tk->c0[i].sym = TERMKEY_SYM_NONE;\n+  }\n+\n+  tk->drivers = NULL;\n+\n+  tk->method.emit_codepoint = &emit_codepoint;\n+  tk->method.peekkey_simple = &peekkey_simple;\n+  tk->method.peekkey_mouse = &peekkey_mouse;\n+\n+  return tk;\n+}\n+\n+static int termkey_init(TermKey *tk, const char *term)\n+{\n+  tk->buffer = xmalloc(tk->buffsize);\n+  if (!tk->buffer) {\n+    return 0;\n+  }\n+\n+  tk->keynames = xmalloc(sizeof(tk->keynames[0]) * (size_t)tk->nkeynames);\n+  if (!tk->keynames) {\n+    goto abort_free_buffer;\n+  }\n+\n+  int i;\n+  for (i = 0; i < tk->nkeynames; i++) {\n+    tk->keynames[i] = NULL;\n+  }\n+\n+  for (i = 0; keynames[i].name; i++) {\n+    if (termkey_register_keyname(tk, keynames[i].sym, keynames[i].name) == -1) {\n+      goto abort_free_keynames;\n+    }\n+  }\n+\n+  register_c0(tk, TERMKEY_SYM_TAB,    0x09, NULL);\n+  register_c0(tk, TERMKEY_SYM_ENTER,  0x0d, NULL);\n+  register_c0(tk, TERMKEY_SYM_ESCAPE, 0x1b, NULL);\n+\n+  struct TermKeyDriverNode *tail = NULL;\n+\n+  for (i = 0; drivers[i]; i++) {\n+    void *info = (*drivers[i]->new_driver)(tk, term);\n+    if (!info) {\n+      continue;\n+    }\n+\n+#ifdef DEBUG\n+    fprintf(stderr, \"Loading the %s driver...\\n\", drivers[i]->name);\n+#endif\n+\n+    struct TermKeyDriverNode *thisdrv = xmalloc(sizeof(*thisdrv));\n+    if (!thisdrv) {\n+      goto abort_free_drivers;\n+    }\n+\n+    thisdrv->driver = drivers[i];\n+    thisdrv->info = info;\n+    thisdrv->next = NULL;\n+\n+    if (!tail) {\n+      tk->drivers = thisdrv;\n+    } else {\n+      tail->next = thisdrv;\n+    }\n+\n+    tail = thisdrv;\n+\n+#ifdef DEBUG\n+    fprintf(stderr, \"Loaded %s driver\\n\", drivers[i]->name);\n+#endif\n+  }\n+\n+  if (!tk->drivers) {\n+    errno = ENOENT;\n+    goto abort_free_keynames;\n+  }\n+\n+  return 1;\n+\n+abort_free_drivers:\n+  for (struct TermKeyDriverNode *p = tk->drivers; p;) {\n+    (*p->driver->free_driver)(p->info);\n+    struct TermKeyDriverNode *next = p->next;\n+    xfree(p);\n+    p = next;\n+  }\n+\n+abort_free_keynames:\n+  xfree(tk->keynames);\n+\n+abort_free_buffer:",
            "html_url": "https://github.com/neovim/neovim/pull/30047#discussion_r1721079928",
            "id": 1721079928,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5mlZh4",
            "original_commit_id": "40c6eef49c4a2925e7376b1f5f9bd319c2410ac9",
            "original_line": 439,
            "original_position": 439,
            "original_start_line": 438,
            "path": "src/nvim/tui/termkey.c",
            "position": null,
            "pull_request_review_id": 2244425659,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30047",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721079928/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-08-18T22:52:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721079928",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30047#discussion_r1721080142"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30047"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721080142"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n```",
            "commit_id": "48a8eb9b07733b85b7a5bee8fd3765f2f79878f9",
            "created_at": "2024-08-18T22:51:52Z",
            "diff_hunk": "@@ -0,0 +1,1333 @@\n+#include <ctype.h>\n+#include <errno.h>\n+#include <stdbool.h>\n+#include <stdio.h>\n+#include <string.h>\n+\n+#include \"nvim/mbyte.h\"\n+#include \"nvim/memory.h\"\n+#include \"nvim/tui/driver-csi.h\"\n+#include \"nvim/tui/driver-ti.h\"\n+#include \"nvim/tui/termkey-internal.h\"\n+#include \"nvim/tui/termkey.h\"\n+#include \"nvim/tui/termkey_defs.h\"\n+\n+#ifndef _WIN32\n+# include <poll.h>\n+# include <strings.h>\n+# include <unistd.h>\n+#else\n+# include <io.h>\n+#endif\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"tui/termkey.c.generated.h\"\n+#endif\n+\n+#ifdef _MSC_VER\n+# define strcaseeq(a, b) (_stricmp(a, b) == 0)\n+#else\n+# define strcaseeq(a, b) (strcasecmp(a, b) == 0)\n+#endif\n+\n+struct TermKeyDriver termkey_driver_ti = {\n+  .name = \"terminfo\",\n+\n+  .new_driver = new_driver_ti,\n+  .free_driver = free_driver_ti,\n+\n+  .start_driver = start_driver_ti,\n+  .stop_driver = stop_driver_ti,\n+\n+  .peekkey = peekkey_ti,\n+};\n+\n+struct TermKeyDriver termkey_driver_csi = {\n+  .name = \"CSI\",\n+\n+  .new_driver = new_driver_csi,\n+  .free_driver = free_driver_csi,\n+\n+  .peekkey = peekkey_csi,\n+};\n+\n+static struct TermKeyDriver *drivers[] = {\n+  &termkey_driver_ti,\n+  &termkey_driver_csi,\n+  NULL,\n+};\n+\n+static struct {\n+  TermKeySym sym;\n+  const char *name;\n+} keynames[] = {\n+  { TERMKEY_SYM_NONE,      \"NONE\" },\n+  { TERMKEY_SYM_BACKSPACE, \"Backspace\" },\n+  { TERMKEY_SYM_TAB,       \"Tab\" },\n+  { TERMKEY_SYM_ENTER,     \"Enter\" },\n+  { TERMKEY_SYM_ESCAPE,    \"Escape\" },\n+  { TERMKEY_SYM_SPACE,     \"Space\" },\n+  { TERMKEY_SYM_DEL,       \"DEL\" },\n+  { TERMKEY_SYM_UP,        \"Up\" },\n+  { TERMKEY_SYM_DOWN,      \"Down\" },\n+  { TERMKEY_SYM_LEFT,      \"Left\" },\n+  { TERMKEY_SYM_RIGHT,     \"Right\" },\n+  { TERMKEY_SYM_BEGIN,     \"Begin\" },\n+  { TERMKEY_SYM_FIND,      \"Find\" },\n+  { TERMKEY_SYM_INSERT,    \"Insert\" },\n+  { TERMKEY_SYM_DELETE,    \"Delete\" },\n+  { TERMKEY_SYM_SELECT,    \"Select\" },\n+  { TERMKEY_SYM_PAGEUP,    \"PageUp\" },\n+  { TERMKEY_SYM_PAGEDOWN,  \"PageDown\" },\n+  { TERMKEY_SYM_HOME,      \"Home\" },\n+  { TERMKEY_SYM_END,       \"End\" },\n+  { TERMKEY_SYM_CANCEL,    \"Cancel\" },\n+  { TERMKEY_SYM_CLEAR,     \"Clear\" },\n+  { TERMKEY_SYM_CLOSE,     \"Close\" },\n+  { TERMKEY_SYM_COMMAND,   \"Command\" },\n+  { TERMKEY_SYM_COPY,      \"Copy\" },\n+  { TERMKEY_SYM_EXIT,      \"Exit\" },\n+  { TERMKEY_SYM_HELP,      \"Help\" },\n+  { TERMKEY_SYM_MARK,      \"Mark\" },\n+  { TERMKEY_SYM_MESSAGE,   \"Message\" },\n+  { TERMKEY_SYM_MOVE,      \"Move\" },\n+  { TERMKEY_SYM_OPEN,      \"Open\" },\n+  { TERMKEY_SYM_OPTIONS,   \"Options\" },\n+  { TERMKEY_SYM_PRINT,     \"Print\" },\n+  { TERMKEY_SYM_REDO,      \"Redo\" },\n+  { TERMKEY_SYM_REFERENCE, \"Reference\" },\n+  { TERMKEY_SYM_REFRESH,   \"Refresh\" },\n+  { TERMKEY_SYM_REPLACE,   \"Replace\" },\n+  { TERMKEY_SYM_RESTART,   \"Restart\" },\n+  { TERMKEY_SYM_RESUME,    \"Resume\" },\n+  { TERMKEY_SYM_SAVE,      \"Save\" },\n+  { TERMKEY_SYM_SUSPEND,   \"Suspend\" },\n+  { TERMKEY_SYM_UNDO,      \"Undo\" },\n+  { TERMKEY_SYM_KP0,       \"KP0\" },\n+  { TERMKEY_SYM_KP1,       \"KP1\" },\n+  { TERMKEY_SYM_KP2,       \"KP2\" },\n+  { TERMKEY_SYM_KP3,       \"KP3\" },\n+  { TERMKEY_SYM_KP4,       \"KP4\" },\n+  { TERMKEY_SYM_KP5,       \"KP5\" },\n+  { TERMKEY_SYM_KP6,       \"KP6\" },\n+  { TERMKEY_SYM_KP7,       \"KP7\" },\n+  { TERMKEY_SYM_KP8,       \"KP8\" },\n+  { TERMKEY_SYM_KP9,       \"KP9\" },\n+  { TERMKEY_SYM_KPENTER,   \"KPEnter\" },\n+  { TERMKEY_SYM_KPPLUS,    \"KPPlus\" },\n+  { TERMKEY_SYM_KPMINUS,   \"KPMinus\" },\n+  { TERMKEY_SYM_KPMULT,    \"KPMult\" },\n+  { TERMKEY_SYM_KPDIV,     \"KPDiv\" },\n+  { TERMKEY_SYM_KPCOMMA,   \"KPComma\" },\n+  { TERMKEY_SYM_KPPERIOD,  \"KPPeriod\" },\n+  { TERMKEY_SYM_KPEQUALS,  \"KPEquals\" },\n+  { 0, NULL },\n+};\n+\n+// Mouse event names\n+static const char *evnames[] = { \"Unknown\", \"Press\", \"Drag\", \"Release\" };\n+\n+#define CHARAT(i) (tk->buffer[tk->buffstart + (i)])\n+\n+#ifdef DEBUG\n+// Some internal debugging functions\n+\n+static void print_buffer(TermKey *tk)\n+{\n+  int i;\n+  for (i = 0; i < tk->buffcount && i < 20; i++) {\n+    fprintf(stderr, \"%02x \", CHARAT(i));\n+  }\n+  if (tk->buffcount > 20) {\n+    fprintf(stderr, \"...\");\n+  }\n+}\n+\n+static void print_key(TermKey *tk, TermKeyKey *key)\n+{\n+  switch (key->type) {\n+  case TERMKEY_TYPE_UNICODE:\n+    fprintf(stderr, \"Unicode codepoint=U+%04lx utf8='%s'\", key->code.codepoint, key->utf8);\n+    break;\n+  case TERMKEY_TYPE_FUNCTION:\n+    fprintf(stderr, \"Function F%d\", key->code.number);\n+    break;\n+  case TERMKEY_TYPE_KEYSYM:\n+    fprintf(stderr, \"Keysym sym=%d(%s)\", key->code.sym, termkey_get_keyname(tk, key->code.sym));\n+    break;\n+  case TERMKEY_TYPE_MOUSE: {\n+    TermKeyMouseEvent ev;\n+    int button, line, col;\n+    termkey_interpret_mouse(tk, key, &ev, &button, &line, &col);\n+    fprintf(stderr, \"Mouse ev=%d button=%d pos=(%d,%d)\\n\", ev, button, line, col);\n+  }\n+  break;\n+  case TERMKEY_TYPE_POSITION: {\n+    int line, col;\n+    termkey_interpret_position(tk, key, &line, &col);\n+    fprintf(stderr, \"Position report pos=(%d,%d)\\n\", line, col);\n+  }\n+  break;\n+  case TERMKEY_TYPE_MODEREPORT: {\n+    int initial, mode, value;\n+    termkey_interpret_modereport(tk, key, &initial, &mode, &value);\n+    fprintf(stderr, \"Mode report mode=%s %d val=%d\\n\", initial == '?' ? \"DEC\" : \"ANSI\", mode,\n+            value);\n+  }\n+  break;\n+  case TERMKEY_TYPE_DCS:\n+    fprintf(stderr, \"Device Control String\");\n+    break;\n+  case TERMKEY_TYPE_OSC:\n+    fprintf(stderr, \"Operating System Control\");\n+    break;\n+  case TERMKEY_TYPE_UNKNOWN_CSI:\n+    fprintf(stderr, \"unknown CSI\\n\");\n+    break;\n+  }\n+\n+  int m = key->modifiers;\n+  fprintf(stderr, \" mod=%s%s%s+%02x\",\n+          (m & TERMKEY_KEYMOD_CTRL ? \"C\" : \"\"),\n+          (m & TERMKEY_KEYMOD_ALT ? \"A\" : \"\"),\n+          (m & TERMKEY_KEYMOD_SHIFT ? \"S\" : \"\"),\n+          m & ~(TERMKEY_KEYMOD_CTRL|TERMKEY_KEYMOD_ALT|TERMKEY_KEYMOD_SHIFT));\n+}\n+\n+static const char *res2str(TermKeyResult res)\n+{\n+  static char errorbuffer[256];\n+\n+  switch (res) {\n+  case TERMKEY_RES_KEY:\n+    return \"TERMKEY_RES_KEY\";\n+  case TERMKEY_RES_EOF:\n+    return \"TERMKEY_RES_EOF\";\n+  case TERMKEY_RES_AGAIN:\n+    return \"TERMKEY_RES_AGAIN\";\n+  case TERMKEY_RES_NONE:\n+    return \"TERMKEY_RES_NONE\";\n+  case TERMKEY_RES_ERROR:\n+    snprintf(errorbuffer, sizeof errorbuffer, \"TERMKEY_RES_ERROR(errno=%d)\\n\", errno);\n+    return (const char *)errorbuffer;\n+  }\n+\n+  return \"unknown\";\n+}\n+#endif\n+\n+TermKeyResult termkey_interpret_string(TermKey *tk, const TermKeyKey *key, const char **strp)\n+{\n+  struct TermKeyDriverNode *p;\n+  for (p = tk->drivers; p; p = p->next) {\n+    if (p->driver == &termkey_driver_csi) {\n+      break;\n+    }\n+  }\n+\n+  if (!p) {\n+    return TERMKEY_RES_NONE;\n+  }\n+\n+  if (key->type != TERMKEY_TYPE_DCS\n+      && key->type != TERMKEY_TYPE_OSC) {\n+    return TERMKEY_RES_NONE;\n+  }\n+\n+  TermKeyCsi *csi = p->info;\n+\n+  if (csi->saved_string_id != key->code.number) {\n+    return TERMKEY_RES_NONE;\n+  }\n+\n+  *strp = csi->saved_string;\n+\n+  return TERMKEY_RES_KEY;\n+}\n+\n+/// Similar to snprintf(str, size, \"%s\", src) except it turns CamelCase into\n+/// space separated values\n+static int snprint_cameltospaces(char *str, size_t size, const char *src)\n+{\n+  int prev_lower = 0;\n+  size_t l = 0;\n+  while (*src && l < size - 1) {\n+    if (isupper(*src) && prev_lower) {\n+      if (str) {\n+        str[l++] = ' ';\n+      }\n+      if (l >= size - 1) {\n+        break;\n+      }\n+    }\n+    prev_lower = islower(*src);\n+    str[l++] = (char)tolower(*src++);\n+  }\n+  str[l] = 0;\n+  // For consistency with snprintf, return the number of bytes that would have\n+  // been written, excluding '\\0'\n+  while (*src) {\n+    if (isupper(*src) && prev_lower) {\n+      l++;\n+    }\n+    prev_lower = islower(*src);\n+    src++; l++;\n+  }\n+  return (int)l;\n+}\n+\n+/// Similar to strcmp(str, strcamel, n) except that:\n+///    it compares CamelCase in strcamel with space separated values in str;\n+///    it takes char**s and updates them\n+/// n counts bytes of strcamel, not str\n+static int strpncmp_camel(const char **strp, const char **strcamelp, size_t n)\n+{\n+  const char *str = *strp, *strcamel = *strcamelp;\n+  int prev_lower = 0;\n+\n+  for (; (*str || *strcamel) && n; n--) {\n+    char b = (char)tolower(*strcamel);\n+    if (isupper(*strcamel) && prev_lower) {\n+      if (*str != ' ') {\n+        break;\n+      }\n+      str++;\n+      if (*str != b) {\n+        break;\n+      }\n+    } else if (*str != b) {\n+      break;\n+    }\n+\n+    prev_lower = islower(*strcamel);\n+\n+    str++;\n+    strcamel++;\n+  }\n+\n+  *strp = str;\n+  *strcamelp = strcamel;\n+  return *str - *strcamel;\n+}\n+\n+static TermKey *termkey_alloc(void)\n+{\n+  TermKey *tk = xmalloc(sizeof(TermKey));\n+  if (!tk) {\n+    return NULL;\n+  }\n+\n+  // Default all the object fields but don't allocate anything\n+\n+  tk->fd = -1;\n+  tk->flags = 0;\n+  tk->canonflags = 0;\n+\n+  tk->buffer = NULL;\n+  tk->buffstart = 0;\n+  tk->buffcount = 0;\n+  tk->buffsize = 256;  // bytes\n+  tk->hightide = 0;\n+\n+#ifdef HAVE_TERMIOS\n+  tk->restore_termios_valid = 0;\n+#endif\n+\n+  tk->ti_getstr_hook = NULL;\n+  tk->ti_getstr_hook_data = NULL;\n+\n+  tk->waittime = 50;  // msec\n+\n+  tk->is_closed = 0;\n+  tk->is_started = 0;\n+\n+  tk->nkeynames = 64;\n+  tk->keynames = NULL;\n+\n+  for (int i = 0; i < 32; i++) {\n+    tk->c0[i].sym = TERMKEY_SYM_NONE;\n+  }\n+\n+  tk->drivers = NULL;\n+\n+  tk->method.emit_codepoint = &emit_codepoint;\n+  tk->method.peekkey_simple = &peekkey_simple;\n+  tk->method.peekkey_mouse = &peekkey_mouse;\n+\n+  return tk;\n+}\n+\n+static int termkey_init(TermKey *tk, const char *term)\n+{\n+  tk->buffer = xmalloc(tk->buffsize);\n+  if (!tk->buffer) {\n+    return 0;\n+  }\n+\n+  tk->keynames = xmalloc(sizeof(tk->keynames[0]) * (size_t)tk->nkeynames);\n+  if (!tk->keynames) {\n+    goto abort_free_buffer;\n+  }\n+\n+  int i;\n+  for (i = 0; i < tk->nkeynames; i++) {\n+    tk->keynames[i] = NULL;\n+  }\n+\n+  for (i = 0; keynames[i].name; i++) {\n+    if (termkey_register_keyname(tk, keynames[i].sym, keynames[i].name) == -1) {\n+      goto abort_free_keynames;\n+    }\n+  }\n+\n+  register_c0(tk, TERMKEY_SYM_TAB,    0x09, NULL);\n+  register_c0(tk, TERMKEY_SYM_ENTER,  0x0d, NULL);\n+  register_c0(tk, TERMKEY_SYM_ESCAPE, 0x1b, NULL);\n+\n+  struct TermKeyDriverNode *tail = NULL;\n+\n+  for (i = 0; drivers[i]; i++) {\n+    void *info = (*drivers[i]->new_driver)(tk, term);\n+    if (!info) {\n+      continue;\n+    }\n+\n+#ifdef DEBUG\n+    fprintf(stderr, \"Loading the %s driver...\\n\", drivers[i]->name);\n+#endif\n+\n+    struct TermKeyDriverNode *thisdrv = xmalloc(sizeof(*thisdrv));\n+    if (!thisdrv) {\n+      goto abort_free_drivers;\n+    }\n+\n+    thisdrv->driver = drivers[i];\n+    thisdrv->info = info;\n+    thisdrv->next = NULL;\n+\n+    if (!tail) {\n+      tk->drivers = thisdrv;\n+    } else {\n+      tail->next = thisdrv;\n+    }\n+\n+    tail = thisdrv;\n+\n+#ifdef DEBUG\n+    fprintf(stderr, \"Loaded %s driver\\n\", drivers[i]->name);\n+#endif\n+  }\n+\n+  if (!tk->drivers) {\n+    errno = ENOENT;\n+    goto abort_free_keynames;\n+  }\n+\n+  return 1;\n+\n+abort_free_drivers:\n+  for (struct TermKeyDriverNode *p = tk->drivers; p;) {\n+    (*p->driver->free_driver)(p->info);\n+    struct TermKeyDriverNode *next = p->next;\n+    xfree(p);\n+    p = next;\n+  }\n+\n+abort_free_keynames:\n+  xfree(tk->keynames);\n+\n+abort_free_buffer:\n+  xfree(tk->buffer);\n+\n+  return 0;\n+}\n+\n+TermKey *termkey_new_abstract(const char *term, int flags)\n+{\n+  TermKey *tk = termkey_alloc();\n+  if (!tk) {\n+    return NULL;\n+  }\n+\n+  tk->fd = -1;\n+\n+  termkey_set_flags(tk, flags);\n+\n+  if (!termkey_init(tk, term)) {\n+    xfree(tk);\n+    return NULL;\n+  }\n+\n+  if (!(flags & TERMKEY_FLAG_NOSTART) && !termkey_start(tk)) {\n+    goto abort;\n+  }\n+\n+  return tk;\n+\n+abort:\n+  xfree(tk);\n+  return NULL;\n+}\n+\n+void termkey_free(TermKey *tk)\n+{\n+  xfree(tk->buffer); tk->buffer = NULL;\n+  xfree(tk->keynames); tk->keynames = NULL;\n+\n+  struct TermKeyDriverNode *p;\n+  for (p = tk->drivers; p;) {\n+    (*p->driver->free_driver)(p->info);\n+    struct TermKeyDriverNode *next = p->next;\n+    xfree(p);\n+    p = next;\n+  }\n+\n+  xfree(tk);\n+}\n+\n+void termkey_destroy(TermKey *tk)\n+{\n+  if (tk->is_started) {\n+    termkey_stop(tk);\n+  }\n+\n+  termkey_free(tk);\n+}\n+\n+void termkey_hook_terminfo_getstr(TermKey *tk, TermKey_Terminfo_Getstr_Hook *hookfn, void *data)\n+{\n+  tk->ti_getstr_hook = hookfn;\n+  tk->ti_getstr_hook_data = data;\n+}\n+\n+int termkey_start(TermKey *tk)\n+{\n+  if (tk->is_started) {\n+    return 1;\n+  }\n+\n+#ifdef HAVE_TERMIOS\n+  if (tk->fd != -1 && !(tk->flags & TERMKEY_FLAG_NOTERMIOS)) {\n+    struct termios termios;\n+    if (tcgetattr(tk->fd, &termios) == 0) {\n+      tk->restore_termios = termios;\n+      tk->restore_termios_valid = 1;\n+\n+      termios.c_iflag &= (tcflag_t) ~(IXON|INLCR|ICRNL);\n+      termios.c_lflag &= (tcflag_t) ~(ICANON|ECHO\n+# ifdef IEXTEN\n+                                      | IEXTEN\n+# endif\n+                                      );\n+      termios.c_cc[VMIN] = 1;\n+      termios.c_cc[VTIME] = 0;\n+\n+      if (tk->flags & TERMKEY_FLAG_CTRLC) {\n+        // want no signal keys at all, so just disable ISIG\n+        termios.c_lflag &= (tcflag_t) ~ISIG;\n+      } else {\n+        // Disable Ctrl-\\==VQUIT and Ctrl-D==VSUSP but leave Ctrl-C as SIGINT\n+        termios.c_cc[VQUIT] = _POSIX_VDISABLE;\n+        termios.c_cc[VSUSP] = _POSIX_VDISABLE;\n+        // Some OSes have Ctrl-Y==VDSUSP\n+# ifdef VDSUSP\n+        termios.c_cc[VDSUSP] = _POSIX_VDISABLE;\n+# endif\n+      }\n+\n+# ifdef DEBUG\n+      fprintf(stderr, \"Setting termios(3) flags\\n\");\n+# endif\n+      tcsetattr(tk->fd, TCSANOW, &termios);\n+    }\n+  }\n+#endif\n+\n+  struct TermKeyDriverNode *p;\n+  for (p = tk->drivers; p; p = p->next) {\n+    if (p->driver->start_driver) {\n+      if (!(*p->driver->start_driver)(tk, p->info)) {\n+        return 0;\n+      }\n+    }\n+  }\n+\n+#ifdef DEBUG\n+  fprintf(stderr, \"Drivers started; termkey instance %p is ready\\n\", tk);\n+#endif\n+\n+  tk->is_started = 1;\n+  return 1;\n+}\n+\n+int termkey_stop(TermKey *tk)\n+{\n+  if (!tk->is_started) {\n+    return 1;\n+  }\n+\n+  struct TermKeyDriverNode *p;\n+  for (p = tk->drivers; p; p = p->next) {\n+    if (p->driver->stop_driver) {\n+      (*p->driver->stop_driver)(tk, p->info);\n+    }\n+  }\n+\n+#ifdef HAVE_TERMIOS\n+  if (tk->restore_termios_valid) {\n+    tcsetattr(tk->fd, TCSANOW, &tk->restore_termios);\n+  }\n+#endif\n+\n+  tk->is_started = 0;\n+\n+  return 1;\n+}\n+\n+void termkey_set_flags(TermKey *tk, int newflags)\n+{\n+  tk->flags = newflags;\n+\n+  if (tk->flags & TERMKEY_FLAG_SPACESYMBOL) {\n+    tk->canonflags |= TERMKEY_CANON_SPACESYMBOL;\n+  } else {\n+    tk->canonflags &= ~TERMKEY_CANON_SPACESYMBOL;\n+  }\n+}\n+\n+int termkey_get_canonflags(TermKey *tk)\n+{\n+  return tk->canonflags;\n+}\n+\n+void termkey_set_canonflags(TermKey *tk, int flags)\n+{\n+  tk->canonflags = flags;\n+\n+  if (tk->canonflags & TERMKEY_CANON_SPACESYMBOL) {\n+    tk->flags |= TERMKEY_FLAG_SPACESYMBOL;\n+  } else {\n+    tk->flags &= ~TERMKEY_FLAG_SPACESYMBOL;\n+  }\n+}\n+\n+size_t termkey_get_buffer_size(TermKey *tk)\n+{\n+  return tk->buffsize;\n+}\n+\n+int termkey_set_buffer_size(TermKey *tk, size_t size)\n+{\n+  unsigned char *buffer = xrealloc(tk->buffer, size);\n+  if (!buffer) {\n+    return 0;\n+  }",
            "html_url": "https://github.com/neovim/neovim/pull/30047#discussion_r1721080142",
            "id": 1721080142,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5mlZlO",
            "original_commit_id": "40c6eef49c4a2925e7376b1f5f9bd319c2410ac9",
            "original_line": 624,
            "original_position": 624,
            "original_start_line": 622,
            "path": "src/nvim/tui/termkey.c",
            "position": null,
            "pull_request_review_id": 2244425659,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30047",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721080142/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-08-18T22:52:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721080142",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30047#discussion_r1721080163"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30047"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721080163"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n```",
            "commit_id": "48a8eb9b07733b85b7a5bee8fd3765f2f79878f9",
            "created_at": "2024-08-18T22:52:08Z",
            "diff_hunk": "@@ -0,0 +1,1333 @@\n+#include <ctype.h>\n+#include <errno.h>\n+#include <stdbool.h>\n+#include <stdio.h>\n+#include <string.h>\n+\n+#include \"nvim/mbyte.h\"\n+#include \"nvim/memory.h\"\n+#include \"nvim/tui/driver-csi.h\"\n+#include \"nvim/tui/driver-ti.h\"\n+#include \"nvim/tui/termkey-internal.h\"\n+#include \"nvim/tui/termkey.h\"\n+#include \"nvim/tui/termkey_defs.h\"\n+\n+#ifndef _WIN32\n+# include <poll.h>\n+# include <strings.h>\n+# include <unistd.h>\n+#else\n+# include <io.h>\n+#endif\n+\n+#ifdef INCLUDE_GENERATED_DECLARATIONS\n+# include \"tui/termkey.c.generated.h\"\n+#endif\n+\n+#ifdef _MSC_VER\n+# define strcaseeq(a, b) (_stricmp(a, b) == 0)\n+#else\n+# define strcaseeq(a, b) (strcasecmp(a, b) == 0)\n+#endif\n+\n+struct TermKeyDriver termkey_driver_ti = {\n+  .name = \"terminfo\",\n+\n+  .new_driver = new_driver_ti,\n+  .free_driver = free_driver_ti,\n+\n+  .start_driver = start_driver_ti,\n+  .stop_driver = stop_driver_ti,\n+\n+  .peekkey = peekkey_ti,\n+};\n+\n+struct TermKeyDriver termkey_driver_csi = {\n+  .name = \"CSI\",\n+\n+  .new_driver = new_driver_csi,\n+  .free_driver = free_driver_csi,\n+\n+  .peekkey = peekkey_csi,\n+};\n+\n+static struct TermKeyDriver *drivers[] = {\n+  &termkey_driver_ti,\n+  &termkey_driver_csi,\n+  NULL,\n+};\n+\n+static struct {\n+  TermKeySym sym;\n+  const char *name;\n+} keynames[] = {\n+  { TERMKEY_SYM_NONE,      \"NONE\" },\n+  { TERMKEY_SYM_BACKSPACE, \"Backspace\" },\n+  { TERMKEY_SYM_TAB,       \"Tab\" },\n+  { TERMKEY_SYM_ENTER,     \"Enter\" },\n+  { TERMKEY_SYM_ESCAPE,    \"Escape\" },\n+  { TERMKEY_SYM_SPACE,     \"Space\" },\n+  { TERMKEY_SYM_DEL,       \"DEL\" },\n+  { TERMKEY_SYM_UP,        \"Up\" },\n+  { TERMKEY_SYM_DOWN,      \"Down\" },\n+  { TERMKEY_SYM_LEFT,      \"Left\" },\n+  { TERMKEY_SYM_RIGHT,     \"Right\" },\n+  { TERMKEY_SYM_BEGIN,     \"Begin\" },\n+  { TERMKEY_SYM_FIND,      \"Find\" },\n+  { TERMKEY_SYM_INSERT,    \"Insert\" },\n+  { TERMKEY_SYM_DELETE,    \"Delete\" },\n+  { TERMKEY_SYM_SELECT,    \"Select\" },\n+  { TERMKEY_SYM_PAGEUP,    \"PageUp\" },\n+  { TERMKEY_SYM_PAGEDOWN,  \"PageDown\" },\n+  { TERMKEY_SYM_HOME,      \"Home\" },\n+  { TERMKEY_SYM_END,       \"End\" },\n+  { TERMKEY_SYM_CANCEL,    \"Cancel\" },\n+  { TERMKEY_SYM_CLEAR,     \"Clear\" },\n+  { TERMKEY_SYM_CLOSE,     \"Close\" },\n+  { TERMKEY_SYM_COMMAND,   \"Command\" },\n+  { TERMKEY_SYM_COPY,      \"Copy\" },\n+  { TERMKEY_SYM_EXIT,      \"Exit\" },\n+  { TERMKEY_SYM_HELP,      \"Help\" },\n+  { TERMKEY_SYM_MARK,      \"Mark\" },\n+  { TERMKEY_SYM_MESSAGE,   \"Message\" },\n+  { TERMKEY_SYM_MOVE,      \"Move\" },\n+  { TERMKEY_SYM_OPEN,      \"Open\" },\n+  { TERMKEY_SYM_OPTIONS,   \"Options\" },\n+  { TERMKEY_SYM_PRINT,     \"Print\" },\n+  { TERMKEY_SYM_REDO,      \"Redo\" },\n+  { TERMKEY_SYM_REFERENCE, \"Reference\" },\n+  { TERMKEY_SYM_REFRESH,   \"Refresh\" },\n+  { TERMKEY_SYM_REPLACE,   \"Replace\" },\n+  { TERMKEY_SYM_RESTART,   \"Restart\" },\n+  { TERMKEY_SYM_RESUME,    \"Resume\" },\n+  { TERMKEY_SYM_SAVE,      \"Save\" },\n+  { TERMKEY_SYM_SUSPEND,   \"Suspend\" },\n+  { TERMKEY_SYM_UNDO,      \"Undo\" },\n+  { TERMKEY_SYM_KP0,       \"KP0\" },\n+  { TERMKEY_SYM_KP1,       \"KP1\" },\n+  { TERMKEY_SYM_KP2,       \"KP2\" },\n+  { TERMKEY_SYM_KP3,       \"KP3\" },\n+  { TERMKEY_SYM_KP4,       \"KP4\" },\n+  { TERMKEY_SYM_KP5,       \"KP5\" },\n+  { TERMKEY_SYM_KP6,       \"KP6\" },\n+  { TERMKEY_SYM_KP7,       \"KP7\" },\n+  { TERMKEY_SYM_KP8,       \"KP8\" },\n+  { TERMKEY_SYM_KP9,       \"KP9\" },\n+  { TERMKEY_SYM_KPENTER,   \"KPEnter\" },\n+  { TERMKEY_SYM_KPPLUS,    \"KPPlus\" },\n+  { TERMKEY_SYM_KPMINUS,   \"KPMinus\" },\n+  { TERMKEY_SYM_KPMULT,    \"KPMult\" },\n+  { TERMKEY_SYM_KPDIV,     \"KPDiv\" },\n+  { TERMKEY_SYM_KPCOMMA,   \"KPComma\" },\n+  { TERMKEY_SYM_KPPERIOD,  \"KPPeriod\" },\n+  { TERMKEY_SYM_KPEQUALS,  \"KPEquals\" },\n+  { 0, NULL },\n+};\n+\n+// Mouse event names\n+static const char *evnames[] = { \"Unknown\", \"Press\", \"Drag\", \"Release\" };\n+\n+#define CHARAT(i) (tk->buffer[tk->buffstart + (i)])\n+\n+#ifdef DEBUG\n+// Some internal debugging functions\n+\n+static void print_buffer(TermKey *tk)\n+{\n+  int i;\n+  for (i = 0; i < tk->buffcount && i < 20; i++) {\n+    fprintf(stderr, \"%02x \", CHARAT(i));\n+  }\n+  if (tk->buffcount > 20) {\n+    fprintf(stderr, \"...\");\n+  }\n+}\n+\n+static void print_key(TermKey *tk, TermKeyKey *key)\n+{\n+  switch (key->type) {\n+  case TERMKEY_TYPE_UNICODE:\n+    fprintf(stderr, \"Unicode codepoint=U+%04lx utf8='%s'\", key->code.codepoint, key->utf8);\n+    break;\n+  case TERMKEY_TYPE_FUNCTION:\n+    fprintf(stderr, \"Function F%d\", key->code.number);\n+    break;\n+  case TERMKEY_TYPE_KEYSYM:\n+    fprintf(stderr, \"Keysym sym=%d(%s)\", key->code.sym, termkey_get_keyname(tk, key->code.sym));\n+    break;\n+  case TERMKEY_TYPE_MOUSE: {\n+    TermKeyMouseEvent ev;\n+    int button, line, col;\n+    termkey_interpret_mouse(tk, key, &ev, &button, &line, &col);\n+    fprintf(stderr, \"Mouse ev=%d button=%d pos=(%d,%d)\\n\", ev, button, line, col);\n+  }\n+  break;\n+  case TERMKEY_TYPE_POSITION: {\n+    int line, col;\n+    termkey_interpret_position(tk, key, &line, &col);\n+    fprintf(stderr, \"Position report pos=(%d,%d)\\n\", line, col);\n+  }\n+  break;\n+  case TERMKEY_TYPE_MODEREPORT: {\n+    int initial, mode, value;\n+    termkey_interpret_modereport(tk, key, &initial, &mode, &value);\n+    fprintf(stderr, \"Mode report mode=%s %d val=%d\\n\", initial == '?' ? \"DEC\" : \"ANSI\", mode,\n+            value);\n+  }\n+  break;\n+  case TERMKEY_TYPE_DCS:\n+    fprintf(stderr, \"Device Control String\");\n+    break;\n+  case TERMKEY_TYPE_OSC:\n+    fprintf(stderr, \"Operating System Control\");\n+    break;\n+  case TERMKEY_TYPE_UNKNOWN_CSI:\n+    fprintf(stderr, \"unknown CSI\\n\");\n+    break;\n+  }\n+\n+  int m = key->modifiers;\n+  fprintf(stderr, \" mod=%s%s%s+%02x\",\n+          (m & TERMKEY_KEYMOD_CTRL ? \"C\" : \"\"),\n+          (m & TERMKEY_KEYMOD_ALT ? \"A\" : \"\"),\n+          (m & TERMKEY_KEYMOD_SHIFT ? \"S\" : \"\"),\n+          m & ~(TERMKEY_KEYMOD_CTRL|TERMKEY_KEYMOD_ALT|TERMKEY_KEYMOD_SHIFT));\n+}\n+\n+static const char *res2str(TermKeyResult res)\n+{\n+  static char errorbuffer[256];\n+\n+  switch (res) {\n+  case TERMKEY_RES_KEY:\n+    return \"TERMKEY_RES_KEY\";\n+  case TERMKEY_RES_EOF:\n+    return \"TERMKEY_RES_EOF\";\n+  case TERMKEY_RES_AGAIN:\n+    return \"TERMKEY_RES_AGAIN\";\n+  case TERMKEY_RES_NONE:\n+    return \"TERMKEY_RES_NONE\";\n+  case TERMKEY_RES_ERROR:\n+    snprintf(errorbuffer, sizeof errorbuffer, \"TERMKEY_RES_ERROR(errno=%d)\\n\", errno);\n+    return (const char *)errorbuffer;\n+  }\n+\n+  return \"unknown\";\n+}\n+#endif\n+\n+TermKeyResult termkey_interpret_string(TermKey *tk, const TermKeyKey *key, const char **strp)\n+{\n+  struct TermKeyDriverNode *p;\n+  for (p = tk->drivers; p; p = p->next) {\n+    if (p->driver == &termkey_driver_csi) {\n+      break;\n+    }\n+  }\n+\n+  if (!p) {\n+    return TERMKEY_RES_NONE;\n+  }\n+\n+  if (key->type != TERMKEY_TYPE_DCS\n+      && key->type != TERMKEY_TYPE_OSC) {\n+    return TERMKEY_RES_NONE;\n+  }\n+\n+  TermKeyCsi *csi = p->info;\n+\n+  if (csi->saved_string_id != key->code.number) {\n+    return TERMKEY_RES_NONE;\n+  }\n+\n+  *strp = csi->saved_string;\n+\n+  return TERMKEY_RES_KEY;\n+}\n+\n+/// Similar to snprintf(str, size, \"%s\", src) except it turns CamelCase into\n+/// space separated values\n+static int snprint_cameltospaces(char *str, size_t size, const char *src)\n+{\n+  int prev_lower = 0;\n+  size_t l = 0;\n+  while (*src && l < size - 1) {\n+    if (isupper(*src) && prev_lower) {\n+      if (str) {\n+        str[l++] = ' ';\n+      }\n+      if (l >= size - 1) {\n+        break;\n+      }\n+    }\n+    prev_lower = islower(*src);\n+    str[l++] = (char)tolower(*src++);\n+  }\n+  str[l] = 0;\n+  // For consistency with snprintf, return the number of bytes that would have\n+  // been written, excluding '\\0'\n+  while (*src) {\n+    if (isupper(*src) && prev_lower) {\n+      l++;\n+    }\n+    prev_lower = islower(*src);\n+    src++; l++;\n+  }\n+  return (int)l;\n+}\n+\n+/// Similar to strcmp(str, strcamel, n) except that:\n+///    it compares CamelCase in strcamel with space separated values in str;\n+///    it takes char**s and updates them\n+/// n counts bytes of strcamel, not str\n+static int strpncmp_camel(const char **strp, const char **strcamelp, size_t n)\n+{\n+  const char *str = *strp, *strcamel = *strcamelp;\n+  int prev_lower = 0;\n+\n+  for (; (*str || *strcamel) && n; n--) {\n+    char b = (char)tolower(*strcamel);\n+    if (isupper(*strcamel) && prev_lower) {\n+      if (*str != ' ') {\n+        break;\n+      }\n+      str++;\n+      if (*str != b) {\n+        break;\n+      }\n+    } else if (*str != b) {\n+      break;\n+    }\n+\n+    prev_lower = islower(*strcamel);\n+\n+    str++;\n+    strcamel++;\n+  }\n+\n+  *strp = str;\n+  *strcamelp = strcamel;\n+  return *str - *strcamel;\n+}\n+\n+static TermKey *termkey_alloc(void)\n+{\n+  TermKey *tk = xmalloc(sizeof(TermKey));\n+  if (!tk) {\n+    return NULL;\n+  }\n+\n+  // Default all the object fields but don't allocate anything\n+\n+  tk->fd = -1;\n+  tk->flags = 0;\n+  tk->canonflags = 0;\n+\n+  tk->buffer = NULL;\n+  tk->buffstart = 0;\n+  tk->buffcount = 0;\n+  tk->buffsize = 256;  // bytes\n+  tk->hightide = 0;\n+\n+#ifdef HAVE_TERMIOS\n+  tk->restore_termios_valid = 0;\n+#endif\n+\n+  tk->ti_getstr_hook = NULL;\n+  tk->ti_getstr_hook_data = NULL;\n+\n+  tk->waittime = 50;  // msec\n+\n+  tk->is_closed = 0;\n+  tk->is_started = 0;\n+\n+  tk->nkeynames = 64;\n+  tk->keynames = NULL;\n+\n+  for (int i = 0; i < 32; i++) {\n+    tk->c0[i].sym = TERMKEY_SYM_NONE;\n+  }\n+\n+  tk->drivers = NULL;\n+\n+  tk->method.emit_codepoint = &emit_codepoint;\n+  tk->method.peekkey_simple = &peekkey_simple;\n+  tk->method.peekkey_mouse = &peekkey_mouse;\n+\n+  return tk;\n+}\n+\n+static int termkey_init(TermKey *tk, const char *term)\n+{\n+  tk->buffer = xmalloc(tk->buffsize);\n+  if (!tk->buffer) {\n+    return 0;\n+  }\n+\n+  tk->keynames = xmalloc(sizeof(tk->keynames[0]) * (size_t)tk->nkeynames);\n+  if (!tk->keynames) {\n+    goto abort_free_buffer;\n+  }\n+\n+  int i;\n+  for (i = 0; i < tk->nkeynames; i++) {\n+    tk->keynames[i] = NULL;\n+  }\n+\n+  for (i = 0; keynames[i].name; i++) {\n+    if (termkey_register_keyname(tk, keynames[i].sym, keynames[i].name) == -1) {\n+      goto abort_free_keynames;\n+    }\n+  }\n+\n+  register_c0(tk, TERMKEY_SYM_TAB,    0x09, NULL);\n+  register_c0(tk, TERMKEY_SYM_ENTER,  0x0d, NULL);\n+  register_c0(tk, TERMKEY_SYM_ESCAPE, 0x1b, NULL);\n+\n+  struct TermKeyDriverNode *tail = NULL;\n+\n+  for (i = 0; drivers[i]; i++) {\n+    void *info = (*drivers[i]->new_driver)(tk, term);\n+    if (!info) {\n+      continue;\n+    }\n+\n+#ifdef DEBUG\n+    fprintf(stderr, \"Loading the %s driver...\\n\", drivers[i]->name);\n+#endif\n+\n+    struct TermKeyDriverNode *thisdrv = xmalloc(sizeof(*thisdrv));\n+    if (!thisdrv) {\n+      goto abort_free_drivers;\n+    }\n+\n+    thisdrv->driver = drivers[i];\n+    thisdrv->info = info;\n+    thisdrv->next = NULL;\n+\n+    if (!tail) {\n+      tk->drivers = thisdrv;\n+    } else {\n+      tail->next = thisdrv;\n+    }\n+\n+    tail = thisdrv;\n+\n+#ifdef DEBUG\n+    fprintf(stderr, \"Loaded %s driver\\n\", drivers[i]->name);\n+#endif\n+  }\n+\n+  if (!tk->drivers) {\n+    errno = ENOENT;\n+    goto abort_free_keynames;\n+  }\n+\n+  return 1;\n+\n+abort_free_drivers:\n+  for (struct TermKeyDriverNode *p = tk->drivers; p;) {\n+    (*p->driver->free_driver)(p->info);\n+    struct TermKeyDriverNode *next = p->next;\n+    xfree(p);\n+    p = next;\n+  }\n+\n+abort_free_keynames:\n+  xfree(tk->keynames);\n+\n+abort_free_buffer:\n+  xfree(tk->buffer);\n+\n+  return 0;\n+}\n+\n+TermKey *termkey_new_abstract(const char *term, int flags)\n+{\n+  TermKey *tk = termkey_alloc();\n+  if (!tk) {\n+    return NULL;\n+  }\n+\n+  tk->fd = -1;\n+\n+  termkey_set_flags(tk, flags);\n+\n+  if (!termkey_init(tk, term)) {\n+    xfree(tk);\n+    return NULL;\n+  }\n+\n+  if (!(flags & TERMKEY_FLAG_NOSTART) && !termkey_start(tk)) {\n+    goto abort;\n+  }\n+\n+  return tk;\n+\n+abort:\n+  xfree(tk);\n+  return NULL;\n+}\n+\n+void termkey_free(TermKey *tk)\n+{\n+  xfree(tk->buffer); tk->buffer = NULL;\n+  xfree(tk->keynames); tk->keynames = NULL;\n+\n+  struct TermKeyDriverNode *p;\n+  for (p = tk->drivers; p;) {\n+    (*p->driver->free_driver)(p->info);\n+    struct TermKeyDriverNode *next = p->next;\n+    xfree(p);\n+    p = next;\n+  }\n+\n+  xfree(tk);\n+}\n+\n+void termkey_destroy(TermKey *tk)\n+{\n+  if (tk->is_started) {\n+    termkey_stop(tk);\n+  }\n+\n+  termkey_free(tk);\n+}\n+\n+void termkey_hook_terminfo_getstr(TermKey *tk, TermKey_Terminfo_Getstr_Hook *hookfn, void *data)\n+{\n+  tk->ti_getstr_hook = hookfn;\n+  tk->ti_getstr_hook_data = data;\n+}\n+\n+int termkey_start(TermKey *tk)\n+{\n+  if (tk->is_started) {\n+    return 1;\n+  }\n+\n+#ifdef HAVE_TERMIOS\n+  if (tk->fd != -1 && !(tk->flags & TERMKEY_FLAG_NOTERMIOS)) {\n+    struct termios termios;\n+    if (tcgetattr(tk->fd, &termios) == 0) {\n+      tk->restore_termios = termios;\n+      tk->restore_termios_valid = 1;\n+\n+      termios.c_iflag &= (tcflag_t) ~(IXON|INLCR|ICRNL);\n+      termios.c_lflag &= (tcflag_t) ~(ICANON|ECHO\n+# ifdef IEXTEN\n+                                      | IEXTEN\n+# endif\n+                                      );\n+      termios.c_cc[VMIN] = 1;\n+      termios.c_cc[VTIME] = 0;\n+\n+      if (tk->flags & TERMKEY_FLAG_CTRLC) {\n+        // want no signal keys at all, so just disable ISIG\n+        termios.c_lflag &= (tcflag_t) ~ISIG;\n+      } else {\n+        // Disable Ctrl-\\==VQUIT and Ctrl-D==VSUSP but leave Ctrl-C as SIGINT\n+        termios.c_cc[VQUIT] = _POSIX_VDISABLE;\n+        termios.c_cc[VSUSP] = _POSIX_VDISABLE;\n+        // Some OSes have Ctrl-Y==VDSUSP\n+# ifdef VDSUSP\n+        termios.c_cc[VDSUSP] = _POSIX_VDISABLE;\n+# endif\n+      }\n+\n+# ifdef DEBUG\n+      fprintf(stderr, \"Setting termios(3) flags\\n\");\n+# endif\n+      tcsetattr(tk->fd, TCSANOW, &termios);\n+    }\n+  }\n+#endif\n+\n+  struct TermKeyDriverNode *p;\n+  for (p = tk->drivers; p; p = p->next) {\n+    if (p->driver->start_driver) {\n+      if (!(*p->driver->start_driver)(tk, p->info)) {\n+        return 0;\n+      }\n+    }\n+  }\n+\n+#ifdef DEBUG\n+  fprintf(stderr, \"Drivers started; termkey instance %p is ready\\n\", tk);\n+#endif\n+\n+  tk->is_started = 1;\n+  return 1;\n+}\n+\n+int termkey_stop(TermKey *tk)\n+{\n+  if (!tk->is_started) {\n+    return 1;\n+  }\n+\n+  struct TermKeyDriverNode *p;\n+  for (p = tk->drivers; p; p = p->next) {\n+    if (p->driver->stop_driver) {\n+      (*p->driver->stop_driver)(tk, p->info);\n+    }\n+  }\n+\n+#ifdef HAVE_TERMIOS\n+  if (tk->restore_termios_valid) {\n+    tcsetattr(tk->fd, TCSANOW, &tk->restore_termios);\n+  }\n+#endif\n+\n+  tk->is_started = 0;\n+\n+  return 1;\n+}\n+\n+void termkey_set_flags(TermKey *tk, int newflags)\n+{\n+  tk->flags = newflags;\n+\n+  if (tk->flags & TERMKEY_FLAG_SPACESYMBOL) {\n+    tk->canonflags |= TERMKEY_CANON_SPACESYMBOL;\n+  } else {\n+    tk->canonflags &= ~TERMKEY_CANON_SPACESYMBOL;\n+  }\n+}\n+\n+int termkey_get_canonflags(TermKey *tk)\n+{\n+  return tk->canonflags;\n+}\n+\n+void termkey_set_canonflags(TermKey *tk, int flags)\n+{\n+  tk->canonflags = flags;\n+\n+  if (tk->canonflags & TERMKEY_CANON_SPACESYMBOL) {\n+    tk->flags |= TERMKEY_FLAG_SPACESYMBOL;\n+  } else {\n+    tk->flags &= ~TERMKEY_FLAG_SPACESYMBOL;\n+  }\n+}\n+\n+size_t termkey_get_buffer_size(TermKey *tk)\n+{\n+  return tk->buffsize;\n+}\n+\n+int termkey_set_buffer_size(TermKey *tk, size_t size)\n+{\n+  unsigned char *buffer = xrealloc(tk->buffer, size);\n+  if (!buffer) {\n+    return 0;\n+  }\n+\n+  tk->buffer = buffer;\n+  tk->buffsize = size;\n+\n+  return 1;\n+}\n+\n+size_t termkey_get_buffer_remaining(TermKey *tk)\n+{\n+  // Return the total number of free bytes in the buffer, because that's what\n+  // is available to the user.\n+  return tk->buffsize - tk->buffcount;\n+}\n+\n+static void eat_bytes(TermKey *tk, size_t count)\n+{\n+  if (count >= tk->buffcount) {\n+    tk->buffstart = 0;\n+    tk->buffcount = 0;\n+    return;\n+  }\n+\n+  tk->buffstart += count;\n+  tk->buffcount -= count;\n+}\n+\n+// TODO(dundargoc): we should be able to replace this with utf_char2bytes from mbyte.c\n+int fill_utf8(int codepoint, char *str)\n+{\n+  int nbytes = utf_char2len(codepoint);\n+\n+  str[nbytes] = 0;\n+\n+  // This is easier done backwards\n+  int b = nbytes;\n+  while (b > 1) {\n+    b--;\n+    str[b] = (char)0x80 | (codepoint & 0x3f);\n+    codepoint >>= 6;\n+  }\n+\n+  switch (nbytes) {\n+  case 1:\n+    str[0] = (codepoint & 0x7f); break;\n+  case 2:\n+    str[0] = (char)0xc0 | (codepoint & 0x1f); break;\n+  case 3:\n+    str[0] = (char)0xe0 | (codepoint & 0x0f); break;\n+  case 4:\n+    str[0] = (char)0xf0 | (codepoint & 0x07); break;\n+  case 5:\n+    str[0] = (char)0xf8 | (codepoint & 0x03); break;\n+  case 6:\n+    str[0] = (char)0xfc | (codepoint & 0x01); break;\n+  }\n+\n+  return nbytes;\n+}\n+\n+#define UTF8_INVALID 0xFFFD\n+static TermKeyResult parse_utf8(const unsigned char *bytes, size_t len, int *cp, size_t *nbytep)\n+{\n+  unsigned nbytes;\n+\n+  unsigned char b0 = bytes[0];\n+\n+  if (b0 < 0x80) {\n+    // Single byte ASCII\n+    *cp = b0;\n+    *nbytep = 1;\n+    return TERMKEY_RES_KEY;\n+  } else if (b0 < 0xc0) {\n+    // Starts with a continuation byte - that's not right\n+    *cp = UTF8_INVALID;\n+    *nbytep = 1;\n+    return TERMKEY_RES_KEY;\n+  } else if (b0 < 0xe0) {\n+    nbytes = 2;\n+    *cp = b0 & 0x1f;\n+  } else if (b0 < 0xf0) {\n+    nbytes = 3;\n+    *cp = b0 & 0x0f;\n+  } else if (b0 < 0xf8) {\n+    nbytes = 4;\n+    *cp = b0 & 0x07;\n+  } else if (b0 < 0xfc) {\n+    nbytes = 5;\n+    *cp = b0 & 0x03;\n+  } else if (b0 < 0xfe) {\n+    nbytes = 6;\n+    *cp = b0 & 0x01;\n+  } else {\n+    *cp = UTF8_INVALID;\n+    *nbytep = 1;\n+    return TERMKEY_RES_KEY;\n+  }\n+\n+  for (unsigned b = 1; b < nbytes; b++) {\n+    unsigned char cb;\n+\n+    if (b >= len) {\n+      return TERMKEY_RES_AGAIN;\n+    }\n+\n+    cb = bytes[b];\n+    if (cb < 0x80 || cb >= 0xc0) {\n+      *cp = UTF8_INVALID;\n+      *nbytep = b;\n+      return TERMKEY_RES_KEY;\n+    }\n+\n+    *cp <<= 6;\n+    *cp |= cb & 0x3f;\n+  }\n+\n+  // Check for overlong sequences\n+  if ((int)nbytes > utf_char2len(*cp)) {\n+    *cp = UTF8_INVALID;\n+  }\n+\n+  // Check for UTF-16 surrogates or invalid *cps\n+  if ((*cp >= 0xD800 && *cp <= 0xDFFF)\n+      || *cp == 0xFFFE\n+      || *cp == 0xFFFF) {\n+    *cp = UTF8_INVALID;\n+  }\n+\n+  *nbytep = nbytes;\n+  return TERMKEY_RES_KEY;\n+}\n+\n+static void emit_codepoint(TermKey *tk, int codepoint, TermKeyKey *key)\n+{\n+  if (codepoint == 0) {\n+    // ASCII NUL = Ctrl-Space\n+    key->type = TERMKEY_TYPE_KEYSYM;\n+    key->code.sym = TERMKEY_SYM_SPACE;\n+    key->modifiers = TERMKEY_KEYMOD_CTRL;\n+  } else if (codepoint < 0x20) {\n+    // C0 range\n+    key->code.codepoint = 0;\n+    key->modifiers = 0;\n+\n+    if (!(tk->flags & TERMKEY_FLAG_NOINTERPRET) && tk->c0[codepoint].sym != TERMKEY_SYM_UNKNOWN) {\n+      key->code.sym = tk->c0[codepoint].sym;\n+      key->modifiers |= tk->c0[codepoint].modifier_set;\n+    }\n+\n+    if (!key->code.sym) {\n+      key->type = TERMKEY_TYPE_UNICODE;\n+      // Generically modified Unicode ought not report the SHIFT state, or else\n+      // we get into complications trying to report Shift-; vs : and so on...\n+      // In order to be able to represent Ctrl-Shift-A as CTRL modified\n+      // unicode A, we need to call Ctrl-A simply 'a', lowercase\n+      if (codepoint + 0x40 >= 'A' && codepoint + 0x40 <= 'Z') {\n+        // it's a letter - use lowercase instead\n+        key->code.codepoint = codepoint + 0x60;\n+      } else {\n+        key->code.codepoint = codepoint + 0x40;\n+      }\n+      key->modifiers = TERMKEY_KEYMOD_CTRL;\n+    } else {\n+      key->type = TERMKEY_TYPE_KEYSYM;\n+    }\n+  } else if (codepoint == 0x7f && !(tk->flags & TERMKEY_FLAG_NOINTERPRET)) {\n+    // ASCII DEL\n+    key->type = TERMKEY_TYPE_KEYSYM;\n+    key->code.sym = TERMKEY_SYM_DEL;\n+    key->modifiers = 0;\n+  } else if (codepoint >= 0x20 && codepoint < 0x80) {\n+    // ASCII lowbyte range\n+    key->type = TERMKEY_TYPE_UNICODE;\n+    key->code.codepoint = codepoint;\n+    key->modifiers = 0;\n+  } else if (codepoint >= 0x80 && codepoint < 0xa0) {\n+    // UTF-8 never starts with a C1 byte. So we can be sure of these\n+    key->type = TERMKEY_TYPE_UNICODE;\n+    key->code.codepoint = codepoint - 0x40;\n+    key->modifiers = TERMKEY_KEYMOD_CTRL|TERMKEY_KEYMOD_ALT;\n+  } else {\n+    // UTF-8 codepoint\n+    key->type = TERMKEY_TYPE_UNICODE;\n+    key->code.codepoint = codepoint;\n+    key->modifiers = 0;\n+  }\n+\n+  termkey_canonicalise(tk, key);\n+\n+  if (key->type == TERMKEY_TYPE_UNICODE) {\n+    fill_utf8(key->code.codepoint, key->utf8);\n+  }\n+}\n+\n+void termkey_canonicalise(TermKey *tk, TermKeyKey *key)\n+{\n+  int flags = tk->canonflags;\n+\n+  if (flags & TERMKEY_CANON_SPACESYMBOL) {\n+    if (key->type == TERMKEY_TYPE_UNICODE && key->code.codepoint == 0x20) {\n+      key->type = TERMKEY_TYPE_KEYSYM;\n+      key->code.sym = TERMKEY_SYM_SPACE;\n+    }\n+  } else {\n+    if (key->type == TERMKEY_TYPE_KEYSYM && key->code.sym == TERMKEY_SYM_SPACE) {\n+      key->type = TERMKEY_TYPE_UNICODE;\n+      key->code.codepoint = 0x20;\n+      fill_utf8(key->code.codepoint, key->utf8);\n+    }\n+  }\n+\n+  if (flags & TERMKEY_CANON_DELBS) {\n+    if (key->type == TERMKEY_TYPE_KEYSYM && key->code.sym == TERMKEY_SYM_DEL) {\n+      key->code.sym = TERMKEY_SYM_BACKSPACE;\n+    }\n+  }\n+}\n+\n+static TermKeyResult peekkey(TermKey *tk, TermKeyKey *key, int force, size_t *nbytep)\n+{\n+  int again = 0;\n+\n+  if (!tk->is_started) {\n+    errno = EINVAL;\n+    return TERMKEY_RES_ERROR;\n+  }\n+\n+#ifdef DEBUG\n+  fprintf(stderr, \"getkey(force=%d): buffer \", force);\n+  print_buffer(tk);\n+  fprintf(stderr, \"\\n\");\n+#endif\n+\n+  if (tk->hightide) {\n+    tk->buffstart += tk->hightide;\n+    tk->buffcount -= tk->hightide;\n+    tk->hightide = 0;\n+  }\n+\n+  TermKeyResult ret;\n+  struct TermKeyDriverNode *p;\n+  for (p = tk->drivers; p; p = p->next) {\n+    ret = (p->driver->peekkey)(tk, p->info, key, force, nbytep);\n+\n+#ifdef DEBUG\n+    fprintf(stderr, \"Driver %s yields %s\\n\", p->driver->name, res2str(ret));\n+#endif\n+\n+    switch (ret) {\n+    case TERMKEY_RES_KEY:\n+#ifdef DEBUG\n+      print_key(tk, key); fprintf(stderr, \"\\n\");\n+#endif\n+      // Slide the data down to stop it running away\n+      {\n+        size_t halfsize = tk->buffsize / 2;\n+\n+        if (tk->buffstart > halfsize) {\n+          memcpy(tk->buffer, tk->buffer + halfsize, halfsize);\n+          tk->buffstart -= halfsize;\n+        }\n+      }\n+      FALLTHROUGH;\n+    case TERMKEY_RES_EOF:\n+    case TERMKEY_RES_ERROR:\n+      return ret;\n+\n+    case TERMKEY_RES_AGAIN:\n+      if (!force) {\n+        again = 1;\n+      }\n+      FALLTHROUGH;\n+    case TERMKEY_RES_NONE:\n+      break;\n+    }\n+  }\n+\n+  if (again) {\n+    return TERMKEY_RES_AGAIN;\n+  }\n+\n+  ret = peekkey_simple(tk, key, force, nbytep);\n+\n+#ifdef DEBUG\n+  fprintf(stderr, \"getkey_simple(force=%d) yields %s\\n\", force, res2str(ret));\n+  if (ret == TERMKEY_RES_KEY) {\n+    print_key(tk, key); fprintf(stderr, \"\\n\");\n+  }\n+#endif\n+\n+  return ret;\n+}\n+\n+static TermKeyResult peekkey_simple(TermKey *tk, TermKeyKey *key, int force, size_t *nbytep)\n+{\n+  if (tk->buffcount == 0) {\n+    return tk->is_closed ? TERMKEY_RES_EOF : TERMKEY_RES_NONE;\n+  }\n+\n+  unsigned char b0 = CHARAT(0);\n+\n+  if (b0 == 0x1b) {\n+    // Escape-prefixed value? Might therefore be Alt+key\n+    if (tk->buffcount == 1) {\n+      // This might be an <Esc> press, or it may want to be part of a longer\n+      // sequence\n+      if (!force) {\n+        return TERMKEY_RES_AGAIN;\n+      }\n+\n+      (*tk->method.emit_codepoint)(tk, b0, key);\n+      *nbytep = 1;\n+      return TERMKEY_RES_KEY;\n+    }\n+\n+    // Try another key there\n+    tk->buffstart++;\n+    tk->buffcount--;\n+\n+    // Run the full driver\n+    TermKeyResult metakey_result = peekkey(tk, key, force, nbytep);\n+\n+    tk->buffstart--;\n+    tk->buffcount++;\n+\n+    switch (metakey_result) {\n+    case TERMKEY_RES_KEY:\n+      key->modifiers |= TERMKEY_KEYMOD_ALT;\n+      (*nbytep)++;\n+      break;\n+\n+    case TERMKEY_RES_NONE:\n+    case TERMKEY_RES_EOF:\n+    case TERMKEY_RES_AGAIN:\n+    case TERMKEY_RES_ERROR:\n+      break;\n+    }\n+\n+    return metakey_result;\n+  } else if (b0 < 0xa0) {\n+    // Single byte C0, G0 or C1 - C1 is never UTF-8 initial byte\n+    (*tk->method.emit_codepoint)(tk, b0, key);\n+    *nbytep = 1;\n+    return TERMKEY_RES_KEY;\n+  } else if (tk->flags & TERMKEY_FLAG_UTF8) {\n+    // Some UTF-8\n+    int codepoint;\n+    TermKeyResult res = parse_utf8(tk->buffer + tk->buffstart, tk->buffcount, &codepoint, nbytep);\n+\n+    if (res == TERMKEY_RES_AGAIN && force) {\n+      // There weren't enough bytes for a complete UTF-8 sequence but caller\n+      // demands an answer. About the best thing we can do here is eat as many\n+      // bytes as we have, and emit a UTF8_INVALID. If the remaining bytes\n+      // arrive later, they'll be invalid too.\n+      codepoint = UTF8_INVALID;\n+      *nbytep = tk->buffcount;\n+      res = TERMKEY_RES_KEY;\n+    }\n+\n+    key->type = TERMKEY_TYPE_UNICODE;\n+    key->modifiers = 0;\n+    (*tk->method.emit_codepoint)(tk, codepoint, key);\n+    return res;\n+  } else {\n+    // Non UTF-8 case - just report the raw byte\n+    key->type = TERMKEY_TYPE_UNICODE;\n+    key->code.codepoint = b0;\n+    key->modifiers = 0;\n+\n+    key->utf8[0] = (char)key->code.codepoint;\n+    key->utf8[1] = 0;\n+\n+    *nbytep = 1;\n+\n+    return TERMKEY_RES_KEY;\n+  }\n+}\n+\n+static TermKeyResult peekkey_mouse(TermKey *tk, TermKeyKey *key, size_t *nbytep)\n+{\n+  if (tk->buffcount < 3) {\n+    return TERMKEY_RES_AGAIN;\n+  }\n+\n+  key->type = TERMKEY_TYPE_MOUSE;\n+  key->code.mouse[0] = (char)CHARAT(0) - 0x20;\n+  key->code.mouse[1] = (char)CHARAT(1) - 0x20;\n+  key->code.mouse[2] = (char)CHARAT(2) - 0x20;\n+  key->code.mouse[3] = 0;\n+\n+  key->modifiers = (key->code.mouse[0] & 0x1c) >> 2;\n+  key->code.mouse[0] &= ~0x1c;\n+\n+  *nbytep = 3;\n+  return TERMKEY_RES_KEY;\n+}\n+\n+TermKeyResult termkey_getkey(TermKey *tk, TermKeyKey *key)\n+{\n+  size_t nbytes = 0;\n+  TermKeyResult ret = peekkey(tk, key, 0, &nbytes);\n+\n+  if (ret == TERMKEY_RES_KEY) {\n+    eat_bytes(tk, nbytes);\n+  }\n+\n+  if (ret == TERMKEY_RES_AGAIN) {\n+    // Call peekkey() again in force mode to obtain whatever it can\n+    (void)peekkey(tk, key, 1, &nbytes);\n+  }\n+  // Don't eat it yet though\n+\n+  return ret;\n+}\n+\n+TermKeyResult termkey_getkey_force(TermKey *tk, TermKeyKey *key)\n+{\n+  size_t nbytes = 0;\n+  TermKeyResult ret = peekkey(tk, key, 1, &nbytes);\n+\n+  if (ret == TERMKEY_RES_KEY) {\n+    eat_bytes(tk, nbytes);\n+  }\n+\n+  return ret;\n+}\n+\n+size_t termkey_push_bytes(TermKey *tk, const char *bytes, size_t len)\n+{\n+  if (tk->buffstart) {\n+    memmove(tk->buffer, tk->buffer + tk->buffstart, tk->buffcount);\n+    tk->buffstart = 0;\n+  }\n+\n+  // Not expecting it ever to be greater but doesn't hurt to handle that\n+  if (tk->buffcount >= tk->buffsize) {\n+    errno = ENOMEM;\n+    return (size_t)-1;\n+  }\n+\n+  if (len > tk->buffsize - tk->buffcount) {\n+    len = tk->buffsize - tk->buffcount;\n+  }\n+\n+  // memcpy(), not strncpy() in case of null bytes in input\n+  memcpy(tk->buffer + tk->buffcount, bytes, len);\n+  tk->buffcount += len;\n+\n+  return len;\n+}\n+\n+TermKeySym termkey_register_keyname(TermKey *tk, TermKeySym sym, const char *name)\n+{\n+  if (!sym) {\n+    sym = tk->nkeynames;\n+  }\n+\n+  if (sym >= tk->nkeynames) {\n+    const char **new_keynames = xrealloc(tk->keynames, sizeof(new_keynames[0]) * ((size_t)sym + 1));\n+    if (!new_keynames) {\n+      return -1;\n+    }",
            "html_url": "https://github.com/neovim/neovim/pull/30047#discussion_r1721080163",
            "id": 1721080163,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5mlZlj",
            "original_commit_id": "40c6eef49c4a2925e7376b1f5f9bd319c2410ac9",
            "original_line": 1085,
            "original_position": 1085,
            "original_start_line": 1083,
            "path": "src/nvim/tui/termkey.c",
            "position": null,
            "pull_request_review_id": 2244425659,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30047",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721080163/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-08-18T22:52:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721080163",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30047#discussion_r1721987182"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30047"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721987182"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n// Adapted from ...\r\n\r\n#pragma once\r\n```",
            "commit_id": "48a8eb9b07733b85b7a5bee8fd3765f2f79878f9",
            "created_at": "2024-08-19T15:36:02Z",
            "diff_hunk": "@@ -0,0 +1,199 @@\n+#pragma once",
            "html_url": "https://github.com/neovim/neovim/pull/30047#discussion_r1721987182",
            "id": 1721987182,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5mo3Bu",
            "original_commit_id": "b147e8789ef569e61210ef2425a2906bc0893bd4",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "src/nvim/tui/termkey_defs.h",
            "position": null,
            "pull_request_review_id": 2245876317,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30047",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721987182/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-08-19T15:36:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721987182",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30047#discussion_r1721987656"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30047"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721987656"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n// Adapted from ...\r\n\r\n#include <ctype.h>\r\n```",
            "commit_id": "48a8eb9b07733b85b7a5bee8fd3765f2f79878f9",
            "created_at": "2024-08-19T15:36:18Z",
            "diff_hunk": "@@ -0,0 +1,1315 @@\n+#include <ctype.h>",
            "html_url": "https://github.com/neovim/neovim/pull/30047#discussion_r1721987656",
            "id": 1721987656,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5mo3JI",
            "original_commit_id": "b147e8789ef569e61210ef2425a2906bc0893bd4",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "src/nvim/tui/termkey.c",
            "position": null,
            "pull_request_review_id": 2245876985,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30047",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721987656/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-08-19T15:36:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1721987656",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30047#discussion_r1740218084"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30047"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1740218084"
                }
            },
            "author_association": "MEMBER",
            "body": "why not list it here still? even if the upstream is frozen, we still vendored it and it's useful to have a reference list of all the things we vendored. we still list unibilium too.",
            "commit_id": "48a8eb9b07733b85b7a5bee8fd3765f2f79878f9",
            "created_at": "2024-09-01T23:52:40Z",
            "diff_hunk": "@@ -160,7 +160,6 @@ These dependencies are \"vendored\" (inlined), we must update the sources manually\n     * Needs to be updated when LPeg is updated.\n * `src/bit.c`: only for PUC lua: port of `require'bit'` from luajit https://bitop.luajit.org/\n * `runtime/lua/coxpcall.lua`: coxpcall (only needed for PUC lua, builtin to luajit)\n-* `src/termkey`: [libtermkey](https://github.com/neovim/libtermkey)",
            "html_url": "https://github.com/neovim/neovim/pull/30047#discussion_r1740218084",
            "id": 1740218084,
            "line": 163,
            "node_id": "PRRC_kwDOAPphoM5nuZ7k",
            "original_commit_id": "0594e23c9170835a00715fface93e9797ba2f3bd",
            "original_line": 163,
            "original_position": 4,
            "original_start_line": null,
            "path": "MAINTAIN.md",
            "position": 4,
            "pull_request_review_id": 2274512556,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30047",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1740218084/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-01T23:52:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1740218084",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30047#discussion_r1740222348"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30047"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1740222348"
                }
            },
            "author_association": "MEMBER",
            "body": "Unibilium is not vendored",
            "commit_id": "48a8eb9b07733b85b7a5bee8fd3765f2f79878f9",
            "created_at": "2024-09-02T00:14:27Z",
            "diff_hunk": "@@ -160,7 +160,6 @@ These dependencies are \"vendored\" (inlined), we must update the sources manually\n     * Needs to be updated when LPeg is updated.\n * `src/bit.c`: only for PUC lua: port of `require'bit'` from luajit https://bitop.luajit.org/\n * `runtime/lua/coxpcall.lua`: coxpcall (only needed for PUC lua, builtin to luajit)\n-* `src/termkey`: [libtermkey](https://github.com/neovim/libtermkey)",
            "html_url": "https://github.com/neovim/neovim/pull/30047#discussion_r1740222348",
            "id": 1740222348,
            "in_reply_to_id": 1740218084,
            "line": 163,
            "node_id": "PRRC_kwDOAPphoM5nua-M",
            "original_commit_id": "0594e23c9170835a00715fface93e9797ba2f3bd",
            "original_line": 163,
            "original_position": 4,
            "original_start_line": null,
            "path": "MAINTAIN.md",
            "position": 4,
            "pull_request_review_id": 2274518728,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30047",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1740222348/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-02T00:14:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1740222348",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30047#discussion_r1740455806"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30047"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1740455806"
                }
            },
            "author_association": "MEMBER",
            "body": "Because \r\n\r\n> These dependencies are \"vendored\" (inlined), we must update the sources manually\r\n\r\nis no longer true: the sources now live in-tree; there will no longer be an external repo from which we need to pull updates. (The repo is already archived.)\r\n\r\n(It might be interesting for historical reasons, but I don't think `MAINTAIN.md` is the place for that.)",
            "commit_id": "48a8eb9b07733b85b7a5bee8fd3765f2f79878f9",
            "created_at": "2024-09-02T07:35:47Z",
            "diff_hunk": "@@ -160,7 +160,6 @@ These dependencies are \"vendored\" (inlined), we must update the sources manually\n     * Needs to be updated when LPeg is updated.\n * `src/bit.c`: only for PUC lua: port of `require'bit'` from luajit https://bitop.luajit.org/\n * `runtime/lua/coxpcall.lua`: coxpcall (only needed for PUC lua, builtin to luajit)\n-* `src/termkey`: [libtermkey](https://github.com/neovim/libtermkey)",
            "html_url": "https://github.com/neovim/neovim/pull/30047#discussion_r1740455806",
            "id": 1740455806,
            "in_reply_to_id": 1740218084,
            "line": 163,
            "node_id": "PRRC_kwDOAPphoM5nvT9-",
            "original_commit_id": "0594e23c9170835a00715fface93e9797ba2f3bd",
            "original_line": 163,
            "original_position": 4,
            "original_start_line": null,
            "path": "MAINTAIN.md",
            "position": 4,
            "pull_request_review_id": 2274889570,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30047",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1740455806/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-02T07:36:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1740455806",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30047#discussion_r1740645195"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30047"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1740645195"
                }
            },
            "author_association": "MEMBER",
            "body": "> is no longer true: the sources now live in-tree; there will no longer be an external repo from which we need to pull updates. (The repo is already archived.)\r\n\r\nThat was pretty much my thought process. It's not something I'm strongly for or against either way so I don't mind re-adding it.",
            "commit_id": "48a8eb9b07733b85b7a5bee8fd3765f2f79878f9",
            "created_at": "2024-09-02T09:57:21Z",
            "diff_hunk": "@@ -160,7 +160,6 @@ These dependencies are \"vendored\" (inlined), we must update the sources manually\n     * Needs to be updated when LPeg is updated.\n * `src/bit.c`: only for PUC lua: port of `require'bit'` from luajit https://bitop.luajit.org/\n * `runtime/lua/coxpcall.lua`: coxpcall (only needed for PUC lua, builtin to luajit)\n-* `src/termkey`: [libtermkey](https://github.com/neovim/libtermkey)",
            "html_url": "https://github.com/neovim/neovim/pull/30047#discussion_r1740645195",
            "id": 1740645195,
            "in_reply_to_id": 1740218084,
            "line": 163,
            "node_id": "PRRC_kwDOAPphoM5nwCNL",
            "original_commit_id": "0594e23c9170835a00715fface93e9797ba2f3bd",
            "original_line": 163,
            "original_position": 4,
            "original_start_line": null,
            "path": "MAINTAIN.md",
            "position": 4,
            "pull_request_review_id": 2275201671,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30047",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1740645195/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-02T15:51:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1740645195",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "should we maybe place the files under `src/nvim/tui/` if it is just part of the TUI and not seen as a separate library? ",
            "created_at": "2024-08-14T16:54:41Z",
            "html_url": "https://github.com/neovim/neovim/pull/30047#issuecomment-2289313769",
            "id": 2289313769,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30047",
            "node_id": "IC_kwDOAPphoM6IdCfp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2289313769/reactions"
            },
            "updated_at": "2024-08-15T10:16:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2289313769",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "You are changing libvterm too",
            "created_at": "2024-08-17T21:58:06Z",
            "html_url": "https://github.com/neovim/neovim/pull/30047#issuecomment-2294996658",
            "id": 2294996658,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30047",
            "node_id": "IC_kwDOAPphoM6Iyt6y",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2294996658/reactions"
            },
            "updated_at": "2024-08-17T21:58:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2294996658",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> You are changing libvterm too\r\n\r\nYes, because there is shared code, and shared problems.",
            "created_at": "2024-08-17T23:19:35Z",
            "html_url": "https://github.com/neovim/neovim/pull/30047#issuecomment-2295023687",
            "id": 2295023687,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30047",
            "node_id": "IC_kwDOAPphoM6Iy0hH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2295023687/reactions"
            },
            "updated_at": "2024-08-17T23:19:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2295023687",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> You are changing libvterm too\r\n\r\nYe, I figured I could deal with the low hanging fruits from there as well. Should I postpone it to a future PR?",
            "created_at": "2024-08-18T01:16:36Z",
            "html_url": "https://github.com/neovim/neovim/pull/30047#issuecomment-2295052148",
            "id": 2295052148,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30047",
            "node_id": "IC_kwDOAPphoM6Iy7d0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2295052148/reactions"
            },
            "updated_at": "2024-08-18T01:16:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2295052148",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Note for later: as we're taking ownership of `vterm` by integrating it more tightly with Neovim utf8 functionality (to guarantee that core and embedded terminal have the same idea of, say, character width), we will move it to `src/nvim/term`, similarly to the `termkey` move here. The current placement is just a staging ground for that until we start to make bigger changes.\r\n\r\n@gpanders ",
            "created_at": "2024-08-18T11:14:17Z",
            "html_url": "https://github.com/neovim/neovim/pull/30047#issuecomment-2295223406",
            "id": 2295223406,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30047",
            "node_id": "IC_kwDOAPphoM6IzlRu",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2295223406/reactions"
            },
            "updated_at": "2024-08-18T11:18:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2295223406",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Not sure we want to yeet all debug output? That can be helpful.\r\n\r\n(Although we can definitely improve that, and hook into Neovim's own `NDEBUG` instead.)",
            "created_at": "2024-08-18T15:29:33Z",
            "html_url": "https://github.com/neovim/neovim/pull/30047#issuecomment-2295301618",
            "id": 2295301618,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30047",
            "node_id": "IC_kwDOAPphoM6Iz4Xy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2295301618/reactions"
            },
            "updated_at": "2024-08-18T15:31:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2295301618",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Not sure we want to yeet all debug output? That can be helpful.\r\n\r\nYeah I changed my mind and reverted it.",
            "created_at": "2024-08-18T15:46:26Z",
            "html_url": "https://github.com/neovim/neovim/pull/30047#issuecomment-2295306532",
            "id": 2295306532,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30047",
            "node_id": "IC_kwDOAPphoM6Iz5kk",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2295306532/reactions"
            },
            "updated_at": "2024-08-18T15:46:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2295306532",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Currently this  PR mixes all the files together, e.g. `src/nvim/tui/driver-csi.c` lives next to other Nvim TUI files. Whereas previously, termkey was at least somewhat \"abstracted\", it was a self-contained thing. Is it not useful to continue to treat it like a self-contained thing in some respect, perhaps by putting it in a subdirectory and keeping the interface ecapsulated (don't entangle our application TUI code within termkey)? Would that keep the door open for migrating to something else in the future (such as libtikit or similar)?",
            "created_at": "2024-08-19T15:40:39Z",
            "html_url": "https://github.com/neovim/neovim/pull/30047#issuecomment-2296880458",
            "id": 2296880458,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30047",
            "node_id": "IC_kwDOAPphoM6I551K",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2296880458/reactions"
            },
            "updated_at": "2024-08-19T15:41:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2296880458",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Moved the code to `tui/termkey`. Kinda starting to wonder if the PR is worth it tho if we want to keep the two codes separated.",
            "created_at": "2024-08-19T16:22:13Z",
            "html_url": "https://github.com/neovim/neovim/pull/30047#issuecomment-2296960966",
            "id": 2296960966,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30047",
            "node_id": "IC_kwDOAPphoM6I6NfG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2296960966/reactions"
            },
            "updated_at": "2024-08-19T16:22:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2296960966",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think (slowly) moving utf8-related code to be in sync with Neovim is absolutely worth it. Stylistic polish and dead code removal is low-effort/low-reward by comparison, though (albeit not unwelcome).",
            "created_at": "2024-08-19T16:27:36Z",
            "html_url": "https://github.com/neovim/neovim/pull/30047#issuecomment-2296970633",
            "id": 2296970633,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30047",
            "node_id": "IC_kwDOAPphoM6I6P2J",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2296970633/reactions"
            },
            "updated_at": "2024-08-19T16:27:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2296970633",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "yes, and it is going to be a while until we do a replacement anyway. Doing refactors on the level of fixing warnings and deleting dead code is worth it regardless, in the meanwhile.",
            "created_at": "2024-08-19T16:30:19Z",
            "html_url": "https://github.com/neovim/neovim/pull/30047#issuecomment-2296975444",
            "id": 2296975444,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30047",
            "node_id": "IC_kwDOAPphoM6I6RBU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2296975444/reactions"
            },
            "updated_at": "2024-08-19T16:30:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2296975444",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@dundargoc rebase, and possibly look into using more utf8 code after bfredls bobbytablectomy (not necessarily in this PR)? Would like to move forward with (slowly) cleaning up the inherited code.",
            "created_at": "2024-09-01T09:51:40Z",
            "html_url": "https://github.com/neovim/neovim/pull/30047#issuecomment-2323261865",
            "id": 2323261865,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30047",
            "node_id": "IC_kwDOAPphoM6Keimp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2323261865/reactions"
            },
            "updated_at": "2024-09-01T09:51:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2323261865",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@dundargoc do you want to squash (some of) the commits?",
            "created_at": "2024-09-05T08:20:16Z",
            "html_url": "https://github.com/neovim/neovim/pull/30047#issuecomment-2330903874",
            "id": 2330903874,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30047",
            "node_id": "IC_kwDOAPphoM6K7sVC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2330903874/reactions"
            },
            "updated_at": "2024-09-05T08:20:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2330903874",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "coverity:\r\n\r\n```\r\n*** CID 509228:  Insecure data handling  (INTEGER_OVERFLOW)\r\n/src/nvim/tui/termkey/driver-ti.c: 413 in start_driver_ti()\r\n407       }\r\n408     #endif\r\n409     \r\n410       // Can't call putp or tputs because they suck and don't give us fd control\r\n411       len = strlen(start_string);\r\n412       while (len) {\r\n>>>     CID 509228:  Insecure data handling  (INTEGER_OVERFLOW)\r\n>>>     \"(unsigned int)len\", which might have underflowed, is passed to \"write(tk->fd, start_string, (unsigned int)len)\".\r\n413         size_t written = (size_t)write(tk->fd, start_string, (unsigned)len);\r\n414         if (written == (size_t)-1) {\r\n415           return 0;\r\n416         }\r\n417         start_string += written;\r\n418         len -= written;\r\n\r\n________________________________________________________________________________________________________\r\n*** CID 509227:  Insecure data handling  (INTEGER_OVERFLOW)\r\n/src/nvim/tui/termkey/driver-ti.c: 451 in stop_driver_ti()\r\n445       // The terminfo database will contain keys in application cursor key mode.\r\n446       // We may need to enable that mode\r\n447     \r\n448       // Can't call putp or tputs because they suck and don't give us fd control\r\n449       len = strlen(stop_string);\r\n450       while (len) {\r\n>>>     CID 509227:  Insecure data handling  (INTEGER_OVERFLOW)\r\n>>>     \"(unsigned int)len\", which might have underflowed, is passed to \"write(tk->fd, stop_string, (unsigned int)len)\".\r\n451         size_t written = (size_t)write(tk->fd, stop_string, (unsigned)len);\r\n452         if (written == (size_t)-1) {\r\n453           return 0;\r\n454         }\r\n455         stop_string += written;\r\n456         len -= written;\r\n```",
            "created_at": "2024-09-08T14:55:40Z",
            "html_url": "https://github.com/neovim/neovim/pull/30047#issuecomment-2336716581",
            "id": 2336716581,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30047",
            "node_id": "IC_kwDOAPphoM6LR3cl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2336716581/reactions"
            },
            "updated_at": "2024-09-08T14:55:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2336716581",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/30047/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/30047/commits",
    "created_at": "2024-08-14T14:11:46Z",
    "diff_url": "https://github.com/neovim/neovim/pull/30047.diff",
    "draft": false,
    "head": {
        "label": "dundargoc:refactor/termkey",
        "ref": "refactor/termkey",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/dundargoc/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/dundargoc/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/dundargoc/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/dundargoc/neovim/branches{/branch}",
            "clone_url": "https://github.com/dundargoc/neovim.git",
            "collaborators_url": "https://api.github.com/repos/dundargoc/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/dundargoc/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/dundargoc/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/dundargoc/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/dundargoc/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/dundargoc/neovim/contributors",
            "created_at": "2021-06-20T10:14:48Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/dundargoc/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/dundargoc/neovim/downloads",
            "events_url": "https://api.github.com/repos/dundargoc/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/dundargoc/neovim/forks",
            "full_name": "dundargoc/neovim",
            "git_commits_url": "https://api.github.com/repos/dundargoc/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/dundargoc/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/dundargoc/neovim/git/tags{/sha}",
            "git_url": "git://github.com/dundargoc/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": false,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/dundargoc/neovim/hooks",
            "html_url": "https://github.com/dundargoc/neovim",
            "id": 378614899,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/dundargoc/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/dundargoc/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/dundargoc/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/dundargoc/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/dundargoc/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/dundargoc/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/dundargoc/neovim/merges",
            "milestones_url": "https://api.github.com/repos/dundargoc/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNzg2MTQ4OTk=",
            "notifications_url": "https://api.github.com/repos/dundargoc/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/dundargoc/neovim/pulls{/number}",
            "pushed_at": "2024-09-09T19:21:53Z",
            "releases_url": "https://api.github.com/repos/dundargoc/neovim/releases{/id}",
            "size": 281341,
            "ssh_url": "git@github.com:dundargoc/neovim.git",
            "stargazers_count": 1,
            "stargazers_url": "https://api.github.com/repos/dundargoc/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/dundargoc/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/dundargoc/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/dundargoc/neovim/subscription",
            "svn_url": "https://github.com/dundargoc/neovim",
            "tags_url": "https://api.github.com/repos/dundargoc/neovim/tags",
            "teams_url": "https://api.github.com/repos/dundargoc/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/dundargoc/neovim/git/trees{/sha}",
            "updated_at": "2024-09-09T12:22:44Z",
            "url": "https://api.github.com/repos/dundargoc/neovim",
            "visibility": "public",
            "watchers": 1,
            "watchers_count": 1,
            "web_commit_signoff_required": false
        },
        "sha": "48a8eb9b07733b85b7a5bee8fd3765f2f79878f9",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
            "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
            "followers_url": "https://api.github.com/users/dundargoc/followers",
            "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
            "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/dundargoc",
            "id": 33953936,
            "login": "dundargoc",
            "node_id": "MDQ6VXNlcjMzOTUzOTM2",
            "organizations_url": "https://api.github.com/users/dundargoc/orgs",
            "received_events_url": "https://api.github.com/users/dundargoc/received_events",
            "repos_url": "https://api.github.com/users/dundargoc/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/dundargoc"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/30047",
    "id": 2019419882,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30047",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "building and installing Neovim using the provided scripts",
            "id": 84723321,
            "name": "build",
            "node_id": "MDU6TGFiZWw4NDcyMzMyMQ==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/build"
        }
    ],
    "locked": false,
    "merge_commit_sha": "f9108378b7a7e08b48685f0a3ff4f7a3a14b56d6",
    "merged_at": "2024-09-05T12:28:12Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM54Xebq",
    "number": 30047,
    "patch_url": "https://github.com/neovim/neovim/pull/30047.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/30047/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/48a8eb9b07733b85b7a5bee8fd3765f2f79878f9",
    "title": "refactor: adopt termkey and eliminate duplicate code",
    "updated_at": "2024-09-08T14:55:41Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/30047",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
        "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
        "followers_url": "https://api.github.com/users/dundargoc/followers",
        "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
        "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/dundargoc",
        "id": 33953936,
        "login": "dundargoc",
        "node_id": "MDQ6VXNlcjMzOTUzOTM2",
        "organizations_url": "https://api.github.com/users/dundargoc/orgs",
        "received_events_url": "https://api.github.com/users/dundargoc/received_events",
        "repos_url": "https://api.github.com/users/dundargoc/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/dundargoc"
    }
}