{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/24528/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/24528/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/24528"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/24528"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/24528/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/24528"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/fe5eadf4a3c0dd57c5a9936c4982187e3f9d082c"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 4880,
            "forks_count": 4880,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1663,
            "open_issues_count": 1663,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2023-09-20T23:38:20Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 246655,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 69544,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2023-09-21T01:45:26Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 69544,
            "watchers_count": 69544,
            "web_commit_signoff_required": false
        },
        "sha": "cc87dda31a5b5637ade7ddcfe5199f2df5fd47df",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "    - `src/nvim/options.lua` is now the source of truth\r\n    - generate runtime/lua/vim/_meta/options.lua\r\n\r\n\r\n\r\nCredit to: https://github.com/ii14/emmylua-nvim/tree/master",
    "closed_at": "2023-08-04T20:26:53Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24528#discussion_r1282196060"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24528"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282196060"
                }
            },
            "author_association": "MEMBER",
            "body": "todo",
            "commit_id": "fe5eadf4a3c0dd57c5a9936c4982187e3f9d082c",
            "created_at": "2023-08-02T17:05:11Z",
            "diff_hunk": "@@ -902,9 +902,7 @@ A jump table for the options with a short description can be found at |Q_op|.\n <\tUse 'backupdir' to put the backup in a different directory.\n \n \t\t\t\t\t\t*'backupskip'* *'bsk'*\n-'backupskip' 'bsk'\tstring\t(default: \"$TMPDIR/*,$TMP/*,$TEMP/*\"\n-\t\t\t\t Unix: \"/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*\"\n-\t\t\t\t Mac: \"/private/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*\")\n+'backupskip' 'bsk'\tstring\t(default \"/private/tmp/*,/var/folders/dy/104cjpq539g1y8p4rynvc7tw0000gn/T/*\")",
            "html_url": "https://github.com/neovim/neovim/pull/24528#discussion_r1282196060",
            "id": 1282196060,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MbMJc",
            "original_commit_id": "021e1a6b48a1d9229353592183dd299107c3148b",
            "original_line": 905,
            "original_position": 129,
            "original_start_line": null,
            "path": "runtime/doc/options.txt",
            "position": null,
            "pull_request_review_id": 1559481749,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24528",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282196060/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-02T17:32:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282196060",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24528#discussion_r1282199338"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24528"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282199338"
                }
            },
            "author_association": "MEMBER",
            "body": "todo",
            "commit_id": "fe5eadf4a3c0dd57c5a9936c4982187e3f9d082c",
            "created_at": "2023-08-02T17:08:32Z",
            "diff_hunk": "@@ -1583,7 +1578,7 @@ A jump table for the options with a short description can be found at |Q_op|.\n \t\t\tabbreviations, user commands and the \"to\" part of the\n \t\t\tmenu commands.  Remove this flag to be able to use a\n \t\t\tbackslash like a CTRL-V.  For example, the command\n-\t\t\t\":map X \\<Esc>\" results in X being mapped to:\n+\t\t\t\":map X <Esc>\" results in X being mapped to:",
            "html_url": "https://github.com/neovim/neovim/pull/24528#discussion_r1282199338",
            "id": 1282199338,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MbM8q",
            "original_commit_id": "5f5510d533451e0be7f51447ae4adc972bc078d1",
            "original_line": 1581,
            "original_position": 447,
            "original_start_line": null,
            "path": "runtime/doc/options.txt",
            "position": null,
            "pull_request_review_id": 1559481749,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24528",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282199338/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-02T17:32:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282199338",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24528#discussion_r1282199545"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24528"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282199545"
                }
            },
            "author_association": "MEMBER",
            "body": "todo",
            "commit_id": "fe5eadf4a3c0dd57c5a9936c4982187e3f9d082c",
            "created_at": "2023-08-02T17:08:42Z",
            "diff_hunk": "@@ -1816,9 +1810,8 @@ A jump table for the options with a short description can be found at |Q_op|.\n \tWhen Visual mode is active the highlighting isn't used to make it\n \teasier to see the selected text.\n \n-\n-\t\t\t\t\t\t*'cursorlineopt'* *'culopt'*\n-'cursorlineopt' 'culopt' string (default: \"number,line\")\n+\t\t\t\t\t*'cursorlineopt'* *'culopt'*\n+'cursorlineopt' 'culopt'string\t(default \"both\")",
            "html_url": "https://github.com/neovim/neovim/pull/24528#discussion_r1282199545",
            "id": 1282199545,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MbM_5",
            "original_commit_id": "5f5510d533451e0be7f51447ae4adc972bc078d1",
            "original_line": 1814,
            "original_position": 476,
            "original_start_line": null,
            "path": "runtime/doc/options.txt",
            "position": null,
            "pull_request_review_id": 1559481749,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24528",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282199545/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-02T17:32:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282199545",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24528#discussion_r1282202019"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24528"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282202019"
                }
            },
            "author_association": "MEMBER",
            "body": "todo",
            "commit_id": "fe5eadf4a3c0dd57c5a9936c4982187e3f9d082c",
            "created_at": "2023-08-02T17:11:09Z",
            "diff_hunk": "@@ -2718,8 +2708,8 @@ A jump table for the options with a short description can be found at |Q_op|.\n \tThis option cannot be set in a modeline when 'modelineexpr' is off.\n \tNOTE: This option is set to \"\" when 'compatible' is set.\n \n-\t\t\t\t\t*'formatlistpat'* *'flp'*\n-'formatlistpat' 'flp'\tstring (default: \"^\\s*\\d\\+[\\]:.)}\\t ]\\s*\")\n+\t\t\t\t\t\t*'formatlistpat'* *'flp'*\n+'formatlistpat' 'flp'\tstring\t(default \"^\\\\s*\\\\d\\\\+[\\\\]:.)}\\\\t ]\\\\s*\")",
            "html_url": "https://github.com/neovim/neovim/pull/24528#discussion_r1282202019",
            "id": 1282202019,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MbNmj",
            "original_commit_id": "5f5510d533451e0be7f51447ae4adc972bc078d1",
            "original_line": 2712,
            "original_position": 815,
            "original_start_line": null,
            "path": "runtime/doc/options.txt",
            "position": null,
            "pull_request_review_id": 1559481749,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24528",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282202019/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-02T17:32:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282202019",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24528#discussion_r1282202269"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24528"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282202269"
                }
            },
            "author_association": "MEMBER",
            "body": "todo",
            "commit_id": "fe5eadf4a3c0dd57c5a9936c4982187e3f9d082c",
            "created_at": "2023-08-02T17:11:24Z",
            "diff_hunk": "@@ -2798,8 +2788,7 @@ A jump table for the options with a short description can be found at |Q_op|.\n \t'errorformat' option: see |errorformat|.\n \n \t\t\t\t\t\t*'grepprg'* *'gp'*\n-'grepprg' 'gp'\t\tstring\t(default \"grep -n \",\n-\t\t\t\t Unix: \"grep -n $* /dev/null\")\n+'grepprg' 'gp'\t\tstring\t(default \"grep -n $* /dev/null\")",
            "html_url": "https://github.com/neovim/neovim/pull/24528#discussion_r1282202269",
            "id": 1282202269,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MbNqd",
            "original_commit_id": "5f5510d533451e0be7f51447ae4adc972bc078d1",
            "original_line": 2791,
            "original_position": 854,
            "original_start_line": null,
            "path": "runtime/doc/options.txt",
            "position": null,
            "pull_request_review_id": 1559481749,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24528",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282202269/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-02T17:32:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282202269",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24528#discussion_r1282208918"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24528"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282208918"
                }
            },
            "author_association": "MEMBER",
            "body": "todo",
            "commit_id": "fe5eadf4a3c0dd57c5a9936c4982187e3f9d082c",
            "created_at": "2023-08-02T17:18:24Z",
            "diff_hunk": "@@ -3106,8 +3078,7 @@ A jump table for the options with a short description can be found at |Q_op|.\n <\n \n \t\t\t\t\t\t*'helpfile'* *'hf'*\n-'helpfile' 'hf'\t\tstring\t(default (MS-Windows) \"$VIMRUNTIME\\doc\\help.txt\"\n-\t\t\t\t\t (others) \"$VIMRUNTIME/doc/help.txt\")\n+'helpfile' 'hf'\t\tstring\t(default \"/usr/local/share/nvim/runtime/doc/help.txt\")",
            "html_url": "https://github.com/neovim/neovim/pull/24528#discussion_r1282208918",
            "id": 1282208918,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MbPSW",
            "original_commit_id": "5f5510d533451e0be7f51447ae4adc972bc078d1",
            "original_line": 3100,
            "original_position": 1000,
            "original_start_line": null,
            "path": "runtime/doc/options.txt",
            "position": null,
            "pull_request_review_id": 1559481749,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24528",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282208918/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-02T17:32:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282208918",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24528#discussion_r1282211223"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24528"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282211223"
                }
            },
            "author_association": "MEMBER",
            "body": "todo",
            "commit_id": "fe5eadf4a3c0dd57c5a9936c4982187e3f9d082c",
            "created_at": "2023-08-02T17:20:40Z",
            "diff_hunk": "@@ -3432,9 +3401,7 @@ A jump table for the options with a short description can be found at |Q_op|.\n \tWith 'noinfercase' the match is used as-is.\n \n \t\t\t\t\t\t*'isfname'* *'isf'*\n-'isfname' 'isf'\t\tstring\t(default for Windows:\n-\t\t\t     \"@,48-57,/,\\,.,-,_,+,,,#,$,%,{,},[,],:,@-@,!,~,=\"\n-\t\t\t    otherwise: \"@,48-57,/,.,-,_,+,,,#,$,%,~,=\")\n+'isfname' 'isf'\t\tstring\t(default \"@,48-57,/,.,-,_,+,,,#,$,%,~,=\")",
            "html_url": "https://github.com/neovim/neovim/pull/24528#discussion_r1282211223",
            "id": 1282211223,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MbP2X",
            "original_commit_id": "5f5510d533451e0be7f51447ae4adc972bc078d1",
            "original_line": 3423,
            "original_position": 1129,
            "original_start_line": null,
            "path": "runtime/doc/options.txt",
            "position": null,
            "pull_request_review_id": 1559481749,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24528",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282211223/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-02T17:32:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282211223",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24528#discussion_r1282211380"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24528"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282211380"
                }
            },
            "author_association": "MEMBER",
            "body": "todo",
            "commit_id": "fe5eadf4a3c0dd57c5a9936c4982187e3f9d082c",
            "created_at": "2023-08-02T17:20:48Z",
            "diff_hunk": "@@ -3483,9 +3450,7 @@ A jump table for the options with a short description can be found at |Q_op|.\n \tSee |option-backslash| about including spaces and backslashes.\n \n \t\t\t\t\t\t*'isident'* *'isi'*\n-'isident' 'isi'\t\tstring\t(default for Windows:\n-\t\t\t\t\t   \"@,48-57,_,128-167,224-235\"\n-\t\t\t\totherwise: \"@,48-57,_,192-255\")\n+'isident' 'isi'\t\tstring\t(default \"@,48-57,_,192-255\")",
            "html_url": "https://github.com/neovim/neovim/pull/24528#discussion_r1282211380",
            "id": 1282211380,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MbP40",
            "original_commit_id": "5f5510d533451e0be7f51447ae4adc972bc078d1",
            "original_line": 3472,
            "original_position": 1140,
            "original_start_line": null,
            "path": "runtime/doc/options.txt",
            "position": null,
            "pull_request_review_id": 1559481749,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24528",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282211380/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-02T17:32:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282211380",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24528#discussion_r1282214817"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24528"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282214817"
                }
            },
            "author_association": "MEMBER",
            "body": "todo",
            "commit_id": "fe5eadf4a3c0dd57c5a9936c4982187e3f9d082c",
            "created_at": "2023-08-02T17:24:18Z",
            "diff_hunk": "@@ -4229,16 +4195,16 @@ A jump table for the options with a short description can be found at |Q_op|.\n \t    \"g<LeftMouse>\"  is \"<C-LeftMouse>\t(jump to tag under mouse click)\n \t    \"g<RightMouse>\" is \"<C-RightMouse>\t(\"CTRL-T\")\n \n-\t      *'mousemoveevent'* *'mousemev'* *'nomousemoveevent'* *'nomousemev'*\n-'mousemoveevent' 'mousemev'  boolean\t(default off)\n+\t*'mousemoveevent'* *'mousemev'* *'nomousemoveevent'* *'nomousemev'*\n+'mousemoveevent' 'mousemev'boolean\t(default off)",
            "html_url": "https://github.com/neovim/neovim/pull/24528#discussion_r1282214817",
            "id": 1282214817,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MbQuh",
            "original_commit_id": "5f5510d533451e0be7f51447ae4adc972bc078d1",
            "original_line": 4217,
            "original_position": 1403,
            "original_start_line": null,
            "path": "runtime/doc/options.txt",
            "position": null,
            "pull_request_review_id": 1559481749,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24528",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282214817/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-02T17:32:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282214817",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24528#discussion_r1282214988"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24528"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282214988"
                }
            },
            "author_association": "MEMBER",
            "body": "todo",
            "commit_id": "fe5eadf4a3c0dd57c5a9936c4982187e3f9d082c",
            "created_at": "2023-08-02T17:24:30Z",
            "diff_hunk": "@@ -4258,9 +4224,8 @@ A jump table for the options with a short description can be found at |Q_op|.\n <\tWill make Nvim scroll 5 lines at a time when scrolling vertically, and\n \tscroll 2 columns at a time when scrolling horizontally.\n \n-\t\t\t\t\t*'mouseshape'* *'mouses'* *E547*\n-'mouseshape' 'mouses'\tstring\t(default \"i:beam,r:beam,s:updown,sd:cross,\n-\t\t\t\t\tm:no,ml:up-arrow,v:rightup-arrow\")\n+\t\t\t\t\t\t*'mouseshape'* *'mouses'*\n+'mouseshape' 'mouses'\tstring\t(default \"\")",
            "html_url": "https://github.com/neovim/neovim/pull/24528#discussion_r1282214988",
            "id": 1282214988,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MbQxM",
            "original_commit_id": "5f5510d533451e0be7f51447ae4adc972bc078d1",
            "original_line": 4246,
            "original_position": 1424,
            "original_start_line": null,
            "path": "runtime/doc/options.txt",
            "position": null,
            "pull_request_review_id": 1559481749,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24528",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282214988/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-02T17:32:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282214988",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24528#discussion_r1282216144"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24528"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282216144"
                }
            },
            "author_association": "MEMBER",
            "body": "todo",
            "commit_id": "fe5eadf4a3c0dd57c5a9936c4982187e3f9d082c",
            "created_at": "2023-08-02T17:25:38Z",
            "diff_hunk": "@@ -4785,24 +4748,9 @@ A jump table for the options with a short description can be found at |Q_op|.\n \tExample: >\n \t\t:set rulerformat=%15(%c%V\\ %p%%%)\n <\n-\t\t\t\t*'runtimepath'* *'rtp'* *vimfiles*\n-'runtimepath' 'rtp'\tstring\t(default:     \"$XDG_CONFIG_HOME/nvim,\n-\t\t\t\t\t       $XDG_CONFIG_DIRS[1]/nvim,\n-\t\t\t\t\t       $XDG_CONFIG_DIRS[2]/nvim,\n-\t\t\t\t\t       …\n-\t\t\t\t\t       $XDG_DATA_HOME/nvim[-data]/site,\n-\t\t\t\t\t       $XDG_DATA_DIRS[1]/nvim/site,\n-\t\t\t\t\t       $XDG_DATA_DIRS[2]/nvim/site,\n-\t\t\t\t\t       …\n-\t\t\t\t\t       $VIMRUNTIME,\n-\t\t\t\t\t       …\n-\t\t\t\t\t       $XDG_DATA_DIRS[2]/nvim/site/after,\n-\t\t\t\t\t       $XDG_DATA_DIRS[1]/nvim/site/after,\n-\t\t\t\t\t       $XDG_DATA_HOME/nvim[-data]/site/after,\n-\t\t\t\t\t       …\n-\t\t\t\t\t       $XDG_CONFIG_DIRS[2]/nvim/after,\n-\t\t\t\t\t       $XDG_CONFIG_DIRS[1]/nvim/after,\n-\t\t\t\t\t       $XDG_CONFIG_HOME/nvim/after\")\n+\n+\t\t\t\t\t*'runtimepath'* *'rtp'* *vimfiles*\n+'runtimepath' 'rtp'\tstring\t(default \"/Users/lewis/projects/dotfiles/config/nvim,/etc/xdg/nvim,/Users/lewis/.data/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/share/nvim/runtime,/usr/local/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/lewis/.data/nvim/site/after,/etc/xdg/nvim/after,/Users/lewis/projects/dotfiles/config/nvim/after\")",
            "html_url": "https://github.com/neovim/neovim/pull/24528#discussion_r1282216144",
            "id": 1282216144,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MbRDQ",
            "original_commit_id": "5f5510d533451e0be7f51447ae4adc972bc078d1",
            "original_line": 4771,
            "original_position": 1655,
            "original_start_line": null,
            "path": "runtime/doc/options.txt",
            "position": null,
            "pull_request_review_id": 1559481749,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24528",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282216144/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-02T17:32:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282216144",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24528#discussion_r1282216285"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24528"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282216285"
                }
            },
            "author_association": "MEMBER",
            "body": "todo?",
            "commit_id": "fe5eadf4a3c0dd57c5a9936c4982187e3f9d082c",
            "created_at": "2023-08-02T17:25:47Z",
            "diff_hunk": "@@ -4883,7 +4831,7 @@ A jump table for the options with a short description can be found at |Q_op|.\n \theight with \":set scroll=0\".\n \n \t\t\t\t\t\t*'scrollback'* *'scbk'*\n-'scrollback' 'scbk'\tnumber\t(default: 10000)\n+'scrollback' 'scbk'\tnumber\t(default -1)",
            "html_url": "https://github.com/neovim/neovim/pull/24528#discussion_r1282216285",
            "id": 1282216285,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MbRFd",
            "original_commit_id": "5f5510d533451e0be7f51447ae4adc972bc078d1",
            "original_line": 4852,
            "original_position": 1673,
            "original_start_line": null,
            "path": "runtime/doc/options.txt",
            "position": null,
            "pull_request_review_id": 1559481749,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24528",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282216285/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-02T17:32:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282216285",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24528#discussion_r1282220616"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24528"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282220616"
                }
            },
            "author_association": "MEMBER",
            "body": "todo",
            "commit_id": "fe5eadf4a3c0dd57c5a9936c4982187e3f9d082c",
            "created_at": "2023-08-02T17:30:11Z",
            "diff_hunk": "@@ -5673,7 +5621,7 @@ A jump table for the options with a short description can be found at |Q_op|.\n \tThe languages are specified with 'spelllang'.\n \n \t\t\t\t\t\t*'spellcapcheck'* *'spc'*\n-'spellcapcheck' 'spc'\tstring\t(default \"[.?!]\\_[\\])'\" \\t]\\+\")\n+'spellcapcheck' 'spc'\tstring\t(default \"[.?!]\\\\_[\\\\])'\\\"\\t ]\\\\+\")",
            "html_url": "https://github.com/neovim/neovim/pull/24528#discussion_r1282220616",
            "id": 1282220616,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MbSJI",
            "original_commit_id": "5f5510d533451e0be7f51447ae4adc972bc078d1",
            "original_line": 5642,
            "original_position": 1932,
            "original_start_line": null,
            "path": "runtime/doc/options.txt",
            "position": null,
            "pull_request_review_id": 1559481749,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24528",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282220616/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-02T17:32:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1282220616",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24528#discussion_r1283454434"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24528"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1283454434"
                }
            },
            "author_association": "MEMBER",
            "body": "?",
            "commit_id": "fe5eadf4a3c0dd57c5a9936c4982187e3f9d082c",
            "created_at": "2023-08-03T16:35:44Z",
            "diff_hunk": "@@ -2,3 +2,4 @@\n /src\n /test\n /runtime/lua/vim/re.lua\n+/runtime/lua/vim/_meta/options.lua",
            "html_url": "https://github.com/neovim/neovim/pull/24528#discussion_r1283454434",
            "id": 1283454434,
            "line": 5,
            "node_id": "PRRC_kwDOAPphoM5Mf_Xi",
            "original_commit_id": "b3d64435740ec124f75f06015f751356633a46f5",
            "original_line": 5,
            "original_position": 4,
            "original_start_line": null,
            "path": ".styluaignore",
            "position": 4,
            "pull_request_review_id": 1561478067,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24528",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1283454434/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-03T16:35:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1283454434",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24528#discussion_r1283460766"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24528"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1283460766"
                }
            },
            "author_association": "MEMBER",
            "body": "CI is failing on stylua however adding this line doesn't seem to work.",
            "commit_id": "fe5eadf4a3c0dd57c5a9936c4982187e3f9d082c",
            "created_at": "2023-08-03T16:41:21Z",
            "diff_hunk": "@@ -2,3 +2,4 @@\n /src\n /test\n /runtime/lua/vim/re.lua\n+/runtime/lua/vim/_meta/options.lua",
            "html_url": "https://github.com/neovim/neovim/pull/24528#discussion_r1283460766",
            "id": 1283460766,
            "in_reply_to_id": 1283454434,
            "line": 5,
            "node_id": "PRRC_kwDOAPphoM5MgA6e",
            "original_commit_id": "b3d64435740ec124f75f06015f751356633a46f5",
            "original_line": 5,
            "original_position": 4,
            "original_start_line": null,
            "path": ".styluaignore",
            "position": 4,
            "pull_request_review_id": 1561487674,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24528",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1283460766/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-03T16:41:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1283460766",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24528#discussion_r1283748373"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24528"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1283748373"
                }
            },
            "author_association": "MEMBER",
            "body": "missing tags",
            "commit_id": "fe5eadf4a3c0dd57c5a9936c4982187e3f9d082c",
            "created_at": "2023-08-03T21:42:13Z",
            "diff_hunk": "@@ -1162,15 +1162,15 @@ A jump table for the options with a short description can be found at |Q_op|.\n \t\t\tThis probably only matters for Turkish.\n \n \t\t\t\t*'cdhome'* *'cdh'* *'nocdhome'* *'nocdh'*\n-'cdhome' 'cdh'\t\tboolean\t(default: off)\n+'cdhome' 'cdh'\t\tboolean\t(default off)\n \t\t\tglobal\n \tWhen on, |:cd|, |:tcd| and |:lcd| without an argument changes the\n \tcurrent working directory to the |$HOME| directory like in Unix.\n \tWhen off, those commands just print the current directory name.\n \tOn Unix this option has no effect.\n \n-\t\t\t\t\t\t*'cdpath'* *'cd'* *E344* *E346*",
            "html_url": "https://github.com/neovim/neovim/pull/24528#discussion_r1283748373",
            "id": 1283748373,
            "line": 1172,
            "node_id": "PRRC_kwDOAPphoM5MhHIV",
            "original_commit_id": "b3d64435740ec124f75f06015f751356633a46f5",
            "original_line": 1172,
            "original_position": 228,
            "original_start_line": null,
            "path": "runtime/doc/options.txt",
            "position": 228,
            "pull_request_review_id": 1561899243,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24528",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1283748373/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-03T21:42:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1283748373",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24528#discussion_r1283756644"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24528"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1283756644"
                }
            },
            "author_association": "MEMBER",
            "body": "thanks and fixed",
            "commit_id": "fe5eadf4a3c0dd57c5a9936c4982187e3f9d082c",
            "created_at": "2023-08-03T21:54:22Z",
            "diff_hunk": "@@ -1162,15 +1162,15 @@ A jump table for the options with a short description can be found at |Q_op|.\n \t\t\tThis probably only matters for Turkish.\n \n \t\t\t\t*'cdhome'* *'cdh'* *'nocdhome'* *'nocdh'*\n-'cdhome' 'cdh'\t\tboolean\t(default: off)\n+'cdhome' 'cdh'\t\tboolean\t(default off)\n \t\t\tglobal\n \tWhen on, |:cd|, |:tcd| and |:lcd| without an argument changes the\n \tcurrent working directory to the |$HOME| directory like in Unix.\n \tWhen off, those commands just print the current directory name.\n \tOn Unix this option has no effect.\n \n-\t\t\t\t\t\t*'cdpath'* *'cd'* *E344* *E346*",
            "html_url": "https://github.com/neovim/neovim/pull/24528#discussion_r1283756644",
            "id": 1283756644,
            "in_reply_to_id": 1283748373,
            "line": 1172,
            "node_id": "PRRC_kwDOAPphoM5MhJJk",
            "original_commit_id": "b3d64435740ec124f75f06015f751356633a46f5",
            "original_line": 1172,
            "original_position": 228,
            "original_start_line": null,
            "path": "runtime/doc/options.txt",
            "position": 228,
            "pull_request_review_id": 1561910041,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24528",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1283756644/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-03T21:54:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1283756644",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24528#discussion_r1284336144"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24528"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284336144"
                }
            },
            "author_association": "MEMBER",
            "body": "Missing tag",
            "commit_id": "fe5eadf4a3c0dd57c5a9936c4982187e3f9d082c",
            "created_at": "2023-08-04T12:00:21Z",
            "diff_hunk": "@@ -2590,16 +2584,16 @@ A jump table for the options with a short description can be found at |Q_op|.\n \toverrule the 'foldlevel' value for specific files.\n \tWhen the value is negative, it is not used.\n \n-\t\t\t\t\t\t*'foldmarker'* *'fmr'* *E536*",
            "html_url": "https://github.com/neovim/neovim/pull/24528#discussion_r1284336144",
            "id": 1284336144,
            "line": 2593,
            "node_id": "PRRC_kwDOAPphoM5MjWoQ",
            "original_commit_id": "8735c361b3f2657c5ac340f75c31cdaf12cd6e59",
            "original_line": 2593,
            "original_position": 727,
            "original_start_line": null,
            "path": "runtime/doc/options.txt",
            "position": 727,
            "pull_request_review_id": 1562733266,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24528",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284336144/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-04T12:00:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284336144",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24528#discussion_r1284338230"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24528"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284338230"
                }
            },
            "author_association": "MEMBER",
            "body": "Extra parenthesis",
            "commit_id": "fe5eadf4a3c0dd57c5a9936c4982187e3f9d082c",
            "created_at": "2023-08-04T12:03:04Z",
            "diff_hunk": "@@ -5041,10 +5034,11 @@ A jump table for the options with a short description can be found at |Q_op|.\n \tfilenames are stored as absolute paths.\n \tIf you leave out \"options\" many things won't work well after restoring\n \tthe session.\n-\t\t\t\t*'shada'* *'sd'* *E526* *E527* *E528*\n+\n+\t\t\t\t\t*'shada'* *'sd'* *E526* *E527* *E528*\n 'shada' 'sd'\t\tstring\t(default for\n-\t\t\t\t   Win32:  !,'100,<50,s10,h,rA:,rB:\n-\t\t\t\t   others: !,'100,<50,s10,h)\n+                                   Win32:  !,'100,<50,s10,h,rA:,rB:\n+                                   others: !,'100,<50,s10,h))",
            "html_url": "https://github.com/neovim/neovim/pull/24528#discussion_r1284338230",
            "id": 1284338230,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MjXI2",
            "original_commit_id": "8735c361b3f2657c5ac340f75c31cdaf12cd6e59",
            "original_line": 5041,
            "original_position": 1561,
            "original_start_line": null,
            "path": "runtime/doc/options.txt",
            "position": null,
            "pull_request_review_id": 1562737196,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24528",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284338230/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-04T12:03:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284338230",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24528#discussion_r1284338661"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24528"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284338661"
                }
            },
            "author_association": "MEMBER",
            "body": "Extra backslashes",
            "commit_id": "fe5eadf4a3c0dd57c5a9936c4982187e3f9d082c",
            "created_at": "2023-08-04T12:03:36Z",
            "diff_hunk": "@@ -5264,8 +5258,8 @@ A jump table for the options with a short description can be found at |Q_op|.\n \tsecurity reasons.\n \n \t\t\t\t\t\t*'shellquote'* *'shq'*\n-'shellquote' 'shq'\tstring\t(default: \"\"; Windows, when 'shell'\n-\t\t\t\t\tcontains \"sh\" somewhere: \"\\\"\")\n+'shellquote' 'shq'\tstring\t(default \"\"; Windows, when \\'shell\\'",
            "html_url": "https://github.com/neovim/neovim/pull/24528#discussion_r1284338661",
            "id": 1284338661,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MjXPl",
            "original_commit_id": "8735c361b3f2657c5ac340f75c31cdaf12cd6e59",
            "original_line": 5261,
            "original_position": 1591,
            "original_start_line": null,
            "path": "runtime/doc/options.txt",
            "position": null,
            "pull_request_review_id": 1562737891,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24528",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284338661/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-04T12:03:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284338661",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24528#discussion_r1284344262"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24528"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284344262"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n      defaults = { if_true = '[.?!]\\\\_[\\\\])\\'\" \\\\t]\\\\+' },\r\n```",
            "commit_id": "fe5eadf4a3c0dd57c5a9936c4982187e3f9d082c",
            "created_at": "2023-08-04T12:09:42Z",
            "diff_hunk": "@@ -1,3079 +1,10001 @@\n--- {\n---  {\n---    full_name='aleph', abbreviation='al',\n---    short_desc=\"ASCII code of the letter Aleph (Hebrew)\",\n---    varname='p_aleph', pv_name=nil,\n---    type='number', list=nil, scope={'global'},\n---    deny_duplicates=nil,\n---    enable_if=nil,\n---    defaults={condition=nil, if_true=224, if_false=nil},\n---    secure=nil, gettext=nil, noglob=nil, normal_fname_chars=nil,\n---    pri_mkrc=nil, deny_in_modelines=nil, normal_dname_chars=nil,\n---    modelineexpr=nil,\n---    func=nil,\n---    expand=nil, nodefault=nil, no_mkrc=nil,\n---    alloced=nil,\n---    save_pv_indir=nil,\n---    redraw={'curswant'},\n---  }\n--- }\n--- types: bool, number, string\n--- lists: (nil), comma, onecomma, flags, flagscomma\n--- scopes: global, buffer, window\n--- redraw options: statuslines, tabline, current_window, current_window_only,\n---                 current_buffer, all_windows, curswant\n--- defaults: {condition=#if condition, if_true=default, if_false=default}\n--- #if condition:\n---    string: #ifdef string\n---    !string: #ifndef string\n---    {string, string}: #if defined(string) && defined(string)\n---    {!string, !string}: #if !defined(string) && !defined(string)\n-local cstr = function(s)\n+--- @class vim.option_meta\n+--- @field full_name string\n+--- @field desc? string\n+--- @field abbreviation? string\n+--- @field short_desc? string|fun(): string\n+--- @field varname? string\n+--- @field pv_name? string\n+--- @field type 'bool'|'number'|'string'\n+--- @field list? 'comma'|'onecomma'|'flags'|'flagscomma'\n+--- @field scope vim.option_scope[]\n+--- @field deny_duplicates? boolean\n+--- @field enable_if? string|false\n+--- @field defaults? vim.option_defaults\n+--- @field secure? true\n+--- @field noglob? true\n+--- @field normal_fname_chars? true\n+--- @field pri_mkrc? true\n+--- @field deny_in_modelines? true\n+--- @field normal_dname_chars? true\n+--- @field modelineexpr? true\n+--- @field func? true\n+--- @field expand? string|true\n+--- @field nodefault? true\n+--- @field no_mkrc? true\n+--- @field alloced? true\n+--- @field redraw? vim.option_redraw[]\n+--- @field cb? string\n+--- @field tags? string[]\n+\n+--- @class vim.option_defaults\n+--- @field condition? string\n+---    string: #ifdef string\n+---    !string: #ifndef string\n+--- @field if_true integer|boolean|string|fun(): string\n+--- @field if_false? integer|boolean|string\n+--- @field doc? string Default to show in options.txt\n+--- @field meta? integer|boolean|string Default to use in Lua meta files\n+\n+--- @alias vim.option_scope 'global'|'buffer'|'window'\n+\n+--- @alias vim.option_redraw\n+--- |'statuslines'\n+--- |'tabline'\n+--- |'current_window'\n+--- |'current_window_only'\n+--- |'current_buffer'\n+--- |'all_windows'\n+--- |'curswant'\n+--- |'ui_option'\n+\n+--- @param s string\n+--- @return string\n+local function cstr(s)\n   return '\"' .. s:gsub('[\"\\\\]', '\\\\%0'):gsub('\\t', '\\\\t') .. '\"'\n end\n-local macros=function(s)\n+\n+--- @param s string\n+--- @return fun(): string\n+local function macros(s)\n   return function()\n     return s\n   end\n end\n-local imacros=function(s)\n+\n+--- @param s string\n+--- @return fun(): string\n+local function imacros(s)\n   return function()\n     return '(intptr_t)' .. s\n   end\n end\n-local N_=function(s) -- luacheck: ignore 211 (currently unused)\n+\n+--- @param s string\n+--- @return fun(): string\n+local function N_(s) -- luacheck: ignore 211 (currently unused)\n   return function()\n     return 'N_(' .. cstr(s) .. ')'\n   end\n end\n--- used for 'cinkeys' and 'indentkeys'\n-local indentkeys_default = '0{,0},0),0],:,0#,!^F,o,O,e';\n+\n return {\n-  cstr=cstr,\n-  options={\n-    {\n-      full_name='aleph', abbreviation='al',\n-      short_desc=N_(\"ASCII code of the letter Aleph (Hebrew)\"),\n-      type='number', scope={'global'},\n-      defaults={if_true=224}\n-    },\n-    {\n-      full_name='arabic', abbreviation='arab',\n-      short_desc=N_(\"Arabic as a default second language\"),\n-      type='bool', scope={'window'},\n-      redraw={'curswant'},\n-      defaults={if_true=false},\n-      cb='did_set_arabic'\n-    },\n-    {\n-      full_name='arabicshape', abbreviation='arshape',\n-      short_desc=N_(\"do shaping for Arabic characters\"),\n-      type='bool', scope={'global'},\n-      redraw={'all_windows', 'ui_option'},\n+  cstr = cstr,\n+  --- @type vim.option_meta[]\n+  options = {\n+    {\n+      abbreviation = 'al',\n+      defaults = { if_true = 224 },\n+      full_name = 'aleph',\n+      scope = { 'global' },\n+      short_desc = N_('ASCII code of the letter Aleph (Hebrew)'),\n+      type = 'number',\n+    },\n+    {\n+      abbreviation = 'arab',\n+      cb = 'did_set_arabic',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        This option can be set to start editing Arabic text.\n+        Setting this option will:\n+        - Set the 'rightleft' option, unless 'termbidi' is set.\n+        - Set the 'arabicshape' option, unless 'termbidi' is set.\n+        - Set the 'keymap' option to \"arabic\"; in Insert mode CTRL-^ toggles\n+          between typing English and Arabic key mapping.\n+        - Set the 'delcombine' option\n \n-      varname='p_arshape',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='allowrevins', abbreviation='ari',\n-      short_desc=N_(\"allow CTRL-_ in Insert and Command-line mode\"),\n-      type='bool', scope={'global'},\n-      varname='p_ari',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='ambiwidth', abbreviation='ambw',\n-      short_desc=N_(\"what to do with Unicode chars of ambiguous width\"),\n-      type='string', scope={'global'},\n-      redraw={'all_windows', 'ui_option'},\n-      varname='p_ambw',\n-      defaults={if_true=\"single\"},\n-      cb='did_set_ambiwidth'\n-    },\n-    {\n-      full_name='autochdir', abbreviation='acd',\n-      short_desc=N_(\"change directory to the file in the current window\"),\n-      type='bool', scope={'global'},\n-      varname='p_acd',\n-      defaults={if_true=false},\n-      cb='did_set_autochdir'\n-    },\n-    {\n-      full_name='autoindent', abbreviation='ai',\n-      short_desc=N_(\"take indent for new line from previous line\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_ai',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='autoread', abbreviation='ar',\n-      short_desc=N_(\"autom. read file when changed outside of Vim\"),\n-      type='bool', scope={'global', 'buffer'},\n-      varname='p_ar',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='autowrite', abbreviation='aw',\n-      short_desc=N_(\"automatically write file if changed\"),\n-      type='bool', scope={'global'},\n-      varname='p_aw',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='autowriteall', abbreviation='awa',\n-      short_desc=N_(\"as 'autowrite', but works with more commands\"),\n-      type='bool', scope={'global'},\n-      varname='p_awa',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='background', abbreviation='bg',\n-      short_desc=N_(\"\\\"dark\\\" or \\\"light\\\", used for highlight colors\"),\n-      type='string', scope={'global'},\n-      varname='p_bg',\n-      defaults={if_true=\"dark\"},\n-      cb='did_set_background'\n-    },\n-    {\n-      full_name='backspace', abbreviation='bs',\n-      short_desc=N_(\"how backspace works at start of line\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_bs',\n-      defaults={if_true=\"indent,eol,start\"},\n-      cb='did_set_backspace'\n-    },\n-    {\n-      full_name='backup', abbreviation='bk',\n-      short_desc=N_(\"keep backup file after overwriting a file\"),\n-      type='bool', scope={'global'},\n-      varname='p_bk',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='backupcopy', abbreviation='bkc',\n-      short_desc=N_(\"make backup as a copy, don't rename the file\"),\n-      type='string', list='onecomma', scope={'global', 'buffer'},\n-      deny_duplicates=true,\n-      varname='p_bkc',\n-      defaults={\n-        condition='UNIX',\n-        if_true=\"auto\",\n-        if_false=\"auto\"\n+        Resetting this option will:\n+        - Reset the 'rightleft' option.\n+        - Disable the use of 'keymap' (without changing its value).\n+        Note that 'arabicshape' and 'delcombine' are not reset (it is a global\n+        option).\n+        Also see |arabic.txt|.\n+      ]=],\n+      full_name = 'arabic',\n+      redraw = { 'curswant' },\n+      scope = { 'window' },\n+      short_desc = N_('Arabic as a default second language'),\n+      type = 'bool',\n+    },\n+    {\n+      abbreviation = 'arshape',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        When on and 'termbidi' is off, the required visual character\n+        corrections that need to take place for displaying the Arabic language\n+        take effect.  Shaping, in essence, gets enabled; the term is a broad\n+        one which encompasses:\n+          a) the changing/morphing of characters based on their location\n+             within a word (initial, medial, final and stand-alone).\n+          b) the enabling of the ability to compose characters\n+          c) the enabling of the required combining of some characters\n+        When disabled the display shows each character's true stand-alone\n+        form.\n+        Arabic is a complex language which requires other settings, for\n+        further details see |arabic.txt|.\n+      ]=],\n+      full_name = 'arabicshape',\n+      redraw = { 'all_windows', 'ui_option' },\n+      scope = { 'global' },\n+      short_desc = N_('do shaping for Arabic characters'),\n+      type = 'bool',\n+      varname = 'p_arshape',\n+    },\n+    {\n+      abbreviation = 'ari',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Allow CTRL-_ in Insert and Command-line mode.  This is default off, to\n+        avoid that users that accidentally type CTRL-_ instead of SHIFT-_ get\n+        into reverse Insert mode, and don't know how to get out.  See\n+        'revins'.\n+      ]=],\n+      full_name = 'allowrevins',\n+      scope = { 'global' },\n+      short_desc = N_('allow CTRL-_ in Insert and Command-line mode'),\n+      type = 'bool',\n+      varname = 'p_ari',\n+    },\n+    {\n+      abbreviation = 'ambw',\n+      cb = 'did_set_ambiwidth',\n+      defaults = { if_true = 'single' },\n+      desc = [=[\n+        Tells Vim what to do with characters with East Asian Width Class\n+        Ambiguous (such as Euro, Registered Sign, Copyright Sign, Greek\n+        letters, Cyrillic letters).\n+\n+        There are currently two possible values:\n+        \"single\":\tUse the same width as characters in US-ASCII.  This is\n+        \t\texpected by most users.\n+        \"double\":\tUse twice the width of ASCII characters.\n+        \t\t\t\t\t\t*E834* *E835*\n+        The value \"double\" cannot be used if 'listchars' or 'fillchars'\n+        contains a character that would be double width.  These errors may\n+        also be given when calling setcellwidths().\n+\n+        The values are overruled for characters specified with\n+        |setcellwidths()|.\n+\n+        There are a number of CJK fonts for which the width of glyphs for\n+        those characters are solely based on how many octets they take in\n+        legacy/traditional CJK encodings.  In those encodings, Euro,\n+        Registered sign, Greek/Cyrillic letters are represented by two octets,\n+        therefore those fonts have \"wide\" glyphs for them.  This is also\n+        true of some line drawing characters used to make tables in text\n+        file.  Therefore, when a CJK font is used for GUI Vim or\n+        Vim is running inside a terminal (emulators) that uses a CJK font\n+        (or Vim is run inside an xterm invoked with \"-cjkwidth\" option.),\n+        this option should be set to \"double\" to match the width perceived\n+        by Vim with the width of glyphs in the font.  Perhaps it also has\n+        to be set to \"double\" under CJK MS-Windows when the system locale is\n+        set to one of CJK locales.  See Unicode Standard Annex #11\n+        (https://www.unicode.org/reports/tr11).\n+      ]=],\n+      full_name = 'ambiwidth',\n+      redraw = { 'all_windows', 'ui_option' },\n+      scope = { 'global' },\n+      short_desc = N_('what to do with Unicode chars of ambiguous width'),\n+      type = 'string',\n+      varname = 'p_ambw',\n+    },\n+    {\n+      abbreviation = 'acd',\n+      cb = 'did_set_autochdir',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        When on, Vim will change the current working directory whenever you\n+        open a file, switch buffers, delete a buffer or open/close a window.\n+        It will change to the directory containing the file which was opened\n+        or selected.  When a buffer has no name it also has no directory, thus\n+        the current directory won't change when navigating to it.\n+        Note: When this option is on some plugins may not work.\n+      ]=],\n+      full_name = 'autochdir',\n+      scope = { 'global' },\n+      short_desc = N_('change directory to the file in the current window'),\n+      type = 'bool',\n+      varname = 'p_acd',\n+    },\n+    {\n+      abbreviation = 'ai',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        Copy indent from current line when starting a new line (typing <CR>\n+        in Insert mode or when using the \"o\" or \"O\" command).  If you do not\n+        type anything on the new line except <BS> or CTRL-D and then type\n+        <Esc>, CTRL-O or <CR>, the indent is deleted again.  Moving the cursor\n+        to another line has the same effect, unless the 'I' flag is included\n+        in 'cpoptions'.\n+        When autoindent is on, formatting (with the \"gq\" command or when you\n+        reach 'textwidth' in Insert mode) uses the indentation of the first\n+        line.\n+        When 'smartindent' or 'cindent' is on the indent is changed in\n+        a different way.\n+      ]=],\n+      full_name = 'autoindent',\n+      scope = { 'buffer' },\n+      short_desc = N_('take indent for new line from previous line'),\n+      type = 'bool',\n+      varname = 'p_ai',\n+    },\n+    {\n+      abbreviation = 'ar',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        When a file has been detected to have been changed outside of Vim and\n+        it has not been changed inside of Vim, automatically read it again.\n+        When the file has been deleted this is not done, so you have the text\n+        from before it was deleted.  When it appears again then it is read.\n+        |timestamp|\n+        If this option has a local value, use this command to switch back to\n+        using the global value: >\n+        \t:set autoread<\n+        <\n+      ]=],\n+      full_name = 'autoread',\n+      scope = { 'global', 'buffer' },\n+      short_desc = N_('autom. read file when changed outside of Vim'),\n+      type = 'bool',\n+      varname = 'p_ar',\n+    },\n+    {\n+      abbreviation = 'aw',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Write the contents of the file, if it has been modified, on each\n+        `:next`, `:rewind`, `:last`, `:first`, `:previous`, `:stop`,\n+        `:suspend`, `:tag`, `:!`, `:make`, CTRL-] and CTRL-^ command; and when\n+        a `:buffer`, CTRL-O, CTRL-I, '{A-Z0-9}, or `{A-Z0-9} command takes one\n+        to another file.\n+        A buffer is not written if it becomes hidden, e.g. when 'bufhidden' is\n+        set to \"hide\" and `:next` is used.\n+        Note that for some commands the 'autowrite' option is not used, see\n+        'autowriteall' for that.\n+        Some buffers will not be written, specifically when 'buftype' is\n+        \"nowrite\", \"nofile\", \"terminal\" or \"prompt\".\n+        USE WITH CARE: If you make temporary changes to a buffer that you\n+        don't want to be saved this option may cause it to be saved anyway.\n+        Renaming the buffer with \":file {name}\" may help avoid this.\n+      ]=],\n+      full_name = 'autowrite',\n+      scope = { 'global' },\n+      short_desc = N_('automatically write file if changed'),\n+      type = 'bool',\n+      varname = 'p_aw',\n+    },\n+    {\n+      abbreviation = 'awa',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Like 'autowrite', but also used for commands \":edit\", \":enew\", \":quit\",\n+        \":qall\", \":exit\", \":xit\", \":recover\" and closing the Vim window.\n+        Setting this option also implies that Vim behaves like 'autowrite' has\n+        been set.\n+      ]=],\n+      full_name = 'autowriteall',\n+      scope = { 'global' },\n+      short_desc = N_(\"as 'autowrite', but works with more commands\"),\n+      type = 'bool',\n+      varname = 'p_awa',\n+    },\n+    {\n+      abbreviation = 'bg',\n+      cb = 'did_set_background',\n+      defaults = { if_true = 'dark' },\n+      desc = [=[\n+        When set to \"dark\" or \"light\", adjusts the default color groups for\n+        that background type.  The |TUI| or other UI sets this on startup\n+        (triggering |OptionSet|) if it can detect the background color.\n+\n+        This option does NOT change the background color, it tells Nvim what\n+        the \"inherited\" (terminal/GUI) background looks like.\n+        See |:hi-normal| if you want to set the background color explicitly.\n+        \t\t\t\t\t*g:colors_name*\n+        When a color scheme is loaded (the \"g:colors_name\" variable is set)\n+        setting 'background' will cause the color scheme to be reloaded.  If\n+        the color scheme adjusts to the value of 'background' this will work.\n+        However, if the color scheme sets 'background' itself the effect may\n+        be undone.  First delete the \"g:colors_name\" variable when needed.\n+\n+        Normally this option would be set in the vimrc file.  Possibly\n+        depending on the terminal name.  Example: >\n+        \t:if $TERM ==# \"xterm\"\n+        \t:  set background=dark\n+        \t:endif\n+        <\tWhen this option is set, the default settings for the highlight groups\n+        will change.  To use other settings, place \":highlight\" commands AFTER\n+        the setting of the 'background' option.\n+        This option is also used in the \"$VIMRUNTIME/syntax/syntax.vim\" file\n+        to select the colors for syntax highlighting.  After changing this\n+        option, you must load syntax.vim again to see the result.  This can be\n+        done with \":syntax on\".\n+      ]=],\n+      full_name = 'background',\n+      scope = { 'global' },\n+      short_desc = N_('\"dark\" or \"light\", used for highlight colors'),\n+      type = 'string',\n+      varname = 'p_bg',\n+    },\n+    {\n+      abbreviation = 'bs',\n+      cb = 'did_set_backspace',\n+      defaults = { if_true = 'indent,eol,start' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Influences the working of <BS>, <Del>, CTRL-W and CTRL-U in Insert\n+        mode.  This is a list of items, separated by commas.  Each item allows\n+        a way to backspace over something:\n+        value\teffect\t~\n+        indent\tallow backspacing over autoindent\n+        eol\tallow backspacing over line breaks (join lines)\n+        start\tallow backspacing over the start of insert; CTRL-W and CTRL-U\n+        \tstop once at the start of insert.\n+        nostop\tlike start, except CTRL-W and CTRL-U do not stop at the start of\n+        \tinsert.\n+\n+        When the value is empty, Vi compatible backspacing is used, none of\n+        the ways mentioned for the items above are possible.\n+      ]=],\n+      full_name = 'backspace',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('how backspace works at start of line'),\n+      type = 'string',\n+      varname = 'p_bs',\n+    },\n+    {\n+      abbreviation = 'bk',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Make a backup before overwriting a file.  Leave it around after the\n+        file has been successfully written.  If you do not want to keep the\n+        backup file, but you do want a backup while the file is being\n+        written, reset this option and set the 'writebackup' option (this is\n+        the default).  If you do not want a backup file at all reset both\n+        options (use this if your file system is almost full).  See the\n+        |backup-table| for more explanations.\n+        When the 'backupskip' pattern matches, a backup is not made anyway.\n+        When 'patchmode' is set, the backup may be renamed to become the\n+        oldest version of a file.\n+      ]=],\n+      full_name = 'backup',\n+      scope = { 'global' },\n+      short_desc = N_('keep backup file after overwriting a file'),\n+      type = 'bool',\n+      varname = 'p_bk',\n+    },\n+    {\n+      abbreviation = 'bkc',\n+      cb = 'did_set_backupcopy',\n+      defaults = { condition = 'UNIX', if_false = 'auto', if_true = 'auto' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        When writing a file and a backup is made, this option tells how it's\n+        done.  This is a comma-separated list of words.\n+\n+        The main values are:\n+        \"yes\"\tmake a copy of the file and overwrite the original one\n+        \"no\"\trename the file and write a new one\n+        \"auto\"\tone of the previous, what works best\n+\n+        Extra values that can be combined with the ones above are:\n+        \"breaksymlink\"\talways break symlinks when writing\n+        \"breakhardlink\"\talways break hardlinks when writing\n+\n+        Making a copy and overwriting the original file:\n+        - Takes extra time to copy the file.\n+        + When the file has special attributes, is a (hard/symbolic) link or\n+          has a resource fork, all this is preserved.\n+        - When the file is a link the backup will have the name of the link,\n+          not of the real file.\n+\n+        Renaming the file and writing a new one:\n+        + It's fast.\n+        - Sometimes not all attributes of the file can be copied to the new\n+          file.\n+        - When the file is a link the new file will not be a link.\n+\n+        The \"auto\" value is the middle way: When Vim sees that renaming the\n+        file is possible without side effects (the attributes can be passed on\n+        and the file is not a link) that is used.  When problems are expected,\n+        a copy will be made.\n+\n+        The \"breaksymlink\" and \"breakhardlink\" values can be used in\n+        combination with any of \"yes\", \"no\" and \"auto\".  When included, they\n+        force Vim to always break either symbolic or hard links by doing\n+        exactly what the \"no\" option does, renaming the original file to\n+        become the backup and writing a new file in its place.  This can be\n+        useful for example in source trees where all the files are symbolic or\n+        hard links and any changes should stay in the local source tree, not\n+        be propagated back to the original source.\n+        \t\t\t\t\t\t*crontab*\n+        One situation where \"no\" and \"auto\" will cause problems: A program\n+        that opens a file, invokes Vim to edit that file, and then tests if\n+        the open file was changed (through the file descriptor) will check the\n+        backup file instead of the newly created file.  \"crontab -e\" is an\n+        example.\n+\n+        When a copy is made, the original file is truncated and then filled\n+        with the new text.  This means that protection bits, owner and\n+        symbolic links of the original file are unmodified.  The backup file,\n+        however, is a new file, owned by the user who edited the file.  The\n+        group of the backup is set to the group of the original file.  If this\n+        fails, the protection bits for the group are made the same as for\n+        others.\n+\n+        When the file is renamed, this is the other way around: The backup has\n+        the same attributes of the original file, and the newly written file\n+        is owned by the current user.  When the file was a (hard/symbolic)\n+        link, the new file will not!  That's why the \"auto\" value doesn't\n+        rename when the file is a link.  The owner and group of the newly\n+        written file will be set to the same ones as the original file, but\n+        the system may refuse to do this.  In that case the \"auto\" value will\n+        again not rename the file.\n+      ]=],\n+      full_name = 'backupcopy',\n+      list = 'onecomma',\n+      scope = { 'global', 'buffer' },\n+      short_desc = N_(\"make backup as a copy, don't rename the file\"),\n+      type = 'string',\n+      varname = 'p_bkc',\n+    },\n+    {\n+      abbreviation = 'bdir',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        List of directories for the backup file, separated with commas.\n+        - The backup file will be created in the first directory in the list\n+          where this is possible.  If none of the directories exist Nvim will\n+          attempt to create the last directory in the list.\n+        - Empty means that no backup file will be created ('patchmode' is\n+          impossible!).  Writing may fail because of this.\n+        - A directory \".\" means to put the backup file in the same directory\n+          as the edited file.\n+        - A directory starting with \"./\" (or \".\\\" for MS-Windows) means to put\n+          the backup file relative to where the edited file is.  The leading\n+          \".\" is replaced with the path name of the edited file.\n+          (\".\" inside a directory name has no special meaning).\n+        - Spaces after the comma are ignored, other spaces are considered part\n+          of the directory name.  To have a space at the start of a directory\n+          name, precede it with a backslash.\n+        - To include a comma in a directory name precede it with a backslash.\n+        - A directory name may end in an '/'.\n+        - For Unix and Win32, if a directory ends in two path separators \"//\",\n+          the swap file name will be built from the complete path to the file\n+          with all path separators changed to percent '%' signs. This will\n+          ensure file name uniqueness in the backup directory.\n+          On Win32, it is also possible to end with \"\\\\\".  However, When a\n+          separating comma is following, you must use \"//\", since \"\\\\\" will\n+          include the comma in the file name. Therefore it is recommended to\n+          use '//', instead of '\\\\'.\n+        - Environment variables are expanded |:set_env|.\n+        - Careful with '\\' characters, type one before a space, type two to\n+          get one in the option (see |option-backslash|), for example: >\n+            :set bdir=c:\\\\tmp,\\ dir\\\\,with\\\\,commas,\\\\\\ dir\\ with\\ spaces\n+        <\n+        See also 'backup' and 'writebackup' options.\n+        If you want to hide your backup files on Unix, consider this value: >\n+        \t:set backupdir=./.backup,~/.backup,.,/tmp\n+        <\tYou must create a \".backup\" directory in each directory and in your\n+        home directory for this to work properly.\n+        The use of |:set+=| and |:set-=| is preferred when adding or removing\n+        directories from the list.  This avoids problems when a future version\n+        uses another default.\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      expand = 'nodefault',\n+      full_name = 'backupdir',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_('list of directories for the backup file'),\n+      type = 'string',\n+      varname = 'p_bdir',\n+    },\n+    {\n+      abbreviation = 'bex',\n+      cb = 'did_set_backupext_or_patchmode',\n+      defaults = { if_true = '~' },\n+      desc = [=[\n+        String which is appended to a file name to make the name of the\n+        backup file.  The default is quite unusual, because this avoids\n+        accidentally overwriting existing files with a backup file.  You might\n+        prefer using \".bak\", but make sure that you don't have files with\n+        \".bak\" that you want to keep.\n+        Only normal file name characters can be used; `/\\*?[|<>` are illegal.\n+\n+        If you like to keep a lot of backups, you could use a BufWritePre\n+        autocommand to change 'backupext' just before writing the file to\n+        include a timestamp. >\n+        \t:au BufWritePre * let &bex = '-' .. strftime(\"%Y%b%d%X\") .. '~'\n+        <\tUse 'backupdir' to put the backup in a different directory.\n+      ]=],\n+      full_name = 'backupext',\n+      normal_fname_chars = true,\n+      scope = { 'global' },\n+      short_desc = N_('extension used for the backup file'),\n+      tags = { 'E589' },\n+      type = 'string',\n+      varname = 'p_bex',\n+    },\n+    {\n+      abbreviation = 'bsk',\n+      defaults = {\n+        if_true = '',\n+        doc = [[\"$TMPDIR/*,$TMP/*,$TEMP/*\"\n+        Unix: \"/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*\"\n+        Mac: \"/private/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*\")]],\n+        meta = '/tmp/*',\n       },\n-      cb='did_set_backupcopy'\n-    },\n-    {\n-      full_name='backupdir', abbreviation='bdir',\n-      short_desc=N_(\"list of directories for the backup file\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      secure=true,\n-      expand='nodefault',\n-      varname='p_bdir',\n-      defaults={if_true=''}\n-    },\n-    {\n-      full_name='backupext', abbreviation='bex',\n-      short_desc=N_(\"extension used for the backup file\"),\n-      type='string', scope={'global'},\n-      normal_fname_chars=true,\n-      varname='p_bex',\n-      defaults={if_true=\"~\"},\n-      cb='did_set_backupext_or_patchmode'\n-    },\n-    {\n-      full_name='backupskip', abbreviation='bsk',\n-      short_desc=N_(\"no backup for files that match these patterns\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_bsk',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='belloff', abbreviation='bo',\n-      short_desc=N_(\"do not ring the bell for these reasons\"),\n-      type='string', list='comma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_bo',\n-      defaults={if_true=\"all\"},\n-      cb='did_set_belloff'\n-    },\n-    {\n-      full_name='binary', abbreviation='bin',\n-      short_desc=N_(\"read/write/edit file in binary mode\"),\n-      type='bool', scope={'buffer'},\n-      redraw={'statuslines'},\n-      varname='p_bin',\n-      defaults={if_true=false},\n-      cb='did_set_binary'\n-    },\n-    {\n-      full_name='bomb',\n-      short_desc=N_(\"a Byte Order Mark to the file\"),\n-      type='bool', scope={'buffer'},\n-      no_mkrc=true,\n-      redraw={'statuslines'},\n-      varname='p_bomb',\n-      defaults={if_true=false},\n-      cb='did_set_eof_eol_fixeol_bomb'\n-    },\n-    {\n-      full_name='breakat', abbreviation='brk',\n-      short_desc=N_(\"characters that may cause a line break\"),\n-      type='string', list='flags', scope={'global'},\n-      redraw={'all_windows'},\n-      varname='p_breakat',\n-      defaults={if_true=\" \\t!@*-+;:,./?\"},\n-      cb='did_set_breakat'\n-    },\n-    {\n-      full_name='breakindent', abbreviation='bri',\n-      short_desc=N_(\"wrapped line repeats indent\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='breakindentopt', abbreviation='briopt',\n-      short_desc=N_(\"settings for 'breakindent'\"),\n-      type='string', list='onecomma', scope={'window'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      redraw={'current_buffer'},\n-      defaults={if_true=\"\"},\n-      cb='did_set_breakindentopt'\n-    },\n-    {\n-      full_name='browsedir', abbreviation='bsdir',\n-      short_desc=N_(\"which directory to start browsing in\"),\n-      type='string', scope={'global'},\n-      enable_if=false,\n-    },\n-    {\n-      full_name='bufhidden', abbreviation='bh',\n-      short_desc=N_(\"what to do when buffer is no longer in window\"),\n-      type='string', scope={'buffer'},\n-      noglob=true,\n-      alloced=true,\n-      varname='p_bh',\n-      defaults={if_true=\"\"},\n-      cb='did_set_bufhidden'\n-    },\n-    {\n-      full_name='buflisted', abbreviation='bl',\n-      short_desc=N_(\"whether the buffer shows up in the buffer list\"),\n-      type='bool', scope={'buffer'},\n-      noglob=true,\n-      varname='p_bl',\n-      defaults={if_true=1},\n-      cb='did_set_buflisted'\n-    },\n-    {\n-      full_name='buftype', abbreviation='bt',\n-      short_desc=N_(\"special type of buffer\"),\n-      type='string', scope={'buffer'},\n-      noglob=true,\n-      alloced=true,\n-      varname='p_bt',\n-      defaults={if_true=\"\"},\n-      cb='did_set_buftype'\n-    },\n-    {\n-      full_name='casemap', abbreviation='cmp',\n-      short_desc=N_(\"specifies how case of letters is changed\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_cmp',\n-      defaults={if_true=\"internal,keepascii\"},\n-      cb='did_set_casemap'\n-    },\n-    {\n-      full_name='cdhome', abbreviation='cdh',\n-      short_desc=N_(\":cd without argument goes to the home directory\"),\n-      type='bool', scope={'global'},\n-      secure=true,\n-      varname='p_cdh',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='cdpath', abbreviation='cd',\n-      short_desc=N_(\"list of directories searched with \\\":cd\\\"\"),\n-      type='string', list='comma', scope={'global'},\n-      deny_duplicates=true,\n-      expand=true,\n-      secure=true,\n-      varname='p_cdpath',\n-      defaults={if_true=\",,\"}\n-    },\n-    {\n-      full_name='cedit',\n-      short_desc=N_(\"used to open the command-line window\"),\n-      type='string', scope={'global'},\n-      varname='p_cedit',\n-      defaults={if_true=macros('CTRL_F_STR')},\n-      cb='did_set_cedit'\n-    },\n-    {\n-      full_name='channel',\n-      short_desc=N_(\"Channel connected to the buffer\"),\n-      type='number', scope={'buffer'},\n-      no_mkrc=true,\n-      nodefault=true,\n-      varname='p_channel',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='charconvert', abbreviation='ccv',\n-      short_desc=N_(\"expression for character encoding conversion\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      varname='p_ccv',\n-      defaults={if_true=\"\"},\n-      cb='did_set_optexpr'\n-    },\n-    {\n-      full_name='cindent', abbreviation='cin',\n-      short_desc=N_(\"do C program indenting\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_cin',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='cinkeys', abbreviation='cink',\n-      short_desc=N_(\"keys that trigger indent when 'cindent' is set\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_cink',\n-      defaults={if_true=indentkeys_default}\n-    },\n-    {\n-      full_name='cinoptions', abbreviation='cino',\n-      short_desc=N_(\"how to do indenting when 'cindent' is set\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_cino',\n-      defaults={if_true=\"\"},\n-      cb='did_set_cinoptions'\n-    },\n-    {\n-      full_name='cinwords', abbreviation='cinw',\n-      short_desc=N_(\"words where 'si' and 'cin' add an indent\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_cinw',\n-      defaults={if_true=\"if,else,while,do,for,switch\"}\n-    },\n-    {\n-      full_name='cinscopedecls', abbreviation='cinsd',\n-      short_desc=N_(\"words that are recognized by 'cino-g'\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_cinsd',\n-      defaults={if_true=\"public,protected,private\"}\n-    },\n-    {\n-      full_name='clipboard', abbreviation='cb',\n-      short_desc=N_(\"use the clipboard as the unnamed register\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_cb',\n-      defaults={if_true=\"\"},\n-      cb='did_set_clipboard'\n-    },\n-    {\n-      full_name='cmdheight', abbreviation='ch',\n-      short_desc=N_(\"number of lines to use for the command-line\"),\n-      type='number', scope={'global'},\n-      redraw={'all_windows'},\n-      varname='p_ch',\n-      defaults={if_true=1},\n-      cb='did_set_cmdheight'\n-    },\n-    {\n-      full_name='cmdwinheight', abbreviation='cwh',\n-      short_desc=N_(\"height of the command-line window\"),\n-      type='number', scope={'global'},\n-      varname='p_cwh',\n-      defaults={if_true=7}\n-    },\n-    {\n-      full_name='colorcolumn', abbreviation='cc',\n-      short_desc=N_(\"columns to highlight\"),\n-      type='string', list='onecomma', scope={'window'},\n-      deny_duplicates=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"\"},\n-      cb='did_set_colorcolumn'\n-    },\n-    {\n-      full_name='columns', abbreviation='co',\n-      short_desc=N_(\"number of columns in the display\"),\n-      type='number', scope={'global'},\n-      no_mkrc=true,\n-      varname='p_columns',\n-      defaults={if_true=macros('DFLT_COLS')}\n-    },\n-    {\n-      full_name='comments', abbreviation='com',\n-      short_desc=N_(\"patterns that can start a comment line\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      redraw={'curswant'},\n-      varname='p_com',\n-      defaults={if_true=\"s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-\"},\n-      cb='did_set_comments'\n-    },\n-    {\n-      full_name='commentstring', abbreviation='cms',\n-      short_desc=N_(\"template for comments; used for fold marker\"),\n-      type='string', scope={'buffer'},\n-      alloced=true,\n-      redraw={'curswant'},\n-      varname='p_cms',\n-      defaults={if_true=\"\"},\n-      cb='did_set_commentstring'\n-    },\n-    {\n-      full_name='compatible', abbreviation='cp',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      varname='p_force_off',\n-      -- pri_mkrc isn't needed here, optval_default()\n-      -- always returns TRUE for 'compatible'\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='complete', abbreviation='cpt',\n-      short_desc=N_(\"specify how Insert mode completion works\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_cpt',\n-      defaults={if_true=\".,w,b,u,t\"},\n-      cb='did_set_complete'\n-    },\n-    {\n-      full_name='concealcursor', abbreviation='cocu',\n-      short_desc=N_(\"whether concealable text is hidden in cursor line\"),\n-      type='string', scope={'window'},\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"\"},\n-      cb='did_set_concealcursor'\n-    },\n-    {\n-      full_name='conceallevel', abbreviation='cole',\n-      short_desc=N_(\"whether concealable text is shown or hidden\"),\n-      type='number', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='completefunc', abbreviation='cfu',\n-      short_desc=N_(\"function to be used for Insert mode completion\"),\n-      type='string', scope={'buffer'},\n-      secure=true,\n-      alloced=true,\n-      func=true,\n-      varname='p_cfu',\n-      defaults={if_true=\"\"},\n-      cb='did_set_completefunc'\n-    },\n-    {\n-      full_name='completeopt', abbreviation='cot',\n-      short_desc=N_(\"options for Insert mode completion\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_cot',\n-      defaults={if_true=\"menu,preview\"},\n-      cb='did_set_completeopt'\n-    },\n-    {\n-      full_name='completeslash', abbreviation='csl',\n-      type='string', scope={'buffer'},\n-      varname='p_csl',\n-      enable_if='BACKSLASH_IN_FILENAME',\n-      defaults={if_true=\"\"},\n-      cb='did_set_completeslash'\n-    },\n-    {\n-      full_name='confirm', abbreviation='cf',\n-      short_desc=N_(\"ask what to do about unsaved/read-only files\"),\n-      type='bool', scope={'global'},\n-      varname='p_confirm',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='copyindent', abbreviation='ci',\n-      short_desc=N_(\"make 'autoindent' use existing indent structure\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_ci',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='cpoptions', abbreviation='cpo',\n-      short_desc=N_(\"flags for Vi-compatible behavior\"),\n-      type='string', list='flags', scope={'global'},\n-      redraw={'all_windows'},\n-      varname='p_cpo',\n-      defaults={if_true=macros('CPO_VIM')},\n-      cb='did_set_cpoptions'\n-    },\n-    {\n-      full_name='cursorbind', abbreviation='crb',\n-      short_desc=N_(\"move cursor in window as it moves in other windows\"),\n-      type='bool', scope={'window'},\n-      pv_name='p_crbind',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='cursorcolumn', abbreviation='cuc',\n-      short_desc=N_(\"highlight the screen column of the cursor\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window_only'},\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='cursorline', abbreviation='cul',\n-      short_desc=N_(\"highlight the screen line of the cursor\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window_only'},\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='cursorlineopt', abbreviation='culopt',\n-      short_desc=N_(\"settings for 'cursorline'\"),\n-      type='string', list='onecomma', scope={'window'},\n-      deny_duplicates=true,\n-      redraw={'current_window_only'},\n-      defaults={if_true=\"both\"},\n-      cb='did_set_cursorlineopt'\n-    },\n-    {\n-      full_name='debug',\n-      short_desc=N_(\"to \\\"msg\\\" to see all error messages\"),\n-      type='string', scope={'global'},\n-      varname='p_debug',\n-      defaults={if_true=\"\"},\n-      cb='did_set_debug'\n-    },\n-    {\n-      full_name='define', abbreviation='def',\n-      short_desc=N_(\"pattern to be used to find a macro definition\"),\n-      type='string', scope={'global', 'buffer'},\n-      alloced=true,\n-      redraw={'curswant'},\n-      varname='p_def',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='delcombine', abbreviation='deco',\n-      short_desc=N_(\"delete combining characters on their own\"),\n-      type='bool', scope={'global'},\n-      varname='p_deco',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='dictionary', abbreviation='dict',\n-      short_desc=N_(\"list of file names used for keyword completion\"),\n-      type='string', list='onecomma', scope={'global', 'buffer'},\n-      deny_duplicates=true,\n-      normal_dname_chars=true,\n-      expand=true,\n-      varname='p_dict',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='diff',\n-      short_desc=N_(\"diff mode for the current window\"),\n-      type='bool', scope={'window'},\n-      noglob=true,\n-      redraw={'current_window'},\n-      defaults={if_true=false},\n-      cb='did_set_diff'\n-    },\n-    {\n-      full_name='diffexpr', abbreviation='dex',\n-      short_desc=N_(\"expression used to obtain a diff file\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      redraw={'curswant'},\n-      varname='p_dex',\n-      defaults={if_true=\"\"},\n-      cb='did_set_optexpr'\n-    },\n-    {\n-      full_name='diffopt', abbreviation='dip',\n-      short_desc=N_(\"options for using diff mode\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      redraw={'current_window'},\n-      varname='p_dip',\n-      defaults={if_true=\"internal,filler,closeoff\"},\n-      cb='did_set_diffopt'\n-    },\n-    {\n-      full_name='digraph', abbreviation='dg',\n-      short_desc=N_(\"enable the entering of digraphs in Insert mode\"),\n-      type='bool', scope={'global'},\n-      varname='p_dg',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='directory', abbreviation='dir',\n-      short_desc=N_(\"list of directory names for the swap file\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      secure=true,\n-      expand='nodefault',\n-      varname='p_dir',\n-      defaults={if_true=''}\n-    },\n-    {\n-      full_name='display', abbreviation='dy',\n-      short_desc=N_(\"list of flags for how to display text\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      redraw={'all_windows'},\n-      varname='p_dy',\n-      defaults={if_true=\"lastline\"},\n-      cb='did_set_display'\n-    },\n-    {\n-      full_name='eadirection', abbreviation='ead',\n-      short_desc=N_(\"in which direction 'equalalways' works\"),\n-      type='string', scope={'global'},\n-      varname='p_ead',\n-      defaults={if_true=\"both\"},\n-      cb='did_set_eadirection'\n-    },\n-    {\n-      full_name='edcompatible', abbreviation='ed',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      varname='p_force_off',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='emoji', abbreviation='emo',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      redraw={'all_windows', 'ui_option'},\n-      varname='p_emoji',\n-      defaults={if_true=true},\n-      cb='did_set_ambiwidth'\n-    },\n-    {\n-      full_name='encoding', abbreviation='enc',\n-      short_desc=N_(\"encoding used internally\"),\n-      type='string', scope={'global'},\n-      deny_in_modelines=true,\n-      varname='p_enc',\n-      defaults={if_true=macros('ENC_DFLT')},\n-      cb='did_set_encoding'\n-    },\n-    {\n-      full_name='endoffile', abbreviation='eof',\n-      short_desc=N_(\"write CTRL-Z for last line in file\"),\n-      type='bool', scope={'buffer'},\n-      no_mkrc=true,\n-      redraw={'statuslines'},\n-      varname='p_eof',\n-      defaults={if_true=false},\n-      cb='did_set_eof_eol_fixeol_bomb'\n-    },\n-    {\n-      full_name='endofline', abbreviation='eol',\n-      short_desc=N_(\"write <EOL> for last line in file\"),\n-      type='bool', scope={'buffer'},\n-      no_mkrc=true,\n-      redraw={'statuslines'},\n-      varname='p_eol',\n-      defaults={if_true=true},\n-      cb='did_set_eof_eol_fixeol_bomb'\n-    },\n-    {\n-      full_name='equalalways', abbreviation='ea',\n-      short_desc=N_(\"windows are automatically made the same size\"),\n-      type='bool', scope={'global'},\n-      varname='p_ea',\n-      defaults={if_true=true},\n-      cb='did_set_equalalways'\n-    },\n-    {\n-      full_name='equalprg', abbreviation='ep',\n-      short_desc=N_(\"external program to use for \\\"=\\\" command\"),\n-      type='string', scope={'global', 'buffer'},\n-      secure=true,\n-      expand=true,\n-      varname='p_ep',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='errorbells', abbreviation='eb',\n-      short_desc=N_(\"ring the bell for error messages\"),\n-      type='bool', scope={'global'},\n-      varname='p_eb',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='errorfile', abbreviation='ef',\n-      short_desc=N_(\"name of the errorfile for the QuickFix mode\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      expand=true,\n-      varname='p_ef',\n-      defaults={if_true=macros('DFLT_ERRORFILE')}\n-    },\n-    {\n-      full_name='errorformat', abbreviation='efm',\n-      short_desc=N_(\"description of the lines in the error file\"),\n-      type='string', list='onecomma', scope={'global', 'buffer'},\n-      deny_duplicates=true,\n-      varname='p_efm',\n-      defaults={if_true=macros('DFLT_EFM')}\n-    },\n-    {\n-      full_name='eventignore', abbreviation='ei',\n-      short_desc=N_(\"autocommand events that are ignored\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_ei',\n-      defaults={if_true=\"\"},\n-      cb='did_set_eventignore'\n-    },\n-    {\n-      full_name='expandtab', abbreviation='et',\n-      short_desc=N_(\"use spaces when <Tab> is inserted\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_et',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='exrc', abbreviation='ex',\n-      short_desc=N_(\"read .nvimrc and .exrc in the current directory\"),\n-      type='bool', scope={'global'},\n-      secure=true,\n-      varname='p_exrc',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='fileencoding', abbreviation='fenc',\n-      short_desc=N_(\"file encoding for multi-byte text\"),\n-      type='string', scope={'buffer'},\n-      no_mkrc=true,\n-      alloced=true,\n-      redraw={'statuslines', 'current_buffer'},\n-      varname='p_fenc',\n-      defaults={if_true=\"\"},\n-      cb='did_set_encoding'\n-    },\n-    {\n-      full_name='fileencodings', abbreviation='fencs',\n-      short_desc=N_(\"automatically detected character encodings\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_fencs',\n-      defaults={if_true=\"ucs-bom,utf-8,default,latin1\"}\n-    },\n-    {\n-      full_name='fileformat', abbreviation='ff',\n-      short_desc=N_(\"file format used for file I/O\"),\n-      type='string', scope={'buffer'},\n-      no_mkrc=true,\n-      alloced=true,\n-      redraw={'curswant', 'statuslines'},\n-      varname='p_ff',\n-      defaults={if_true=macros('DFLT_FF')},\n-      cb='did_set_fileformat'\n-    },\n-    {\n-      full_name='fileformats', abbreviation='ffs',\n-      short_desc=N_(\"automatically detected values for 'fileformat'\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_ffs',\n-      defaults={if_true=macros('DFLT_FFS_VIM')},\n-      cb='did_set_fileformats'\n-    },\n-    {\n-      full_name='fileignorecase', abbreviation='fic',\n-      short_desc=N_(\"ignore case when using file names\"),\n-      type='bool', scope={'global'},\n-      varname='p_fic',\n-      defaults={\n-        condition='CASE_INSENSITIVE_FILENAME',\n-        if_true=true,\n-        if_false=false,\n-      }\n-    },\n-    {\n-      full_name='filetype', abbreviation='ft',\n-      short_desc=N_(\"type of file, used for autocommands\"),\n-      type='string', scope={'buffer'},\n-      noglob=true,\n-      normal_fname_chars=true,\n-      alloced=true,\n-      expand=true,\n-      varname='p_ft',\n-      defaults={if_true=\"\"},\n-      cb='did_set_filetype_or_syntax'\n-    },\n-    {\n-      full_name='fillchars', abbreviation='fcs',\n-      short_desc=N_(\"characters to use for displaying special items\"),\n-      type='string', list='onecomma', scope={'global', 'window'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      redraw={'current_window'},\n-      varname='p_fcs',\n-      defaults={if_true=''},\n-      cb='did_set_chars_option'\n-    },\n-    {\n-      full_name='fixendofline', abbreviation='fixeol',\n-      short_desc=N_(\"make sure last line in file has <EOL>\"),\n-      type='bool', scope={'buffer'},\n-      redraw={'statuslines'},\n-      varname='p_fixeol',\n-      defaults={if_true=true},\n-      cb='did_set_eof_eol_fixeol_bomb'\n-    },\n-    {\n-      full_name='foldclose', abbreviation='fcl',\n-      short_desc=N_(\"close a fold when the cursor leaves it\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      redraw={'current_window'},\n-      varname='p_fcl',\n-      defaults={if_true=\"\"},\n-      cb='did_set_foldclose'\n-    },\n-    {\n-      full_name='foldcolumn', abbreviation='fdc',\n-      short_desc=N_(\"width of the column used to indicate folds\"),\n-      type='string', scope={'window'},\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"0\"},\n-      cb='did_set_foldcolumn'\n-    },\n-    {\n-      full_name='foldenable', abbreviation='fen',\n-      short_desc=N_(\"set to display all folds open\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='foldexpr', abbreviation='fde',\n-      short_desc=N_(\"expression used when 'foldmethod' is \\\"expr\\\"\"),\n-      type='string', scope={'window'},\n-      modelineexpr=true,\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"0\"},\n-      cb='did_set_foldexpr'\n-    },\n-    {\n-      full_name='foldignore', abbreviation='fdi',\n-      short_desc=N_(\"ignore lines when 'foldmethod' is \\\"indent\\\"\"),\n-      type='string', scope={'window'},\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"#\"},\n-      cb='did_set_foldignore'\n-    },\n-    {\n-      full_name='foldlevel', abbreviation='fdl',\n-      short_desc=N_(\"close folds with a level higher than this\"),\n-      type='number', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=0},\n-      cb='did_set_foldlevel'\n-    },\n-    {\n-      full_name='foldlevelstart', abbreviation='fdls',\n-      short_desc=N_(\"'foldlevel' when starting to edit a file\"),\n-      type='number', scope={'global'},\n-      redraw={'curswant'},\n-      varname='p_fdls',\n-      defaults={if_true=-1}\n-    },\n-    {\n-      full_name='foldmarker', abbreviation='fmr',\n-      short_desc=N_(\"markers used when 'foldmethod' is \\\"marker\\\"\"),\n-      type='string', list='onecomma', scope={'window'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"{{{,}}}\"},\n-      cb='did_set_foldmarker'\n-    },\n-    {\n-      full_name='foldmethod', abbreviation='fdm',\n-      short_desc=N_(\"folding type\"),\n-      type='string', scope={'window'},\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"manual\"},\n-      cb='did_set_foldmethod'\n-    },\n-    {\n-      full_name='foldminlines', abbreviation='fml',\n-      short_desc=N_(\"minimum number of lines for a fold to be closed\"),\n-      type='number', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=1},\n-      cb='did_set_foldminlines'\n-    },\n-    {\n-      full_name='foldnestmax', abbreviation='fdn',\n-      short_desc=N_(\"maximum fold depth\"),\n-      type='number', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=20},\n-      cb='did_set_foldnestmax'\n-    },\n-    {\n-      full_name='foldopen', abbreviation='fdo',\n-      short_desc=N_(\"for which commands a fold will be opened\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      redraw={'curswant'},\n-      varname='p_fdo',\n-      defaults={if_true=\"block,hor,mark,percent,quickfix,search,tag,undo\"},\n-      cb='did_set_foldopen'\n-    },\n-    {\n-      full_name='foldtext', abbreviation='fdt',\n-      short_desc=N_(\"expression used to display for a closed fold\"),\n-      type='string', scope={'window'},\n-      modelineexpr=true,\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"foldtext()\"},\n-      cb='did_set_optexpr'\n-    },\n-    {\n-      full_name='formatexpr', abbreviation='fex',\n-      short_desc=N_(\"expression used with \\\"gq\\\" command\"),\n-      type='string', scope={'buffer'},\n-      modelineexpr=true,\n-      alloced=true,\n-      varname='p_fex',\n-      defaults={if_true=\"\"},\n-      cb='did_set_optexpr'\n-    },\n-    {\n-      full_name='formatoptions', abbreviation='fo',\n-      short_desc=N_(\"how automatic formatting is to be done\"),\n-      type='string', list='flags', scope={'buffer'},\n-      alloced=true,\n-      varname='p_fo',\n-      defaults={if_true=macros('DFLT_FO_VIM')},\n-      cb='did_set_formatoptions'\n-    },\n-    {\n-      full_name='formatlistpat', abbreviation='flp',\n-      short_desc=N_(\"pattern used to recognize a list header\"),\n-      type='string', scope={'buffer'},\n-      alloced=true,\n-      varname='p_flp',\n-      defaults={if_true=\"^\\\\s*\\\\d\\\\+[\\\\]:.)}\\\\t ]\\\\s*\"}\n-    },\n-    {\n-      full_name='formatprg', abbreviation='fp',\n-      short_desc=N_(\"name of external program used with \\\"gq\\\" command\"),\n-      type='string', scope={'global', 'buffer'},\n-      secure=true,\n-      expand=true,\n-      varname='p_fp',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='fsync', abbreviation='fs',\n-      short_desc=N_(\"whether to invoke fsync() after file write\"),\n-      type='bool', scope={'global'},\n-      secure=true,\n-      varname='p_fs',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='gdefault', abbreviation='gd',\n-      short_desc=N_(\"the \\\":substitute\\\" flag 'g' is default on\"),\n-      type='bool', scope={'global'},\n-      varname='p_gd',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='grepformat', abbreviation='gfm',\n-      short_desc=N_(\"format of 'grepprg' output\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_gefm',\n-      defaults={if_true=macros('DFLT_GREPFORMAT')}\n-    },\n-    {\n-      full_name='grepprg', abbreviation='gp',\n-      short_desc=N_(\"program to use for \\\":grep\\\"\"),\n-      type='string', scope={'global', 'buffer'},\n-      secure=true,\n-      expand=true,\n-      varname='p_gp',\n-      defaults={\n-        condition='MSWIN',\n-        -- Add an extra file name so that grep will always\n-        -- insert a file name in the match line. */\n-        if_true=\"findstr /n $* nul\",\n-        if_false=\"grep -n $* /dev/null\"\n-      }\n-    },\n-    {\n-      full_name='guicursor', abbreviation='gcr',\n-      short_desc=N_(\"GUI: settings for cursor shape and blinking\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_guicursor',\n-      defaults={if_true=\"n-v-c-sm:block,i-ci-ve:ver25,r-cr-o:hor20\"},\n-      cb='did_set_guicursor'\n-    },\n-    {\n-      full_name='guifont', abbreviation='gfn',\n-      short_desc=N_(\"GUI: Name(s) of font(s) to be used\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_guifont',\n-      redraw={'ui_option'},\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='guifontwide', abbreviation='gfw',\n-      short_desc=N_(\"list of font names for double-wide characters\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      redraw={'ui_option'},\n-      varname='p_guifontwide',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='guioptions', abbreviation='go',\n-      short_desc=N_(\"GUI: Which components and options are used\"),\n-      type='string', list='flags', scope={'global'},\n-      enable_if=false,\n-    },\n-    {\n-      full_name='guitablabel', abbreviation='gtl',\n-      short_desc=N_(\"GUI: custom label for a tab page\"),\n-      type='string', scope={'global'},\n-      modelineexpr=true,\n-      redraw={'current_window'},\n-      enable_if=false,\n-    },\n-    {\n-      full_name='guitabtooltip', abbreviation='gtt',\n-      short_desc=N_(\"GUI: custom tooltip for a tab page\"),\n-      type='string', scope={'global'},\n-      redraw={'current_window'},\n-      enable_if=false,\n-    },\n-    {\n-      full_name='helpfile', abbreviation='hf',\n-      short_desc=N_(\"full path name of the main help file\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      expand=true,\n-      varname='p_hf',\n-      defaults={if_true=macros('DFLT_HELPFILE')},\n-      cb='did_set_helpfile'\n-    },\n-    {\n-      full_name='helpheight', abbreviation='hh',\n-      short_desc=N_(\"minimum height of a new help window\"),\n-      type='number', scope={'global'},\n-      varname='p_hh',\n-      defaults={if_true=20},\n-      cb='did_set_helpheight'\n-    },\n-    {\n-      full_name='helplang', abbreviation='hlg',\n-      short_desc=N_(\"preferred help languages\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_hlg',\n-      defaults={if_true=\"\"},\n-      cb='did_set_helplang'\n-    },\n-    {\n-      full_name='hidden', abbreviation='hid',\n-      short_desc=N_(\"don't unload buffer when it is |abandon|ed\"),\n-      type='bool', scope={'global'},\n-      varname='p_hid',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='highlight', abbreviation='hl',\n-      short_desc=N_(\"sets highlighting mode for various occasions\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_hl',\n-      defaults={if_true=macros('HIGHLIGHT_INIT')},\n-      cb='did_set_highlight'\n-    },\n-    {\n-      full_name='history', abbreviation='hi',\n-      short_desc=N_(\"number of command-lines that are remembered\"),\n-      type='number', scope={'global'},\n-      varname='p_hi',\n-      defaults={if_true=10000}\n-    },\n-    {\n-      full_name='hkmap', abbreviation='hk',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      varname='p_force_off',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='hkmapp', abbreviation='hkp',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      varname='p_force_off',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='hlsearch', abbreviation='hls',\n-      short_desc=N_(\"highlight matches with last search pattern\"),\n-      type='bool', scope={'global'},\n-      redraw={'all_windows'},\n-      varname='p_hls',\n-      defaults={if_true=true},\n-      cb='did_set_hlsearch'\n-    },\n-    {\n-      full_name='icon',\n-      short_desc=N_(\"Vim set the text of the window icon\"),\n-      type='bool', scope={'global'},\n-      varname='p_icon',\n-      defaults={if_true=false},\n-      cb='did_set_title_icon'\n-    },\n-    {\n-      full_name='iconstring',\n-      short_desc=N_(\"to use for the Vim icon text\"),\n-      type='string', scope={'global'},\n-      modelineexpr=true,\n-      varname='p_iconstring',\n-      defaults={if_true=\"\"},\n-      cb='did_set_iconstring'\n-    },\n-    {\n-      full_name='ignorecase', abbreviation='ic',\n-      short_desc=N_(\"ignore case in search patterns\"),\n-      type='bool', scope={'global'},\n-      varname='p_ic',\n-      defaults={if_true=false},\n-      cb='did_set_ignorecase'\n-    },\n-    {\n-      full_name='imcmdline', abbreviation='imc',\n-      short_desc=N_(\"use IM when starting to edit a command line\"),\n-      type='bool', scope={'global'},\n-      enable_if=false,\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='imdisable', abbreviation='imd',\n-      short_desc=N_(\"do not use the IM in any mode\"),\n-      type='bool', scope={'global'},\n-      enable_if=false,\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='iminsert', abbreviation='imi',\n-      short_desc=N_(\"use :lmap or IM in Insert mode\"),\n-      type='number', scope={'buffer'},\n-      varname='p_iminsert', pv_name='p_imi',\n-      defaults={if_true=macros('B_IMODE_NONE')},\n-      cb='did_set_iminsert'\n-    },\n-    {\n-      full_name='imsearch', abbreviation='ims',\n-      short_desc=N_(\"use :lmap or IM when typing a search pattern\"),\n-      type='number', scope={'buffer'},\n-      varname='p_imsearch', pv_name='p_ims',\n-      defaults={\n-        if_true=macros('B_IMODE_USE_INSERT'),\n-      }\n-    },\n-    {\n-      full_name='inccommand', abbreviation='icm',\n-      short_desc=N_(\"Live preview of substitution\"),\n-      type='string', scope={'global'},\n-      varname='p_icm',\n-      defaults={if_true=\"nosplit\"},\n-      cb='did_set_inccommand'\n-    },\n-    {\n-      full_name='include', abbreviation='inc',\n-      short_desc=N_(\"pattern to be used to find an include file\"),\n-      type='string', scope={'global', 'buffer'},\n-      alloced=true,\n-      varname='p_inc',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='includeexpr', abbreviation='inex',\n-      short_desc=N_(\"expression used to process an include line\"),\n-      type='string', scope={'buffer'},\n-      modelineexpr=true,\n-      alloced=true,\n-      varname='p_inex',\n-      defaults={if_true=\"\"},\n-      cb='did_set_optexpr'\n-    },\n-    {\n-      full_name='incsearch', abbreviation='is',\n-      short_desc=N_(\"highlight match while typing search pattern\"),\n-      type='bool', scope={'global'},\n-      varname='p_is',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='indentexpr', abbreviation='inde',\n-      short_desc=N_(\"expression used to obtain the indent of a line\"),\n-      type='string', scope={'buffer'},\n-      modelineexpr=true,\n-      alloced=true,\n-      varname='p_inde',\n-      defaults={if_true=\"\"},\n-      cb='did_set_optexpr'\n-    },\n-    {\n-      full_name='indentkeys', abbreviation='indk',\n-      short_desc=N_(\"keys that trigger indenting with 'indentexpr'\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_indk',\n-      defaults={if_true=indentkeys_default}\n-    },\n-    {\n-      full_name='infercase', abbreviation='inf',\n-      short_desc=N_(\"adjust case of match for keyword completion\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_inf',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='insertmode', abbreviation='im',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      varname='p_force_off',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='isfname', abbreviation='isf',\n-      short_desc=N_(\"characters included in file names and pathnames\"),\n-      type='string', list='comma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_isf',\n-      defaults={\n-        condition='BACKSLASH_IN_FILENAME',\n-        -- Excluded are: & and ^ are special in cmd.exe\n-        -- ( and ) are used in text separating fnames */\n-        if_true=\"@,48-57,/,\\\\,.,-,_,+,,,#,$,%,{,},[,],:,@-@,!,~,=\",\n-        if_false=\"@,48-57,/,.,-,_,+,,,#,$,%,~,=\"\n+      deny_duplicates = true,\n+      desc = [=[\n+        A list of file patterns.  When one of the patterns matches with the\n+        name of the file which is written, no backup file is created.  Both\n+        the specified file name and the full path name of the file are used.\n+        The pattern is used like with |:autocmd|, see |autocmd-pattern|.\n+        Watch out for special characters, see |option-backslash|.\n+        When $TMPDIR, $TMP or $TEMP is not defined, it is not used for the\n+        default value.  \"/tmp/*\" is only used for Unix.\n+\n+        WARNING: Not having a backup file means that when Vim fails to write\n+        your buffer correctly and then, for whatever reason, Vim exits, you\n+        lose both the original file and what you were writing.  Only disable\n+        backups if you don't care about losing the file.\n+\n+        Note that environment variables are not expanded.  If you want to use\n+        $HOME you must expand it explicitly, e.g.: >\n+        \t:let &backupskip = escape(expand('$HOME'), '\\') .. '/tmp/*'\n+\n+        <\tNote that the default also makes sure that \"crontab -e\" works (when a\n+        backup would be made by renaming the original file crontab won't see\n+        the newly created file).  Also see 'backupcopy' and |crontab|.\n+      ]=],\n+      full_name = 'backupskip',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('no backup for files that match these patterns'),\n+      type = 'string',\n+      varname = 'p_bsk',\n+    },\n+    {\n+      abbreviation = 'bo',\n+      cb = 'did_set_belloff',\n+      defaults = { if_true = 'all' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Specifies for which events the bell will not be rung. It is a comma-\n+        separated list of items. For each item that is present, the bell\n+        will be silenced. This is most useful to specify specific events in\n+        insert mode to be silenced.\n+\n+        item\t    meaning when present\t~\n+        all\t    All events.\n+        backspace   When hitting <BS> or <Del> and deleting results in an\n+        \t    error.\n+        cursor\t    Fail to move around using the cursor keys or\n+        \t    <PageUp>/<PageDown> in |Insert-mode|.\n+        complete    Error occurred when using |i_CTRL-X_CTRL-K| or\n+        \t    |i_CTRL-X_CTRL-T|.\n+        copy\t    Cannot copy char from insert mode using |i_CTRL-Y| or\n+        \t    |i_CTRL-E|.\n+        ctrlg\t    Unknown Char after <C-G> in Insert mode.\n+        error\t    Other Error occurred (e.g. try to join last line)\n+        \t    (mostly used in |Normal-mode| or |Cmdline-mode|).\n+        esc\t    hitting <Esc> in |Normal-mode|.\n+        hangul\t    Ignored.\n+        lang\t    Calling the beep module for Lua/Mzscheme/TCL.\n+        mess\t    No output available for |g<|.\n+        showmatch   Error occurred for 'showmatch' function.\n+        operator    Empty region error |cpo-E|.\n+        register    Unknown register after <C-R> in |Insert-mode|.\n+        shell\t    Bell from shell output |:!|.\n+        spell\t    Error happened on spell suggest.\n+        wildmode    More matches in |cmdline-completion| available\n+        \t    (depends on the 'wildmode' setting).\n+\n+        This is most useful to fine tune when in Insert mode the bell should\n+        be rung. For Normal mode and Ex commands, the bell is often rung to\n+        indicate that an error occurred. It can be silenced by adding the\n+        \"error\" keyword.\n+      ]=],\n+      full_name = 'belloff',\n+      list = 'comma',\n+      scope = { 'global' },\n+      short_desc = N_('do not ring the bell for these reasons'),\n+      type = 'string',\n+      varname = 'p_bo',\n+    },\n+    {\n+      abbreviation = 'bin',\n+      cb = 'did_set_binary',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        This option should be set before editing a binary file.  You can also\n+        use the |-b| Vim argument.  When this option is switched on a few\n+        options will be changed (also when it already was on):\n+        \t'textwidth'  will be set to 0\n+        \t'wrapmargin' will be set to 0\n+        \t'modeline'   will be off\n+        \t'expandtab'  will be off\n+        Also, 'fileformat' and 'fileformats' options will not be used, the\n+        file is read and written like 'fileformat' was \"unix\" (a single <NL>\n+        separates lines).\n+        The 'fileencoding' and 'fileencodings' options will not be used, the\n+        file is read without conversion.\n+        NOTE: When you start editing a(nother) file while the 'bin' option is\n+        on, settings from autocommands may change the settings again (e.g.,\n+        'textwidth'), causing trouble when editing.  You might want to set\n+        'bin' again when the file has been loaded.\n+        The previous values of these options are remembered and restored when\n+        'bin' is switched from on to off.  Each buffer has its own set of\n+        saved option values.\n+        To edit a file with 'binary' set you can use the |++bin| argument.\n+        This avoids you have to do \":set bin\", which would have effect for all\n+        files you edit.\n+        When writing a file the <EOL> for the last line is only written if\n+        there was one in the original file (normally Vim appends an <EOL> to\n+        the last line if there is none; this would make the file longer).  See\n+        the 'endofline' option.\n+      ]=],\n+      full_name = 'binary',\n+      redraw = { 'statuslines' },\n+      scope = { 'buffer' },\n+      short_desc = N_('read/write/edit file in binary mode'),\n+      type = 'bool',\n+      varname = 'p_bin',\n+    },\n+    {\n+      cb = 'did_set_eof_eol_fixeol_bomb',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        When writing a file and the following conditions are met, a BOM (Byte\n+        Order Mark) is prepended to the file:\n+        - this option is on\n+        - the 'binary' option is off\n+        - 'fileencoding' is \"utf-8\", \"ucs-2\", \"ucs-4\" or one of the little/big\n+          endian variants.\n+        Some applications use the BOM to recognize the encoding of the file.\n+        Often used for UCS-2 files on MS-Windows.  For other applications it\n+        causes trouble, for example: \"cat file1 file2\" makes the BOM of file2\n+        appear halfway through the resulting file.  Gcc doesn't accept a BOM.\n+        When Vim reads a file and 'fileencodings' starts with \"ucs-bom\", a\n+        check for the presence of the BOM is done and 'bomb' set accordingly.\n+        Unless 'binary' is set, it is removed from the first line, so that you\n+        don't see it when editing.  When you don't change the options, the BOM\n+        will be restored when writing the file.\n+      ]=],\n+      full_name = 'bomb',\n+      no_mkrc = true,\n+      redraw = { 'statuslines' },\n+      scope = { 'buffer' },\n+      short_desc = N_('a Byte Order Mark to the file'),\n+      type = 'bool',\n+      varname = 'p_bomb',\n+    },\n+    {\n+      abbreviation = 'brk',\n+      cb = 'did_set_breakat',\n+      defaults = {\n+        if_true = ' \\t!@*-+;:,./?',\n+        doc = '\" ^I!@*-+;:,./?\"',\n       },\n-      cb='did_set_isopt'\n-    },\n-    {\n-      full_name='isident', abbreviation='isi',\n-      short_desc=N_(\"characters included in identifiers\"),\n-      type='string', list='comma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_isi',\n-      defaults={\n-        condition='MSWIN',\n-        if_true=\"@,48-57,_,128-167,224-235\",\n-        if_false=\"@,48-57,_,192-255\"\n+      desc = [=[\n+        This option lets you choose which characters might cause a line\n+        break if 'linebreak' is on.  Only works for ASCII characters.\n+      ]=],\n+      full_name = 'breakat',\n+      list = 'flags',\n+      redraw = { 'all_windows' },\n+      scope = { 'global' },\n+      short_desc = N_('characters that may cause a line break'),\n+      type = 'string',\n+      varname = 'p_breakat',\n+    },\n+    {\n+      abbreviation = 'bri',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Every wrapped line will continue visually indented (same amount of\n+        space as the beginning of that line), thus preserving horizontal blocks\n+        of text.\n+      ]=],\n+      full_name = 'breakindent',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('wrapped line repeats indent'),\n+      type = 'bool',\n+    },\n+    {\n+      abbreviation = 'briopt',\n+      alloced = true,\n+      cb = 'did_set_breakindentopt',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Settings for 'breakindent'. It can consist of the following optional\n+        items and must be separated by a comma:\n+        \tmin:{n}\t    Minimum text width that will be kept after\n+        \t\t    applying 'breakindent', even if the resulting\n+        \t\t    text should normally be narrower. This prevents\n+        \t\t    text indented almost to the right window border\n+        \t\t    occupying lot of vertical space when broken.\n+        \t\t    (default: 20)\n+        \tshift:{n}   After applying 'breakindent', the wrapped line's\n+        \t\t    beginning will be shifted by the given number of\n+        \t\t    characters.  It permits dynamic French paragraph\n+        \t\t    indentation (negative) or emphasizing the line\n+        \t\t    continuation (positive).\n+        \t\t    (default: 0)\n+        \tsbr\t    Display the 'showbreak' value before applying the\n+        \t\t    additional indent.\n+        \t\t    (default: off)\n+        \tlist:{n}    Adds an additional indent for lines that match a\n+        \t\t    numbered or bulleted list (using the\n+        \t\t    'formatlistpat' setting).\n+        \tlist:-1\t    Uses the length of a match with 'formatlistpat'\n+        \t\t    for indentation.\n+        \t\t    (default: 0)\n+        \tcolumn:{n}  Indent at column {n}. Will overrule the other\n+        \t\t    sub-options. Note: an additional indent may be\n+        \t\t    added for the 'showbreak' setting.\n+        \t\t    (default: off)\n+      ]=],\n+      full_name = 'breakindentopt',\n+      list = 'onecomma',\n+      redraw = { 'current_buffer' },\n+      scope = { 'window' },\n+      short_desc = N_(\"settings for 'breakindent'\"),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'bsdir',\n+      defaults = {\n+        if_true = '',\n+        doc = '\"last\"',\n       },\n-      cb='did_set_isopt'\n-    },\n-    {\n-      full_name='iskeyword', abbreviation='isk',\n-      short_desc=N_(\"characters included in keywords\"),\n-      type='string', list='comma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_isk',\n-      defaults={if_true=\"@,48-57,_,192-255\"},\n-      cb='did_set_isopt'\n-    },\n-    {\n-      full_name='isprint', abbreviation='isp',\n-      short_desc=N_(\"printable characters\"),\n-      type='string', list='comma', scope={'global'},\n-      deny_duplicates=true,\n-      redraw={'all_windows'},\n-      varname='p_isp',\n-      defaults={if_true=\"@,161-255\"},\n-      cb='did_set_isopt'\n-    },\n-    {\n-      full_name='joinspaces', abbreviation='js',\n-      short_desc=N_(\"two spaces after a period with a join command\"),\n-      type='bool', scope={'global'},\n-      varname='p_js',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='jumpoptions', abbreviation='jop',\n-      short_desc=N_(\"Controls the behavior of the jumplist\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_jop',\n-      defaults={if_true=''},\n-      cb='did_set_jumpoptions'\n-    },\n-    {\n-      full_name='keymap', abbreviation='kmp',\n-      short_desc=N_(\"name of a keyboard mapping\"),\n-      type='string', scope={'buffer'},\n-      normal_fname_chars=true,\n-      pri_mkrc=true,\n-      alloced=true,\n-      redraw={'statuslines', 'current_buffer'},\n-      varname='p_keymap', pv_name='p_kmap',\n-      defaults={if_true=\"\"},\n-      cb='did_set_keymap'\n-    },\n-    {\n-      full_name='keymodel', abbreviation='km',\n-      short_desc=N_(\"enable starting/stopping selection with keys\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_km',\n-      defaults={if_true=\"\"},\n-      cb='did_set_keymodel'\n-    },\n-    {\n-      full_name='keywordprg', abbreviation='kp',\n-      short_desc=N_(\"program to use for the \\\"K\\\" command\"),\n-      type='string', scope={'global', 'buffer'},\n-      secure=true,\n-      expand=true,\n-      varname='p_kp',\n-      defaults={\n-        if_true=\":Man\",\n-      }\n-    },\n-    {\n-      full_name='langmap', abbreviation='lmap',\n-      short_desc=N_(\"alphabetic characters for other language mode\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      secure=true,\n-      varname='p_langmap',\n-      defaults={if_true=\"\"},\n-      cb='did_set_langmap'\n-    },\n-    {\n-      full_name='langmenu', abbreviation='lm',\n-      short_desc=N_(\"language to be used for the menus\"),\n-      type='string', scope={'global'},\n-      normal_fname_chars=true,\n-      varname='p_lm',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='langnoremap', abbreviation='lnr',\n-      short_desc=N_(\"do not apply 'langmap' to mapped characters\"),\n-      type='bool', scope={'global'},\n-      varname='p_lnr',\n-      defaults={if_true=true},\n-      cb='did_set_langnoremap'\n-    },\n-    {\n-      full_name='langremap', abbreviation='lrm',\n-      short_desc=N_('No description'),\n-      type='bool', scope={'global'},\n-      varname='p_lrm',\n-      defaults={if_true=false},\n-      cb='did_set_langremap'\n-    },\n-    {\n-      full_name='laststatus', abbreviation='ls',\n-      short_desc=N_(\"tells when last window has status lines\"),\n-      type='number', scope={'global'},\n-      redraw={'all_windows'},\n-      varname='p_ls',\n-      defaults={if_true=2},\n-      cb='did_set_laststatus'\n-    },\n-    {\n-      full_name='lazyredraw', abbreviation='lz',\n-      short_desc=N_(\"don't redraw while executing macros\"),\n-      type='bool', scope={'global'},\n-      varname='p_lz',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='linebreak', abbreviation='lbr',\n-      short_desc=N_(\"wrap long lines at a blank\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='lines',\n-      short_desc=N_(\"of lines in the display\"),\n-      type='number', scope={'global'},\n-      no_mkrc=true,\n-      varname='p_lines',\n-      defaults={if_true=macros('DFLT_ROWS')}\n-    },\n-    {\n-      full_name='linespace', abbreviation='lsp',\n-      short_desc=N_(\"number of pixel lines to use between characters\"),\n-      type='number', scope={'global'},\n-      redraw={'ui_option'},\n-      varname='p_linespace',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='lisp',\n-      short_desc=N_(\"indenting for Lisp\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_lisp',\n-      defaults={if_true=false},\n-      cb='did_set_lisp'\n-    },\n-    {\n-      full_name='lispoptions', abbreviation='lop',\n-      short_desc=N_(\"options for lisp indenting\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      varname='p_lop', pv_name='p_lop',\n-      defaults={if_true=''},\n-      cb='did_set_lispoptions'\n-    },\n-    {\n-      full_name='lispwords', abbreviation='lw',\n-      short_desc=N_(\"words that change how lisp indenting works\"),\n-      type='string', list='onecomma', scope={'global', 'buffer'},\n-      deny_duplicates=true,\n-      varname='p_lispwords', pv_name='p_lw',\n-      defaults={if_true=macros('LISPWORD_VALUE')}\n-    },\n-    {\n-      full_name='list',\n-      short_desc=N_(\"<Tab> and <EOL>\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='listchars', abbreviation='lcs',\n-      short_desc=N_(\"characters for displaying in list mode\"),\n-      type='string', list='onecomma', scope={'global', 'window'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      redraw={'current_window'},\n-      varname='p_lcs',\n-      defaults={if_true=\"tab:> ,trail:-,nbsp:+\"},\n-      cb='did_set_chars_option'\n-    },\n-    {\n-      full_name='loadplugins', abbreviation='lpl',\n-      short_desc=N_(\"load plugin scripts when starting up\"),\n-      type='bool', scope={'global'},\n-      varname='p_lpl',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='magic',\n-      short_desc=N_(\"special characters in search patterns\"),\n-      type='bool', scope={'global'},\n-      varname='p_magic',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='makeef', abbreviation='mef',\n-      short_desc=N_(\"name of the errorfile for \\\":make\\\"\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      expand=true,\n-      varname='p_mef',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='makeencoding', abbreviation='menc',\n-      short_desc=N_(\"Converts the output of external commands\"),\n-      type='string', scope={'global', 'buffer'},\n-      varname='p_menc',\n-      defaults={if_true=\"\"},\n-      cb='did_set_encoding'\n-    },\n-    {\n-      full_name='makeprg', abbreviation='mp',\n-      short_desc=N_(\"program to use for the \\\":make\\\" command\"),\n-      type='string', scope={'global', 'buffer'},\n-      secure=true,\n-      expand=true,\n-      varname='p_mp',\n-      defaults={if_true=\"make\"}\n-    },\n-    {\n-      full_name='matchpairs', abbreviation='mps',\n-      short_desc=N_(\"pairs of characters that \\\"%\\\" can match\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_mps',\n-      defaults={if_true=\"(:),{:},[:]\"},\n-      cb='did_set_matchpairs'\n-    },\n-    {\n-      full_name='matchtime', abbreviation='mat',\n-      short_desc=N_(\"tenths of a second to show matching paren\"),\n-      type='number', scope={'global'},\n-      varname='p_mat',\n-      defaults={if_true=5}\n-    },\n-    {\n-      full_name='maxcombine', abbreviation='mco',\n-      short_desc=N_(\"maximum nr of combining characters displayed\"),\n-      type='number', scope={'global'},\n-      varname='p_mco',\n-      defaults={if_true=6}\n-    },\n-    {\n-      full_name='maxfuncdepth', abbreviation='mfd',\n-      short_desc=N_(\"maximum recursive depth for user functions\"),\n-      type='number', scope={'global'},\n-      varname='p_mfd',\n-      defaults={if_true=100}\n-    },\n-    {\n-      full_name='maxmapdepth', abbreviation='mmd',\n-      short_desc=N_(\"maximum recursive depth for mapping\"),\n-      type='number', scope={'global'},\n-      varname='p_mmd',\n-      defaults={if_true=1000}\n-    },\n-    {\n-      full_name='maxmempattern', abbreviation='mmp',\n-      short_desc=N_(\"maximum memory (in Kbyte) used for pattern search\"),\n-      type='number', scope={'global'},\n-      varname='p_mmp',\n-      defaults={if_true=1000}\n-    },\n-    {\n-      full_name='menuitems', abbreviation='mis',\n-      short_desc=N_(\"maximum number of items in a menu\"),\n-      type='number', scope={'global'},\n-      varname='p_mis',\n-      defaults={if_true=25}\n-    },\n-    {\n-      full_name='mkspellmem', abbreviation='msm',\n-      short_desc=N_(\"memory used before |:mkspell| compresses the tree\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      expand=true,\n-      varname='p_msm',\n-      defaults={if_true=\"460000,2000,500\"},\n-      cb='did_set_mkspellmem'\n-    },\n-    {\n-      full_name='modeline', abbreviation='ml',\n-      short_desc=N_(\"recognize modelines at start or end of file\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_ml',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='modelineexpr', abbreviation='mle',\n-      short_desc=N_(\"allow some options to be set in modeline\"),\n-      type='bool', scope={'global'},\n-      secure=true,\n-      varname='p_mle',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='modelines', abbreviation='mls',\n-      short_desc=N_(\"number of lines checked for modelines\"),\n-      type='number', scope={'global'},\n-      varname='p_mls',\n-      defaults={if_true=5}\n-    },\n-    {\n-      full_name='modifiable', abbreviation='ma',\n-      short_desc=N_(\"changes to the text are not possible\"),\n-      type='bool', scope={'buffer'},\n-      noglob=true,\n-      varname='p_ma',\n-      defaults={if_true=true},\n-      cb='did_set_modifiable'\n-    },\n-    {\n-      full_name='modified', abbreviation='mod',\n-      short_desc=N_(\"buffer has been modified\"),\n-      type='bool', scope={'buffer'},\n-      no_mkrc=true,\n-      redraw={'statuslines'},\n-      varname='p_mod',\n-      defaults={if_true=false},\n-      cb='did_set_modified'\n-    },\n-    {\n-      full_name='more',\n-      short_desc=N_(\"listings when the whole screen is filled\"),\n-      type='bool', scope={'global'},\n-      varname='p_more',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='mouse',\n-      short_desc=N_(\"the use of mouse clicks\"),\n-      type='string', list='flags', scope={'global'},\n-      varname='p_mouse',\n-      defaults={if_true=\"nvi\"},\n-      cb='did_set_mouse'\n-    },\n-    {\n-      full_name='mousefocus', abbreviation='mousef',\n-      short_desc=N_(\"keyboard focus follows the mouse\"),\n-      type='bool', scope={'global'},\n-      redraw={'ui_option'},\n-      varname='p_mousef',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='mousehide', abbreviation='mh',\n-      short_desc=N_(\"hide mouse pointer while typing\"),\n-      type='bool', scope={'global'},\n-      enable_if=false,\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='mousemodel', abbreviation='mousem',\n-      short_desc=N_(\"changes meaning of mouse buttons\"),\n-      type='string', scope={'global'},\n-      varname='p_mousem',\n-      defaults={if_true=\"popup_setpos\"},\n-      cb='did_set_mousemodel'\n-    },\n-    {\n-      full_name='mousemoveevent', abbreviation='mousemev',\n-      short_desc=N_(\"deliver mouse move events to input queue\"),\n-      type='bool', scope={'global'},\n-      redraw={'ui_option'},\n-      varname='p_mousemev',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='mousescroll',\n-      short_desc=N_(\"amount to scroll by when scrolling with a mouse\"),\n-      type='string', list='comma', scope={'global'},\n-      vi_def=true,\n-      varname='p_mousescroll',\n-      defaults={if_true=\"ver:3,hor:6\"},\n-      cb='did_set_mousescroll'\n-    },\n-    {\n-      full_name='mouseshape', abbreviation='mouses',\n-      short_desc=N_(\"shape of the mouse pointer in different modes\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      enable_if=false,\n-    },\n-    {\n-      full_name='mousetime', abbreviation='mouset',\n-      short_desc=N_(\"max time between mouse double-click\"),\n-      type='number', scope={'global'},\n-      varname='p_mouset',\n-      defaults={if_true=500}\n-    },\n-    {\n-      full_name='nrformats', abbreviation='nf',\n-      short_desc=N_(\"number formats recognized for CTRL-A command\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_nf',\n-      defaults={if_true=\"bin,hex\"},\n-      cb='did_set_nrformats'\n-    },\n-    {\n-      full_name='number', abbreviation='nu',\n-      short_desc=N_(\"print the line number in front of each line\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=false},\n-      cb='did_set_number_relativenumber'\n-    },\n-    {\n-      full_name='numberwidth', abbreviation='nuw',\n-      short_desc=N_(\"number of columns used for the line number\"),\n-      type='number', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=4},\n-      cb='did_set_numberwidth'\n-    },\n-    {\n-      full_name='omnifunc', abbreviation='ofu',\n-      short_desc=N_(\"function for filetype-specific completion\"),\n-      type='string', scope={'buffer'},\n-      secure=true,\n-      alloced=true,\n-      func=true,\n-      varname='p_ofu',\n-      defaults={if_true=\"\"},\n-      cb='did_set_omnifunc'\n-    },\n-    {\n-      full_name='opendevice', abbreviation='odev',\n-      short_desc=N_(\"allow reading/writing devices on MS-Windows\"),\n-      type='bool', scope={'global'},\n-      enable_if=false,\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='operatorfunc', abbreviation='opfunc',\n-      short_desc=N_(\"function to be called for |g@| operator\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      func=true,\n-      varname='p_opfunc',\n-      defaults={if_true=\"\"},\n-      cb='did_set_operatorfunc'\n-    },\n-    {\n-      full_name='packpath', abbreviation='pp',\n-      short_desc=N_(\"list of directories used for packages\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      secure=true,\n-      expand=true,\n-      varname='p_pp',\n-      defaults={if_true=''},\n-      cb='did_set_runtimepackpath'\n-    },\n-    {\n-      full_name='paragraphs', abbreviation='para',\n-      short_desc=N_(\"nroff macros that separate paragraphs\"),\n-      type='string', scope={'global'},\n-      varname='p_para',\n-      defaults={if_true=\"IPLPPPQPP TPHPLIPpLpItpplpipbp\"}\n-    },\n-    {\n-      full_name='paste',\n-      short_desc=N_(\"pasting text\"),\n-      type='bool', scope={'global'},\n-      pri_mkrc=true,\n-      varname='p_paste',\n-      defaults={if_true=false},\n-      cb='did_set_paste'\n-    },\n-    {\n-      full_name='pastetoggle', abbreviation='pt',\n-      short_desc=N_(\"No description\"),\n-      type='string', scope={'global'},\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='patchexpr', abbreviation='pex',\n-      short_desc=N_(\"expression used to patch a file\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      varname='p_pex',\n-      defaults={if_true=\"\"},\n-      cb='did_set_optexpr'\n-    },\n-    {\n-      full_name='patchmode', abbreviation='pm',\n-      short_desc=N_(\"keep the oldest version of a file\"),\n-      type='string', scope={'global'},\n-      normal_fname_chars=true,\n-      varname='p_pm',\n-      defaults={if_true=\"\"},\n-      cb='did_set_backupext_or_patchmode'\n-    },\n-    {\n-      full_name='path', abbreviation='pa',\n-      short_desc=N_(\"list of directories searched with \\\"gf\\\" et.al.\"),\n-      type='string', list='comma', scope={'global', 'buffer'},\n-      deny_duplicates=true,\n-      expand=true,\n-      varname='p_path',\n-      defaults={if_true=\".,,\"}\n-    },\n-    {\n-      full_name='preserveindent', abbreviation='pi',\n-      short_desc=N_(\"preserve the indent structure when reindenting\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_pi',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='previewheight', abbreviation='pvh',\n-      short_desc=N_(\"height of the preview window\"),\n-      type='number', scope={'global'},\n-      varname='p_pvh',\n-      defaults={if_true=12}\n-    },\n-    {\n-      full_name='previewwindow', abbreviation='pvw',\n-      short_desc=N_(\"identifies the preview window\"),\n-      type='bool', scope={'window'},\n-      noglob=true,\n-      redraw={'statuslines'},\n-      defaults={if_true=false},\n-      cb='did_set_previewwindow'\n-    },\n-    {\n-      full_name='prompt',\n-      short_desc=N_(\"enable prompt in Ex mode\"),\n-      type='bool', scope={'global'},\n-      varname='p_force_on',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='pumblend', abbreviation='pb',\n-      short_desc=N_(\"Controls transparency level of popup menu\"),\n-      type='number', scope={'global'},\n-      redraw={'ui_option'},\n-      varname='p_pb',\n-      defaults={if_true=0},\n-      cb='did_set_pumblend'\n-    },\n-    {\n-      full_name='pumheight', abbreviation='ph',\n-      short_desc=N_(\"maximum height of the popup menu\"),\n-      type='number', scope={'global'},\n-      varname='p_ph',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='pumwidth', abbreviation='pw',\n-      short_desc=N_(\"minimum width of the popup menu\"),\n-      type='number', scope={'global'},\n-      varname='p_pw',\n-      defaults={if_true=15}\n-    },\n-    {\n-      full_name='pyxversion', abbreviation='pyx',\n-      short_desc=N_(\"selects default python version to use\"),\n-      type='number', scope={'global'},\n-      secure=true,\n-      varname='p_pyx',\n-      defaults={if_true=3}\n-    },\n-    {\n-      full_name='quickfixtextfunc', abbreviation='qftf',\n-      short_desc=N_(\"customize the quickfix window\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      func=true,\n-      varname='p_qftf',\n-      defaults={if_true=\"\"},\n-      cb='did_set_quickfixtextfunc'\n-    },\n-    {\n-      full_name='quoteescape', abbreviation='qe',\n-      short_desc=N_(\"escape characters used in a string\"),\n-      type='string', scope={'buffer'},\n-      alloced=true,\n-      varname='p_qe',\n-      defaults={if_true=\"\\\\\"}\n-    },\n-    {\n-      full_name='readonly', abbreviation='ro',\n-      short_desc=N_(\"disallow writing the buffer\"),\n-      type='bool', scope={'buffer'},\n-      noglob=true,\n-      redraw={'statuslines'},\n-      varname='p_ro',\n-      defaults={if_true=false},\n-      cb='did_set_readonly'\n-    },\n-    {\n-      full_name='redrawdebug', abbreviation='rdb',\n-      short_desc=N_(\"Changes the way redrawing works (debug)\"),\n-      type='string', list='onecomma', scope={'global'},\n-      varname='p_rdb',\n-      defaults={if_true=''},\n-      cb='did_set_redrawdebug'\n-    },\n-    {\n-      full_name='redrawtime', abbreviation='rdt',\n-      short_desc=N_(\"timeout for 'hlsearch' and |:match| highlighting\"),\n-      type='number', scope={'global'},\n-      varname='p_rdt',\n-      defaults={if_true=2000}\n-    },\n-    {\n-      full_name='regexpengine', abbreviation='re',\n-      short_desc=N_(\"default regexp engine to use\"),\n-      type='number', scope={'global'},\n-      varname='p_re',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='relativenumber', abbreviation='rnu',\n-      short_desc=N_(\"show relative line number in front of each line\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=false},\n-      cb='did_set_number_relativenumber'\n-    },\n-    {\n-      full_name='remap',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      varname='p_force_on',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='report',\n-      short_desc=N_(\"for reporting nr. of lines changed\"),\n-      type='number', scope={'global'},\n-      varname='p_report',\n-      defaults={if_true=2}\n-    },\n-    {\n-      full_name='revins', abbreviation='ri',\n-      short_desc=N_(\"inserting characters will work backwards\"),\n-      type='bool', scope={'global'},\n-      varname='p_ri',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='rightleft', abbreviation='rl',\n-      short_desc=N_(\"window is right-to-left oriented\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='rightleftcmd', abbreviation='rlc',\n-      short_desc=N_(\"commands for which editing works right-to-left\"),\n-      type='string', scope={'window'},\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"search\"},\n-      cb='did_set_rightleftcmd'\n-    },\n-    {\n-      full_name='ruler', abbreviation='ru',\n-      short_desc=N_(\"show cursor line and column in the status line\"),\n-      type='bool', scope={'global'},\n-      redraw={'statuslines'},\n-      varname='p_ru',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='rulerformat', abbreviation='ruf',\n-      short_desc=N_(\"custom format for the ruler\"),\n-      type='string', scope={'global'},\n-      alloced=true,\n-      modelineexpr=true,\n-      redraw={'statuslines'},\n-      varname='p_ruf',\n-      defaults={if_true=\"\"},\n-      cb='did_set_rulerformat'\n-    },\n-    {\n-      full_name='runtimepath', abbreviation='rtp',\n-      short_desc=N_(\"list of directories used for runtime files\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      secure=true,\n-      expand='nodefault',\n-      varname='p_rtp',\n-      defaults={if_true=''},\n-      cb='did_set_runtimepackpath'\n-    },\n-    {\n-      full_name='scroll', abbreviation='scr',\n-      short_desc=N_(\"lines to scroll with CTRL-U and CTRL-D\"),\n-      type='number', scope={'window'},\n-      no_mkrc=true,\n-      pv_name='p_scroll',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='smoothscroll', abbreviation='sms',\n-      short_desc=N_(\"scroll by screen lines when 'wrap' is set\"),\n-      type='bool', scope={'window'},\n-      pv_name='p_sms',\n-      redraw={'current_window'},\n-      defaults={if_true=0},\n-      cb='did_set_smoothscroll'\n-    },\n-    {\n-      full_name='scrollback', abbreviation='scbk',\n-      short_desc=N_(\"lines to scroll with CTRL-U and CTRL-D\"),\n-      type='number', scope={'buffer'},\n-      varname='p_scbk',\n-      redraw={'current_buffer'},\n-      defaults={if_true=-1},\n-      cb='did_set_scrollback'\n-    },\n-    {\n-      full_name='scrollbind', abbreviation='scb',\n-      short_desc=N_(\"scroll in window as other windows scroll\"),\n-      type='bool', scope={'window'},\n-      pv_name='p_scbind',\n-      defaults={if_true=false},\n-      cb='did_set_scrollbind'\n-    },\n-    {\n-      full_name='scrolljump', abbreviation='sj',\n-      short_desc=N_(\"minimum number of lines to scroll\"),\n-      type='number', scope={'global'},\n-      varname='p_sj',\n-      defaults={if_true=1}\n-    },\n-    {\n-      full_name='scrolloff', abbreviation='so',\n-      short_desc=N_(\"minimum nr. of lines above and below cursor\"),\n-      type='number', scope={'global', 'window'},\n-      varname='p_so',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='scrollopt', abbreviation='sbo',\n-      short_desc=N_(\"how 'scrollbind' should behave\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_sbo',\n-      defaults={if_true=\"ver,jump\"},\n-      cb='did_set_scrollopt'\n-    },\n-    {\n-      full_name='sections', abbreviation='sect',\n-      short_desc=N_(\"nroff macros that separate sections\"),\n-      type='string', scope={'global'},\n-      varname='p_sections',\n-      defaults={if_true=\"SHNHH HUnhsh\"}\n-    },\n-    {\n-      full_name='secure',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      secure=true,\n-      varname='p_secure',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='selection', abbreviation='sel',\n-      short_desc=N_(\"what type of selection to use\"),\n-      type='string', scope={'global'},\n-      varname='p_sel',\n-      defaults={if_true=\"inclusive\"},\n-      cb='did_set_selection'\n-    },\n-    {\n-      full_name='selectmode', abbreviation='slm',\n-      short_desc=N_(\"when to use Select mode instead of Visual mode\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_slm',\n-      defaults={if_true=\"\"},\n-      cb='did_set_selectmode'\n-    },\n-    {\n-      full_name='sessionoptions', abbreviation='ssop',\n-      short_desc=N_(\"options for |:mksession|\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_ssop',\n-      defaults={if_true=\"blank,buffers,curdir,folds,help,tabpages,winsize,terminal\"},\n-      cb='did_set_sessionoptions',\n-    },\n-    {\n-      full_name='shada', abbreviation='sd',\n-      short_desc=N_(\"use .shada file upon startup and exiting\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      secure=true,\n-      varname='p_shada',\n-      defaults={if_true=\"!,'100,<50,s10,h\"}\n-    },\n-    {\n-      full_name='shadafile', abbreviation='sdf',\n-      short_desc=N_(\"overrides the filename used for shada\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      secure=true,\n-      expand=true,\n-      varname='p_shadafile',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='shell', abbreviation='sh',\n-      short_desc=N_(\"name of shell to use for external commands\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      expand=true,\n-      varname='p_sh',\n-      defaults={\n-        condition='MSWIN',\n-        if_true=\"cmd.exe\",\n-        if_false=\"sh\"\n-      }\n-    },\n-    {\n-      full_name='shellcmdflag', abbreviation='shcf',\n-      short_desc=N_(\"flag to shell to execute one command\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      varname='p_shcf',\n-      defaults={\n-        condition='MSWIN',\n-        if_true=\"/s /c\",\n-        if_false=\"-c\"\n-      }\n-    },\n-    {\n-      full_name='shellpipe', abbreviation='sp',\n-      short_desc=N_(\"string to put output of \\\":make\\\" in error file\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      varname='p_sp',\n-      defaults={\n-        condition='MSWIN',\n-        if_true=\"2>&1| tee\",\n-        if_false=\"| tee\",\n-      }\n-    },\n-    {\n-      full_name='shellquote', abbreviation='shq',\n-      short_desc=N_(\"quote character(s) for around shell command\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      varname='p_shq',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='shellredir', abbreviation='srr',\n-      short_desc=N_(\"string to put output of filter in a temp file\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      varname='p_srr',\n-      defaults={\n-        condition='MSWIN',\n-        if_true=\">%s 2>&1\",\n-        if_false=\">\"\n-      }\n-    },\n-    {\n-      full_name='shellslash', abbreviation='ssl',\n-      short_desc=N_(\"use forward slash for shell file names\"),\n-      type='bool', scope={'global'},\n-      varname='p_ssl',\n-      enable_if='BACKSLASH_IN_FILENAME',\n-      defaults={if_true=false},\n-      cb='did_set_shellslash'\n-    },\n-    {\n-      full_name='shelltemp', abbreviation='stmp',\n-      short_desc=N_(\"whether to use a temp file for shell commands\"),\n-      type='bool', scope={'global'},\n-      varname='p_stmp',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='shellxquote', abbreviation='sxq',\n-      short_desc=N_(\"like 'shellquote', but include redirection\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      varname='p_sxq',\n-      defaults={\n-        condition='MSWIN',\n-        if_true=\"\\\"\",\n-        if_false=\"\",\n-      }\n-    },\n-    {\n-      full_name='shellxescape', abbreviation='sxe',\n-      short_desc=N_(\"characters to escape when 'shellxquote' is (\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      varname='p_sxe',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='shiftround', abbreviation='sr',\n-      short_desc=N_(\"round indent to multiple of shiftwidth\"),\n-      type='bool', scope={'global'},\n-      varname='p_sr',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='shiftwidth', abbreviation='sw',\n-      short_desc=N_(\"number of spaces to use for (auto)indent step\"),\n-      type='number', scope={'buffer'},\n-      varname='p_sw',\n-      defaults={if_true=8},\n-      cb='did_set_shiftwidth_tabstop'\n-    },\n-    {\n-      full_name='shortmess', abbreviation='shm',\n-      short_desc=N_(\"list of flags, reduce length of messages\"),\n-      type='string', list='flags', scope={'global'},\n-      varname='p_shm',\n-      defaults={if_true=\"filnxtToOCF\"},\n-      cb='did_set_shortmess'\n-    },\n-    {\n-      full_name='showbreak', abbreviation='sbr',\n-      short_desc=N_(\"string to use at the start of wrapped lines\"),\n-      type='string', scope={'global', 'window'},\n-      redraw={'all_windows'},\n-      varname='p_sbr',\n-      defaults={if_true=\"\"},\n-      cb='did_set_showbreak'\n-    },\n-    {\n-      full_name='showcmd', abbreviation='sc',\n-      short_desc=N_(\"show (partial) command in status line\"),\n-      type='bool', scope={'global'},\n-      varname='p_sc',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='showcmdloc', abbreviation='sloc',\n-      short_desc=N_(\"change location of partial command\"),\n-      type='string', scope={'global'},\n-      varname='p_sloc',\n-      defaults={if_true=\"last\"},\n-      cb='did_set_showcmdloc'\n-    },\n-    {\n-      full_name='showfulltag', abbreviation='sft',\n-      short_desc=N_(\"show full tag pattern when completing tag\"),\n-      type='bool', scope={'global'},\n-      varname='p_sft',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='showmatch', abbreviation='sm',\n-      short_desc=N_(\"briefly jump to matching bracket if insert one\"),\n-      type='bool', scope={'global'},\n-      varname='p_sm',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='showmode', abbreviation='smd',\n-      short_desc=N_(\"message on status line to show current mode\"),\n-      type='bool', scope={'global'},\n-      varname='p_smd',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='showtabline', abbreviation='stal',\n-      short_desc=N_(\"tells when the tab pages line is displayed\"),\n-      type='number', scope={'global'},\n-      redraw={'all_windows', 'ui_option'},\n-      varname='p_stal',\n-      defaults={if_true=1},\n-      cb='did_set_showtabline'\n-    },\n-    {\n-      full_name='sidescroll', abbreviation='ss',\n-      short_desc=N_(\"minimum number of columns to scroll horizontal\"),\n-      type='number', scope={'global'},\n-      varname='p_ss',\n-      defaults={if_true=1}\n-    },\n-    {\n-      full_name='sidescrolloff', abbreviation='siso',\n-      short_desc=N_(\"min. nr. of columns to left and right of cursor\"),\n-      type='number', scope={'global', 'window'},\n-      varname='p_siso',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='signcolumn', abbreviation='scl',\n-      short_desc=N_(\"when to display the sign column\"),\n-      type='string', scope={'window'},\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"auto\"},\n-      cb='did_set_signcolumn'\n-    },\n-    {\n-      full_name='smartcase', abbreviation='scs',\n-      short_desc=N_(\"no ignore case when pattern has uppercase\"),\n-      type='bool', scope={'global'},\n-      varname='p_scs',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='smartindent', abbreviation='si',\n-      short_desc=N_(\"smart autoindenting for C programs\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_si',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='smarttab', abbreviation='sta',\n-      short_desc=N_(\"use 'shiftwidth' when inserting <Tab>\"),\n-      type='bool', scope={'global'},\n-      varname='p_sta',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='softtabstop', abbreviation='sts',\n-      short_desc=N_(\"number of spaces that <Tab> uses while editing\"),\n-      type='number', scope={'buffer'},\n-      varname='p_sts',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='spell',\n-      short_desc=N_(\"spell checking\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=false},\n-      cb='did_set_spell'\n-    },\n-    {\n-      full_name='spellcapcheck', abbreviation='spc',\n-      short_desc=N_(\"pattern to locate end of a sentence\"),\n-      type='string', scope={'buffer'},\n-      alloced=true,\n-      redraw={'current_buffer'},\n-      varname='p_spc',\n-      defaults={if_true=\"[.?!]\\\\_[\\\\])'\\\"\t ]\\\\+\"},\n-      cb='did_set_spellcapcheck'\n-    },\n-    {\n-      full_name='spellfile', abbreviation='spf',\n-      short_desc=N_(\"files where |zg| and |zw| store words\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      secure=true,\n-      alloced=true,\n-      expand=true,\n-      varname='p_spf',\n-      defaults={if_true=\"\"},\n-      cb='did_set_spellfile'\n-    },\n-    {\n-      full_name='spelllang', abbreviation='spl',\n-      short_desc=N_(\"language(s) to do spell checking for\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      expand=true,\n-      redraw={'current_buffer'},\n-      varname='p_spl',\n-      defaults={if_true=\"en\"},\n-      cb='did_set_spelllang'\n-    },\n-    {\n-      full_name='spellsuggest', abbreviation='sps',\n-      short_desc=N_(\"method(s) used to suggest spelling corrections\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      secure=true,\n-      expand=true,\n-      varname='p_sps',\n-      defaults={if_true=\"best\"},\n-      cb='did_set_spellsuggest'\n-    },\n-    {\n-      full_name='spelloptions', abbreviation='spo',\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      secure=true,\n-      expand=true,\n-      varname='p_spo',\n-      redraw={'current_buffer'},\n-      defaults={if_true=\"\"},\n-      cb='did_set_spelloptions'\n-    },\n-    {\n-      full_name='splitbelow', abbreviation='sb',\n-      short_desc=N_(\"new window from split is below the current one\"),\n-      type='bool', scope={'global'},\n-      varname='p_sb',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='splitkeep', abbreviation='spk',\n-      short_desc=N_(\"determines scroll behavior for split windows\"),\n-      type='string', scope={'global'},\n-      varname='p_spk',\n-      defaults={if_true='cursor'},\n-      cb='did_set_splitkeep'\n-    },\n-    {\n-      full_name='splitright', abbreviation='spr',\n-      short_desc=N_(\"new window is put right of the current one\"),\n-      type='bool', scope={'global'},\n-      varname='p_spr',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='startofline', abbreviation='sol',\n-      short_desc=N_(\"commands move cursor to first non-blank in line\"),\n-      type='bool', scope={'global'},\n-      vim=false,\n-      varname='p_sol',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='statuscolumn', abbreviation='stc',\n-      short_desc=N_(\"custom format for the status column\"),\n-      type='string', scope={'window'},\n-      redraw={'current_window'},\n-      secure=true,\n-      alloced=true,\n-      defaults={if_true=\"\"},\n-      cb='did_set_statuscolumn'\n-    },\n-    {\n-      full_name='statusline', abbreviation='stl',\n-      short_desc=N_(\"custom format for the status line\"),\n-      type='string', scope={'global', 'window'},\n-      alloced=true,\n-      modelineexpr=true,\n-      redraw={'statuslines'},\n-      varname='p_stl',\n-      defaults={if_true=\"\"},\n-      cb='did_set_statusline'\n-    },\n-    {\n-      full_name='suffixes', abbreviation='su',\n-      short_desc=N_(\"suffixes that are ignored with multiple match\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_su',\n-      defaults={if_true=\".bak,~,.o,.h,.info,.swp,.obj\"}\n-    },\n-    {\n-      full_name='suffixesadd', abbreviation='sua',\n-      short_desc=N_(\"suffixes added when searching for a file\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_sua',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='swapfile', abbreviation='swf',\n-      short_desc=N_(\"whether to use a swapfile for a buffer\"),\n-      type='bool', scope={'buffer'},\n-      redraw={'statuslines'},\n-      varname='p_swf',\n-      defaults={if_true=true},\n-      cb='did_set_swapfile'\n-    },\n-    {\n-      full_name='switchbuf', abbreviation='swb',\n-      short_desc=N_(\"sets behavior when switching to another buffer\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_swb',\n-      defaults={if_true=\"uselast\"},\n-      cb='did_set_switchbuf'\n-    },\n-    {\n-      full_name='synmaxcol', abbreviation='smc',\n-      short_desc=N_(\"maximum column to find syntax items\"),\n-      type='number', scope={'buffer'},\n-      redraw={'current_buffer'},\n-      varname='p_smc',\n-      defaults={if_true=3000}\n-    },\n-    {\n-      full_name='syntax', abbreviation='syn',\n-      short_desc=N_(\"syntax to be loaded for current buffer\"),\n-      type='string', scope={'buffer'},\n-      noglob=true,\n-      normal_fname_chars=true,\n-      alloced=true,\n-      varname='p_syn',\n-      defaults={if_true=\"\"},\n-      cb='did_set_filetype_or_syntax'\n-    },\n-    {\n-      full_name='tagfunc', abbreviation='tfu',\n-      short_desc=N_(\"function used to perform tag searches\"),\n-      type='string', scope={'buffer'},\n-      secure=true,\n-      func=true,\n-      varname='p_tfu',\n-      defaults={if_true=\"\"},\n-      cb='did_set_tagfunc'\n-    },\n-    {\n-      full_name='tabline', abbreviation='tal',\n-      short_desc=N_(\"custom format for the console tab pages line\"),\n-      type='string', scope={'global'},\n-      modelineexpr=true,\n-      redraw={'tabline'},\n-      varname='p_tal',\n-      defaults={if_true=\"\"},\n-      cb='did_set_tabline'\n-    },\n-    {\n-      full_name='tabpagemax', abbreviation='tpm',\n-      short_desc=N_(\"maximum number of tab pages for |-p| and \\\"tab all\\\"\"),\n-      type='number', scope={'global'},\n-      varname='p_tpm',\n-      defaults={if_true=50}\n-    },\n-    {\n-      full_name='tabstop', abbreviation='ts',\n-      short_desc=N_(\"number of spaces that <Tab> in file uses\"),\n-      type='number', scope={'buffer'},\n-      redraw={'current_buffer'},\n-      varname='p_ts',\n-      defaults={if_true=8},\n-      cb='did_set_shiftwidth_tabstop'\n-    },\n-    {\n-      full_name='tagbsearch', abbreviation='tbs',\n-      short_desc=N_(\"use binary searching in tags files\"),\n-      type='bool', scope={'global'},\n-      varname='p_tbs',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='tagcase', abbreviation='tc',\n-      short_desc=N_(\"how to handle case when searching in tags files\"),\n-      type='string', scope={'global', 'buffer'},\n-      varname='p_tc',\n-      defaults={if_true=\"followic\"},\n-      cb='did_set_tagcase'\n-    },\n-    {\n-      full_name='taglength', abbreviation='tl',\n-      short_desc=N_(\"number of significant characters for a tag\"),\n-      type='number', scope={'global'},\n-      varname='p_tl',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='tagrelative', abbreviation='tr',\n-      short_desc=N_(\"file names in tag file are relative\"),\n-      type='bool', scope={'global'},\n-      varname='p_tr',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='tags', abbreviation='tag',\n-      short_desc=N_(\"list of file names used by the tag command\"),\n-      type='string', list='onecomma', scope={'global', 'buffer'},\n-      deny_duplicates=true,\n-      expand=true,\n-      varname='p_tags',\n-      defaults={if_true=\"./tags;,tags\"}\n-    },\n-    {\n-      full_name='tagstack', abbreviation='tgst',\n-      short_desc=N_(\"push tags onto the tag stack\"),\n-      type='bool', scope={'global'},\n-      varname='p_tgst',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='termbidi', abbreviation='tbidi',\n-      short_desc=N_(\"terminal takes care of bi-directionality\"),\n-      type='bool', scope={'global'},\n-      varname='p_tbidi',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='termencoding', abbreviation='tenc',\n-      short_desc=N_(\"Terminal encoding\"),\n-      type='string', scope={'global'},\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='termguicolors', abbreviation='tgc',\n-      short_desc=N_(\"Terminal true color support\"),\n-      type='bool', scope={'global'},\n-      redraw={'ui_option'},\n-      varname='p_tgc',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='termpastefilter', abbreviation='tpf',\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_tpf',\n-      defaults={if_true=\"BS,HT,ESC,DEL\"},\n-      cb='did_set_termpastefilter'\n-    },\n-    {\n-      full_name='terse',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      varname='p_force_off',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='textwidth', abbreviation='tw',\n-      short_desc=N_(\"maximum width of text that is being inserted\"),\n-      type='number', scope={'buffer'},\n-      redraw={'current_buffer'},\n-      varname='p_tw',\n-      defaults={if_true=0},\n-      cb='did_set_textwidth'\n-    },\n-    {\n-      full_name='thesaurus', abbreviation='tsr',\n-      short_desc=N_(\"list of thesaurus files for keyword completion\"),\n-      type='string', list='onecomma', scope={'global', 'buffer'},\n-      deny_duplicates=true,\n-      normal_dname_chars=true,\n-      expand=true,\n-      varname='p_tsr',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='thesaurusfunc', abbreviation='tsrfu',\n-      short_desc=N_(\"function used for thesaurus completion\"),\n-      type='string', scope={'global', 'buffer'},\n-      secure=true,\n-      alloced=true,\n-      func=true,\n-      varname='p_tsrfu',\n-      defaults={if_true=\"\"},\n-      cb='did_set_thesaurusfunc'\n-    },\n-    {\n-      full_name='tildeop', abbreviation='top',\n-      short_desc=N_(\"tilde command \\\"~\\\" behaves like an operator\"),\n-      type='bool', scope={'global'},\n-      varname='p_to',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='timeout', abbreviation='to',\n-      short_desc=N_(\"time out on mappings and key codes\"),\n-      type='bool', scope={'global'},\n-      varname='p_timeout',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='timeoutlen', abbreviation='tm',\n-      short_desc=N_(\"time out time in milliseconds\"),\n-      type='number', scope={'global'},\n-      varname='p_tm',\n-      defaults={if_true=1000}\n-    },\n-    {\n-      full_name='title',\n-      short_desc=N_(\"Vim set the title of the window\"),\n-      type='bool', scope={'global'},\n-      varname='p_title',\n-      defaults={if_true=false},\n-      cb='did_set_title_icon'\n-    },\n-    {\n-      full_name='titlelen',\n-      short_desc=N_(\"of 'columns' used for window title\"),\n-      type='number', scope={'global'},\n-      varname='p_titlelen',\n-      defaults={if_true=85},\n-      cb='did_set_titlelen'\n-    },\n-    {\n-      full_name='titleold',\n-      short_desc=N_(\"title, restored when exiting\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      no_mkrc=true,\n-      varname='p_titleold',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='titlestring',\n-      short_desc=N_(\"to use for the Vim window title\"),\n-      type='string', scope={'global'},\n-      modelineexpr=true,\n-      varname='p_titlestring',\n-      defaults={if_true=\"\"},\n-      cb='did_set_titlestring'\n-    },\n-    {\n-      full_name='ttimeout',\n-      short_desc=N_(\"out on mappings\"),\n-      type='bool', scope={'global'},\n-      redraw={'ui_option'},\n-      varname='p_ttimeout',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='ttimeoutlen', abbreviation='ttm',\n-      short_desc=N_(\"time out time for key codes in milliseconds\"),\n-      type='number', scope={'global'},\n-      redraw={'ui_option'},\n-      varname='p_ttm',\n-      defaults={if_true=50}\n-    },\n-    {\n-      full_name='ttyfast', abbreviation='tf',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      no_mkrc=true,\n-      varname='p_force_on',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='undodir', abbreviation='udir',\n-      short_desc=N_(\"where to store undo files\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      secure=true,\n-      expand='nodefault',\n-      varname='p_udir',\n-      defaults={if_true=''}\n-    },\n-    {\n-      full_name='undofile', abbreviation='udf',\n-      short_desc=N_(\"save undo information in a file\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_udf',\n-      defaults={if_true=false},\n-      cb='did_set_undofile'\n-    },\n-    {\n-      full_name='undolevels', abbreviation='ul',\n-      short_desc=N_(\"maximum number of changes that can be undone\"),\n-      type='number', scope={'global', 'buffer'},\n-      varname='p_ul',\n-      defaults={if_true=1000},\n-      cb='did_set_undolevels'\n-    },\n-    {\n-      full_name='undoreload', abbreviation='ur',\n-      short_desc=N_(\"max nr of lines to save for undo on a buffer reload\"),\n-      type='number', scope={'global'},\n-      varname='p_ur',\n-      defaults={if_true=10000}\n-    },\n-    {\n-      full_name='updatecount', abbreviation='uc',\n-      short_desc=N_(\"after this many characters flush swap file\"),\n-      type='number', scope={'global'},\n-      varname='p_uc',\n-      defaults={if_true=200},\n-      cb='did_set_updatecount'\n-    },\n-    {\n-      full_name='updatetime', abbreviation='ut',\n-      short_desc=N_(\"after this many milliseconds flush swap file\"),\n-      type='number', scope={'global'},\n-      varname='p_ut',\n-      defaults={if_true=4000}\n-    },\n-    {\n-      full_name='varsofttabstop', abbreviation='vsts',\n-      short_desc=N_(\"list of numbers of spaces that <Tab> uses while editing\"),\n-      type='string', list='comma', scope={'buffer'},\n-      varname='p_vsts',\n-      defaults={if_true=\"\"},\n-      cb='did_set_varsofttabstop'\n-    },\n-    {\n-      full_name='vartabstop', abbreviation='vts',\n-      short_desc=N_(\"list of numbers of spaces that <Tab> in file uses\"),\n-      type='string', list='comma', scope={'buffer'},\n-      varname='p_vts',\n-      redraw={'current_buffer'},\n-      defaults={if_true=\"\"},\n-      cb='did_set_vartabstop'\n-    },\n-    {\n-      full_name='verbose', abbreviation='vbs',\n-      short_desc=N_(\"give informative messages\"),\n-      type='number', scope={'global'},\n-      varname='p_verbose', redraw={'ui_option'},\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='verbosefile', abbreviation='vfile',\n-      short_desc=N_(\"file to write messages in\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      expand=true,\n-      varname='p_vfile',\n-      defaults={if_true=\"\"},\n-      cb='did_set_verbosefile'\n-    },\n-    {\n-      full_name='viewdir', abbreviation='vdir',\n-      short_desc=N_(\"directory where to store files with :mkview\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      expand='nodefault',\n-      varname='p_vdir',\n-      defaults={if_true=''}\n-    },\n-    {\n-      full_name='viewoptions', abbreviation='vop',\n-      short_desc=N_(\"specifies what to save for :mkview\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_vop',\n-      defaults={if_true=\"folds,cursor,curdir\"},\n-      cb='did_set_viewoptions'\n-    },\n-    {\n-      -- Alias for \"shada\".\n-      full_name='viminfo', abbreviation='vi',\n-      short_desc=N_(\"Alias for shada\"),\n-      type='string', scope={'global'}, nodefault=true,\n-    },\n-    {\n-      -- Alias for \"shadafile\".\n-      full_name='viminfofile', abbreviation='vif',\n-      short_desc=N_(\"Alias for shadafile instead\"),\n-      type='string', scope={'global'}, nodefault=true,\n-    },\n-    {\n-      full_name='virtualedit', abbreviation='ve',\n-      short_desc=N_(\"when to use virtual editing\"),\n-      type='string', list='onecomma', scope={'global', 'window'},\n-      deny_duplicates=true,\n-      redraw={'curswant'},\n-      varname='p_ve',\n-      defaults={if_true=\"\"},\n-      cb='did_set_virtualedit'\n-    },\n-    {\n-      full_name='visualbell', abbreviation='vb',\n-      short_desc=N_(\"use visual bell instead of beeping\"),\n-      type='bool', scope={'global'},\n-      varname='p_vb',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='warn',\n-      short_desc=N_(\"for shell command when buffer was changed\"),\n-      type='bool', scope={'global'},\n-      varname='p_warn',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='whichwrap', abbreviation='ww',\n-      short_desc=N_(\"allow specified keys to cross line boundaries\"),\n-      type='string', list='flagscomma', scope={'global'},\n-      varname='p_ww',\n-      defaults={if_true=\"b,s\"},\n-      cb='did_set_whichwrap'\n-    },\n-    {\n-      full_name='wildchar', abbreviation='wc',\n-      short_desc=N_(\"command-line character for wildcard expansion\"),\n-      type='number', scope={'global'},\n-      varname='p_wc',\n-      defaults={if_true=imacros('TAB')}\n-    },\n-    {\n-      full_name='wildcharm', abbreviation='wcm',\n-      short_desc=N_(\"like 'wildchar' but also works when mapped\"),\n-      type='number', scope={'global'},\n-      varname='p_wcm',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='wildignore', abbreviation='wig',\n-      short_desc=N_(\"files matching these patterns are not completed\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_wig',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='wildignorecase', abbreviation='wic',\n-      short_desc=N_(\"ignore case when completing file names\"),\n-      type='bool', scope={'global'},\n-      varname='p_wic',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='wildmenu', abbreviation='wmnu',\n-      short_desc=N_(\"use menu for command line completion\"),\n-      type='bool', scope={'global'},\n-      varname='p_wmnu',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='wildmode', abbreviation='wim',\n-      short_desc=N_(\"mode for 'wildchar' command-line expansion\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=false,\n-      varname='p_wim',\n-      defaults={if_true=\"full\"},\n-      cb='did_set_wildmode'\n-    },\n-    {\n-      full_name='wildoptions', abbreviation='wop',\n-      short_desc=N_(\"specifies how command line completion is done\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_wop',\n-      defaults={if_true='pum,tagfile'},\n-      cb='did_set_wildoptions'\n-    },\n-    {\n-      full_name='winaltkeys', abbreviation='wak',\n-      short_desc=N_(\"when the windows system handles ALT keys\"),\n-      type='string', scope={'global'},\n-      varname='p_wak',\n-      defaults={if_true=\"menu\"},\n-      cb='did_set_winaltkeys'\n-    },\n-    {\n-      full_name='winbar', abbreviation='wbr',\n-      short_desc=N_(\"custom format for the window bar\"),\n-      type='string', scope={'global', 'window'},\n-      alloced=true,\n-      modelineexpr=true,\n-      redraw={'statuslines'},\n-      varname='p_wbr',\n-      defaults={if_true=\"\"},\n-      cb='did_set_winbar'\n-    },\n-    {\n-      full_name='winblend', abbreviation='winbl',\n-      short_desc=N_(\"Controls transparency level for floating windows\"),\n-      type='number', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=0},\n-      cb='did_set_winblend'\n-    },\n-    {\n-      full_name='winhighlight', abbreviation='winhl',\n-      short_desc=N_(\"Setup window-local highlights\");\n-      type='string', list='onecomma', scope={'window'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"\"},\n-      cb='did_set_winhl'\n-    },\n-    {\n-      full_name='window', abbreviation='wi',\n-      short_desc=N_(\"nr of lines to scroll for CTRL-F and CTRL-B\"),\n-      type='number', scope={'global'},\n-      varname='p_window',\n-      defaults={if_true=0},\n-      cb='did_set_window'\n-    },\n-    {\n-      full_name='winheight', abbreviation='wh',\n-      short_desc=N_(\"minimum number of lines for the current window\"),\n-      type='number', scope={'global'},\n-      varname='p_wh',\n-      defaults={if_true=1},\n-      cb='did_set_winheight'\n-    },\n-    {\n-      full_name='winfixheight', abbreviation='wfh',\n-      short_desc=N_(\"keep window height when opening/closing windows\"),\n-      type='bool', scope={'window'},\n-      redraw={'statuslines'},\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='winfixwidth', abbreviation='wfw',\n-      short_desc=N_(\"keep window width when opening/closing windows\"),\n-      type='bool', scope={'window'},\n-      redraw={'statuslines'},\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='winminheight', abbreviation='wmh',\n-      short_desc=N_(\"minimum number of lines for any window\"),\n-      type='number', scope={'global'},\n-      varname='p_wmh',\n-      defaults={if_true=1},\n-      cb='did_set_winminheight'\n-    },\n-    {\n-      full_name='winminwidth', abbreviation='wmw',\n-      short_desc=N_(\"minimal number of columns for any window\"),\n-      type='number', scope={'global'},\n-      varname='p_wmw',\n-      defaults={if_true=1},\n-      cb='did_set_winminwidth'\n-    },\n-    {\n-      full_name='winwidth', abbreviation='wiw',\n-      short_desc=N_(\"minimal number of columns for current window\"),\n-      type='number', scope={'global'},\n-      varname='p_wiw',\n-      defaults={if_true=20},\n-      cb='did_set_winwidth'\n-    },\n-    {\n-      full_name='wrap',\n-      short_desc=N_(\"lines wrap and continue on the next line\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=true},\n-      cb='did_set_wrap'\n-    },\n-    {\n-      full_name='wrapmargin', abbreviation='wm',\n-      short_desc=N_(\"chars from the right where wrapping starts\"),\n-      type='number', scope={'buffer'},\n-      varname='p_wm',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='wrapscan', abbreviation='ws',\n-      short_desc=N_(\"searches wrap around the end of the file\"),\n-      type='bool', scope={'global'},\n-      varname='p_ws',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='write',\n-      short_desc=N_(\"to a file is allowed\"),\n-      type='bool', scope={'global'},\n-      varname='p_write',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='writeany', abbreviation='wa',\n-      short_desc=N_(\"write to file with no need for \\\"!\\\" override\"),\n-      type='bool', scope={'global'},\n-      varname='p_wa',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='writebackup', abbreviation='wb',\n-      short_desc=N_(\"make a backup before overwriting a file\"),\n-      type='bool', scope={'global'},\n-      varname='p_wb',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='writedelay', abbreviation='wd',\n-      short_desc=N_(\"delay this many msec for each char (for debug)\"),\n-      type='number', scope={'global'},\n-      varname='p_wd',\n-      defaults={if_true=0}\n-    },\n-  }\n+      desc = [=[\n+        Which directory to use for the file browser:\n+           last\t\tUse same directory as with last file browser, where a\n+        \t\tfile was opened or saved.\n+           buffer\tUse the directory of the related buffer.\n+           current\tUse the current directory.\n+           {path}\tUse the specified directory\n+      ]=],\n+      enable_if = false,\n+      full_name = 'browsedir',\n+      scope = { 'global' },\n+      short_desc = N_('which directory to start browsing in'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'bh',\n+      alloced = true,\n+      cb = 'did_set_bufhidden',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        This option specifies what happens when a buffer is no longer\n+        displayed in a window:\n+          <empty>\tfollow the global 'hidden' option\n+          hide\t\thide the buffer (don't unload it), even if 'hidden' is\n+        \t\tnot set\n+          unload\tunload the buffer, even if 'hidden' is set; the\n+        \t\t|:hide| command will also unload the buffer\n+          delete\tdelete the buffer from the buffer list, even if\n+        \t\t'hidden' is set; the |:hide| command will also delete\n+        \t\tthe buffer, making it behave like |:bdelete|\n+          wipe\t\twipe the buffer from the buffer list, even if\n+        \t\t'hidden' is set; the |:hide| command will also wipe\n+        \t\tout the buffer, making it behave like |:bwipeout|\n+\n+        CAREFUL: when \"unload\", \"delete\" or \"wipe\" is used changes in a buffer\n+        are lost without a warning.  Also, these values may break autocommands\n+        that switch between buffers temporarily.\n+        This option is used together with 'buftype' and 'swapfile' to specify\n+        special kinds of buffers.   See |special-buffers|.\n+      ]=],\n+      full_name = 'bufhidden',\n+      noglob = true,\n+      scope = { 'buffer' },\n+      short_desc = N_('what to do when buffer is no longer in window'),\n+      type = 'string',\n+      varname = 'p_bh',\n+    },\n+    {\n+      abbreviation = 'bl',\n+      cb = 'did_set_buflisted',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        When this option is set, the buffer shows up in the buffer list.  If\n+        it is reset it is not used for \":bnext\", \"ls\", the Buffers menu, etc.\n+        This option is reset by Vim for buffers that are only used to remember\n+        a file name or marks.  Vim sets it when starting to edit a buffer.\n+        But not when moving to a buffer with \":buffer\".\n+      ]=],\n+      full_name = 'buflisted',\n+      noglob = true,\n+      scope = { 'buffer' },\n+      short_desc = N_('whether the buffer shows up in the buffer list'),\n+      tags = { 'E85' },\n+      type = 'bool',\n+      varname = 'p_bl',\n+    },\n+    {\n+      abbreviation = 'bt',\n+      alloced = true,\n+      cb = 'did_set_buftype',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        The value of this option specifies the type of a buffer:\n+          <empty>\tnormal buffer\n+          acwrite\tbuffer will always be written with |BufWriteCmd|s\n+          help\t\thelp buffer (do not set this manually)\n+          nofile\tbuffer is not related to a file, will not be written\n+          nowrite\tbuffer will not be written\n+          quickfix\tlist of errors |:cwindow| or locations |:lwindow|\n+          terminal\t|terminal-emulator| buffer\n+          prompt\tbuffer where only the last line can be edited, meant\n+        \t\tto be used by a plugin, see |prompt-buffer|\n+\n+        This option is used together with 'bufhidden' and 'swapfile' to\n+        specify special kinds of buffers.   See |special-buffers|.\n+        Also see |win_gettype()|, which returns the type of the window.\n+\n+        Be careful with changing this option, it can have many side effects!\n+        One such effect is that Vim will not check the timestamp of the file,\n+        if the file is changed by another program this will not be noticed.\n+\n+        A \"quickfix\" buffer is only used for the error list and the location\n+        list.  This value is set by the |:cwindow| and |:lwindow| commands and\n+        you are not supposed to change it.\n+\n+        \"nofile\" and \"nowrite\" buffers are similar:\n+        both:\t\tThe buffer is not to be written to disk, \":w\" doesn't\n+        \t\twork (\":w filename\" does work though).\n+        both:\t\tThe buffer is never considered to be |'modified'|.\n+        \t\tThere is no warning when the changes will be lost, for\n+        \t\texample when you quit Vim.\n+        both:\t\tA swap file is only created when using too much memory\n+        \t\t(when 'swapfile' has been reset there is never a swap\n+        \t\tfile).\n+        nofile only:\tThe buffer name is fixed, it is not handled like a\n+        \t\tfile name.  It is not modified in response to a |:cd|\n+        \t\tcommand.\n+        both:\t\tWhen using \":e bufname\" and already editing \"bufname\"\n+        \t\tthe buffer is made empty and autocommands are\n+        \t\ttriggered as usual for |:edit|.\n+        \t\t\t\t\t\t*E676*\n+        \"acwrite\" implies that the buffer name is not related to a file, like\n+        \"nofile\", but it will be written.  Thus, in contrast to \"nofile\" and\n+        \"nowrite\", \":w\" does work and a modified buffer can't be abandoned\n+        without saving.  For writing there must be matching |BufWriteCmd|,\n+        |FileWriteCmd| or |FileAppendCmd| autocommands.\n+      ]=],\n+      full_name = 'buftype',\n+      noglob = true,\n+      scope = { 'buffer' },\n+      tags = { 'E382' },\n+      short_desc = N_('special type of buffer'),\n+      type = 'string',\n+      varname = 'p_bt',\n+    },\n+    {\n+      abbreviation = 'cmp',\n+      cb = 'did_set_casemap',\n+      defaults = { if_true = 'internal,keepascii' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Specifies details about changing the case of letters.  It may contain\n+        these words, separated by a comma:\n+        internal\tUse internal case mapping functions, the current\n+        \t\tlocale does not change the case mapping. When\n+        \t\t\"internal\" is omitted, the towupper() and towlower()\n+        \t\tsystem library functions are used when available.\n+        keepascii\tFor the ASCII characters (0x00 to 0x7f) use the US\n+        \t\tcase mapping, the current locale is not effective.\n+        \t\tThis probably only matters for Turkish.\n+      ]=],\n+      full_name = 'casemap',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('specifies how case of letters is changed'),\n+      type = 'string',\n+      varname = 'p_cmp',\n+    },\n+    {\n+      abbreviation = 'cdh',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        When on, |:cd|, |:tcd| and |:lcd| without an argument changes the\n+        current working directory to the |$HOME| directory like in Unix.\n+        When off, those commands just print the current directory name.\n+        On Unix this option has no effect.\n+      ]=],\n+      full_name = 'cdhome',\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_(':cd without argument goes to the home directory'),\n+      type = 'bool',\n+      varname = 'p_cdh',\n+    },\n+    {\n+      abbreviation = 'cd',\n+      defaults = {\n+        if_true = ',,',\n+        doc = 'equivalent to $CDPATH or \",,\"',\n+      },\n+      deny_duplicates = true,\n+      desc = [=[\n+        This is a list of directories which will be searched when using the\n+        |:cd|, |:tcd| and |:lcd| commands, provided that the directory being\n+        searched for has a relative path, not an absolute part starting with\n+        \"/\", \"./\" or \"../\", the 'cdpath' option is not used then.\n+        The 'cdpath' option's value has the same form and semantics as\n+        |'path'|.  Also see |file-searching|.\n+        The default value is taken from $CDPATH, with a \",\" prepended to look\n+        in the current directory first.\n+        If the default value taken from $CDPATH is not what you want, include\n+        a modified version of the following command in your vimrc file to\n+        override it: >\n+          :let &cdpath = ',' .. substitute(substitute($CDPATH, '[, ]', '\\\\\\0', 'g'), ':', ',', 'g')\n+        <\tThis option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+        (parts of 'cdpath' can be passed to the shell to expand file names).\n+      ]=],\n+      expand = true,\n+      full_name = 'cdpath',\n+      list = 'comma',\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_('list of directories searched with \":cd\"'),\n+      tags = { 'E344', 'E346' },\n+      type = 'string',\n+      varname = 'p_cdpath',\n+    },\n+    {\n+      cb = 'did_set_cedit',\n+      defaults = {\n+        if_true = macros('CTRL_F_STR'),\n+        doc = 'CTRL-F',\n+      },\n+      desc = [=[\n+        The key used in Command-line Mode to open the command-line window.\n+        Only non-printable keys are allowed.\n+        The key can be specified as a single character, but it is difficult to\n+        type.  The preferred way is to use the <> notation.  Examples: >\n+        \t:exe \"set cedit=\\\\<C-Y>\"\n+        \t:exe \"set cedit=\\\\<Esc>\"\n+        <\t|Nvi| also has this option, but it only uses the first character.\n+        See |cmdwin|.\n+      ]=],\n+      full_name = 'cedit',\n+      scope = { 'global' },\n+      short_desc = N_('used to open the command-line window'),\n+      type = 'string',\n+      varname = 'p_cedit',\n+    },\n+    {\n+      defaults = { if_true = 0 },\n+      desc = [=[\n+        |channel| connected to the buffer, or 0 if no channel is connected.\n+        In a |:terminal| buffer this is the terminal channel.\n+        Read-only.\n+      ]=],\n+      full_name = 'channel',\n+      no_mkrc = true,\n+      nodefault = true,\n+      scope = { 'buffer' },\n+      short_desc = N_('Channel connected to the buffer'),\n+      type = 'number',\n+      varname = 'p_channel',\n+    },\n+    {\n+      abbreviation = 'ccv',\n+      cb = 'did_set_optexpr',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        An expression that is used for character encoding conversion.  It is\n+        evaluated when a file that is to be read or has been written has a\n+        different encoding from what is desired.\n+        'charconvert' is not used when the internal iconv() function is\n+        supported and is able to do the conversion.  Using iconv() is\n+        preferred, because it is much faster.\n+        'charconvert' is not used when reading stdin |--|, because there is no\n+        file to convert from.  You will have to save the text in a file first.\n+        The expression must return zero, false or an empty string for success,\n+        non-zero or true for failure.\n+        See |encoding-names| for possible encoding names.\n+        Additionally, names given in 'fileencodings' and 'fileencoding' are\n+        used.\n+        Conversion between \"latin1\", \"unicode\", \"ucs-2\", \"ucs-4\" and \"utf-8\"\n+        is done internally by Vim, 'charconvert' is not used for this.\n+        Also used for Unicode conversion.\n+        Example: >\n+        \tset charconvert=CharConvert()\n+        \tfun CharConvert()\n+        \t  system(\"recode \"\n+        \t\t\\ .. v:charconvert_from .. \"..\" .. v:charconvert_to\n+        \t\t\\ .. \" <\" .. v:fname_in .. \" >\" .. v:fname_out)\n+        \t  return v:shell_error\n+        \tendfun\n+        <\tThe related Vim variables are:\n+        \tv:charconvert_from\tname of the current encoding\n+        \tv:charconvert_to\tname of the desired encoding\n+        \tv:fname_in\t\tname of the input file\n+        \tv:fname_out\t\tname of the output file\n+        Note that v:fname_in and v:fname_out will never be the same.\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      full_name = 'charconvert',\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_('expression for character encoding conversion'),\n+      type = 'string',\n+      tags = { 'E202', 'E214', 'E513' },\n+      varname = 'p_ccv',\n+    },\n+    {\n+      abbreviation = 'cin',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Enables automatic C program indenting.  See 'cinkeys' to set the keys\n+        that trigger reindenting in insert mode and 'cinoptions' to set your\n+        preferred indent style.\n+        If 'indentexpr' is not empty, it overrules 'cindent'.\n+        If 'lisp' is not on and both 'indentexpr' and 'equalprg' are empty,\n+        the \"=\" operator indents using this algorithm rather than calling an\n+        external program.\n+        See |C-indenting|.\n+        When you don't like the way 'cindent' works, try the 'smartindent'\n+        option or 'indentexpr'.\n+      ]=],\n+      full_name = 'cindent',\n+      scope = { 'buffer' },\n+      short_desc = N_('do C program indenting'),\n+      type = 'bool',\n+      varname = 'p_cin',\n+    },\n+    {\n+      abbreviation = 'cink',\n+      alloced = true,\n+      defaults = { if_true = '0{,0},0),0],:,0#,!^F,o,O,e' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        A list of keys that, when typed in Insert mode, cause reindenting of\n+        the current line.  Only used if 'cindent' is on and 'indentexpr' is\n+        empty.\n+        For the format of this option see |cinkeys-format|.\n+        See |C-indenting|.\n+      ]=],\n+      full_name = 'cinkeys',\n+      list = 'onecomma',\n+      scope = { 'buffer' },\n+      short_desc = N_(\"keys that trigger indent when 'cindent' is set\"),\n+      type = 'string',\n+      varname = 'p_cink',\n+    },\n+    {\n+      abbreviation = 'cino',\n+      alloced = true,\n+      cb = 'did_set_cinoptions',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        The 'cinoptions' affect the way 'cindent' reindents lines in a C\n+        program.  See |cinoptions-values| for the values of this option, and\n+        |C-indenting| for info on C indenting in general.\n+      ]=],\n+      full_name = 'cinoptions',\n+      list = 'onecomma',\n+      scope = { 'buffer' },\n+      short_desc = N_(\"how to do indenting when 'cindent' is set\"),\n+      type = 'string',\n+      varname = 'p_cino',\n+    },\n+    {\n+      abbreviation = 'cinw',\n+      alloced = true,\n+      defaults = { if_true = 'if,else,while,do,for,switch' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        These keywords start an extra indent in the next line when\n+        'smartindent' or 'cindent' is set.  For 'cindent' this is only done at\n+        an appropriate place (inside {}).\n+        Note that 'ignorecase' isn't used for 'cinwords'.  If case doesn't\n+        matter, include the keyword both the uppercase and lowercase:\n+        \"if,If,IF\".\n+      ]=],\n+      full_name = 'cinwords',\n+      list = 'onecomma',\n+      scope = { 'buffer' },\n+      short_desc = N_(\"words where 'si' and 'cin' add an indent\"),\n+      type = 'string',\n+      varname = 'p_cinw',\n+    },\n+    {\n+      abbreviation = 'cinsd',\n+      alloced = true,\n+      defaults = { if_true = 'public,protected,private' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Keywords that are interpreted as a C++ scope declaration by |cino-g|.\n+        Useful e.g. for working with the Qt framework that defines additional\n+        scope declarations \"signals\", \"public slots\" and \"private slots\": >\n+        \tset cinscopedecls+=signals,public\\ slots,private\\ slots\n+        <\n+      ]=],\n+      full_name = 'cinscopedecls',\n+      list = 'onecomma',\n+      scope = { 'buffer' },\n+      short_desc = N_(\"words that are recognized by 'cino-g'\"),\n+      type = 'string',\n+      varname = 'p_cinsd',\n+    },\n+    {\n+      abbreviation = 'cb',\n+      cb = 'did_set_clipboard',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        This option is a list of comma-separated names.\n+        These names are recognized:\n+\n+        \t\t\t\t\t*clipboard-unnamed*\n+        unnamed\t\tWhen included, Vim will use the clipboard register \"*\"\n+        \t\tfor all yank, delete, change and put operations which\n+        \t\twould normally go to the unnamed register.  When a\n+        \t\tregister is explicitly specified, it will always be\n+        \t\tused regardless of whether \"unnamed\" is in 'clipboard'\n+        \t\tor not.  The clipboard register can always be\n+        \t\texplicitly accessed using the \"* notation.  Also see\n+        \t\t|clipboard|.\n+\n+        \t\t\t\t\t*clipboard-unnamedplus*\n+        unnamedplus\tA variant of the \"unnamed\" flag which uses the\n+        \t\tclipboard register \"+\" (|quoteplus|) instead of\n+        \t\tregister \"*\" for all yank, delete, change and put\n+        \t\toperations which would normally go to the unnamed\n+        \t\tregister.  When \"unnamed\" is also included to the\n+        \t\toption, yank and delete operations (but not put)\n+        \t\twill additionally copy the text into register\n+        \t\t\"*\". See |clipboard|.\n+      ]=],\n+      deny_duplicates = true,\n+      full_name = 'clipboard',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('use the clipboard as the unnamed register'),\n+      type = 'string',\n+      varname = 'p_cb',\n+    },\n+    {\n+      abbreviation = 'ch',\n+      cb = 'did_set_cmdheight',\n+      defaults = { if_true = 1 },\n+      desc = [=[\n+        Number of screen lines to use for the command-line.  Helps avoiding\n+        |hit-enter| prompts.\n+        The value of this option is stored with the tab page, so that each tab\n+        page can have a different value.\n+\n+        When 'cmdheight' is zero, there is no command-line unless it is being\n+        used.  The command-line will cover the last line of the screen when\n+        shown.\n+\n+        WARNING: `cmdheight=0` is considered experimental. Expect some\n+        unwanted behaviour. Some 'shortmess' flags and similar\n+        mechanism might fail to take effect, causing unwanted hit-enter\n+        prompts.  Some informative messages, both from Nvim itself and\n+        plugins, will not be displayed.\n+      ]=],\n+      full_name = 'cmdheight',\n+      redraw = { 'all_windows' },\n+      scope = { 'global' },\n+      short_desc = N_('number of lines to use for the command-line'),\n+      type = 'number',\n+      varname = 'p_ch',\n+    },\n+    {\n+      abbreviation = 'cwh',\n+      defaults = { if_true = 7 },\n+      desc = [=[\n+        Number of screen lines to use for the command-line window. |cmdwin|\n+      ]=],\n+      full_name = 'cmdwinheight',\n+      scope = { 'global' },\n+      short_desc = N_('height of the command-line window'),\n+      type = 'number',\n+      varname = 'p_cwh',\n+    },\n+    {\n+      abbreviation = 'cc',\n+      cb = 'did_set_colorcolumn',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        'colorcolumn' is a comma-separated list of screen columns that are\n+        highlighted with ColorColumn |hl-ColorColumn|.  Useful to align\n+        text.  Will make screen redrawing slower.\n+        The screen column can be an absolute number, or a number preceded with\n+        '+' or '-', which is added to or subtracted from 'textwidth'. >\n+\n+        \t:set cc=+1\t  \" highlight column after 'textwidth'\n+        \t:set cc=+1,+2,+3  \" highlight three columns after 'textwidth'\n+        \t:hi ColorColumn ctermbg=lightgrey guibg=lightgrey\n+        <\n+        When 'textwidth' is zero then the items with '-' and '+' are not used.\n+        A maximum of 256 columns are highlighted.\n+      ]=],\n+      full_name = 'colorcolumn',\n+      list = 'onecomma',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('columns to highlight'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'co',\n+      defaults = {\n+        if_true = macros('DFLT_COLS'),\n+        doc = '80 or terminal width',\n+      },\n+      desc = [=[\n+        Number of columns of the screen.  Normally this is set by the terminal\n+        initialization and does not have to be set by hand.\n+        When Vim is running in the GUI or in a resizable window, setting this\n+        option will cause the window size to be changed.  When you only want\n+        to use the size for the GUI, put the command in your |ginit.vim| file.\n+        When you set this option and Vim is unable to change the physical\n+        number of columns of the display, the display may be messed up.  For\n+        the GUI it is always possible and Vim limits the number of columns to\n+        what fits on the screen.  You can use this command to get the widest\n+        window possible: >\n+        \t:set columns=9999\n+        <\tMinimum value is 12, maximum value is 10000.\n+      ]=],\n+      full_name = 'columns',\n+      no_mkrc = true,\n+      scope = { 'global' },\n+      short_desc = N_('number of columns in the display'),\n+      tags = { 'E594' },\n+      type = 'number',\n+      varname = 'p_columns',\n+    },\n+    {\n+      abbreviation = 'com',\n+      alloced = true,\n+      cb = 'did_set_comments',\n+      defaults = { if_true = 's1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        A comma-separated list of strings that can start a comment line.  See\n+        |format-comments|.  See |option-backslash| about using backslashes to\n+        insert a space.\n+      ]=],\n+      full_name = 'comments',\n+      list = 'onecomma',\n+      redraw = { 'curswant' },\n+      scope = { 'buffer' },\n+      short_desc = N_('patterns that can start a comment line'),\n+      tags = { 'E524', 'E525' },\n+      type = 'string',\n+      varname = 'p_com',\n+    },\n+    {\n+      abbreviation = 'cms',\n+      alloced = true,\n+      cb = 'did_set_commentstring',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        A template for a comment.  The \"%s\" in the value is replaced with the\n+        comment text.  For example, C uses \"/*%s*/\". Currently only used to\n+        add markers for folding, see |fold-marker|.\n+      ]=],\n+      full_name = 'commentstring',\n+      redraw = { 'curswant' },\n+      scope = { 'buffer' },\n+      short_desc = N_('template for comments; used for fold marker'),\n+      tags = { 'E537' },\n+      type = 'string',\n+      varname = 'p_cms',\n+    },\n+    {\n+      abbreviation = 'cp',\n+      defaults = { if_true = false },\n+      full_name = 'compatible',\n+      scope = { 'global' },\n+      short_desc = N_('No description'),\n+      type = 'bool',\n+      varname = 'p_force_off',\n+    },\n+    {\n+      abbreviation = 'cpt',\n+      alloced = true,\n+      cb = 'did_set_complete',\n+      defaults = { if_true = '.,w,b,u,t' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        This option specifies how keyword completion |ins-completion| works\n+        when CTRL-P or CTRL-N are used.  It is also used for whole-line\n+        completion |i_CTRL-X_CTRL-L|.  It indicates the type of completion\n+        and the places to scan.  It is a comma-separated list of flags:\n+        .\tscan the current buffer ('wrapscan' is ignored)\n+        w\tscan buffers from other windows\n+        b\tscan other loaded buffers that are in the buffer list\n+        u\tscan the unloaded buffers that are in the buffer list\n+        U\tscan the buffers that are not in the buffer list\n+        k\tscan the files given with the 'dictionary' option\n+        kspell  use the currently active spell checking |spell|\n+        k{dict}\tscan the file {dict}.  Several \"k\" flags can be given,\n+        \tpatterns are valid too.  For example: >\n+        \t\t:set cpt=k/usr/dict/*,k~/spanish\n+        <\ts\tscan the files given with the 'thesaurus' option\n+        s{tsr}\tscan the file {tsr}.  Several \"s\" flags can be given, patterns\n+        \tare valid too.\n+        i\tscan current and included files\n+        d\tscan current and included files for defined name or macro\n+        \t|i_CTRL-X_CTRL-D|\n+        ]\ttag completion\n+        t\tsame as \"]\"\n+\n+        Unloaded buffers are not loaded, thus their autocmds |:autocmd| are\n+        not executed, this may lead to unexpected completions from some files\n+        (gzipped files for example).  Unloaded buffers are not scanned for\n+        whole-line completion.\n+\n+        As you can see, CTRL-N and CTRL-P can be used to do any 'iskeyword'-\n+        based expansion (e.g., dictionary |i_CTRL-X_CTRL-K|, included patterns\n+        |i_CTRL-X_CTRL-I|, tags |i_CTRL-X_CTRL-]| and normal expansions).\n+      ]=],\n+      full_name = 'complete',\n+      list = 'onecomma',\n+      scope = { 'buffer' },\n+      short_desc = N_('specify how Insert mode completion works'),\n+      tags = { 'E535' },\n+      type = 'string',\n+      varname = 'p_cpt',\n+    },\n+    {\n+      abbreviation = 'cocu',\n+      alloced = true,\n+      cb = 'did_set_concealcursor',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        Sets the modes in which text in the cursor line can also be concealed.\n+        When the current mode is listed then concealing happens just like in\n+        other lines.\n+          n\t\tNormal mode\n+          v\t\tVisual mode\n+          i\t\tInsert mode\n+          c\t\tCommand line editing, for 'incsearch'\n+\n+        'v' applies to all lines in the Visual area, not only the cursor.\n+        A useful value is \"nc\".  This is used in help files.  So long as you\n+        are moving around text is concealed, but when starting to insert text\n+        or selecting a Visual area the concealed text is displayed, so that\n+        you can see what you are doing.\n+        Keep in mind that the cursor position is not always where it's\n+        displayed.  E.g., when moving vertically it may change column.\n+      ]=],\n+      full_name = 'concealcursor',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('whether concealable text is hidden in cursor line'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'cole',\n+      defaults = { if_true = 0 },\n+      desc = [=[\n+        Determine how text with the \"conceal\" syntax attribute |:syn-conceal|\n+        is shown:\n+\n+        Value\t\tEffect ~\n+        0\t\tText is shown normally\n+        1\t\tEach block of concealed text is replaced with one\n+        \t\tcharacter.  If the syntax item does not have a custom\n+        \t\treplacement character defined (see |:syn-cchar|) the\n+        \t\tcharacter defined in 'listchars' is used.\n+        \t\tIt is highlighted with the \"Conceal\" highlight group.\n+        2\t\tConcealed text is completely hidden unless it has a\n+        \t\tcustom replacement character defined (see\n+        \t\t|:syn-cchar|).\n+        3\t\tConcealed text is completely hidden.\n+\n+        Note: in the cursor line concealed text is not hidden, so that you can\n+        edit and copy the text.  This can be changed with the 'concealcursor'\n+        option.\n+      ]=],\n+      full_name = 'conceallevel',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('whether concealable text is shown or hidden'),\n+      type = 'number',\n+    },\n+    {\n+      abbreviation = 'cfu',\n+      alloced = true,\n+      cb = 'did_set_completefunc',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        This option specifies a function to be used for Insert mode completion\n+        with CTRL-X CTRL-U. |i_CTRL-X_CTRL-U|\n+        See |complete-functions| for an explanation of how the function is\n+        invoked and what it should return.  The value can be the name of a\n+        function, a |lambda| or a |Funcref|. See |option-value-function| for\n+        more information.\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      full_name = 'completefunc',\n+      func = true,\n+      scope = { 'buffer' },\n+      secure = true,\n+      short_desc = N_('function to be used for Insert mode completion'),\n+      type = 'string',\n+      varname = 'p_cfu',\n+    },\n+    {\n+      abbreviation = 'cot',\n+      cb = 'did_set_completeopt',\n+      defaults = { if_true = 'menu,preview' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        A comma-separated list of options for Insert mode completion\n+        |ins-completion|.  The supported values are:\n+\n+           menu\t    Use a popup menu to show the possible completions.  The\n+        \t    menu is only shown when there is more than one match and\n+        \t    sufficient colors are available.  |ins-completion-menu|\n+\n+           menuone  Use the popup menu also when there is only one match.\n+        \t    Useful when there is additional information about the\n+        \t    match, e.g., what file it comes from.\n+\n+           longest  Only insert the longest common text of the matches.  If\n+        \t    the menu is displayed you can use CTRL-L to add more\n+        \t    characters.  Whether case is ignored depends on the kind\n+        \t    of completion.  For buffer text the 'ignorecase' option is\n+        \t    used.\n+\n+           preview  Show extra information about the currently selected\n+        \t    completion in the preview window.  Only works in\n+        \t    combination with \"menu\" or \"menuone\".\n+\n+          noinsert  Do not insert any text for a match until the user selects\n+        \t    a match from the menu. Only works in combination with\n+        \t    \"menu\" or \"menuone\". No effect if \"longest\" is present.\n+\n+          noselect  Do not select a match in the menu, force the user to\n+        \t    select one from the menu. Only works in combination with\n+        \t    \"menu\" or \"menuone\".\n+      ]=],\n+      full_name = 'completeopt',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('options for Insert mode completion'),\n+      type = 'string',\n+      varname = 'p_cot',\n+    },\n+    {\n+      abbreviation = 'csl',\n+      cb = 'did_set_completeslash',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        \t\tonly for MS-Windows\n+        When this option is set it overrules 'shellslash' for completion:\n+        - When this option is set to \"slash\", a forward slash is used for path\n+          completion in insert mode. This is useful when editing HTML tag, or\n+          Makefile with 'noshellslash' on MS-Windows.\n+        - When this option is set to \"backslash\", backslash is used. This is\n+          useful when editing a batch file with 'shellslash' set on MS-Windows.\n+        - When this option is empty, same character is used as for\n+          'shellslash'.\n+        For Insert mode completion the buffer-local value is used.  For\n+        command line completion the global value is used.\n+      ]=],\n+      enable_if = 'BACKSLASH_IN_FILENAME',\n+      full_name = 'completeslash',\n+      scope = { 'buffer' },\n+      type = 'string',\n+      varname = 'p_csl',\n+    },\n+    {\n+      abbreviation = 'cf',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        When 'confirm' is on, certain operations that would normally\n+        fail because of unsaved changes to a buffer, e.g. \":q\" and \":e\",\n+        instead raise a dialog asking if you wish to save the current\n+        file(s).  You can still use a ! to unconditionally |abandon| a buffer.\n+        If 'confirm' is off you can still activate confirmation for one\n+        command only (this is most useful in mappings) with the |:confirm|\n+        command.\n+        Also see the |confirm()| function and the 'v' flag in 'guioptions'.\n+      ]=],\n+      full_name = 'confirm',\n+      scope = { 'global' },\n+      short_desc = N_('ask what to do about unsaved/read-only files'),\n+      type = 'bool',\n+      varname = 'p_confirm',\n+    },\n+    {\n+      abbreviation = 'ci',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Copy the structure of the existing lines indent when autoindenting a\n+        new line.  Normally the new indent is reconstructed by a series of\n+        tabs followed by spaces as required (unless |'expandtab'| is enabled,\n+        in which case only spaces are used).  Enabling this option makes the\n+        new line copy whatever characters were used for indenting on the\n+        existing line.  'expandtab' has no effect on these characters, a Tab\n+        remains a Tab.  If the new indent is greater than on the existing\n+        line, the remaining space is filled in the normal manner.\n+        See 'preserveindent'.\n+      ]=],\n+      full_name = 'copyindent',\n+      scope = { 'buffer' },\n+      short_desc = N_(\"make 'autoindent' use existing indent structure\"),\n+      type = 'bool',\n+      varname = 'p_ci',\n+    },\n+    {\n+      abbreviation = 'cpo',\n+      cb = 'did_set_cpoptions',\n+      defaults = { if_true = macros('CPO_VIM') },\n+      desc = [=[\n+        A sequence of single character flags.  When a character is present\n+        this indicates Vi-compatible behavior.  This is used for things where\n+        not being Vi-compatible is mostly or sometimes preferred.\n+        'cpoptions' stands for \"compatible-options\".\n+        Commas can be added for readability.\n+        To avoid problems with flags that are added in the future, use the\n+        \"+=\" and \"-=\" feature of \":set\" |add-option-flags|.\n+\n+            contains\tbehavior\t~\n+        \t\t\t\t\t\t\t*cpo-a*\n+        \ta\tWhen included, a \":read\" command with a file name\n+        \t\targument will set the alternate file name for the\n+        \t\tcurrent window.\n+        \t\t\t\t\t\t\t*cpo-A*\n+        \tA\tWhen included, a \":write\" command with a file name\n+        \t\targument will set the alternate file name for the\n+        \t\tcurrent window.\n+        \t\t\t\t\t\t\t*cpo-b*\n+        \tb\t\"\\|\" in a \":map\" command is recognized as the end of\n+        \t\tthe map command.  The '\\' is included in the mapping,\n+        \t\tthe text after the '|' is interpreted as the next\n+        \t\tcommand.  Use a CTRL-V instead of a backslash to\n+        \t\tinclude the '|' in the mapping.  Applies to all\n+        \t\tmapping, abbreviation, menu and autocmd commands.\n+        \t\tSee also |map_bar|.\n+        \t\t\t\t\t\t\t*cpo-B*\n+        \tB\tA backslash has no special meaning in mappings,\n+        \t\tabbreviations, user commands and the \"to\" part of the\n+        \t\tmenu commands.  Remove this flag to be able to use a\n+        \t\tbackslash like a CTRL-V.  For example, the command\n+        \t\t\":map X \\\\<Esc>\" results in X being mapped to:\n+        \t\t\t'B' included:\t\"\\^[\"\t (^[ is a real <Esc>)\n+        \t\t\t'B' excluded:\t\"<Esc>\"  (5 characters)\n+        \t\t\t\t\t\t\t*cpo-c*\n+        \tc\tSearching continues at the end of any match at the\n+        \t\tcursor position, but not further than the start of the\n+        \t\tnext line.  When not present searching continues\n+        \t\tone character from the cursor position.  With 'c'\n+        \t\t\"abababababab\" only gets three matches when repeating\n+        \t\t\"/abab\", without 'c' there are five matches.\n+        \t\t\t\t\t\t\t*cpo-C*\n+        \tC\tDo not concatenate sourced lines that start with a\n+        \t\tbackslash.  See |line-continuation|.\n+        \t\t\t\t\t\t\t*cpo-d*\n+        \td\tUsing \"./\" in the 'tags' option doesn't mean to use\n+        \t\tthe tags file relative to the current file, but the\n+        \t\ttags file in the current directory.\n+        \t\t\t\t\t\t\t*cpo-D*\n+        \tD\tCan't use CTRL-K to enter a digraph after Normal mode\n+        \t\tcommands with a character argument, like |r|, |f| and\n+        \t\t|t|.\n+        \t\t\t\t\t\t\t*cpo-e*\n+        \te\tWhen executing a register with \":@r\", always add a\n+        \t\t<CR> to the last line, also when the register is not\n+        \t\tlinewise.  If this flag is not present, the register\n+        \t\tis not linewise and the last line does not end in a\n+        \t\t<CR>, then the last line is put on the command-line\n+        \t\tand can be edited before hitting <CR>.\n+        \t\t\t\t\t\t\t*cpo-E*\n+        \tE\tIt is an error when using \"y\", \"d\", \"c\", \"g~\", \"gu\" or\n+        \t\t\"gU\" on an Empty region.  The operators only work when\n+        \t\tat least one character is to be operated on.  Example:\n+        \t\tThis makes \"y0\" fail in the first column.\n+        \t\t\t\t\t\t\t*cpo-f*\n+        \tf\tWhen included, a \":read\" command with a file name\n+        \t\targument will set the file name for the current buffer,\n+        \t\tif the current buffer doesn't have a file name yet.\n+        \t\t\t\t\t\t\t*cpo-F*\n+        \tF\tWhen included, a \":write\" command with a file name\n+        \t\targument will set the file name for the current\n+        \t\tbuffer, if the current buffer doesn't have a file name\n+        \t\tyet.  Also see |cpo-P|.\n+        \t\t\t\t\t\t\t*cpo-i*\n+        \ti\tWhen included, interrupting the reading of a file will\n+        \t\tleave it modified.\n+        \t\t\t\t\t\t\t*cpo-I*\n+        \tI\tWhen moving the cursor up or down just after inserting\n+        \t\tindent for 'autoindent', do not delete the indent.\n+        \t\t\t\t\t\t\t*cpo-J*\n+        \tJ\tA |sentence| has to be followed by two spaces after\n+        \t\tthe '.', '!' or '?'.  A <Tab> is not recognized as\n+        \t\twhite space.\n+        \t\t\t\t\t\t\t*cpo-K*\n+        \tK\tDon't wait for a key code to complete when it is\n+        \t\thalfway through a mapping.  This breaks mapping\n+        \t\t<F1><F1> when only part of the second <F1> has been\n+        \t\tread.  It enables cancelling the mapping by typing\n+        \t\t<F1><Esc>.\n+        \t\t\t\t\t\t\t*cpo-l*\n+        \tl\tBackslash in a [] range in a search pattern is taken\n+        \t\tliterally, only \"\\]\", \"\\^\", \"\\-\" and \"\\\\\" are special.\n+        \t\tSee |/[]|\n+        \t\t   'l' included: \"/[ \\t]\"  finds <Space>, '\\' and 't'\n+        \t\t   'l' excluded: \"/[ \\t]\"  finds <Space> and <Tab>\n+        \t\t\t\t\t\t\t*cpo-L*\n+        \tL\tWhen the 'list' option is set, 'wrapmargin',\n+        \t\t'textwidth', 'softtabstop' and Virtual Replace mode\n+        \t\t(see |gR|) count a <Tab> as two characters, instead of\n+        \t\tthe normal behavior of a <Tab>.\n+        \t\t\t\t\t\t\t*cpo-m*\n+        \tm\tWhen included, a showmatch will always wait half a\n+        \t\tsecond.  When not included, a showmatch will wait half\n+        \t\ta second or until a character is typed.  |'showmatch'|\n+        \t\t\t\t\t\t\t*cpo-M*\n+        \tM\tWhen excluded, \"%\" matching will take backslashes into\n+        \t\taccount.  Thus in \"( \\( )\" and \"\\( ( \\)\" the outer\n+        \t\tparenthesis match.  When included \"%\" ignores\n+        \t\tbackslashes, which is Vi compatible.\n+        \t\t\t\t\t\t\t*cpo-n*\n+        \tn\tWhen included, the column used for 'number' and\n+        \t\t'relativenumber' will also be used for text of wrapped\n+        \t\tlines.\n+        \t\t\t\t\t\t\t*cpo-o*\n+        \to\tLine offset to search command is not remembered for\n+        \t\tnext search.\n+        \t\t\t\t\t\t\t*cpo-O*\n+        \tO\tDon't complain if a file is being overwritten, even\n+        \t\twhen it didn't exist when editing it.  This is a\n+        \t\tprotection against a file unexpectedly created by\n+        \t\tsomeone else.  Vi didn't complain about this.\n+        \t\t\t\t\t\t\t*cpo-p*\n+        \tp\tVi compatible Lisp indenting.  When not present, a\n+        \t\tslightly better algorithm is used.\n+        \t\t\t\t\t\t\t*cpo-P*\n+        \tP\tWhen included, a \":write\" command that appends to a\n+        \t\tfile will set the file name for the current buffer, if\n+        \t\tthe current buffer doesn't have a file name yet and\n+        \t\tthe 'F' flag is also included |cpo-F|.\n+        \t\t\t\t\t\t\t*cpo-q*\n+        \tq\tWhen joining multiple lines leave the cursor at the\n+        \t\tposition where it would be when joining two lines.\n+        \t\t\t\t\t\t\t*cpo-r*\n+        \tr\tRedo (\".\" command) uses \"/\" to repeat a search\n+        \t\tcommand, instead of the actually used search string.\n+        \t\t\t\t\t\t\t*cpo-R*\n+        \tR\tRemove marks from filtered lines.  Without this flag\n+        \t\tmarks are kept like |:keepmarks| was used.\n+        \t\t\t\t\t\t\t*cpo-s*\n+        \ts\tSet buffer options when entering the buffer for the\n+        \t\tfirst time.  This is like it is in Vim version 3.0.\n+        \t\tAnd it is the default.  If not present the options are\n+        \t\tset when the buffer is created.\n+        \t\t\t\t\t\t\t*cpo-S*\n+        \tS\tSet buffer options always when entering a buffer\n+        \t\t(except 'readonly', 'fileformat', 'filetype' and\n+        \t\t'syntax').  This is the (most) Vi compatible setting.\n+        \t\tThe options are set to the values in the current\n+        \t\tbuffer.  When you change an option and go to another\n+        \t\tbuffer, the value is copied.  Effectively makes the\n+        \t\tbuffer options global to all buffers.\n+\n+        \t\t's'    'S'     copy buffer options\n+        \t\tno     no      when buffer created\n+        \t\tyes    no      when buffer first entered (default)\n+        \t\t X     yes     each time when buffer entered (vi comp.)\n+        \t\t\t\t\t\t\t*cpo-t*\n+        \tt\tSearch pattern for the tag command is remembered for\n+        \t\t\"n\" command.  Otherwise Vim only puts the pattern in\n+        \t\tthe history for search pattern, but doesn't change the\n+        \t\tlast used search pattern.\n+        \t\t\t\t\t\t\t*cpo-u*\n+        \tu\tUndo is Vi compatible.  See |undo-two-ways|.\n+        \t\t\t\t\t\t\t*cpo-v*\n+        \tv\tBackspaced characters remain visible on the screen in\n+        \t\tInsert mode.  Without this flag the characters are\n+        \t\terased from the screen right away.  With this flag the\n+        \t\tscreen newly typed text overwrites backspaced\n+        \t\tcharacters.\n+        \t\t\t\t\t\t\t*cpo-W*\n+        \tW\tDon't overwrite a readonly file.  When omitted, \":w!\"\n+        \t\toverwrites a readonly file, if possible.\n+        \t\t\t\t\t\t\t*cpo-x*\n+        \tx\t<Esc> on the command-line executes the command-line.\n+        \t\tThe default in Vim is to abandon the command-line,\n+        \t\tbecause <Esc> normally aborts a command.  |c_<Esc>|\n+        \t\t\t\t\t\t\t*cpo-X*\n+        \tX\tWhen using a count with \"R\" the replaced text is\n+        \t\tdeleted only once.  Also when repeating \"R\" with \".\"\n+        \t\tand a count.\n+        \t\t\t\t\t\t\t*cpo-y*\n+        \ty\tA yank command can be redone with \".\".  Think twice if\n+        \t\tyou really want to use this, it may break some\n+        \t\tplugins, since most people expect \".\" to only repeat a\n+        \t\tchange.\n+        \t\t\t\t\t\t\t*cpo-Z*\n+        \tZ\tWhen using \"w!\" while the 'readonly' option is set,\n+        \t\tdon't reset 'readonly'.\n+        \t\t\t\t\t\t\t*cpo-!*\n+        \t!\tWhen redoing a filter command, use the last used\n+        \t\texternal command, whatever it was.  Otherwise the last\n+        \t\tused -filter- command is used.\n+        \t\t\t\t\t\t\t*cpo-$*\n+        \t$\tWhen making a change to one line, don't redisplay the\n+        \t\tline, but put a '$' at the end of the changed text.\n+        \t\tThe changed text will be overwritten when you type the\n+        \t\tnew text.  The line is redisplayed if you type any\n+        \t\tcommand that moves the cursor from the insertion\n+        \t\tpoint.\n+        \t\t\t\t\t\t\t*cpo-%*\n+        \t%\tVi-compatible matching is done for the \"%\" command.\n+        \t\tDoes not recognize \"#if\", \"#endif\", etc.\n+        \t\tDoes not recognize \"/*\" and \"*/\".\n+        \t\tParens inside single and double quotes are also\n+        \t\tcounted, causing a string that contains a paren to\n+        \t\tdisturb the matching.  For example, in a line like\n+        \t\t\"if (strcmp(\"foo(\", s))\" the first paren does not\n+        \t\tmatch the last one.  When this flag is not included,\n+        \t\tparens inside single and double quotes are treated\n+        \t\tspecially.  When matching a paren outside of quotes,\n+        \t\teverything inside quotes is ignored.  When matching a\n+        \t\tparen inside quotes, it will find the matching one (if\n+        \t\tthere is one).  This works very well for C programs.\n+        \t\tThis flag is also used for other features, such as\n+        \t\tC-indenting.\n+        \t\t\t\t\t\t\t*cpo-+*\n+        \t+\tWhen included, a \":write file\" command will reset the\n+        \t\t'modified' flag of the buffer, even though the buffer\n+        \t\titself may still be different from its file.\n+        \t\t\t\t\t\t\t*cpo->*\n+        \t>\tWhen appending to a register, put a line break before\n+        \t\tthe appended text.\n+        \t\t\t\t\t\t\t*cpo-;*\n+        \t;\tWhen using |,| or |;| to repeat the last |t| search\n+        \t\tand the cursor is right in front of the searched\n+        \t\tcharacter, the cursor won't move. When not included,\n+        \t\tthe cursor would skip over it and jump to the\n+        \t\tfollowing occurrence.\n+        \t\t\t\t\t\t\t*cpo-_*\n+        \t_\tWhen using |cw| on a word, do not include the\n+        \t\twhitespace following the word in the motion.\n+      ]=],\n+      full_name = 'cpoptions',\n+      list = 'flags',\n+      redraw = { 'all_windows' },\n+      scope = { 'global' },\n+      short_desc = N_('flags for Vi-compatible behavior'),\n+      tags = { 'cpo' },\n+      type = 'string',\n+      varname = 'p_cpo',\n+    },\n+    {\n+      abbreviation = 'crb',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        When this option is set, as the cursor in the current\n+        window moves other cursorbound windows (windows that also have\n+        this option set) move their cursors to the corresponding line and\n+        column.  This option is useful for viewing the\n+        differences between two versions of a file (see 'diff'); in diff mode,\n+        inserted and deleted lines (though not characters within a line) are\n+        taken into account.\n+      ]=],\n+      full_name = 'cursorbind',\n+      pv_name = 'p_crbind',\n+      scope = { 'window' },\n+      short_desc = N_('move cursor in window as it moves in other windows'),\n+      type = 'bool',\n+    },\n+    {\n+      abbreviation = 'cuc',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Highlight the screen column of the cursor with CursorColumn\n+        |hl-CursorColumn|.  Useful to align text.  Will make screen redrawing\n+        slower.\n+        If you only want the highlighting in the current window you can use\n+        these autocommands: >\n+        \tau WinLeave * set nocursorline nocursorcolumn\n+        \tau WinEnter * set cursorline cursorcolumn\n+        <\n+      ]=],\n+      full_name = 'cursorcolumn',\n+      redraw = { 'current_window_only' },\n+      scope = { 'window' },\n+      short_desc = N_('highlight the screen column of the cursor'),\n+      type = 'bool',\n+    },\n+    {\n+      abbreviation = 'cul',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Highlight the text line of the cursor with CursorLine |hl-CursorLine|.\n+        Useful to easily spot the cursor.  Will make screen redrawing slower.\n+        When Visual mode is active the highlighting isn't used to make it\n+        easier to see the selected text.\n+      ]=],\n+      full_name = 'cursorline',\n+      redraw = { 'current_window_only' },\n+      scope = { 'window' },\n+      short_desc = N_('highlight the screen line of the cursor'),\n+      type = 'bool',\n+    },\n+    {\n+      abbreviation = 'culopt',\n+      cb = 'did_set_cursorlineopt',\n+      defaults = { if_true = 'both' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Comma-separated list of settings for how 'cursorline' is displayed.\n+        Valid values:\n+        \"line\"\t\tHighlight the text line of the cursor with\n+        \t\tCursorLine |hl-CursorLine|.\n+        \"screenline\"\tHighlight only the screen line of the cursor with\n+        \t\tCursorLine |hl-CursorLine|.\n+        \"number\"\tHighlight the line number of the cursor with\n+        \t\tCursorLineNr |hl-CursorLineNr|.\n+\n+        Special value:\n+        \"both\"\t\tAlias for the values \"line,number\".\n+\n+        \"line\" and \"screenline\" cannot be used together.\n+      ]=],\n+      full_name = 'cursorlineopt',\n+      list = 'onecomma',\n+      redraw = { 'current_window_only' },\n+      scope = { 'window' },\n+      short_desc = N_(\"settings for 'cursorline'\"),\n+      type = 'string',\n+    },\n+    {\n+      cb = 'did_set_debug',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        These values can be used:\n+        msg\tError messages that would otherwise be omitted will be given\n+        \tanyway.\n+        throw\tError messages that would otherwise be omitted will be given\n+        \tanyway and also throw an exception and set |v:errmsg|.\n+        beep\tA message will be given when otherwise only a beep would be\n+        \tproduced.\n+        The values can be combined, separated by a comma.\n+        \"msg\" and \"throw\" are useful for debugging 'foldexpr', 'formatexpr' or\n+        'indentexpr'.\n+      ]=],\n+      full_name = 'debug',\n+      scope = { 'global' },\n+      short_desc = N_('to \"msg\" to see all error messages'),\n+      type = 'string',\n+      varname = 'p_debug',\n+    },\n+    {\n+      abbreviation = 'def',\n+      alloced = true,\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        Pattern to be used to find a macro definition.  It is a search\n+        pattern, just like for the \"/\" command.  This option is used for the\n+        commands like \"[i\" and \"[d\" |include-search|.  The 'isident' option is\n+        used to recognize the defined name after the match: >\n+        \t{match with 'define'}{non-ID chars}{defined name}{non-ID char}\n+        <\tSee |option-backslash| about inserting backslashes to include a space\n+        or backslash.\n+        For C++ this value would be useful, to include const type declarations: >\n+        \t^\\(#\\s*define\\|[a-z]*\\s*const\\s*[a-z]*\\)\n+        <\tYou can also use \"\\ze\" just before the name and continue the pattern\n+        to check what is following.  E.g. for Javascript, if a function is\n+        defined with `func_name = function(args)`: >\n+        \t^\\s*\\ze\\i\\+\\s*=\\s*function(\n+        <\tIf the function is defined with `func_name : function() {...`: >\n+                ^\\s*\\ze\\i\\+\\s*[:]\\s*(*function\\s*(\n+        <\tWhen using the \":set\" command, you need to double the backslashes!\n+        To avoid that use `:let` with a single quote string: >\n+        \tlet &l:define = '^\\s*\\ze\\k\\+\\s*=\\s*function('\n+        <\n+      ]=],\n+      full_name = 'define',\n+      redraw = { 'curswant' },\n+      scope = { 'global', 'buffer' },\n+      short_desc = N_('pattern to be used to find a macro definition'),\n+      type = 'string',\n+      varname = 'p_def',\n+    },\n+    {\n+      abbreviation = 'deco',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        If editing Unicode and this option is set, backspace and Normal mode\n+        \"x\" delete each combining character on its own.  When it is off (the\n+        default) the character along with its combining characters are\n+        deleted.\n+        Note: When 'delcombine' is set \"xx\" may work differently from \"2x\"!\n+\n+        This is useful for Arabic, Hebrew and many other languages where one\n+        may have combining characters overtop of base characters, and want\n+        to remove only the combining ones.\n+      ]=],\n+      full_name = 'delcombine',\n+      scope = { 'global' },\n+      short_desc = N_('delete combining characters on their own'),\n+      type = 'bool',\n+      varname = 'p_deco',\n+    },\n+    {\n+      abbreviation = 'dict',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        List of file names, separated by commas, that are used to lookup words\n+        for keyword completion commands |i_CTRL-X_CTRL-K|.  Each file should\n+        contain a list of words.  This can be one word per line, or several\n+        words per line, separated by non-keyword characters (white space is\n+        preferred).  Maximum line length is 510 bytes.\n+\n+        When this option is empty or an entry \"spell\" is present, and spell\n+        checking is enabled, words in the word lists for the currently active\n+        'spelllang' are used. See |spell|.\n+\n+        To include a comma in a file name precede it with a backslash.  Spaces\n+        after a comma are ignored, otherwise spaces are included in the file\n+        name.  See |option-backslash| about using backslashes.\n+        This has nothing to do with the |Dictionary| variable type.\n+        Where to find a list of words?\n+        - BSD/macOS include the \"/usr/share/dict/words\" file.\n+        - Try \"apt install spell\" to get the \"/usr/share/dict/words\" file on\n+          apt-managed systems (Debian/Ubuntu).\n+        The use of |:set+=| and |:set-=| is preferred when adding or removing\n+        directories from the list.  This avoids problems when a future version\n+        uses another default.\n+        Backticks cannot be used in this option for security reasons.\n+      ]=],\n+      expand = true,\n+      full_name = 'dictionary',\n+      list = 'onecomma',\n+      normal_dname_chars = true,\n+      scope = { 'global', 'buffer' },\n+      short_desc = N_('list of file names used for keyword completion'),\n+      type = 'string',\n+      varname = 'p_dict',\n+    },\n+    {\n+      cb = 'did_set_diff',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Join the current window in the group of windows that shows differences\n+        between files.  See |diff-mode|.\n+      ]=],\n+      full_name = 'diff',\n+      noglob = true,\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('diff mode for the current window'),\n+      type = 'bool',\n+    },\n+    {\n+      abbreviation = 'dex',\n+      cb = 'did_set_optexpr',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        Expression which is evaluated to obtain a diff file (either ed-style\n+        or unified-style) from two versions of a file.  See |diff-diffexpr|.\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      full_name = 'diffexpr',\n+      redraw = { 'curswant' },\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_('expression used to obtain a diff file'),\n+      type = 'string',\n+      varname = 'p_dex',\n+    },\n+    {\n+      abbreviation = 'dip',\n+      alloced = true,\n+      cb = 'did_set_diffopt',\n+      defaults = { if_true = 'internal,filler,closeoff' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Option settings for diff mode.  It can consist of the following items.\n+        All are optional.  Items must be separated by a comma.\n+\n+        \tfiller\t\tShow filler lines, to keep the text\n+        \t\t\tsynchronized with a window that has inserted\n+        \t\t\tlines at the same position.  Mostly useful\n+        \t\t\twhen windows are side-by-side and 'scrollbind'\n+        \t\t\tis set.\n+\n+        \tcontext:{n}\tUse a context of {n} lines between a change\n+        \t\t\tand a fold that contains unchanged lines.\n+        \t\t\tWhen omitted a context of six lines is used.\n+        \t\t\tWhen using zero the context is actually one,\n+        \t\t\tsince folds require a line in between, also\n+        \t\t\tfor a deleted line.\n+        \t\t\tSee |fold-diff|.\n+\n+        \tiblank\t\tIgnore changes where lines are all blank.  Adds\n+        \t\t\tthe \"-B\" flag to the \"diff\" command if\n+        \t\t\t'diffexpr' is empty.  Check the documentation\n+        \t\t\tof the \"diff\" command for what this does\n+        \t\t\texactly.\n+        \t\t\tNOTE: the diff windows will get out of sync,\n+        \t\t\tbecause no differences between blank lines are\n+        \t\t\ttaken into account.\n+\n+        \ticase\t\tIgnore changes in case of text.  \"a\" and \"A\"\n+        \t\t\tare considered the same.  Adds the \"-i\" flag\n+        \t\t\tto the \"diff\" command if 'diffexpr' is empty.\n+\n+        \tiwhite\t\tIgnore changes in amount of white space.  Adds\n+        \t\t\tthe \"-b\" flag to the \"diff\" command if\n+        \t\t\t'diffexpr' is empty.  Check the documentation\n+        \t\t\tof the \"diff\" command for what this does\n+        \t\t\texactly.  It should ignore adding trailing\n+        \t\t\twhite space, but not leading white space.\n+\n+        \tiwhiteall\tIgnore all white space changes.  Adds\n+        \t\t\tthe \"-w\" flag to the \"diff\" command if\n+        \t\t\t'diffexpr' is empty.  Check the documentation\n+        \t\t\tof the \"diff\" command for what this does\n+        \t\t\texactly.\n+\n+        \tiwhiteeol\tIgnore white space changes at end of line.\n+        \t\t\tAdds the \"-Z\" flag to the \"diff\" command if\n+        \t\t\t'diffexpr' is empty.  Check the documentation\n+        \t\t\tof the \"diff\" command for what this does\n+        \t\t\texactly.\n+\n+        \thorizontal\tStart diff mode with horizontal splits (unless\n+        \t\t\texplicitly specified otherwise).\n+\n+        \tvertical\tStart diff mode with vertical splits (unless\n+        \t\t\texplicitly specified otherwise).\n+\n+        \tcloseoff\tWhen a window is closed where 'diff' is set\n+        \t\t\tand there is only one window remaining in the\n+        \t\t\tsame tab page with 'diff' set, execute\n+        \t\t\t`:diffoff` in that window.  This undoes a\n+        \t\t\t`:diffsplit` command.\n+\n+        \thiddenoff\tDo not use diff mode for a buffer when it\n+        \t\t\tbecomes hidden.\n+\n+        \tfoldcolumn:{n}\tSet the 'foldcolumn' option to {n} when\n+        \t\t\tstarting diff mode.  Without this 2 is used.\n+\n+        \tfollowwrap\tFollow the 'wrap' option and leave as it is.\n+\n+        \tinternal\tUse the internal diff library.  This is\n+        \t\t\tignored when 'diffexpr' is set.  *E960*\n+        \t\t\tWhen running out of memory when writing a\n+        \t\t\tbuffer this item will be ignored for diffs\n+        \t\t\tinvolving that buffer.  Set the 'verbose'\n+        \t\t\toption to see when this happens.\n+\n+        \tindent-heuristic\n+        \t\t\tUse the indent heuristic for the internal\n+        \t\t\tdiff library.\n+\n+        \tlinematch:{n}   Enable a second stage diff on each generated\n+        \t\t\thunk in order to align lines. When the total\n+        \t\t\tnumber of lines in a hunk exceeds {n}, the\n+        \t\t\tsecond stage diff will not be performed as\n+        \t\t\tvery large hunks can cause noticeable lag. A\n+        \t\t\trecommended setting is \"linematch:60\", as this\n+        \t\t\twill enable alignment for a 2 buffer diff with\n+        \t\t\thunks of up to 30 lines each, or a 3 buffer\n+        \t\t\tdiff with hunks of up to 20 lines each.\n+\n+        \talgorithm:{text} Use the specified diff algorithm with the\n+        \t\t\tinternal diff engine. Currently supported\n+        \t\t\talgorithms are:\n+        \t\t\tmyers      the default algorithm\n+        \t\t\tminimal    spend extra time to generate the\n+        \t\t\t\t   smallest possible diff\n+        \t\t\tpatience   patience diff algorithm\n+        \t\t\thistogram  histogram diff algorithm\n+\n+        Examples: >\n+        \t:set diffopt=internal,filler,context:4\n+        \t:set diffopt=\n+        \t:set diffopt=internal,filler,foldcolumn:3\n+        \t:set diffopt-=internal  \" do NOT use the internal diff parser\n+        <\n+      ]=],\n+      full_name = 'diffopt',\n+      list = 'onecomma',\n+      redraw = { 'current_window' },\n+      scope = { 'global' },\n+      short_desc = N_('options for using diff mode'),\n+      type = 'string',\n+      varname = 'p_dip',\n+    },\n+    {\n+      abbreviation = 'dg',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Enable the entering of digraphs in Insert mode with {char1} <BS>\n+        {char2}.  See |digraphs|.\n+      ]=],\n+      full_name = 'digraph',\n+      scope = { 'global' },\n+      short_desc = N_('enable the entering of digraphs in Insert mode'),\n+      type = 'bool',\n+      varname = 'p_dg',\n+    },\n+    {\n+      abbreviation = 'dir',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        List of directory names for the swap file, separated with commas.\n+\n+        Possible items:\n+        - The swap file will be created in the first directory where this is\n+          possible.  If it is not possible in any directory, but last\n+          directory listed in the option does not exist, it is created.\n+        - Empty means that no swap file will be used (recovery is\n+          impossible!) and no |E303| error will be given.\n+        - A directory \".\" means to put the swap file in the same directory as\n+          the edited file.  On Unix, a dot is prepended to the file name, so\n+          it doesn't show in a directory listing.  On MS-Windows the \"hidden\"\n+          attribute is set and a dot prepended if possible.\n+        - A directory starting with \"./\" (or \".\\\" for MS-Windows) means to put\n+          the swap file relative to where the edited file is.  The leading \".\"\n+          is replaced with the path name of the edited file.\n+        - For Unix and Win32, if a directory ends in two path separators \"//\",\n+          the swap file name will be built from the complete path to the file\n+          with all path separators replaced by percent '%' signs (including\n+          the colon following the drive letter on Win32). This will ensure\n+          file name uniqueness in the preserve directory.\n+          On Win32, it is also possible to end with \"\\\\\".  However, When a\n+          separating comma is following, you must use \"//\", since \"\\\\\" will\n+          include the comma in the file name. Therefore it is recommended to\n+          use '//', instead of '\\\\'.\n+        - Spaces after the comma are ignored, other spaces are considered part\n+          of the directory name.  To have a space at the start of a directory\n+          name, precede it with a backslash.\n+        - To include a comma in a directory name precede it with a backslash.\n+        - A directory name may end in an ':' or '/'.\n+        - Environment variables are expanded |:set_env|.\n+        - Careful with '\\' characters, type one before a space, type two to\n+          get one in the option (see |option-backslash|), for example: >\n+            :set dir=c:\\\\tmp,\\ dir\\\\,with\\\\,commas,\\\\\\ dir\\ with\\ spaces\n+        <\n+        Editing the same file twice will result in a warning.  Using \"/tmp\" on\n+        is discouraged: if the system crashes you lose the swap file. And\n+        others on the computer may be able to see the files.\n+        Use |:set+=| and |:set-=| when adding or removing directories from the\n+        list, this avoids problems if the Nvim default is changed.\n+\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      expand = 'nodefault',\n+      full_name = 'directory',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_('list of directory names for the swap file'),\n+      type = 'string',\n+      varname = 'p_dir',\n+    },\n+    {\n+      abbreviation = 'dy',\n+      cb = 'did_set_display',\n+      defaults = { if_true = 'lastline' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Change the way text is displayed.  This is a comma-separated list of\n+        flags:\n+        lastline\tWhen included, as much as possible of the last line\n+        \t\tin a window will be displayed.  \"@@@\" is put in the\n+        \t\tlast columns of the last screen line to indicate the\n+        \t\trest of the line is not displayed.\n+        truncate\tLike \"lastline\", but \"@@@\" is displayed in the first\n+        \t\tcolumn of the last screen line.  Overrules \"lastline\".\n+        uhex\t\tShow unprintable characters hexadecimal as <xx>\n+        \t\tinstead of using ^C and ~C.\n+        msgsep\t\tObsolete flag. Allowed but takes no effect. |msgsep|\n+\n+        When neither \"lastline\" nor \"truncate\" is included, a last line that\n+        doesn't fit is replaced with \"@\" lines.\n+\n+        The \"@\" character can be changed by setting the \"lastline\" item in\n+        'fillchars'.  The character is highlighted with |hl-NonText|.\n+      ]=],\n+      full_name = 'display',\n+      list = 'onecomma',\n+      redraw = { 'all_windows' },\n+      scope = { 'global' },\n+      short_desc = N_('list of flags for how to display text'),\n+      type = 'string',\n+      varname = 'p_dy',\n+    },\n+    {\n+      abbreviation = 'ead',\n+      cb = 'did_set_eadirection',\n+      defaults = { if_true = 'both' },\n+      desc = [=[\n+        Tells when the 'equalalways' option applies:\n+        \tver\tvertically, width of windows is not affected\n+        \thor\thorizontally, height of windows is not affected\n+        \tboth\twidth and height of windows is affected\n+      ]=],\n+      full_name = 'eadirection',\n+      scope = { 'global' },\n+      short_desc = N_(\"in which direction 'equalalways' works\"),\n+      type = 'string',\n+      varname = 'p_ead',\n+    },\n+    {\n+      abbreviation = 'ed',\n+      defaults = { if_true = false },\n+      full_name = 'edcompatible',\n+      scope = { 'global' },\n+      short_desc = N_('No description'),\n+      type = 'bool',\n+      varname = 'p_force_off',\n+    },\n+    {\n+      abbreviation = 'emo',\n+      cb = 'did_set_ambiwidth',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        When on all Unicode emoji characters are considered to be full width.\n+        This excludes \"text emoji\" characters, which are normally displayed as\n+        single width.  Unfortunately there is no good specification for this\n+        and it has been determined on trial-and-error basis.  Use the\n+        |setcellwidths()| function to change the behavior.\n+      ]=],\n+      full_name = 'emoji',\n+      redraw = { 'all_windows', 'ui_option' },\n+      scope = { 'global' },\n+      short_desc = N_('No description'),\n+      type = 'bool',\n+      varname = 'p_emoji',\n+    },\n+    {\n+      abbreviation = 'enc',\n+      cb = 'did_set_encoding',\n+      defaults = { if_true = macros('ENC_DFLT') },\n+      deny_in_modelines = true,\n+      desc = [=[\n+        String-encoding used internally and for |RPC| communication.\n+        Always UTF-8.\n+\n+        See 'fileencoding' to control file-content encoding.\n+      ]=],\n+      full_name = 'encoding',\n+      scope = { 'global' },\n+      short_desc = N_('encoding used internally'),\n+      type = 'string',\n+      varname = 'p_enc',\n+    },\n+    {\n+      abbreviation = 'eof',\n+      cb = 'did_set_eof_eol_fixeol_bomb',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Indicates that a CTRL-Z character was found at the end of the file\n+        when reading it.  Normally only happens when 'fileformat' is \"dos\".\n+        When writing a file and this option is off and the 'binary' option\n+        is on, or 'fixeol' option is off, no CTRL-Z will be written at the\n+        end of the file.\n+        See |eol-and-eof| for example settings.\n+      ]=],\n+      full_name = 'endoffile',\n+      no_mkrc = true,\n+      redraw = { 'statuslines' },\n+      scope = { 'buffer' },\n+      short_desc = N_('write CTRL-Z for last line in file'),\n+      type = 'bool',\n+      varname = 'p_eof',\n+    },\n+    {\n+      abbreviation = 'eol',\n+      cb = 'did_set_eof_eol_fixeol_bomb',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        When writing a file and this option is off and the 'binary' option\n+        is on, or 'fixeol' option is off, no <EOL> will be written for the\n+        last line in the file.  This option is automatically set or reset when\n+        starting to edit a new file, depending on whether file has an <EOL>\n+        for the last line in the file.  Normally you don't have to set or\n+        reset this option.\n+        When 'binary' is off and 'fixeol' is on the value is not used when\n+        writing the file.  When 'binary' is on or 'fixeol' is off it is used\n+        to remember the presence of a <EOL> for the last line in the file, so\n+        that when you write the file the situation from the original file can\n+        be kept.  But you can change it if you want to.\n+        See |eol-and-eof| for example settings.\n+      ]=],\n+      full_name = 'endofline',\n+      no_mkrc = true,\n+      redraw = { 'statuslines' },\n+      scope = { 'buffer' },\n+      short_desc = N_('write <EOL> for last line in file'),\n+      type = 'bool',\n+      varname = 'p_eol',\n+    },\n+    {\n+      abbreviation = 'ea',\n+      cb = 'did_set_equalalways',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        When on, all the windows are automatically made the same size after\n+        splitting or closing a window.  This also happens the moment the\n+        option is switched on.  When off, splitting a window will reduce the\n+        size of the current window and leave the other windows the same.  When\n+        closing a window the extra lines are given to the window next to it\n+        (depending on 'splitbelow' and 'splitright').\n+        When mixing vertically and horizontally split windows, a minimal size\n+        is computed and some windows may be larger if there is room.  The\n+        'eadirection' option tells in which direction the size is affected.\n+        Changing the height and width of a window can be avoided by setting\n+        'winfixheight' and 'winfixwidth', respectively.\n+        If a window size is specified when creating a new window sizes are\n+        currently not equalized (it's complicated, but may be implemented in\n+        the future).\n+      ]=],\n+      full_name = 'equalalways',\n+      scope = { 'global' },\n+      short_desc = N_('windows are automatically made the same size'),\n+      type = 'bool',\n+      varname = 'p_ea',\n+    },\n+    {\n+      abbreviation = 'ep',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        External program to use for \"=\" command.  When this option is empty\n+        the internal formatting functions are used; either 'lisp', 'cindent'\n+        or 'indentexpr'.\n+        Environment variables are expanded |:set_env|.  See |option-backslash|\n+        about including spaces and backslashes.\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      expand = true,\n+      full_name = 'equalprg',\n+      scope = { 'global', 'buffer' },\n+      secure = true,\n+      short_desc = N_('external program to use for \"=\" command'),\n+      type = 'string',\n+      varname = 'p_ep',\n+    },\n+    {\n+      abbreviation = 'eb',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Ring the bell (beep or screen flash) for error messages.  This only\n+        makes a difference for error messages, the bell will be used always\n+        for a lot of errors without a message (e.g., hitting <Esc> in Normal\n+        mode).  See 'visualbell' to make the bell behave like a screen flash\n+        or do nothing. See 'belloff' to finetune when to ring the bell.\n+      ]=],\n+      full_name = 'errorbells',\n+      scope = { 'global' },\n+      short_desc = N_('ring the bell for error messages'),\n+      type = 'bool',\n+      varname = 'p_eb',\n+    },\n+    {\n+      abbreviation = 'ef',\n+      defaults = { if_true = macros('DFLT_ERRORFILE') },\n+      desc = [=[\n+        Name of the errorfile for the QuickFix mode (see |:cf|).\n+        When the \"-q\" command-line argument is used, 'errorfile' is set to the\n+        following argument.  See |-q|.\n+        NOT used for the \":make\" command.  See 'makeef' for that.\n+        Environment variables are expanded |:set_env|.\n+        See |option-backslash| about including spaces and backslashes.\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      expand = true,\n+      full_name = 'errorfile',\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_('name of the errorfile for the QuickFix mode'),\n+      type = 'string',\n+      varname = 'p_ef',\n+    },\n+    {\n+      abbreviation = 'efm',\n+      defaults = {\n+        if_true = macros('DFLT_EFM'),\n+        doc = 'is very long',\n+      },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Scanf-like description of the format for the lines in the error file\n+        (see |errorformat|).\n+      ]=],\n+      full_name = 'errorformat',\n+      list = 'onecomma',\n+      scope = { 'global', 'buffer' },\n+      short_desc = N_('description of the lines in the error file'),\n+      type = 'string',\n+      varname = 'p_efm',\n+    },\n+    {\n+      abbreviation = 'ei',\n+      cb = 'did_set_eventignore',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        A list of autocommand event names, which are to be ignored.\n+        When set to \"all\" or when \"all\" is one of the items, all autocommand\n+        events are ignored, autocommands will not be executed.\n+        Otherwise this is a comma-separated list of event names.  Example: >\n+            :set ei=WinEnter,WinLeave\n+        <\n+      ]=],\n+      full_name = 'eventignore',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('autocommand events that are ignored'),\n+      type = 'string',\n+      varname = 'p_ei',\n+    },\n+    {\n+      abbreviation = 'et',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        In Insert mode: Use the appropriate number of spaces to insert a\n+        <Tab>.  Spaces are used in indents with the '>' and '<' commands and\n+        when 'autoindent' is on.  To insert a real tab when 'expandtab' is\n+        on, use CTRL-V<Tab>.  See also |:retab| and |ins-expandtab|.\n+      ]=],\n+      full_name = 'expandtab',\n+      scope = { 'buffer' },\n+      short_desc = N_('use spaces when <Tab> is inserted'),\n+      type = 'bool',\n+      varname = 'p_et',\n+    },\n+    {\n+      abbreviation = 'ex',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Automatically execute .nvim.lua, .nvimrc, and .exrc files in the\n+        current directory, if the file is in the |trust| list. Use |:trust| to\n+        manage trusted files. See also |vim.secure.read()|.\n+\n+        Compare 'exrc' to |editorconfig|:\n+        - 'exrc' can execute any code; editorconfig only specifies settings.\n+        - 'exrc' is Nvim-specific; editorconfig works in other editors.\n+\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      full_name = 'exrc',\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_('read .nvimrc and .exrc in the current directory'),\n+      type = 'bool',\n+      varname = 'p_exrc',\n+    },\n+    {\n+      abbreviation = 'fenc',\n+      alloced = true,\n+      cb = 'did_set_encoding',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        File-content encoding for the current buffer. Conversion is done with\n+        iconv() or as specified with 'charconvert'.\n+\n+        When 'fileencoding' is not UTF-8, conversion will be done when\n+        writing the file.  For reading see below.\n+        When 'fileencoding' is empty, the file will be saved with UTF-8\n+        encoding (no conversion when reading or writing a file).\n+\n+        WARNING: Conversion to a non-Unicode encoding can cause loss of\n+        information!\n+\n+        See |encoding-names| for the possible values.  Additionally, values may be\n+        specified that can be handled by the converter, see\n+        |mbyte-conversion|.\n+\n+        When reading a file 'fileencoding' will be set from 'fileencodings'.\n+        To read a file in a certain encoding it won't work by setting\n+        'fileencoding', use the |++enc| argument.  One exception: when\n+        'fileencodings' is empty the value of 'fileencoding' is used.\n+        For a new file the global value of 'fileencoding' is used.\n+\n+        Prepending \"8bit-\" and \"2byte-\" has no meaning here, they are ignored.\n+        When the option is set, the value is converted to lowercase.  Thus\n+        you can set it with uppercase values too.  '_' characters are\n+        replaced with '-'.  If a name is recognized from the list at\n+        |encoding-names|, it is replaced by the standard name.  For example\n+        \"ISO8859-2\" becomes \"iso-8859-2\".\n+\n+        When this option is set, after starting to edit a file, the 'modified'\n+        option is set, because the file would be different when written.\n+\n+        Keep in mind that changing 'fenc' from a modeline happens\n+        AFTER the text has been read, thus it applies to when the file will be\n+        written.  If you do set 'fenc' in a modeline, you might want to set\n+        'nomodified' to avoid not being able to \":q\".\n+\n+        This option cannot be changed when 'modifiable' is off.\n+      ]=],\n+      full_name = 'fileencoding',\n+      no_mkrc = true,\n+      redraw = { 'statuslines', 'current_buffer' },\n+      scope = { 'buffer' },\n+      short_desc = N_('file encoding for multi-byte text'),\n+      tags = { 'E213' },\n+      type = 'string',\n+      varname = 'p_fenc',\n+    },\n+    {\n+      abbreviation = 'fencs',\n+      defaults = { if_true = 'ucs-bom,utf-8,default,latin1' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        This is a list of character encodings considered when starting to edit\n+        an existing file.  When a file is read, Vim tries to use the first\n+        mentioned character encoding.  If an error is detected, the next one\n+        in the list is tried.  When an encoding is found that works,\n+        'fileencoding' is set to it.  If all fail, 'fileencoding' is set to\n+        an empty string, which means that UTF-8 is used.\n+        \tWARNING: Conversion can cause loss of information! You can use\n+        \tthe |++bad| argument to specify what is done with characters\n+        \tthat can't be converted.\n+        For an empty file or a file with only ASCII characters most encodings\n+        will work and the first entry of 'fileencodings' will be used (except\n+        \"ucs-bom\", which requires the BOM to be present).  If you prefer\n+        another encoding use an BufReadPost autocommand event to test if your\n+        preferred encoding is to be used.  Example: >\n+        \tau BufReadPost * if search('\\S', 'w') == 0 |\n+        \t\t\\ set fenc=iso-2022-jp | endif\n+        <\tThis sets 'fileencoding' to \"iso-2022-jp\" if the file does not contain\n+        non-blank characters.\n+        When the |++enc| argument is used then the value of 'fileencodings' is\n+        not used.\n+        Note that 'fileencodings' is not used for a new file, the global value\n+        of 'fileencoding' is used instead.  You can set it with: >\n+        \t:setglobal fenc=iso-8859-2\n+        <\tThis means that a non-existing file may get a different encoding than\n+        an empty file.\n+        The special value \"ucs-bom\" can be used to check for a Unicode BOM\n+        (Byte Order Mark) at the start of the file.  It must not be preceded\n+        by \"utf-8\" or another Unicode encoding for this to work properly.\n+        An entry for an 8-bit encoding (e.g., \"latin1\") should be the last,\n+        because Vim cannot detect an error, thus the encoding is always\n+        accepted.\n+        The special value \"default\" can be used for the encoding from the\n+        environment.  It is useful when your environment uses a non-latin1\n+        encoding, such as Russian.\n+        When a file contains an illegal UTF-8 byte sequence it won't be\n+        recognized as \"utf-8\".  You can use the |8g8| command to find the\n+        illegal byte sequence.\n+        WRONG VALUES:\t\t\tWHAT'S WRONG:\n+        \tlatin1,utf-8\t\t\"latin1\" will always be used\n+        \tutf-8,ucs-bom,latin1\tBOM won't be recognized in an utf-8\n+        \t\t\t\tfile\n+        \tcp1250,latin1\t\t\"cp1250\" will always be used\n+        If 'fileencodings' is empty, 'fileencoding' is not modified.\n+        See 'fileencoding' for the possible values.\n+        Setting this option does not have an effect until the next time a file\n+        is read.\n+      ]=],\n+      full_name = 'fileencodings',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('automatically detected character encodings'),\n+      type = 'string',\n+      varname = 'p_fencs',\n+    },\n+    {\n+      abbreviation = 'ff',\n+      alloced = true,\n+      cb = 'did_set_fileformat',\n+      defaults = {\n+        if_true = macros('DFLT_FF'),\n+        doc = 'Windows: \"dos\", Unix: \"unix\"',\n+      },\n+      desc = [=[\n+        This gives the <EOL> of the current buffer, which is used for\n+        reading/writing the buffer from/to a file:\n+            dos\t    <CR><NL>\n+            unix    <NL>\n+            mac\t    <CR>\n+        When \"dos\" is used, CTRL-Z at the end of a file is ignored.\n+        See |file-formats| and |file-read|.\n+        For the character encoding of the file see 'fileencoding'.\n+        When 'binary' is set, the value of 'fileformat' is ignored, file I/O\n+        works like it was set to \"unix\".\n+        This option is set automatically when starting to edit a file and\n+        'fileformats' is not empty and 'binary' is off.\n+        When this option is set, after starting to edit a file, the 'modified'\n+        option is set, because the file would be different when written.\n+        This option cannot be changed when 'modifiable' is off.\n+      ]=],\n+      full_name = 'fileformat',\n+      no_mkrc = true,\n+      redraw = { 'curswant', 'statuslines' },\n+      scope = { 'buffer' },\n+      short_desc = N_('file format used for file I/O'),\n+      type = 'string',\n+      varname = 'p_ff',\n+    },\n+    {\n+      abbreviation = 'ffs',\n+      cb = 'did_set_fileformats',\n+      defaults = {\n+        if_true = macros('DFLT_FFS_VIM'),\n+        doc = 'Windows: \"dos,unix\", Unix: \"unix,dos\"',\n+      },\n+      deny_duplicates = true,\n+      desc = [=[\n+        This gives the end-of-line (<EOL>) formats that will be tried when\n+        starting to edit a new buffer and when reading a file into an existing\n+        buffer:\n+        - When empty, the format defined with 'fileformat' will be used\n+          always.  It is not set automatically.\n+        - When set to one name, that format will be used whenever a new buffer\n+          is opened.  'fileformat' is set accordingly for that buffer.  The\n+          'fileformats' name will be used when a file is read into an existing\n+          buffer, no matter what 'fileformat' for that buffer is set to.\n+        - When more than one name is present, separated by commas, automatic\n+          <EOL> detection will be done when reading a file.  When starting to\n+          edit a file, a check is done for the <EOL>:\n+          1. If all lines end in <CR><NL>, and 'fileformats' includes \"dos\",\n+             'fileformat' is set to \"dos\".\n+          2. If a <NL> is found and 'fileformats' includes \"unix\", 'fileformat'\n+             is set to \"unix\".  Note that when a <NL> is found without a\n+             preceding <CR>, \"unix\" is preferred over \"dos\".\n+          3. If 'fileformat' has not yet been set, and if a <CR> is found, and\n+             if 'fileformats' includes \"mac\", 'fileformat' is set to \"mac\".\n+             This means that \"mac\" is only chosen when:\n+              \"unix\" is not present or no <NL> is found in the file, and\n+              \"dos\" is not present or no <CR><NL> is found in the file.\n+             Except: if \"unix\" was chosen, but there is a <CR> before\n+             the first <NL>, and there appear to be more <CR>s than <NL>s in\n+             the first few lines, \"mac\" is used.\n+          4. If 'fileformat' is still not set, the first name from\n+             'fileformats' is used.\n+          When reading a file into an existing buffer, the same is done, but\n+          this happens like 'fileformat' has been set appropriately for that\n+          file only, the option is not changed.\n+        When 'binary' is set, the value of 'fileformats' is not used.\n+\n+        When Vim starts up with an empty buffer the first item is used.  You\n+        can overrule this by setting 'fileformat' in your .vimrc.\n+\n+        For systems with a Dos-like <EOL> (<CR><NL>), when reading files that\n+        are \":source\"ed and for vimrc files, automatic <EOL> detection may be\n+        done:\n+        - When 'fileformats' is empty, there is no automatic detection.  Dos\n+          format will be used.\n+        - When 'fileformats' is set to one or more names, automatic detection\n+          is done.  This is based on the first <NL> in the file: If there is a\n+          <CR> in front of it, Dos format is used, otherwise Unix format is\n+          used.\n+        Also see |file-formats|.\n+      ]=],\n+      full_name = 'fileformats',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_(\"automatically detected values for 'fileformat'\"),\n+      type = 'string',\n+      varname = 'p_ffs',\n+    },\n+    {\n+      abbreviation = 'fic',\n+      defaults = {\n+        condition = 'CASE_INSENSITIVE_FILENAME',\n+        if_false = false,\n+        if_true = true,\n+        doc = [[on for systems where case in file\n+   names is normally ignored]],\n+      },\n+      desc = [=[\n+        When set case is ignored when using file names and directories.\n+        See 'wildignorecase' for only ignoring case when doing completion.\n+      ]=],\n+      full_name = 'fileignorecase',\n+      scope = { 'global' },\n+      short_desc = N_('ignore case when using file names'),\n+      type = 'bool',\n+      varname = 'p_fic',\n+    },\n+    {\n+      abbreviation = 'ft',\n+      alloced = true,\n+      cb = 'did_set_filetype_or_syntax',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        When this option is set, the FileType autocommand event is triggered.\n+        All autocommands that match with the value of this option will be\n+        executed.  Thus the value of 'filetype' is used in place of the file\n+        name.\n+        Otherwise this option does not always reflect the current file type.\n+        This option is normally set when the file type is detected.  To enable\n+        this use the \":filetype on\" command. |:filetype|\n+        Setting this option to a different value is most useful in a modeline,\n+        for a file for which the file type is not automatically recognized.\n+        Example, for in an IDL file: >\n+        \t/* vim: set filetype=idl : */\n+        <\t|FileType| |filetypes|\n+        When a dot appears in the value then this separates two filetype\n+        names.  Example: >\n+        \t/* vim: set filetype=c.doxygen : */\n+        <\tThis will use the \"c\" filetype first, then the \"doxygen\" filetype.\n+        This works both for filetype plugins and for syntax files.  More than\n+        one dot may appear.\n+        This option is not copied to another buffer, independent of the 's' or\n+        'S' flag in 'cpoptions'.\n+        Only normal file name characters can be used, `/\\*?[|<>` are illegal.\n+      ]=],\n+      expand = true,\n+      full_name = 'filetype',\n+      noglob = true,\n+      normal_fname_chars = true,\n+      scope = { 'buffer' },\n+      short_desc = N_('type of file, used for autocommands'),\n+      type = 'string',\n+      varname = 'p_ft',\n+    },\n+    {\n+      abbreviation = 'fcs',\n+      alloced = true,\n+      cb = 'did_set_chars_option',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Characters to fill the statuslines, vertical separators and special\n+        lines in the window.\n+        It is a comma-separated list of items.  Each item has a name, a colon\n+        and the value of that item:\n+\n+          item\t\tdefault\t\tUsed for ~\n+          stl\t\t' ' or '^'\tstatusline of the current window\n+          stlnc\t\t' ' or '='\tstatusline of the non-current windows\n+          wbr\t\t' '\t\twindow bar\n+          horiz\t\t'─' or '-'\thorizontal separators |:split|\n+          horizup\t'┴' or '-'\tupwards facing horizontal separator\n+          horizdown\t'┬' or '-'\tdownwards facing horizontal separator\n+          vert\t\t'│' or '|'\tvertical separators |:vsplit|\n+          vertleft\t'┤' or '|'\tleft facing vertical separator\n+          vertright\t'├' or '|'\tright facing vertical separator\n+          verthoriz\t'┼' or '+'\toverlapping vertical and horizontal\n+        \t\t\t\tseparator\n+          fold\t\t'·' or '-'\tfilling 'foldtext'\n+          foldopen\t'-'\t\tmark the beginning of a fold\n+          foldclose\t'+'\t\tshow a closed fold\n+          foldsep\t'│' or '|'      open fold middle marker\n+          diff\t\t'-'\t\tdeleted lines of the 'diff' option\n+          msgsep\t' '\t\tmessage separator 'display'\n+          eob\t\t'~'\t\tempty lines at the end of a buffer\n+          lastline\t'@'\t\t'display' contains lastline/truncate\n+\n+        Any one that is omitted will fall back to the default.  For \"stl\" and\n+        \"stlnc\" the space will be used when there is highlighting, '^' or '='\n+        otherwise.\n+\n+        Note that \"horiz\", \"horizup\", \"horizdown\", \"vertleft\", \"vertright\" and\n+        \"verthoriz\" are only used when 'laststatus' is 3, since only vertical\n+        window separators are used otherwise.\n+\n+        If 'ambiwidth' is \"double\" then \"horiz\", \"horizup\", \"horizdown\",\n+        \"vert\", \"vertleft\", \"vertright\", \"verthoriz\", \"foldsep\" and \"fold\"\n+        default to single-byte alternatives.\n+\n+        Example: >\n+            :set fillchars=stl:^,stlnc:=,vert:│,fold:·,diff:-\n+        <\tThis is similar to the default, except that these characters will also\n+        be used when there is highlighting.\n+\n+        For the \"stl\", \"stlnc\", \"foldopen\", \"foldclose\" and \"foldsep\" items\n+        single-byte and multibyte characters are supported.  But double-width\n+        characters are not supported.\n+\n+        The highlighting used for these items:\n+          item\t\thighlight group ~\n+          stl\t\tStatusLine\t\t|hl-StatusLine|\n+          stlnc\t\tStatusLineNC\t\t|hl-StatusLineNC|\n+          wbr\t\tWinBar\t\t\t|hl-WinBar| or |hl-WinBarNC|\n+          horiz\t\tWinSeparator\t\t|hl-WinSeparator|\n+          horizup\tWinSeparator\t\t|hl-WinSeparator|\n+          horizdown\tWinSeparator\t\t|hl-WinSeparator|\n+          vert\t\tWinSeparator\t\t|hl-WinSeparator|\n+          vertleft\tWinSeparator\t\t|hl-WinSeparator|\n+          vertright\tWinSeparator\t\t|hl-WinSeparator|\n+          verthoriz\tWinSeparator\t\t|hl-WinSeparator|\n+          fold\t\tFolded\t\t\t|hl-Folded|\n+          diff\t\tDiffDelete\t\t|hl-DiffDelete|\n+          eob\t\tEndOfBuffer\t\t|hl-EndOfBuffer|\n+          lastline\tNonText\t\t\t|hl-NonText|\n+      ]=],\n+      full_name = 'fillchars',\n+      list = 'onecomma',\n+      redraw = { 'current_window' },\n+      scope = { 'global', 'window' },\n+      short_desc = N_('characters to use for displaying special items'),\n+      type = 'string',\n+      varname = 'p_fcs',\n+    },\n+    {\n+      abbreviation = 'fixeol',\n+      cb = 'did_set_eof_eol_fixeol_bomb',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        When writing a file and this option is on, <EOL> at the end of file\n+        will be restored if missing.  Turn this option off if you want to\n+        preserve the situation from the original file.\n+        When the 'binary' option is set the value of this option doesn't\n+        matter.\n+        See the 'endofline' option.\n+        See |eol-and-eof| for example settings.\n+      ]=],\n+      full_name = 'fixendofline',\n+      redraw = { 'statuslines' },\n+      scope = { 'buffer' },\n+      short_desc = N_('make sure last line in file has <EOL>'),\n+      type = 'bool',\n+      varname = 'p_fixeol',\n+    },\n+    {\n+      abbreviation = 'fcl',\n+      cb = 'did_set_foldclose',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        When set to \"all\", a fold is closed when the cursor isn't in it and\n+        its level is higher than 'foldlevel'.  Useful if you want folds to\n+        automatically close when moving out of them.\n+      ]=],\n+      full_name = 'foldclose',\n+      list = 'onecomma',\n+      redraw = { 'current_window' },\n+      scope = { 'global' },\n+      short_desc = N_('close a fold when the cursor leaves it'),\n+      type = 'string',\n+      varname = 'p_fcl',\n+    },\n+    {\n+      abbreviation = 'fdc',\n+      alloced = true,\n+      cb = 'did_set_foldcolumn',\n+      defaults = { if_true = '0' },\n+      desc = [=[\n+        When and how to draw the foldcolumn. Valid values are:\n+            \"auto\":       resize to the minimum amount of folds to display.\n+            \"auto:[1-9]\": resize to accommodate multiple folds up to the\n+        \t\t  selected level\n+            0:            to disable foldcolumn\n+            \"[1-9]\":      to display a fixed number of columns\n+        See |folding|.\n+      ]=],\n+      full_name = 'foldcolumn',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('width of the column used to indicate folds'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'fen',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        When off, all folds are open.  This option can be used to quickly\n+        switch between showing all text unfolded and viewing the text with\n+        folds (including manually opened or closed folds).  It can be toggled\n+        with the |zi| command.  The 'foldcolumn' will remain blank when\n+        'foldenable' is off.\n+        This option is set by commands that create a new fold or close a fold.\n+        See |folding|.\n+      ]=],\n+      full_name = 'foldenable',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('set to display all folds open'),\n+      type = 'bool',\n+    },\n+    {\n+      abbreviation = 'fde',\n+      alloced = true,\n+      cb = 'did_set_foldexpr',\n+      defaults = { if_true = '0' },\n+      desc = [=[\n+        The expression used for when 'foldmethod' is \"expr\".  It is evaluated\n+        for each line to obtain its fold level.  The context is set to the\n+        script where 'foldexpr' was set, script-local items can be accessed.\n+        See |fold-expr| for the usage.\n+\n+        The expression will be evaluated in the |sandbox| if set from a\n+        modeline, see |sandbox-option|.\n+        This option can't be set from a |modeline| when the 'diff' option is\n+        on or the 'modelineexpr' option is off.\n+\n+        It is not allowed to change text or jump to another window while\n+        evaluating 'foldexpr' |textlock|.\n+      ]=],\n+      full_name = 'foldexpr',\n+      modelineexpr = true,\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('expression used when \\'foldmethod\\' is \"expr\"'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'fdi',\n+      alloced = true,\n+      cb = 'did_set_foldignore',\n+      defaults = { if_true = '#' },\n+      desc = [=[\n+        Used only when 'foldmethod' is \"indent\".  Lines starting with\n+        characters in 'foldignore' will get their fold level from surrounding\n+        lines.  White space is skipped before checking for this character.\n+        The default \"#\" works well for C programs.  See |fold-indent|.\n+      ]=],\n+      full_name = 'foldignore',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('ignore lines when \\'foldmethod\\' is \"indent\"'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'fdl',\n+      cb = 'did_set_foldlevel',\n+      defaults = { if_true = 0 },\n+      desc = [=[\n+        Sets the fold level: Folds with a higher level will be closed.\n+        Setting this option to zero will close all folds.  Higher numbers will\n+        close fewer folds.\n+        This option is set by commands like |zm|, |zM| and |zR|.\n+        See |fold-foldlevel|.\n+      ]=],\n+      full_name = 'foldlevel',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('close folds with a level higher than this'),\n+      type = 'number',\n+    },\n+    {\n+      abbreviation = 'fdls',\n+      defaults = { if_true = -1 },\n+      desc = [=[\n+        Sets 'foldlevel' when starting to edit another buffer in a window.\n+        Useful to always start editing with all folds closed (value zero),\n+        some folds closed (one) or no folds closed (99).\n+        This is done before reading any modeline, thus a setting in a modeline\n+        overrules this option.  Starting to edit a file for |diff-mode| also\n+        ignores this option and closes all folds.\n+        It is also done before BufReadPre autocommands, to allow an autocmd to\n+        overrule the 'foldlevel' value for specific files.\n+        When the value is negative, it is not used.\n+      ]=],\n+      full_name = 'foldlevelstart',\n+      redraw = { 'curswant' },\n+      scope = { 'global' },\n+      short_desc = N_(\"'foldlevel' when starting to edit a file\"),\n+      type = 'number',\n+      varname = 'p_fdls',\n+    },\n+    {\n+      abbreviation = 'fmr',\n+      alloced = true,\n+      cb = 'did_set_foldmarker',\n+      defaults = { if_true = '{{{,}}}' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        The start and end marker used when 'foldmethod' is \"marker\".  There\n+        must be one comma, which separates the start and end marker.  The\n+        marker is a literal string (a regular expression would be too slow).\n+        See |fold-marker|.\n+      ]=],\n+      full_name = 'foldmarker',\n+      list = 'onecomma',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('markers used when \\'foldmethod\\' is \"marker\"'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'fdm',\n+      alloced = true,\n+      cb = 'did_set_foldmethod',\n+      defaults = { if_true = 'manual' },\n+      desc = [=[\n+        The kind of folding used for the current window.  Possible values:\n+        |fold-manual|\tmanual\t    Folds are created manually.\n+        |fold-indent|\tindent\t    Lines with equal indent form a fold.\n+        |fold-expr|\texpr\t    'foldexpr' gives the fold level of a line.\n+        |fold-marker|\tmarker\t    Markers are used to specify folds.\n+        |fold-syntax|\tsyntax\t    Syntax highlighting items specify folds.\n+        |fold-diff|\tdiff\t    Fold text that is not changed.\n+      ]=],\n+      full_name = 'foldmethod',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('folding type'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'fml',\n+      cb = 'did_set_foldminlines',\n+      defaults = { if_true = 1 },\n+      desc = [=[\n+        Sets the number of screen lines above which a fold can be displayed\n+        closed.  Also for manually closed folds.  With the default value of\n+        one a fold can only be closed if it takes up two or more screen lines.\n+        Set to zero to be able to close folds of just one screen line.\n+        Note that this only has an effect on what is displayed.  After using\n+        \"zc\" to close a fold, which is displayed open because it's smaller\n+        than 'foldminlines', a following \"zc\" may close a containing fold.\n+      ]=],\n+      full_name = 'foldminlines',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('minimum number of lines for a fold to be closed'),\n+      type = 'number',\n+    },\n+    {\n+      abbreviation = 'fdn',\n+      cb = 'did_set_foldnestmax',\n+      defaults = { if_true = 20 },\n+      desc = [=[\n+        Sets the maximum nesting of folds for the \"indent\" and \"syntax\"\n+        methods.  This avoids that too many folds will be created.  Using more\n+        than 20 doesn't work, because the internal limit is 20.\n+      ]=],\n+      full_name = 'foldnestmax',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('maximum fold depth'),\n+      type = 'number',\n+    },\n+    {\n+      abbreviation = 'fdo',\n+      cb = 'did_set_foldopen',\n+      defaults = { if_true = 'block,hor,mark,percent,quickfix,search,tag,undo' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Specifies for which type of commands folds will be opened, if the\n+        command moves the cursor into a closed fold.  It is a comma-separated\n+        list of items.\n+        NOTE: When the command is part of a mapping this option is not used.\n+        Add the |zv| command to the mapping to get the same effect.\n+        (rationale: the mapping may want to control opening folds itself)\n+\n+        \titem\t\tcommands ~\n+        \tall\t\tany\n+        \tblock\t\t(, {, [[, [{, etc.\n+        \thor\t\thorizontal movements: \"l\", \"w\", \"fx\", etc.\n+        \tinsert\t\tany command in Insert mode\n+        \tjump\t\tfar jumps: \"G\", \"gg\", etc.\n+        \tmark\t\tjumping to a mark: \"'m\", CTRL-O, etc.\n+        \tpercent\t\t\"%\"\n+        \tquickfix\t\":cn\", \":crew\", \":make\", etc.\n+        \tsearch\t\tsearch for a pattern: \"/\", \"n\", \"*\", \"gd\", etc.\n+        \t\t\t(not for a search pattern in a \":\" command)\n+        \t\t\tAlso for |[s| and |]s|.\n+        \ttag\t\tjumping to a tag: \":ta\", CTRL-T, etc.\n+        \tundo\t\tundo or redo: \"u\" and CTRL-R\n+        When a movement command is used for an operator (e.g., \"dl\" or \"y%\")\n+        this option is not used.  This means the operator will include the\n+        whole closed fold.\n+        Note that vertical movements are not here, because it would make it\n+        very difficult to move onto a closed fold.\n+        In insert mode the folds containing the cursor will always be open\n+        when text is inserted.\n+        To close folds you can re-apply 'foldlevel' with the |zx| command or\n+        set the 'foldclose' option to \"all\".\n+      ]=],\n+      full_name = 'foldopen',\n+      list = 'onecomma',\n+      redraw = { 'curswant' },\n+      scope = { 'global' },\n+      short_desc = N_('for which commands a fold will be opened'),\n+      type = 'string',\n+      varname = 'p_fdo',\n+    },\n+    {\n+      abbreviation = 'fdt',\n+      alloced = true,\n+      cb = 'did_set_optexpr',\n+      defaults = { if_true = 'foldtext()' },\n+      desc = [=[\n+        An expression which is used to specify the text displayed for a closed\n+        fold.  The context is set to the script where 'foldexpr' was set,\n+        script-local items can be accessed.  See |fold-foldtext| for the\n+        usage.\n+\n+        The expression will be evaluated in the |sandbox| if set from a\n+        modeline, see |sandbox-option|.\n+        This option cannot be set in a modeline when 'modelineexpr' is off.\n+\n+        It is not allowed to change text or jump to another window while\n+        evaluating 'foldtext' |textlock|.\n+      ]=],\n+      full_name = 'foldtext',\n+      modelineexpr = true,\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('expression used to display for a closed fold'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'fex',\n+      alloced = true,\n+      cb = 'did_set_optexpr',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        Expression which is evaluated to format a range of lines for the |gq|\n+        operator or automatic formatting (see 'formatoptions').  When this\n+        option is empty 'formatprg' is used.\n+\n+        The |v:lnum|  variable holds the first line to be formatted.\n+        The |v:count| variable holds the number of lines to be formatted.\n+        The |v:char|  variable holds the character that is going to be\n+        \t      inserted if the expression is being evaluated due to\n+        \t      automatic formatting.  This can be empty.  Don't insert\n+        \t      it yet!\n+\n+        Example: >\n+        \t:set formatexpr=mylang#Format()\n+        <\tThis will invoke the mylang#Format() function in the\n+        autoload/mylang.vim file in 'runtimepath'. |autoload|\n+\n+        The expression is also evaluated when 'textwidth' is set and adding\n+        text beyond that limit.  This happens under the same conditions as\n+        when internal formatting is used.  Make sure the cursor is kept in the\n+        same spot relative to the text then!  The |mode()| function will\n+        return \"i\" or \"R\" in this situation.\n+\n+        When the expression evaluates to non-zero Vim will fall back to using\n+        the internal format mechanism.\n+\n+        If the expression starts with s: or |<SID>|, then it is replaced with\n+        the script ID (|local-function|). Example: >\n+        \tset formatexpr=s:MyFormatExpr()\n+        \tset formatexpr=<SID>SomeFormatExpr()\n+        <\tOtherwise, the expression is evaluated in the context of the script\n+        where the option was set, thus script-local items are available.\n+\n+        The expression will be evaluated in the |sandbox| when set from a\n+        modeline, see |sandbox-option|.  That stops the option from working,\n+        since changing the buffer text is not allowed.\n+        This option cannot be set in a modeline when 'modelineexpr' is off.\n+        NOTE: This option is set to \"\" when 'compatible' is set.\n+      ]=],\n+      full_name = 'formatexpr',\n+      modelineexpr = true,\n+      scope = { 'buffer' },\n+      short_desc = N_('expression used with \"gq\" command'),\n+      type = 'string',\n+      varname = 'p_fex',\n+    },\n+    {\n+      abbreviation = 'fo',\n+      alloced = true,\n+      cb = 'did_set_formatoptions',\n+      defaults = { if_true = macros('DFLT_FO_VIM') },\n+      desc = [=[\n+        This is a sequence of letters which describes how automatic\n+        formatting is to be done.  See |fo-table|.  Commas can be inserted for\n+        readability.\n+        To avoid problems with flags that are added in the future, use the\n+        \"+=\" and \"-=\" feature of \":set\" |add-option-flags|.\n+      ]=],\n+      full_name = 'formatoptions',\n+      list = 'flags',\n+      scope = { 'buffer' },\n+      short_desc = N_('how automatic formatting is to be done'),\n+      type = 'string',\n+      varname = 'p_fo',\n+    },\n+    {\n+      abbreviation = 'flp',\n+      alloced = true,\n+      defaults = { if_true = '^\\\\s*\\\\d\\\\+[\\\\]:.)}\\\\t ]\\\\s*' },\n+      desc = [=[\n+        A pattern that is used to recognize a list header.  This is used for\n+        the \"n\" flag in 'formatoptions'.\n+        The pattern must match exactly the text that will be the indent for\n+        the line below it.  You can use |/\\ze| to mark the end of the match\n+        while still checking more characters.  There must be a character\n+        following the pattern, when it matches the whole line it is handled\n+        like there is no match.\n+        The default recognizes a number, followed by an optional punctuation\n+        character and white space.\n+      ]=],\n+      full_name = 'formatlistpat',\n+      scope = { 'buffer' },\n+      short_desc = N_('pattern used to recognize a list header'),\n+      type = 'string',\n+      varname = 'p_flp',\n+    },\n+    {\n+      abbreviation = 'fp',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        The name of an external program that will be used to format the lines\n+        selected with the |gq| operator.  The program must take the input on\n+        stdin and produce the output on stdout.  The Unix program \"fmt\" is\n+        such a program.\n+        If the 'formatexpr' option is not empty it will be used instead.\n+        Otherwise, if 'formatprg' option is an empty string, the internal\n+        format function will be used |C-indenting|.\n+        Environment variables are expanded |:set_env|.  See |option-backslash|\n+        about including spaces and backslashes.\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      expand = true,\n+      full_name = 'formatprg',\n+      scope = { 'global', 'buffer' },\n+      secure = true,\n+      short_desc = N_('name of external program used with \"gq\" command'),\n+      type = 'string',\n+      varname = 'p_fp',\n+    },\n+    {\n+      abbreviation = 'fs',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        When on, the OS function fsync() will be called after saving a file\n+        (|:write|, |writefile()|, …), |swap-file|, |undo-persistence| and |shada-file|.\n+        This flushes the file to disk, ensuring that it is safely written.\n+        Slow on some systems: writing buffers, quitting Nvim, and other\n+        operations may sometimes take a few seconds.\n+\n+        Files are ALWAYS flushed ('fsync' is ignored) when:\n+        - |CursorHold| event is triggered\n+        - |:preserve| is called\n+        - system signals low battery life\n+        - Nvim exits abnormally\n+\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      full_name = 'fsync',\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_('whether to invoke fsync() after file write'),\n+      type = 'bool',\n+      varname = 'p_fs',\n+    },\n+    {\n+      abbreviation = 'gd',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        When on, the \":substitute\" flag 'g' is default on.  This means that\n+        all matches in a line are substituted instead of one.  When a 'g' flag\n+        is given to a \":substitute\" command, this will toggle the substitution\n+        of all or one match.  See |complex-change|.\n+\n+        \tcommand\t\t'gdefault' on\t'gdefault' off\t~\n+        \t:s///\t\t  subst. all\t  subst. one\n+        \t:s///g\t\t  subst. one\t  subst. all\n+        \t:s///gg\t\t  subst. all\t  subst. one\n+\n+        DEPRECATED: Setting this option may break plugins that are not aware\n+        of this option.  Also, many users get confused that adding the /g flag\n+        has the opposite effect of that it normally does.\n+      ]=],\n+      full_name = 'gdefault',\n+      scope = { 'global' },\n+      short_desc = N_('the \":substitute\" flag \\'g\\' is default on'),\n+      type = 'bool',\n+      varname = 'p_gd',\n+    },\n+    {\n+      abbreviation = 'gfm',\n+      defaults = { if_true = macros('DFLT_GREPFORMAT') },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Format to recognize for the \":grep\" command output.\n+        This is a scanf-like string that uses the same format as the\n+        'errorformat' option: see |errorformat|.\n+      ]=],\n+      full_name = 'grepformat',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_(\"format of 'grepprg' output\"),\n+      type = 'string',\n+      varname = 'p_gefm',\n+    },\n+    {\n+      abbreviation = 'gp',\n+      defaults = {\n+        condition = 'MSWIN',\n+        if_false = 'grep -n $* /dev/null',\n+        if_true = 'findstr /n $* nul',\n+        doc = [[\"grep -n \",\n+           Unix: \"grep -n $* /dev/null\"]],\n+      },\n+      desc = [=[\n+        Program to use for the |:grep| command.  This option may contain '%'\n+        and '#' characters, which are expanded like when used in a command-\n+        line.  The placeholder \"$*\" is allowed to specify where the arguments\n+        will be included.  Environment variables are expanded |:set_env|.  See\n+        |option-backslash| about including spaces and backslashes.\n+        When your \"grep\" accepts the \"-H\" argument, use this to make \":grep\"\n+        also work well with a single file: >\n+        \t:set grepprg=grep\\ -nH\n+        <\tSpecial value: When 'grepprg' is set to \"internal\" the |:grep| command\n+        works like |:vimgrep|, |:lgrep| like |:lvimgrep|, |:grepadd| like\n+        |:vimgrepadd| and |:lgrepadd| like |:lvimgrepadd|.\n+        See also the section |:make_makeprg|, since most of the comments there\n+        apply equally to 'grepprg'.\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      expand = true,\n+      full_name = 'grepprg',\n+      scope = { 'global', 'buffer' },\n+      secure = true,\n+      short_desc = N_('program to use for \":grep\"'),\n+      type = 'string',\n+      varname = 'p_gp',\n+    },\n+    {\n+      abbreviation = 'gcr',\n+      cb = 'did_set_guicursor',\n+      defaults = { if_true = 'n-v-c-sm:block,i-ci-ve:ver25,r-cr-o:hor20' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Configures the cursor style for each mode. Works in the GUI and many\n+        terminals.  See |tui-cursor-shape|.\n+\n+        To disable cursor-styling, reset the option: >\n+        \t:set guicursor=\n+\n+        <\tTo enable mode shapes, \"Cursor\" highlight, and blinking: >\n+        \t:set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50\n+        \t  \\,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor\n+        \t  \\,sm:block-blinkwait175-blinkoff150-blinkon175\n+\n+        <\tThe option is a comma-separated list of parts.  Each part consists of a\n+        mode-list and an argument-list:\n+        \tmode-list:argument-list,mode-list:argument-list,..\n+        The mode-list is a dash separated list of these modes:\n+        \tn\tNormal mode\n+        \tv\tVisual mode\n+        \tve\tVisual mode with 'selection' \"exclusive\" (same as 'v',\n+        \t\tif not specified)\n+        \to\tOperator-pending mode\n+        \ti\tInsert mode\n+        \tr\tReplace mode\n+        \tc\tCommand-line Normal (append) mode\n+        \tci\tCommand-line Insert mode\n+        \tcr\tCommand-line Replace mode\n+        \tsm\tshowmatch in Insert mode\n+        \ta\tall modes\n+        The argument-list is a dash separated list of these arguments:\n+        \thor{N}\thorizontal bar, {N} percent of the character height\n+        \tver{N}\tvertical bar, {N} percent of the character width\n+        \tblock\tblock cursor, fills the whole character\n+        \t\t- Only one of the above three should be present.\n+        \t\t- Default is \"block\" for each mode.\n+        \tblinkwait{N}\t\t\t\t*cursor-blinking*\n+        \tblinkon{N}\n+        \tblinkoff{N}\n+        \t\tblink times for cursor: blinkwait is the delay before\n+        \t\tthe cursor starts blinking, blinkon is the time that\n+        \t\tthe cursor is shown and blinkoff is the time that the\n+        \t\tcursor is not shown.  Times are in msec.  When one of\n+        \t\tthe numbers is zero, there is no blinking. E.g.: >\n+        \t\t\t:set guicursor=n:blinkon0\n+        <\t\t\t- Default is \"blinkon0\" for each mode.\n+        \t{group-name}\n+        \t\tHighlight group that decides the color and font of the\n+        \t\tcursor.\n+        \t\tIn the |TUI|:\n+        \t\t- |inverse|/reverse and no group-name are interpreted\n+        \t\t  as \"host-terminal default cursor colors\" which\n+        \t\t  typically means \"inverted bg and fg colors\".\n+        \t\t- |ctermfg| and |guifg| are ignored.\n+        \t{group-name}/{group-name}\n+        \t\tTwo highlight group names, the first is used when\n+        \t\tno language mappings are used, the other when they\n+        \t\tare. |language-mapping|\n+\n+        Examples of parts:\n+           n-c-v:block-nCursor\tIn Normal, Command-line and Visual mode, use a\n+        \t\t\tblock cursor with colors from the \"nCursor\"\n+        \t\t\thighlight group\n+           n-v-c-sm:block,i-ci-ve:ver25-Cursor,r-cr-o:hor20\n+        \t\t\tIn Normal et al. modes, use a block cursor\n+        \t\t\twith the default colors defined by the host\n+        \t\t\tterminal.  In Insert-likes modes, use\n+        \t\t\ta vertical bar cursor with colors from\n+        \t\t\t\"Cursor\" highlight group.  In Replace-likes\n+        \t\t\tmodes, use a underline cursor with\n+        \t\t\tdefault colors.\n+           i-ci:ver30-iCursor-blinkwait300-blinkon200-blinkoff150\n+        \t\t\tIn Insert and Command-line Insert mode, use a\n+        \t\t\t30% vertical bar cursor with colors from the\n+        \t\t\t\"iCursor\" highlight group.  Blink a bit\n+        \t\t\tfaster.\n+\n+        The 'a' mode is different.  It will set the given argument-list for\n+        all modes.  It does not reset anything to defaults.  This can be used\n+        to do a common setting for all modes.  For example, to switch off\n+        blinking: \"a:blinkon0\"\n+\n+        Examples of cursor highlighting: >\n+            :highlight Cursor gui=reverse guifg=NONE guibg=NONE\n+            :highlight Cursor gui=NONE guifg=bg guibg=fg\n+        <\n+      ]=],\n+      full_name = 'guicursor',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('GUI: settings for cursor shape and blinking'),\n+      tags = { 'E545', 'E546', 'E548', 'E549' },\n+      type = 'string',\n+      varname = 'p_guicursor',\n+    },\n+    {\n+      abbreviation = 'gfn',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        This is a list of fonts which will be used for the GUI version of Vim.\n+        In its simplest form the value is just one font name.  When\n+        the font cannot be found you will get an error message.  To try other\n+        font names a list can be specified, font names separated with commas.\n+        The first valid font is used.\n+\n+        Spaces after a comma are ignored.  To include a comma in a font name\n+        precede it with a backslash.  Setting an option requires an extra\n+        backslash before a space and a backslash.  See also\n+        |option-backslash|.  For example: >\n+            :set guifont=Screen15,\\ 7x13,font\\\\,with\\\\,commas\n+        <\twill make Vim try to use the font \"Screen15\" first, and if it fails it\n+        will try to use \"7x13\" and then \"font,with,commas\" instead.\n+\n+        If none of the fonts can be loaded, Vim will keep the current setting.\n+        If an empty font list is given, Vim will try using other resource\n+        settings (for X, it will use the Vim.font resource), and finally it\n+        will try some builtin default which should always be there (\"7x13\" in\n+        the case of X).  The font names given should be \"normal\" fonts.  Vim\n+        will try to find the related bold and italic fonts.\n+\n+        For Win32 and Mac OS: >\n+            :set guifont=*\n+        <\twill bring up a font requester, where you can pick the font you want.\n+\n+        The font name depends on the GUI used.\n+\n+        For Mac OSX you can use something like this: >\n+            :set guifont=Monaco:h10\n+        <\t\t\t\t\t\t\t\t*E236*\n+        Note that the fonts must be mono-spaced (all characters have the same\n+        width).\n+\n+        To preview a font on X11, you might be able to use the \"xfontsel\"\n+        program.  The \"xlsfonts\" program gives a list of all available fonts.\n+\n+        For the Win32 GUI\t\t\t\t\t*E244* *E245*\n+        - takes these options in the font name:\n+        \thXX - height is XX (points, can be floating-point)\n+        \twXX - width is XX (points, can be floating-point)\n+        \tb   - bold\n+        \ti   - italic\n+        \tu   - underline\n+        \ts   - strikeout\n+        \tcXX - character set XX.  Valid charsets are: ANSI, ARABIC,\n+        \t      BALTIC, CHINESEBIG5, DEFAULT, EASTEUROPE, GB2312, GREEK,\n+        \t      HANGEUL, HEBREW, JOHAB, MAC, OEM, RUSSIAN, SHIFTJIS,\n+        \t      SYMBOL, THAI, TURKISH, VIETNAMESE ANSI and BALTIC.\n+        \t      Normally you would use \"cDEFAULT\".\n+\n+          Use a ':' to separate the options.\n+        - A '_' can be used in the place of a space, so you don't need to use\n+          backslashes to escape the spaces.\n+        - Examples: >\n+            :set guifont=courier_new:h12:w5:b:cRUSSIAN\n+            :set guifont=Andale_Mono:h7.5:w4.5\n+        <\n+      ]=],\n+      deny_duplicates = true,\n+      full_name = 'guifont',\n+      list = 'onecomma',\n+      redraw = { 'ui_option' },\n+      scope = { 'global' },\n+      short_desc = N_('GUI: Name(s) of font(s) to be used'),\n+      tags = { 'E235', 'E596' },\n+      type = 'string',\n+      varname = 'p_guifont',\n+    },\n+    {\n+      abbreviation = 'gfw',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Comma-separated list of fonts to be used for double-width characters.\n+        The first font that can be loaded is used.\n+        Note: The size of these fonts must be exactly twice as wide as the one\n+        specified with 'guifont' and the same height.\n+\n+        When 'guifont' has a valid font and 'guifontwide' is empty Vim will\n+        attempt to set 'guifontwide' to a matching double-width font.\n+      ]=],\n+      full_name = 'guifontwide',\n+      list = 'onecomma',\n+      redraw = { 'ui_option' },\n+      scope = { 'global' },\n+      short_desc = N_('list of font names for double-wide characters'),\n+      tags = { 'E231', 'E533', 'E534' },\n+      type = 'string',\n+      varname = 'p_guifontwide',\n+    },\n+    {\n+      abbreviation = 'go',\n+      defaults = {\n+        if_true = '',\n+        doc = '\"egmrLT\"   (MS-Windows)',\n+      },\n+      desc = [=[\n+        This option only has an effect in the GUI version of Vim.  It is a\n+        sequence of letters which describes what components and options of the\n+        GUI should be used.\n+        To avoid problems with flags that are added in the future, use the\n+        \"+=\" and \"-=\" feature of \":set\" |add-option-flags|.\n+\n+        Valid letters are as follows:\n+        \t\t\t\t\t\t*guioptions_a* *'go-a'*\n+          'a'\tAutoselect:  If present, then whenever VISUAL mode is started,\n+        \tor the Visual area extended, Vim tries to become the owner of\n+        \tthe windowing system's global selection.  This means that the\n+        \tVisually highlighted text is available for pasting into other\n+        \tapplications as well as into Vim itself.  When the Visual mode\n+        \tends, possibly due to an operation on the text, or when an\n+        \tapplication wants to paste the selection, the highlighted text\n+        \tis automatically yanked into the \"* selection register.\n+        \tThus the selection is still available for pasting into other\n+        \tapplications after the VISUAL mode has ended.\n+        \t    If not present, then Vim won't become the owner of the\n+        \twindowing system's global selection unless explicitly told to\n+        \tby a yank or delete operation for the \"* register.\n+        \tThe same applies to the modeless selection.\n+        \t\t\t\t\t\t\t*'go-P'*\n+          'P'\tLike autoselect but using the \"+ register instead of the \"*\n+        \tregister.\n+        \t\t\t\t\t\t\t*'go-A'*\n+          'A'\tAutoselect for the modeless selection.  Like 'a', but only\n+        \tapplies to the modeless selection.\n+\n+        \t    'guioptions'   autoselect Visual  autoselect modeless ~\n+        \t\t \"\"\t\t -\t\t\t -\n+        \t\t \"a\"\t\tyes\t\t\tyes\n+        \t\t \"A\"\t\t -\t\t\tyes\n+        \t\t \"aA\"\t\tyes\t\t\tyes\n+\n+        \t\t\t\t\t\t\t*'go-c'*\n+          'c'\tUse console dialogs instead of popup dialogs for simple\n+        \tchoices.\n+        \t\t\t\t\t\t\t*'go-d'*\n+          'd'\tUse dark theme variant if available.\n+        \t\t\t\t\t\t\t*'go-e'*\n+          'e'\tAdd tab pages when indicated with 'showtabline'.\n+        \t'guitablabel' can be used to change the text in the labels.\n+        \tWhen 'e' is missing a non-GUI tab pages line may be used.\n+        \tThe GUI tabs are only supported on some systems, currently\n+        \tMac OS/X and MS-Windows.\n+        \t\t\t\t\t\t\t*'go-i'*\n+          'i'\tUse a Vim icon.\n+        \t\t\t\t\t\t\t*'go-m'*\n+          'm'\tMenu bar is present.\n+        \t\t\t\t\t\t\t*'go-M'*\n+          'M'\tThe system menu \"$VIMRUNTIME/menu.vim\" is not sourced.  Note\n+        \tthat this flag must be added in the vimrc file, before\n+        \tswitching on syntax or filetype recognition (when the |gvimrc|\n+        \tfile is sourced the system menu has already been loaded; the\n+        \t`:syntax on` and `:filetype on` commands load the menu too).\n+        \t\t\t\t\t\t\t*'go-g'*\n+          'g'\tGrey menu items: Make menu items that are not active grey.  If\n+        \t'g' is not included inactive menu items are not shown at all.\n+        \t\t\t\t\t\t\t*'go-T'*\n+          'T'\tInclude Toolbar.  Currently only in Win32 GUI.\n+        \t\t\t\t\t\t\t*'go-r'*\n+          'r'\tRight-hand scrollbar is always present.\n+        \t\t\t\t\t\t\t*'go-R'*\n+          'R'\tRight-hand scrollbar is present when there is a vertically\n+        \tsplit window.\n+        \t\t\t\t\t\t\t*'go-l'*\n+          'l'\tLeft-hand scrollbar is always present.\n+        \t\t\t\t\t\t\t*'go-L'*\n+          'L'\tLeft-hand scrollbar is present when there is a vertically\n+        \tsplit window.\n+        \t\t\t\t\t\t\t*'go-b'*\n+          'b'\tBottom (horizontal) scrollbar is present.  Its size depends on\n+        \tthe longest visible line, or on the cursor line if the 'h'\n+        \tflag is included. |gui-horiz-scroll|\n+        \t\t\t\t\t\t\t*'go-h'*\n+          'h'\tLimit horizontal scrollbar size to the length of the cursor\n+        \tline.  Reduces computations. |gui-horiz-scroll|\n+\n+        And yes, you may even have scrollbars on the left AND the right if\n+        you really want to :-).  See |gui-scrollbars| for more information.\n+\n+        \t\t\t\t\t\t\t*'go-v'*\n+          'v'\tUse a vertical button layout for dialogs.  When not included,\n+        \ta horizontal layout is preferred, but when it doesn't fit a\n+        \tvertical layout is used anyway.  Not supported in GTK 3.\n+        \t\t\t\t\t\t\t*'go-p'*\n+          'p'\tUse Pointer callbacks for X11 GUI.  This is required for some\n+        \twindow managers.  If the cursor is not blinking or hollow at\n+        \tthe right moment, try adding this flag.  This must be done\n+        \tbefore starting the GUI.  Set it in your |gvimrc|.  Adding or\n+        \tremoving it after the GUI has started has no effect.\n+        \t\t\t\t\t\t\t*'go-k'*\n+          'k'\tKeep the GUI window size when adding/removing a scrollbar, or\n+        \ttoolbar, tabline, etc.  Instead, the behavior is similar to\n+        \twhen the window is maximized and will adjust 'lines' and\n+        \t'columns' to fit to the window.  Without the 'k' flag Vim will\n+        \ttry to keep 'lines' and 'columns' the same when adding and\n+        \tremoving GUI components.\n+      ]=],\n+      enable_if = false,\n+      full_name = 'guioptions',\n+      list = 'flags',\n+      scope = { 'global' },\n+      short_desc = N_('GUI: Which components and options are used'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'gtl',\n+      desc = [=[\n+        When non-empty describes the text to use in a label of the GUI tab\n+        pages line.  When empty and when the result is empty Vim will use a\n+        default label.  See |setting-guitablabel| for more info.\n+\n+        The format of this option is like that of 'statusline'.\n+        'guitabtooltip' is used for the tooltip, see below.\n+        The expression will be evaluated in the |sandbox| when set from a\n+        modeline, see |sandbox-option|.\n+        This option cannot be set in a modeline when 'modelineexpr' is off.\n+\n+        Only used when the GUI tab pages line is displayed.  'e' must be\n+        present in 'guioptions'.  For the non-GUI tab pages line 'tabline' is\n+        used.\n+      ]=],\n+      enable_if = false,\n+      full_name = 'guitablabel',\n+      modelineexpr = true,\n+      redraw = { 'current_window' },\n+      scope = { 'global' },\n+      short_desc = N_('GUI: custom label for a tab page'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'gtt',\n+      desc = [=[\n+        When non-empty describes the text to use in a tooltip for the GUI tab\n+        pages line.  When empty Vim will use a default tooltip.\n+        This option is otherwise just like 'guitablabel' above.\n+        You can include a line break.  Simplest method is to use |:let|: >\n+        \t:let &guitabtooltip = \"line one\\nline two\"\n+        <\n+      ]=],\n+      enable_if = false,\n+      full_name = 'guitabtooltip',\n+      redraw = { 'current_window' },\n+      scope = { 'global' },\n+      short_desc = N_('GUI: custom tooltip for a tab page'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'hf',\n+      cb = 'did_set_helpfile',\n+      defaults = {\n+        if_true = macros('DFLT_HELPFILE'),\n+        doc = [[(MS-Windows) \"$VIMRUNTIME\\doc\\help.txt\"\n+                  (others) \"$VIMRUNTIME/doc/help.txt\")\n+      ]],\n+      },\n+      desc = [=[\n+        Name of the main help file.  All distributed help files should be\n+        placed together in one directory.  Additionally, all \"doc\" directories\n+        in 'runtimepath' will be used.\n+        Environment variables are expanded |:set_env|.  For example:\n+        \"$VIMRUNTIME/doc/help.txt\".  If $VIMRUNTIME is not set, $VIM is also\n+        tried.  Also see |$VIMRUNTIME| and |option-backslash| about including\n+        spaces and backslashes.\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      expand = true,\n+      full_name = 'helpfile',\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_('full path name of the main help file'),\n+      type = 'string',\n+      varname = 'p_hf',\n+    },\n+    {\n+      abbreviation = 'hh',\n+      cb = 'did_set_helpheight',\n+      defaults = { if_true = 20 },\n+      desc = [=[\n+        Minimal initial height of the help window when it is opened with the\n+        \":help\" command.  The initial height of the help window is half of the\n+        current window, or (when the 'ea' option is on) the same as other\n+        windows.  When the height is less than 'helpheight', the height is\n+        set to 'helpheight'.  Set to zero to disable.\n+      ]=],\n+      full_name = 'helpheight',\n+      scope = { 'global' },\n+      short_desc = N_('minimum height of a new help window'),\n+      type = 'number',\n+      varname = 'p_hh',\n+    },\n+    {\n+      abbreviation = 'hlg',\n+      cb = 'did_set_helplang',\n+      defaults = {\n+        if_true = '',\n+        doc = 'messages language or empty',\n+      },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Comma-separated list of languages.  Vim will use the first language\n+        for which the desired help can be found.  The English help will always\n+        be used as a last resort.  You can add \"en\" to prefer English over\n+        another language, but that will only find tags that exist in that\n+        language and not in the English help.\n+        Example: >\n+        \t:set helplang=de,it\n+        <\tThis will first search German, then Italian and finally English help\n+        files.\n+        When using |CTRL-]| and \":help!\" in a non-English help file Vim will\n+        try to find the tag in the current language before using this option.\n+        See |help-translated|.\n+      ]=],\n+      full_name = 'helplang',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('preferred help languages'),\n+      type = 'string',\n+      varname = 'p_hlg',\n+    },\n+    {\n+      abbreviation = 'hid',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        When off a buffer is unloaded (including loss of undo information)\n+        when it is |abandon|ed.  When on a buffer becomes hidden when it is\n+        |abandon|ed.  A buffer displayed in another window does not become\n+        hidden, of course.\n+\n+        Commands that move through the buffer list sometimes hide a buffer\n+        although the 'hidden' option is off when these three are true:\n+        - the buffer is modified\n+        - 'autowrite' is off or writing is not possible\n+        - the '!' flag was used\n+        Also see |windows|.\n+\n+        To hide a specific buffer use the 'bufhidden' option.\n+        'hidden' is set for one command with \":hide {command}\" |:hide|.\n+      ]=],\n+      full_name = 'hidden',\n+      scope = { 'global' },\n+      short_desc = N_(\"don't unload buffer when it is |abandon|ed\"),\n+      type = 'bool',\n+      varname = 'p_hid',\n+    },\n+    {\n+      abbreviation = 'hl',\n+      cb = 'did_set_highlight',\n+      defaults = { if_true = macros('HIGHLIGHT_INIT') },\n+      deny_duplicates = true,\n+      full_name = 'highlight',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('sets highlighting mode for various occasions'),\n+      type = 'string',\n+      varname = 'p_hl',\n+    },\n+    {\n+      abbreviation = 'hi',\n+      defaults = { if_true = 10000 },\n+      desc = [=[\n+        A history of \":\" commands, and a history of previous search patterns\n+        is remembered.  This option decides how many entries may be stored in\n+        each of these histories (see |cmdline-editing|).\n+        The maximum value is 10000.\n+      ]=],\n+      full_name = 'history',\n+      scope = { 'global' },\n+      short_desc = N_('number of command-lines that are remembered'),\n+      type = 'number',\n+      varname = 'p_hi',\n+    },\n+    {\n+      abbreviation = 'hk',\n+      defaults = { if_true = false },\n+      full_name = 'hkmap',\n+      scope = { 'global' },\n+      short_desc = N_('No descripti",
            "html_url": "https://github.com/neovim/neovim/pull/24528#discussion_r1284344262",
            "id": 1284344262,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MjYnG",
            "original_commit_id": "8735c361b3f2657c5ac340f75c31cdaf12cd6e59",
            "original_line": 7660,
            "original_position": 10719,
            "original_start_line": null,
            "path": "src/nvim/options.lua",
            "position": null,
            "pull_request_review_id": 1562749068,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24528",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284344262/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-04T12:09:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284344262",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24528#discussion_r1284345865"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24528"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284345865"
                }
            },
            "author_association": "MEMBER",
            "body": "Hmm the suggestion is broken again",
            "commit_id": "fe5eadf4a3c0dd57c5a9936c4982187e3f9d082c",
            "created_at": "2023-08-04T12:10:57Z",
            "diff_hunk": "@@ -1,3079 +1,10001 @@\n--- {\n---  {\n---    full_name='aleph', abbreviation='al',\n---    short_desc=\"ASCII code of the letter Aleph (Hebrew)\",\n---    varname='p_aleph', pv_name=nil,\n---    type='number', list=nil, scope={'global'},\n---    deny_duplicates=nil,\n---    enable_if=nil,\n---    defaults={condition=nil, if_true=224, if_false=nil},\n---    secure=nil, gettext=nil, noglob=nil, normal_fname_chars=nil,\n---    pri_mkrc=nil, deny_in_modelines=nil, normal_dname_chars=nil,\n---    modelineexpr=nil,\n---    func=nil,\n---    expand=nil, nodefault=nil, no_mkrc=nil,\n---    alloced=nil,\n---    save_pv_indir=nil,\n---    redraw={'curswant'},\n---  }\n--- }\n--- types: bool, number, string\n--- lists: (nil), comma, onecomma, flags, flagscomma\n--- scopes: global, buffer, window\n--- redraw options: statuslines, tabline, current_window, current_window_only,\n---                 current_buffer, all_windows, curswant\n--- defaults: {condition=#if condition, if_true=default, if_false=default}\n--- #if condition:\n---    string: #ifdef string\n---    !string: #ifndef string\n---    {string, string}: #if defined(string) && defined(string)\n---    {!string, !string}: #if !defined(string) && !defined(string)\n-local cstr = function(s)\n+--- @class vim.option_meta\n+--- @field full_name string\n+--- @field desc? string\n+--- @field abbreviation? string\n+--- @field short_desc? string|fun(): string\n+--- @field varname? string\n+--- @field pv_name? string\n+--- @field type 'bool'|'number'|'string'\n+--- @field list? 'comma'|'onecomma'|'flags'|'flagscomma'\n+--- @field scope vim.option_scope[]\n+--- @field deny_duplicates? boolean\n+--- @field enable_if? string|false\n+--- @field defaults? vim.option_defaults\n+--- @field secure? true\n+--- @field noglob? true\n+--- @field normal_fname_chars? true\n+--- @field pri_mkrc? true\n+--- @field deny_in_modelines? true\n+--- @field normal_dname_chars? true\n+--- @field modelineexpr? true\n+--- @field func? true\n+--- @field expand? string|true\n+--- @field nodefault? true\n+--- @field no_mkrc? true\n+--- @field alloced? true\n+--- @field redraw? vim.option_redraw[]\n+--- @field cb? string\n+--- @field tags? string[]\n+\n+--- @class vim.option_defaults\n+--- @field condition? string\n+---    string: #ifdef string\n+---    !string: #ifndef string\n+--- @field if_true integer|boolean|string|fun(): string\n+--- @field if_false? integer|boolean|string\n+--- @field doc? string Default to show in options.txt\n+--- @field meta? integer|boolean|string Default to use in Lua meta files\n+\n+--- @alias vim.option_scope 'global'|'buffer'|'window'\n+\n+--- @alias vim.option_redraw\n+--- |'statuslines'\n+--- |'tabline'\n+--- |'current_window'\n+--- |'current_window_only'\n+--- |'current_buffer'\n+--- |'all_windows'\n+--- |'curswant'\n+--- |'ui_option'\n+\n+--- @param s string\n+--- @return string\n+local function cstr(s)\n   return '\"' .. s:gsub('[\"\\\\]', '\\\\%0'):gsub('\\t', '\\\\t') .. '\"'\n end\n-local macros=function(s)\n+\n+--- @param s string\n+--- @return fun(): string\n+local function macros(s)\n   return function()\n     return s\n   end\n end\n-local imacros=function(s)\n+\n+--- @param s string\n+--- @return fun(): string\n+local function imacros(s)\n   return function()\n     return '(intptr_t)' .. s\n   end\n end\n-local N_=function(s) -- luacheck: ignore 211 (currently unused)\n+\n+--- @param s string\n+--- @return fun(): string\n+local function N_(s) -- luacheck: ignore 211 (currently unused)\n   return function()\n     return 'N_(' .. cstr(s) .. ')'\n   end\n end\n--- used for 'cinkeys' and 'indentkeys'\n-local indentkeys_default = '0{,0},0),0],:,0#,!^F,o,O,e';\n+\n return {\n-  cstr=cstr,\n-  options={\n-    {\n-      full_name='aleph', abbreviation='al',\n-      short_desc=N_(\"ASCII code of the letter Aleph (Hebrew)\"),\n-      type='number', scope={'global'},\n-      defaults={if_true=224}\n-    },\n-    {\n-      full_name='arabic', abbreviation='arab',\n-      short_desc=N_(\"Arabic as a default second language\"),\n-      type='bool', scope={'window'},\n-      redraw={'curswant'},\n-      defaults={if_true=false},\n-      cb='did_set_arabic'\n-    },\n-    {\n-      full_name='arabicshape', abbreviation='arshape',\n-      short_desc=N_(\"do shaping for Arabic characters\"),\n-      type='bool', scope={'global'},\n-      redraw={'all_windows', 'ui_option'},\n+  cstr = cstr,\n+  --- @type vim.option_meta[]\n+  options = {\n+    {\n+      abbreviation = 'al',\n+      defaults = { if_true = 224 },\n+      full_name = 'aleph',\n+      scope = { 'global' },\n+      short_desc = N_('ASCII code of the letter Aleph (Hebrew)'),\n+      type = 'number',\n+    },\n+    {\n+      abbreviation = 'arab',\n+      cb = 'did_set_arabic',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        This option can be set to start editing Arabic text.\n+        Setting this option will:\n+        - Set the 'rightleft' option, unless 'termbidi' is set.\n+        - Set the 'arabicshape' option, unless 'termbidi' is set.\n+        - Set the 'keymap' option to \"arabic\"; in Insert mode CTRL-^ toggles\n+          between typing English and Arabic key mapping.\n+        - Set the 'delcombine' option\n \n-      varname='p_arshape',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='allowrevins', abbreviation='ari',\n-      short_desc=N_(\"allow CTRL-_ in Insert and Command-line mode\"),\n-      type='bool', scope={'global'},\n-      varname='p_ari',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='ambiwidth', abbreviation='ambw',\n-      short_desc=N_(\"what to do with Unicode chars of ambiguous width\"),\n-      type='string', scope={'global'},\n-      redraw={'all_windows', 'ui_option'},\n-      varname='p_ambw',\n-      defaults={if_true=\"single\"},\n-      cb='did_set_ambiwidth'\n-    },\n-    {\n-      full_name='autochdir', abbreviation='acd',\n-      short_desc=N_(\"change directory to the file in the current window\"),\n-      type='bool', scope={'global'},\n-      varname='p_acd',\n-      defaults={if_true=false},\n-      cb='did_set_autochdir'\n-    },\n-    {\n-      full_name='autoindent', abbreviation='ai',\n-      short_desc=N_(\"take indent for new line from previous line\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_ai',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='autoread', abbreviation='ar',\n-      short_desc=N_(\"autom. read file when changed outside of Vim\"),\n-      type='bool', scope={'global', 'buffer'},\n-      varname='p_ar',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='autowrite', abbreviation='aw',\n-      short_desc=N_(\"automatically write file if changed\"),\n-      type='bool', scope={'global'},\n-      varname='p_aw',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='autowriteall', abbreviation='awa',\n-      short_desc=N_(\"as 'autowrite', but works with more commands\"),\n-      type='bool', scope={'global'},\n-      varname='p_awa',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='background', abbreviation='bg',\n-      short_desc=N_(\"\\\"dark\\\" or \\\"light\\\", used for highlight colors\"),\n-      type='string', scope={'global'},\n-      varname='p_bg',\n-      defaults={if_true=\"dark\"},\n-      cb='did_set_background'\n-    },\n-    {\n-      full_name='backspace', abbreviation='bs',\n-      short_desc=N_(\"how backspace works at start of line\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_bs',\n-      defaults={if_true=\"indent,eol,start\"},\n-      cb='did_set_backspace'\n-    },\n-    {\n-      full_name='backup', abbreviation='bk',\n-      short_desc=N_(\"keep backup file after overwriting a file\"),\n-      type='bool', scope={'global'},\n-      varname='p_bk',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='backupcopy', abbreviation='bkc',\n-      short_desc=N_(\"make backup as a copy, don't rename the file\"),\n-      type='string', list='onecomma', scope={'global', 'buffer'},\n-      deny_duplicates=true,\n-      varname='p_bkc',\n-      defaults={\n-        condition='UNIX',\n-        if_true=\"auto\",\n-        if_false=\"auto\"\n+        Resetting this option will:\n+        - Reset the 'rightleft' option.\n+        - Disable the use of 'keymap' (without changing its value).\n+        Note that 'arabicshape' and 'delcombine' are not reset (it is a global\n+        option).\n+        Also see |arabic.txt|.\n+      ]=],\n+      full_name = 'arabic',\n+      redraw = { 'curswant' },\n+      scope = { 'window' },\n+      short_desc = N_('Arabic as a default second language'),\n+      type = 'bool',\n+    },\n+    {\n+      abbreviation = 'arshape',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        When on and 'termbidi' is off, the required visual character\n+        corrections that need to take place for displaying the Arabic language\n+        take effect.  Shaping, in essence, gets enabled; the term is a broad\n+        one which encompasses:\n+          a) the changing/morphing of characters based on their location\n+             within a word (initial, medial, final and stand-alone).\n+          b) the enabling of the ability to compose characters\n+          c) the enabling of the required combining of some characters\n+        When disabled the display shows each character's true stand-alone\n+        form.\n+        Arabic is a complex language which requires other settings, for\n+        further details see |arabic.txt|.\n+      ]=],\n+      full_name = 'arabicshape',\n+      redraw = { 'all_windows', 'ui_option' },\n+      scope = { 'global' },\n+      short_desc = N_('do shaping for Arabic characters'),\n+      type = 'bool',\n+      varname = 'p_arshape',\n+    },\n+    {\n+      abbreviation = 'ari',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Allow CTRL-_ in Insert and Command-line mode.  This is default off, to\n+        avoid that users that accidentally type CTRL-_ instead of SHIFT-_ get\n+        into reverse Insert mode, and don't know how to get out.  See\n+        'revins'.\n+      ]=],\n+      full_name = 'allowrevins',\n+      scope = { 'global' },\n+      short_desc = N_('allow CTRL-_ in Insert and Command-line mode'),\n+      type = 'bool',\n+      varname = 'p_ari',\n+    },\n+    {\n+      abbreviation = 'ambw',\n+      cb = 'did_set_ambiwidth',\n+      defaults = { if_true = 'single' },\n+      desc = [=[\n+        Tells Vim what to do with characters with East Asian Width Class\n+        Ambiguous (such as Euro, Registered Sign, Copyright Sign, Greek\n+        letters, Cyrillic letters).\n+\n+        There are currently two possible values:\n+        \"single\":\tUse the same width as characters in US-ASCII.  This is\n+        \t\texpected by most users.\n+        \"double\":\tUse twice the width of ASCII characters.\n+        \t\t\t\t\t\t*E834* *E835*\n+        The value \"double\" cannot be used if 'listchars' or 'fillchars'\n+        contains a character that would be double width.  These errors may\n+        also be given when calling setcellwidths().\n+\n+        The values are overruled for characters specified with\n+        |setcellwidths()|.\n+\n+        There are a number of CJK fonts for which the width of glyphs for\n+        those characters are solely based on how many octets they take in\n+        legacy/traditional CJK encodings.  In those encodings, Euro,\n+        Registered sign, Greek/Cyrillic letters are represented by two octets,\n+        therefore those fonts have \"wide\" glyphs for them.  This is also\n+        true of some line drawing characters used to make tables in text\n+        file.  Therefore, when a CJK font is used for GUI Vim or\n+        Vim is running inside a terminal (emulators) that uses a CJK font\n+        (or Vim is run inside an xterm invoked with \"-cjkwidth\" option.),\n+        this option should be set to \"double\" to match the width perceived\n+        by Vim with the width of glyphs in the font.  Perhaps it also has\n+        to be set to \"double\" under CJK MS-Windows when the system locale is\n+        set to one of CJK locales.  See Unicode Standard Annex #11\n+        (https://www.unicode.org/reports/tr11).\n+      ]=],\n+      full_name = 'ambiwidth',\n+      redraw = { 'all_windows', 'ui_option' },\n+      scope = { 'global' },\n+      short_desc = N_('what to do with Unicode chars of ambiguous width'),\n+      type = 'string',\n+      varname = 'p_ambw',\n+    },\n+    {\n+      abbreviation = 'acd',\n+      cb = 'did_set_autochdir',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        When on, Vim will change the current working directory whenever you\n+        open a file, switch buffers, delete a buffer or open/close a window.\n+        It will change to the directory containing the file which was opened\n+        or selected.  When a buffer has no name it also has no directory, thus\n+        the current directory won't change when navigating to it.\n+        Note: When this option is on some plugins may not work.\n+      ]=],\n+      full_name = 'autochdir',\n+      scope = { 'global' },\n+      short_desc = N_('change directory to the file in the current window'),\n+      type = 'bool',\n+      varname = 'p_acd',\n+    },\n+    {\n+      abbreviation = 'ai',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        Copy indent from current line when starting a new line (typing <CR>\n+        in Insert mode or when using the \"o\" or \"O\" command).  If you do not\n+        type anything on the new line except <BS> or CTRL-D and then type\n+        <Esc>, CTRL-O or <CR>, the indent is deleted again.  Moving the cursor\n+        to another line has the same effect, unless the 'I' flag is included\n+        in 'cpoptions'.\n+        When autoindent is on, formatting (with the \"gq\" command or when you\n+        reach 'textwidth' in Insert mode) uses the indentation of the first\n+        line.\n+        When 'smartindent' or 'cindent' is on the indent is changed in\n+        a different way.\n+      ]=],\n+      full_name = 'autoindent',\n+      scope = { 'buffer' },\n+      short_desc = N_('take indent for new line from previous line'),\n+      type = 'bool',\n+      varname = 'p_ai',\n+    },\n+    {\n+      abbreviation = 'ar',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        When a file has been detected to have been changed outside of Vim and\n+        it has not been changed inside of Vim, automatically read it again.\n+        When the file has been deleted this is not done, so you have the text\n+        from before it was deleted.  When it appears again then it is read.\n+        |timestamp|\n+        If this option has a local value, use this command to switch back to\n+        using the global value: >\n+        \t:set autoread<\n+        <\n+      ]=],\n+      full_name = 'autoread',\n+      scope = { 'global', 'buffer' },\n+      short_desc = N_('autom. read file when changed outside of Vim'),\n+      type = 'bool',\n+      varname = 'p_ar',\n+    },\n+    {\n+      abbreviation = 'aw',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Write the contents of the file, if it has been modified, on each\n+        `:next`, `:rewind`, `:last`, `:first`, `:previous`, `:stop`,\n+        `:suspend`, `:tag`, `:!`, `:make`, CTRL-] and CTRL-^ command; and when\n+        a `:buffer`, CTRL-O, CTRL-I, '{A-Z0-9}, or `{A-Z0-9} command takes one\n+        to another file.\n+        A buffer is not written if it becomes hidden, e.g. when 'bufhidden' is\n+        set to \"hide\" and `:next` is used.\n+        Note that for some commands the 'autowrite' option is not used, see\n+        'autowriteall' for that.\n+        Some buffers will not be written, specifically when 'buftype' is\n+        \"nowrite\", \"nofile\", \"terminal\" or \"prompt\".\n+        USE WITH CARE: If you make temporary changes to a buffer that you\n+        don't want to be saved this option may cause it to be saved anyway.\n+        Renaming the buffer with \":file {name}\" may help avoid this.\n+      ]=],\n+      full_name = 'autowrite',\n+      scope = { 'global' },\n+      short_desc = N_('automatically write file if changed'),\n+      type = 'bool',\n+      varname = 'p_aw',\n+    },\n+    {\n+      abbreviation = 'awa',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Like 'autowrite', but also used for commands \":edit\", \":enew\", \":quit\",\n+        \":qall\", \":exit\", \":xit\", \":recover\" and closing the Vim window.\n+        Setting this option also implies that Vim behaves like 'autowrite' has\n+        been set.\n+      ]=],\n+      full_name = 'autowriteall',\n+      scope = { 'global' },\n+      short_desc = N_(\"as 'autowrite', but works with more commands\"),\n+      type = 'bool',\n+      varname = 'p_awa',\n+    },\n+    {\n+      abbreviation = 'bg',\n+      cb = 'did_set_background',\n+      defaults = { if_true = 'dark' },\n+      desc = [=[\n+        When set to \"dark\" or \"light\", adjusts the default color groups for\n+        that background type.  The |TUI| or other UI sets this on startup\n+        (triggering |OptionSet|) if it can detect the background color.\n+\n+        This option does NOT change the background color, it tells Nvim what\n+        the \"inherited\" (terminal/GUI) background looks like.\n+        See |:hi-normal| if you want to set the background color explicitly.\n+        \t\t\t\t\t*g:colors_name*\n+        When a color scheme is loaded (the \"g:colors_name\" variable is set)\n+        setting 'background' will cause the color scheme to be reloaded.  If\n+        the color scheme adjusts to the value of 'background' this will work.\n+        However, if the color scheme sets 'background' itself the effect may\n+        be undone.  First delete the \"g:colors_name\" variable when needed.\n+\n+        Normally this option would be set in the vimrc file.  Possibly\n+        depending on the terminal name.  Example: >\n+        \t:if $TERM ==# \"xterm\"\n+        \t:  set background=dark\n+        \t:endif\n+        <\tWhen this option is set, the default settings for the highlight groups\n+        will change.  To use other settings, place \":highlight\" commands AFTER\n+        the setting of the 'background' option.\n+        This option is also used in the \"$VIMRUNTIME/syntax/syntax.vim\" file\n+        to select the colors for syntax highlighting.  After changing this\n+        option, you must load syntax.vim again to see the result.  This can be\n+        done with \":syntax on\".\n+      ]=],\n+      full_name = 'background',\n+      scope = { 'global' },\n+      short_desc = N_('\"dark\" or \"light\", used for highlight colors'),\n+      type = 'string',\n+      varname = 'p_bg',\n+    },\n+    {\n+      abbreviation = 'bs',\n+      cb = 'did_set_backspace',\n+      defaults = { if_true = 'indent,eol,start' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Influences the working of <BS>, <Del>, CTRL-W and CTRL-U in Insert\n+        mode.  This is a list of items, separated by commas.  Each item allows\n+        a way to backspace over something:\n+        value\teffect\t~\n+        indent\tallow backspacing over autoindent\n+        eol\tallow backspacing over line breaks (join lines)\n+        start\tallow backspacing over the start of insert; CTRL-W and CTRL-U\n+        \tstop once at the start of insert.\n+        nostop\tlike start, except CTRL-W and CTRL-U do not stop at the start of\n+        \tinsert.\n+\n+        When the value is empty, Vi compatible backspacing is used, none of\n+        the ways mentioned for the items above are possible.\n+      ]=],\n+      full_name = 'backspace',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('how backspace works at start of line'),\n+      type = 'string',\n+      varname = 'p_bs',\n+    },\n+    {\n+      abbreviation = 'bk',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Make a backup before overwriting a file.  Leave it around after the\n+        file has been successfully written.  If you do not want to keep the\n+        backup file, but you do want a backup while the file is being\n+        written, reset this option and set the 'writebackup' option (this is\n+        the default).  If you do not want a backup file at all reset both\n+        options (use this if your file system is almost full).  See the\n+        |backup-table| for more explanations.\n+        When the 'backupskip' pattern matches, a backup is not made anyway.\n+        When 'patchmode' is set, the backup may be renamed to become the\n+        oldest version of a file.\n+      ]=],\n+      full_name = 'backup',\n+      scope = { 'global' },\n+      short_desc = N_('keep backup file after overwriting a file'),\n+      type = 'bool',\n+      varname = 'p_bk',\n+    },\n+    {\n+      abbreviation = 'bkc',\n+      cb = 'did_set_backupcopy',\n+      defaults = { condition = 'UNIX', if_false = 'auto', if_true = 'auto' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        When writing a file and a backup is made, this option tells how it's\n+        done.  This is a comma-separated list of words.\n+\n+        The main values are:\n+        \"yes\"\tmake a copy of the file and overwrite the original one\n+        \"no\"\trename the file and write a new one\n+        \"auto\"\tone of the previous, what works best\n+\n+        Extra values that can be combined with the ones above are:\n+        \"breaksymlink\"\talways break symlinks when writing\n+        \"breakhardlink\"\talways break hardlinks when writing\n+\n+        Making a copy and overwriting the original file:\n+        - Takes extra time to copy the file.\n+        + When the file has special attributes, is a (hard/symbolic) link or\n+          has a resource fork, all this is preserved.\n+        - When the file is a link the backup will have the name of the link,\n+          not of the real file.\n+\n+        Renaming the file and writing a new one:\n+        + It's fast.\n+        - Sometimes not all attributes of the file can be copied to the new\n+          file.\n+        - When the file is a link the new file will not be a link.\n+\n+        The \"auto\" value is the middle way: When Vim sees that renaming the\n+        file is possible without side effects (the attributes can be passed on\n+        and the file is not a link) that is used.  When problems are expected,\n+        a copy will be made.\n+\n+        The \"breaksymlink\" and \"breakhardlink\" values can be used in\n+        combination with any of \"yes\", \"no\" and \"auto\".  When included, they\n+        force Vim to always break either symbolic or hard links by doing\n+        exactly what the \"no\" option does, renaming the original file to\n+        become the backup and writing a new file in its place.  This can be\n+        useful for example in source trees where all the files are symbolic or\n+        hard links and any changes should stay in the local source tree, not\n+        be propagated back to the original source.\n+        \t\t\t\t\t\t*crontab*\n+        One situation where \"no\" and \"auto\" will cause problems: A program\n+        that opens a file, invokes Vim to edit that file, and then tests if\n+        the open file was changed (through the file descriptor) will check the\n+        backup file instead of the newly created file.  \"crontab -e\" is an\n+        example.\n+\n+        When a copy is made, the original file is truncated and then filled\n+        with the new text.  This means that protection bits, owner and\n+        symbolic links of the original file are unmodified.  The backup file,\n+        however, is a new file, owned by the user who edited the file.  The\n+        group of the backup is set to the group of the original file.  If this\n+        fails, the protection bits for the group are made the same as for\n+        others.\n+\n+        When the file is renamed, this is the other way around: The backup has\n+        the same attributes of the original file, and the newly written file\n+        is owned by the current user.  When the file was a (hard/symbolic)\n+        link, the new file will not!  That's why the \"auto\" value doesn't\n+        rename when the file is a link.  The owner and group of the newly\n+        written file will be set to the same ones as the original file, but\n+        the system may refuse to do this.  In that case the \"auto\" value will\n+        again not rename the file.\n+      ]=],\n+      full_name = 'backupcopy',\n+      list = 'onecomma',\n+      scope = { 'global', 'buffer' },\n+      short_desc = N_(\"make backup as a copy, don't rename the file\"),\n+      type = 'string',\n+      varname = 'p_bkc',\n+    },\n+    {\n+      abbreviation = 'bdir',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        List of directories for the backup file, separated with commas.\n+        - The backup file will be created in the first directory in the list\n+          where this is possible.  If none of the directories exist Nvim will\n+          attempt to create the last directory in the list.\n+        - Empty means that no backup file will be created ('patchmode' is\n+          impossible!).  Writing may fail because of this.\n+        - A directory \".\" means to put the backup file in the same directory\n+          as the edited file.\n+        - A directory starting with \"./\" (or \".\\\" for MS-Windows) means to put\n+          the backup file relative to where the edited file is.  The leading\n+          \".\" is replaced with the path name of the edited file.\n+          (\".\" inside a directory name has no special meaning).\n+        - Spaces after the comma are ignored, other spaces are considered part\n+          of the directory name.  To have a space at the start of a directory\n+          name, precede it with a backslash.\n+        - To include a comma in a directory name precede it with a backslash.\n+        - A directory name may end in an '/'.\n+        - For Unix and Win32, if a directory ends in two path separators \"//\",\n+          the swap file name will be built from the complete path to the file\n+          with all path separators changed to percent '%' signs. This will\n+          ensure file name uniqueness in the backup directory.\n+          On Win32, it is also possible to end with \"\\\\\".  However, When a\n+          separating comma is following, you must use \"//\", since \"\\\\\" will\n+          include the comma in the file name. Therefore it is recommended to\n+          use '//', instead of '\\\\'.\n+        - Environment variables are expanded |:set_env|.\n+        - Careful with '\\' characters, type one before a space, type two to\n+          get one in the option (see |option-backslash|), for example: >\n+            :set bdir=c:\\\\tmp,\\ dir\\\\,with\\\\,commas,\\\\\\ dir\\ with\\ spaces\n+        <\n+        See also 'backup' and 'writebackup' options.\n+        If you want to hide your backup files on Unix, consider this value: >\n+        \t:set backupdir=./.backup,~/.backup,.,/tmp\n+        <\tYou must create a \".backup\" directory in each directory and in your\n+        home directory for this to work properly.\n+        The use of |:set+=| and |:set-=| is preferred when adding or removing\n+        directories from the list.  This avoids problems when a future version\n+        uses another default.\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      expand = 'nodefault',\n+      full_name = 'backupdir',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_('list of directories for the backup file'),\n+      type = 'string',\n+      varname = 'p_bdir',\n+    },\n+    {\n+      abbreviation = 'bex',\n+      cb = 'did_set_backupext_or_patchmode',\n+      defaults = { if_true = '~' },\n+      desc = [=[\n+        String which is appended to a file name to make the name of the\n+        backup file.  The default is quite unusual, because this avoids\n+        accidentally overwriting existing files with a backup file.  You might\n+        prefer using \".bak\", but make sure that you don't have files with\n+        \".bak\" that you want to keep.\n+        Only normal file name characters can be used; `/\\*?[|<>` are illegal.\n+\n+        If you like to keep a lot of backups, you could use a BufWritePre\n+        autocommand to change 'backupext' just before writing the file to\n+        include a timestamp. >\n+        \t:au BufWritePre * let &bex = '-' .. strftime(\"%Y%b%d%X\") .. '~'\n+        <\tUse 'backupdir' to put the backup in a different directory.\n+      ]=],\n+      full_name = 'backupext',\n+      normal_fname_chars = true,\n+      scope = { 'global' },\n+      short_desc = N_('extension used for the backup file'),\n+      tags = { 'E589' },\n+      type = 'string',\n+      varname = 'p_bex',\n+    },\n+    {\n+      abbreviation = 'bsk',\n+      defaults = {\n+        if_true = '',\n+        doc = [[\"$TMPDIR/*,$TMP/*,$TEMP/*\"\n+        Unix: \"/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*\"\n+        Mac: \"/private/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*\")]],\n+        meta = '/tmp/*',\n       },\n-      cb='did_set_backupcopy'\n-    },\n-    {\n-      full_name='backupdir', abbreviation='bdir',\n-      short_desc=N_(\"list of directories for the backup file\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      secure=true,\n-      expand='nodefault',\n-      varname='p_bdir',\n-      defaults={if_true=''}\n-    },\n-    {\n-      full_name='backupext', abbreviation='bex',\n-      short_desc=N_(\"extension used for the backup file\"),\n-      type='string', scope={'global'},\n-      normal_fname_chars=true,\n-      varname='p_bex',\n-      defaults={if_true=\"~\"},\n-      cb='did_set_backupext_or_patchmode'\n-    },\n-    {\n-      full_name='backupskip', abbreviation='bsk',\n-      short_desc=N_(\"no backup for files that match these patterns\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_bsk',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='belloff', abbreviation='bo',\n-      short_desc=N_(\"do not ring the bell for these reasons\"),\n-      type='string', list='comma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_bo',\n-      defaults={if_true=\"all\"},\n-      cb='did_set_belloff'\n-    },\n-    {\n-      full_name='binary', abbreviation='bin',\n-      short_desc=N_(\"read/write/edit file in binary mode\"),\n-      type='bool', scope={'buffer'},\n-      redraw={'statuslines'},\n-      varname='p_bin',\n-      defaults={if_true=false},\n-      cb='did_set_binary'\n-    },\n-    {\n-      full_name='bomb',\n-      short_desc=N_(\"a Byte Order Mark to the file\"),\n-      type='bool', scope={'buffer'},\n-      no_mkrc=true,\n-      redraw={'statuslines'},\n-      varname='p_bomb',\n-      defaults={if_true=false},\n-      cb='did_set_eof_eol_fixeol_bomb'\n-    },\n-    {\n-      full_name='breakat', abbreviation='brk',\n-      short_desc=N_(\"characters that may cause a line break\"),\n-      type='string', list='flags', scope={'global'},\n-      redraw={'all_windows'},\n-      varname='p_breakat',\n-      defaults={if_true=\" \\t!@*-+;:,./?\"},\n-      cb='did_set_breakat'\n-    },\n-    {\n-      full_name='breakindent', abbreviation='bri',\n-      short_desc=N_(\"wrapped line repeats indent\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='breakindentopt', abbreviation='briopt',\n-      short_desc=N_(\"settings for 'breakindent'\"),\n-      type='string', list='onecomma', scope={'window'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      redraw={'current_buffer'},\n-      defaults={if_true=\"\"},\n-      cb='did_set_breakindentopt'\n-    },\n-    {\n-      full_name='browsedir', abbreviation='bsdir',\n-      short_desc=N_(\"which directory to start browsing in\"),\n-      type='string', scope={'global'},\n-      enable_if=false,\n-    },\n-    {\n-      full_name='bufhidden', abbreviation='bh',\n-      short_desc=N_(\"what to do when buffer is no longer in window\"),\n-      type='string', scope={'buffer'},\n-      noglob=true,\n-      alloced=true,\n-      varname='p_bh',\n-      defaults={if_true=\"\"},\n-      cb='did_set_bufhidden'\n-    },\n-    {\n-      full_name='buflisted', abbreviation='bl',\n-      short_desc=N_(\"whether the buffer shows up in the buffer list\"),\n-      type='bool', scope={'buffer'},\n-      noglob=true,\n-      varname='p_bl',\n-      defaults={if_true=1},\n-      cb='did_set_buflisted'\n-    },\n-    {\n-      full_name='buftype', abbreviation='bt',\n-      short_desc=N_(\"special type of buffer\"),\n-      type='string', scope={'buffer'},\n-      noglob=true,\n-      alloced=true,\n-      varname='p_bt',\n-      defaults={if_true=\"\"},\n-      cb='did_set_buftype'\n-    },\n-    {\n-      full_name='casemap', abbreviation='cmp',\n-      short_desc=N_(\"specifies how case of letters is changed\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_cmp',\n-      defaults={if_true=\"internal,keepascii\"},\n-      cb='did_set_casemap'\n-    },\n-    {\n-      full_name='cdhome', abbreviation='cdh',\n-      short_desc=N_(\":cd without argument goes to the home directory\"),\n-      type='bool', scope={'global'},\n-      secure=true,\n-      varname='p_cdh',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='cdpath', abbreviation='cd',\n-      short_desc=N_(\"list of directories searched with \\\":cd\\\"\"),\n-      type='string', list='comma', scope={'global'},\n-      deny_duplicates=true,\n-      expand=true,\n-      secure=true,\n-      varname='p_cdpath',\n-      defaults={if_true=\",,\"}\n-    },\n-    {\n-      full_name='cedit',\n-      short_desc=N_(\"used to open the command-line window\"),\n-      type='string', scope={'global'},\n-      varname='p_cedit',\n-      defaults={if_true=macros('CTRL_F_STR')},\n-      cb='did_set_cedit'\n-    },\n-    {\n-      full_name='channel',\n-      short_desc=N_(\"Channel connected to the buffer\"),\n-      type='number', scope={'buffer'},\n-      no_mkrc=true,\n-      nodefault=true,\n-      varname='p_channel',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='charconvert', abbreviation='ccv',\n-      short_desc=N_(\"expression for character encoding conversion\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      varname='p_ccv',\n-      defaults={if_true=\"\"},\n-      cb='did_set_optexpr'\n-    },\n-    {\n-      full_name='cindent', abbreviation='cin',\n-      short_desc=N_(\"do C program indenting\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_cin',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='cinkeys', abbreviation='cink',\n-      short_desc=N_(\"keys that trigger indent when 'cindent' is set\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_cink',\n-      defaults={if_true=indentkeys_default}\n-    },\n-    {\n-      full_name='cinoptions', abbreviation='cino',\n-      short_desc=N_(\"how to do indenting when 'cindent' is set\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_cino',\n-      defaults={if_true=\"\"},\n-      cb='did_set_cinoptions'\n-    },\n-    {\n-      full_name='cinwords', abbreviation='cinw',\n-      short_desc=N_(\"words where 'si' and 'cin' add an indent\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_cinw',\n-      defaults={if_true=\"if,else,while,do,for,switch\"}\n-    },\n-    {\n-      full_name='cinscopedecls', abbreviation='cinsd',\n-      short_desc=N_(\"words that are recognized by 'cino-g'\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_cinsd',\n-      defaults={if_true=\"public,protected,private\"}\n-    },\n-    {\n-      full_name='clipboard', abbreviation='cb',\n-      short_desc=N_(\"use the clipboard as the unnamed register\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_cb',\n-      defaults={if_true=\"\"},\n-      cb='did_set_clipboard'\n-    },\n-    {\n-      full_name='cmdheight', abbreviation='ch',\n-      short_desc=N_(\"number of lines to use for the command-line\"),\n-      type='number', scope={'global'},\n-      redraw={'all_windows'},\n-      varname='p_ch',\n-      defaults={if_true=1},\n-      cb='did_set_cmdheight'\n-    },\n-    {\n-      full_name='cmdwinheight', abbreviation='cwh',\n-      short_desc=N_(\"height of the command-line window\"),\n-      type='number', scope={'global'},\n-      varname='p_cwh',\n-      defaults={if_true=7}\n-    },\n-    {\n-      full_name='colorcolumn', abbreviation='cc',\n-      short_desc=N_(\"columns to highlight\"),\n-      type='string', list='onecomma', scope={'window'},\n-      deny_duplicates=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"\"},\n-      cb='did_set_colorcolumn'\n-    },\n-    {\n-      full_name='columns', abbreviation='co',\n-      short_desc=N_(\"number of columns in the display\"),\n-      type='number', scope={'global'},\n-      no_mkrc=true,\n-      varname='p_columns',\n-      defaults={if_true=macros('DFLT_COLS')}\n-    },\n-    {\n-      full_name='comments', abbreviation='com',\n-      short_desc=N_(\"patterns that can start a comment line\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      redraw={'curswant'},\n-      varname='p_com',\n-      defaults={if_true=\"s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-\"},\n-      cb='did_set_comments'\n-    },\n-    {\n-      full_name='commentstring', abbreviation='cms',\n-      short_desc=N_(\"template for comments; used for fold marker\"),\n-      type='string', scope={'buffer'},\n-      alloced=true,\n-      redraw={'curswant'},\n-      varname='p_cms',\n-      defaults={if_true=\"\"},\n-      cb='did_set_commentstring'\n-    },\n-    {\n-      full_name='compatible', abbreviation='cp',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      varname='p_force_off',\n-      -- pri_mkrc isn't needed here, optval_default()\n-      -- always returns TRUE for 'compatible'\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='complete', abbreviation='cpt',\n-      short_desc=N_(\"specify how Insert mode completion works\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_cpt',\n-      defaults={if_true=\".,w,b,u,t\"},\n-      cb='did_set_complete'\n-    },\n-    {\n-      full_name='concealcursor', abbreviation='cocu',\n-      short_desc=N_(\"whether concealable text is hidden in cursor line\"),\n-      type='string', scope={'window'},\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"\"},\n-      cb='did_set_concealcursor'\n-    },\n-    {\n-      full_name='conceallevel', abbreviation='cole',\n-      short_desc=N_(\"whether concealable text is shown or hidden\"),\n-      type='number', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='completefunc', abbreviation='cfu',\n-      short_desc=N_(\"function to be used for Insert mode completion\"),\n-      type='string', scope={'buffer'},\n-      secure=true,\n-      alloced=true,\n-      func=true,\n-      varname='p_cfu',\n-      defaults={if_true=\"\"},\n-      cb='did_set_completefunc'\n-    },\n-    {\n-      full_name='completeopt', abbreviation='cot',\n-      short_desc=N_(\"options for Insert mode completion\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_cot',\n-      defaults={if_true=\"menu,preview\"},\n-      cb='did_set_completeopt'\n-    },\n-    {\n-      full_name='completeslash', abbreviation='csl',\n-      type='string', scope={'buffer'},\n-      varname='p_csl',\n-      enable_if='BACKSLASH_IN_FILENAME',\n-      defaults={if_true=\"\"},\n-      cb='did_set_completeslash'\n-    },\n-    {\n-      full_name='confirm', abbreviation='cf',\n-      short_desc=N_(\"ask what to do about unsaved/read-only files\"),\n-      type='bool', scope={'global'},\n-      varname='p_confirm',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='copyindent', abbreviation='ci',\n-      short_desc=N_(\"make 'autoindent' use existing indent structure\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_ci',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='cpoptions', abbreviation='cpo',\n-      short_desc=N_(\"flags for Vi-compatible behavior\"),\n-      type='string', list='flags', scope={'global'},\n-      redraw={'all_windows'},\n-      varname='p_cpo',\n-      defaults={if_true=macros('CPO_VIM')},\n-      cb='did_set_cpoptions'\n-    },\n-    {\n-      full_name='cursorbind', abbreviation='crb',\n-      short_desc=N_(\"move cursor in window as it moves in other windows\"),\n-      type='bool', scope={'window'},\n-      pv_name='p_crbind',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='cursorcolumn', abbreviation='cuc',\n-      short_desc=N_(\"highlight the screen column of the cursor\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window_only'},\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='cursorline', abbreviation='cul',\n-      short_desc=N_(\"highlight the screen line of the cursor\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window_only'},\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='cursorlineopt', abbreviation='culopt',\n-      short_desc=N_(\"settings for 'cursorline'\"),\n-      type='string', list='onecomma', scope={'window'},\n-      deny_duplicates=true,\n-      redraw={'current_window_only'},\n-      defaults={if_true=\"both\"},\n-      cb='did_set_cursorlineopt'\n-    },\n-    {\n-      full_name='debug',\n-      short_desc=N_(\"to \\\"msg\\\" to see all error messages\"),\n-      type='string', scope={'global'},\n-      varname='p_debug',\n-      defaults={if_true=\"\"},\n-      cb='did_set_debug'\n-    },\n-    {\n-      full_name='define', abbreviation='def',\n-      short_desc=N_(\"pattern to be used to find a macro definition\"),\n-      type='string', scope={'global', 'buffer'},\n-      alloced=true,\n-      redraw={'curswant'},\n-      varname='p_def',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='delcombine', abbreviation='deco',\n-      short_desc=N_(\"delete combining characters on their own\"),\n-      type='bool', scope={'global'},\n-      varname='p_deco',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='dictionary', abbreviation='dict',\n-      short_desc=N_(\"list of file names used for keyword completion\"),\n-      type='string', list='onecomma', scope={'global', 'buffer'},\n-      deny_duplicates=true,\n-      normal_dname_chars=true,\n-      expand=true,\n-      varname='p_dict',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='diff',\n-      short_desc=N_(\"diff mode for the current window\"),\n-      type='bool', scope={'window'},\n-      noglob=true,\n-      redraw={'current_window'},\n-      defaults={if_true=false},\n-      cb='did_set_diff'\n-    },\n-    {\n-      full_name='diffexpr', abbreviation='dex',\n-      short_desc=N_(\"expression used to obtain a diff file\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      redraw={'curswant'},\n-      varname='p_dex',\n-      defaults={if_true=\"\"},\n-      cb='did_set_optexpr'\n-    },\n-    {\n-      full_name='diffopt', abbreviation='dip',\n-      short_desc=N_(\"options for using diff mode\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      redraw={'current_window'},\n-      varname='p_dip',\n-      defaults={if_true=\"internal,filler,closeoff\"},\n-      cb='did_set_diffopt'\n-    },\n-    {\n-      full_name='digraph', abbreviation='dg',\n-      short_desc=N_(\"enable the entering of digraphs in Insert mode\"),\n-      type='bool', scope={'global'},\n-      varname='p_dg',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='directory', abbreviation='dir',\n-      short_desc=N_(\"list of directory names for the swap file\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      secure=true,\n-      expand='nodefault',\n-      varname='p_dir',\n-      defaults={if_true=''}\n-    },\n-    {\n-      full_name='display', abbreviation='dy',\n-      short_desc=N_(\"list of flags for how to display text\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      redraw={'all_windows'},\n-      varname='p_dy',\n-      defaults={if_true=\"lastline\"},\n-      cb='did_set_display'\n-    },\n-    {\n-      full_name='eadirection', abbreviation='ead',\n-      short_desc=N_(\"in which direction 'equalalways' works\"),\n-      type='string', scope={'global'},\n-      varname='p_ead',\n-      defaults={if_true=\"both\"},\n-      cb='did_set_eadirection'\n-    },\n-    {\n-      full_name='edcompatible', abbreviation='ed',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      varname='p_force_off',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='emoji', abbreviation='emo',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      redraw={'all_windows', 'ui_option'},\n-      varname='p_emoji',\n-      defaults={if_true=true},\n-      cb='did_set_ambiwidth'\n-    },\n-    {\n-      full_name='encoding', abbreviation='enc',\n-      short_desc=N_(\"encoding used internally\"),\n-      type='string', scope={'global'},\n-      deny_in_modelines=true,\n-      varname='p_enc',\n-      defaults={if_true=macros('ENC_DFLT')},\n-      cb='did_set_encoding'\n-    },\n-    {\n-      full_name='endoffile', abbreviation='eof',\n-      short_desc=N_(\"write CTRL-Z for last line in file\"),\n-      type='bool', scope={'buffer'},\n-      no_mkrc=true,\n-      redraw={'statuslines'},\n-      varname='p_eof',\n-      defaults={if_true=false},\n-      cb='did_set_eof_eol_fixeol_bomb'\n-    },\n-    {\n-      full_name='endofline', abbreviation='eol',\n-      short_desc=N_(\"write <EOL> for last line in file\"),\n-      type='bool', scope={'buffer'},\n-      no_mkrc=true,\n-      redraw={'statuslines'},\n-      varname='p_eol',\n-      defaults={if_true=true},\n-      cb='did_set_eof_eol_fixeol_bomb'\n-    },\n-    {\n-      full_name='equalalways', abbreviation='ea',\n-      short_desc=N_(\"windows are automatically made the same size\"),\n-      type='bool', scope={'global'},\n-      varname='p_ea',\n-      defaults={if_true=true},\n-      cb='did_set_equalalways'\n-    },\n-    {\n-      full_name='equalprg', abbreviation='ep',\n-      short_desc=N_(\"external program to use for \\\"=\\\" command\"),\n-      type='string', scope={'global', 'buffer'},\n-      secure=true,\n-      expand=true,\n-      varname='p_ep',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='errorbells', abbreviation='eb',\n-      short_desc=N_(\"ring the bell for error messages\"),\n-      type='bool', scope={'global'},\n-      varname='p_eb',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='errorfile', abbreviation='ef',\n-      short_desc=N_(\"name of the errorfile for the QuickFix mode\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      expand=true,\n-      varname='p_ef',\n-      defaults={if_true=macros('DFLT_ERRORFILE')}\n-    },\n-    {\n-      full_name='errorformat', abbreviation='efm',\n-      short_desc=N_(\"description of the lines in the error file\"),\n-      type='string', list='onecomma', scope={'global', 'buffer'},\n-      deny_duplicates=true,\n-      varname='p_efm',\n-      defaults={if_true=macros('DFLT_EFM')}\n-    },\n-    {\n-      full_name='eventignore', abbreviation='ei',\n-      short_desc=N_(\"autocommand events that are ignored\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_ei',\n-      defaults={if_true=\"\"},\n-      cb='did_set_eventignore'\n-    },\n-    {\n-      full_name='expandtab', abbreviation='et',\n-      short_desc=N_(\"use spaces when <Tab> is inserted\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_et',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='exrc', abbreviation='ex',\n-      short_desc=N_(\"read .nvimrc and .exrc in the current directory\"),\n-      type='bool', scope={'global'},\n-      secure=true,\n-      varname='p_exrc',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='fileencoding', abbreviation='fenc',\n-      short_desc=N_(\"file encoding for multi-byte text\"),\n-      type='string', scope={'buffer'},\n-      no_mkrc=true,\n-      alloced=true,\n-      redraw={'statuslines', 'current_buffer'},\n-      varname='p_fenc',\n-      defaults={if_true=\"\"},\n-      cb='did_set_encoding'\n-    },\n-    {\n-      full_name='fileencodings', abbreviation='fencs',\n-      short_desc=N_(\"automatically detected character encodings\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_fencs',\n-      defaults={if_true=\"ucs-bom,utf-8,default,latin1\"}\n-    },\n-    {\n-      full_name='fileformat', abbreviation='ff',\n-      short_desc=N_(\"file format used for file I/O\"),\n-      type='string', scope={'buffer'},\n-      no_mkrc=true,\n-      alloced=true,\n-      redraw={'curswant', 'statuslines'},\n-      varname='p_ff',\n-      defaults={if_true=macros('DFLT_FF')},\n-      cb='did_set_fileformat'\n-    },\n-    {\n-      full_name='fileformats', abbreviation='ffs',\n-      short_desc=N_(\"automatically detected values for 'fileformat'\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_ffs',\n-      defaults={if_true=macros('DFLT_FFS_VIM')},\n-      cb='did_set_fileformats'\n-    },\n-    {\n-      full_name='fileignorecase', abbreviation='fic',\n-      short_desc=N_(\"ignore case when using file names\"),\n-      type='bool', scope={'global'},\n-      varname='p_fic',\n-      defaults={\n-        condition='CASE_INSENSITIVE_FILENAME',\n-        if_true=true,\n-        if_false=false,\n-      }\n-    },\n-    {\n-      full_name='filetype', abbreviation='ft',\n-      short_desc=N_(\"type of file, used for autocommands\"),\n-      type='string', scope={'buffer'},\n-      noglob=true,\n-      normal_fname_chars=true,\n-      alloced=true,\n-      expand=true,\n-      varname='p_ft',\n-      defaults={if_true=\"\"},\n-      cb='did_set_filetype_or_syntax'\n-    },\n-    {\n-      full_name='fillchars', abbreviation='fcs',\n-      short_desc=N_(\"characters to use for displaying special items\"),\n-      type='string', list='onecomma', scope={'global', 'window'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      redraw={'current_window'},\n-      varname='p_fcs',\n-      defaults={if_true=''},\n-      cb='did_set_chars_option'\n-    },\n-    {\n-      full_name='fixendofline', abbreviation='fixeol',\n-      short_desc=N_(\"make sure last line in file has <EOL>\"),\n-      type='bool', scope={'buffer'},\n-      redraw={'statuslines'},\n-      varname='p_fixeol',\n-      defaults={if_true=true},\n-      cb='did_set_eof_eol_fixeol_bomb'\n-    },\n-    {\n-      full_name='foldclose', abbreviation='fcl',\n-      short_desc=N_(\"close a fold when the cursor leaves it\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      redraw={'current_window'},\n-      varname='p_fcl',\n-      defaults={if_true=\"\"},\n-      cb='did_set_foldclose'\n-    },\n-    {\n-      full_name='foldcolumn', abbreviation='fdc',\n-      short_desc=N_(\"width of the column used to indicate folds\"),\n-      type='string', scope={'window'},\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"0\"},\n-      cb='did_set_foldcolumn'\n-    },\n-    {\n-      full_name='foldenable', abbreviation='fen',\n-      short_desc=N_(\"set to display all folds open\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='foldexpr', abbreviation='fde',\n-      short_desc=N_(\"expression used when 'foldmethod' is \\\"expr\\\"\"),\n-      type='string', scope={'window'},\n-      modelineexpr=true,\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"0\"},\n-      cb='did_set_foldexpr'\n-    },\n-    {\n-      full_name='foldignore', abbreviation='fdi',\n-      short_desc=N_(\"ignore lines when 'foldmethod' is \\\"indent\\\"\"),\n-      type='string', scope={'window'},\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"#\"},\n-      cb='did_set_foldignore'\n-    },\n-    {\n-      full_name='foldlevel', abbreviation='fdl',\n-      short_desc=N_(\"close folds with a level higher than this\"),\n-      type='number', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=0},\n-      cb='did_set_foldlevel'\n-    },\n-    {\n-      full_name='foldlevelstart', abbreviation='fdls',\n-      short_desc=N_(\"'foldlevel' when starting to edit a file\"),\n-      type='number', scope={'global'},\n-      redraw={'curswant'},\n-      varname='p_fdls',\n-      defaults={if_true=-1}\n-    },\n-    {\n-      full_name='foldmarker', abbreviation='fmr',\n-      short_desc=N_(\"markers used when 'foldmethod' is \\\"marker\\\"\"),\n-      type='string', list='onecomma', scope={'window'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"{{{,}}}\"},\n-      cb='did_set_foldmarker'\n-    },\n-    {\n-      full_name='foldmethod', abbreviation='fdm',\n-      short_desc=N_(\"folding type\"),\n-      type='string', scope={'window'},\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"manual\"},\n-      cb='did_set_foldmethod'\n-    },\n-    {\n-      full_name='foldminlines', abbreviation='fml',\n-      short_desc=N_(\"minimum number of lines for a fold to be closed\"),\n-      type='number', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=1},\n-      cb='did_set_foldminlines'\n-    },\n-    {\n-      full_name='foldnestmax', abbreviation='fdn',\n-      short_desc=N_(\"maximum fold depth\"),\n-      type='number', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=20},\n-      cb='did_set_foldnestmax'\n-    },\n-    {\n-      full_name='foldopen', abbreviation='fdo',\n-      short_desc=N_(\"for which commands a fold will be opened\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      redraw={'curswant'},\n-      varname='p_fdo',\n-      defaults={if_true=\"block,hor,mark,percent,quickfix,search,tag,undo\"},\n-      cb='did_set_foldopen'\n-    },\n-    {\n-      full_name='foldtext', abbreviation='fdt',\n-      short_desc=N_(\"expression used to display for a closed fold\"),\n-      type='string', scope={'window'},\n-      modelineexpr=true,\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"foldtext()\"},\n-      cb='did_set_optexpr'\n-    },\n-    {\n-      full_name='formatexpr', abbreviation='fex',\n-      short_desc=N_(\"expression used with \\\"gq\\\" command\"),\n-      type='string', scope={'buffer'},\n-      modelineexpr=true,\n-      alloced=true,\n-      varname='p_fex',\n-      defaults={if_true=\"\"},\n-      cb='did_set_optexpr'\n-    },\n-    {\n-      full_name='formatoptions', abbreviation='fo',\n-      short_desc=N_(\"how automatic formatting is to be done\"),\n-      type='string', list='flags', scope={'buffer'},\n-      alloced=true,\n-      varname='p_fo',\n-      defaults={if_true=macros('DFLT_FO_VIM')},\n-      cb='did_set_formatoptions'\n-    },\n-    {\n-      full_name='formatlistpat', abbreviation='flp',\n-      short_desc=N_(\"pattern used to recognize a list header\"),\n-      type='string', scope={'buffer'},\n-      alloced=true,\n-      varname='p_flp',\n-      defaults={if_true=\"^\\\\s*\\\\d\\\\+[\\\\]:.)}\\\\t ]\\\\s*\"}\n-    },\n-    {\n-      full_name='formatprg', abbreviation='fp',\n-      short_desc=N_(\"name of external program used with \\\"gq\\\" command\"),\n-      type='string', scope={'global', 'buffer'},\n-      secure=true,\n-      expand=true,\n-      varname='p_fp',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='fsync', abbreviation='fs',\n-      short_desc=N_(\"whether to invoke fsync() after file write\"),\n-      type='bool', scope={'global'},\n-      secure=true,\n-      varname='p_fs',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='gdefault', abbreviation='gd',\n-      short_desc=N_(\"the \\\":substitute\\\" flag 'g' is default on\"),\n-      type='bool', scope={'global'},\n-      varname='p_gd',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='grepformat', abbreviation='gfm',\n-      short_desc=N_(\"format of 'grepprg' output\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_gefm',\n-      defaults={if_true=macros('DFLT_GREPFORMAT')}\n-    },\n-    {\n-      full_name='grepprg', abbreviation='gp',\n-      short_desc=N_(\"program to use for \\\":grep\\\"\"),\n-      type='string', scope={'global', 'buffer'},\n-      secure=true,\n-      expand=true,\n-      varname='p_gp',\n-      defaults={\n-        condition='MSWIN',\n-        -- Add an extra file name so that grep will always\n-        -- insert a file name in the match line. */\n-        if_true=\"findstr /n $* nul\",\n-        if_false=\"grep -n $* /dev/null\"\n-      }\n-    },\n-    {\n-      full_name='guicursor', abbreviation='gcr',\n-      short_desc=N_(\"GUI: settings for cursor shape and blinking\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_guicursor',\n-      defaults={if_true=\"n-v-c-sm:block,i-ci-ve:ver25,r-cr-o:hor20\"},\n-      cb='did_set_guicursor'\n-    },\n-    {\n-      full_name='guifont', abbreviation='gfn',\n-      short_desc=N_(\"GUI: Name(s) of font(s) to be used\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_guifont',\n-      redraw={'ui_option'},\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='guifontwide', abbreviation='gfw',\n-      short_desc=N_(\"list of font names for double-wide characters\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      redraw={'ui_option'},\n-      varname='p_guifontwide',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='guioptions', abbreviation='go',\n-      short_desc=N_(\"GUI: Which components and options are used\"),\n-      type='string', list='flags', scope={'global'},\n-      enable_if=false,\n-    },\n-    {\n-      full_name='guitablabel', abbreviation='gtl',\n-      short_desc=N_(\"GUI: custom label for a tab page\"),\n-      type='string', scope={'global'},\n-      modelineexpr=true,\n-      redraw={'current_window'},\n-      enable_if=false,\n-    },\n-    {\n-      full_name='guitabtooltip', abbreviation='gtt',\n-      short_desc=N_(\"GUI: custom tooltip for a tab page\"),\n-      type='string', scope={'global'},\n-      redraw={'current_window'},\n-      enable_if=false,\n-    },\n-    {\n-      full_name='helpfile', abbreviation='hf',\n-      short_desc=N_(\"full path name of the main help file\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      expand=true,\n-      varname='p_hf',\n-      defaults={if_true=macros('DFLT_HELPFILE')},\n-      cb='did_set_helpfile'\n-    },\n-    {\n-      full_name='helpheight', abbreviation='hh',\n-      short_desc=N_(\"minimum height of a new help window\"),\n-      type='number', scope={'global'},\n-      varname='p_hh',\n-      defaults={if_true=20},\n-      cb='did_set_helpheight'\n-    },\n-    {\n-      full_name='helplang', abbreviation='hlg',\n-      short_desc=N_(\"preferred help languages\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_hlg',\n-      defaults={if_true=\"\"},\n-      cb='did_set_helplang'\n-    },\n-    {\n-      full_name='hidden', abbreviation='hid',\n-      short_desc=N_(\"don't unload buffer when it is |abandon|ed\"),\n-      type='bool', scope={'global'},\n-      varname='p_hid',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='highlight', abbreviation='hl',\n-      short_desc=N_(\"sets highlighting mode for various occasions\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_hl',\n-      defaults={if_true=macros('HIGHLIGHT_INIT')},\n-      cb='did_set_highlight'\n-    },\n-    {\n-      full_name='history', abbreviation='hi',\n-      short_desc=N_(\"number of command-lines that are remembered\"),\n-      type='number', scope={'global'},\n-      varname='p_hi',\n-      defaults={if_true=10000}\n-    },\n-    {\n-      full_name='hkmap', abbreviation='hk',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      varname='p_force_off',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='hkmapp', abbreviation='hkp',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      varname='p_force_off',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='hlsearch', abbreviation='hls',\n-      short_desc=N_(\"highlight matches with last search pattern\"),\n-      type='bool', scope={'global'},\n-      redraw={'all_windows'},\n-      varname='p_hls',\n-      defaults={if_true=true},\n-      cb='did_set_hlsearch'\n-    },\n-    {\n-      full_name='icon',\n-      short_desc=N_(\"Vim set the text of the window icon\"),\n-      type='bool', scope={'global'},\n-      varname='p_icon',\n-      defaults={if_true=false},\n-      cb='did_set_title_icon'\n-    },\n-    {\n-      full_name='iconstring',\n-      short_desc=N_(\"to use for the Vim icon text\"),\n-      type='string', scope={'global'},\n-      modelineexpr=true,\n-      varname='p_iconstring',\n-      defaults={if_true=\"\"},\n-      cb='did_set_iconstring'\n-    },\n-    {\n-      full_name='ignorecase', abbreviation='ic',\n-      short_desc=N_(\"ignore case in search patterns\"),\n-      type='bool', scope={'global'},\n-      varname='p_ic',\n-      defaults={if_true=false},\n-      cb='did_set_ignorecase'\n-    },\n-    {\n-      full_name='imcmdline', abbreviation='imc',\n-      short_desc=N_(\"use IM when starting to edit a command line\"),\n-      type='bool', scope={'global'},\n-      enable_if=false,\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='imdisable', abbreviation='imd',\n-      short_desc=N_(\"do not use the IM in any mode\"),\n-      type='bool', scope={'global'},\n-      enable_if=false,\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='iminsert', abbreviation='imi',\n-      short_desc=N_(\"use :lmap or IM in Insert mode\"),\n-      type='number', scope={'buffer'},\n-      varname='p_iminsert', pv_name='p_imi',\n-      defaults={if_true=macros('B_IMODE_NONE')},\n-      cb='did_set_iminsert'\n-    },\n-    {\n-      full_name='imsearch', abbreviation='ims',\n-      short_desc=N_(\"use :lmap or IM when typing a search pattern\"),\n-      type='number', scope={'buffer'},\n-      varname='p_imsearch', pv_name='p_ims',\n-      defaults={\n-        if_true=macros('B_IMODE_USE_INSERT'),\n-      }\n-    },\n-    {\n-      full_name='inccommand', abbreviation='icm',\n-      short_desc=N_(\"Live preview of substitution\"),\n-      type='string', scope={'global'},\n-      varname='p_icm',\n-      defaults={if_true=\"nosplit\"},\n-      cb='did_set_inccommand'\n-    },\n-    {\n-      full_name='include', abbreviation='inc',\n-      short_desc=N_(\"pattern to be used to find an include file\"),\n-      type='string', scope={'global', 'buffer'},\n-      alloced=true,\n-      varname='p_inc',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='includeexpr', abbreviation='inex',\n-      short_desc=N_(\"expression used to process an include line\"),\n-      type='string', scope={'buffer'},\n-      modelineexpr=true,\n-      alloced=true,\n-      varname='p_inex',\n-      defaults={if_true=\"\"},\n-      cb='did_set_optexpr'\n-    },\n-    {\n-      full_name='incsearch', abbreviation='is',\n-      short_desc=N_(\"highlight match while typing search pattern\"),\n-      type='bool', scope={'global'},\n-      varname='p_is',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='indentexpr', abbreviation='inde',\n-      short_desc=N_(\"expression used to obtain the indent of a line\"),\n-      type='string', scope={'buffer'},\n-      modelineexpr=true,\n-      alloced=true,\n-      varname='p_inde',\n-      defaults={if_true=\"\"},\n-      cb='did_set_optexpr'\n-    },\n-    {\n-      full_name='indentkeys', abbreviation='indk',\n-      short_desc=N_(\"keys that trigger indenting with 'indentexpr'\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_indk',\n-      defaults={if_true=indentkeys_default}\n-    },\n-    {\n-      full_name='infercase', abbreviation='inf',\n-      short_desc=N_(\"adjust case of match for keyword completion\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_inf',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='insertmode', abbreviation='im',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      varname='p_force_off',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='isfname', abbreviation='isf',\n-      short_desc=N_(\"characters included in file names and pathnames\"),\n-      type='string', list='comma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_isf',\n-      defaults={\n-        condition='BACKSLASH_IN_FILENAME',\n-        -- Excluded are: & and ^ are special in cmd.exe\n-        -- ( and ) are used in text separating fnames */\n-        if_true=\"@,48-57,/,\\\\,.,-,_,+,,,#,$,%,{,},[,],:,@-@,!,~,=\",\n-        if_false=\"@,48-57,/,.,-,_,+,,,#,$,%,~,=\"\n+      deny_duplicates = true,\n+      desc = [=[\n+        A list of file patterns.  When one of the patterns matches with the\n+        name of the file which is written, no backup file is created.  Both\n+        the specified file name and the full path name of the file are used.\n+        The pattern is used like with |:autocmd|, see |autocmd-pattern|.\n+        Watch out for special characters, see |option-backslash|.\n+        When $TMPDIR, $TMP or $TEMP is not defined, it is not used for the\n+        default value.  \"/tmp/*\" is only used for Unix.\n+\n+        WARNING: Not having a backup file means that when Vim fails to write\n+        your buffer correctly and then, for whatever reason, Vim exits, you\n+        lose both the original file and what you were writing.  Only disable\n+        backups if you don't care about losing the file.\n+\n+        Note that environment variables are not expanded.  If you want to use\n+        $HOME you must expand it explicitly, e.g.: >\n+        \t:let &backupskip = escape(expand('$HOME'), '\\') .. '/tmp/*'\n+\n+        <\tNote that the default also makes sure that \"crontab -e\" works (when a\n+        backup would be made by renaming the original file crontab won't see\n+        the newly created file).  Also see 'backupcopy' and |crontab|.\n+      ]=],\n+      full_name = 'backupskip',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('no backup for files that match these patterns'),\n+      type = 'string',\n+      varname = 'p_bsk',\n+    },\n+    {\n+      abbreviation = 'bo',\n+      cb = 'did_set_belloff',\n+      defaults = { if_true = 'all' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Specifies for which events the bell will not be rung. It is a comma-\n+        separated list of items. For each item that is present, the bell\n+        will be silenced. This is most useful to specify specific events in\n+        insert mode to be silenced.\n+\n+        item\t    meaning when present\t~\n+        all\t    All events.\n+        backspace   When hitting <BS> or <Del> and deleting results in an\n+        \t    error.\n+        cursor\t    Fail to move around using the cursor keys or\n+        \t    <PageUp>/<PageDown> in |Insert-mode|.\n+        complete    Error occurred when using |i_CTRL-X_CTRL-K| or\n+        \t    |i_CTRL-X_CTRL-T|.\n+        copy\t    Cannot copy char from insert mode using |i_CTRL-Y| or\n+        \t    |i_CTRL-E|.\n+        ctrlg\t    Unknown Char after <C-G> in Insert mode.\n+        error\t    Other Error occurred (e.g. try to join last line)\n+        \t    (mostly used in |Normal-mode| or |Cmdline-mode|).\n+        esc\t    hitting <Esc> in |Normal-mode|.\n+        hangul\t    Ignored.\n+        lang\t    Calling the beep module for Lua/Mzscheme/TCL.\n+        mess\t    No output available for |g<|.\n+        showmatch   Error occurred for 'showmatch' function.\n+        operator    Empty region error |cpo-E|.\n+        register    Unknown register after <C-R> in |Insert-mode|.\n+        shell\t    Bell from shell output |:!|.\n+        spell\t    Error happened on spell suggest.\n+        wildmode    More matches in |cmdline-completion| available\n+        \t    (depends on the 'wildmode' setting).\n+\n+        This is most useful to fine tune when in Insert mode the bell should\n+        be rung. For Normal mode and Ex commands, the bell is often rung to\n+        indicate that an error occurred. It can be silenced by adding the\n+        \"error\" keyword.\n+      ]=],\n+      full_name = 'belloff',\n+      list = 'comma',\n+      scope = { 'global' },\n+      short_desc = N_('do not ring the bell for these reasons'),\n+      type = 'string',\n+      varname = 'p_bo',\n+    },\n+    {\n+      abbreviation = 'bin',\n+      cb = 'did_set_binary',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        This option should be set before editing a binary file.  You can also\n+        use the |-b| Vim argument.  When this option is switched on a few\n+        options will be changed (also when it already was on):\n+        \t'textwidth'  will be set to 0\n+        \t'wrapmargin' will be set to 0\n+        \t'modeline'   will be off\n+        \t'expandtab'  will be off\n+        Also, 'fileformat' and 'fileformats' options will not be used, the\n+        file is read and written like 'fileformat' was \"unix\" (a single <NL>\n+        separates lines).\n+        The 'fileencoding' and 'fileencodings' options will not be used, the\n+        file is read without conversion.\n+        NOTE: When you start editing a(nother) file while the 'bin' option is\n+        on, settings from autocommands may change the settings again (e.g.,\n+        'textwidth'), causing trouble when editing.  You might want to set\n+        'bin' again when the file has been loaded.\n+        The previous values of these options are remembered and restored when\n+        'bin' is switched from on to off.  Each buffer has its own set of\n+        saved option values.\n+        To edit a file with 'binary' set you can use the |++bin| argument.\n+        This avoids you have to do \":set bin\", which would have effect for all\n+        files you edit.\n+        When writing a file the <EOL> for the last line is only written if\n+        there was one in the original file (normally Vim appends an <EOL> to\n+        the last line if there is none; this would make the file longer).  See\n+        the 'endofline' option.\n+      ]=],\n+      full_name = 'binary',\n+      redraw = { 'statuslines' },\n+      scope = { 'buffer' },\n+      short_desc = N_('read/write/edit file in binary mode'),\n+      type = 'bool',\n+      varname = 'p_bin',\n+    },\n+    {\n+      cb = 'did_set_eof_eol_fixeol_bomb',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        When writing a file and the following conditions are met, a BOM (Byte\n+        Order Mark) is prepended to the file:\n+        - this option is on\n+        - the 'binary' option is off\n+        - 'fileencoding' is \"utf-8\", \"ucs-2\", \"ucs-4\" or one of the little/big\n+          endian variants.\n+        Some applications use the BOM to recognize the encoding of the file.\n+        Often used for UCS-2 files on MS-Windows.  For other applications it\n+        causes trouble, for example: \"cat file1 file2\" makes the BOM of file2\n+        appear halfway through the resulting file.  Gcc doesn't accept a BOM.\n+        When Vim reads a file and 'fileencodings' starts with \"ucs-bom\", a\n+        check for the presence of the BOM is done and 'bomb' set accordingly.\n+        Unless 'binary' is set, it is removed from the first line, so that you\n+        don't see it when editing.  When you don't change the options, the BOM\n+        will be restored when writing the file.\n+      ]=],\n+      full_name = 'bomb',\n+      no_mkrc = true,\n+      redraw = { 'statuslines' },\n+      scope = { 'buffer' },\n+      short_desc = N_('a Byte Order Mark to the file'),\n+      type = 'bool',\n+      varname = 'p_bomb',\n+    },\n+    {\n+      abbreviation = 'brk',\n+      cb = 'did_set_breakat',\n+      defaults = {\n+        if_true = ' \\t!@*-+;:,./?',\n+        doc = '\" ^I!@*-+;:,./?\"',\n       },\n-      cb='did_set_isopt'\n-    },\n-    {\n-      full_name='isident', abbreviation='isi',\n-      short_desc=N_(\"characters included in identifiers\"),\n-      type='string', list='comma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_isi',\n-      defaults={\n-        condition='MSWIN',\n-        if_true=\"@,48-57,_,128-167,224-235\",\n-        if_false=\"@,48-57,_,192-255\"\n+      desc = [=[\n+        This option lets you choose which characters might cause a line\n+        break if 'linebreak' is on.  Only works for ASCII characters.\n+      ]=],\n+      full_name = 'breakat',\n+      list = 'flags',\n+      redraw = { 'all_windows' },\n+      scope = { 'global' },\n+      short_desc = N_('characters that may cause a line break'),\n+      type = 'string',\n+      varname = 'p_breakat',\n+    },\n+    {\n+      abbreviation = 'bri',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Every wrapped line will continue visually indented (same amount of\n+        space as the beginning of that line), thus preserving horizontal blocks\n+        of text.\n+      ]=],\n+      full_name = 'breakindent',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('wrapped line repeats indent'),\n+      type = 'bool',\n+    },\n+    {\n+      abbreviation = 'briopt',\n+      alloced = true,\n+      cb = 'did_set_breakindentopt',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Settings for 'breakindent'. It can consist of the following optional\n+        items and must be separated by a comma:\n+        \tmin:{n}\t    Minimum text width that will be kept after\n+        \t\t    applying 'breakindent', even if the resulting\n+        \t\t    text should normally be narrower. This prevents\n+        \t\t    text indented almost to the right window border\n+        \t\t    occupying lot of vertical space when broken.\n+        \t\t    (default: 20)\n+        \tshift:{n}   After applying 'breakindent', the wrapped line's\n+        \t\t    beginning will be shifted by the given number of\n+        \t\t    characters.  It permits dynamic French paragraph\n+        \t\t    indentation (negative) or emphasizing the line\n+        \t\t    continuation (positive).\n+        \t\t    (default: 0)\n+        \tsbr\t    Display the 'showbreak' value before applying the\n+        \t\t    additional indent.\n+        \t\t    (default: off)\n+        \tlist:{n}    Adds an additional indent for lines that match a\n+        \t\t    numbered or bulleted list (using the\n+        \t\t    'formatlistpat' setting).\n+        \tlist:-1\t    Uses the length of a match with 'formatlistpat'\n+        \t\t    for indentation.\n+        \t\t    (default: 0)\n+        \tcolumn:{n}  Indent at column {n}. Will overrule the other\n+        \t\t    sub-options. Note: an additional indent may be\n+        \t\t    added for the 'showbreak' setting.\n+        \t\t    (default: off)\n+      ]=],\n+      full_name = 'breakindentopt',\n+      list = 'onecomma',\n+      redraw = { 'current_buffer' },\n+      scope = { 'window' },\n+      short_desc = N_(\"settings for 'breakindent'\"),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'bsdir',\n+      defaults = {\n+        if_true = '',\n+        doc = '\"last\"',\n       },\n-      cb='did_set_isopt'\n-    },\n-    {\n-      full_name='iskeyword', abbreviation='isk',\n-      short_desc=N_(\"characters included in keywords\"),\n-      type='string', list='comma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_isk',\n-      defaults={if_true=\"@,48-57,_,192-255\"},\n-      cb='did_set_isopt'\n-    },\n-    {\n-      full_name='isprint', abbreviation='isp',\n-      short_desc=N_(\"printable characters\"),\n-      type='string', list='comma', scope={'global'},\n-      deny_duplicates=true,\n-      redraw={'all_windows'},\n-      varname='p_isp',\n-      defaults={if_true=\"@,161-255\"},\n-      cb='did_set_isopt'\n-    },\n-    {\n-      full_name='joinspaces', abbreviation='js',\n-      short_desc=N_(\"two spaces after a period with a join command\"),\n-      type='bool', scope={'global'},\n-      varname='p_js',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='jumpoptions', abbreviation='jop',\n-      short_desc=N_(\"Controls the behavior of the jumplist\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_jop',\n-      defaults={if_true=''},\n-      cb='did_set_jumpoptions'\n-    },\n-    {\n-      full_name='keymap', abbreviation='kmp',\n-      short_desc=N_(\"name of a keyboard mapping\"),\n-      type='string', scope={'buffer'},\n-      normal_fname_chars=true,\n-      pri_mkrc=true,\n-      alloced=true,\n-      redraw={'statuslines', 'current_buffer'},\n-      varname='p_keymap', pv_name='p_kmap',\n-      defaults={if_true=\"\"},\n-      cb='did_set_keymap'\n-    },\n-    {\n-      full_name='keymodel', abbreviation='km',\n-      short_desc=N_(\"enable starting/stopping selection with keys\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_km',\n-      defaults={if_true=\"\"},\n-      cb='did_set_keymodel'\n-    },\n-    {\n-      full_name='keywordprg', abbreviation='kp',\n-      short_desc=N_(\"program to use for the \\\"K\\\" command\"),\n-      type='string', scope={'global', 'buffer'},\n-      secure=true,\n-      expand=true,\n-      varname='p_kp',\n-      defaults={\n-        if_true=\":Man\",\n-      }\n-    },\n-    {\n-      full_name='langmap', abbreviation='lmap',\n-      short_desc=N_(\"alphabetic characters for other language mode\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      secure=true,\n-      varname='p_langmap',\n-      defaults={if_true=\"\"},\n-      cb='did_set_langmap'\n-    },\n-    {\n-      full_name='langmenu', abbreviation='lm',\n-      short_desc=N_(\"language to be used for the menus\"),\n-      type='string', scope={'global'},\n-      normal_fname_chars=true,\n-      varname='p_lm',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='langnoremap', abbreviation='lnr',\n-      short_desc=N_(\"do not apply 'langmap' to mapped characters\"),\n-      type='bool', scope={'global'},\n-      varname='p_lnr',\n-      defaults={if_true=true},\n-      cb='did_set_langnoremap'\n-    },\n-    {\n-      full_name='langremap', abbreviation='lrm',\n-      short_desc=N_('No description'),\n-      type='bool', scope={'global'},\n-      varname='p_lrm',\n-      defaults={if_true=false},\n-      cb='did_set_langremap'\n-    },\n-    {\n-      full_name='laststatus', abbreviation='ls',\n-      short_desc=N_(\"tells when last window has status lines\"),\n-      type='number', scope={'global'},\n-      redraw={'all_windows'},\n-      varname='p_ls',\n-      defaults={if_true=2},\n-      cb='did_set_laststatus'\n-    },\n-    {\n-      full_name='lazyredraw', abbreviation='lz',\n-      short_desc=N_(\"don't redraw while executing macros\"),\n-      type='bool', scope={'global'},\n-      varname='p_lz',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='linebreak', abbreviation='lbr',\n-      short_desc=N_(\"wrap long lines at a blank\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='lines',\n-      short_desc=N_(\"of lines in the display\"),\n-      type='number', scope={'global'},\n-      no_mkrc=true,\n-      varname='p_lines',\n-      defaults={if_true=macros('DFLT_ROWS')}\n-    },\n-    {\n-      full_name='linespace', abbreviation='lsp',\n-      short_desc=N_(\"number of pixel lines to use between characters\"),\n-      type='number', scope={'global'},\n-      redraw={'ui_option'},\n-      varname='p_linespace',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='lisp',\n-      short_desc=N_(\"indenting for Lisp\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_lisp',\n-      defaults={if_true=false},\n-      cb='did_set_lisp'\n-    },\n-    {\n-      full_name='lispoptions', abbreviation='lop',\n-      short_desc=N_(\"options for lisp indenting\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      varname='p_lop', pv_name='p_lop',\n-      defaults={if_true=''},\n-      cb='did_set_lispoptions'\n-    },\n-    {\n-      full_name='lispwords', abbreviation='lw',\n-      short_desc=N_(\"words that change how lisp indenting works\"),\n-      type='string', list='onecomma', scope={'global', 'buffer'},\n-      deny_duplicates=true,\n-      varname='p_lispwords', pv_name='p_lw',\n-      defaults={if_true=macros('LISPWORD_VALUE')}\n-    },\n-    {\n-      full_name='list',\n-      short_desc=N_(\"<Tab> and <EOL>\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='listchars', abbreviation='lcs',\n-      short_desc=N_(\"characters for displaying in list mode\"),\n-      type='string', list='onecomma', scope={'global', 'window'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      redraw={'current_window'},\n-      varname='p_lcs',\n-      defaults={if_true=\"tab:> ,trail:-,nbsp:+\"},\n-      cb='did_set_chars_option'\n-    },\n-    {\n-      full_name='loadplugins', abbreviation='lpl',\n-      short_desc=N_(\"load plugin scripts when starting up\"),\n-      type='bool', scope={'global'},\n-      varname='p_lpl',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='magic',\n-      short_desc=N_(\"special characters in search patterns\"),\n-      type='bool', scope={'global'},\n-      varname='p_magic',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='makeef', abbreviation='mef',\n-      short_desc=N_(\"name of the errorfile for \\\":make\\\"\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      expand=true,\n-      varname='p_mef',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='makeencoding', abbreviation='menc',\n-      short_desc=N_(\"Converts the output of external commands\"),\n-      type='string', scope={'global', 'buffer'},\n-      varname='p_menc',\n-      defaults={if_true=\"\"},\n-      cb='did_set_encoding'\n-    },\n-    {\n-      full_name='makeprg', abbreviation='mp',\n-      short_desc=N_(\"program to use for the \\\":make\\\" command\"),\n-      type='string', scope={'global', 'buffer'},\n-      secure=true,\n-      expand=true,\n-      varname='p_mp',\n-      defaults={if_true=\"make\"}\n-    },\n-    {\n-      full_name='matchpairs', abbreviation='mps',\n-      short_desc=N_(\"pairs of characters that \\\"%\\\" can match\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_mps',\n-      defaults={if_true=\"(:),{:},[:]\"},\n-      cb='did_set_matchpairs'\n-    },\n-    {\n-      full_name='matchtime', abbreviation='mat',\n-      short_desc=N_(\"tenths of a second to show matching paren\"),\n-      type='number', scope={'global'},\n-      varname='p_mat',\n-      defaults={if_true=5}\n-    },\n-    {\n-      full_name='maxcombine', abbreviation='mco',\n-      short_desc=N_(\"maximum nr of combining characters displayed\"),\n-      type='number', scope={'global'},\n-      varname='p_mco',\n-      defaults={if_true=6}\n-    },\n-    {\n-      full_name='maxfuncdepth', abbreviation='mfd',\n-      short_desc=N_(\"maximum recursive depth for user functions\"),\n-      type='number', scope={'global'},\n-      varname='p_mfd',\n-      defaults={if_true=100}\n-    },\n-    {\n-      full_name='maxmapdepth', abbreviation='mmd',\n-      short_desc=N_(\"maximum recursive depth for mapping\"),\n-      type='number', scope={'global'},\n-      varname='p_mmd',\n-      defaults={if_true=1000}\n-    },\n-    {\n-      full_name='maxmempattern', abbreviation='mmp',\n-      short_desc=N_(\"maximum memory (in Kbyte) used for pattern search\"),\n-      type='number', scope={'global'},\n-      varname='p_mmp',\n-      defaults={if_true=1000}\n-    },\n-    {\n-      full_name='menuitems', abbreviation='mis',\n-      short_desc=N_(\"maximum number of items in a menu\"),\n-      type='number', scope={'global'},\n-      varname='p_mis',\n-      defaults={if_true=25}\n-    },\n-    {\n-      full_name='mkspellmem', abbreviation='msm',\n-      short_desc=N_(\"memory used before |:mkspell| compresses the tree\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      expand=true,\n-      varname='p_msm',\n-      defaults={if_true=\"460000,2000,500\"},\n-      cb='did_set_mkspellmem'\n-    },\n-    {\n-      full_name='modeline', abbreviation='ml',\n-      short_desc=N_(\"recognize modelines at start or end of file\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_ml',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='modelineexpr', abbreviation='mle',\n-      short_desc=N_(\"allow some options to be set in modeline\"),\n-      type='bool', scope={'global'},\n-      secure=true,\n-      varname='p_mle',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='modelines', abbreviation='mls',\n-      short_desc=N_(\"number of lines checked for modelines\"),\n-      type='number', scope={'global'},\n-      varname='p_mls',\n-      defaults={if_true=5}\n-    },\n-    {\n-      full_name='modifiable', abbreviation='ma',\n-      short_desc=N_(\"changes to the text are not possible\"),\n-      type='bool', scope={'buffer'},\n-      noglob=true,\n-      varname='p_ma',\n-      defaults={if_true=true},\n-      cb='did_set_modifiable'\n-    },\n-    {\n-      full_name='modified', abbreviation='mod',\n-      short_desc=N_(\"buffer has been modified\"),\n-      type='bool', scope={'buffer'},\n-      no_mkrc=true,\n-      redraw={'statuslines'},\n-      varname='p_mod',\n-      defaults={if_true=false},\n-      cb='did_set_modified'\n-    },\n-    {\n-      full_name='more',\n-      short_desc=N_(\"listings when the whole screen is filled\"),\n-      type='bool', scope={'global'},\n-      varname='p_more',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='mouse',\n-      short_desc=N_(\"the use of mouse clicks\"),\n-      type='string', list='flags', scope={'global'},\n-      varname='p_mouse',\n-      defaults={if_true=\"nvi\"},\n-      cb='did_set_mouse'\n-    },\n-    {\n-      full_name='mousefocus', abbreviation='mousef',\n-      short_desc=N_(\"keyboard focus follows the mouse\"),\n-      type='bool', scope={'global'},\n-      redraw={'ui_option'},\n-      varname='p_mousef',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='mousehide', abbreviation='mh',\n-      short_desc=N_(\"hide mouse pointer while typing\"),\n-      type='bool', scope={'global'},\n-      enable_if=false,\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='mousemodel', abbreviation='mousem',\n-      short_desc=N_(\"changes meaning of mouse buttons\"),\n-      type='string', scope={'global'},\n-      varname='p_mousem',\n-      defaults={if_true=\"popup_setpos\"},\n-      cb='did_set_mousemodel'\n-    },\n-    {\n-      full_name='mousemoveevent', abbreviation='mousemev',\n-      short_desc=N_(\"deliver mouse move events to input queue\"),\n-      type='bool', scope={'global'},\n-      redraw={'ui_option'},\n-      varname='p_mousemev',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='mousescroll',\n-      short_desc=N_(\"amount to scroll by when scrolling with a mouse\"),\n-      type='string', list='comma', scope={'global'},\n-      vi_def=true,\n-      varname='p_mousescroll',\n-      defaults={if_true=\"ver:3,hor:6\"},\n-      cb='did_set_mousescroll'\n-    },\n-    {\n-      full_name='mouseshape', abbreviation='mouses',\n-      short_desc=N_(\"shape of the mouse pointer in different modes\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      enable_if=false,\n-    },\n-    {\n-      full_name='mousetime', abbreviation='mouset',\n-      short_desc=N_(\"max time between mouse double-click\"),\n-      type='number', scope={'global'},\n-      varname='p_mouset',\n-      defaults={if_true=500}\n-    },\n-    {\n-      full_name='nrformats', abbreviation='nf',\n-      short_desc=N_(\"number formats recognized for CTRL-A command\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_nf',\n-      defaults={if_true=\"bin,hex\"},\n-      cb='did_set_nrformats'\n-    },\n-    {\n-      full_name='number', abbreviation='nu',\n-      short_desc=N_(\"print the line number in front of each line\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=false},\n-      cb='did_set_number_relativenumber'\n-    },\n-    {\n-      full_name='numberwidth', abbreviation='nuw',\n-      short_desc=N_(\"number of columns used for the line number\"),\n-      type='number', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=4},\n-      cb='did_set_numberwidth'\n-    },\n-    {\n-      full_name='omnifunc', abbreviation='ofu',\n-      short_desc=N_(\"function for filetype-specific completion\"),\n-      type='string', scope={'buffer'},\n-      secure=true,\n-      alloced=true,\n-      func=true,\n-      varname='p_ofu',\n-      defaults={if_true=\"\"},\n-      cb='did_set_omnifunc'\n-    },\n-    {\n-      full_name='opendevice', abbreviation='odev',\n-      short_desc=N_(\"allow reading/writing devices on MS-Windows\"),\n-      type='bool', scope={'global'},\n-      enable_if=false,\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='operatorfunc', abbreviation='opfunc',\n-      short_desc=N_(\"function to be called for |g@| operator\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      func=true,\n-      varname='p_opfunc',\n-      defaults={if_true=\"\"},\n-      cb='did_set_operatorfunc'\n-    },\n-    {\n-      full_name='packpath', abbreviation='pp',\n-      short_desc=N_(\"list of directories used for packages\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      secure=true,\n-      expand=true,\n-      varname='p_pp',\n-      defaults={if_true=''},\n-      cb='did_set_runtimepackpath'\n-    },\n-    {\n-      full_name='paragraphs', abbreviation='para',\n-      short_desc=N_(\"nroff macros that separate paragraphs\"),\n-      type='string', scope={'global'},\n-      varname='p_para',\n-      defaults={if_true=\"IPLPPPQPP TPHPLIPpLpItpplpipbp\"}\n-    },\n-    {\n-      full_name='paste',\n-      short_desc=N_(\"pasting text\"),\n-      type='bool', scope={'global'},\n-      pri_mkrc=true,\n-      varname='p_paste',\n-      defaults={if_true=false},\n-      cb='did_set_paste'\n-    },\n-    {\n-      full_name='pastetoggle', abbreviation='pt',\n-      short_desc=N_(\"No description\"),\n-      type='string', scope={'global'},\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='patchexpr', abbreviation='pex',\n-      short_desc=N_(\"expression used to patch a file\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      varname='p_pex',\n-      defaults={if_true=\"\"},\n-      cb='did_set_optexpr'\n-    },\n-    {\n-      full_name='patchmode', abbreviation='pm',\n-      short_desc=N_(\"keep the oldest version of a file\"),\n-      type='string', scope={'global'},\n-      normal_fname_chars=true,\n-      varname='p_pm',\n-      defaults={if_true=\"\"},\n-      cb='did_set_backupext_or_patchmode'\n-    },\n-    {\n-      full_name='path', abbreviation='pa',\n-      short_desc=N_(\"list of directories searched with \\\"gf\\\" et.al.\"),\n-      type='string', list='comma', scope={'global', 'buffer'},\n-      deny_duplicates=true,\n-      expand=true,\n-      varname='p_path',\n-      defaults={if_true=\".,,\"}\n-    },\n-    {\n-      full_name='preserveindent', abbreviation='pi',\n-      short_desc=N_(\"preserve the indent structure when reindenting\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_pi',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='previewheight', abbreviation='pvh',\n-      short_desc=N_(\"height of the preview window\"),\n-      type='number', scope={'global'},\n-      varname='p_pvh',\n-      defaults={if_true=12}\n-    },\n-    {\n-      full_name='previewwindow', abbreviation='pvw',\n-      short_desc=N_(\"identifies the preview window\"),\n-      type='bool', scope={'window'},\n-      noglob=true,\n-      redraw={'statuslines'},\n-      defaults={if_true=false},\n-      cb='did_set_previewwindow'\n-    },\n-    {\n-      full_name='prompt',\n-      short_desc=N_(\"enable prompt in Ex mode\"),\n-      type='bool', scope={'global'},\n-      varname='p_force_on',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='pumblend', abbreviation='pb',\n-      short_desc=N_(\"Controls transparency level of popup menu\"),\n-      type='number', scope={'global'},\n-      redraw={'ui_option'},\n-      varname='p_pb',\n-      defaults={if_true=0},\n-      cb='did_set_pumblend'\n-    },\n-    {\n-      full_name='pumheight', abbreviation='ph',\n-      short_desc=N_(\"maximum height of the popup menu\"),\n-      type='number', scope={'global'},\n-      varname='p_ph',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='pumwidth', abbreviation='pw',\n-      short_desc=N_(\"minimum width of the popup menu\"),\n-      type='number', scope={'global'},\n-      varname='p_pw',\n-      defaults={if_true=15}\n-    },\n-    {\n-      full_name='pyxversion', abbreviation='pyx',\n-      short_desc=N_(\"selects default python version to use\"),\n-      type='number', scope={'global'},\n-      secure=true,\n-      varname='p_pyx',\n-      defaults={if_true=3}\n-    },\n-    {\n-      full_name='quickfixtextfunc', abbreviation='qftf',\n-      short_desc=N_(\"customize the quickfix window\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      func=true,\n-      varname='p_qftf',\n-      defaults={if_true=\"\"},\n-      cb='did_set_quickfixtextfunc'\n-    },\n-    {\n-      full_name='quoteescape', abbreviation='qe',\n-      short_desc=N_(\"escape characters used in a string\"),\n-      type='string', scope={'buffer'},\n-      alloced=true,\n-      varname='p_qe',\n-      defaults={if_true=\"\\\\\"}\n-    },\n-    {\n-      full_name='readonly', abbreviation='ro',\n-      short_desc=N_(\"disallow writing the buffer\"),\n-      type='bool', scope={'buffer'},\n-      noglob=true,\n-      redraw={'statuslines'},\n-      varname='p_ro',\n-      defaults={if_true=false},\n-      cb='did_set_readonly'\n-    },\n-    {\n-      full_name='redrawdebug', abbreviation='rdb',\n-      short_desc=N_(\"Changes the way redrawing works (debug)\"),\n-      type='string', list='onecomma', scope={'global'},\n-      varname='p_rdb',\n-      defaults={if_true=''},\n-      cb='did_set_redrawdebug'\n-    },\n-    {\n-      full_name='redrawtime', abbreviation='rdt',\n-      short_desc=N_(\"timeout for 'hlsearch' and |:match| highlighting\"),\n-      type='number', scope={'global'},\n-      varname='p_rdt',\n-      defaults={if_true=2000}\n-    },\n-    {\n-      full_name='regexpengine', abbreviation='re',\n-      short_desc=N_(\"default regexp engine to use\"),\n-      type='number', scope={'global'},\n-      varname='p_re',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='relativenumber', abbreviation='rnu',\n-      short_desc=N_(\"show relative line number in front of each line\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=false},\n-      cb='did_set_number_relativenumber'\n-    },\n-    {\n-      full_name='remap',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      varname='p_force_on',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='report',\n-      short_desc=N_(\"for reporting nr. of lines changed\"),\n-      type='number', scope={'global'},\n-      varname='p_report',\n-      defaults={if_true=2}\n-    },\n-    {\n-      full_name='revins', abbreviation='ri',\n-      short_desc=N_(\"inserting characters will work backwards\"),\n-      type='bool', scope={'global'},\n-      varname='p_ri',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='rightleft', abbreviation='rl',\n-      short_desc=N_(\"window is right-to-left oriented\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='rightleftcmd', abbreviation='rlc',\n-      short_desc=N_(\"commands for which editing works right-to-left\"),\n-      type='string', scope={'window'},\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"search\"},\n-      cb='did_set_rightleftcmd'\n-    },\n-    {\n-      full_name='ruler', abbreviation='ru',\n-      short_desc=N_(\"show cursor line and column in the status line\"),\n-      type='bool', scope={'global'},\n-      redraw={'statuslines'},\n-      varname='p_ru',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='rulerformat', abbreviation='ruf',\n-      short_desc=N_(\"custom format for the ruler\"),\n-      type='string', scope={'global'},\n-      alloced=true,\n-      modelineexpr=true,\n-      redraw={'statuslines'},\n-      varname='p_ruf',\n-      defaults={if_true=\"\"},\n-      cb='did_set_rulerformat'\n-    },\n-    {\n-      full_name='runtimepath', abbreviation='rtp',\n-      short_desc=N_(\"list of directories used for runtime files\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      secure=true,\n-      expand='nodefault',\n-      varname='p_rtp',\n-      defaults={if_true=''},\n-      cb='did_set_runtimepackpath'\n-    },\n-    {\n-      full_name='scroll', abbreviation='scr',\n-      short_desc=N_(\"lines to scroll with CTRL-U and CTRL-D\"),\n-      type='number', scope={'window'},\n-      no_mkrc=true,\n-      pv_name='p_scroll',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='smoothscroll', abbreviation='sms',\n-      short_desc=N_(\"scroll by screen lines when 'wrap' is set\"),\n-      type='bool', scope={'window'},\n-      pv_name='p_sms',\n-      redraw={'current_window'},\n-      defaults={if_true=0},\n-      cb='did_set_smoothscroll'\n-    },\n-    {\n-      full_name='scrollback', abbreviation='scbk',\n-      short_desc=N_(\"lines to scroll with CTRL-U and CTRL-D\"),\n-      type='number', scope={'buffer'},\n-      varname='p_scbk',\n-      redraw={'current_buffer'},\n-      defaults={if_true=-1},\n-      cb='did_set_scrollback'\n-    },\n-    {\n-      full_name='scrollbind', abbreviation='scb',\n-      short_desc=N_(\"scroll in window as other windows scroll\"),\n-      type='bool', scope={'window'},\n-      pv_name='p_scbind',\n-      defaults={if_true=false},\n-      cb='did_set_scrollbind'\n-    },\n-    {\n-      full_name='scrolljump', abbreviation='sj',\n-      short_desc=N_(\"minimum number of lines to scroll\"),\n-      type='number', scope={'global'},\n-      varname='p_sj',\n-      defaults={if_true=1}\n-    },\n-    {\n-      full_name='scrolloff', abbreviation='so',\n-      short_desc=N_(\"minimum nr. of lines above and below cursor\"),\n-      type='number', scope={'global', 'window'},\n-      varname='p_so',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='scrollopt', abbreviation='sbo',\n-      short_desc=N_(\"how 'scrollbind' should behave\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_sbo',\n-      defaults={if_true=\"ver,jump\"},\n-      cb='did_set_scrollopt'\n-    },\n-    {\n-      full_name='sections', abbreviation='sect',\n-      short_desc=N_(\"nroff macros that separate sections\"),\n-      type='string', scope={'global'},\n-      varname='p_sections',\n-      defaults={if_true=\"SHNHH HUnhsh\"}\n-    },\n-    {\n-      full_name='secure',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      secure=true,\n-      varname='p_secure',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='selection', abbreviation='sel',\n-      short_desc=N_(\"what type of selection to use\"),\n-      type='string', scope={'global'},\n-      varname='p_sel',\n-      defaults={if_true=\"inclusive\"},\n-      cb='did_set_selection'\n-    },\n-    {\n-      full_name='selectmode', abbreviation='slm',\n-      short_desc=N_(\"when to use Select mode instead of Visual mode\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_slm',\n-      defaults={if_true=\"\"},\n-      cb='did_set_selectmode'\n-    },\n-    {\n-      full_name='sessionoptions', abbreviation='ssop',\n-      short_desc=N_(\"options for |:mksession|\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_ssop',\n-      defaults={if_true=\"blank,buffers,curdir,folds,help,tabpages,winsize,terminal\"},\n-      cb='did_set_sessionoptions',\n-    },\n-    {\n-      full_name='shada', abbreviation='sd',\n-      short_desc=N_(\"use .shada file upon startup and exiting\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      secure=true,\n-      varname='p_shada',\n-      defaults={if_true=\"!,'100,<50,s10,h\"}\n-    },\n-    {\n-      full_name='shadafile', abbreviation='sdf',\n-      short_desc=N_(\"overrides the filename used for shada\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      secure=true,\n-      expand=true,\n-      varname='p_shadafile',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='shell', abbreviation='sh',\n-      short_desc=N_(\"name of shell to use for external commands\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      expand=true,\n-      varname='p_sh',\n-      defaults={\n-        condition='MSWIN',\n-        if_true=\"cmd.exe\",\n-        if_false=\"sh\"\n-      }\n-    },\n-    {\n-      full_name='shellcmdflag', abbreviation='shcf',\n-      short_desc=N_(\"flag to shell to execute one command\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      varname='p_shcf',\n-      defaults={\n-        condition='MSWIN',\n-        if_true=\"/s /c\",\n-        if_false=\"-c\"\n-      }\n-    },\n-    {\n-      full_name='shellpipe', abbreviation='sp',\n-      short_desc=N_(\"string to put output of \\\":make\\\" in error file\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      varname='p_sp',\n-      defaults={\n-        condition='MSWIN',\n-        if_true=\"2>&1| tee\",\n-        if_false=\"| tee\",\n-      }\n-    },\n-    {\n-      full_name='shellquote', abbreviation='shq',\n-      short_desc=N_(\"quote character(s) for around shell command\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      varname='p_shq',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='shellredir', abbreviation='srr',\n-      short_desc=N_(\"string to put output of filter in a temp file\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      varname='p_srr',\n-      defaults={\n-        condition='MSWIN',\n-        if_true=\">%s 2>&1\",\n-        if_false=\">\"\n-      }\n-    },\n-    {\n-      full_name='shellslash', abbreviation='ssl',\n-      short_desc=N_(\"use forward slash for shell file names\"),\n-      type='bool', scope={'global'},\n-      varname='p_ssl',\n-      enable_if='BACKSLASH_IN_FILENAME',\n-      defaults={if_true=false},\n-      cb='did_set_shellslash'\n-    },\n-    {\n-      full_name='shelltemp', abbreviation='stmp',\n-      short_desc=N_(\"whether to use a temp file for shell commands\"),\n-      type='bool', scope={'global'},\n-      varname='p_stmp',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='shellxquote', abbreviation='sxq',\n-      short_desc=N_(\"like 'shellquote', but include redirection\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      varname='p_sxq',\n-      defaults={\n-        condition='MSWIN',\n-        if_true=\"\\\"\",\n-        if_false=\"\",\n-      }\n-    },\n-    {\n-      full_name='shellxescape', abbreviation='sxe',\n-      short_desc=N_(\"characters to escape when 'shellxquote' is (\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      varname='p_sxe',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='shiftround', abbreviation='sr',\n-      short_desc=N_(\"round indent to multiple of shiftwidth\"),\n-      type='bool', scope={'global'},\n-      varname='p_sr',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='shiftwidth', abbreviation='sw',\n-      short_desc=N_(\"number of spaces to use for (auto)indent step\"),\n-      type='number', scope={'buffer'},\n-      varname='p_sw',\n-      defaults={if_true=8},\n-      cb='did_set_shiftwidth_tabstop'\n-    },\n-    {\n-      full_name='shortmess', abbreviation='shm',\n-      short_desc=N_(\"list of flags, reduce length of messages\"),\n-      type='string', list='flags', scope={'global'},\n-      varname='p_shm',\n-      defaults={if_true=\"filnxtToOCF\"},\n-      cb='did_set_shortmess'\n-    },\n-    {\n-      full_name='showbreak', abbreviation='sbr',\n-      short_desc=N_(\"string to use at the start of wrapped lines\"),\n-      type='string', scope={'global', 'window'},\n-      redraw={'all_windows'},\n-      varname='p_sbr',\n-      defaults={if_true=\"\"},\n-      cb='did_set_showbreak'\n-    },\n-    {\n-      full_name='showcmd', abbreviation='sc',\n-      short_desc=N_(\"show (partial) command in status line\"),\n-      type='bool', scope={'global'},\n-      varname='p_sc',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='showcmdloc', abbreviation='sloc',\n-      short_desc=N_(\"change location of partial command\"),\n-      type='string', scope={'global'},\n-      varname='p_sloc',\n-      defaults={if_true=\"last\"},\n-      cb='did_set_showcmdloc'\n-    },\n-    {\n-      full_name='showfulltag', abbreviation='sft',\n-      short_desc=N_(\"show full tag pattern when completing tag\"),\n-      type='bool', scope={'global'},\n-      varname='p_sft',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='showmatch', abbreviation='sm',\n-      short_desc=N_(\"briefly jump to matching bracket if insert one\"),\n-      type='bool', scope={'global'},\n-      varname='p_sm',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='showmode', abbreviation='smd',\n-      short_desc=N_(\"message on status line to show current mode\"),\n-      type='bool', scope={'global'},\n-      varname='p_smd',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='showtabline', abbreviation='stal',\n-      short_desc=N_(\"tells when the tab pages line is displayed\"),\n-      type='number', scope={'global'},\n-      redraw={'all_windows', 'ui_option'},\n-      varname='p_stal',\n-      defaults={if_true=1},\n-      cb='did_set_showtabline'\n-    },\n-    {\n-      full_name='sidescroll', abbreviation='ss',\n-      short_desc=N_(\"minimum number of columns to scroll horizontal\"),\n-      type='number', scope={'global'},\n-      varname='p_ss',\n-      defaults={if_true=1}\n-    },\n-    {\n-      full_name='sidescrolloff', abbreviation='siso',\n-      short_desc=N_(\"min. nr. of columns to left and right of cursor\"),\n-      type='number', scope={'global', 'window'},\n-      varname='p_siso',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='signcolumn', abbreviation='scl',\n-      short_desc=N_(\"when to display the sign column\"),\n-      type='string', scope={'window'},\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"auto\"},\n-      cb='did_set_signcolumn'\n-    },\n-    {\n-      full_name='smartcase', abbreviation='scs',\n-      short_desc=N_(\"no ignore case when pattern has uppercase\"),\n-      type='bool', scope={'global'},\n-      varname='p_scs',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='smartindent', abbreviation='si',\n-      short_desc=N_(\"smart autoindenting for C programs\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_si',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='smarttab', abbreviation='sta',\n-      short_desc=N_(\"use 'shiftwidth' when inserting <Tab>\"),\n-      type='bool', scope={'global'},\n-      varname='p_sta',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='softtabstop', abbreviation='sts',\n-      short_desc=N_(\"number of spaces that <Tab> uses while editing\"),\n-      type='number', scope={'buffer'},\n-      varname='p_sts',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='spell',\n-      short_desc=N_(\"spell checking\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=false},\n-      cb='did_set_spell'\n-    },\n-    {\n-      full_name='spellcapcheck', abbreviation='spc',\n-      short_desc=N_(\"pattern to locate end of a sentence\"),\n-      type='string', scope={'buffer'},\n-      alloced=true,\n-      redraw={'current_buffer'},\n-      varname='p_spc',\n-      defaults={if_true=\"[.?!]\\\\_[\\\\])'\\\"\t ]\\\\+\"},\n-      cb='did_set_spellcapcheck'\n-    },\n-    {\n-      full_name='spellfile', abbreviation='spf',\n-      short_desc=N_(\"files where |zg| and |zw| store words\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      secure=true,\n-      alloced=true,\n-      expand=true,\n-      varname='p_spf',\n-      defaults={if_true=\"\"},\n-      cb='did_set_spellfile'\n-    },\n-    {\n-      full_name='spelllang', abbreviation='spl',\n-      short_desc=N_(\"language(s) to do spell checking for\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      expand=true,\n-      redraw={'current_buffer'},\n-      varname='p_spl',\n-      defaults={if_true=\"en\"},\n-      cb='did_set_spelllang'\n-    },\n-    {\n-      full_name='spellsuggest', abbreviation='sps',\n-      short_desc=N_(\"method(s) used to suggest spelling corrections\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      secure=true,\n-      expand=true,\n-      varname='p_sps',\n-      defaults={if_true=\"best\"},\n-      cb='did_set_spellsuggest'\n-    },\n-    {\n-      full_name='spelloptions', abbreviation='spo',\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      secure=true,\n-      expand=true,\n-      varname='p_spo',\n-      redraw={'current_buffer'},\n-      defaults={if_true=\"\"},\n-      cb='did_set_spelloptions'\n-    },\n-    {\n-      full_name='splitbelow', abbreviation='sb',\n-      short_desc=N_(\"new window from split is below the current one\"),\n-      type='bool', scope={'global'},\n-      varname='p_sb',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='splitkeep', abbreviation='spk',\n-      short_desc=N_(\"determines scroll behavior for split windows\"),\n-      type='string', scope={'global'},\n-      varname='p_spk',\n-      defaults={if_true='cursor'},\n-      cb='did_set_splitkeep'\n-    },\n-    {\n-      full_name='splitright', abbreviation='spr',\n-      short_desc=N_(\"new window is put right of the current one\"),\n-      type='bool', scope={'global'},\n-      varname='p_spr',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='startofline', abbreviation='sol',\n-      short_desc=N_(\"commands move cursor to first non-blank in line\"),\n-      type='bool', scope={'global'},\n-      vim=false,\n-      varname='p_sol',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='statuscolumn', abbreviation='stc',\n-      short_desc=N_(\"custom format for the status column\"),\n-      type='string', scope={'window'},\n-      redraw={'current_window'},\n-      secure=true,\n-      alloced=true,\n-      defaults={if_true=\"\"},\n-      cb='did_set_statuscolumn'\n-    },\n-    {\n-      full_name='statusline', abbreviation='stl',\n-      short_desc=N_(\"custom format for the status line\"),\n-      type='string', scope={'global', 'window'},\n-      alloced=true,\n-      modelineexpr=true,\n-      redraw={'statuslines'},\n-      varname='p_stl',\n-      defaults={if_true=\"\"},\n-      cb='did_set_statusline'\n-    },\n-    {\n-      full_name='suffixes', abbreviation='su',\n-      short_desc=N_(\"suffixes that are ignored with multiple match\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_su',\n-      defaults={if_true=\".bak,~,.o,.h,.info,.swp,.obj\"}\n-    },\n-    {\n-      full_name='suffixesadd', abbreviation='sua',\n-      short_desc=N_(\"suffixes added when searching for a file\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_sua',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='swapfile', abbreviation='swf',\n-      short_desc=N_(\"whether to use a swapfile for a buffer\"),\n-      type='bool', scope={'buffer'},\n-      redraw={'statuslines'},\n-      varname='p_swf',\n-      defaults={if_true=true},\n-      cb='did_set_swapfile'\n-    },\n-    {\n-      full_name='switchbuf', abbreviation='swb',\n-      short_desc=N_(\"sets behavior when switching to another buffer\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_swb',\n-      defaults={if_true=\"uselast\"},\n-      cb='did_set_switchbuf'\n-    },\n-    {\n-      full_name='synmaxcol', abbreviation='smc',\n-      short_desc=N_(\"maximum column to find syntax items\"),\n-      type='number', scope={'buffer'},\n-      redraw={'current_buffer'},\n-      varname='p_smc',\n-      defaults={if_true=3000}\n-    },\n-    {\n-      full_name='syntax', abbreviation='syn',\n-      short_desc=N_(\"syntax to be loaded for current buffer\"),\n-      type='string', scope={'buffer'},\n-      noglob=true,\n-      normal_fname_chars=true,\n-      alloced=true,\n-      varname='p_syn',\n-      defaults={if_true=\"\"},\n-      cb='did_set_filetype_or_syntax'\n-    },\n-    {\n-      full_name='tagfunc', abbreviation='tfu',\n-      short_desc=N_(\"function used to perform tag searches\"),\n-      type='string', scope={'buffer'},\n-      secure=true,\n-      func=true,\n-      varname='p_tfu',\n-      defaults={if_true=\"\"},\n-      cb='did_set_tagfunc'\n-    },\n-    {\n-      full_name='tabline', abbreviation='tal',\n-      short_desc=N_(\"custom format for the console tab pages line\"),\n-      type='string', scope={'global'},\n-      modelineexpr=true,\n-      redraw={'tabline'},\n-      varname='p_tal',\n-      defaults={if_true=\"\"},\n-      cb='did_set_tabline'\n-    },\n-    {\n-      full_name='tabpagemax', abbreviation='tpm',\n-      short_desc=N_(\"maximum number of tab pages for |-p| and \\\"tab all\\\"\"),\n-      type='number', scope={'global'},\n-      varname='p_tpm',\n-      defaults={if_true=50}\n-    },\n-    {\n-      full_name='tabstop', abbreviation='ts',\n-      short_desc=N_(\"number of spaces that <Tab> in file uses\"),\n-      type='number', scope={'buffer'},\n-      redraw={'current_buffer'},\n-      varname='p_ts',\n-      defaults={if_true=8},\n-      cb='did_set_shiftwidth_tabstop'\n-    },\n-    {\n-      full_name='tagbsearch', abbreviation='tbs',\n-      short_desc=N_(\"use binary searching in tags files\"),\n-      type='bool', scope={'global'},\n-      varname='p_tbs',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='tagcase', abbreviation='tc',\n-      short_desc=N_(\"how to handle case when searching in tags files\"),\n-      type='string', scope={'global', 'buffer'},\n-      varname='p_tc',\n-      defaults={if_true=\"followic\"},\n-      cb='did_set_tagcase'\n-    },\n-    {\n-      full_name='taglength', abbreviation='tl',\n-      short_desc=N_(\"number of significant characters for a tag\"),\n-      type='number', scope={'global'},\n-      varname='p_tl',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='tagrelative', abbreviation='tr',\n-      short_desc=N_(\"file names in tag file are relative\"),\n-      type='bool', scope={'global'},\n-      varname='p_tr',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='tags', abbreviation='tag',\n-      short_desc=N_(\"list of file names used by the tag command\"),\n-      type='string', list='onecomma', scope={'global', 'buffer'},\n-      deny_duplicates=true,\n-      expand=true,\n-      varname='p_tags',\n-      defaults={if_true=\"./tags;,tags\"}\n-    },\n-    {\n-      full_name='tagstack', abbreviation='tgst',\n-      short_desc=N_(\"push tags onto the tag stack\"),\n-      type='bool', scope={'global'},\n-      varname='p_tgst',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='termbidi', abbreviation='tbidi',\n-      short_desc=N_(\"terminal takes care of bi-directionality\"),\n-      type='bool', scope={'global'},\n-      varname='p_tbidi',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='termencoding', abbreviation='tenc',\n-      short_desc=N_(\"Terminal encoding\"),\n-      type='string', scope={'global'},\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='termguicolors', abbreviation='tgc',\n-      short_desc=N_(\"Terminal true color support\"),\n-      type='bool', scope={'global'},\n-      redraw={'ui_option'},\n-      varname='p_tgc',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='termpastefilter', abbreviation='tpf',\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_tpf',\n-      defaults={if_true=\"BS,HT,ESC,DEL\"},\n-      cb='did_set_termpastefilter'\n-    },\n-    {\n-      full_name='terse',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      varname='p_force_off',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='textwidth', abbreviation='tw',\n-      short_desc=N_(\"maximum width of text that is being inserted\"),\n-      type='number', scope={'buffer'},\n-      redraw={'current_buffer'},\n-      varname='p_tw',\n-      defaults={if_true=0},\n-      cb='did_set_textwidth'\n-    },\n-    {\n-      full_name='thesaurus', abbreviation='tsr',\n-      short_desc=N_(\"list of thesaurus files for keyword completion\"),\n-      type='string', list='onecomma', scope={'global', 'buffer'},\n-      deny_duplicates=true,\n-      normal_dname_chars=true,\n-      expand=true,\n-      varname='p_tsr',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='thesaurusfunc', abbreviation='tsrfu',\n-      short_desc=N_(\"function used for thesaurus completion\"),\n-      type='string', scope={'global', 'buffer'},\n-      secure=true,\n-      alloced=true,\n-      func=true,\n-      varname='p_tsrfu',\n-      defaults={if_true=\"\"},\n-      cb='did_set_thesaurusfunc'\n-    },\n-    {\n-      full_name='tildeop', abbreviation='top',\n-      short_desc=N_(\"tilde command \\\"~\\\" behaves like an operator\"),\n-      type='bool', scope={'global'},\n-      varname='p_to',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='timeout', abbreviation='to',\n-      short_desc=N_(\"time out on mappings and key codes\"),\n-      type='bool', scope={'global'},\n-      varname='p_timeout',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='timeoutlen', abbreviation='tm',\n-      short_desc=N_(\"time out time in milliseconds\"),\n-      type='number', scope={'global'},\n-      varname='p_tm',\n-      defaults={if_true=1000}\n-    },\n-    {\n-      full_name='title',\n-      short_desc=N_(\"Vim set the title of the window\"),\n-      type='bool', scope={'global'},\n-      varname='p_title',\n-      defaults={if_true=false},\n-      cb='did_set_title_icon'\n-    },\n-    {\n-      full_name='titlelen',\n-      short_desc=N_(\"of 'columns' used for window title\"),\n-      type='number', scope={'global'},\n-      varname='p_titlelen',\n-      defaults={if_true=85},\n-      cb='did_set_titlelen'\n-    },\n-    {\n-      full_name='titleold',\n-      short_desc=N_(\"title, restored when exiting\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      no_mkrc=true,\n-      varname='p_titleold',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='titlestring',\n-      short_desc=N_(\"to use for the Vim window title\"),\n-      type='string', scope={'global'},\n-      modelineexpr=true,\n-      varname='p_titlestring',\n-      defaults={if_true=\"\"},\n-      cb='did_set_titlestring'\n-    },\n-    {\n-      full_name='ttimeout',\n-      short_desc=N_(\"out on mappings\"),\n-      type='bool', scope={'global'},\n-      redraw={'ui_option'},\n-      varname='p_ttimeout',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='ttimeoutlen', abbreviation='ttm',\n-      short_desc=N_(\"time out time for key codes in milliseconds\"),\n-      type='number', scope={'global'},\n-      redraw={'ui_option'},\n-      varname='p_ttm',\n-      defaults={if_true=50}\n-    },\n-    {\n-      full_name='ttyfast', abbreviation='tf',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      no_mkrc=true,\n-      varname='p_force_on',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='undodir', abbreviation='udir',\n-      short_desc=N_(\"where to store undo files\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      secure=true,\n-      expand='nodefault',\n-      varname='p_udir',\n-      defaults={if_true=''}\n-    },\n-    {\n-      full_name='undofile', abbreviation='udf',\n-      short_desc=N_(\"save undo information in a file\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_udf',\n-      defaults={if_true=false},\n-      cb='did_set_undofile'\n-    },\n-    {\n-      full_name='undolevels', abbreviation='ul',\n-      short_desc=N_(\"maximum number of changes that can be undone\"),\n-      type='number', scope={'global', 'buffer'},\n-      varname='p_ul',\n-      defaults={if_true=1000},\n-      cb='did_set_undolevels'\n-    },\n-    {\n-      full_name='undoreload', abbreviation='ur',\n-      short_desc=N_(\"max nr of lines to save for undo on a buffer reload\"),\n-      type='number', scope={'global'},\n-      varname='p_ur',\n-      defaults={if_true=10000}\n-    },\n-    {\n-      full_name='updatecount', abbreviation='uc',\n-      short_desc=N_(\"after this many characters flush swap file\"),\n-      type='number', scope={'global'},\n-      varname='p_uc',\n-      defaults={if_true=200},\n-      cb='did_set_updatecount'\n-    },\n-    {\n-      full_name='updatetime', abbreviation='ut',\n-      short_desc=N_(\"after this many milliseconds flush swap file\"),\n-      type='number', scope={'global'},\n-      varname='p_ut',\n-      defaults={if_true=4000}\n-    },\n-    {\n-      full_name='varsofttabstop', abbreviation='vsts',\n-      short_desc=N_(\"list of numbers of spaces that <Tab> uses while editing\"),\n-      type='string', list='comma', scope={'buffer'},\n-      varname='p_vsts',\n-      defaults={if_true=\"\"},\n-      cb='did_set_varsofttabstop'\n-    },\n-    {\n-      full_name='vartabstop', abbreviation='vts',\n-      short_desc=N_(\"list of numbers of spaces that <Tab> in file uses\"),\n-      type='string', list='comma', scope={'buffer'},\n-      varname='p_vts',\n-      redraw={'current_buffer'},\n-      defaults={if_true=\"\"},\n-      cb='did_set_vartabstop'\n-    },\n-    {\n-      full_name='verbose', abbreviation='vbs',\n-      short_desc=N_(\"give informative messages\"),\n-      type='number', scope={'global'},\n-      varname='p_verbose', redraw={'ui_option'},\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='verbosefile', abbreviation='vfile',\n-      short_desc=N_(\"file to write messages in\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      expand=true,\n-      varname='p_vfile',\n-      defaults={if_true=\"\"},\n-      cb='did_set_verbosefile'\n-    },\n-    {\n-      full_name='viewdir', abbreviation='vdir',\n-      short_desc=N_(\"directory where to store files with :mkview\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      expand='nodefault',\n-      varname='p_vdir',\n-      defaults={if_true=''}\n-    },\n-    {\n-      full_name='viewoptions', abbreviation='vop',\n-      short_desc=N_(\"specifies what to save for :mkview\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_vop',\n-      defaults={if_true=\"folds,cursor,curdir\"},\n-      cb='did_set_viewoptions'\n-    },\n-    {\n-      -- Alias for \"shada\".\n-      full_name='viminfo', abbreviation='vi',\n-      short_desc=N_(\"Alias for shada\"),\n-      type='string', scope={'global'}, nodefault=true,\n-    },\n-    {\n-      -- Alias for \"shadafile\".\n-      full_name='viminfofile', abbreviation='vif',\n-      short_desc=N_(\"Alias for shadafile instead\"),\n-      type='string', scope={'global'}, nodefault=true,\n-    },\n-    {\n-      full_name='virtualedit', abbreviation='ve',\n-      short_desc=N_(\"when to use virtual editing\"),\n-      type='string', list='onecomma', scope={'global', 'window'},\n-      deny_duplicates=true,\n-      redraw={'curswant'},\n-      varname='p_ve',\n-      defaults={if_true=\"\"},\n-      cb='did_set_virtualedit'\n-    },\n-    {\n-      full_name='visualbell', abbreviation='vb',\n-      short_desc=N_(\"use visual bell instead of beeping\"),\n-      type='bool', scope={'global'},\n-      varname='p_vb',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='warn',\n-      short_desc=N_(\"for shell command when buffer was changed\"),\n-      type='bool', scope={'global'},\n-      varname='p_warn',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='whichwrap', abbreviation='ww',\n-      short_desc=N_(\"allow specified keys to cross line boundaries\"),\n-      type='string', list='flagscomma', scope={'global'},\n-      varname='p_ww',\n-      defaults={if_true=\"b,s\"},\n-      cb='did_set_whichwrap'\n-    },\n-    {\n-      full_name='wildchar', abbreviation='wc',\n-      short_desc=N_(\"command-line character for wildcard expansion\"),\n-      type='number', scope={'global'},\n-      varname='p_wc',\n-      defaults={if_true=imacros('TAB')}\n-    },\n-    {\n-      full_name='wildcharm', abbreviation='wcm',\n-      short_desc=N_(\"like 'wildchar' but also works when mapped\"),\n-      type='number', scope={'global'},\n-      varname='p_wcm',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='wildignore', abbreviation='wig',\n-      short_desc=N_(\"files matching these patterns are not completed\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_wig',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='wildignorecase', abbreviation='wic',\n-      short_desc=N_(\"ignore case when completing file names\"),\n-      type='bool', scope={'global'},\n-      varname='p_wic',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='wildmenu', abbreviation='wmnu',\n-      short_desc=N_(\"use menu for command line completion\"),\n-      type='bool', scope={'global'},\n-      varname='p_wmnu',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='wildmode', abbreviation='wim',\n-      short_desc=N_(\"mode for 'wildchar' command-line expansion\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=false,\n-      varname='p_wim',\n-      defaults={if_true=\"full\"},\n-      cb='did_set_wildmode'\n-    },\n-    {\n-      full_name='wildoptions', abbreviation='wop',\n-      short_desc=N_(\"specifies how command line completion is done\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_wop',\n-      defaults={if_true='pum,tagfile'},\n-      cb='did_set_wildoptions'\n-    },\n-    {\n-      full_name='winaltkeys', abbreviation='wak',\n-      short_desc=N_(\"when the windows system handles ALT keys\"),\n-      type='string', scope={'global'},\n-      varname='p_wak',\n-      defaults={if_true=\"menu\"},\n-      cb='did_set_winaltkeys'\n-    },\n-    {\n-      full_name='winbar', abbreviation='wbr',\n-      short_desc=N_(\"custom format for the window bar\"),\n-      type='string', scope={'global', 'window'},\n-      alloced=true,\n-      modelineexpr=true,\n-      redraw={'statuslines'},\n-      varname='p_wbr',\n-      defaults={if_true=\"\"},\n-      cb='did_set_winbar'\n-    },\n-    {\n-      full_name='winblend', abbreviation='winbl',\n-      short_desc=N_(\"Controls transparency level for floating windows\"),\n-      type='number', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=0},\n-      cb='did_set_winblend'\n-    },\n-    {\n-      full_name='winhighlight', abbreviation='winhl',\n-      short_desc=N_(\"Setup window-local highlights\");\n-      type='string', list='onecomma', scope={'window'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"\"},\n-      cb='did_set_winhl'\n-    },\n-    {\n-      full_name='window', abbreviation='wi',\n-      short_desc=N_(\"nr of lines to scroll for CTRL-F and CTRL-B\"),\n-      type='number', scope={'global'},\n-      varname='p_window',\n-      defaults={if_true=0},\n-      cb='did_set_window'\n-    },\n-    {\n-      full_name='winheight', abbreviation='wh',\n-      short_desc=N_(\"minimum number of lines for the current window\"),\n-      type='number', scope={'global'},\n-      varname='p_wh',\n-      defaults={if_true=1},\n-      cb='did_set_winheight'\n-    },\n-    {\n-      full_name='winfixheight', abbreviation='wfh',\n-      short_desc=N_(\"keep window height when opening/closing windows\"),\n-      type='bool', scope={'window'},\n-      redraw={'statuslines'},\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='winfixwidth', abbreviation='wfw',\n-      short_desc=N_(\"keep window width when opening/closing windows\"),\n-      type='bool', scope={'window'},\n-      redraw={'statuslines'},\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='winminheight', abbreviation='wmh',\n-      short_desc=N_(\"minimum number of lines for any window\"),\n-      type='number', scope={'global'},\n-      varname='p_wmh',\n-      defaults={if_true=1},\n-      cb='did_set_winminheight'\n-    },\n-    {\n-      full_name='winminwidth', abbreviation='wmw',\n-      short_desc=N_(\"minimal number of columns for any window\"),\n-      type='number', scope={'global'},\n-      varname='p_wmw',\n-      defaults={if_true=1},\n-      cb='did_set_winminwidth'\n-    },\n-    {\n-      full_name='winwidth', abbreviation='wiw',\n-      short_desc=N_(\"minimal number of columns for current window\"),\n-      type='number', scope={'global'},\n-      varname='p_wiw',\n-      defaults={if_true=20},\n-      cb='did_set_winwidth'\n-    },\n-    {\n-      full_name='wrap',\n-      short_desc=N_(\"lines wrap and continue on the next line\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=true},\n-      cb='did_set_wrap'\n-    },\n-    {\n-      full_name='wrapmargin', abbreviation='wm',\n-      short_desc=N_(\"chars from the right where wrapping starts\"),\n-      type='number', scope={'buffer'},\n-      varname='p_wm',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='wrapscan', abbreviation='ws',\n-      short_desc=N_(\"searches wrap around the end of the file\"),\n-      type='bool', scope={'global'},\n-      varname='p_ws',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='write',\n-      short_desc=N_(\"to a file is allowed\"),\n-      type='bool', scope={'global'},\n-      varname='p_write',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='writeany', abbreviation='wa',\n-      short_desc=N_(\"write to file with no need for \\\"!\\\" override\"),\n-      type='bool', scope={'global'},\n-      varname='p_wa',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='writebackup', abbreviation='wb',\n-      short_desc=N_(\"make a backup before overwriting a file\"),\n-      type='bool', scope={'global'},\n-      varname='p_wb',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='writedelay', abbreviation='wd',\n-      short_desc=N_(\"delay this many msec for each char (for debug)\"),\n-      type='number', scope={'global'},\n-      varname='p_wd',\n-      defaults={if_true=0}\n-    },\n-  }\n+      desc = [=[\n+        Which directory to use for the file browser:\n+           last\t\tUse same directory as with last file browser, where a\n+        \t\tfile was opened or saved.\n+           buffer\tUse the directory of the related buffer.\n+           current\tUse the current directory.\n+           {path}\tUse the specified directory\n+      ]=],\n+      enable_if = false,\n+      full_name = 'browsedir',\n+      scope = { 'global' },\n+      short_desc = N_('which directory to start browsing in'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'bh',\n+      alloced = true,\n+      cb = 'did_set_bufhidden',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        This option specifies what happens when a buffer is no longer\n+        displayed in a window:\n+          <empty>\tfollow the global 'hidden' option\n+          hide\t\thide the buffer (don't unload it), even if 'hidden' is\n+        \t\tnot set\n+          unload\tunload the buffer, even if 'hidden' is set; the\n+        \t\t|:hide| command will also unload the buffer\n+          delete\tdelete the buffer from the buffer list, even if\n+        \t\t'hidden' is set; the |:hide| command will also delete\n+        \t\tthe buffer, making it behave like |:bdelete|\n+          wipe\t\twipe the buffer from the buffer list, even if\n+        \t\t'hidden' is set; the |:hide| command will also wipe\n+        \t\tout the buffer, making it behave like |:bwipeout|\n+\n+        CAREFUL: when \"unload\", \"delete\" or \"wipe\" is used changes in a buffer\n+        are lost without a warning.  Also, these values may break autocommands\n+        that switch between buffers temporarily.\n+        This option is used together with 'buftype' and 'swapfile' to specify\n+        special kinds of buffers.   See |special-buffers|.\n+      ]=],\n+      full_name = 'bufhidden',\n+      noglob = true,\n+      scope = { 'buffer' },\n+      short_desc = N_('what to do when buffer is no longer in window'),\n+      type = 'string',\n+      varname = 'p_bh',\n+    },\n+    {\n+      abbreviation = 'bl',\n+      cb = 'did_set_buflisted',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        When this option is set, the buffer shows up in the buffer list.  If\n+        it is reset it is not used for \":bnext\", \"ls\", the Buffers menu, etc.\n+        This option is reset by Vim for buffers that are only used to remember\n+        a file name or marks.  Vim sets it when starting to edit a buffer.\n+        But not when moving to a buffer with \":buffer\".\n+      ]=],\n+      full_name = 'buflisted',\n+      noglob = true,\n+      scope = { 'buffer' },\n+      short_desc = N_('whether the buffer shows up in the buffer list'),\n+      tags = { 'E85' },\n+      type = 'bool',\n+      varname = 'p_bl',\n+    },\n+    {\n+      abbreviation = 'bt',\n+      alloced = true,\n+      cb = 'did_set_buftype',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        The value of this option specifies the type of a buffer:\n+          <empty>\tnormal buffer\n+          acwrite\tbuffer will always be written with |BufWriteCmd|s\n+          help\t\thelp buffer (do not set this manually)\n+          nofile\tbuffer is not related to a file, will not be written\n+          nowrite\tbuffer will not be written\n+          quickfix\tlist of errors |:cwindow| or locations |:lwindow|\n+          terminal\t|terminal-emulator| buffer\n+          prompt\tbuffer where only the last line can be edited, meant\n+        \t\tto be used by a plugin, see |prompt-buffer|\n+\n+        This option is used together with 'bufhidden' and 'swapfile' to\n+        specify special kinds of buffers.   See |special-buffers|.\n+        Also see |win_gettype()|, which returns the type of the window.\n+\n+        Be careful with changing this option, it can have many side effects!\n+        One such effect is that Vim will not check the timestamp of the file,\n+        if the file is changed by another program this will not be noticed.\n+\n+        A \"quickfix\" buffer is only used for the error list and the location\n+        list.  This value is set by the |:cwindow| and |:lwindow| commands and\n+        you are not supposed to change it.\n+\n+        \"nofile\" and \"nowrite\" buffers are similar:\n+        both:\t\tThe buffer is not to be written to disk, \":w\" doesn't\n+        \t\twork (\":w filename\" does work though).\n+        both:\t\tThe buffer is never considered to be |'modified'|.\n+        \t\tThere is no warning when the changes will be lost, for\n+        \t\texample when you quit Vim.\n+        both:\t\tA swap file is only created when using too much memory\n+        \t\t(when 'swapfile' has been reset there is never a swap\n+        \t\tfile).\n+        nofile only:\tThe buffer name is fixed, it is not handled like a\n+        \t\tfile name.  It is not modified in response to a |:cd|\n+        \t\tcommand.\n+        both:\t\tWhen using \":e bufname\" and already editing \"bufname\"\n+        \t\tthe buffer is made empty and autocommands are\n+        \t\ttriggered as usual for |:edit|.\n+        \t\t\t\t\t\t*E676*\n+        \"acwrite\" implies that the buffer name is not related to a file, like\n+        \"nofile\", but it will be written.  Thus, in contrast to \"nofile\" and\n+        \"nowrite\", \":w\" does work and a modified buffer can't be abandoned\n+        without saving.  For writing there must be matching |BufWriteCmd|,\n+        |FileWriteCmd| or |FileAppendCmd| autocommands.\n+      ]=],\n+      full_name = 'buftype',\n+      noglob = true,\n+      scope = { 'buffer' },\n+      tags = { 'E382' },\n+      short_desc = N_('special type of buffer'),\n+      type = 'string',\n+      varname = 'p_bt',\n+    },\n+    {\n+      abbreviation = 'cmp',\n+      cb = 'did_set_casemap',\n+      defaults = { if_true = 'internal,keepascii' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Specifies details about changing the case of letters.  It may contain\n+        these words, separated by a comma:\n+        internal\tUse internal case mapping functions, the current\n+        \t\tlocale does not change the case mapping. When\n+        \t\t\"internal\" is omitted, the towupper() and towlower()\n+        \t\tsystem library functions are used when available.\n+        keepascii\tFor the ASCII characters (0x00 to 0x7f) use the US\n+        \t\tcase mapping, the current locale is not effective.\n+        \t\tThis probably only matters for Turkish.\n+      ]=],\n+      full_name = 'casemap',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('specifies how case of letters is changed'),\n+      type = 'string',\n+      varname = 'p_cmp',\n+    },\n+    {\n+      abbreviation = 'cdh',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        When on, |:cd|, |:tcd| and |:lcd| without an argument changes the\n+        current working directory to the |$HOME| directory like in Unix.\n+        When off, those commands just print the current directory name.\n+        On Unix this option has no effect.\n+      ]=],\n+      full_name = 'cdhome',\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_(':cd without argument goes to the home directory'),\n+      type = 'bool',\n+      varname = 'p_cdh',\n+    },\n+    {\n+      abbreviation = 'cd',\n+      defaults = {\n+        if_true = ',,',\n+        doc = 'equivalent to $CDPATH or \",,\"',\n+      },\n+      deny_duplicates = true,\n+      desc = [=[\n+        This is a list of directories which will be searched when using the\n+        |:cd|, |:tcd| and |:lcd| commands, provided that the directory being\n+        searched for has a relative path, not an absolute part starting with\n+        \"/\", \"./\" or \"../\", the 'cdpath' option is not used then.\n+        The 'cdpath' option's value has the same form and semantics as\n+        |'path'|.  Also see |file-searching|.\n+        The default value is taken from $CDPATH, with a \",\" prepended to look\n+        in the current directory first.\n+        If the default value taken from $CDPATH is not what you want, include\n+        a modified version of the following command in your vimrc file to\n+        override it: >\n+          :let &cdpath = ',' .. substitute(substitute($CDPATH, '[, ]', '\\\\\\0', 'g'), ':', ',', 'g')\n+        <\tThis option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+        (parts of 'cdpath' can be passed to the shell to expand file names).\n+      ]=],\n+      expand = true,\n+      full_name = 'cdpath',\n+      list = 'comma',\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_('list of directories searched with \":cd\"'),\n+      tags = { 'E344', 'E346' },\n+      type = 'string',\n+      varname = 'p_cdpath',\n+    },\n+    {\n+      cb = 'did_set_cedit',\n+      defaults = {\n+        if_true = macros('CTRL_F_STR'),\n+        doc = 'CTRL-F',\n+      },\n+      desc = [=[\n+        The key used in Command-line Mode to open the command-line window.\n+        Only non-printable keys are allowed.\n+        The key can be specified as a single character, but it is difficult to\n+        type.  The preferred way is to use the <> notation.  Examples: >\n+        \t:exe \"set cedit=\\\\<C-Y>\"\n+        \t:exe \"set cedit=\\\\<Esc>\"\n+        <\t|Nvi| also has this option, but it only uses the first character.\n+        See |cmdwin|.\n+      ]=],\n+      full_name = 'cedit',\n+      scope = { 'global' },\n+      short_desc = N_('used to open the command-line window'),\n+      type = 'string',\n+      varname = 'p_cedit',\n+    },\n+    {\n+      defaults = { if_true = 0 },\n+      desc = [=[\n+        |channel| connected to the buffer, or 0 if no channel is connected.\n+        In a |:terminal| buffer this is the terminal channel.\n+        Read-only.\n+      ]=],\n+      full_name = 'channel',\n+      no_mkrc = true,\n+      nodefault = true,\n+      scope = { 'buffer' },\n+      short_desc = N_('Channel connected to the buffer'),\n+      type = 'number',\n+      varname = 'p_channel',\n+    },\n+    {\n+      abbreviation = 'ccv',\n+      cb = 'did_set_optexpr',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        An expression that is used for character encoding conversion.  It is\n+        evaluated when a file that is to be read or has been written has a\n+        different encoding from what is desired.\n+        'charconvert' is not used when the internal iconv() function is\n+        supported and is able to do the conversion.  Using iconv() is\n+        preferred, because it is much faster.\n+        'charconvert' is not used when reading stdin |--|, because there is no\n+        file to convert from.  You will have to save the text in a file first.\n+        The expression must return zero, false or an empty string for success,\n+        non-zero or true for failure.\n+        See |encoding-names| for possible encoding names.\n+        Additionally, names given in 'fileencodings' and 'fileencoding' are\n+        used.\n+        Conversion between \"latin1\", \"unicode\", \"ucs-2\", \"ucs-4\" and \"utf-8\"\n+        is done internally by Vim, 'charconvert' is not used for this.\n+        Also used for Unicode conversion.\n+        Example: >\n+        \tset charconvert=CharConvert()\n+        \tfun CharConvert()\n+        \t  system(\"recode \"\n+        \t\t\\ .. v:charconvert_from .. \"..\" .. v:charconvert_to\n+        \t\t\\ .. \" <\" .. v:fname_in .. \" >\" .. v:fname_out)\n+        \t  return v:shell_error\n+        \tendfun\n+        <\tThe related Vim variables are:\n+        \tv:charconvert_from\tname of the current encoding\n+        \tv:charconvert_to\tname of the desired encoding\n+        \tv:fname_in\t\tname of the input file\n+        \tv:fname_out\t\tname of the output file\n+        Note that v:fname_in and v:fname_out will never be the same.\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      full_name = 'charconvert',\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_('expression for character encoding conversion'),\n+      type = 'string',\n+      tags = { 'E202', 'E214', 'E513' },\n+      varname = 'p_ccv',\n+    },\n+    {\n+      abbreviation = 'cin',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Enables automatic C program indenting.  See 'cinkeys' to set the keys\n+        that trigger reindenting in insert mode and 'cinoptions' to set your\n+        preferred indent style.\n+        If 'indentexpr' is not empty, it overrules 'cindent'.\n+        If 'lisp' is not on and both 'indentexpr' and 'equalprg' are empty,\n+        the \"=\" operator indents using this algorithm rather than calling an\n+        external program.\n+        See |C-indenting|.\n+        When you don't like the way 'cindent' works, try the 'smartindent'\n+        option or 'indentexpr'.\n+      ]=],\n+      full_name = 'cindent',\n+      scope = { 'buffer' },\n+      short_desc = N_('do C program indenting'),\n+      type = 'bool',\n+      varname = 'p_cin',\n+    },\n+    {\n+      abbreviation = 'cink',\n+      alloced = true,\n+      defaults = { if_true = '0{,0},0),0],:,0#,!^F,o,O,e' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        A list of keys that, when typed in Insert mode, cause reindenting of\n+        the current line.  Only used if 'cindent' is on and 'indentexpr' is\n+        empty.\n+        For the format of this option see |cinkeys-format|.\n+        See |C-indenting|.\n+      ]=],\n+      full_name = 'cinkeys',\n+      list = 'onecomma',\n+      scope = { 'buffer' },\n+      short_desc = N_(\"keys that trigger indent when 'cindent' is set\"),\n+      type = 'string',\n+      varname = 'p_cink',\n+    },\n+    {\n+      abbreviation = 'cino',\n+      alloced = true,\n+      cb = 'did_set_cinoptions',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        The 'cinoptions' affect the way 'cindent' reindents lines in a C\n+        program.  See |cinoptions-values| for the values of this option, and\n+        |C-indenting| for info on C indenting in general.\n+      ]=],\n+      full_name = 'cinoptions',\n+      list = 'onecomma',\n+      scope = { 'buffer' },\n+      short_desc = N_(\"how to do indenting when 'cindent' is set\"),\n+      type = 'string',\n+      varname = 'p_cino',\n+    },\n+    {\n+      abbreviation = 'cinw',\n+      alloced = true,\n+      defaults = { if_true = 'if,else,while,do,for,switch' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        These keywords start an extra indent in the next line when\n+        'smartindent' or 'cindent' is set.  For 'cindent' this is only done at\n+        an appropriate place (inside {}).\n+        Note that 'ignorecase' isn't used for 'cinwords'.  If case doesn't\n+        matter, include the keyword both the uppercase and lowercase:\n+        \"if,If,IF\".\n+      ]=],\n+      full_name = 'cinwords',\n+      list = 'onecomma',\n+      scope = { 'buffer' },\n+      short_desc = N_(\"words where 'si' and 'cin' add an indent\"),\n+      type = 'string',\n+      varname = 'p_cinw',\n+    },\n+    {\n+      abbreviation = 'cinsd',\n+      alloced = true,\n+      defaults = { if_true = 'public,protected,private' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Keywords that are interpreted as a C++ scope declaration by |cino-g|.\n+        Useful e.g. for working with the Qt framework that defines additional\n+        scope declarations \"signals\", \"public slots\" and \"private slots\": >\n+        \tset cinscopedecls+=signals,public\\ slots,private\\ slots\n+        <\n+      ]=],\n+      full_name = 'cinscopedecls',\n+      list = 'onecomma',\n+      scope = { 'buffer' },\n+      short_desc = N_(\"words that are recognized by 'cino-g'\"),\n+      type = 'string',\n+      varname = 'p_cinsd',\n+    },\n+    {\n+      abbreviation = 'cb',\n+      cb = 'did_set_clipboard',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        This option is a list of comma-separated names.\n+        These names are recognized:\n+\n+        \t\t\t\t\t*clipboard-unnamed*\n+        unnamed\t\tWhen included, Vim will use the clipboard register \"*\"\n+        \t\tfor all yank, delete, change and put operations which\n+        \t\twould normally go to the unnamed register.  When a\n+        \t\tregister is explicitly specified, it will always be\n+        \t\tused regardless of whether \"unnamed\" is in 'clipboard'\n+        \t\tor not.  The clipboard register can always be\n+        \t\texplicitly accessed using the \"* notation.  Also see\n+        \t\t|clipboard|.\n+\n+        \t\t\t\t\t*clipboard-unnamedplus*\n+        unnamedplus\tA variant of the \"unnamed\" flag which uses the\n+        \t\tclipboard register \"+\" (|quoteplus|) instead of\n+        \t\tregister \"*\" for all yank, delete, change and put\n+        \t\toperations which would normally go to the unnamed\n+        \t\tregister.  When \"unnamed\" is also included to the\n+        \t\toption, yank and delete operations (but not put)\n+        \t\twill additionally copy the text into register\n+        \t\t\"*\". See |clipboard|.\n+      ]=],\n+      deny_duplicates = true,\n+      full_name = 'clipboard',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('use the clipboard as the unnamed register'),\n+      type = 'string',\n+      varname = 'p_cb',\n+    },\n+    {\n+      abbreviation = 'ch',\n+      cb = 'did_set_cmdheight',\n+      defaults = { if_true = 1 },\n+      desc = [=[\n+        Number of screen lines to use for the command-line.  Helps avoiding\n+        |hit-enter| prompts.\n+        The value of this option is stored with the tab page, so that each tab\n+        page can have a different value.\n+\n+        When 'cmdheight' is zero, there is no command-line unless it is being\n+        used.  The command-line will cover the last line of the screen when\n+        shown.\n+\n+        WARNING: `cmdheight=0` is considered experimental. Expect some\n+        unwanted behaviour. Some 'shortmess' flags and similar\n+        mechanism might fail to take effect, causing unwanted hit-enter\n+        prompts.  Some informative messages, both from Nvim itself and\n+        plugins, will not be displayed.\n+      ]=],\n+      full_name = 'cmdheight',\n+      redraw = { 'all_windows' },\n+      scope = { 'global' },\n+      short_desc = N_('number of lines to use for the command-line'),\n+      type = 'number',\n+      varname = 'p_ch',\n+    },\n+    {\n+      abbreviation = 'cwh',\n+      defaults = { if_true = 7 },\n+      desc = [=[\n+        Number of screen lines to use for the command-line window. |cmdwin|\n+      ]=],\n+      full_name = 'cmdwinheight',\n+      scope = { 'global' },\n+      short_desc = N_('height of the command-line window'),\n+      type = 'number',\n+      varname = 'p_cwh',\n+    },\n+    {\n+      abbreviation = 'cc',\n+      cb = 'did_set_colorcolumn',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        'colorcolumn' is a comma-separated list of screen columns that are\n+        highlighted with ColorColumn |hl-ColorColumn|.  Useful to align\n+        text.  Will make screen redrawing slower.\n+        The screen column can be an absolute number, or a number preceded with\n+        '+' or '-', which is added to or subtracted from 'textwidth'. >\n+\n+        \t:set cc=+1\t  \" highlight column after 'textwidth'\n+        \t:set cc=+1,+2,+3  \" highlight three columns after 'textwidth'\n+        \t:hi ColorColumn ctermbg=lightgrey guibg=lightgrey\n+        <\n+        When 'textwidth' is zero then the items with '-' and '+' are not used.\n+        A maximum of 256 columns are highlighted.\n+      ]=],\n+      full_name = 'colorcolumn',\n+      list = 'onecomma',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('columns to highlight'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'co',\n+      defaults = {\n+        if_true = macros('DFLT_COLS'),\n+        doc = '80 or terminal width',\n+      },\n+      desc = [=[\n+        Number of columns of the screen.  Normally this is set by the terminal\n+        initialization and does not have to be set by hand.\n+        When Vim is running in the GUI or in a resizable window, setting this\n+        option will cause the window size to be changed.  When you only want\n+        to use the size for the GUI, put the command in your |ginit.vim| file.\n+        When you set this option and Vim is unable to change the physical\n+        number of columns of the display, the display may be messed up.  For\n+        the GUI it is always possible and Vim limits the number of columns to\n+        what fits on the screen.  You can use this command to get the widest\n+        window possible: >\n+        \t:set columns=9999\n+        <\tMinimum value is 12, maximum value is 10000.\n+      ]=],\n+      full_name = 'columns',\n+      no_mkrc = true,\n+      scope = { 'global' },\n+      short_desc = N_('number of columns in the display'),\n+      tags = { 'E594' },\n+      type = 'number',\n+      varname = 'p_columns',\n+    },\n+    {\n+      abbreviation = 'com',\n+      alloced = true,\n+      cb = 'did_set_comments',\n+      defaults = { if_true = 's1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        A comma-separated list of strings that can start a comment line.  See\n+        |format-comments|.  See |option-backslash| about using backslashes to\n+        insert a space.\n+      ]=],\n+      full_name = 'comments',\n+      list = 'onecomma',\n+      redraw = { 'curswant' },\n+      scope = { 'buffer' },\n+      short_desc = N_('patterns that can start a comment line'),\n+      tags = { 'E524', 'E525' },\n+      type = 'string',\n+      varname = 'p_com',\n+    },\n+    {\n+      abbreviation = 'cms',\n+      alloced = true,\n+      cb = 'did_set_commentstring',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        A template for a comment.  The \"%s\" in the value is replaced with the\n+        comment text.  For example, C uses \"/*%s*/\". Currently only used to\n+        add markers for folding, see |fold-marker|.\n+      ]=],\n+      full_name = 'commentstring',\n+      redraw = { 'curswant' },\n+      scope = { 'buffer' },\n+      short_desc = N_('template for comments; used for fold marker'),\n+      tags = { 'E537' },\n+      type = 'string',\n+      varname = 'p_cms',\n+    },\n+    {\n+      abbreviation = 'cp',\n+      defaults = { if_true = false },\n+      full_name = 'compatible',\n+      scope = { 'global' },\n+      short_desc = N_('No description'),\n+      type = 'bool',\n+      varname = 'p_force_off',\n+    },\n+    {\n+      abbreviation = 'cpt',\n+      alloced = true,\n+      cb = 'did_set_complete',\n+      defaults = { if_true = '.,w,b,u,t' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        This option specifies how keyword completion |ins-completion| works\n+        when CTRL-P or CTRL-N are used.  It is also used for whole-line\n+        completion |i_CTRL-X_CTRL-L|.  It indicates the type of completion\n+        and the places to scan.  It is a comma-separated list of flags:\n+        .\tscan the current buffer ('wrapscan' is ignored)\n+        w\tscan buffers from other windows\n+        b\tscan other loaded buffers that are in the buffer list\n+        u\tscan the unloaded buffers that are in the buffer list\n+        U\tscan the buffers that are not in the buffer list\n+        k\tscan the files given with the 'dictionary' option\n+        kspell  use the currently active spell checking |spell|\n+        k{dict}\tscan the file {dict}.  Several \"k\" flags can be given,\n+        \tpatterns are valid too.  For example: >\n+        \t\t:set cpt=k/usr/dict/*,k~/spanish\n+        <\ts\tscan the files given with the 'thesaurus' option\n+        s{tsr}\tscan the file {tsr}.  Several \"s\" flags can be given, patterns\n+        \tare valid too.\n+        i\tscan current and included files\n+        d\tscan current and included files for defined name or macro\n+        \t|i_CTRL-X_CTRL-D|\n+        ]\ttag completion\n+        t\tsame as \"]\"\n+\n+        Unloaded buffers are not loaded, thus their autocmds |:autocmd| are\n+        not executed, this may lead to unexpected completions from some files\n+        (gzipped files for example).  Unloaded buffers are not scanned for\n+        whole-line completion.\n+\n+        As you can see, CTRL-N and CTRL-P can be used to do any 'iskeyword'-\n+        based expansion (e.g., dictionary |i_CTRL-X_CTRL-K|, included patterns\n+        |i_CTRL-X_CTRL-I|, tags |i_CTRL-X_CTRL-]| and normal expansions).\n+      ]=],\n+      full_name = 'complete',\n+      list = 'onecomma',\n+      scope = { 'buffer' },\n+      short_desc = N_('specify how Insert mode completion works'),\n+      tags = { 'E535' },\n+      type = 'string',\n+      varname = 'p_cpt',\n+    },\n+    {\n+      abbreviation = 'cocu',\n+      alloced = true,\n+      cb = 'did_set_concealcursor',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        Sets the modes in which text in the cursor line can also be concealed.\n+        When the current mode is listed then concealing happens just like in\n+        other lines.\n+          n\t\tNormal mode\n+          v\t\tVisual mode\n+          i\t\tInsert mode\n+          c\t\tCommand line editing, for 'incsearch'\n+\n+        'v' applies to all lines in the Visual area, not only the cursor.\n+        A useful value is \"nc\".  This is used in help files.  So long as you\n+        are moving around text is concealed, but when starting to insert text\n+        or selecting a Visual area the concealed text is displayed, so that\n+        you can see what you are doing.\n+        Keep in mind that the cursor position is not always where it's\n+        displayed.  E.g., when moving vertically it may change column.\n+      ]=],\n+      full_name = 'concealcursor',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('whether concealable text is hidden in cursor line'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'cole',\n+      defaults = { if_true = 0 },\n+      desc = [=[\n+        Determine how text with the \"conceal\" syntax attribute |:syn-conceal|\n+        is shown:\n+\n+        Value\t\tEffect ~\n+        0\t\tText is shown normally\n+        1\t\tEach block of concealed text is replaced with one\n+        \t\tcharacter.  If the syntax item does not have a custom\n+        \t\treplacement character defined (see |:syn-cchar|) the\n+        \t\tcharacter defined in 'listchars' is used.\n+        \t\tIt is highlighted with the \"Conceal\" highlight group.\n+        2\t\tConcealed text is completely hidden unless it has a\n+        \t\tcustom replacement character defined (see\n+        \t\t|:syn-cchar|).\n+        3\t\tConcealed text is completely hidden.\n+\n+        Note: in the cursor line concealed text is not hidden, so that you can\n+        edit and copy the text.  This can be changed with the 'concealcursor'\n+        option.\n+      ]=],\n+      full_name = 'conceallevel',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('whether concealable text is shown or hidden'),\n+      type = 'number',\n+    },\n+    {\n+      abbreviation = 'cfu',\n+      alloced = true,\n+      cb = 'did_set_completefunc',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        This option specifies a function to be used for Insert mode completion\n+        with CTRL-X CTRL-U. |i_CTRL-X_CTRL-U|\n+        See |complete-functions| for an explanation of how the function is\n+        invoked and what it should return.  The value can be the name of a\n+        function, a |lambda| or a |Funcref|. See |option-value-function| for\n+        more information.\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      full_name = 'completefunc',\n+      func = true,\n+      scope = { 'buffer' },\n+      secure = true,\n+      short_desc = N_('function to be used for Insert mode completion'),\n+      type = 'string',\n+      varname = 'p_cfu',\n+    },\n+    {\n+      abbreviation = 'cot',\n+      cb = 'did_set_completeopt',\n+      defaults = { if_true = 'menu,preview' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        A comma-separated list of options for Insert mode completion\n+        |ins-completion|.  The supported values are:\n+\n+           menu\t    Use a popup menu to show the possible completions.  The\n+        \t    menu is only shown when there is more than one match and\n+        \t    sufficient colors are available.  |ins-completion-menu|\n+\n+           menuone  Use the popup menu also when there is only one match.\n+        \t    Useful when there is additional information about the\n+        \t    match, e.g., what file it comes from.\n+\n+           longest  Only insert the longest common text of the matches.  If\n+        \t    the menu is displayed you can use CTRL-L to add more\n+        \t    characters.  Whether case is ignored depends on the kind\n+        \t    of completion.  For buffer text the 'ignorecase' option is\n+        \t    used.\n+\n+           preview  Show extra information about the currently selected\n+        \t    completion in the preview window.  Only works in\n+        \t    combination with \"menu\" or \"menuone\".\n+\n+          noinsert  Do not insert any text for a match until the user selects\n+        \t    a match from the menu. Only works in combination with\n+        \t    \"menu\" or \"menuone\". No effect if \"longest\" is present.\n+\n+          noselect  Do not select a match in the menu, force the user to\n+        \t    select one from the menu. Only works in combination with\n+        \t    \"menu\" or \"menuone\".\n+      ]=],\n+      full_name = 'completeopt',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('options for Insert mode completion'),\n+      type = 'string',\n+      varname = 'p_cot',\n+    },\n+    {\n+      abbreviation = 'csl',\n+      cb = 'did_set_completeslash',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        \t\tonly for MS-Windows\n+        When this option is set it overrules 'shellslash' for completion:\n+        - When this option is set to \"slash\", a forward slash is used for path\n+          completion in insert mode. This is useful when editing HTML tag, or\n+          Makefile with 'noshellslash' on MS-Windows.\n+        - When this option is set to \"backslash\", backslash is used. This is\n+          useful when editing a batch file with 'shellslash' set on MS-Windows.\n+        - When this option is empty, same character is used as for\n+          'shellslash'.\n+        For Insert mode completion the buffer-local value is used.  For\n+        command line completion the global value is used.\n+      ]=],\n+      enable_if = 'BACKSLASH_IN_FILENAME',\n+      full_name = 'completeslash',\n+      scope = { 'buffer' },\n+      type = 'string',\n+      varname = 'p_csl',\n+    },\n+    {\n+      abbreviation = 'cf',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        When 'confirm' is on, certain operations that would normally\n+        fail because of unsaved changes to a buffer, e.g. \":q\" and \":e\",\n+        instead raise a dialog asking if you wish to save the current\n+        file(s).  You can still use a ! to unconditionally |abandon| a buffer.\n+        If 'confirm' is off you can still activate confirmation for one\n+        command only (this is most useful in mappings) with the |:confirm|\n+        command.\n+        Also see the |confirm()| function and the 'v' flag in 'guioptions'.\n+      ]=],\n+      full_name = 'confirm',\n+      scope = { 'global' },\n+      short_desc = N_('ask what to do about unsaved/read-only files'),\n+      type = 'bool',\n+      varname = 'p_confirm',\n+    },\n+    {\n+      abbreviation = 'ci',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Copy the structure of the existing lines indent when autoindenting a\n+        new line.  Normally the new indent is reconstructed by a series of\n+        tabs followed by spaces as required (unless |'expandtab'| is enabled,\n+        in which case only spaces are used).  Enabling this option makes the\n+        new line copy whatever characters were used for indenting on the\n+        existing line.  'expandtab' has no effect on these characters, a Tab\n+        remains a Tab.  If the new indent is greater than on the existing\n+        line, the remaining space is filled in the normal manner.\n+        See 'preserveindent'.\n+      ]=],\n+      full_name = 'copyindent',\n+      scope = { 'buffer' },\n+      short_desc = N_(\"make 'autoindent' use existing indent structure\"),\n+      type = 'bool',\n+      varname = 'p_ci',\n+    },\n+    {\n+      abbreviation = 'cpo',\n+      cb = 'did_set_cpoptions',\n+      defaults = { if_true = macros('CPO_VIM') },\n+      desc = [=[\n+        A sequence of single character flags.  When a character is present\n+        this indicates Vi-compatible behavior.  This is used for things where\n+        not being Vi-compatible is mostly or sometimes preferred.\n+        'cpoptions' stands for \"compatible-options\".\n+        Commas can be added for readability.\n+        To avoid problems with flags that are added in the future, use the\n+        \"+=\" and \"-=\" feature of \":set\" |add-option-flags|.\n+\n+            contains\tbehavior\t~\n+        \t\t\t\t\t\t\t*cpo-a*\n+        \ta\tWhen included, a \":read\" command with a file name\n+        \t\targument will set the alternate file name for the\n+        \t\tcurrent window.\n+        \t\t\t\t\t\t\t*cpo-A*\n+        \tA\tWhen included, a \":write\" command with a file name\n+        \t\targument will set the alternate file name for the\n+        \t\tcurrent window.\n+        \t\t\t\t\t\t\t*cpo-b*\n+        \tb\t\"\\|\" in a \":map\" command is recognized as the end of\n+        \t\tthe map command.  The '\\' is included in the mapping,\n+        \t\tthe text after the '|' is interpreted as the next\n+        \t\tcommand.  Use a CTRL-V instead of a backslash to\n+        \t\tinclude the '|' in the mapping.  Applies to all\n+        \t\tmapping, abbreviation, menu and autocmd commands.\n+        \t\tSee also |map_bar|.\n+        \t\t\t\t\t\t\t*cpo-B*\n+        \tB\tA backslash has no special meaning in mappings,\n+        \t\tabbreviations, user commands and the \"to\" part of the\n+        \t\tmenu commands.  Remove this flag to be able to use a\n+        \t\tbackslash like a CTRL-V.  For example, the command\n+        \t\t\":map X \\\\<Esc>\" results in X being mapped to:\n+        \t\t\t'B' included:\t\"\\^[\"\t (^[ is a real <Esc>)\n+        \t\t\t'B' excluded:\t\"<Esc>\"  (5 characters)\n+        \t\t\t\t\t\t\t*cpo-c*\n+        \tc\tSearching continues at the end of any match at the\n+        \t\tcursor position, but not further than the start of the\n+        \t\tnext line.  When not present searching continues\n+        \t\tone character from the cursor position.  With 'c'\n+        \t\t\"abababababab\" only gets three matches when repeating\n+        \t\t\"/abab\", without 'c' there are five matches.\n+        \t\t\t\t\t\t\t*cpo-C*\n+        \tC\tDo not concatenate sourced lines that start with a\n+        \t\tbackslash.  See |line-continuation|.\n+        \t\t\t\t\t\t\t*cpo-d*\n+        \td\tUsing \"./\" in the 'tags' option doesn't mean to use\n+        \t\tthe tags file relative to the current file, but the\n+        \t\ttags file in the current directory.\n+        \t\t\t\t\t\t\t*cpo-D*\n+        \tD\tCan't use CTRL-K to enter a digraph after Normal mode\n+        \t\tcommands with a character argument, like |r|, |f| and\n+        \t\t|t|.\n+        \t\t\t\t\t\t\t*cpo-e*\n+        \te\tWhen executing a register with \":@r\", always add a\n+        \t\t<CR> to the last line, also when the register is not\n+        \t\tlinewise.  If this flag is not present, the register\n+        \t\tis not linewise and the last line does not end in a\n+        \t\t<CR>, then the last line is put on the command-line\n+        \t\tand can be edited before hitting <CR>.\n+        \t\t\t\t\t\t\t*cpo-E*\n+        \tE\tIt is an error when using \"y\", \"d\", \"c\", \"g~\", \"gu\" or\n+        \t\t\"gU\" on an Empty region.  The operators only work when\n+        \t\tat least one character is to be operated on.  Example:\n+        \t\tThis makes \"y0\" fail in the first column.\n+        \t\t\t\t\t\t\t*cpo-f*\n+        \tf\tWhen included, a \":read\" command with a file name\n+        \t\targument will set the file name for the current buffer,\n+        \t\tif the current buffer doesn't have a file name yet.\n+        \t\t\t\t\t\t\t*cpo-F*\n+        \tF\tWhen included, a \":write\" command with a file name\n+        \t\targument will set the file name for the current\n+        \t\tbuffer, if the current buffer doesn't have a file name\n+        \t\tyet.  Also see |cpo-P|.\n+        \t\t\t\t\t\t\t*cpo-i*\n+        \ti\tWhen included, interrupting the reading of a file will\n+        \t\tleave it modified.\n+        \t\t\t\t\t\t\t*cpo-I*\n+        \tI\tWhen moving the cursor up or down just after inserting\n+        \t\tindent for 'autoindent', do not delete the indent.\n+        \t\t\t\t\t\t\t*cpo-J*\n+        \tJ\tA |sentence| has to be followed by two spaces after\n+        \t\tthe '.', '!' or '?'.  A <Tab> is not recognized as\n+        \t\twhite space.\n+        \t\t\t\t\t\t\t*cpo-K*\n+        \tK\tDon't wait for a key code to complete when it is\n+        \t\thalfway through a mapping.  This breaks mapping\n+        \t\t<F1><F1> when only part of the second <F1> has been\n+        \t\tread.  It enables cancelling the mapping by typing\n+        \t\t<F1><Esc>.\n+        \t\t\t\t\t\t\t*cpo-l*\n+        \tl\tBackslash in a [] range in a search pattern is taken\n+        \t\tliterally, only \"\\]\", \"\\^\", \"\\-\" and \"\\\\\" are special.\n+        \t\tSee |/[]|\n+        \t\t   'l' included: \"/[ \\t]\"  finds <Space>, '\\' and 't'\n+        \t\t   'l' excluded: \"/[ \\t]\"  finds <Space> and <Tab>\n+        \t\t\t\t\t\t\t*cpo-L*\n+        \tL\tWhen the 'list' option is set, 'wrapmargin',\n+        \t\t'textwidth', 'softtabstop' and Virtual Replace mode\n+        \t\t(see |gR|) count a <Tab> as two characters, instead of\n+        \t\tthe normal behavior of a <Tab>.\n+        \t\t\t\t\t\t\t*cpo-m*\n+        \tm\tWhen included, a showmatch will always wait half a\n+        \t\tsecond.  When not included, a showmatch will wait half\n+        \t\ta second or until a character is typed.  |'showmatch'|\n+        \t\t\t\t\t\t\t*cpo-M*\n+        \tM\tWhen excluded, \"%\" matching will take backslashes into\n+        \t\taccount.  Thus in \"( \\( )\" and \"\\( ( \\)\" the outer\n+        \t\tparenthesis match.  When included \"%\" ignores\n+        \t\tbackslashes, which is Vi compatible.\n+        \t\t\t\t\t\t\t*cpo-n*\n+        \tn\tWhen included, the column used for 'number' and\n+        \t\t'relativenumber' will also be used for text of wrapped\n+        \t\tlines.\n+        \t\t\t\t\t\t\t*cpo-o*\n+        \to\tLine offset to search command is not remembered for\n+        \t\tnext search.\n+        \t\t\t\t\t\t\t*cpo-O*\n+        \tO\tDon't complain if a file is being overwritten, even\n+        \t\twhen it didn't exist when editing it.  This is a\n+        \t\tprotection against a file unexpectedly created by\n+        \t\tsomeone else.  Vi didn't complain about this.\n+        \t\t\t\t\t\t\t*cpo-p*\n+        \tp\tVi compatible Lisp indenting.  When not present, a\n+        \t\tslightly better algorithm is used.\n+        \t\t\t\t\t\t\t*cpo-P*\n+        \tP\tWhen included, a \":write\" command that appends to a\n+        \t\tfile will set the file name for the current buffer, if\n+        \t\tthe current buffer doesn't have a file name yet and\n+        \t\tthe 'F' flag is also included |cpo-F|.\n+        \t\t\t\t\t\t\t*cpo-q*\n+        \tq\tWhen joining multiple lines leave the cursor at the\n+        \t\tposition where it would be when joining two lines.\n+        \t\t\t\t\t\t\t*cpo-r*\n+        \tr\tRedo (\".\" command) uses \"/\" to repeat a search\n+        \t\tcommand, instead of the actually used search string.\n+        \t\t\t\t\t\t\t*cpo-R*\n+        \tR\tRemove marks from filtered lines.  Without this flag\n+        \t\tmarks are kept like |:keepmarks| was used.\n+        \t\t\t\t\t\t\t*cpo-s*\n+        \ts\tSet buffer options when entering the buffer for the\n+        \t\tfirst time.  This is like it is in Vim version 3.0.\n+        \t\tAnd it is the default.  If not present the options are\n+        \t\tset when the buffer is created.\n+        \t\t\t\t\t\t\t*cpo-S*\n+        \tS\tSet buffer options always when entering a buffer\n+        \t\t(except 'readonly', 'fileformat', 'filetype' and\n+        \t\t'syntax').  This is the (most) Vi compatible setting.\n+        \t\tThe options are set to the values in the current\n+        \t\tbuffer.  When you change an option and go to another\n+        \t\tbuffer, the value is copied.  Effectively makes the\n+        \t\tbuffer options global to all buffers.\n+\n+        \t\t's'    'S'     copy buffer options\n+        \t\tno     no      when buffer created\n+        \t\tyes    no      when buffer first entered (default)\n+        \t\t X     yes     each time when buffer entered (vi comp.)\n+        \t\t\t\t\t\t\t*cpo-t*\n+        \tt\tSearch pattern for the tag command is remembered for\n+        \t\t\"n\" command.  Otherwise Vim only puts the pattern in\n+        \t\tthe history for search pattern, but doesn't change the\n+        \t\tlast used search pattern.\n+        \t\t\t\t\t\t\t*cpo-u*\n+        \tu\tUndo is Vi compatible.  See |undo-two-ways|.\n+        \t\t\t\t\t\t\t*cpo-v*\n+        \tv\tBackspaced characters remain visible on the screen in\n+        \t\tInsert mode.  Without this flag the characters are\n+        \t\terased from the screen right away.  With this flag the\n+        \t\tscreen newly typed text overwrites backspaced\n+        \t\tcharacters.\n+        \t\t\t\t\t\t\t*cpo-W*\n+        \tW\tDon't overwrite a readonly file.  When omitted, \":w!\"\n+        \t\toverwrites a readonly file, if possible.\n+        \t\t\t\t\t\t\t*cpo-x*\n+        \tx\t<Esc> on the command-line executes the command-line.\n+        \t\tThe default in Vim is to abandon the command-line,\n+        \t\tbecause <Esc> normally aborts a command.  |c_<Esc>|\n+        \t\t\t\t\t\t\t*cpo-X*\n+        \tX\tWhen using a count with \"R\" the replaced text is\n+        \t\tdeleted only once.  Also when repeating \"R\" with \".\"\n+        \t\tand a count.\n+        \t\t\t\t\t\t\t*cpo-y*\n+        \ty\tA yank command can be redone with \".\".  Think twice if\n+        \t\tyou really want to use this, it may break some\n+        \t\tplugins, since most people expect \".\" to only repeat a\n+        \t\tchange.\n+        \t\t\t\t\t\t\t*cpo-Z*\n+        \tZ\tWhen using \"w!\" while the 'readonly' option is set,\n+        \t\tdon't reset 'readonly'.\n+        \t\t\t\t\t\t\t*cpo-!*\n+        \t!\tWhen redoing a filter command, use the last used\n+        \t\texternal command, whatever it was.  Otherwise the last\n+        \t\tused -filter- command is used.\n+        \t\t\t\t\t\t\t*cpo-$*\n+        \t$\tWhen making a change to one line, don't redisplay the\n+        \t\tline, but put a '$' at the end of the changed text.\n+        \t\tThe changed text will be overwritten when you type the\n+        \t\tnew text.  The line is redisplayed if you type any\n+        \t\tcommand that moves the cursor from the insertion\n+        \t\tpoint.\n+        \t\t\t\t\t\t\t*cpo-%*\n+        \t%\tVi-compatible matching is done for the \"%\" command.\n+        \t\tDoes not recognize \"#if\", \"#endif\", etc.\n+        \t\tDoes not recognize \"/*\" and \"*/\".\n+        \t\tParens inside single and double quotes are also\n+        \t\tcounted, causing a string that contains a paren to\n+        \t\tdisturb the matching.  For example, in a line like\n+        \t\t\"if (strcmp(\"foo(\", s))\" the first paren does not\n+        \t\tmatch the last one.  When this flag is not included,\n+        \t\tparens inside single and double quotes are treated\n+        \t\tspecially.  When matching a paren outside of quotes,\n+        \t\teverything inside quotes is ignored.  When matching a\n+        \t\tparen inside quotes, it will find the matching one (if\n+        \t\tthere is one).  This works very well for C programs.\n+        \t\tThis flag is also used for other features, such as\n+        \t\tC-indenting.\n+        \t\t\t\t\t\t\t*cpo-+*\n+        \t+\tWhen included, a \":write file\" command will reset the\n+        \t\t'modified' flag of the buffer, even though the buffer\n+        \t\titself may still be different from its file.\n+        \t\t\t\t\t\t\t*cpo->*\n+        \t>\tWhen appending to a register, put a line break before\n+        \t\tthe appended text.\n+        \t\t\t\t\t\t\t*cpo-;*\n+        \t;\tWhen using |,| or |;| to repeat the last |t| search\n+        \t\tand the cursor is right in front of the searched\n+        \t\tcharacter, the cursor won't move. When not included,\n+        \t\tthe cursor would skip over it and jump to the\n+        \t\tfollowing occurrence.\n+        \t\t\t\t\t\t\t*cpo-_*\n+        \t_\tWhen using |cw| on a word, do not include the\n+        \t\twhitespace following the word in the motion.\n+      ]=],\n+      full_name = 'cpoptions',\n+      list = 'flags',\n+      redraw = { 'all_windows' },\n+      scope = { 'global' },\n+      short_desc = N_('flags for Vi-compatible behavior'),\n+      tags = { 'cpo' },\n+      type = 'string',\n+      varname = 'p_cpo',\n+    },\n+    {\n+      abbreviation = 'crb',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        When this option is set, as the cursor in the current\n+        window moves other cursorbound windows (windows that also have\n+        this option set) move their cursors to the corresponding line and\n+        column.  This option is useful for viewing the\n+        differences between two versions of a file (see 'diff'); in diff mode,\n+        inserted and deleted lines (though not characters within a line) are\n+        taken into account.\n+      ]=],\n+      full_name = 'cursorbind',\n+      pv_name = 'p_crbind',\n+      scope = { 'window' },\n+      short_desc = N_('move cursor in window as it moves in other windows'),\n+      type = 'bool',\n+    },\n+    {\n+      abbreviation = 'cuc',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Highlight the screen column of the cursor with CursorColumn\n+        |hl-CursorColumn|.  Useful to align text.  Will make screen redrawing\n+        slower.\n+        If you only want the highlighting in the current window you can use\n+        these autocommands: >\n+        \tau WinLeave * set nocursorline nocursorcolumn\n+        \tau WinEnter * set cursorline cursorcolumn\n+        <\n+      ]=],\n+      full_name = 'cursorcolumn',\n+      redraw = { 'current_window_only' },\n+      scope = { 'window' },\n+      short_desc = N_('highlight the screen column of the cursor'),\n+      type = 'bool',\n+    },\n+    {\n+      abbreviation = 'cul',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Highlight the text line of the cursor with CursorLine |hl-CursorLine|.\n+        Useful to easily spot the cursor.  Will make screen redrawing slower.\n+        When Visual mode is active the highlighting isn't used to make it\n+        easier to see the selected text.\n+      ]=],\n+      full_name = 'cursorline',\n+      redraw = { 'current_window_only' },\n+      scope = { 'window' },\n+      short_desc = N_('highlight the screen line of the cursor'),\n+      type = 'bool',\n+    },\n+    {\n+      abbreviation = 'culopt',\n+      cb = 'did_set_cursorlineopt',\n+      defaults = { if_true = 'both' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Comma-separated list of settings for how 'cursorline' is displayed.\n+        Valid values:\n+        \"line\"\t\tHighlight the text line of the cursor with\n+        \t\tCursorLine |hl-CursorLine|.\n+        \"screenline\"\tHighlight only the screen line of the cursor with\n+        \t\tCursorLine |hl-CursorLine|.\n+        \"number\"\tHighlight the line number of the cursor with\n+        \t\tCursorLineNr |hl-CursorLineNr|.\n+\n+        Special value:\n+        \"both\"\t\tAlias for the values \"line,number\".\n+\n+        \"line\" and \"screenline\" cannot be used together.\n+      ]=],\n+      full_name = 'cursorlineopt',\n+      list = 'onecomma',\n+      redraw = { 'current_window_only' },\n+      scope = { 'window' },\n+      short_desc = N_(\"settings for 'cursorline'\"),\n+      type = 'string',\n+    },\n+    {\n+      cb = 'did_set_debug',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        These values can be used:\n+        msg\tError messages that would otherwise be omitted will be given\n+        \tanyway.\n+        throw\tError messages that would otherwise be omitted will be given\n+        \tanyway and also throw an exception and set |v:errmsg|.\n+        beep\tA message will be given when otherwise only a beep would be\n+        \tproduced.\n+        The values can be combined, separated by a comma.\n+        \"msg\" and \"throw\" are useful for debugging 'foldexpr', 'formatexpr' or\n+        'indentexpr'.\n+      ]=],\n+      full_name = 'debug',\n+      scope = { 'global' },\n+      short_desc = N_('to \"msg\" to see all error messages'),\n+      type = 'string',\n+      varname = 'p_debug',\n+    },\n+    {\n+      abbreviation = 'def',\n+      alloced = true,\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        Pattern to be used to find a macro definition.  It is a search\n+        pattern, just like for the \"/\" command.  This option is used for the\n+        commands like \"[i\" and \"[d\" |include-search|.  The 'isident' option is\n+        used to recognize the defined name after the match: >\n+        \t{match with 'define'}{non-ID chars}{defined name}{non-ID char}\n+        <\tSee |option-backslash| about inserting backslashes to include a space\n+        or backslash.\n+        For C++ this value would be useful, to include const type declarations: >\n+        \t^\\(#\\s*define\\|[a-z]*\\s*const\\s*[a-z]*\\)\n+        <\tYou can also use \"\\ze\" just before the name and continue the pattern\n+        to check what is following.  E.g. for Javascript, if a function is\n+        defined with `func_name = function(args)`: >\n+        \t^\\s*\\ze\\i\\+\\s*=\\s*function(\n+        <\tIf the function is defined with `func_name : function() {...`: >\n+                ^\\s*\\ze\\i\\+\\s*[:]\\s*(*function\\s*(\n+        <\tWhen using the \":set\" command, you need to double the backslashes!\n+        To avoid that use `:let` with a single quote string: >\n+        \tlet &l:define = '^\\s*\\ze\\k\\+\\s*=\\s*function('\n+        <\n+      ]=],\n+      full_name = 'define',\n+      redraw = { 'curswant' },\n+      scope = { 'global', 'buffer' },\n+      short_desc = N_('pattern to be used to find a macro definition'),\n+      type = 'string',\n+      varname = 'p_def',\n+    },\n+    {\n+      abbreviation = 'deco',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        If editing Unicode and this option is set, backspace and Normal mode\n+        \"x\" delete each combining character on its own.  When it is off (the\n+        default) the character along with its combining characters are\n+        deleted.\n+        Note: When 'delcombine' is set \"xx\" may work differently from \"2x\"!\n+\n+        This is useful for Arabic, Hebrew and many other languages where one\n+        may have combining characters overtop of base characters, and want\n+        to remove only the combining ones.\n+      ]=],\n+      full_name = 'delcombine',\n+      scope = { 'global' },\n+      short_desc = N_('delete combining characters on their own'),\n+      type = 'bool',\n+      varname = 'p_deco',\n+    },\n+    {\n+      abbreviation = 'dict',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        List of file names, separated by commas, that are used to lookup words\n+        for keyword completion commands |i_CTRL-X_CTRL-K|.  Each file should\n+        contain a list of words.  This can be one word per line, or several\n+        words per line, separated by non-keyword characters (white space is\n+        preferred).  Maximum line length is 510 bytes.\n+\n+        When this option is empty or an entry \"spell\" is present, and spell\n+        checking is enabled, words in the word lists for the currently active\n+        'spelllang' are used. See |spell|.\n+\n+        To include a comma in a file name precede it with a backslash.  Spaces\n+        after a comma are ignored, otherwise spaces are included in the file\n+        name.  See |option-backslash| about using backslashes.\n+        This has nothing to do with the |Dictionary| variable type.\n+        Where to find a list of words?\n+        - BSD/macOS include the \"/usr/share/dict/words\" file.\n+        - Try \"apt install spell\" to get the \"/usr/share/dict/words\" file on\n+          apt-managed systems (Debian/Ubuntu).\n+        The use of |:set+=| and |:set-=| is preferred when adding or removing\n+        directories from the list.  This avoids problems when a future version\n+        uses another default.\n+        Backticks cannot be used in this option for security reasons.\n+      ]=],\n+      expand = true,\n+      full_name = 'dictionary',\n+      list = 'onecomma',\n+      normal_dname_chars = true,\n+      scope = { 'global', 'buffer' },\n+      short_desc = N_('list of file names used for keyword completion'),\n+      type = 'string',\n+      varname = 'p_dict',\n+    },\n+    {\n+      cb = 'did_set_diff',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Join the current window in the group of windows that shows differences\n+        between files.  See |diff-mode|.\n+      ]=],\n+      full_name = 'diff',\n+      noglob = true,\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('diff mode for the current window'),\n+      type = 'bool',\n+    },\n+    {\n+      abbreviation = 'dex',\n+      cb = 'did_set_optexpr',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        Expression which is evaluated to obtain a diff file (either ed-style\n+        or unified-style) from two versions of a file.  See |diff-diffexpr|.\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      full_name = 'diffexpr',\n+      redraw = { 'curswant' },\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_('expression used to obtain a diff file'),\n+      type = 'string',\n+      varname = 'p_dex',\n+    },\n+    {\n+      abbreviation = 'dip',\n+      alloced = true,\n+      cb = 'did_set_diffopt',\n+      defaults = { if_true = 'internal,filler,closeoff' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Option settings for diff mode.  It can consist of the following items.\n+        All are optional.  Items must be separated by a comma.\n+\n+        \tfiller\t\tShow filler lines, to keep the text\n+        \t\t\tsynchronized with a window that has inserted\n+        \t\t\tlines at the same position.  Mostly useful\n+        \t\t\twhen windows are side-by-side and 'scrollbind'\n+        \t\t\tis set.\n+\n+        \tcontext:{n}\tUse a context of {n} lines between a change\n+        \t\t\tand a fold that contains unchanged lines.\n+        \t\t\tWhen omitted a context of six lines is used.\n+        \t\t\tWhen using zero the context is actually one,\n+        \t\t\tsince folds require a line in between, also\n+        \t\t\tfor a deleted line.\n+        \t\t\tSee |fold-diff|.\n+\n+        \tiblank\t\tIgnore changes where lines are all blank.  Adds\n+        \t\t\tthe \"-B\" flag to the \"diff\" command if\n+        \t\t\t'diffexpr' is empty.  Check the documentation\n+        \t\t\tof the \"diff\" command for what this does\n+        \t\t\texactly.\n+        \t\t\tNOTE: the diff windows will get out of sync,\n+        \t\t\tbecause no differences between blank lines are\n+        \t\t\ttaken into account.\n+\n+        \ticase\t\tIgnore changes in case of text.  \"a\" and \"A\"\n+        \t\t\tare considered the same.  Adds the \"-i\" flag\n+        \t\t\tto the \"diff\" command if 'diffexpr' is empty.\n+\n+        \tiwhite\t\tIgnore changes in amount of white space.  Adds\n+        \t\t\tthe \"-b\" flag to the \"diff\" command if\n+        \t\t\t'diffexpr' is empty.  Check the documentation\n+        \t\t\tof the \"diff\" command for what this does\n+        \t\t\texactly.  It should ignore adding trailing\n+        \t\t\twhite space, but not leading white space.\n+\n+        \tiwhiteall\tIgnore all white space changes.  Adds\n+        \t\t\tthe \"-w\" flag to the \"diff\" command if\n+        \t\t\t'diffexpr' is empty.  Check the documentation\n+        \t\t\tof the \"diff\" command for what this does\n+        \t\t\texactly.\n+\n+        \tiwhiteeol\tIgnore white space changes at end of line.\n+        \t\t\tAdds the \"-Z\" flag to the \"diff\" command if\n+        \t\t\t'diffexpr' is empty.  Check the documentation\n+        \t\t\tof the \"diff\" command for what this does\n+        \t\t\texactly.\n+\n+        \thorizontal\tStart diff mode with horizontal splits (unless\n+        \t\t\texplicitly specified otherwise).\n+\n+        \tvertical\tStart diff mode with vertical splits (unless\n+        \t\t\texplicitly specified otherwise).\n+\n+        \tcloseoff\tWhen a window is closed where 'diff' is set\n+        \t\t\tand there is only one window remaining in the\n+        \t\t\tsame tab page with 'diff' set, execute\n+        \t\t\t`:diffoff` in that window.  This undoes a\n+        \t\t\t`:diffsplit` command.\n+\n+        \thiddenoff\tDo not use diff mode for a buffer when it\n+        \t\t\tbecomes hidden.\n+\n+        \tfoldcolumn:{n}\tSet the 'foldcolumn' option to {n} when\n+        \t\t\tstarting diff mode.  Without this 2 is used.\n+\n+        \tfollowwrap\tFollow the 'wrap' option and leave as it is.\n+\n+        \tinternal\tUse the internal diff library.  This is\n+        \t\t\tignored when 'diffexpr' is set.  *E960*\n+        \t\t\tWhen running out of memory when writing a\n+        \t\t\tbuffer this item will be ignored for diffs\n+        \t\t\tinvolving that buffer.  Set the 'verbose'\n+        \t\t\toption to see when this happens.\n+\n+        \tindent-heuristic\n+        \t\t\tUse the indent heuristic for the internal\n+        \t\t\tdiff library.\n+\n+        \tlinematch:{n}   Enable a second stage diff on each generated\n+        \t\t\thunk in order to align lines. When the total\n+        \t\t\tnumber of lines in a hunk exceeds {n}, the\n+        \t\t\tsecond stage diff will not be performed as\n+        \t\t\tvery large hunks can cause noticeable lag. A\n+        \t\t\trecommended setting is \"linematch:60\", as this\n+        \t\t\twill enable alignment for a 2 buffer diff with\n+        \t\t\thunks of up to 30 lines each, or a 3 buffer\n+        \t\t\tdiff with hunks of up to 20 lines each.\n+\n+        \talgorithm:{text} Use the specified diff algorithm with the\n+        \t\t\tinternal diff engine. Currently supported\n+        \t\t\talgorithms are:\n+        \t\t\tmyers      the default algorithm\n+        \t\t\tminimal    spend extra time to generate the\n+        \t\t\t\t   smallest possible diff\n+        \t\t\tpatience   patience diff algorithm\n+        \t\t\thistogram  histogram diff algorithm\n+\n+        Examples: >\n+        \t:set diffopt=internal,filler,context:4\n+        \t:set diffopt=\n+        \t:set diffopt=internal,filler,foldcolumn:3\n+        \t:set diffopt-=internal  \" do NOT use the internal diff parser\n+        <\n+      ]=],\n+      full_name = 'diffopt',\n+      list = 'onecomma',\n+      redraw = { 'current_window' },\n+      scope = { 'global' },\n+      short_desc = N_('options for using diff mode'),\n+      type = 'string',\n+      varname = 'p_dip',\n+    },\n+    {\n+      abbreviation = 'dg',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Enable the entering of digraphs in Insert mode with {char1} <BS>\n+        {char2}.  See |digraphs|.\n+      ]=],\n+      full_name = 'digraph',\n+      scope = { 'global' },\n+      short_desc = N_('enable the entering of digraphs in Insert mode'),\n+      type = 'bool',\n+      varname = 'p_dg',\n+    },\n+    {\n+      abbreviation = 'dir',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        List of directory names for the swap file, separated with commas.\n+\n+        Possible items:\n+        - The swap file will be created in the first directory where this is\n+          possible.  If it is not possible in any directory, but last\n+          directory listed in the option does not exist, it is created.\n+        - Empty means that no swap file will be used (recovery is\n+          impossible!) and no |E303| error will be given.\n+        - A directory \".\" means to put the swap file in the same directory as\n+          the edited file.  On Unix, a dot is prepended to the file name, so\n+          it doesn't show in a directory listing.  On MS-Windows the \"hidden\"\n+          attribute is set and a dot prepended if possible.\n+        - A directory starting with \"./\" (or \".\\\" for MS-Windows) means to put\n+          the swap file relative to where the edited file is.  The leading \".\"\n+          is replaced with the path name of the edited file.\n+        - For Unix and Win32, if a directory ends in two path separators \"//\",\n+          the swap file name will be built from the complete path to the file\n+          with all path separators replaced by percent '%' signs (including\n+          the colon following the drive letter on Win32). This will ensure\n+          file name uniqueness in the preserve directory.\n+          On Win32, it is also possible to end with \"\\\\\".  However, When a\n+          separating comma is following, you must use \"//\", since \"\\\\\" will\n+          include the comma in the file name. Therefore it is recommended to\n+          use '//', instead of '\\\\'.\n+        - Spaces after the comma are ignored, other spaces are considered part\n+          of the directory name.  To have a space at the start of a directory\n+          name, precede it with a backslash.\n+        - To include a comma in a directory name precede it with a backslash.\n+        - A directory name may end in an ':' or '/'.\n+        - Environment variables are expanded |:set_env|.\n+        - Careful with '\\' characters, type one before a space, type two to\n+          get one in the option (see |option-backslash|), for example: >\n+            :set dir=c:\\\\tmp,\\ dir\\\\,with\\\\,commas,\\\\\\ dir\\ with\\ spaces\n+        <\n+        Editing the same file twice will result in a warning.  Using \"/tmp\" on\n+        is discouraged: if the system crashes you lose the swap file. And\n+        others on the computer may be able to see the files.\n+        Use |:set+=| and |:set-=| when adding or removing directories from the\n+        list, this avoids problems if the Nvim default is changed.\n+\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      expand = 'nodefault',\n+      full_name = 'directory',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_('list of directory names for the swap file'),\n+      type = 'string',\n+      varname = 'p_dir',\n+    },\n+    {\n+      abbreviation = 'dy',\n+      cb = 'did_set_display',\n+      defaults = { if_true = 'lastline' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Change the way text is displayed.  This is a comma-separated list of\n+        flags:\n+        lastline\tWhen included, as much as possible of the last line\n+        \t\tin a window will be displayed.  \"@@@\" is put in the\n+        \t\tlast columns of the last screen line to indicate the\n+        \t\trest of the line is not displayed.\n+        truncate\tLike \"lastline\", but \"@@@\" is displayed in the first\n+        \t\tcolumn of the last screen line.  Overrules \"lastline\".\n+        uhex\t\tShow unprintable characters hexadecimal as <xx>\n+        \t\tinstead of using ^C and ~C.\n+        msgsep\t\tObsolete flag. Allowed but takes no effect. |msgsep|\n+\n+        When neither \"lastline\" nor \"truncate\" is included, a last line that\n+        doesn't fit is replaced with \"@\" lines.\n+\n+        The \"@\" character can be changed by setting the \"lastline\" item in\n+        'fillchars'.  The character is highlighted with |hl-NonText|.\n+      ]=],\n+      full_name = 'display',\n+      list = 'onecomma',\n+      redraw = { 'all_windows' },\n+      scope = { 'global' },\n+      short_desc = N_('list of flags for how to display text'),\n+      type = 'string',\n+      varname = 'p_dy',\n+    },\n+    {\n+      abbreviation = 'ead',\n+      cb = 'did_set_eadirection',\n+      defaults = { if_true = 'both' },\n+      desc = [=[\n+        Tells when the 'equalalways' option applies:\n+        \tver\tvertically, width of windows is not affected\n+        \thor\thorizontally, height of windows is not affected\n+        \tboth\twidth and height of windows is affected\n+      ]=],\n+      full_name = 'eadirection',\n+      scope = { 'global' },\n+      short_desc = N_(\"in which direction 'equalalways' works\"),\n+      type = 'string',\n+      varname = 'p_ead',\n+    },\n+    {\n+      abbreviation = 'ed',\n+      defaults = { if_true = false },\n+      full_name = 'edcompatible',\n+      scope = { 'global' },\n+      short_desc = N_('No description'),\n+      type = 'bool',\n+      varname = 'p_force_off',\n+    },\n+    {\n+      abbreviation = 'emo',\n+      cb = 'did_set_ambiwidth',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        When on all Unicode emoji characters are considered to be full width.\n+        This excludes \"text emoji\" characters, which are normally displayed as\n+        single width.  Unfortunately there is no good specification for this\n+        and it has been determined on trial-and-error basis.  Use the\n+        |setcellwidths()| function to change the behavior.\n+      ]=],\n+      full_name = 'emoji',\n+      redraw = { 'all_windows', 'ui_option' },\n+      scope = { 'global' },\n+      short_desc = N_('No description'),\n+      type = 'bool',\n+      varname = 'p_emoji',\n+    },\n+    {\n+      abbreviation = 'enc',\n+      cb = 'did_set_encoding',\n+      defaults = { if_true = macros('ENC_DFLT') },\n+      deny_in_modelines = true,\n+      desc = [=[\n+        String-encoding used internally and for |RPC| communication.\n+        Always UTF-8.\n+\n+        See 'fileencoding' to control file-content encoding.\n+      ]=],\n+      full_name = 'encoding',\n+      scope = { 'global' },\n+      short_desc = N_('encoding used internally'),\n+      type = 'string',\n+      varname = 'p_enc',\n+    },\n+    {\n+      abbreviation = 'eof',\n+      cb = 'did_set_eof_eol_fixeol_bomb',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Indicates that a CTRL-Z character was found at the end of the file\n+        when reading it.  Normally only happens when 'fileformat' is \"dos\".\n+        When writing a file and this option is off and the 'binary' option\n+        is on, or 'fixeol' option is off, no CTRL-Z will be written at the\n+        end of the file.\n+        See |eol-and-eof| for example settings.\n+      ]=],\n+      full_name = 'endoffile',\n+      no_mkrc = true,\n+      redraw = { 'statuslines' },\n+      scope = { 'buffer' },\n+      short_desc = N_('write CTRL-Z for last line in file'),\n+      type = 'bool',\n+      varname = 'p_eof',\n+    },\n+    {\n+      abbreviation = 'eol',\n+      cb = 'did_set_eof_eol_fixeol_bomb',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        When writing a file and this option is off and the 'binary' option\n+        is on, or 'fixeol' option is off, no <EOL> will be written for the\n+        last line in the file.  This option is automatically set or reset when\n+        starting to edit a new file, depending on whether file has an <EOL>\n+        for the last line in the file.  Normally you don't have to set or\n+        reset this option.\n+        When 'binary' is off and 'fixeol' is on the value is not used when\n+        writing the file.  When 'binary' is on or 'fixeol' is off it is used\n+        to remember the presence of a <EOL> for the last line in the file, so\n+        that when you write the file the situation from the original file can\n+        be kept.  But you can change it if you want to.\n+        See |eol-and-eof| for example settings.\n+      ]=],\n+      full_name = 'endofline',\n+      no_mkrc = true,\n+      redraw = { 'statuslines' },\n+      scope = { 'buffer' },\n+      short_desc = N_('write <EOL> for last line in file'),\n+      type = 'bool',\n+      varname = 'p_eol',\n+    },\n+    {\n+      abbreviation = 'ea',\n+      cb = 'did_set_equalalways',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        When on, all the windows are automatically made the same size after\n+        splitting or closing a window.  This also happens the moment the\n+        option is switched on.  When off, splitting a window will reduce the\n+        size of the current window and leave the other windows the same.  When\n+        closing a window the extra lines are given to the window next to it\n+        (depending on 'splitbelow' and 'splitright').\n+        When mixing vertically and horizontally split windows, a minimal size\n+        is computed and some windows may be larger if there is room.  The\n+        'eadirection' option tells in which direction the size is affected.\n+        Changing the height and width of a window can be avoided by setting\n+        'winfixheight' and 'winfixwidth', respectively.\n+        If a window size is specified when creating a new window sizes are\n+        currently not equalized (it's complicated, but may be implemented in\n+        the future).\n+      ]=],\n+      full_name = 'equalalways',\n+      scope = { 'global' },\n+      short_desc = N_('windows are automatically made the same size'),\n+      type = 'bool',\n+      varname = 'p_ea',\n+    },\n+    {\n+      abbreviation = 'ep',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        External program to use for \"=\" command.  When this option is empty\n+        the internal formatting functions are used; either 'lisp', 'cindent'\n+        or 'indentexpr'.\n+        Environment variables are expanded |:set_env|.  See |option-backslash|\n+        about including spaces and backslashes.\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      expand = true,\n+      full_name = 'equalprg',\n+      scope = { 'global', 'buffer' },\n+      secure = true,\n+      short_desc = N_('external program to use for \"=\" command'),\n+      type = 'string',\n+      varname = 'p_ep',\n+    },\n+    {\n+      abbreviation = 'eb',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Ring the bell (beep or screen flash) for error messages.  This only\n+        makes a difference for error messages, the bell will be used always\n+        for a lot of errors without a message (e.g., hitting <Esc> in Normal\n+        mode).  See 'visualbell' to make the bell behave like a screen flash\n+        or do nothing. See 'belloff' to finetune when to ring the bell.\n+      ]=],\n+      full_name = 'errorbells',\n+      scope = { 'global' },\n+      short_desc = N_('ring the bell for error messages'),\n+      type = 'bool',\n+      varname = 'p_eb',\n+    },\n+    {\n+      abbreviation = 'ef',\n+      defaults = { if_true = macros('DFLT_ERRORFILE') },\n+      desc = [=[\n+        Name of the errorfile for the QuickFix mode (see |:cf|).\n+        When the \"-q\" command-line argument is used, 'errorfile' is set to the\n+        following argument.  See |-q|.\n+        NOT used for the \":make\" command.  See 'makeef' for that.\n+        Environment variables are expanded |:set_env|.\n+        See |option-backslash| about including spaces and backslashes.\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      expand = true,\n+      full_name = 'errorfile',\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_('name of the errorfile for the QuickFix mode'),\n+      type = 'string',\n+      varname = 'p_ef',\n+    },\n+    {\n+      abbreviation = 'efm',\n+      defaults = {\n+        if_true = macros('DFLT_EFM'),\n+        doc = 'is very long',\n+      },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Scanf-like description of the format for the lines in the error file\n+        (see |errorformat|).\n+      ]=],\n+      full_name = 'errorformat',\n+      list = 'onecomma',\n+      scope = { 'global', 'buffer' },\n+      short_desc = N_('description of the lines in the error file'),\n+      type = 'string',\n+      varname = 'p_efm',\n+    },\n+    {\n+      abbreviation = 'ei',\n+      cb = 'did_set_eventignore',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        A list of autocommand event names, which are to be ignored.\n+        When set to \"all\" or when \"all\" is one of the items, all autocommand\n+        events are ignored, autocommands will not be executed.\n+        Otherwise this is a comma-separated list of event names.  Example: >\n+            :set ei=WinEnter,WinLeave\n+        <\n+      ]=],\n+      full_name = 'eventignore',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('autocommand events that are ignored'),\n+      type = 'string',\n+      varname = 'p_ei',\n+    },\n+    {\n+      abbreviation = 'et',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        In Insert mode: Use the appropriate number of spaces to insert a\n+        <Tab>.  Spaces are used in indents with the '>' and '<' commands and\n+        when 'autoindent' is on.  To insert a real tab when 'expandtab' is\n+        on, use CTRL-V<Tab>.  See also |:retab| and |ins-expandtab|.\n+      ]=],\n+      full_name = 'expandtab',\n+      scope = { 'buffer' },\n+      short_desc = N_('use spaces when <Tab> is inserted'),\n+      type = 'bool',\n+      varname = 'p_et',\n+    },\n+    {\n+      abbreviation = 'ex',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Automatically execute .nvim.lua, .nvimrc, and .exrc files in the\n+        current directory, if the file is in the |trust| list. Use |:trust| to\n+        manage trusted files. See also |vim.secure.read()|.\n+\n+        Compare 'exrc' to |editorconfig|:\n+        - 'exrc' can execute any code; editorconfig only specifies settings.\n+        - 'exrc' is Nvim-specific; editorconfig works in other editors.\n+\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      full_name = 'exrc',\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_('read .nvimrc and .exrc in the current directory'),\n+      type = 'bool',\n+      varname = 'p_exrc',\n+    },\n+    {\n+      abbreviation = 'fenc',\n+      alloced = true,\n+      cb = 'did_set_encoding',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        File-content encoding for the current buffer. Conversion is done with\n+        iconv() or as specified with 'charconvert'.\n+\n+        When 'fileencoding' is not UTF-8, conversion will be done when\n+        writing the file.  For reading see below.\n+        When 'fileencoding' is empty, the file will be saved with UTF-8\n+        encoding (no conversion when reading or writing a file).\n+\n+        WARNING: Conversion to a non-Unicode encoding can cause loss of\n+        information!\n+\n+        See |encoding-names| for the possible values.  Additionally, values may be\n+        specified that can be handled by the converter, see\n+        |mbyte-conversion|.\n+\n+        When reading a file 'fileencoding' will be set from 'fileencodings'.\n+        To read a file in a certain encoding it won't work by setting\n+        'fileencoding', use the |++enc| argument.  One exception: when\n+        'fileencodings' is empty the value of 'fileencoding' is used.\n+        For a new file the global value of 'fileencoding' is used.\n+\n+        Prepending \"8bit-\" and \"2byte-\" has no meaning here, they are ignored.\n+        When the option is set, the value is converted to lowercase.  Thus\n+        you can set it with uppercase values too.  '_' characters are\n+        replaced with '-'.  If a name is recognized from the list at\n+        |encoding-names|, it is replaced by the standard name.  For example\n+        \"ISO8859-2\" becomes \"iso-8859-2\".\n+\n+        When this option is set, after starting to edit a file, the 'modified'\n+        option is set, because the file would be different when written.\n+\n+        Keep in mind that changing 'fenc' from a modeline happens\n+        AFTER the text has been read, thus it applies to when the file will be\n+        written.  If you do set 'fenc' in a modeline, you might want to set\n+        'nomodified' to avoid not being able to \":q\".\n+\n+        This option cannot be changed when 'modifiable' is off.\n+      ]=],\n+      full_name = 'fileencoding',\n+      no_mkrc = true,\n+      redraw = { 'statuslines', 'current_buffer' },\n+      scope = { 'buffer' },\n+      short_desc = N_('file encoding for multi-byte text'),\n+      tags = { 'E213' },\n+      type = 'string',\n+      varname = 'p_fenc',\n+    },\n+    {\n+      abbreviation = 'fencs',\n+      defaults = { if_true = 'ucs-bom,utf-8,default,latin1' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        This is a list of character encodings considered when starting to edit\n+        an existing file.  When a file is read, Vim tries to use the first\n+        mentioned character encoding.  If an error is detected, the next one\n+        in the list is tried.  When an encoding is found that works,\n+        'fileencoding' is set to it.  If all fail, 'fileencoding' is set to\n+        an empty string, which means that UTF-8 is used.\n+        \tWARNING: Conversion can cause loss of information! You can use\n+        \tthe |++bad| argument to specify what is done with characters\n+        \tthat can't be converted.\n+        For an empty file or a file with only ASCII characters most encodings\n+        will work and the first entry of 'fileencodings' will be used (except\n+        \"ucs-bom\", which requires the BOM to be present).  If you prefer\n+        another encoding use an BufReadPost autocommand event to test if your\n+        preferred encoding is to be used.  Example: >\n+        \tau BufReadPost * if search('\\S', 'w') == 0 |\n+        \t\t\\ set fenc=iso-2022-jp | endif\n+        <\tThis sets 'fileencoding' to \"iso-2022-jp\" if the file does not contain\n+        non-blank characters.\n+        When the |++enc| argument is used then the value of 'fileencodings' is\n+        not used.\n+        Note that 'fileencodings' is not used for a new file, the global value\n+        of 'fileencoding' is used instead.  You can set it with: >\n+        \t:setglobal fenc=iso-8859-2\n+        <\tThis means that a non-existing file may get a different encoding than\n+        an empty file.\n+        The special value \"ucs-bom\" can be used to check for a Unicode BOM\n+        (Byte Order Mark) at the start of the file.  It must not be preceded\n+        by \"utf-8\" or another Unicode encoding for this to work properly.\n+        An entry for an 8-bit encoding (e.g., \"latin1\") should be the last,\n+        because Vim cannot detect an error, thus the encoding is always\n+        accepted.\n+        The special value \"default\" can be used for the encoding from the\n+        environment.  It is useful when your environment uses a non-latin1\n+        encoding, such as Russian.\n+        When a file contains an illegal UTF-8 byte sequence it won't be\n+        recognized as \"utf-8\".  You can use the |8g8| command to find the\n+        illegal byte sequence.\n+        WRONG VALUES:\t\t\tWHAT'S WRONG:\n+        \tlatin1,utf-8\t\t\"latin1\" will always be used\n+        \tutf-8,ucs-bom,latin1\tBOM won't be recognized in an utf-8\n+        \t\t\t\tfile\n+        \tcp1250,latin1\t\t\"cp1250\" will always be used\n+        If 'fileencodings' is empty, 'fileencoding' is not modified.\n+        See 'fileencoding' for the possible values.\n+        Setting this option does not have an effect until the next time a file\n+        is read.\n+      ]=],\n+      full_name = 'fileencodings',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('automatically detected character encodings'),\n+      type = 'string',\n+      varname = 'p_fencs',\n+    },\n+    {\n+      abbreviation = 'ff',\n+      alloced = true,\n+      cb = 'did_set_fileformat',\n+      defaults = {\n+        if_true = macros('DFLT_FF'),\n+        doc = 'Windows: \"dos\", Unix: \"unix\"',\n+      },\n+      desc = [=[\n+        This gives the <EOL> of the current buffer, which is used for\n+        reading/writing the buffer from/to a file:\n+            dos\t    <CR><NL>\n+            unix    <NL>\n+            mac\t    <CR>\n+        When \"dos\" is used, CTRL-Z at the end of a file is ignored.\n+        See |file-formats| and |file-read|.\n+        For the character encoding of the file see 'fileencoding'.\n+        When 'binary' is set, the value of 'fileformat' is ignored, file I/O\n+        works like it was set to \"unix\".\n+        This option is set automatically when starting to edit a file and\n+        'fileformats' is not empty and 'binary' is off.\n+        When this option is set, after starting to edit a file, the 'modified'\n+        option is set, because the file would be different when written.\n+        This option cannot be changed when 'modifiable' is off.\n+      ]=],\n+      full_name = 'fileformat',\n+      no_mkrc = true,\n+      redraw = { 'curswant', 'statuslines' },\n+      scope = { 'buffer' },\n+      short_desc = N_('file format used for file I/O'),\n+      type = 'string',\n+      varname = 'p_ff',\n+    },\n+    {\n+      abbreviation = 'ffs',\n+      cb = 'did_set_fileformats',\n+      defaults = {\n+        if_true = macros('DFLT_FFS_VIM'),\n+        doc = 'Windows: \"dos,unix\", Unix: \"unix,dos\"',\n+      },\n+      deny_duplicates = true,\n+      desc = [=[\n+        This gives the end-of-line (<EOL>) formats that will be tried when\n+        starting to edit a new buffer and when reading a file into an existing\n+        buffer:\n+        - When empty, the format defined with 'fileformat' will be used\n+          always.  It is not set automatically.\n+        - When set to one name, that format will be used whenever a new buffer\n+          is opened.  'fileformat' is set accordingly for that buffer.  The\n+          'fileformats' name will be used when a file is read into an existing\n+          buffer, no matter what 'fileformat' for that buffer is set to.\n+        - When more than one name is present, separated by commas, automatic\n+          <EOL> detection will be done when reading a file.  When starting to\n+          edit a file, a check is done for the <EOL>:\n+          1. If all lines end in <CR><NL>, and 'fileformats' includes \"dos\",\n+             'fileformat' is set to \"dos\".\n+          2. If a <NL> is found and 'fileformats' includes \"unix\", 'fileformat'\n+             is set to \"unix\".  Note that when a <NL> is found without a\n+             preceding <CR>, \"unix\" is preferred over \"dos\".\n+          3. If 'fileformat' has not yet been set, and if a <CR> is found, and\n+             if 'fileformats' includes \"mac\", 'fileformat' is set to \"mac\".\n+             This means that \"mac\" is only chosen when:\n+              \"unix\" is not present or no <NL> is found in the file, and\n+              \"dos\" is not present or no <CR><NL> is found in the file.\n+             Except: if \"unix\" was chosen, but there is a <CR> before\n+             the first <NL>, and there appear to be more <CR>s than <NL>s in\n+             the first few lines, \"mac\" is used.\n+          4. If 'fileformat' is still not set, the first name from\n+             'fileformats' is used.\n+          When reading a file into an existing buffer, the same is done, but\n+          this happens like 'fileformat' has been set appropriately for that\n+          file only, the option is not changed.\n+        When 'binary' is set, the value of 'fileformats' is not used.\n+\n+        When Vim starts up with an empty buffer the first item is used.  You\n+        can overrule this by setting 'fileformat' in your .vimrc.\n+\n+        For systems with a Dos-like <EOL> (<CR><NL>), when reading files that\n+        are \":source\"ed and for vimrc files, automatic <EOL> detection may be\n+        done:\n+        - When 'fileformats' is empty, there is no automatic detection.  Dos\n+          format will be used.\n+        - When 'fileformats' is set to one or more names, automatic detection\n+          is done.  This is based on the first <NL> in the file: If there is a\n+          <CR> in front of it, Dos format is used, otherwise Unix format is\n+          used.\n+        Also see |file-formats|.\n+      ]=],\n+      full_name = 'fileformats',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_(\"automatically detected values for 'fileformat'\"),\n+      type = 'string',\n+      varname = 'p_ffs',\n+    },\n+    {\n+      abbreviation = 'fic',\n+      defaults = {\n+        condition = 'CASE_INSENSITIVE_FILENAME',\n+        if_false = false,\n+        if_true = true,\n+        doc = [[on for systems where case in file\n+   names is normally ignored]],\n+      },\n+      desc = [=[\n+        When set case is ignored when using file names and directories.\n+        See 'wildignorecase' for only ignoring case when doing completion.\n+      ]=],\n+      full_name = 'fileignorecase',\n+      scope = { 'global' },\n+      short_desc = N_('ignore case when using file names'),\n+      type = 'bool',\n+      varname = 'p_fic',\n+    },\n+    {\n+      abbreviation = 'ft',\n+      alloced = true,\n+      cb = 'did_set_filetype_or_syntax',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        When this option is set, the FileType autocommand event is triggered.\n+        All autocommands that match with the value of this option will be\n+        executed.  Thus the value of 'filetype' is used in place of the file\n+        name.\n+        Otherwise this option does not always reflect the current file type.\n+        This option is normally set when the file type is detected.  To enable\n+        this use the \":filetype on\" command. |:filetype|\n+        Setting this option to a different value is most useful in a modeline,\n+        for a file for which the file type is not automatically recognized.\n+        Example, for in an IDL file: >\n+        \t/* vim: set filetype=idl : */\n+        <\t|FileType| |filetypes|\n+        When a dot appears in the value then this separates two filetype\n+        names.  Example: >\n+        \t/* vim: set filetype=c.doxygen : */\n+        <\tThis will use the \"c\" filetype first, then the \"doxygen\" filetype.\n+        This works both for filetype plugins and for syntax files.  More than\n+        one dot may appear.\n+        This option is not copied to another buffer, independent of the 's' or\n+        'S' flag in 'cpoptions'.\n+        Only normal file name characters can be used, `/\\*?[|<>` are illegal.\n+      ]=],\n+      expand = true,\n+      full_name = 'filetype',\n+      noglob = true,\n+      normal_fname_chars = true,\n+      scope = { 'buffer' },\n+      short_desc = N_('type of file, used for autocommands'),\n+      type = 'string',\n+      varname = 'p_ft',\n+    },\n+    {\n+      abbreviation = 'fcs',\n+      alloced = true,\n+      cb = 'did_set_chars_option',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Characters to fill the statuslines, vertical separators and special\n+        lines in the window.\n+        It is a comma-separated list of items.  Each item has a name, a colon\n+        and the value of that item:\n+\n+          item\t\tdefault\t\tUsed for ~\n+          stl\t\t' ' or '^'\tstatusline of the current window\n+          stlnc\t\t' ' or '='\tstatusline of the non-current windows\n+          wbr\t\t' '\t\twindow bar\n+          horiz\t\t'─' or '-'\thorizontal separators |:split|\n+          horizup\t'┴' or '-'\tupwards facing horizontal separator\n+          horizdown\t'┬' or '-'\tdownwards facing horizontal separator\n+          vert\t\t'│' or '|'\tvertical separators |:vsplit|\n+          vertleft\t'┤' or '|'\tleft facing vertical separator\n+          vertright\t'├' or '|'\tright facing vertical separator\n+          verthoriz\t'┼' or '+'\toverlapping vertical and horizontal\n+        \t\t\t\tseparator\n+          fold\t\t'·' or '-'\tfilling 'foldtext'\n+          foldopen\t'-'\t\tmark the beginning of a fold\n+          foldclose\t'+'\t\tshow a closed fold\n+          foldsep\t'│' or '|'      open fold middle marker\n+          diff\t\t'-'\t\tdeleted lines of the 'diff' option\n+          msgsep\t' '\t\tmessage separator 'display'\n+          eob\t\t'~'\t\tempty lines at the end of a buffer\n+          lastline\t'@'\t\t'display' contains lastline/truncate\n+\n+        Any one that is omitted will fall back to the default.  For \"stl\" and\n+        \"stlnc\" the space will be used when there is highlighting, '^' or '='\n+        otherwise.\n+\n+        Note that \"horiz\", \"horizup\", \"horizdown\", \"vertleft\", \"vertright\" and\n+        \"verthoriz\" are only used when 'laststatus' is 3, since only vertical\n+        window separators are used otherwise.\n+\n+        If 'ambiwidth' is \"double\" then \"horiz\", \"horizup\", \"horizdown\",\n+        \"vert\", \"vertleft\", \"vertright\", \"verthoriz\", \"foldsep\" and \"fold\"\n+        default to single-byte alternatives.\n+\n+        Example: >\n+            :set fillchars=stl:^,stlnc:=,vert:│,fold:·,diff:-\n+        <\tThis is similar to the default, except that these characters will also\n+        be used when there is highlighting.\n+\n+        For the \"stl\", \"stlnc\", \"foldopen\", \"foldclose\" and \"foldsep\" items\n+        single-byte and multibyte characters are supported.  But double-width\n+        characters are not supported.\n+\n+        The highlighting used for these items:\n+          item\t\thighlight group ~\n+          stl\t\tStatusLine\t\t|hl-StatusLine|\n+          stlnc\t\tStatusLineNC\t\t|hl-StatusLineNC|\n+          wbr\t\tWinBar\t\t\t|hl-WinBar| or |hl-WinBarNC|\n+          horiz\t\tWinSeparator\t\t|hl-WinSeparator|\n+          horizup\tWinSeparator\t\t|hl-WinSeparator|\n+          horizdown\tWinSeparator\t\t|hl-WinSeparator|\n+          vert\t\tWinSeparator\t\t|hl-WinSeparator|\n+          vertleft\tWinSeparator\t\t|hl-WinSeparator|\n+          vertright\tWinSeparator\t\t|hl-WinSeparator|\n+          verthoriz\tWinSeparator\t\t|hl-WinSeparator|\n+          fold\t\tFolded\t\t\t|hl-Folded|\n+          diff\t\tDiffDelete\t\t|hl-DiffDelete|\n+          eob\t\tEndOfBuffer\t\t|hl-EndOfBuffer|\n+          lastline\tNonText\t\t\t|hl-NonText|\n+      ]=],\n+      full_name = 'fillchars',\n+      list = 'onecomma',\n+      redraw = { 'current_window' },\n+      scope = { 'global', 'window' },\n+      short_desc = N_('characters to use for displaying special items'),\n+      type = 'string',\n+      varname = 'p_fcs',\n+    },\n+    {\n+      abbreviation = 'fixeol',\n+      cb = 'did_set_eof_eol_fixeol_bomb',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        When writing a file and this option is on, <EOL> at the end of file\n+        will be restored if missing.  Turn this option off if you want to\n+        preserve the situation from the original file.\n+        When the 'binary' option is set the value of this option doesn't\n+        matter.\n+        See the 'endofline' option.\n+        See |eol-and-eof| for example settings.\n+      ]=],\n+      full_name = 'fixendofline',\n+      redraw = { 'statuslines' },\n+      scope = { 'buffer' },\n+      short_desc = N_('make sure last line in file has <EOL>'),\n+      type = 'bool',\n+      varname = 'p_fixeol',\n+    },\n+    {\n+      abbreviation = 'fcl',\n+      cb = 'did_set_foldclose',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        When set to \"all\", a fold is closed when the cursor isn't in it and\n+        its level is higher than 'foldlevel'.  Useful if you want folds to\n+        automatically close when moving out of them.\n+      ]=],\n+      full_name = 'foldclose',\n+      list = 'onecomma',\n+      redraw = { 'current_window' },\n+      scope = { 'global' },\n+      short_desc = N_('close a fold when the cursor leaves it'),\n+      type = 'string',\n+      varname = 'p_fcl',\n+    },\n+    {\n+      abbreviation = 'fdc',\n+      alloced = true,\n+      cb = 'did_set_foldcolumn',\n+      defaults = { if_true = '0' },\n+      desc = [=[\n+        When and how to draw the foldcolumn. Valid values are:\n+            \"auto\":       resize to the minimum amount of folds to display.\n+            \"auto:[1-9]\": resize to accommodate multiple folds up to the\n+        \t\t  selected level\n+            0:            to disable foldcolumn\n+            \"[1-9]\":      to display a fixed number of columns\n+        See |folding|.\n+      ]=],\n+      full_name = 'foldcolumn',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('width of the column used to indicate folds'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'fen',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        When off, all folds are open.  This option can be used to quickly\n+        switch between showing all text unfolded and viewing the text with\n+        folds (including manually opened or closed folds).  It can be toggled\n+        with the |zi| command.  The 'foldcolumn' will remain blank when\n+        'foldenable' is off.\n+        This option is set by commands that create a new fold or close a fold.\n+        See |folding|.\n+      ]=],\n+      full_name = 'foldenable',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('set to display all folds open'),\n+      type = 'bool',\n+    },\n+    {\n+      abbreviation = 'fde',\n+      alloced = true,\n+      cb = 'did_set_foldexpr',\n+      defaults = { if_true = '0' },\n+      desc = [=[\n+        The expression used for when 'foldmethod' is \"expr\".  It is evaluated\n+        for each line to obtain its fold level.  The context is set to the\n+        script where 'foldexpr' was set, script-local items can be accessed.\n+        See |fold-expr| for the usage.\n+\n+        The expression will be evaluated in the |sandbox| if set from a\n+        modeline, see |sandbox-option|.\n+        This option can't be set from a |modeline| when the 'diff' option is\n+        on or the 'modelineexpr' option is off.\n+\n+        It is not allowed to change text or jump to another window while\n+        evaluating 'foldexpr' |textlock|.\n+      ]=],\n+      full_name = 'foldexpr',\n+      modelineexpr = true,\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('expression used when \\'foldmethod\\' is \"expr\"'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'fdi',\n+      alloced = true,\n+      cb = 'did_set_foldignore',\n+      defaults = { if_true = '#' },\n+      desc = [=[\n+        Used only when 'foldmethod' is \"indent\".  Lines starting with\n+        characters in 'foldignore' will get their fold level from surrounding\n+        lines.  White space is skipped before checking for this character.\n+        The default \"#\" works well for C programs.  See |fold-indent|.\n+      ]=],\n+      full_name = 'foldignore',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('ignore lines when \\'foldmethod\\' is \"indent\"'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'fdl',\n+      cb = 'did_set_foldlevel',\n+      defaults = { if_true = 0 },\n+      desc = [=[\n+        Sets the fold level: Folds with a higher level will be closed.\n+        Setting this option to zero will close all folds.  Higher numbers will\n+        close fewer folds.\n+        This option is set by commands like |zm|, |zM| and |zR|.\n+        See |fold-foldlevel|.\n+      ]=],\n+      full_name = 'foldlevel',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('close folds with a level higher than this'),\n+      type = 'number',\n+    },\n+    {\n+      abbreviation = 'fdls',\n+      defaults = { if_true = -1 },\n+      desc = [=[\n+        Sets 'foldlevel' when starting to edit another buffer in a window.\n+        Useful to always start editing with all folds closed (value zero),\n+        some folds closed (one) or no folds closed (99).\n+        This is done before reading any modeline, thus a setting in a modeline\n+        overrules this option.  Starting to edit a file for |diff-mode| also\n+        ignores this option and closes all folds.\n+        It is also done before BufReadPre autocommands, to allow an autocmd to\n+        overrule the 'foldlevel' value for specific files.\n+        When the value is negative, it is not used.\n+      ]=],\n+      full_name = 'foldlevelstart',\n+      redraw = { 'curswant' },\n+      scope = { 'global' },\n+      short_desc = N_(\"'foldlevel' when starting to edit a file\"),\n+      type = 'number',\n+      varname = 'p_fdls',\n+    },\n+    {\n+      abbreviation = 'fmr',\n+      alloced = true,\n+      cb = 'did_set_foldmarker',\n+      defaults = { if_true = '{{{,}}}' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        The start and end marker used when 'foldmethod' is \"marker\".  There\n+        must be one comma, which separates the start and end marker.  The\n+        marker is a literal string (a regular expression would be too slow).\n+        See |fold-marker|.\n+      ]=],\n+      full_name = 'foldmarker',\n+      list = 'onecomma',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('markers used when \\'foldmethod\\' is \"marker\"'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'fdm',\n+      alloced = true,\n+      cb = 'did_set_foldmethod',\n+      defaults = { if_true = 'manual' },\n+      desc = [=[\n+        The kind of folding used for the current window.  Possible values:\n+        |fold-manual|\tmanual\t    Folds are created manually.\n+        |fold-indent|\tindent\t    Lines with equal indent form a fold.\n+        |fold-expr|\texpr\t    'foldexpr' gives the fold level of a line.\n+        |fold-marker|\tmarker\t    Markers are used to specify folds.\n+        |fold-syntax|\tsyntax\t    Syntax highlighting items specify folds.\n+        |fold-diff|\tdiff\t    Fold text that is not changed.\n+      ]=],\n+      full_name = 'foldmethod',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('folding type'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'fml',\n+      cb = 'did_set_foldminlines',\n+      defaults = { if_true = 1 },\n+      desc = [=[\n+        Sets the number of screen lines above which a fold can be displayed\n+        closed.  Also for manually closed folds.  With the default value of\n+        one a fold can only be closed if it takes up two or more screen lines.\n+        Set to zero to be able to close folds of just one screen line.\n+        Note that this only has an effect on what is displayed.  After using\n+        \"zc\" to close a fold, which is displayed open because it's smaller\n+        than 'foldminlines', a following \"zc\" may close a containing fold.\n+      ]=],\n+      full_name = 'foldminlines',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('minimum number of lines for a fold to be closed'),\n+      type = 'number',\n+    },\n+    {\n+      abbreviation = 'fdn',\n+      cb = 'did_set_foldnestmax',\n+      defaults = { if_true = 20 },\n+      desc = [=[\n+        Sets the maximum nesting of folds for the \"indent\" and \"syntax\"\n+        methods.  This avoids that too many folds will be created.  Using more\n+        than 20 doesn't work, because the internal limit is 20.\n+      ]=],\n+      full_name = 'foldnestmax',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('maximum fold depth'),\n+      type = 'number',\n+    },\n+    {\n+      abbreviation = 'fdo',\n+      cb = 'did_set_foldopen',\n+      defaults = { if_true = 'block,hor,mark,percent,quickfix,search,tag,undo' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Specifies for which type of commands folds will be opened, if the\n+        command moves the cursor into a closed fold.  It is a comma-separated\n+        list of items.\n+        NOTE: When the command is part of a mapping this option is not used.\n+        Add the |zv| command to the mapping to get the same effect.\n+        (rationale: the mapping may want to control opening folds itself)\n+\n+        \titem\t\tcommands ~\n+        \tall\t\tany\n+        \tblock\t\t(, {, [[, [{, etc.\n+        \thor\t\thorizontal movements: \"l\", \"w\", \"fx\", etc.\n+        \tinsert\t\tany command in Insert mode\n+        \tjump\t\tfar jumps: \"G\", \"gg\", etc.\n+        \tmark\t\tjumping to a mark: \"'m\", CTRL-O, etc.\n+        \tpercent\t\t\"%\"\n+        \tquickfix\t\":cn\", \":crew\", \":make\", etc.\n+        \tsearch\t\tsearch for a pattern: \"/\", \"n\", \"*\", \"gd\", etc.\n+        \t\t\t(not for a search pattern in a \":\" command)\n+        \t\t\tAlso for |[s| and |]s|.\n+        \ttag\t\tjumping to a tag: \":ta\", CTRL-T, etc.\n+        \tundo\t\tundo or redo: \"u\" and CTRL-R\n+        When a movement command is used for an operator (e.g., \"dl\" or \"y%\")\n+        this option is not used.  This means the operator will include the\n+        whole closed fold.\n+        Note that vertical movements are not here, because it would make it\n+        very difficult to move onto a closed fold.\n+        In insert mode the folds containing the cursor will always be open\n+        when text is inserted.\n+        To close folds you can re-apply 'foldlevel' with the |zx| command or\n+        set the 'foldclose' option to \"all\".\n+      ]=],\n+      full_name = 'foldopen',\n+      list = 'onecomma',\n+      redraw = { 'curswant' },\n+      scope = { 'global' },\n+      short_desc = N_('for which commands a fold will be opened'),\n+      type = 'string',\n+      varname = 'p_fdo',\n+    },\n+    {\n+      abbreviation = 'fdt',\n+      alloced = true,\n+      cb = 'did_set_optexpr',\n+      defaults = { if_true = 'foldtext()' },\n+      desc = [=[\n+        An expression which is used to specify the text displayed for a closed\n+        fold.  The context is set to the script where 'foldexpr' was set,\n+        script-local items can be accessed.  See |fold-foldtext| for the\n+        usage.\n+\n+        The expression will be evaluated in the |sandbox| if set from a\n+        modeline, see |sandbox-option|.\n+        This option cannot be set in a modeline when 'modelineexpr' is off.\n+\n+        It is not allowed to change text or jump to another window while\n+        evaluating 'foldtext' |textlock|.\n+      ]=],\n+      full_name = 'foldtext',\n+      modelineexpr = true,\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('expression used to display for a closed fold'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'fex',\n+      alloced = true,\n+      cb = 'did_set_optexpr',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        Expression which is evaluated to format a range of lines for the |gq|\n+        operator or automatic formatting (see 'formatoptions').  When this\n+        option is empty 'formatprg' is used.\n+\n+        The |v:lnum|  variable holds the first line to be formatted.\n+        The |v:count| variable holds the number of lines to be formatted.\n+        The |v:char|  variable holds the character that is going to be\n+        \t      inserted if the expression is being evaluated due to\n+        \t      automatic formatting.  This can be empty.  Don't insert\n+        \t      it yet!\n+\n+        Example: >\n+        \t:set formatexpr=mylang#Format()\n+        <\tThis will invoke the mylang#Format() function in the\n+        autoload/mylang.vim file in 'runtimepath'. |autoload|\n+\n+        The expression is also evaluated when 'textwidth' is set and adding\n+        text beyond that limit.  This happens under the same conditions as\n+        when internal formatting is used.  Make sure the cursor is kept in the\n+        same spot relative to the text then!  The |mode()| function will\n+        return \"i\" or \"R\" in this situation.\n+\n+        When the expression evaluates to non-zero Vim will fall back to using\n+        the internal format mechanism.\n+\n+        If the expression starts with s: or |<SID>|, then it is replaced with\n+        the script ID (|local-function|). Example: >\n+        \tset formatexpr=s:MyFormatExpr()\n+        \tset formatexpr=<SID>SomeFormatExpr()\n+        <\tOtherwise, the expression is evaluated in the context of the script\n+        where the option was set, thus script-local items are available.\n+\n+        The expression will be evaluated in the |sandbox| when set from a\n+        modeline, see |sandbox-option|.  That stops the option from working,\n+        since changing the buffer text is not allowed.\n+        This option cannot be set in a modeline when 'modelineexpr' is off.\n+        NOTE: This option is set to \"\" when 'compatible' is set.\n+      ]=],\n+      full_name = 'formatexpr',\n+      modelineexpr = true,\n+      scope = { 'buffer' },\n+      short_desc = N_('expression used with \"gq\" command'),\n+      type = 'string',\n+      varname = 'p_fex',\n+    },\n+    {\n+      abbreviation = 'fo',\n+      alloced = true,\n+      cb = 'did_set_formatoptions',\n+      defaults = { if_true = macros('DFLT_FO_VIM') },\n+      desc = [=[\n+        This is a sequence of letters which describes how automatic\n+        formatting is to be done.  See |fo-table|.  Commas can be inserted for\n+        readability.\n+        To avoid problems with flags that are added in the future, use the\n+        \"+=\" and \"-=\" feature of \":set\" |add-option-flags|.\n+      ]=],\n+      full_name = 'formatoptions',\n+      list = 'flags',\n+      scope = { 'buffer' },\n+      short_desc = N_('how automatic formatting is to be done'),\n+      type = 'string',\n+      varname = 'p_fo',\n+    },\n+    {\n+      abbreviation = 'flp',\n+      alloced = true,\n+      defaults = { if_true = '^\\\\s*\\\\d\\\\+[\\\\]:.)}\\\\t ]\\\\s*' },\n+      desc = [=[\n+        A pattern that is used to recognize a list header.  This is used for\n+        the \"n\" flag in 'formatoptions'.\n+        The pattern must match exactly the text that will be the indent for\n+        the line below it.  You can use |/\\ze| to mark the end of the match\n+        while still checking more characters.  There must be a character\n+        following the pattern, when it matches the whole line it is handled\n+        like there is no match.\n+        The default recognizes a number, followed by an optional punctuation\n+        character and white space.\n+      ]=],\n+      full_name = 'formatlistpat',\n+      scope = { 'buffer' },\n+      short_desc = N_('pattern used to recognize a list header'),\n+      type = 'string',\n+      varname = 'p_flp',\n+    },\n+    {\n+      abbreviation = 'fp',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        The name of an external program that will be used to format the lines\n+        selected with the |gq| operator.  The program must take the input on\n+        stdin and produce the output on stdout.  The Unix program \"fmt\" is\n+        such a program.\n+        If the 'formatexpr' option is not empty it will be used instead.\n+        Otherwise, if 'formatprg' option is an empty string, the internal\n+        format function will be used |C-indenting|.\n+        Environment variables are expanded |:set_env|.  See |option-backslash|\n+        about including spaces and backslashes.\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      expand = true,\n+      full_name = 'formatprg',\n+      scope = { 'global', 'buffer' },\n+      secure = true,\n+      short_desc = N_('name of external program used with \"gq\" command'),\n+      type = 'string',\n+      varname = 'p_fp',\n+    },\n+    {\n+      abbreviation = 'fs',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        When on, the OS function fsync() will be called after saving a file\n+        (|:write|, |writefile()|, …), |swap-file|, |undo-persistence| and |shada-file|.\n+        This flushes the file to disk, ensuring that it is safely written.\n+        Slow on some systems: writing buffers, quitting Nvim, and other\n+        operations may sometimes take a few seconds.\n+\n+        Files are ALWAYS flushed ('fsync' is ignored) when:\n+        - |CursorHold| event is triggered\n+        - |:preserve| is called\n+        - system signals low battery life\n+        - Nvim exits abnormally\n+\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      full_name = 'fsync',\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_('whether to invoke fsync() after file write'),\n+      type = 'bool',\n+      varname = 'p_fs',\n+    },\n+    {\n+      abbreviation = 'gd',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        When on, the \":substitute\" flag 'g' is default on.  This means that\n+        all matches in a line are substituted instead of one.  When a 'g' flag\n+        is given to a \":substitute\" command, this will toggle the substitution\n+        of all or one match.  See |complex-change|.\n+\n+        \tcommand\t\t'gdefault' on\t'gdefault' off\t~\n+        \t:s///\t\t  subst. all\t  subst. one\n+        \t:s///g\t\t  subst. one\t  subst. all\n+        \t:s///gg\t\t  subst. all\t  subst. one\n+\n+        DEPRECATED: Setting this option may break plugins that are not aware\n+        of this option.  Also, many users get confused that adding the /g flag\n+        has the opposite effect of that it normally does.\n+      ]=],\n+      full_name = 'gdefault',\n+      scope = { 'global' },\n+      short_desc = N_('the \":substitute\" flag \\'g\\' is default on'),\n+      type = 'bool',\n+      varname = 'p_gd',\n+    },\n+    {\n+      abbreviation = 'gfm',\n+      defaults = { if_true = macros('DFLT_GREPFORMAT') },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Format to recognize for the \":grep\" command output.\n+        This is a scanf-like string that uses the same format as the\n+        'errorformat' option: see |errorformat|.\n+      ]=],\n+      full_name = 'grepformat',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_(\"format of 'grepprg' output\"),\n+      type = 'string',\n+      varname = 'p_gefm',\n+    },\n+    {\n+      abbreviation = 'gp',\n+      defaults = {\n+        condition = 'MSWIN',\n+        if_false = 'grep -n $* /dev/null',\n+        if_true = 'findstr /n $* nul',\n+        doc = [[\"grep -n \",\n+           Unix: \"grep -n $* /dev/null\"]],\n+      },\n+      desc = [=[\n+        Program to use for the |:grep| command.  This option may contain '%'\n+        and '#' characters, which are expanded like when used in a command-\n+        line.  The placeholder \"$*\" is allowed to specify where the arguments\n+        will be included.  Environment variables are expanded |:set_env|.  See\n+        |option-backslash| about including spaces and backslashes.\n+        When your \"grep\" accepts the \"-H\" argument, use this to make \":grep\"\n+        also work well with a single file: >\n+        \t:set grepprg=grep\\ -nH\n+        <\tSpecial value: When 'grepprg' is set to \"internal\" the |:grep| command\n+        works like |:vimgrep|, |:lgrep| like |:lvimgrep|, |:grepadd| like\n+        |:vimgrepadd| and |:lgrepadd| like |:lvimgrepadd|.\n+        See also the section |:make_makeprg|, since most of the comments there\n+        apply equally to 'grepprg'.\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      expand = true,\n+      full_name = 'grepprg',\n+      scope = { 'global', 'buffer' },\n+      secure = true,\n+      short_desc = N_('program to use for \":grep\"'),\n+      type = 'string',\n+      varname = 'p_gp',\n+    },\n+    {\n+      abbreviation = 'gcr',\n+      cb = 'did_set_guicursor',\n+      defaults = { if_true = 'n-v-c-sm:block,i-ci-ve:ver25,r-cr-o:hor20' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Configures the cursor style for each mode. Works in the GUI and many\n+        terminals.  See |tui-cursor-shape|.\n+\n+        To disable cursor-styling, reset the option: >\n+        \t:set guicursor=\n+\n+        <\tTo enable mode shapes, \"Cursor\" highlight, and blinking: >\n+        \t:set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50\n+        \t  \\,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor\n+        \t  \\,sm:block-blinkwait175-blinkoff150-blinkon175\n+\n+        <\tThe option is a comma-separated list of parts.  Each part consists of a\n+        mode-list and an argument-list:\n+        \tmode-list:argument-list,mode-list:argument-list,..\n+        The mode-list is a dash separated list of these modes:\n+        \tn\tNormal mode\n+        \tv\tVisual mode\n+        \tve\tVisual mode with 'selection' \"exclusive\" (same as 'v',\n+        \t\tif not specified)\n+        \to\tOperator-pending mode\n+        \ti\tInsert mode\n+        \tr\tReplace mode\n+        \tc\tCommand-line Normal (append) mode\n+        \tci\tCommand-line Insert mode\n+        \tcr\tCommand-line Replace mode\n+        \tsm\tshowmatch in Insert mode\n+        \ta\tall modes\n+        The argument-list is a dash separated list of these arguments:\n+        \thor{N}\thorizontal bar, {N} percent of the character height\n+        \tver{N}\tvertical bar, {N} percent of the character width\n+        \tblock\tblock cursor, fills the whole character\n+        \t\t- Only one of the above three should be present.\n+        \t\t- Default is \"block\" for each mode.\n+        \tblinkwait{N}\t\t\t\t*cursor-blinking*\n+        \tblinkon{N}\n+        \tblinkoff{N}\n+        \t\tblink times for cursor: blinkwait is the delay before\n+        \t\tthe cursor starts blinking, blinkon is the time that\n+        \t\tthe cursor is shown and blinkoff is the time that the\n+        \t\tcursor is not shown.  Times are in msec.  When one of\n+        \t\tthe numbers is zero, there is no blinking. E.g.: >\n+        \t\t\t:set guicursor=n:blinkon0\n+        <\t\t\t- Default is \"blinkon0\" for each mode.\n+        \t{group-name}\n+        \t\tHighlight group that decides the color and font of the\n+        \t\tcursor.\n+        \t\tIn the |TUI|:\n+        \t\t- |inverse|/reverse and no group-name are interpreted\n+        \t\t  as \"host-terminal default cursor colors\" which\n+        \t\t  typically means \"inverted bg and fg colors\".\n+        \t\t- |ctermfg| and |guifg| are ignored.\n+        \t{group-name}/{group-name}\n+        \t\tTwo highlight group names, the first is used when\n+        \t\tno language mappings are used, the other when they\n+        \t\tare. |language-mapping|\n+\n+        Examples of parts:\n+           n-c-v:block-nCursor\tIn Normal, Command-line and Visual mode, use a\n+        \t\t\tblock cursor with colors from the \"nCursor\"\n+        \t\t\thighlight group\n+           n-v-c-sm:block,i-ci-ve:ver25-Cursor,r-cr-o:hor20\n+        \t\t\tIn Normal et al. modes, use a block cursor\n+        \t\t\twith the default colors defined by the host\n+        \t\t\tterminal.  In Insert-likes modes, use\n+        \t\t\ta vertical bar cursor with colors from\n+        \t\t\t\"Cursor\" highlight group.  In Replace-likes\n+        \t\t\tmodes, use a underline cursor with\n+        \t\t\tdefault colors.\n+           i-ci:ver30-iCursor-blinkwait300-blinkon200-blinkoff150\n+        \t\t\tIn Insert and Command-line Insert mode, use a\n+        \t\t\t30% vertical bar cursor with colors from the\n+        \t\t\t\"iCursor\" highlight group.  Blink a bit\n+        \t\t\tfaster.\n+\n+        The 'a' mode is different.  It will set the given argument-list for\n+        all modes.  It does not reset anything to defaults.  This can be used\n+        to do a common setting for all modes.  For example, to switch off\n+        blinking: \"a:blinkon0\"\n+\n+        Examples of cursor highlighting: >\n+            :highlight Cursor gui=reverse guifg=NONE guibg=NONE\n+            :highlight Cursor gui=NONE guifg=bg guibg=fg\n+        <\n+      ]=],\n+      full_name = 'guicursor',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('GUI: settings for cursor shape and blinking'),\n+      tags = { 'E545', 'E546', 'E548', 'E549' },\n+      type = 'string',\n+      varname = 'p_guicursor',\n+    },\n+    {\n+      abbreviation = 'gfn',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        This is a list of fonts which will be used for the GUI version of Vim.\n+        In its simplest form the value is just one font name.  When\n+        the font cannot be found you will get an error message.  To try other\n+        font names a list can be specified, font names separated with commas.\n+        The first valid font is used.\n+\n+        Spaces after a comma are ignored.  To include a comma in a font name\n+        precede it with a backslash.  Setting an option requires an extra\n+        backslash before a space and a backslash.  See also\n+        |option-backslash|.  For example: >\n+            :set guifont=Screen15,\\ 7x13,font\\\\,with\\\\,commas\n+        <\twill make Vim try to use the font \"Screen15\" first, and if it fails it\n+        will try to use \"7x13\" and then \"font,with,commas\" instead.\n+\n+        If none of the fonts can be loaded, Vim will keep the current setting.\n+        If an empty font list is given, Vim will try using other resource\n+        settings (for X, it will use the Vim.font resource), and finally it\n+        will try some builtin default which should always be there (\"7x13\" in\n+        the case of X).  The font names given should be \"normal\" fonts.  Vim\n+        will try to find the related bold and italic fonts.\n+\n+        For Win32 and Mac OS: >\n+            :set guifont=*\n+        <\twill bring up a font requester, where you can pick the font you want.\n+\n+        The font name depends on the GUI used.\n+\n+        For Mac OSX you can use something like this: >\n+            :set guifont=Monaco:h10\n+        <\t\t\t\t\t\t\t\t*E236*\n+        Note that the fonts must be mono-spaced (all characters have the same\n+        width).\n+\n+        To preview a font on X11, you might be able to use the \"xfontsel\"\n+        program.  The \"xlsfonts\" program gives a list of all available fonts.\n+\n+        For the Win32 GUI\t\t\t\t\t*E244* *E245*\n+        - takes these options in the font name:\n+        \thXX - height is XX (points, can be floating-point)\n+        \twXX - width is XX (points, can be floating-point)\n+        \tb   - bold\n+        \ti   - italic\n+        \tu   - underline\n+        \ts   - strikeout\n+        \tcXX - character set XX.  Valid charsets are: ANSI, ARABIC,\n+        \t      BALTIC, CHINESEBIG5, DEFAULT, EASTEUROPE, GB2312, GREEK,\n+        \t      HANGEUL, HEBREW, JOHAB, MAC, OEM, RUSSIAN, SHIFTJIS,\n+        \t      SYMBOL, THAI, TURKISH, VIETNAMESE ANSI and BALTIC.\n+        \t      Normally you would use \"cDEFAULT\".\n+\n+          Use a ':' to separate the options.\n+        - A '_' can be used in the place of a space, so you don't need to use\n+          backslashes to escape the spaces.\n+        - Examples: >\n+            :set guifont=courier_new:h12:w5:b:cRUSSIAN\n+            :set guifont=Andale_Mono:h7.5:w4.5\n+        <\n+      ]=],\n+      deny_duplicates = true,\n+      full_name = 'guifont',\n+      list = 'onecomma',\n+      redraw = { 'ui_option' },\n+      scope = { 'global' },\n+      short_desc = N_('GUI: Name(s) of font(s) to be used'),\n+      tags = { 'E235', 'E596' },\n+      type = 'string',\n+      varname = 'p_guifont',\n+    },\n+    {\n+      abbreviation = 'gfw',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Comma-separated list of fonts to be used for double-width characters.\n+        The first font that can be loaded is used.\n+        Note: The size of these fonts must be exactly twice as wide as the one\n+        specified with 'guifont' and the same height.\n+\n+        When 'guifont' has a valid font and 'guifontwide' is empty Vim will\n+        attempt to set 'guifontwide' to a matching double-width font.\n+      ]=],\n+      full_name = 'guifontwide',\n+      list = 'onecomma',\n+      redraw = { 'ui_option' },\n+      scope = { 'global' },\n+      short_desc = N_('list of font names for double-wide characters'),\n+      tags = { 'E231', 'E533', 'E534' },\n+      type = 'string',\n+      varname = 'p_guifontwide',\n+    },\n+    {\n+      abbreviation = 'go',\n+      defaults = {\n+        if_true = '',\n+        doc = '\"egmrLT\"   (MS-Windows)',\n+      },\n+      desc = [=[\n+        This option only has an effect in the GUI version of Vim.  It is a\n+        sequence of letters which describes what components and options of the\n+        GUI should be used.\n+        To avoid problems with flags that are added in the future, use the\n+        \"+=\" and \"-=\" feature of \":set\" |add-option-flags|.\n+\n+        Valid letters are as follows:\n+        \t\t\t\t\t\t*guioptions_a* *'go-a'*\n+          'a'\tAutoselect:  If present, then whenever VISUAL mode is started,\n+        \tor the Visual area extended, Vim tries to become the owner of\n+        \tthe windowing system's global selection.  This means that the\n+        \tVisually highlighted text is available for pasting into other\n+        \tapplications as well as into Vim itself.  When the Visual mode\n+        \tends, possibly due to an operation on the text, or when an\n+        \tapplication wants to paste the selection, the highlighted text\n+        \tis automatically yanked into the \"* selection register.\n+        \tThus the selection is still available for pasting into other\n+        \tapplications after the VISUAL mode has ended.\n+        \t    If not present, then Vim won't become the owner of the\n+        \twindowing system's global selection unless explicitly told to\n+        \tby a yank or delete operation for the \"* register.\n+        \tThe same applies to the modeless selection.\n+        \t\t\t\t\t\t\t*'go-P'*\n+          'P'\tLike autoselect but using the \"+ register instead of the \"*\n+        \tregister.\n+        \t\t\t\t\t\t\t*'go-A'*\n+          'A'\tAutoselect for the modeless selection.  Like 'a', but only\n+        \tapplies to the modeless selection.\n+\n+        \t    'guioptions'   autoselect Visual  autoselect modeless ~\n+        \t\t \"\"\t\t -\t\t\t -\n+        \t\t \"a\"\t\tyes\t\t\tyes\n+        \t\t \"A\"\t\t -\t\t\tyes\n+        \t\t \"aA\"\t\tyes\t\t\tyes\n+\n+        \t\t\t\t\t\t\t*'go-c'*\n+          'c'\tUse console dialogs instead of popup dialogs for simple\n+        \tchoices.\n+        \t\t\t\t\t\t\t*'go-d'*\n+          'd'\tUse dark theme variant if available.\n+        \t\t\t\t\t\t\t*'go-e'*\n+          'e'\tAdd tab pages when indicated with 'showtabline'.\n+        \t'guitablabel' can be used to change the text in the labels.\n+        \tWhen 'e' is missing a non-GUI tab pages line may be used.\n+        \tThe GUI tabs are only supported on some systems, currently\n+        \tMac OS/X and MS-Windows.\n+        \t\t\t\t\t\t\t*'go-i'*\n+          'i'\tUse a Vim icon.\n+        \t\t\t\t\t\t\t*'go-m'*\n+          'm'\tMenu bar is present.\n+        \t\t\t\t\t\t\t*'go-M'*\n+          'M'\tThe system menu \"$VIMRUNTIME/menu.vim\" is not sourced.  Note\n+        \tthat this flag must be added in the vimrc file, before\n+        \tswitching on syntax or filetype recognition (when the |gvimrc|\n+        \tfile is sourced the system menu has already been loaded; the\n+        \t`:syntax on` and `:filetype on` commands load the menu too).\n+        \t\t\t\t\t\t\t*'go-g'*\n+          'g'\tGrey menu items: Make menu items that are not active grey.  If\n+        \t'g' is not included inactive menu items are not shown at all.\n+        \t\t\t\t\t\t\t*'go-T'*\n+          'T'\tInclude Toolbar.  Currently only in Win32 GUI.\n+        \t\t\t\t\t\t\t*'go-r'*\n+          'r'\tRight-hand scrollbar is always present.\n+        \t\t\t\t\t\t\t*'go-R'*\n+          'R'\tRight-hand scrollbar is present when there is a vertically\n+        \tsplit window.\n+        \t\t\t\t\t\t\t*'go-l'*\n+          'l'\tLeft-hand scrollbar is always present.\n+        \t\t\t\t\t\t\t*'go-L'*\n+          'L'\tLeft-hand scrollbar is present when there is a vertically\n+        \tsplit window.\n+        \t\t\t\t\t\t\t*'go-b'*\n+          'b'\tBottom (horizontal) scrollbar is present.  Its size depends on\n+        \tthe longest visible line, or on the cursor line if the 'h'\n+        \tflag is included. |gui-horiz-scroll|\n+        \t\t\t\t\t\t\t*'go-h'*\n+          'h'\tLimit horizontal scrollbar size to the length of the cursor\n+        \tline.  Reduces computations. |gui-horiz-scroll|\n+\n+        And yes, you may even have scrollbars on the left AND the right if\n+        you really want to :-).  See |gui-scrollbars| for more information.\n+\n+        \t\t\t\t\t\t\t*'go-v'*\n+          'v'\tUse a vertical button layout for dialogs.  When not included,\n+        \ta horizontal layout is preferred, but when it doesn't fit a\n+        \tvertical layout is used anyway.  Not supported in GTK 3.\n+        \t\t\t\t\t\t\t*'go-p'*\n+          'p'\tUse Pointer callbacks for X11 GUI.  This is required for some\n+        \twindow managers.  If the cursor is not blinking or hollow at\n+        \tthe right moment, try adding this flag.  This must be done\n+        \tbefore starting the GUI.  Set it in your |gvimrc|.  Adding or\n+        \tremoving it after the GUI has started has no effect.\n+        \t\t\t\t\t\t\t*'go-k'*\n+          'k'\tKeep the GUI window size when adding/removing a scrollbar, or\n+        \ttoolbar, tabline, etc.  Instead, the behavior is similar to\n+        \twhen the window is maximized and will adjust 'lines' and\n+        \t'columns' to fit to the window.  Without the 'k' flag Vim will\n+        \ttry to keep 'lines' and 'columns' the same when adding and\n+        \tremoving GUI components.\n+      ]=],\n+      enable_if = false,\n+      full_name = 'guioptions',\n+      list = 'flags',\n+      scope = { 'global' },\n+      short_desc = N_('GUI: Which components and options are used'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'gtl',\n+      desc = [=[\n+        When non-empty describes the text to use in a label of the GUI tab\n+        pages line.  When empty and when the result is empty Vim will use a\n+        default label.  See |setting-guitablabel| for more info.\n+\n+        The format of this option is like that of 'statusline'.\n+        'guitabtooltip' is used for the tooltip, see below.\n+        The expression will be evaluated in the |sandbox| when set from a\n+        modeline, see |sandbox-option|.\n+        This option cannot be set in a modeline when 'modelineexpr' is off.\n+\n+        Only used when the GUI tab pages line is displayed.  'e' must be\n+        present in 'guioptions'.  For the non-GUI tab pages line 'tabline' is\n+        used.\n+      ]=],\n+      enable_if = false,\n+      full_name = 'guitablabel',\n+      modelineexpr = true,\n+      redraw = { 'current_window' },\n+      scope = { 'global' },\n+      short_desc = N_('GUI: custom label for a tab page'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'gtt',\n+      desc = [=[\n+        When non-empty describes the text to use in a tooltip for the GUI tab\n+        pages line.  When empty Vim will use a default tooltip.\n+        This option is otherwise just like 'guitablabel' above.\n+        You can include a line break.  Simplest method is to use |:let|: >\n+        \t:let &guitabtooltip = \"line one\\nline two\"\n+        <\n+      ]=],\n+      enable_if = false,\n+      full_name = 'guitabtooltip',\n+      redraw = { 'current_window' },\n+      scope = { 'global' },\n+      short_desc = N_('GUI: custom tooltip for a tab page'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'hf',\n+      cb = 'did_set_helpfile',\n+      defaults = {\n+        if_true = macros('DFLT_HELPFILE'),\n+        doc = [[(MS-Windows) \"$VIMRUNTIME\\doc\\help.txt\"\n+                  (others) \"$VIMRUNTIME/doc/help.txt\")\n+      ]],\n+      },\n+      desc = [=[\n+        Name of the main help file.  All distributed help files should be\n+        placed together in one directory.  Additionally, all \"doc\" directories\n+        in 'runtimepath' will be used.\n+        Environment variables are expanded |:set_env|.  For example:\n+        \"$VIMRUNTIME/doc/help.txt\".  If $VIMRUNTIME is not set, $VIM is also\n+        tried.  Also see |$VIMRUNTIME| and |option-backslash| about including\n+        spaces and backslashes.\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      expand = true,\n+      full_name = 'helpfile',\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_('full path name of the main help file'),\n+      type = 'string',\n+      varname = 'p_hf',\n+    },\n+    {\n+      abbreviation = 'hh',\n+      cb = 'did_set_helpheight',\n+      defaults = { if_true = 20 },\n+      desc = [=[\n+        Minimal initial height of the help window when it is opened with the\n+        \":help\" command.  The initial height of the help window is half of the\n+        current window, or (when the 'ea' option is on) the same as other\n+        windows.  When the height is less than 'helpheight', the height is\n+        set to 'helpheight'.  Set to zero to disable.\n+      ]=],\n+      full_name = 'helpheight',\n+      scope = { 'global' },\n+      short_desc = N_('minimum height of a new help window'),\n+      type = 'number',\n+      varname = 'p_hh',\n+    },\n+    {\n+      abbreviation = 'hlg',\n+      cb = 'did_set_helplang',\n+      defaults = {\n+        if_true = '',\n+        doc = 'messages language or empty',\n+      },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Comma-separated list of languages.  Vim will use the first language\n+        for which the desired help can be found.  The English help will always\n+        be used as a last resort.  You can add \"en\" to prefer English over\n+        another language, but that will only find tags that exist in that\n+        language and not in the English help.\n+        Example: >\n+        \t:set helplang=de,it\n+        <\tThis will first search German, then Italian and finally English help\n+        files.\n+        When using |CTRL-]| and \":help!\" in a non-English help file Vim will\n+        try to find the tag in the current language before using this option.\n+        See |help-translated|.\n+      ]=],\n+      full_name = 'helplang',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('preferred help languages'),\n+      type = 'string',\n+      varname = 'p_hlg',\n+    },\n+    {\n+      abbreviation = 'hid',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        When off a buffer is unloaded (including loss of undo information)\n+        when it is |abandon|ed.  When on a buffer becomes hidden when it is\n+        |abandon|ed.  A buffer displayed in another window does not become\n+        hidden, of course.\n+\n+        Commands that move through the buffer list sometimes hide a buffer\n+        although the 'hidden' option is off when these three are true:\n+        - the buffer is modified\n+        - 'autowrite' is off or writing is not possible\n+        - the '!' flag was used\n+        Also see |windows|.\n+\n+        To hide a specific buffer use the 'bufhidden' option.\n+        'hidden' is set for one command with \":hide {command}\" |:hide|.\n+      ]=],\n+      full_name = 'hidden',\n+      scope = { 'global' },\n+      short_desc = N_(\"don't unload buffer when it is |abandon|ed\"),\n+      type = 'bool',\n+      varname = 'p_hid',\n+    },\n+    {\n+      abbreviation = 'hl',\n+      cb = 'did_set_highlight',\n+      defaults = { if_true = macros('HIGHLIGHT_INIT') },\n+      deny_duplicates = true,\n+      full_name = 'highlight',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('sets highlighting mode for various occasions'),\n+      type = 'string',\n+      varname = 'p_hl',\n+    },\n+    {\n+      abbreviation = 'hi',\n+      defaults = { if_true = 10000 },\n+      desc = [=[\n+        A history of \":\" commands, and a history of previous search patterns\n+        is remembered.  This option decides how many entries may be stored in\n+        each of these histories (see |cmdline-editing|).\n+        The maximum value is 10000.\n+      ]=],\n+      full_name = 'history',\n+      scope = { 'global' },\n+      short_desc = N_('number of command-lines that are remembered'),\n+      type = 'number',\n+      varname = 'p_hi',\n+    },\n+    {\n+      abbreviation = 'hk',\n+      defaults = { if_true = false },\n+      full_name = 'hkmap',\n+      scope = { 'global' },\n+      short_desc = N_('No descripti",
            "html_url": "https://github.com/neovim/neovim/pull/24528#discussion_r1284345865",
            "id": 1284345865,
            "in_reply_to_id": 1284344262,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MjZAJ",
            "original_commit_id": "8735c361b3f2657c5ac340f75c31cdaf12cd6e59",
            "original_line": 7660,
            "original_position": 10719,
            "original_start_line": null,
            "path": "src/nvim/options.lua",
            "position": null,
            "pull_request_review_id": 1562750793,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24528",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284345865/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-04T12:10:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284345865",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24528#discussion_r1284409308"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24528"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284409308"
                }
            },
            "author_association": "MEMBER",
            "body": "What was the suggestion?",
            "commit_id": "fe5eadf4a3c0dd57c5a9936c4982187e3f9d082c",
            "created_at": "2023-08-04T13:14:18Z",
            "diff_hunk": "@@ -1,3079 +1,10001 @@\n--- {\n---  {\n---    full_name='aleph', abbreviation='al',\n---    short_desc=\"ASCII code of the letter Aleph (Hebrew)\",\n---    varname='p_aleph', pv_name=nil,\n---    type='number', list=nil, scope={'global'},\n---    deny_duplicates=nil,\n---    enable_if=nil,\n---    defaults={condition=nil, if_true=224, if_false=nil},\n---    secure=nil, gettext=nil, noglob=nil, normal_fname_chars=nil,\n---    pri_mkrc=nil, deny_in_modelines=nil, normal_dname_chars=nil,\n---    modelineexpr=nil,\n---    func=nil,\n---    expand=nil, nodefault=nil, no_mkrc=nil,\n---    alloced=nil,\n---    save_pv_indir=nil,\n---    redraw={'curswant'},\n---  }\n--- }\n--- types: bool, number, string\n--- lists: (nil), comma, onecomma, flags, flagscomma\n--- scopes: global, buffer, window\n--- redraw options: statuslines, tabline, current_window, current_window_only,\n---                 current_buffer, all_windows, curswant\n--- defaults: {condition=#if condition, if_true=default, if_false=default}\n--- #if condition:\n---    string: #ifdef string\n---    !string: #ifndef string\n---    {string, string}: #if defined(string) && defined(string)\n---    {!string, !string}: #if !defined(string) && !defined(string)\n-local cstr = function(s)\n+--- @class vim.option_meta\n+--- @field full_name string\n+--- @field desc? string\n+--- @field abbreviation? string\n+--- @field short_desc? string|fun(): string\n+--- @field varname? string\n+--- @field pv_name? string\n+--- @field type 'bool'|'number'|'string'\n+--- @field list? 'comma'|'onecomma'|'flags'|'flagscomma'\n+--- @field scope vim.option_scope[]\n+--- @field deny_duplicates? boolean\n+--- @field enable_if? string|false\n+--- @field defaults? vim.option_defaults\n+--- @field secure? true\n+--- @field noglob? true\n+--- @field normal_fname_chars? true\n+--- @field pri_mkrc? true\n+--- @field deny_in_modelines? true\n+--- @field normal_dname_chars? true\n+--- @field modelineexpr? true\n+--- @field func? true\n+--- @field expand? string|true\n+--- @field nodefault? true\n+--- @field no_mkrc? true\n+--- @field alloced? true\n+--- @field redraw? vim.option_redraw[]\n+--- @field cb? string\n+--- @field tags? string[]\n+\n+--- @class vim.option_defaults\n+--- @field condition? string\n+---    string: #ifdef string\n+---    !string: #ifndef string\n+--- @field if_true integer|boolean|string|fun(): string\n+--- @field if_false? integer|boolean|string\n+--- @field doc? string Default to show in options.txt\n+--- @field meta? integer|boolean|string Default to use in Lua meta files\n+\n+--- @alias vim.option_scope 'global'|'buffer'|'window'\n+\n+--- @alias vim.option_redraw\n+--- |'statuslines'\n+--- |'tabline'\n+--- |'current_window'\n+--- |'current_window_only'\n+--- |'current_buffer'\n+--- |'all_windows'\n+--- |'curswant'\n+--- |'ui_option'\n+\n+--- @param s string\n+--- @return string\n+local function cstr(s)\n   return '\"' .. s:gsub('[\"\\\\]', '\\\\%0'):gsub('\\t', '\\\\t') .. '\"'\n end\n-local macros=function(s)\n+\n+--- @param s string\n+--- @return fun(): string\n+local function macros(s)\n   return function()\n     return s\n   end\n end\n-local imacros=function(s)\n+\n+--- @param s string\n+--- @return fun(): string\n+local function imacros(s)\n   return function()\n     return '(intptr_t)' .. s\n   end\n end\n-local N_=function(s) -- luacheck: ignore 211 (currently unused)\n+\n+--- @param s string\n+--- @return fun(): string\n+local function N_(s) -- luacheck: ignore 211 (currently unused)\n   return function()\n     return 'N_(' .. cstr(s) .. ')'\n   end\n end\n--- used for 'cinkeys' and 'indentkeys'\n-local indentkeys_default = '0{,0},0),0],:,0#,!^F,o,O,e';\n+\n return {\n-  cstr=cstr,\n-  options={\n-    {\n-      full_name='aleph', abbreviation='al',\n-      short_desc=N_(\"ASCII code of the letter Aleph (Hebrew)\"),\n-      type='number', scope={'global'},\n-      defaults={if_true=224}\n-    },\n-    {\n-      full_name='arabic', abbreviation='arab',\n-      short_desc=N_(\"Arabic as a default second language\"),\n-      type='bool', scope={'window'},\n-      redraw={'curswant'},\n-      defaults={if_true=false},\n-      cb='did_set_arabic'\n-    },\n-    {\n-      full_name='arabicshape', abbreviation='arshape',\n-      short_desc=N_(\"do shaping for Arabic characters\"),\n-      type='bool', scope={'global'},\n-      redraw={'all_windows', 'ui_option'},\n+  cstr = cstr,\n+  --- @type vim.option_meta[]\n+  options = {\n+    {\n+      abbreviation = 'al',\n+      defaults = { if_true = 224 },\n+      full_name = 'aleph',\n+      scope = { 'global' },\n+      short_desc = N_('ASCII code of the letter Aleph (Hebrew)'),\n+      type = 'number',\n+    },\n+    {\n+      abbreviation = 'arab',\n+      cb = 'did_set_arabic',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        This option can be set to start editing Arabic text.\n+        Setting this option will:\n+        - Set the 'rightleft' option, unless 'termbidi' is set.\n+        - Set the 'arabicshape' option, unless 'termbidi' is set.\n+        - Set the 'keymap' option to \"arabic\"; in Insert mode CTRL-^ toggles\n+          between typing English and Arabic key mapping.\n+        - Set the 'delcombine' option\n \n-      varname='p_arshape',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='allowrevins', abbreviation='ari',\n-      short_desc=N_(\"allow CTRL-_ in Insert and Command-line mode\"),\n-      type='bool', scope={'global'},\n-      varname='p_ari',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='ambiwidth', abbreviation='ambw',\n-      short_desc=N_(\"what to do with Unicode chars of ambiguous width\"),\n-      type='string', scope={'global'},\n-      redraw={'all_windows', 'ui_option'},\n-      varname='p_ambw',\n-      defaults={if_true=\"single\"},\n-      cb='did_set_ambiwidth'\n-    },\n-    {\n-      full_name='autochdir', abbreviation='acd',\n-      short_desc=N_(\"change directory to the file in the current window\"),\n-      type='bool', scope={'global'},\n-      varname='p_acd',\n-      defaults={if_true=false},\n-      cb='did_set_autochdir'\n-    },\n-    {\n-      full_name='autoindent', abbreviation='ai',\n-      short_desc=N_(\"take indent for new line from previous line\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_ai',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='autoread', abbreviation='ar',\n-      short_desc=N_(\"autom. read file when changed outside of Vim\"),\n-      type='bool', scope={'global', 'buffer'},\n-      varname='p_ar',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='autowrite', abbreviation='aw',\n-      short_desc=N_(\"automatically write file if changed\"),\n-      type='bool', scope={'global'},\n-      varname='p_aw',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='autowriteall', abbreviation='awa',\n-      short_desc=N_(\"as 'autowrite', but works with more commands\"),\n-      type='bool', scope={'global'},\n-      varname='p_awa',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='background', abbreviation='bg',\n-      short_desc=N_(\"\\\"dark\\\" or \\\"light\\\", used for highlight colors\"),\n-      type='string', scope={'global'},\n-      varname='p_bg',\n-      defaults={if_true=\"dark\"},\n-      cb='did_set_background'\n-    },\n-    {\n-      full_name='backspace', abbreviation='bs',\n-      short_desc=N_(\"how backspace works at start of line\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_bs',\n-      defaults={if_true=\"indent,eol,start\"},\n-      cb='did_set_backspace'\n-    },\n-    {\n-      full_name='backup', abbreviation='bk',\n-      short_desc=N_(\"keep backup file after overwriting a file\"),\n-      type='bool', scope={'global'},\n-      varname='p_bk',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='backupcopy', abbreviation='bkc',\n-      short_desc=N_(\"make backup as a copy, don't rename the file\"),\n-      type='string', list='onecomma', scope={'global', 'buffer'},\n-      deny_duplicates=true,\n-      varname='p_bkc',\n-      defaults={\n-        condition='UNIX',\n-        if_true=\"auto\",\n-        if_false=\"auto\"\n+        Resetting this option will:\n+        - Reset the 'rightleft' option.\n+        - Disable the use of 'keymap' (without changing its value).\n+        Note that 'arabicshape' and 'delcombine' are not reset (it is a global\n+        option).\n+        Also see |arabic.txt|.\n+      ]=],\n+      full_name = 'arabic',\n+      redraw = { 'curswant' },\n+      scope = { 'window' },\n+      short_desc = N_('Arabic as a default second language'),\n+      type = 'bool',\n+    },\n+    {\n+      abbreviation = 'arshape',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        When on and 'termbidi' is off, the required visual character\n+        corrections that need to take place for displaying the Arabic language\n+        take effect.  Shaping, in essence, gets enabled; the term is a broad\n+        one which encompasses:\n+          a) the changing/morphing of characters based on their location\n+             within a word (initial, medial, final and stand-alone).\n+          b) the enabling of the ability to compose characters\n+          c) the enabling of the required combining of some characters\n+        When disabled the display shows each character's true stand-alone\n+        form.\n+        Arabic is a complex language which requires other settings, for\n+        further details see |arabic.txt|.\n+      ]=],\n+      full_name = 'arabicshape',\n+      redraw = { 'all_windows', 'ui_option' },\n+      scope = { 'global' },\n+      short_desc = N_('do shaping for Arabic characters'),\n+      type = 'bool',\n+      varname = 'p_arshape',\n+    },\n+    {\n+      abbreviation = 'ari',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Allow CTRL-_ in Insert and Command-line mode.  This is default off, to\n+        avoid that users that accidentally type CTRL-_ instead of SHIFT-_ get\n+        into reverse Insert mode, and don't know how to get out.  See\n+        'revins'.\n+      ]=],\n+      full_name = 'allowrevins',\n+      scope = { 'global' },\n+      short_desc = N_('allow CTRL-_ in Insert and Command-line mode'),\n+      type = 'bool',\n+      varname = 'p_ari',\n+    },\n+    {\n+      abbreviation = 'ambw',\n+      cb = 'did_set_ambiwidth',\n+      defaults = { if_true = 'single' },\n+      desc = [=[\n+        Tells Vim what to do with characters with East Asian Width Class\n+        Ambiguous (such as Euro, Registered Sign, Copyright Sign, Greek\n+        letters, Cyrillic letters).\n+\n+        There are currently two possible values:\n+        \"single\":\tUse the same width as characters in US-ASCII.  This is\n+        \t\texpected by most users.\n+        \"double\":\tUse twice the width of ASCII characters.\n+        \t\t\t\t\t\t*E834* *E835*\n+        The value \"double\" cannot be used if 'listchars' or 'fillchars'\n+        contains a character that would be double width.  These errors may\n+        also be given when calling setcellwidths().\n+\n+        The values are overruled for characters specified with\n+        |setcellwidths()|.\n+\n+        There are a number of CJK fonts for which the width of glyphs for\n+        those characters are solely based on how many octets they take in\n+        legacy/traditional CJK encodings.  In those encodings, Euro,\n+        Registered sign, Greek/Cyrillic letters are represented by two octets,\n+        therefore those fonts have \"wide\" glyphs for them.  This is also\n+        true of some line drawing characters used to make tables in text\n+        file.  Therefore, when a CJK font is used for GUI Vim or\n+        Vim is running inside a terminal (emulators) that uses a CJK font\n+        (or Vim is run inside an xterm invoked with \"-cjkwidth\" option.),\n+        this option should be set to \"double\" to match the width perceived\n+        by Vim with the width of glyphs in the font.  Perhaps it also has\n+        to be set to \"double\" under CJK MS-Windows when the system locale is\n+        set to one of CJK locales.  See Unicode Standard Annex #11\n+        (https://www.unicode.org/reports/tr11).\n+      ]=],\n+      full_name = 'ambiwidth',\n+      redraw = { 'all_windows', 'ui_option' },\n+      scope = { 'global' },\n+      short_desc = N_('what to do with Unicode chars of ambiguous width'),\n+      type = 'string',\n+      varname = 'p_ambw',\n+    },\n+    {\n+      abbreviation = 'acd',\n+      cb = 'did_set_autochdir',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        When on, Vim will change the current working directory whenever you\n+        open a file, switch buffers, delete a buffer or open/close a window.\n+        It will change to the directory containing the file which was opened\n+        or selected.  When a buffer has no name it also has no directory, thus\n+        the current directory won't change when navigating to it.\n+        Note: When this option is on some plugins may not work.\n+      ]=],\n+      full_name = 'autochdir',\n+      scope = { 'global' },\n+      short_desc = N_('change directory to the file in the current window'),\n+      type = 'bool',\n+      varname = 'p_acd',\n+    },\n+    {\n+      abbreviation = 'ai',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        Copy indent from current line when starting a new line (typing <CR>\n+        in Insert mode or when using the \"o\" or \"O\" command).  If you do not\n+        type anything on the new line except <BS> or CTRL-D and then type\n+        <Esc>, CTRL-O or <CR>, the indent is deleted again.  Moving the cursor\n+        to another line has the same effect, unless the 'I' flag is included\n+        in 'cpoptions'.\n+        When autoindent is on, formatting (with the \"gq\" command or when you\n+        reach 'textwidth' in Insert mode) uses the indentation of the first\n+        line.\n+        When 'smartindent' or 'cindent' is on the indent is changed in\n+        a different way.\n+      ]=],\n+      full_name = 'autoindent',\n+      scope = { 'buffer' },\n+      short_desc = N_('take indent for new line from previous line'),\n+      type = 'bool',\n+      varname = 'p_ai',\n+    },\n+    {\n+      abbreviation = 'ar',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        When a file has been detected to have been changed outside of Vim and\n+        it has not been changed inside of Vim, automatically read it again.\n+        When the file has been deleted this is not done, so you have the text\n+        from before it was deleted.  When it appears again then it is read.\n+        |timestamp|\n+        If this option has a local value, use this command to switch back to\n+        using the global value: >\n+        \t:set autoread<\n+        <\n+      ]=],\n+      full_name = 'autoread',\n+      scope = { 'global', 'buffer' },\n+      short_desc = N_('autom. read file when changed outside of Vim'),\n+      type = 'bool',\n+      varname = 'p_ar',\n+    },\n+    {\n+      abbreviation = 'aw',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Write the contents of the file, if it has been modified, on each\n+        `:next`, `:rewind`, `:last`, `:first`, `:previous`, `:stop`,\n+        `:suspend`, `:tag`, `:!`, `:make`, CTRL-] and CTRL-^ command; and when\n+        a `:buffer`, CTRL-O, CTRL-I, '{A-Z0-9}, or `{A-Z0-9} command takes one\n+        to another file.\n+        A buffer is not written if it becomes hidden, e.g. when 'bufhidden' is\n+        set to \"hide\" and `:next` is used.\n+        Note that for some commands the 'autowrite' option is not used, see\n+        'autowriteall' for that.\n+        Some buffers will not be written, specifically when 'buftype' is\n+        \"nowrite\", \"nofile\", \"terminal\" or \"prompt\".\n+        USE WITH CARE: If you make temporary changes to a buffer that you\n+        don't want to be saved this option may cause it to be saved anyway.\n+        Renaming the buffer with \":file {name}\" may help avoid this.\n+      ]=],\n+      full_name = 'autowrite',\n+      scope = { 'global' },\n+      short_desc = N_('automatically write file if changed'),\n+      type = 'bool',\n+      varname = 'p_aw',\n+    },\n+    {\n+      abbreviation = 'awa',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Like 'autowrite', but also used for commands \":edit\", \":enew\", \":quit\",\n+        \":qall\", \":exit\", \":xit\", \":recover\" and closing the Vim window.\n+        Setting this option also implies that Vim behaves like 'autowrite' has\n+        been set.\n+      ]=],\n+      full_name = 'autowriteall',\n+      scope = { 'global' },\n+      short_desc = N_(\"as 'autowrite', but works with more commands\"),\n+      type = 'bool',\n+      varname = 'p_awa',\n+    },\n+    {\n+      abbreviation = 'bg',\n+      cb = 'did_set_background',\n+      defaults = { if_true = 'dark' },\n+      desc = [=[\n+        When set to \"dark\" or \"light\", adjusts the default color groups for\n+        that background type.  The |TUI| or other UI sets this on startup\n+        (triggering |OptionSet|) if it can detect the background color.\n+\n+        This option does NOT change the background color, it tells Nvim what\n+        the \"inherited\" (terminal/GUI) background looks like.\n+        See |:hi-normal| if you want to set the background color explicitly.\n+        \t\t\t\t\t*g:colors_name*\n+        When a color scheme is loaded (the \"g:colors_name\" variable is set)\n+        setting 'background' will cause the color scheme to be reloaded.  If\n+        the color scheme adjusts to the value of 'background' this will work.\n+        However, if the color scheme sets 'background' itself the effect may\n+        be undone.  First delete the \"g:colors_name\" variable when needed.\n+\n+        Normally this option would be set in the vimrc file.  Possibly\n+        depending on the terminal name.  Example: >\n+        \t:if $TERM ==# \"xterm\"\n+        \t:  set background=dark\n+        \t:endif\n+        <\tWhen this option is set, the default settings for the highlight groups\n+        will change.  To use other settings, place \":highlight\" commands AFTER\n+        the setting of the 'background' option.\n+        This option is also used in the \"$VIMRUNTIME/syntax/syntax.vim\" file\n+        to select the colors for syntax highlighting.  After changing this\n+        option, you must load syntax.vim again to see the result.  This can be\n+        done with \":syntax on\".\n+      ]=],\n+      full_name = 'background',\n+      scope = { 'global' },\n+      short_desc = N_('\"dark\" or \"light\", used for highlight colors'),\n+      type = 'string',\n+      varname = 'p_bg',\n+    },\n+    {\n+      abbreviation = 'bs',\n+      cb = 'did_set_backspace',\n+      defaults = { if_true = 'indent,eol,start' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Influences the working of <BS>, <Del>, CTRL-W and CTRL-U in Insert\n+        mode.  This is a list of items, separated by commas.  Each item allows\n+        a way to backspace over something:\n+        value\teffect\t~\n+        indent\tallow backspacing over autoindent\n+        eol\tallow backspacing over line breaks (join lines)\n+        start\tallow backspacing over the start of insert; CTRL-W and CTRL-U\n+        \tstop once at the start of insert.\n+        nostop\tlike start, except CTRL-W and CTRL-U do not stop at the start of\n+        \tinsert.\n+\n+        When the value is empty, Vi compatible backspacing is used, none of\n+        the ways mentioned for the items above are possible.\n+      ]=],\n+      full_name = 'backspace',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('how backspace works at start of line'),\n+      type = 'string',\n+      varname = 'p_bs',\n+    },\n+    {\n+      abbreviation = 'bk',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Make a backup before overwriting a file.  Leave it around after the\n+        file has been successfully written.  If you do not want to keep the\n+        backup file, but you do want a backup while the file is being\n+        written, reset this option and set the 'writebackup' option (this is\n+        the default).  If you do not want a backup file at all reset both\n+        options (use this if your file system is almost full).  See the\n+        |backup-table| for more explanations.\n+        When the 'backupskip' pattern matches, a backup is not made anyway.\n+        When 'patchmode' is set, the backup may be renamed to become the\n+        oldest version of a file.\n+      ]=],\n+      full_name = 'backup',\n+      scope = { 'global' },\n+      short_desc = N_('keep backup file after overwriting a file'),\n+      type = 'bool',\n+      varname = 'p_bk',\n+    },\n+    {\n+      abbreviation = 'bkc',\n+      cb = 'did_set_backupcopy',\n+      defaults = { condition = 'UNIX', if_false = 'auto', if_true = 'auto' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        When writing a file and a backup is made, this option tells how it's\n+        done.  This is a comma-separated list of words.\n+\n+        The main values are:\n+        \"yes\"\tmake a copy of the file and overwrite the original one\n+        \"no\"\trename the file and write a new one\n+        \"auto\"\tone of the previous, what works best\n+\n+        Extra values that can be combined with the ones above are:\n+        \"breaksymlink\"\talways break symlinks when writing\n+        \"breakhardlink\"\talways break hardlinks when writing\n+\n+        Making a copy and overwriting the original file:\n+        - Takes extra time to copy the file.\n+        + When the file has special attributes, is a (hard/symbolic) link or\n+          has a resource fork, all this is preserved.\n+        - When the file is a link the backup will have the name of the link,\n+          not of the real file.\n+\n+        Renaming the file and writing a new one:\n+        + It's fast.\n+        - Sometimes not all attributes of the file can be copied to the new\n+          file.\n+        - When the file is a link the new file will not be a link.\n+\n+        The \"auto\" value is the middle way: When Vim sees that renaming the\n+        file is possible without side effects (the attributes can be passed on\n+        and the file is not a link) that is used.  When problems are expected,\n+        a copy will be made.\n+\n+        The \"breaksymlink\" and \"breakhardlink\" values can be used in\n+        combination with any of \"yes\", \"no\" and \"auto\".  When included, they\n+        force Vim to always break either symbolic or hard links by doing\n+        exactly what the \"no\" option does, renaming the original file to\n+        become the backup and writing a new file in its place.  This can be\n+        useful for example in source trees where all the files are symbolic or\n+        hard links and any changes should stay in the local source tree, not\n+        be propagated back to the original source.\n+        \t\t\t\t\t\t*crontab*\n+        One situation where \"no\" and \"auto\" will cause problems: A program\n+        that opens a file, invokes Vim to edit that file, and then tests if\n+        the open file was changed (through the file descriptor) will check the\n+        backup file instead of the newly created file.  \"crontab -e\" is an\n+        example.\n+\n+        When a copy is made, the original file is truncated and then filled\n+        with the new text.  This means that protection bits, owner and\n+        symbolic links of the original file are unmodified.  The backup file,\n+        however, is a new file, owned by the user who edited the file.  The\n+        group of the backup is set to the group of the original file.  If this\n+        fails, the protection bits for the group are made the same as for\n+        others.\n+\n+        When the file is renamed, this is the other way around: The backup has\n+        the same attributes of the original file, and the newly written file\n+        is owned by the current user.  When the file was a (hard/symbolic)\n+        link, the new file will not!  That's why the \"auto\" value doesn't\n+        rename when the file is a link.  The owner and group of the newly\n+        written file will be set to the same ones as the original file, but\n+        the system may refuse to do this.  In that case the \"auto\" value will\n+        again not rename the file.\n+      ]=],\n+      full_name = 'backupcopy',\n+      list = 'onecomma',\n+      scope = { 'global', 'buffer' },\n+      short_desc = N_(\"make backup as a copy, don't rename the file\"),\n+      type = 'string',\n+      varname = 'p_bkc',\n+    },\n+    {\n+      abbreviation = 'bdir',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        List of directories for the backup file, separated with commas.\n+        - The backup file will be created in the first directory in the list\n+          where this is possible.  If none of the directories exist Nvim will\n+          attempt to create the last directory in the list.\n+        - Empty means that no backup file will be created ('patchmode' is\n+          impossible!).  Writing may fail because of this.\n+        - A directory \".\" means to put the backup file in the same directory\n+          as the edited file.\n+        - A directory starting with \"./\" (or \".\\\" for MS-Windows) means to put\n+          the backup file relative to where the edited file is.  The leading\n+          \".\" is replaced with the path name of the edited file.\n+          (\".\" inside a directory name has no special meaning).\n+        - Spaces after the comma are ignored, other spaces are considered part\n+          of the directory name.  To have a space at the start of a directory\n+          name, precede it with a backslash.\n+        - To include a comma in a directory name precede it with a backslash.\n+        - A directory name may end in an '/'.\n+        - For Unix and Win32, if a directory ends in two path separators \"//\",\n+          the swap file name will be built from the complete path to the file\n+          with all path separators changed to percent '%' signs. This will\n+          ensure file name uniqueness in the backup directory.\n+          On Win32, it is also possible to end with \"\\\\\".  However, When a\n+          separating comma is following, you must use \"//\", since \"\\\\\" will\n+          include the comma in the file name. Therefore it is recommended to\n+          use '//', instead of '\\\\'.\n+        - Environment variables are expanded |:set_env|.\n+        - Careful with '\\' characters, type one before a space, type two to\n+          get one in the option (see |option-backslash|), for example: >\n+            :set bdir=c:\\\\tmp,\\ dir\\\\,with\\\\,commas,\\\\\\ dir\\ with\\ spaces\n+        <\n+        See also 'backup' and 'writebackup' options.\n+        If you want to hide your backup files on Unix, consider this value: >\n+        \t:set backupdir=./.backup,~/.backup,.,/tmp\n+        <\tYou must create a \".backup\" directory in each directory and in your\n+        home directory for this to work properly.\n+        The use of |:set+=| and |:set-=| is preferred when adding or removing\n+        directories from the list.  This avoids problems when a future version\n+        uses another default.\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      expand = 'nodefault',\n+      full_name = 'backupdir',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_('list of directories for the backup file'),\n+      type = 'string',\n+      varname = 'p_bdir',\n+    },\n+    {\n+      abbreviation = 'bex',\n+      cb = 'did_set_backupext_or_patchmode',\n+      defaults = { if_true = '~' },\n+      desc = [=[\n+        String which is appended to a file name to make the name of the\n+        backup file.  The default is quite unusual, because this avoids\n+        accidentally overwriting existing files with a backup file.  You might\n+        prefer using \".bak\", but make sure that you don't have files with\n+        \".bak\" that you want to keep.\n+        Only normal file name characters can be used; `/\\*?[|<>` are illegal.\n+\n+        If you like to keep a lot of backups, you could use a BufWritePre\n+        autocommand to change 'backupext' just before writing the file to\n+        include a timestamp. >\n+        \t:au BufWritePre * let &bex = '-' .. strftime(\"%Y%b%d%X\") .. '~'\n+        <\tUse 'backupdir' to put the backup in a different directory.\n+      ]=],\n+      full_name = 'backupext',\n+      normal_fname_chars = true,\n+      scope = { 'global' },\n+      short_desc = N_('extension used for the backup file'),\n+      tags = { 'E589' },\n+      type = 'string',\n+      varname = 'p_bex',\n+    },\n+    {\n+      abbreviation = 'bsk',\n+      defaults = {\n+        if_true = '',\n+        doc = [[\"$TMPDIR/*,$TMP/*,$TEMP/*\"\n+        Unix: \"/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*\"\n+        Mac: \"/private/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*\")]],\n+        meta = '/tmp/*',\n       },\n-      cb='did_set_backupcopy'\n-    },\n-    {\n-      full_name='backupdir', abbreviation='bdir',\n-      short_desc=N_(\"list of directories for the backup file\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      secure=true,\n-      expand='nodefault',\n-      varname='p_bdir',\n-      defaults={if_true=''}\n-    },\n-    {\n-      full_name='backupext', abbreviation='bex',\n-      short_desc=N_(\"extension used for the backup file\"),\n-      type='string', scope={'global'},\n-      normal_fname_chars=true,\n-      varname='p_bex',\n-      defaults={if_true=\"~\"},\n-      cb='did_set_backupext_or_patchmode'\n-    },\n-    {\n-      full_name='backupskip', abbreviation='bsk',\n-      short_desc=N_(\"no backup for files that match these patterns\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_bsk',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='belloff', abbreviation='bo',\n-      short_desc=N_(\"do not ring the bell for these reasons\"),\n-      type='string', list='comma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_bo',\n-      defaults={if_true=\"all\"},\n-      cb='did_set_belloff'\n-    },\n-    {\n-      full_name='binary', abbreviation='bin',\n-      short_desc=N_(\"read/write/edit file in binary mode\"),\n-      type='bool', scope={'buffer'},\n-      redraw={'statuslines'},\n-      varname='p_bin',\n-      defaults={if_true=false},\n-      cb='did_set_binary'\n-    },\n-    {\n-      full_name='bomb',\n-      short_desc=N_(\"a Byte Order Mark to the file\"),\n-      type='bool', scope={'buffer'},\n-      no_mkrc=true,\n-      redraw={'statuslines'},\n-      varname='p_bomb',\n-      defaults={if_true=false},\n-      cb='did_set_eof_eol_fixeol_bomb'\n-    },\n-    {\n-      full_name='breakat', abbreviation='brk',\n-      short_desc=N_(\"characters that may cause a line break\"),\n-      type='string', list='flags', scope={'global'},\n-      redraw={'all_windows'},\n-      varname='p_breakat',\n-      defaults={if_true=\" \\t!@*-+;:,./?\"},\n-      cb='did_set_breakat'\n-    },\n-    {\n-      full_name='breakindent', abbreviation='bri',\n-      short_desc=N_(\"wrapped line repeats indent\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='breakindentopt', abbreviation='briopt',\n-      short_desc=N_(\"settings for 'breakindent'\"),\n-      type='string', list='onecomma', scope={'window'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      redraw={'current_buffer'},\n-      defaults={if_true=\"\"},\n-      cb='did_set_breakindentopt'\n-    },\n-    {\n-      full_name='browsedir', abbreviation='bsdir',\n-      short_desc=N_(\"which directory to start browsing in\"),\n-      type='string', scope={'global'},\n-      enable_if=false,\n-    },\n-    {\n-      full_name='bufhidden', abbreviation='bh',\n-      short_desc=N_(\"what to do when buffer is no longer in window\"),\n-      type='string', scope={'buffer'},\n-      noglob=true,\n-      alloced=true,\n-      varname='p_bh',\n-      defaults={if_true=\"\"},\n-      cb='did_set_bufhidden'\n-    },\n-    {\n-      full_name='buflisted', abbreviation='bl',\n-      short_desc=N_(\"whether the buffer shows up in the buffer list\"),\n-      type='bool', scope={'buffer'},\n-      noglob=true,\n-      varname='p_bl',\n-      defaults={if_true=1},\n-      cb='did_set_buflisted'\n-    },\n-    {\n-      full_name='buftype', abbreviation='bt',\n-      short_desc=N_(\"special type of buffer\"),\n-      type='string', scope={'buffer'},\n-      noglob=true,\n-      alloced=true,\n-      varname='p_bt',\n-      defaults={if_true=\"\"},\n-      cb='did_set_buftype'\n-    },\n-    {\n-      full_name='casemap', abbreviation='cmp',\n-      short_desc=N_(\"specifies how case of letters is changed\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_cmp',\n-      defaults={if_true=\"internal,keepascii\"},\n-      cb='did_set_casemap'\n-    },\n-    {\n-      full_name='cdhome', abbreviation='cdh',\n-      short_desc=N_(\":cd without argument goes to the home directory\"),\n-      type='bool', scope={'global'},\n-      secure=true,\n-      varname='p_cdh',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='cdpath', abbreviation='cd',\n-      short_desc=N_(\"list of directories searched with \\\":cd\\\"\"),\n-      type='string', list='comma', scope={'global'},\n-      deny_duplicates=true,\n-      expand=true,\n-      secure=true,\n-      varname='p_cdpath',\n-      defaults={if_true=\",,\"}\n-    },\n-    {\n-      full_name='cedit',\n-      short_desc=N_(\"used to open the command-line window\"),\n-      type='string', scope={'global'},\n-      varname='p_cedit',\n-      defaults={if_true=macros('CTRL_F_STR')},\n-      cb='did_set_cedit'\n-    },\n-    {\n-      full_name='channel',\n-      short_desc=N_(\"Channel connected to the buffer\"),\n-      type='number', scope={'buffer'},\n-      no_mkrc=true,\n-      nodefault=true,\n-      varname='p_channel',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='charconvert', abbreviation='ccv',\n-      short_desc=N_(\"expression for character encoding conversion\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      varname='p_ccv',\n-      defaults={if_true=\"\"},\n-      cb='did_set_optexpr'\n-    },\n-    {\n-      full_name='cindent', abbreviation='cin',\n-      short_desc=N_(\"do C program indenting\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_cin',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='cinkeys', abbreviation='cink',\n-      short_desc=N_(\"keys that trigger indent when 'cindent' is set\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_cink',\n-      defaults={if_true=indentkeys_default}\n-    },\n-    {\n-      full_name='cinoptions', abbreviation='cino',\n-      short_desc=N_(\"how to do indenting when 'cindent' is set\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_cino',\n-      defaults={if_true=\"\"},\n-      cb='did_set_cinoptions'\n-    },\n-    {\n-      full_name='cinwords', abbreviation='cinw',\n-      short_desc=N_(\"words where 'si' and 'cin' add an indent\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_cinw',\n-      defaults={if_true=\"if,else,while,do,for,switch\"}\n-    },\n-    {\n-      full_name='cinscopedecls', abbreviation='cinsd',\n-      short_desc=N_(\"words that are recognized by 'cino-g'\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_cinsd',\n-      defaults={if_true=\"public,protected,private\"}\n-    },\n-    {\n-      full_name='clipboard', abbreviation='cb',\n-      short_desc=N_(\"use the clipboard as the unnamed register\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_cb',\n-      defaults={if_true=\"\"},\n-      cb='did_set_clipboard'\n-    },\n-    {\n-      full_name='cmdheight', abbreviation='ch',\n-      short_desc=N_(\"number of lines to use for the command-line\"),\n-      type='number', scope={'global'},\n-      redraw={'all_windows'},\n-      varname='p_ch',\n-      defaults={if_true=1},\n-      cb='did_set_cmdheight'\n-    },\n-    {\n-      full_name='cmdwinheight', abbreviation='cwh',\n-      short_desc=N_(\"height of the command-line window\"),\n-      type='number', scope={'global'},\n-      varname='p_cwh',\n-      defaults={if_true=7}\n-    },\n-    {\n-      full_name='colorcolumn', abbreviation='cc',\n-      short_desc=N_(\"columns to highlight\"),\n-      type='string', list='onecomma', scope={'window'},\n-      deny_duplicates=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"\"},\n-      cb='did_set_colorcolumn'\n-    },\n-    {\n-      full_name='columns', abbreviation='co',\n-      short_desc=N_(\"number of columns in the display\"),\n-      type='number', scope={'global'},\n-      no_mkrc=true,\n-      varname='p_columns',\n-      defaults={if_true=macros('DFLT_COLS')}\n-    },\n-    {\n-      full_name='comments', abbreviation='com',\n-      short_desc=N_(\"patterns that can start a comment line\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      redraw={'curswant'},\n-      varname='p_com',\n-      defaults={if_true=\"s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-\"},\n-      cb='did_set_comments'\n-    },\n-    {\n-      full_name='commentstring', abbreviation='cms',\n-      short_desc=N_(\"template for comments; used for fold marker\"),\n-      type='string', scope={'buffer'},\n-      alloced=true,\n-      redraw={'curswant'},\n-      varname='p_cms',\n-      defaults={if_true=\"\"},\n-      cb='did_set_commentstring'\n-    },\n-    {\n-      full_name='compatible', abbreviation='cp',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      varname='p_force_off',\n-      -- pri_mkrc isn't needed here, optval_default()\n-      -- always returns TRUE for 'compatible'\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='complete', abbreviation='cpt',\n-      short_desc=N_(\"specify how Insert mode completion works\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_cpt',\n-      defaults={if_true=\".,w,b,u,t\"},\n-      cb='did_set_complete'\n-    },\n-    {\n-      full_name='concealcursor', abbreviation='cocu',\n-      short_desc=N_(\"whether concealable text is hidden in cursor line\"),\n-      type='string', scope={'window'},\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"\"},\n-      cb='did_set_concealcursor'\n-    },\n-    {\n-      full_name='conceallevel', abbreviation='cole',\n-      short_desc=N_(\"whether concealable text is shown or hidden\"),\n-      type='number', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='completefunc', abbreviation='cfu',\n-      short_desc=N_(\"function to be used for Insert mode completion\"),\n-      type='string', scope={'buffer'},\n-      secure=true,\n-      alloced=true,\n-      func=true,\n-      varname='p_cfu',\n-      defaults={if_true=\"\"},\n-      cb='did_set_completefunc'\n-    },\n-    {\n-      full_name='completeopt', abbreviation='cot',\n-      short_desc=N_(\"options for Insert mode completion\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_cot',\n-      defaults={if_true=\"menu,preview\"},\n-      cb='did_set_completeopt'\n-    },\n-    {\n-      full_name='completeslash', abbreviation='csl',\n-      type='string', scope={'buffer'},\n-      varname='p_csl',\n-      enable_if='BACKSLASH_IN_FILENAME',\n-      defaults={if_true=\"\"},\n-      cb='did_set_completeslash'\n-    },\n-    {\n-      full_name='confirm', abbreviation='cf',\n-      short_desc=N_(\"ask what to do about unsaved/read-only files\"),\n-      type='bool', scope={'global'},\n-      varname='p_confirm',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='copyindent', abbreviation='ci',\n-      short_desc=N_(\"make 'autoindent' use existing indent structure\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_ci',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='cpoptions', abbreviation='cpo',\n-      short_desc=N_(\"flags for Vi-compatible behavior\"),\n-      type='string', list='flags', scope={'global'},\n-      redraw={'all_windows'},\n-      varname='p_cpo',\n-      defaults={if_true=macros('CPO_VIM')},\n-      cb='did_set_cpoptions'\n-    },\n-    {\n-      full_name='cursorbind', abbreviation='crb',\n-      short_desc=N_(\"move cursor in window as it moves in other windows\"),\n-      type='bool', scope={'window'},\n-      pv_name='p_crbind',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='cursorcolumn', abbreviation='cuc',\n-      short_desc=N_(\"highlight the screen column of the cursor\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window_only'},\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='cursorline', abbreviation='cul',\n-      short_desc=N_(\"highlight the screen line of the cursor\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window_only'},\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='cursorlineopt', abbreviation='culopt',\n-      short_desc=N_(\"settings for 'cursorline'\"),\n-      type='string', list='onecomma', scope={'window'},\n-      deny_duplicates=true,\n-      redraw={'current_window_only'},\n-      defaults={if_true=\"both\"},\n-      cb='did_set_cursorlineopt'\n-    },\n-    {\n-      full_name='debug',\n-      short_desc=N_(\"to \\\"msg\\\" to see all error messages\"),\n-      type='string', scope={'global'},\n-      varname='p_debug',\n-      defaults={if_true=\"\"},\n-      cb='did_set_debug'\n-    },\n-    {\n-      full_name='define', abbreviation='def',\n-      short_desc=N_(\"pattern to be used to find a macro definition\"),\n-      type='string', scope={'global', 'buffer'},\n-      alloced=true,\n-      redraw={'curswant'},\n-      varname='p_def',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='delcombine', abbreviation='deco',\n-      short_desc=N_(\"delete combining characters on their own\"),\n-      type='bool', scope={'global'},\n-      varname='p_deco',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='dictionary', abbreviation='dict',\n-      short_desc=N_(\"list of file names used for keyword completion\"),\n-      type='string', list='onecomma', scope={'global', 'buffer'},\n-      deny_duplicates=true,\n-      normal_dname_chars=true,\n-      expand=true,\n-      varname='p_dict',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='diff',\n-      short_desc=N_(\"diff mode for the current window\"),\n-      type='bool', scope={'window'},\n-      noglob=true,\n-      redraw={'current_window'},\n-      defaults={if_true=false},\n-      cb='did_set_diff'\n-    },\n-    {\n-      full_name='diffexpr', abbreviation='dex',\n-      short_desc=N_(\"expression used to obtain a diff file\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      redraw={'curswant'},\n-      varname='p_dex',\n-      defaults={if_true=\"\"},\n-      cb='did_set_optexpr'\n-    },\n-    {\n-      full_name='diffopt', abbreviation='dip',\n-      short_desc=N_(\"options for using diff mode\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      redraw={'current_window'},\n-      varname='p_dip',\n-      defaults={if_true=\"internal,filler,closeoff\"},\n-      cb='did_set_diffopt'\n-    },\n-    {\n-      full_name='digraph', abbreviation='dg',\n-      short_desc=N_(\"enable the entering of digraphs in Insert mode\"),\n-      type='bool', scope={'global'},\n-      varname='p_dg',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='directory', abbreviation='dir',\n-      short_desc=N_(\"list of directory names for the swap file\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      secure=true,\n-      expand='nodefault',\n-      varname='p_dir',\n-      defaults={if_true=''}\n-    },\n-    {\n-      full_name='display', abbreviation='dy',\n-      short_desc=N_(\"list of flags for how to display text\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      redraw={'all_windows'},\n-      varname='p_dy',\n-      defaults={if_true=\"lastline\"},\n-      cb='did_set_display'\n-    },\n-    {\n-      full_name='eadirection', abbreviation='ead',\n-      short_desc=N_(\"in which direction 'equalalways' works\"),\n-      type='string', scope={'global'},\n-      varname='p_ead',\n-      defaults={if_true=\"both\"},\n-      cb='did_set_eadirection'\n-    },\n-    {\n-      full_name='edcompatible', abbreviation='ed',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      varname='p_force_off',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='emoji', abbreviation='emo',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      redraw={'all_windows', 'ui_option'},\n-      varname='p_emoji',\n-      defaults={if_true=true},\n-      cb='did_set_ambiwidth'\n-    },\n-    {\n-      full_name='encoding', abbreviation='enc',\n-      short_desc=N_(\"encoding used internally\"),\n-      type='string', scope={'global'},\n-      deny_in_modelines=true,\n-      varname='p_enc',\n-      defaults={if_true=macros('ENC_DFLT')},\n-      cb='did_set_encoding'\n-    },\n-    {\n-      full_name='endoffile', abbreviation='eof',\n-      short_desc=N_(\"write CTRL-Z for last line in file\"),\n-      type='bool', scope={'buffer'},\n-      no_mkrc=true,\n-      redraw={'statuslines'},\n-      varname='p_eof',\n-      defaults={if_true=false},\n-      cb='did_set_eof_eol_fixeol_bomb'\n-    },\n-    {\n-      full_name='endofline', abbreviation='eol',\n-      short_desc=N_(\"write <EOL> for last line in file\"),\n-      type='bool', scope={'buffer'},\n-      no_mkrc=true,\n-      redraw={'statuslines'},\n-      varname='p_eol',\n-      defaults={if_true=true},\n-      cb='did_set_eof_eol_fixeol_bomb'\n-    },\n-    {\n-      full_name='equalalways', abbreviation='ea',\n-      short_desc=N_(\"windows are automatically made the same size\"),\n-      type='bool', scope={'global'},\n-      varname='p_ea',\n-      defaults={if_true=true},\n-      cb='did_set_equalalways'\n-    },\n-    {\n-      full_name='equalprg', abbreviation='ep',\n-      short_desc=N_(\"external program to use for \\\"=\\\" command\"),\n-      type='string', scope={'global', 'buffer'},\n-      secure=true,\n-      expand=true,\n-      varname='p_ep',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='errorbells', abbreviation='eb',\n-      short_desc=N_(\"ring the bell for error messages\"),\n-      type='bool', scope={'global'},\n-      varname='p_eb',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='errorfile', abbreviation='ef',\n-      short_desc=N_(\"name of the errorfile for the QuickFix mode\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      expand=true,\n-      varname='p_ef',\n-      defaults={if_true=macros('DFLT_ERRORFILE')}\n-    },\n-    {\n-      full_name='errorformat', abbreviation='efm',\n-      short_desc=N_(\"description of the lines in the error file\"),\n-      type='string', list='onecomma', scope={'global', 'buffer'},\n-      deny_duplicates=true,\n-      varname='p_efm',\n-      defaults={if_true=macros('DFLT_EFM')}\n-    },\n-    {\n-      full_name='eventignore', abbreviation='ei',\n-      short_desc=N_(\"autocommand events that are ignored\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_ei',\n-      defaults={if_true=\"\"},\n-      cb='did_set_eventignore'\n-    },\n-    {\n-      full_name='expandtab', abbreviation='et',\n-      short_desc=N_(\"use spaces when <Tab> is inserted\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_et',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='exrc', abbreviation='ex',\n-      short_desc=N_(\"read .nvimrc and .exrc in the current directory\"),\n-      type='bool', scope={'global'},\n-      secure=true,\n-      varname='p_exrc',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='fileencoding', abbreviation='fenc',\n-      short_desc=N_(\"file encoding for multi-byte text\"),\n-      type='string', scope={'buffer'},\n-      no_mkrc=true,\n-      alloced=true,\n-      redraw={'statuslines', 'current_buffer'},\n-      varname='p_fenc',\n-      defaults={if_true=\"\"},\n-      cb='did_set_encoding'\n-    },\n-    {\n-      full_name='fileencodings', abbreviation='fencs',\n-      short_desc=N_(\"automatically detected character encodings\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_fencs',\n-      defaults={if_true=\"ucs-bom,utf-8,default,latin1\"}\n-    },\n-    {\n-      full_name='fileformat', abbreviation='ff',\n-      short_desc=N_(\"file format used for file I/O\"),\n-      type='string', scope={'buffer'},\n-      no_mkrc=true,\n-      alloced=true,\n-      redraw={'curswant', 'statuslines'},\n-      varname='p_ff',\n-      defaults={if_true=macros('DFLT_FF')},\n-      cb='did_set_fileformat'\n-    },\n-    {\n-      full_name='fileformats', abbreviation='ffs',\n-      short_desc=N_(\"automatically detected values for 'fileformat'\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_ffs',\n-      defaults={if_true=macros('DFLT_FFS_VIM')},\n-      cb='did_set_fileformats'\n-    },\n-    {\n-      full_name='fileignorecase', abbreviation='fic',\n-      short_desc=N_(\"ignore case when using file names\"),\n-      type='bool', scope={'global'},\n-      varname='p_fic',\n-      defaults={\n-        condition='CASE_INSENSITIVE_FILENAME',\n-        if_true=true,\n-        if_false=false,\n-      }\n-    },\n-    {\n-      full_name='filetype', abbreviation='ft',\n-      short_desc=N_(\"type of file, used for autocommands\"),\n-      type='string', scope={'buffer'},\n-      noglob=true,\n-      normal_fname_chars=true,\n-      alloced=true,\n-      expand=true,\n-      varname='p_ft',\n-      defaults={if_true=\"\"},\n-      cb='did_set_filetype_or_syntax'\n-    },\n-    {\n-      full_name='fillchars', abbreviation='fcs',\n-      short_desc=N_(\"characters to use for displaying special items\"),\n-      type='string', list='onecomma', scope={'global', 'window'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      redraw={'current_window'},\n-      varname='p_fcs',\n-      defaults={if_true=''},\n-      cb='did_set_chars_option'\n-    },\n-    {\n-      full_name='fixendofline', abbreviation='fixeol',\n-      short_desc=N_(\"make sure last line in file has <EOL>\"),\n-      type='bool', scope={'buffer'},\n-      redraw={'statuslines'},\n-      varname='p_fixeol',\n-      defaults={if_true=true},\n-      cb='did_set_eof_eol_fixeol_bomb'\n-    },\n-    {\n-      full_name='foldclose', abbreviation='fcl',\n-      short_desc=N_(\"close a fold when the cursor leaves it\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      redraw={'current_window'},\n-      varname='p_fcl',\n-      defaults={if_true=\"\"},\n-      cb='did_set_foldclose'\n-    },\n-    {\n-      full_name='foldcolumn', abbreviation='fdc',\n-      short_desc=N_(\"width of the column used to indicate folds\"),\n-      type='string', scope={'window'},\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"0\"},\n-      cb='did_set_foldcolumn'\n-    },\n-    {\n-      full_name='foldenable', abbreviation='fen',\n-      short_desc=N_(\"set to display all folds open\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='foldexpr', abbreviation='fde',\n-      short_desc=N_(\"expression used when 'foldmethod' is \\\"expr\\\"\"),\n-      type='string', scope={'window'},\n-      modelineexpr=true,\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"0\"},\n-      cb='did_set_foldexpr'\n-    },\n-    {\n-      full_name='foldignore', abbreviation='fdi',\n-      short_desc=N_(\"ignore lines when 'foldmethod' is \\\"indent\\\"\"),\n-      type='string', scope={'window'},\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"#\"},\n-      cb='did_set_foldignore'\n-    },\n-    {\n-      full_name='foldlevel', abbreviation='fdl',\n-      short_desc=N_(\"close folds with a level higher than this\"),\n-      type='number', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=0},\n-      cb='did_set_foldlevel'\n-    },\n-    {\n-      full_name='foldlevelstart', abbreviation='fdls',\n-      short_desc=N_(\"'foldlevel' when starting to edit a file\"),\n-      type='number', scope={'global'},\n-      redraw={'curswant'},\n-      varname='p_fdls',\n-      defaults={if_true=-1}\n-    },\n-    {\n-      full_name='foldmarker', abbreviation='fmr',\n-      short_desc=N_(\"markers used when 'foldmethod' is \\\"marker\\\"\"),\n-      type='string', list='onecomma', scope={'window'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"{{{,}}}\"},\n-      cb='did_set_foldmarker'\n-    },\n-    {\n-      full_name='foldmethod', abbreviation='fdm',\n-      short_desc=N_(\"folding type\"),\n-      type='string', scope={'window'},\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"manual\"},\n-      cb='did_set_foldmethod'\n-    },\n-    {\n-      full_name='foldminlines', abbreviation='fml',\n-      short_desc=N_(\"minimum number of lines for a fold to be closed\"),\n-      type='number', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=1},\n-      cb='did_set_foldminlines'\n-    },\n-    {\n-      full_name='foldnestmax', abbreviation='fdn',\n-      short_desc=N_(\"maximum fold depth\"),\n-      type='number', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=20},\n-      cb='did_set_foldnestmax'\n-    },\n-    {\n-      full_name='foldopen', abbreviation='fdo',\n-      short_desc=N_(\"for which commands a fold will be opened\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      redraw={'curswant'},\n-      varname='p_fdo',\n-      defaults={if_true=\"block,hor,mark,percent,quickfix,search,tag,undo\"},\n-      cb='did_set_foldopen'\n-    },\n-    {\n-      full_name='foldtext', abbreviation='fdt',\n-      short_desc=N_(\"expression used to display for a closed fold\"),\n-      type='string', scope={'window'},\n-      modelineexpr=true,\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"foldtext()\"},\n-      cb='did_set_optexpr'\n-    },\n-    {\n-      full_name='formatexpr', abbreviation='fex',\n-      short_desc=N_(\"expression used with \\\"gq\\\" command\"),\n-      type='string', scope={'buffer'},\n-      modelineexpr=true,\n-      alloced=true,\n-      varname='p_fex',\n-      defaults={if_true=\"\"},\n-      cb='did_set_optexpr'\n-    },\n-    {\n-      full_name='formatoptions', abbreviation='fo',\n-      short_desc=N_(\"how automatic formatting is to be done\"),\n-      type='string', list='flags', scope={'buffer'},\n-      alloced=true,\n-      varname='p_fo',\n-      defaults={if_true=macros('DFLT_FO_VIM')},\n-      cb='did_set_formatoptions'\n-    },\n-    {\n-      full_name='formatlistpat', abbreviation='flp',\n-      short_desc=N_(\"pattern used to recognize a list header\"),\n-      type='string', scope={'buffer'},\n-      alloced=true,\n-      varname='p_flp',\n-      defaults={if_true=\"^\\\\s*\\\\d\\\\+[\\\\]:.)}\\\\t ]\\\\s*\"}\n-    },\n-    {\n-      full_name='formatprg', abbreviation='fp',\n-      short_desc=N_(\"name of external program used with \\\"gq\\\" command\"),\n-      type='string', scope={'global', 'buffer'},\n-      secure=true,\n-      expand=true,\n-      varname='p_fp',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='fsync', abbreviation='fs',\n-      short_desc=N_(\"whether to invoke fsync() after file write\"),\n-      type='bool', scope={'global'},\n-      secure=true,\n-      varname='p_fs',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='gdefault', abbreviation='gd',\n-      short_desc=N_(\"the \\\":substitute\\\" flag 'g' is default on\"),\n-      type='bool', scope={'global'},\n-      varname='p_gd',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='grepformat', abbreviation='gfm',\n-      short_desc=N_(\"format of 'grepprg' output\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_gefm',\n-      defaults={if_true=macros('DFLT_GREPFORMAT')}\n-    },\n-    {\n-      full_name='grepprg', abbreviation='gp',\n-      short_desc=N_(\"program to use for \\\":grep\\\"\"),\n-      type='string', scope={'global', 'buffer'},\n-      secure=true,\n-      expand=true,\n-      varname='p_gp',\n-      defaults={\n-        condition='MSWIN',\n-        -- Add an extra file name so that grep will always\n-        -- insert a file name in the match line. */\n-        if_true=\"findstr /n $* nul\",\n-        if_false=\"grep -n $* /dev/null\"\n-      }\n-    },\n-    {\n-      full_name='guicursor', abbreviation='gcr',\n-      short_desc=N_(\"GUI: settings for cursor shape and blinking\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_guicursor',\n-      defaults={if_true=\"n-v-c-sm:block,i-ci-ve:ver25,r-cr-o:hor20\"},\n-      cb='did_set_guicursor'\n-    },\n-    {\n-      full_name='guifont', abbreviation='gfn',\n-      short_desc=N_(\"GUI: Name(s) of font(s) to be used\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_guifont',\n-      redraw={'ui_option'},\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='guifontwide', abbreviation='gfw',\n-      short_desc=N_(\"list of font names for double-wide characters\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      redraw={'ui_option'},\n-      varname='p_guifontwide',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='guioptions', abbreviation='go',\n-      short_desc=N_(\"GUI: Which components and options are used\"),\n-      type='string', list='flags', scope={'global'},\n-      enable_if=false,\n-    },\n-    {\n-      full_name='guitablabel', abbreviation='gtl',\n-      short_desc=N_(\"GUI: custom label for a tab page\"),\n-      type='string', scope={'global'},\n-      modelineexpr=true,\n-      redraw={'current_window'},\n-      enable_if=false,\n-    },\n-    {\n-      full_name='guitabtooltip', abbreviation='gtt',\n-      short_desc=N_(\"GUI: custom tooltip for a tab page\"),\n-      type='string', scope={'global'},\n-      redraw={'current_window'},\n-      enable_if=false,\n-    },\n-    {\n-      full_name='helpfile', abbreviation='hf',\n-      short_desc=N_(\"full path name of the main help file\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      expand=true,\n-      varname='p_hf',\n-      defaults={if_true=macros('DFLT_HELPFILE')},\n-      cb='did_set_helpfile'\n-    },\n-    {\n-      full_name='helpheight', abbreviation='hh',\n-      short_desc=N_(\"minimum height of a new help window\"),\n-      type='number', scope={'global'},\n-      varname='p_hh',\n-      defaults={if_true=20},\n-      cb='did_set_helpheight'\n-    },\n-    {\n-      full_name='helplang', abbreviation='hlg',\n-      short_desc=N_(\"preferred help languages\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_hlg',\n-      defaults={if_true=\"\"},\n-      cb='did_set_helplang'\n-    },\n-    {\n-      full_name='hidden', abbreviation='hid',\n-      short_desc=N_(\"don't unload buffer when it is |abandon|ed\"),\n-      type='bool', scope={'global'},\n-      varname='p_hid',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='highlight', abbreviation='hl',\n-      short_desc=N_(\"sets highlighting mode for various occasions\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_hl',\n-      defaults={if_true=macros('HIGHLIGHT_INIT')},\n-      cb='did_set_highlight'\n-    },\n-    {\n-      full_name='history', abbreviation='hi',\n-      short_desc=N_(\"number of command-lines that are remembered\"),\n-      type='number', scope={'global'},\n-      varname='p_hi',\n-      defaults={if_true=10000}\n-    },\n-    {\n-      full_name='hkmap', abbreviation='hk',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      varname='p_force_off',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='hkmapp', abbreviation='hkp',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      varname='p_force_off',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='hlsearch', abbreviation='hls',\n-      short_desc=N_(\"highlight matches with last search pattern\"),\n-      type='bool', scope={'global'},\n-      redraw={'all_windows'},\n-      varname='p_hls',\n-      defaults={if_true=true},\n-      cb='did_set_hlsearch'\n-    },\n-    {\n-      full_name='icon',\n-      short_desc=N_(\"Vim set the text of the window icon\"),\n-      type='bool', scope={'global'},\n-      varname='p_icon',\n-      defaults={if_true=false},\n-      cb='did_set_title_icon'\n-    },\n-    {\n-      full_name='iconstring',\n-      short_desc=N_(\"to use for the Vim icon text\"),\n-      type='string', scope={'global'},\n-      modelineexpr=true,\n-      varname='p_iconstring',\n-      defaults={if_true=\"\"},\n-      cb='did_set_iconstring'\n-    },\n-    {\n-      full_name='ignorecase', abbreviation='ic',\n-      short_desc=N_(\"ignore case in search patterns\"),\n-      type='bool', scope={'global'},\n-      varname='p_ic',\n-      defaults={if_true=false},\n-      cb='did_set_ignorecase'\n-    },\n-    {\n-      full_name='imcmdline', abbreviation='imc',\n-      short_desc=N_(\"use IM when starting to edit a command line\"),\n-      type='bool', scope={'global'},\n-      enable_if=false,\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='imdisable', abbreviation='imd',\n-      short_desc=N_(\"do not use the IM in any mode\"),\n-      type='bool', scope={'global'},\n-      enable_if=false,\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='iminsert', abbreviation='imi',\n-      short_desc=N_(\"use :lmap or IM in Insert mode\"),\n-      type='number', scope={'buffer'},\n-      varname='p_iminsert', pv_name='p_imi',\n-      defaults={if_true=macros('B_IMODE_NONE')},\n-      cb='did_set_iminsert'\n-    },\n-    {\n-      full_name='imsearch', abbreviation='ims',\n-      short_desc=N_(\"use :lmap or IM when typing a search pattern\"),\n-      type='number', scope={'buffer'},\n-      varname='p_imsearch', pv_name='p_ims',\n-      defaults={\n-        if_true=macros('B_IMODE_USE_INSERT'),\n-      }\n-    },\n-    {\n-      full_name='inccommand', abbreviation='icm',\n-      short_desc=N_(\"Live preview of substitution\"),\n-      type='string', scope={'global'},\n-      varname='p_icm',\n-      defaults={if_true=\"nosplit\"},\n-      cb='did_set_inccommand'\n-    },\n-    {\n-      full_name='include', abbreviation='inc',\n-      short_desc=N_(\"pattern to be used to find an include file\"),\n-      type='string', scope={'global', 'buffer'},\n-      alloced=true,\n-      varname='p_inc',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='includeexpr', abbreviation='inex',\n-      short_desc=N_(\"expression used to process an include line\"),\n-      type='string', scope={'buffer'},\n-      modelineexpr=true,\n-      alloced=true,\n-      varname='p_inex',\n-      defaults={if_true=\"\"},\n-      cb='did_set_optexpr'\n-    },\n-    {\n-      full_name='incsearch', abbreviation='is',\n-      short_desc=N_(\"highlight match while typing search pattern\"),\n-      type='bool', scope={'global'},\n-      varname='p_is',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='indentexpr', abbreviation='inde',\n-      short_desc=N_(\"expression used to obtain the indent of a line\"),\n-      type='string', scope={'buffer'},\n-      modelineexpr=true,\n-      alloced=true,\n-      varname='p_inde',\n-      defaults={if_true=\"\"},\n-      cb='did_set_optexpr'\n-    },\n-    {\n-      full_name='indentkeys', abbreviation='indk',\n-      short_desc=N_(\"keys that trigger indenting with 'indentexpr'\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_indk',\n-      defaults={if_true=indentkeys_default}\n-    },\n-    {\n-      full_name='infercase', abbreviation='inf',\n-      short_desc=N_(\"adjust case of match for keyword completion\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_inf',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='insertmode', abbreviation='im',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      varname='p_force_off',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='isfname', abbreviation='isf',\n-      short_desc=N_(\"characters included in file names and pathnames\"),\n-      type='string', list='comma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_isf',\n-      defaults={\n-        condition='BACKSLASH_IN_FILENAME',\n-        -- Excluded are: & and ^ are special in cmd.exe\n-        -- ( and ) are used in text separating fnames */\n-        if_true=\"@,48-57,/,\\\\,.,-,_,+,,,#,$,%,{,},[,],:,@-@,!,~,=\",\n-        if_false=\"@,48-57,/,.,-,_,+,,,#,$,%,~,=\"\n+      deny_duplicates = true,\n+      desc = [=[\n+        A list of file patterns.  When one of the patterns matches with the\n+        name of the file which is written, no backup file is created.  Both\n+        the specified file name and the full path name of the file are used.\n+        The pattern is used like with |:autocmd|, see |autocmd-pattern|.\n+        Watch out for special characters, see |option-backslash|.\n+        When $TMPDIR, $TMP or $TEMP is not defined, it is not used for the\n+        default value.  \"/tmp/*\" is only used for Unix.\n+\n+        WARNING: Not having a backup file means that when Vim fails to write\n+        your buffer correctly and then, for whatever reason, Vim exits, you\n+        lose both the original file and what you were writing.  Only disable\n+        backups if you don't care about losing the file.\n+\n+        Note that environment variables are not expanded.  If you want to use\n+        $HOME you must expand it explicitly, e.g.: >\n+        \t:let &backupskip = escape(expand('$HOME'), '\\') .. '/tmp/*'\n+\n+        <\tNote that the default also makes sure that \"crontab -e\" works (when a\n+        backup would be made by renaming the original file crontab won't see\n+        the newly created file).  Also see 'backupcopy' and |crontab|.\n+      ]=],\n+      full_name = 'backupskip',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('no backup for files that match these patterns'),\n+      type = 'string',\n+      varname = 'p_bsk',\n+    },\n+    {\n+      abbreviation = 'bo',\n+      cb = 'did_set_belloff',\n+      defaults = { if_true = 'all' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Specifies for which events the bell will not be rung. It is a comma-\n+        separated list of items. For each item that is present, the bell\n+        will be silenced. This is most useful to specify specific events in\n+        insert mode to be silenced.\n+\n+        item\t    meaning when present\t~\n+        all\t    All events.\n+        backspace   When hitting <BS> or <Del> and deleting results in an\n+        \t    error.\n+        cursor\t    Fail to move around using the cursor keys or\n+        \t    <PageUp>/<PageDown> in |Insert-mode|.\n+        complete    Error occurred when using |i_CTRL-X_CTRL-K| or\n+        \t    |i_CTRL-X_CTRL-T|.\n+        copy\t    Cannot copy char from insert mode using |i_CTRL-Y| or\n+        \t    |i_CTRL-E|.\n+        ctrlg\t    Unknown Char after <C-G> in Insert mode.\n+        error\t    Other Error occurred (e.g. try to join last line)\n+        \t    (mostly used in |Normal-mode| or |Cmdline-mode|).\n+        esc\t    hitting <Esc> in |Normal-mode|.\n+        hangul\t    Ignored.\n+        lang\t    Calling the beep module for Lua/Mzscheme/TCL.\n+        mess\t    No output available for |g<|.\n+        showmatch   Error occurred for 'showmatch' function.\n+        operator    Empty region error |cpo-E|.\n+        register    Unknown register after <C-R> in |Insert-mode|.\n+        shell\t    Bell from shell output |:!|.\n+        spell\t    Error happened on spell suggest.\n+        wildmode    More matches in |cmdline-completion| available\n+        \t    (depends on the 'wildmode' setting).\n+\n+        This is most useful to fine tune when in Insert mode the bell should\n+        be rung. For Normal mode and Ex commands, the bell is often rung to\n+        indicate that an error occurred. It can be silenced by adding the\n+        \"error\" keyword.\n+      ]=],\n+      full_name = 'belloff',\n+      list = 'comma',\n+      scope = { 'global' },\n+      short_desc = N_('do not ring the bell for these reasons'),\n+      type = 'string',\n+      varname = 'p_bo',\n+    },\n+    {\n+      abbreviation = 'bin',\n+      cb = 'did_set_binary',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        This option should be set before editing a binary file.  You can also\n+        use the |-b| Vim argument.  When this option is switched on a few\n+        options will be changed (also when it already was on):\n+        \t'textwidth'  will be set to 0\n+        \t'wrapmargin' will be set to 0\n+        \t'modeline'   will be off\n+        \t'expandtab'  will be off\n+        Also, 'fileformat' and 'fileformats' options will not be used, the\n+        file is read and written like 'fileformat' was \"unix\" (a single <NL>\n+        separates lines).\n+        The 'fileencoding' and 'fileencodings' options will not be used, the\n+        file is read without conversion.\n+        NOTE: When you start editing a(nother) file while the 'bin' option is\n+        on, settings from autocommands may change the settings again (e.g.,\n+        'textwidth'), causing trouble when editing.  You might want to set\n+        'bin' again when the file has been loaded.\n+        The previous values of these options are remembered and restored when\n+        'bin' is switched from on to off.  Each buffer has its own set of\n+        saved option values.\n+        To edit a file with 'binary' set you can use the |++bin| argument.\n+        This avoids you have to do \":set bin\", which would have effect for all\n+        files you edit.\n+        When writing a file the <EOL> for the last line is only written if\n+        there was one in the original file (normally Vim appends an <EOL> to\n+        the last line if there is none; this would make the file longer).  See\n+        the 'endofline' option.\n+      ]=],\n+      full_name = 'binary',\n+      redraw = { 'statuslines' },\n+      scope = { 'buffer' },\n+      short_desc = N_('read/write/edit file in binary mode'),\n+      type = 'bool',\n+      varname = 'p_bin',\n+    },\n+    {\n+      cb = 'did_set_eof_eol_fixeol_bomb',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        When writing a file and the following conditions are met, a BOM (Byte\n+        Order Mark) is prepended to the file:\n+        - this option is on\n+        - the 'binary' option is off\n+        - 'fileencoding' is \"utf-8\", \"ucs-2\", \"ucs-4\" or one of the little/big\n+          endian variants.\n+        Some applications use the BOM to recognize the encoding of the file.\n+        Often used for UCS-2 files on MS-Windows.  For other applications it\n+        causes trouble, for example: \"cat file1 file2\" makes the BOM of file2\n+        appear halfway through the resulting file.  Gcc doesn't accept a BOM.\n+        When Vim reads a file and 'fileencodings' starts with \"ucs-bom\", a\n+        check for the presence of the BOM is done and 'bomb' set accordingly.\n+        Unless 'binary' is set, it is removed from the first line, so that you\n+        don't see it when editing.  When you don't change the options, the BOM\n+        will be restored when writing the file.\n+      ]=],\n+      full_name = 'bomb',\n+      no_mkrc = true,\n+      redraw = { 'statuslines' },\n+      scope = { 'buffer' },\n+      short_desc = N_('a Byte Order Mark to the file'),\n+      type = 'bool',\n+      varname = 'p_bomb',\n+    },\n+    {\n+      abbreviation = 'brk',\n+      cb = 'did_set_breakat',\n+      defaults = {\n+        if_true = ' \\t!@*-+;:,./?',\n+        doc = '\" ^I!@*-+;:,./?\"',\n       },\n-      cb='did_set_isopt'\n-    },\n-    {\n-      full_name='isident', abbreviation='isi',\n-      short_desc=N_(\"characters included in identifiers\"),\n-      type='string', list='comma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_isi',\n-      defaults={\n-        condition='MSWIN',\n-        if_true=\"@,48-57,_,128-167,224-235\",\n-        if_false=\"@,48-57,_,192-255\"\n+      desc = [=[\n+        This option lets you choose which characters might cause a line\n+        break if 'linebreak' is on.  Only works for ASCII characters.\n+      ]=],\n+      full_name = 'breakat',\n+      list = 'flags',\n+      redraw = { 'all_windows' },\n+      scope = { 'global' },\n+      short_desc = N_('characters that may cause a line break'),\n+      type = 'string',\n+      varname = 'p_breakat',\n+    },\n+    {\n+      abbreviation = 'bri',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Every wrapped line will continue visually indented (same amount of\n+        space as the beginning of that line), thus preserving horizontal blocks\n+        of text.\n+      ]=],\n+      full_name = 'breakindent',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('wrapped line repeats indent'),\n+      type = 'bool',\n+    },\n+    {\n+      abbreviation = 'briopt',\n+      alloced = true,\n+      cb = 'did_set_breakindentopt',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Settings for 'breakindent'. It can consist of the following optional\n+        items and must be separated by a comma:\n+        \tmin:{n}\t    Minimum text width that will be kept after\n+        \t\t    applying 'breakindent', even if the resulting\n+        \t\t    text should normally be narrower. This prevents\n+        \t\t    text indented almost to the right window border\n+        \t\t    occupying lot of vertical space when broken.\n+        \t\t    (default: 20)\n+        \tshift:{n}   After applying 'breakindent', the wrapped line's\n+        \t\t    beginning will be shifted by the given number of\n+        \t\t    characters.  It permits dynamic French paragraph\n+        \t\t    indentation (negative) or emphasizing the line\n+        \t\t    continuation (positive).\n+        \t\t    (default: 0)\n+        \tsbr\t    Display the 'showbreak' value before applying the\n+        \t\t    additional indent.\n+        \t\t    (default: off)\n+        \tlist:{n}    Adds an additional indent for lines that match a\n+        \t\t    numbered or bulleted list (using the\n+        \t\t    'formatlistpat' setting).\n+        \tlist:-1\t    Uses the length of a match with 'formatlistpat'\n+        \t\t    for indentation.\n+        \t\t    (default: 0)\n+        \tcolumn:{n}  Indent at column {n}. Will overrule the other\n+        \t\t    sub-options. Note: an additional indent may be\n+        \t\t    added for the 'showbreak' setting.\n+        \t\t    (default: off)\n+      ]=],\n+      full_name = 'breakindentopt',\n+      list = 'onecomma',\n+      redraw = { 'current_buffer' },\n+      scope = { 'window' },\n+      short_desc = N_(\"settings for 'breakindent'\"),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'bsdir',\n+      defaults = {\n+        if_true = '',\n+        doc = '\"last\"',\n       },\n-      cb='did_set_isopt'\n-    },\n-    {\n-      full_name='iskeyword', abbreviation='isk',\n-      short_desc=N_(\"characters included in keywords\"),\n-      type='string', list='comma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_isk',\n-      defaults={if_true=\"@,48-57,_,192-255\"},\n-      cb='did_set_isopt'\n-    },\n-    {\n-      full_name='isprint', abbreviation='isp',\n-      short_desc=N_(\"printable characters\"),\n-      type='string', list='comma', scope={'global'},\n-      deny_duplicates=true,\n-      redraw={'all_windows'},\n-      varname='p_isp',\n-      defaults={if_true=\"@,161-255\"},\n-      cb='did_set_isopt'\n-    },\n-    {\n-      full_name='joinspaces', abbreviation='js',\n-      short_desc=N_(\"two spaces after a period with a join command\"),\n-      type='bool', scope={'global'},\n-      varname='p_js',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='jumpoptions', abbreviation='jop',\n-      short_desc=N_(\"Controls the behavior of the jumplist\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_jop',\n-      defaults={if_true=''},\n-      cb='did_set_jumpoptions'\n-    },\n-    {\n-      full_name='keymap', abbreviation='kmp',\n-      short_desc=N_(\"name of a keyboard mapping\"),\n-      type='string', scope={'buffer'},\n-      normal_fname_chars=true,\n-      pri_mkrc=true,\n-      alloced=true,\n-      redraw={'statuslines', 'current_buffer'},\n-      varname='p_keymap', pv_name='p_kmap',\n-      defaults={if_true=\"\"},\n-      cb='did_set_keymap'\n-    },\n-    {\n-      full_name='keymodel', abbreviation='km',\n-      short_desc=N_(\"enable starting/stopping selection with keys\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_km',\n-      defaults={if_true=\"\"},\n-      cb='did_set_keymodel'\n-    },\n-    {\n-      full_name='keywordprg', abbreviation='kp',\n-      short_desc=N_(\"program to use for the \\\"K\\\" command\"),\n-      type='string', scope={'global', 'buffer'},\n-      secure=true,\n-      expand=true,\n-      varname='p_kp',\n-      defaults={\n-        if_true=\":Man\",\n-      }\n-    },\n-    {\n-      full_name='langmap', abbreviation='lmap',\n-      short_desc=N_(\"alphabetic characters for other language mode\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      secure=true,\n-      varname='p_langmap',\n-      defaults={if_true=\"\"},\n-      cb='did_set_langmap'\n-    },\n-    {\n-      full_name='langmenu', abbreviation='lm',\n-      short_desc=N_(\"language to be used for the menus\"),\n-      type='string', scope={'global'},\n-      normal_fname_chars=true,\n-      varname='p_lm',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='langnoremap', abbreviation='lnr',\n-      short_desc=N_(\"do not apply 'langmap' to mapped characters\"),\n-      type='bool', scope={'global'},\n-      varname='p_lnr',\n-      defaults={if_true=true},\n-      cb='did_set_langnoremap'\n-    },\n-    {\n-      full_name='langremap', abbreviation='lrm',\n-      short_desc=N_('No description'),\n-      type='bool', scope={'global'},\n-      varname='p_lrm',\n-      defaults={if_true=false},\n-      cb='did_set_langremap'\n-    },\n-    {\n-      full_name='laststatus', abbreviation='ls',\n-      short_desc=N_(\"tells when last window has status lines\"),\n-      type='number', scope={'global'},\n-      redraw={'all_windows'},\n-      varname='p_ls',\n-      defaults={if_true=2},\n-      cb='did_set_laststatus'\n-    },\n-    {\n-      full_name='lazyredraw', abbreviation='lz',\n-      short_desc=N_(\"don't redraw while executing macros\"),\n-      type='bool', scope={'global'},\n-      varname='p_lz',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='linebreak', abbreviation='lbr',\n-      short_desc=N_(\"wrap long lines at a blank\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='lines',\n-      short_desc=N_(\"of lines in the display\"),\n-      type='number', scope={'global'},\n-      no_mkrc=true,\n-      varname='p_lines',\n-      defaults={if_true=macros('DFLT_ROWS')}\n-    },\n-    {\n-      full_name='linespace', abbreviation='lsp',\n-      short_desc=N_(\"number of pixel lines to use between characters\"),\n-      type='number', scope={'global'},\n-      redraw={'ui_option'},\n-      varname='p_linespace',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='lisp',\n-      short_desc=N_(\"indenting for Lisp\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_lisp',\n-      defaults={if_true=false},\n-      cb='did_set_lisp'\n-    },\n-    {\n-      full_name='lispoptions', abbreviation='lop',\n-      short_desc=N_(\"options for lisp indenting\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      varname='p_lop', pv_name='p_lop',\n-      defaults={if_true=''},\n-      cb='did_set_lispoptions'\n-    },\n-    {\n-      full_name='lispwords', abbreviation='lw',\n-      short_desc=N_(\"words that change how lisp indenting works\"),\n-      type='string', list='onecomma', scope={'global', 'buffer'},\n-      deny_duplicates=true,\n-      varname='p_lispwords', pv_name='p_lw',\n-      defaults={if_true=macros('LISPWORD_VALUE')}\n-    },\n-    {\n-      full_name='list',\n-      short_desc=N_(\"<Tab> and <EOL>\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='listchars', abbreviation='lcs',\n-      short_desc=N_(\"characters for displaying in list mode\"),\n-      type='string', list='onecomma', scope={'global', 'window'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      redraw={'current_window'},\n-      varname='p_lcs',\n-      defaults={if_true=\"tab:> ,trail:-,nbsp:+\"},\n-      cb='did_set_chars_option'\n-    },\n-    {\n-      full_name='loadplugins', abbreviation='lpl',\n-      short_desc=N_(\"load plugin scripts when starting up\"),\n-      type='bool', scope={'global'},\n-      varname='p_lpl',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='magic',\n-      short_desc=N_(\"special characters in search patterns\"),\n-      type='bool', scope={'global'},\n-      varname='p_magic',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='makeef', abbreviation='mef',\n-      short_desc=N_(\"name of the errorfile for \\\":make\\\"\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      expand=true,\n-      varname='p_mef',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='makeencoding', abbreviation='menc',\n-      short_desc=N_(\"Converts the output of external commands\"),\n-      type='string', scope={'global', 'buffer'},\n-      varname='p_menc',\n-      defaults={if_true=\"\"},\n-      cb='did_set_encoding'\n-    },\n-    {\n-      full_name='makeprg', abbreviation='mp',\n-      short_desc=N_(\"program to use for the \\\":make\\\" command\"),\n-      type='string', scope={'global', 'buffer'},\n-      secure=true,\n-      expand=true,\n-      varname='p_mp',\n-      defaults={if_true=\"make\"}\n-    },\n-    {\n-      full_name='matchpairs', abbreviation='mps',\n-      short_desc=N_(\"pairs of characters that \\\"%\\\" can match\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_mps',\n-      defaults={if_true=\"(:),{:},[:]\"},\n-      cb='did_set_matchpairs'\n-    },\n-    {\n-      full_name='matchtime', abbreviation='mat',\n-      short_desc=N_(\"tenths of a second to show matching paren\"),\n-      type='number', scope={'global'},\n-      varname='p_mat',\n-      defaults={if_true=5}\n-    },\n-    {\n-      full_name='maxcombine', abbreviation='mco',\n-      short_desc=N_(\"maximum nr of combining characters displayed\"),\n-      type='number', scope={'global'},\n-      varname='p_mco',\n-      defaults={if_true=6}\n-    },\n-    {\n-      full_name='maxfuncdepth', abbreviation='mfd',\n-      short_desc=N_(\"maximum recursive depth for user functions\"),\n-      type='number', scope={'global'},\n-      varname='p_mfd',\n-      defaults={if_true=100}\n-    },\n-    {\n-      full_name='maxmapdepth', abbreviation='mmd',\n-      short_desc=N_(\"maximum recursive depth for mapping\"),\n-      type='number', scope={'global'},\n-      varname='p_mmd',\n-      defaults={if_true=1000}\n-    },\n-    {\n-      full_name='maxmempattern', abbreviation='mmp',\n-      short_desc=N_(\"maximum memory (in Kbyte) used for pattern search\"),\n-      type='number', scope={'global'},\n-      varname='p_mmp',\n-      defaults={if_true=1000}\n-    },\n-    {\n-      full_name='menuitems', abbreviation='mis',\n-      short_desc=N_(\"maximum number of items in a menu\"),\n-      type='number', scope={'global'},\n-      varname='p_mis',\n-      defaults={if_true=25}\n-    },\n-    {\n-      full_name='mkspellmem', abbreviation='msm',\n-      short_desc=N_(\"memory used before |:mkspell| compresses the tree\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      expand=true,\n-      varname='p_msm',\n-      defaults={if_true=\"460000,2000,500\"},\n-      cb='did_set_mkspellmem'\n-    },\n-    {\n-      full_name='modeline', abbreviation='ml',\n-      short_desc=N_(\"recognize modelines at start or end of file\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_ml',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='modelineexpr', abbreviation='mle',\n-      short_desc=N_(\"allow some options to be set in modeline\"),\n-      type='bool', scope={'global'},\n-      secure=true,\n-      varname='p_mle',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='modelines', abbreviation='mls',\n-      short_desc=N_(\"number of lines checked for modelines\"),\n-      type='number', scope={'global'},\n-      varname='p_mls',\n-      defaults={if_true=5}\n-    },\n-    {\n-      full_name='modifiable', abbreviation='ma',\n-      short_desc=N_(\"changes to the text are not possible\"),\n-      type='bool', scope={'buffer'},\n-      noglob=true,\n-      varname='p_ma',\n-      defaults={if_true=true},\n-      cb='did_set_modifiable'\n-    },\n-    {\n-      full_name='modified', abbreviation='mod',\n-      short_desc=N_(\"buffer has been modified\"),\n-      type='bool', scope={'buffer'},\n-      no_mkrc=true,\n-      redraw={'statuslines'},\n-      varname='p_mod',\n-      defaults={if_true=false},\n-      cb='did_set_modified'\n-    },\n-    {\n-      full_name='more',\n-      short_desc=N_(\"listings when the whole screen is filled\"),\n-      type='bool', scope={'global'},\n-      varname='p_more',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='mouse',\n-      short_desc=N_(\"the use of mouse clicks\"),\n-      type='string', list='flags', scope={'global'},\n-      varname='p_mouse',\n-      defaults={if_true=\"nvi\"},\n-      cb='did_set_mouse'\n-    },\n-    {\n-      full_name='mousefocus', abbreviation='mousef',\n-      short_desc=N_(\"keyboard focus follows the mouse\"),\n-      type='bool', scope={'global'},\n-      redraw={'ui_option'},\n-      varname='p_mousef',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='mousehide', abbreviation='mh',\n-      short_desc=N_(\"hide mouse pointer while typing\"),\n-      type='bool', scope={'global'},\n-      enable_if=false,\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='mousemodel', abbreviation='mousem',\n-      short_desc=N_(\"changes meaning of mouse buttons\"),\n-      type='string', scope={'global'},\n-      varname='p_mousem',\n-      defaults={if_true=\"popup_setpos\"},\n-      cb='did_set_mousemodel'\n-    },\n-    {\n-      full_name='mousemoveevent', abbreviation='mousemev',\n-      short_desc=N_(\"deliver mouse move events to input queue\"),\n-      type='bool', scope={'global'},\n-      redraw={'ui_option'},\n-      varname='p_mousemev',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='mousescroll',\n-      short_desc=N_(\"amount to scroll by when scrolling with a mouse\"),\n-      type='string', list='comma', scope={'global'},\n-      vi_def=true,\n-      varname='p_mousescroll',\n-      defaults={if_true=\"ver:3,hor:6\"},\n-      cb='did_set_mousescroll'\n-    },\n-    {\n-      full_name='mouseshape', abbreviation='mouses',\n-      short_desc=N_(\"shape of the mouse pointer in different modes\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      enable_if=false,\n-    },\n-    {\n-      full_name='mousetime', abbreviation='mouset',\n-      short_desc=N_(\"max time between mouse double-click\"),\n-      type='number', scope={'global'},\n-      varname='p_mouset',\n-      defaults={if_true=500}\n-    },\n-    {\n-      full_name='nrformats', abbreviation='nf',\n-      short_desc=N_(\"number formats recognized for CTRL-A command\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_nf',\n-      defaults={if_true=\"bin,hex\"},\n-      cb='did_set_nrformats'\n-    },\n-    {\n-      full_name='number', abbreviation='nu',\n-      short_desc=N_(\"print the line number in front of each line\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=false},\n-      cb='did_set_number_relativenumber'\n-    },\n-    {\n-      full_name='numberwidth', abbreviation='nuw',\n-      short_desc=N_(\"number of columns used for the line number\"),\n-      type='number', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=4},\n-      cb='did_set_numberwidth'\n-    },\n-    {\n-      full_name='omnifunc', abbreviation='ofu',\n-      short_desc=N_(\"function for filetype-specific completion\"),\n-      type='string', scope={'buffer'},\n-      secure=true,\n-      alloced=true,\n-      func=true,\n-      varname='p_ofu',\n-      defaults={if_true=\"\"},\n-      cb='did_set_omnifunc'\n-    },\n-    {\n-      full_name='opendevice', abbreviation='odev',\n-      short_desc=N_(\"allow reading/writing devices on MS-Windows\"),\n-      type='bool', scope={'global'},\n-      enable_if=false,\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='operatorfunc', abbreviation='opfunc',\n-      short_desc=N_(\"function to be called for |g@| operator\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      func=true,\n-      varname='p_opfunc',\n-      defaults={if_true=\"\"},\n-      cb='did_set_operatorfunc'\n-    },\n-    {\n-      full_name='packpath', abbreviation='pp',\n-      short_desc=N_(\"list of directories used for packages\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      secure=true,\n-      expand=true,\n-      varname='p_pp',\n-      defaults={if_true=''},\n-      cb='did_set_runtimepackpath'\n-    },\n-    {\n-      full_name='paragraphs', abbreviation='para',\n-      short_desc=N_(\"nroff macros that separate paragraphs\"),\n-      type='string', scope={'global'},\n-      varname='p_para',\n-      defaults={if_true=\"IPLPPPQPP TPHPLIPpLpItpplpipbp\"}\n-    },\n-    {\n-      full_name='paste',\n-      short_desc=N_(\"pasting text\"),\n-      type='bool', scope={'global'},\n-      pri_mkrc=true,\n-      varname='p_paste',\n-      defaults={if_true=false},\n-      cb='did_set_paste'\n-    },\n-    {\n-      full_name='pastetoggle', abbreviation='pt',\n-      short_desc=N_(\"No description\"),\n-      type='string', scope={'global'},\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='patchexpr', abbreviation='pex',\n-      short_desc=N_(\"expression used to patch a file\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      varname='p_pex',\n-      defaults={if_true=\"\"},\n-      cb='did_set_optexpr'\n-    },\n-    {\n-      full_name='patchmode', abbreviation='pm',\n-      short_desc=N_(\"keep the oldest version of a file\"),\n-      type='string', scope={'global'},\n-      normal_fname_chars=true,\n-      varname='p_pm',\n-      defaults={if_true=\"\"},\n-      cb='did_set_backupext_or_patchmode'\n-    },\n-    {\n-      full_name='path', abbreviation='pa',\n-      short_desc=N_(\"list of directories searched with \\\"gf\\\" et.al.\"),\n-      type='string', list='comma', scope={'global', 'buffer'},\n-      deny_duplicates=true,\n-      expand=true,\n-      varname='p_path',\n-      defaults={if_true=\".,,\"}\n-    },\n-    {\n-      full_name='preserveindent', abbreviation='pi',\n-      short_desc=N_(\"preserve the indent structure when reindenting\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_pi',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='previewheight', abbreviation='pvh',\n-      short_desc=N_(\"height of the preview window\"),\n-      type='number', scope={'global'},\n-      varname='p_pvh',\n-      defaults={if_true=12}\n-    },\n-    {\n-      full_name='previewwindow', abbreviation='pvw',\n-      short_desc=N_(\"identifies the preview window\"),\n-      type='bool', scope={'window'},\n-      noglob=true,\n-      redraw={'statuslines'},\n-      defaults={if_true=false},\n-      cb='did_set_previewwindow'\n-    },\n-    {\n-      full_name='prompt',\n-      short_desc=N_(\"enable prompt in Ex mode\"),\n-      type='bool', scope={'global'},\n-      varname='p_force_on',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='pumblend', abbreviation='pb',\n-      short_desc=N_(\"Controls transparency level of popup menu\"),\n-      type='number', scope={'global'},\n-      redraw={'ui_option'},\n-      varname='p_pb',\n-      defaults={if_true=0},\n-      cb='did_set_pumblend'\n-    },\n-    {\n-      full_name='pumheight', abbreviation='ph',\n-      short_desc=N_(\"maximum height of the popup menu\"),\n-      type='number', scope={'global'},\n-      varname='p_ph',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='pumwidth', abbreviation='pw',\n-      short_desc=N_(\"minimum width of the popup menu\"),\n-      type='number', scope={'global'},\n-      varname='p_pw',\n-      defaults={if_true=15}\n-    },\n-    {\n-      full_name='pyxversion', abbreviation='pyx',\n-      short_desc=N_(\"selects default python version to use\"),\n-      type='number', scope={'global'},\n-      secure=true,\n-      varname='p_pyx',\n-      defaults={if_true=3}\n-    },\n-    {\n-      full_name='quickfixtextfunc', abbreviation='qftf',\n-      short_desc=N_(\"customize the quickfix window\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      func=true,\n-      varname='p_qftf',\n-      defaults={if_true=\"\"},\n-      cb='did_set_quickfixtextfunc'\n-    },\n-    {\n-      full_name='quoteescape', abbreviation='qe',\n-      short_desc=N_(\"escape characters used in a string\"),\n-      type='string', scope={'buffer'},\n-      alloced=true,\n-      varname='p_qe',\n-      defaults={if_true=\"\\\\\"}\n-    },\n-    {\n-      full_name='readonly', abbreviation='ro',\n-      short_desc=N_(\"disallow writing the buffer\"),\n-      type='bool', scope={'buffer'},\n-      noglob=true,\n-      redraw={'statuslines'},\n-      varname='p_ro',\n-      defaults={if_true=false},\n-      cb='did_set_readonly'\n-    },\n-    {\n-      full_name='redrawdebug', abbreviation='rdb',\n-      short_desc=N_(\"Changes the way redrawing works (debug)\"),\n-      type='string', list='onecomma', scope={'global'},\n-      varname='p_rdb',\n-      defaults={if_true=''},\n-      cb='did_set_redrawdebug'\n-    },\n-    {\n-      full_name='redrawtime', abbreviation='rdt',\n-      short_desc=N_(\"timeout for 'hlsearch' and |:match| highlighting\"),\n-      type='number', scope={'global'},\n-      varname='p_rdt',\n-      defaults={if_true=2000}\n-    },\n-    {\n-      full_name='regexpengine', abbreviation='re',\n-      short_desc=N_(\"default regexp engine to use\"),\n-      type='number', scope={'global'},\n-      varname='p_re',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='relativenumber', abbreviation='rnu',\n-      short_desc=N_(\"show relative line number in front of each line\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=false},\n-      cb='did_set_number_relativenumber'\n-    },\n-    {\n-      full_name='remap',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      varname='p_force_on',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='report',\n-      short_desc=N_(\"for reporting nr. of lines changed\"),\n-      type='number', scope={'global'},\n-      varname='p_report',\n-      defaults={if_true=2}\n-    },\n-    {\n-      full_name='revins', abbreviation='ri',\n-      short_desc=N_(\"inserting characters will work backwards\"),\n-      type='bool', scope={'global'},\n-      varname='p_ri',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='rightleft', abbreviation='rl',\n-      short_desc=N_(\"window is right-to-left oriented\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='rightleftcmd', abbreviation='rlc',\n-      short_desc=N_(\"commands for which editing works right-to-left\"),\n-      type='string', scope={'window'},\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"search\"},\n-      cb='did_set_rightleftcmd'\n-    },\n-    {\n-      full_name='ruler', abbreviation='ru',\n-      short_desc=N_(\"show cursor line and column in the status line\"),\n-      type='bool', scope={'global'},\n-      redraw={'statuslines'},\n-      varname='p_ru',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='rulerformat', abbreviation='ruf',\n-      short_desc=N_(\"custom format for the ruler\"),\n-      type='string', scope={'global'},\n-      alloced=true,\n-      modelineexpr=true,\n-      redraw={'statuslines'},\n-      varname='p_ruf',\n-      defaults={if_true=\"\"},\n-      cb='did_set_rulerformat'\n-    },\n-    {\n-      full_name='runtimepath', abbreviation='rtp',\n-      short_desc=N_(\"list of directories used for runtime files\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      secure=true,\n-      expand='nodefault',\n-      varname='p_rtp',\n-      defaults={if_true=''},\n-      cb='did_set_runtimepackpath'\n-    },\n-    {\n-      full_name='scroll', abbreviation='scr',\n-      short_desc=N_(\"lines to scroll with CTRL-U and CTRL-D\"),\n-      type='number', scope={'window'},\n-      no_mkrc=true,\n-      pv_name='p_scroll',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='smoothscroll', abbreviation='sms',\n-      short_desc=N_(\"scroll by screen lines when 'wrap' is set\"),\n-      type='bool', scope={'window'},\n-      pv_name='p_sms',\n-      redraw={'current_window'},\n-      defaults={if_true=0},\n-      cb='did_set_smoothscroll'\n-    },\n-    {\n-      full_name='scrollback', abbreviation='scbk',\n-      short_desc=N_(\"lines to scroll with CTRL-U and CTRL-D\"),\n-      type='number', scope={'buffer'},\n-      varname='p_scbk',\n-      redraw={'current_buffer'},\n-      defaults={if_true=-1},\n-      cb='did_set_scrollback'\n-    },\n-    {\n-      full_name='scrollbind', abbreviation='scb',\n-      short_desc=N_(\"scroll in window as other windows scroll\"),\n-      type='bool', scope={'window'},\n-      pv_name='p_scbind',\n-      defaults={if_true=false},\n-      cb='did_set_scrollbind'\n-    },\n-    {\n-      full_name='scrolljump', abbreviation='sj',\n-      short_desc=N_(\"minimum number of lines to scroll\"),\n-      type='number', scope={'global'},\n-      varname='p_sj',\n-      defaults={if_true=1}\n-    },\n-    {\n-      full_name='scrolloff', abbreviation='so',\n-      short_desc=N_(\"minimum nr. of lines above and below cursor\"),\n-      type='number', scope={'global', 'window'},\n-      varname='p_so',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='scrollopt', abbreviation='sbo',\n-      short_desc=N_(\"how 'scrollbind' should behave\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_sbo',\n-      defaults={if_true=\"ver,jump\"},\n-      cb='did_set_scrollopt'\n-    },\n-    {\n-      full_name='sections', abbreviation='sect',\n-      short_desc=N_(\"nroff macros that separate sections\"),\n-      type='string', scope={'global'},\n-      varname='p_sections',\n-      defaults={if_true=\"SHNHH HUnhsh\"}\n-    },\n-    {\n-      full_name='secure',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      secure=true,\n-      varname='p_secure',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='selection', abbreviation='sel',\n-      short_desc=N_(\"what type of selection to use\"),\n-      type='string', scope={'global'},\n-      varname='p_sel',\n-      defaults={if_true=\"inclusive\"},\n-      cb='did_set_selection'\n-    },\n-    {\n-      full_name='selectmode', abbreviation='slm',\n-      short_desc=N_(\"when to use Select mode instead of Visual mode\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_slm',\n-      defaults={if_true=\"\"},\n-      cb='did_set_selectmode'\n-    },\n-    {\n-      full_name='sessionoptions', abbreviation='ssop',\n-      short_desc=N_(\"options for |:mksession|\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_ssop',\n-      defaults={if_true=\"blank,buffers,curdir,folds,help,tabpages,winsize,terminal\"},\n-      cb='did_set_sessionoptions',\n-    },\n-    {\n-      full_name='shada', abbreviation='sd',\n-      short_desc=N_(\"use .shada file upon startup and exiting\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      secure=true,\n-      varname='p_shada',\n-      defaults={if_true=\"!,'100,<50,s10,h\"}\n-    },\n-    {\n-      full_name='shadafile', abbreviation='sdf',\n-      short_desc=N_(\"overrides the filename used for shada\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      secure=true,\n-      expand=true,\n-      varname='p_shadafile',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='shell', abbreviation='sh',\n-      short_desc=N_(\"name of shell to use for external commands\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      expand=true,\n-      varname='p_sh',\n-      defaults={\n-        condition='MSWIN',\n-        if_true=\"cmd.exe\",\n-        if_false=\"sh\"\n-      }\n-    },\n-    {\n-      full_name='shellcmdflag', abbreviation='shcf',\n-      short_desc=N_(\"flag to shell to execute one command\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      varname='p_shcf',\n-      defaults={\n-        condition='MSWIN',\n-        if_true=\"/s /c\",\n-        if_false=\"-c\"\n-      }\n-    },\n-    {\n-      full_name='shellpipe', abbreviation='sp',\n-      short_desc=N_(\"string to put output of \\\":make\\\" in error file\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      varname='p_sp',\n-      defaults={\n-        condition='MSWIN',\n-        if_true=\"2>&1| tee\",\n-        if_false=\"| tee\",\n-      }\n-    },\n-    {\n-      full_name='shellquote', abbreviation='shq',\n-      short_desc=N_(\"quote character(s) for around shell command\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      varname='p_shq',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='shellredir', abbreviation='srr',\n-      short_desc=N_(\"string to put output of filter in a temp file\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      varname='p_srr',\n-      defaults={\n-        condition='MSWIN',\n-        if_true=\">%s 2>&1\",\n-        if_false=\">\"\n-      }\n-    },\n-    {\n-      full_name='shellslash', abbreviation='ssl',\n-      short_desc=N_(\"use forward slash for shell file names\"),\n-      type='bool', scope={'global'},\n-      varname='p_ssl',\n-      enable_if='BACKSLASH_IN_FILENAME',\n-      defaults={if_true=false},\n-      cb='did_set_shellslash'\n-    },\n-    {\n-      full_name='shelltemp', abbreviation='stmp',\n-      short_desc=N_(\"whether to use a temp file for shell commands\"),\n-      type='bool', scope={'global'},\n-      varname='p_stmp',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='shellxquote', abbreviation='sxq',\n-      short_desc=N_(\"like 'shellquote', but include redirection\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      varname='p_sxq',\n-      defaults={\n-        condition='MSWIN',\n-        if_true=\"\\\"\",\n-        if_false=\"\",\n-      }\n-    },\n-    {\n-      full_name='shellxescape', abbreviation='sxe',\n-      short_desc=N_(\"characters to escape when 'shellxquote' is (\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      varname='p_sxe',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='shiftround', abbreviation='sr',\n-      short_desc=N_(\"round indent to multiple of shiftwidth\"),\n-      type='bool', scope={'global'},\n-      varname='p_sr',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='shiftwidth', abbreviation='sw',\n-      short_desc=N_(\"number of spaces to use for (auto)indent step\"),\n-      type='number', scope={'buffer'},\n-      varname='p_sw',\n-      defaults={if_true=8},\n-      cb='did_set_shiftwidth_tabstop'\n-    },\n-    {\n-      full_name='shortmess', abbreviation='shm',\n-      short_desc=N_(\"list of flags, reduce length of messages\"),\n-      type='string', list='flags', scope={'global'},\n-      varname='p_shm',\n-      defaults={if_true=\"filnxtToOCF\"},\n-      cb='did_set_shortmess'\n-    },\n-    {\n-      full_name='showbreak', abbreviation='sbr',\n-      short_desc=N_(\"string to use at the start of wrapped lines\"),\n-      type='string', scope={'global', 'window'},\n-      redraw={'all_windows'},\n-      varname='p_sbr',\n-      defaults={if_true=\"\"},\n-      cb='did_set_showbreak'\n-    },\n-    {\n-      full_name='showcmd', abbreviation='sc',\n-      short_desc=N_(\"show (partial) command in status line\"),\n-      type='bool', scope={'global'},\n-      varname='p_sc',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='showcmdloc', abbreviation='sloc',\n-      short_desc=N_(\"change location of partial command\"),\n-      type='string', scope={'global'},\n-      varname='p_sloc',\n-      defaults={if_true=\"last\"},\n-      cb='did_set_showcmdloc'\n-    },\n-    {\n-      full_name='showfulltag', abbreviation='sft',\n-      short_desc=N_(\"show full tag pattern when completing tag\"),\n-      type='bool', scope={'global'},\n-      varname='p_sft',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='showmatch', abbreviation='sm',\n-      short_desc=N_(\"briefly jump to matching bracket if insert one\"),\n-      type='bool', scope={'global'},\n-      varname='p_sm',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='showmode', abbreviation='smd',\n-      short_desc=N_(\"message on status line to show current mode\"),\n-      type='bool', scope={'global'},\n-      varname='p_smd',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='showtabline', abbreviation='stal',\n-      short_desc=N_(\"tells when the tab pages line is displayed\"),\n-      type='number', scope={'global'},\n-      redraw={'all_windows', 'ui_option'},\n-      varname='p_stal',\n-      defaults={if_true=1},\n-      cb='did_set_showtabline'\n-    },\n-    {\n-      full_name='sidescroll', abbreviation='ss',\n-      short_desc=N_(\"minimum number of columns to scroll horizontal\"),\n-      type='number', scope={'global'},\n-      varname='p_ss',\n-      defaults={if_true=1}\n-    },\n-    {\n-      full_name='sidescrolloff', abbreviation='siso',\n-      short_desc=N_(\"min. nr. of columns to left and right of cursor\"),\n-      type='number', scope={'global', 'window'},\n-      varname='p_siso',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='signcolumn', abbreviation='scl',\n-      short_desc=N_(\"when to display the sign column\"),\n-      type='string', scope={'window'},\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"auto\"},\n-      cb='did_set_signcolumn'\n-    },\n-    {\n-      full_name='smartcase', abbreviation='scs',\n-      short_desc=N_(\"no ignore case when pattern has uppercase\"),\n-      type='bool', scope={'global'},\n-      varname='p_scs',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='smartindent', abbreviation='si',\n-      short_desc=N_(\"smart autoindenting for C programs\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_si',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='smarttab', abbreviation='sta',\n-      short_desc=N_(\"use 'shiftwidth' when inserting <Tab>\"),\n-      type='bool', scope={'global'},\n-      varname='p_sta',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='softtabstop', abbreviation='sts',\n-      short_desc=N_(\"number of spaces that <Tab> uses while editing\"),\n-      type='number', scope={'buffer'},\n-      varname='p_sts',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='spell',\n-      short_desc=N_(\"spell checking\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=false},\n-      cb='did_set_spell'\n-    },\n-    {\n-      full_name='spellcapcheck', abbreviation='spc',\n-      short_desc=N_(\"pattern to locate end of a sentence\"),\n-      type='string', scope={'buffer'},\n-      alloced=true,\n-      redraw={'current_buffer'},\n-      varname='p_spc',\n-      defaults={if_true=\"[.?!]\\\\_[\\\\])'\\\"\t ]\\\\+\"},\n-      cb='did_set_spellcapcheck'\n-    },\n-    {\n-      full_name='spellfile', abbreviation='spf',\n-      short_desc=N_(\"files where |zg| and |zw| store words\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      secure=true,\n-      alloced=true,\n-      expand=true,\n-      varname='p_spf',\n-      defaults={if_true=\"\"},\n-      cb='did_set_spellfile'\n-    },\n-    {\n-      full_name='spelllang', abbreviation='spl',\n-      short_desc=N_(\"language(s) to do spell checking for\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      expand=true,\n-      redraw={'current_buffer'},\n-      varname='p_spl',\n-      defaults={if_true=\"en\"},\n-      cb='did_set_spelllang'\n-    },\n-    {\n-      full_name='spellsuggest', abbreviation='sps',\n-      short_desc=N_(\"method(s) used to suggest spelling corrections\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      secure=true,\n-      expand=true,\n-      varname='p_sps',\n-      defaults={if_true=\"best\"},\n-      cb='did_set_spellsuggest'\n-    },\n-    {\n-      full_name='spelloptions', abbreviation='spo',\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      secure=true,\n-      expand=true,\n-      varname='p_spo',\n-      redraw={'current_buffer'},\n-      defaults={if_true=\"\"},\n-      cb='did_set_spelloptions'\n-    },\n-    {\n-      full_name='splitbelow', abbreviation='sb',\n-      short_desc=N_(\"new window from split is below the current one\"),\n-      type='bool', scope={'global'},\n-      varname='p_sb',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='splitkeep', abbreviation='spk',\n-      short_desc=N_(\"determines scroll behavior for split windows\"),\n-      type='string', scope={'global'},\n-      varname='p_spk',\n-      defaults={if_true='cursor'},\n-      cb='did_set_splitkeep'\n-    },\n-    {\n-      full_name='splitright', abbreviation='spr',\n-      short_desc=N_(\"new window is put right of the current one\"),\n-      type='bool', scope={'global'},\n-      varname='p_spr',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='startofline', abbreviation='sol',\n-      short_desc=N_(\"commands move cursor to first non-blank in line\"),\n-      type='bool', scope={'global'},\n-      vim=false,\n-      varname='p_sol',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='statuscolumn', abbreviation='stc',\n-      short_desc=N_(\"custom format for the status column\"),\n-      type='string', scope={'window'},\n-      redraw={'current_window'},\n-      secure=true,\n-      alloced=true,\n-      defaults={if_true=\"\"},\n-      cb='did_set_statuscolumn'\n-    },\n-    {\n-      full_name='statusline', abbreviation='stl',\n-      short_desc=N_(\"custom format for the status line\"),\n-      type='string', scope={'global', 'window'},\n-      alloced=true,\n-      modelineexpr=true,\n-      redraw={'statuslines'},\n-      varname='p_stl',\n-      defaults={if_true=\"\"},\n-      cb='did_set_statusline'\n-    },\n-    {\n-      full_name='suffixes', abbreviation='su',\n-      short_desc=N_(\"suffixes that are ignored with multiple match\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_su',\n-      defaults={if_true=\".bak,~,.o,.h,.info,.swp,.obj\"}\n-    },\n-    {\n-      full_name='suffixesadd', abbreviation='sua',\n-      short_desc=N_(\"suffixes added when searching for a file\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_sua',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='swapfile', abbreviation='swf',\n-      short_desc=N_(\"whether to use a swapfile for a buffer\"),\n-      type='bool', scope={'buffer'},\n-      redraw={'statuslines'},\n-      varname='p_swf',\n-      defaults={if_true=true},\n-      cb='did_set_swapfile'\n-    },\n-    {\n-      full_name='switchbuf', abbreviation='swb',\n-      short_desc=N_(\"sets behavior when switching to another buffer\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_swb',\n-      defaults={if_true=\"uselast\"},\n-      cb='did_set_switchbuf'\n-    },\n-    {\n-      full_name='synmaxcol', abbreviation='smc',\n-      short_desc=N_(\"maximum column to find syntax items\"),\n-      type='number', scope={'buffer'},\n-      redraw={'current_buffer'},\n-      varname='p_smc',\n-      defaults={if_true=3000}\n-    },\n-    {\n-      full_name='syntax', abbreviation='syn',\n-      short_desc=N_(\"syntax to be loaded for current buffer\"),\n-      type='string', scope={'buffer'},\n-      noglob=true,\n-      normal_fname_chars=true,\n-      alloced=true,\n-      varname='p_syn',\n-      defaults={if_true=\"\"},\n-      cb='did_set_filetype_or_syntax'\n-    },\n-    {\n-      full_name='tagfunc', abbreviation='tfu',\n-      short_desc=N_(\"function used to perform tag searches\"),\n-      type='string', scope={'buffer'},\n-      secure=true,\n-      func=true,\n-      varname='p_tfu',\n-      defaults={if_true=\"\"},\n-      cb='did_set_tagfunc'\n-    },\n-    {\n-      full_name='tabline', abbreviation='tal',\n-      short_desc=N_(\"custom format for the console tab pages line\"),\n-      type='string', scope={'global'},\n-      modelineexpr=true,\n-      redraw={'tabline'},\n-      varname='p_tal',\n-      defaults={if_true=\"\"},\n-      cb='did_set_tabline'\n-    },\n-    {\n-      full_name='tabpagemax', abbreviation='tpm',\n-      short_desc=N_(\"maximum number of tab pages for |-p| and \\\"tab all\\\"\"),\n-      type='number', scope={'global'},\n-      varname='p_tpm',\n-      defaults={if_true=50}\n-    },\n-    {\n-      full_name='tabstop', abbreviation='ts',\n-      short_desc=N_(\"number of spaces that <Tab> in file uses\"),\n-      type='number', scope={'buffer'},\n-      redraw={'current_buffer'},\n-      varname='p_ts',\n-      defaults={if_true=8},\n-      cb='did_set_shiftwidth_tabstop'\n-    },\n-    {\n-      full_name='tagbsearch', abbreviation='tbs',\n-      short_desc=N_(\"use binary searching in tags files\"),\n-      type='bool', scope={'global'},\n-      varname='p_tbs',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='tagcase', abbreviation='tc',\n-      short_desc=N_(\"how to handle case when searching in tags files\"),\n-      type='string', scope={'global', 'buffer'},\n-      varname='p_tc',\n-      defaults={if_true=\"followic\"},\n-      cb='did_set_tagcase'\n-    },\n-    {\n-      full_name='taglength', abbreviation='tl',\n-      short_desc=N_(\"number of significant characters for a tag\"),\n-      type='number', scope={'global'},\n-      varname='p_tl',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='tagrelative', abbreviation='tr',\n-      short_desc=N_(\"file names in tag file are relative\"),\n-      type='bool', scope={'global'},\n-      varname='p_tr',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='tags', abbreviation='tag',\n-      short_desc=N_(\"list of file names used by the tag command\"),\n-      type='string', list='onecomma', scope={'global', 'buffer'},\n-      deny_duplicates=true,\n-      expand=true,\n-      varname='p_tags',\n-      defaults={if_true=\"./tags;,tags\"}\n-    },\n-    {\n-      full_name='tagstack', abbreviation='tgst',\n-      short_desc=N_(\"push tags onto the tag stack\"),\n-      type='bool', scope={'global'},\n-      varname='p_tgst',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='termbidi', abbreviation='tbidi',\n-      short_desc=N_(\"terminal takes care of bi-directionality\"),\n-      type='bool', scope={'global'},\n-      varname='p_tbidi',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='termencoding', abbreviation='tenc',\n-      short_desc=N_(\"Terminal encoding\"),\n-      type='string', scope={'global'},\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='termguicolors', abbreviation='tgc',\n-      short_desc=N_(\"Terminal true color support\"),\n-      type='bool', scope={'global'},\n-      redraw={'ui_option'},\n-      varname='p_tgc',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='termpastefilter', abbreviation='tpf',\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_tpf',\n-      defaults={if_true=\"BS,HT,ESC,DEL\"},\n-      cb='did_set_termpastefilter'\n-    },\n-    {\n-      full_name='terse',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      varname='p_force_off',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='textwidth', abbreviation='tw',\n-      short_desc=N_(\"maximum width of text that is being inserted\"),\n-      type='number', scope={'buffer'},\n-      redraw={'current_buffer'},\n-      varname='p_tw',\n-      defaults={if_true=0},\n-      cb='did_set_textwidth'\n-    },\n-    {\n-      full_name='thesaurus', abbreviation='tsr',\n-      short_desc=N_(\"list of thesaurus files for keyword completion\"),\n-      type='string', list='onecomma', scope={'global', 'buffer'},\n-      deny_duplicates=true,\n-      normal_dname_chars=true,\n-      expand=true,\n-      varname='p_tsr',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='thesaurusfunc', abbreviation='tsrfu',\n-      short_desc=N_(\"function used for thesaurus completion\"),\n-      type='string', scope={'global', 'buffer'},\n-      secure=true,\n-      alloced=true,\n-      func=true,\n-      varname='p_tsrfu',\n-      defaults={if_true=\"\"},\n-      cb='did_set_thesaurusfunc'\n-    },\n-    {\n-      full_name='tildeop', abbreviation='top',\n-      short_desc=N_(\"tilde command \\\"~\\\" behaves like an operator\"),\n-      type='bool', scope={'global'},\n-      varname='p_to',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='timeout', abbreviation='to',\n-      short_desc=N_(\"time out on mappings and key codes\"),\n-      type='bool', scope={'global'},\n-      varname='p_timeout',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='timeoutlen', abbreviation='tm',\n-      short_desc=N_(\"time out time in milliseconds\"),\n-      type='number', scope={'global'},\n-      varname='p_tm',\n-      defaults={if_true=1000}\n-    },\n-    {\n-      full_name='title',\n-      short_desc=N_(\"Vim set the title of the window\"),\n-      type='bool', scope={'global'},\n-      varname='p_title',\n-      defaults={if_true=false},\n-      cb='did_set_title_icon'\n-    },\n-    {\n-      full_name='titlelen',\n-      short_desc=N_(\"of 'columns' used for window title\"),\n-      type='number', scope={'global'},\n-      varname='p_titlelen',\n-      defaults={if_true=85},\n-      cb='did_set_titlelen'\n-    },\n-    {\n-      full_name='titleold',\n-      short_desc=N_(\"title, restored when exiting\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      no_mkrc=true,\n-      varname='p_titleold',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='titlestring',\n-      short_desc=N_(\"to use for the Vim window title\"),\n-      type='string', scope={'global'},\n-      modelineexpr=true,\n-      varname='p_titlestring',\n-      defaults={if_true=\"\"},\n-      cb='did_set_titlestring'\n-    },\n-    {\n-      full_name='ttimeout',\n-      short_desc=N_(\"out on mappings\"),\n-      type='bool', scope={'global'},\n-      redraw={'ui_option'},\n-      varname='p_ttimeout',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='ttimeoutlen', abbreviation='ttm',\n-      short_desc=N_(\"time out time for key codes in milliseconds\"),\n-      type='number', scope={'global'},\n-      redraw={'ui_option'},\n-      varname='p_ttm',\n-      defaults={if_true=50}\n-    },\n-    {\n-      full_name='ttyfast', abbreviation='tf',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      no_mkrc=true,\n-      varname='p_force_on',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='undodir', abbreviation='udir',\n-      short_desc=N_(\"where to store undo files\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      secure=true,\n-      expand='nodefault',\n-      varname='p_udir',\n-      defaults={if_true=''}\n-    },\n-    {\n-      full_name='undofile', abbreviation='udf',\n-      short_desc=N_(\"save undo information in a file\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_udf',\n-      defaults={if_true=false},\n-      cb='did_set_undofile'\n-    },\n-    {\n-      full_name='undolevels', abbreviation='ul',\n-      short_desc=N_(\"maximum number of changes that can be undone\"),\n-      type='number', scope={'global', 'buffer'},\n-      varname='p_ul',\n-      defaults={if_true=1000},\n-      cb='did_set_undolevels'\n-    },\n-    {\n-      full_name='undoreload', abbreviation='ur',\n-      short_desc=N_(\"max nr of lines to save for undo on a buffer reload\"),\n-      type='number', scope={'global'},\n-      varname='p_ur',\n-      defaults={if_true=10000}\n-    },\n-    {\n-      full_name='updatecount', abbreviation='uc',\n-      short_desc=N_(\"after this many characters flush swap file\"),\n-      type='number', scope={'global'},\n-      varname='p_uc',\n-      defaults={if_true=200},\n-      cb='did_set_updatecount'\n-    },\n-    {\n-      full_name='updatetime', abbreviation='ut',\n-      short_desc=N_(\"after this many milliseconds flush swap file\"),\n-      type='number', scope={'global'},\n-      varname='p_ut',\n-      defaults={if_true=4000}\n-    },\n-    {\n-      full_name='varsofttabstop', abbreviation='vsts',\n-      short_desc=N_(\"list of numbers of spaces that <Tab> uses while editing\"),\n-      type='string', list='comma', scope={'buffer'},\n-      varname='p_vsts',\n-      defaults={if_true=\"\"},\n-      cb='did_set_varsofttabstop'\n-    },\n-    {\n-      full_name='vartabstop', abbreviation='vts',\n-      short_desc=N_(\"list of numbers of spaces that <Tab> in file uses\"),\n-      type='string', list='comma', scope={'buffer'},\n-      varname='p_vts',\n-      redraw={'current_buffer'},\n-      defaults={if_true=\"\"},\n-      cb='did_set_vartabstop'\n-    },\n-    {\n-      full_name='verbose', abbreviation='vbs',\n-      short_desc=N_(\"give informative messages\"),\n-      type='number', scope={'global'},\n-      varname='p_verbose', redraw={'ui_option'},\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='verbosefile', abbreviation='vfile',\n-      short_desc=N_(\"file to write messages in\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      expand=true,\n-      varname='p_vfile',\n-      defaults={if_true=\"\"},\n-      cb='did_set_verbosefile'\n-    },\n-    {\n-      full_name='viewdir', abbreviation='vdir',\n-      short_desc=N_(\"directory where to store files with :mkview\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      expand='nodefault',\n-      varname='p_vdir',\n-      defaults={if_true=''}\n-    },\n-    {\n-      full_name='viewoptions', abbreviation='vop',\n-      short_desc=N_(\"specifies what to save for :mkview\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_vop',\n-      defaults={if_true=\"folds,cursor,curdir\"},\n-      cb='did_set_viewoptions'\n-    },\n-    {\n-      -- Alias for \"shada\".\n-      full_name='viminfo', abbreviation='vi',\n-      short_desc=N_(\"Alias for shada\"),\n-      type='string', scope={'global'}, nodefault=true,\n-    },\n-    {\n-      -- Alias for \"shadafile\".\n-      full_name='viminfofile', abbreviation='vif',\n-      short_desc=N_(\"Alias for shadafile instead\"),\n-      type='string', scope={'global'}, nodefault=true,\n-    },\n-    {\n-      full_name='virtualedit', abbreviation='ve',\n-      short_desc=N_(\"when to use virtual editing\"),\n-      type='string', list='onecomma', scope={'global', 'window'},\n-      deny_duplicates=true,\n-      redraw={'curswant'},\n-      varname='p_ve',\n-      defaults={if_true=\"\"},\n-      cb='did_set_virtualedit'\n-    },\n-    {\n-      full_name='visualbell', abbreviation='vb',\n-      short_desc=N_(\"use visual bell instead of beeping\"),\n-      type='bool', scope={'global'},\n-      varname='p_vb',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='warn',\n-      short_desc=N_(\"for shell command when buffer was changed\"),\n-      type='bool', scope={'global'},\n-      varname='p_warn',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='whichwrap', abbreviation='ww',\n-      short_desc=N_(\"allow specified keys to cross line boundaries\"),\n-      type='string', list='flagscomma', scope={'global'},\n-      varname='p_ww',\n-      defaults={if_true=\"b,s\"},\n-      cb='did_set_whichwrap'\n-    },\n-    {\n-      full_name='wildchar', abbreviation='wc',\n-      short_desc=N_(\"command-line character for wildcard expansion\"),\n-      type='number', scope={'global'},\n-      varname='p_wc',\n-      defaults={if_true=imacros('TAB')}\n-    },\n-    {\n-      full_name='wildcharm', abbreviation='wcm',\n-      short_desc=N_(\"like 'wildchar' but also works when mapped\"),\n-      type='number', scope={'global'},\n-      varname='p_wcm',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='wildignore', abbreviation='wig',\n-      short_desc=N_(\"files matching these patterns are not completed\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_wig',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='wildignorecase', abbreviation='wic',\n-      short_desc=N_(\"ignore case when completing file names\"),\n-      type='bool', scope={'global'},\n-      varname='p_wic',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='wildmenu', abbreviation='wmnu',\n-      short_desc=N_(\"use menu for command line completion\"),\n-      type='bool', scope={'global'},\n-      varname='p_wmnu',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='wildmode', abbreviation='wim',\n-      short_desc=N_(\"mode for 'wildchar' command-line expansion\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=false,\n-      varname='p_wim',\n-      defaults={if_true=\"full\"},\n-      cb='did_set_wildmode'\n-    },\n-    {\n-      full_name='wildoptions', abbreviation='wop',\n-      short_desc=N_(\"specifies how command line completion is done\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_wop',\n-      defaults={if_true='pum,tagfile'},\n-      cb='did_set_wildoptions'\n-    },\n-    {\n-      full_name='winaltkeys', abbreviation='wak',\n-      short_desc=N_(\"when the windows system handles ALT keys\"),\n-      type='string', scope={'global'},\n-      varname='p_wak',\n-      defaults={if_true=\"menu\"},\n-      cb='did_set_winaltkeys'\n-    },\n-    {\n-      full_name='winbar', abbreviation='wbr',\n-      short_desc=N_(\"custom format for the window bar\"),\n-      type='string', scope={'global', 'window'},\n-      alloced=true,\n-      modelineexpr=true,\n-      redraw={'statuslines'},\n-      varname='p_wbr',\n-      defaults={if_true=\"\"},\n-      cb='did_set_winbar'\n-    },\n-    {\n-      full_name='winblend', abbreviation='winbl',\n-      short_desc=N_(\"Controls transparency level for floating windows\"),\n-      type='number', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=0},\n-      cb='did_set_winblend'\n-    },\n-    {\n-      full_name='winhighlight', abbreviation='winhl',\n-      short_desc=N_(\"Setup window-local highlights\");\n-      type='string', list='onecomma', scope={'window'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"\"},\n-      cb='did_set_winhl'\n-    },\n-    {\n-      full_name='window', abbreviation='wi',\n-      short_desc=N_(\"nr of lines to scroll for CTRL-F and CTRL-B\"),\n-      type='number', scope={'global'},\n-      varname='p_window',\n-      defaults={if_true=0},\n-      cb='did_set_window'\n-    },\n-    {\n-      full_name='winheight', abbreviation='wh',\n-      short_desc=N_(\"minimum number of lines for the current window\"),\n-      type='number', scope={'global'},\n-      varname='p_wh',\n-      defaults={if_true=1},\n-      cb='did_set_winheight'\n-    },\n-    {\n-      full_name='winfixheight', abbreviation='wfh',\n-      short_desc=N_(\"keep window height when opening/closing windows\"),\n-      type='bool', scope={'window'},\n-      redraw={'statuslines'},\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='winfixwidth', abbreviation='wfw',\n-      short_desc=N_(\"keep window width when opening/closing windows\"),\n-      type='bool', scope={'window'},\n-      redraw={'statuslines'},\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='winminheight', abbreviation='wmh',\n-      short_desc=N_(\"minimum number of lines for any window\"),\n-      type='number', scope={'global'},\n-      varname='p_wmh',\n-      defaults={if_true=1},\n-      cb='did_set_winminheight'\n-    },\n-    {\n-      full_name='winminwidth', abbreviation='wmw',\n-      short_desc=N_(\"minimal number of columns for any window\"),\n-      type='number', scope={'global'},\n-      varname='p_wmw',\n-      defaults={if_true=1},\n-      cb='did_set_winminwidth'\n-    },\n-    {\n-      full_name='winwidth', abbreviation='wiw',\n-      short_desc=N_(\"minimal number of columns for current window\"),\n-      type='number', scope={'global'},\n-      varname='p_wiw',\n-      defaults={if_true=20},\n-      cb='did_set_winwidth'\n-    },\n-    {\n-      full_name='wrap',\n-      short_desc=N_(\"lines wrap and continue on the next line\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=true},\n-      cb='did_set_wrap'\n-    },\n-    {\n-      full_name='wrapmargin', abbreviation='wm',\n-      short_desc=N_(\"chars from the right where wrapping starts\"),\n-      type='number', scope={'buffer'},\n-      varname='p_wm',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='wrapscan', abbreviation='ws',\n-      short_desc=N_(\"searches wrap around the end of the file\"),\n-      type='bool', scope={'global'},\n-      varname='p_ws',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='write',\n-      short_desc=N_(\"to a file is allowed\"),\n-      type='bool', scope={'global'},\n-      varname='p_write',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='writeany', abbreviation='wa',\n-      short_desc=N_(\"write to file with no need for \\\"!\\\" override\"),\n-      type='bool', scope={'global'},\n-      varname='p_wa',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='writebackup', abbreviation='wb',\n-      short_desc=N_(\"make a backup before overwriting a file\"),\n-      type='bool', scope={'global'},\n-      varname='p_wb',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='writedelay', abbreviation='wd',\n-      short_desc=N_(\"delay this many msec for each char (for debug)\"),\n-      type='number', scope={'global'},\n-      varname='p_wd',\n-      defaults={if_true=0}\n-    },\n-  }\n+      desc = [=[\n+        Which directory to use for the file browser:\n+           last\t\tUse same directory as with last file browser, where a\n+        \t\tfile was opened or saved.\n+           buffer\tUse the directory of the related buffer.\n+           current\tUse the current directory.\n+           {path}\tUse the specified directory\n+      ]=],\n+      enable_if = false,\n+      full_name = 'browsedir',\n+      scope = { 'global' },\n+      short_desc = N_('which directory to start browsing in'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'bh',\n+      alloced = true,\n+      cb = 'did_set_bufhidden',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        This option specifies what happens when a buffer is no longer\n+        displayed in a window:\n+          <empty>\tfollow the global 'hidden' option\n+          hide\t\thide the buffer (don't unload it), even if 'hidden' is\n+        \t\tnot set\n+          unload\tunload the buffer, even if 'hidden' is set; the\n+        \t\t|:hide| command will also unload the buffer\n+          delete\tdelete the buffer from the buffer list, even if\n+        \t\t'hidden' is set; the |:hide| command will also delete\n+        \t\tthe buffer, making it behave like |:bdelete|\n+          wipe\t\twipe the buffer from the buffer list, even if\n+        \t\t'hidden' is set; the |:hide| command will also wipe\n+        \t\tout the buffer, making it behave like |:bwipeout|\n+\n+        CAREFUL: when \"unload\", \"delete\" or \"wipe\" is used changes in a buffer\n+        are lost without a warning.  Also, these values may break autocommands\n+        that switch between buffers temporarily.\n+        This option is used together with 'buftype' and 'swapfile' to specify\n+        special kinds of buffers.   See |special-buffers|.\n+      ]=],\n+      full_name = 'bufhidden',\n+      noglob = true,\n+      scope = { 'buffer' },\n+      short_desc = N_('what to do when buffer is no longer in window'),\n+      type = 'string',\n+      varname = 'p_bh',\n+    },\n+    {\n+      abbreviation = 'bl',\n+      cb = 'did_set_buflisted',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        When this option is set, the buffer shows up in the buffer list.  If\n+        it is reset it is not used for \":bnext\", \"ls\", the Buffers menu, etc.\n+        This option is reset by Vim for buffers that are only used to remember\n+        a file name or marks.  Vim sets it when starting to edit a buffer.\n+        But not when moving to a buffer with \":buffer\".\n+      ]=],\n+      full_name = 'buflisted',\n+      noglob = true,\n+      scope = { 'buffer' },\n+      short_desc = N_('whether the buffer shows up in the buffer list'),\n+      tags = { 'E85' },\n+      type = 'bool',\n+      varname = 'p_bl',\n+    },\n+    {\n+      abbreviation = 'bt',\n+      alloced = true,\n+      cb = 'did_set_buftype',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        The value of this option specifies the type of a buffer:\n+          <empty>\tnormal buffer\n+          acwrite\tbuffer will always be written with |BufWriteCmd|s\n+          help\t\thelp buffer (do not set this manually)\n+          nofile\tbuffer is not related to a file, will not be written\n+          nowrite\tbuffer will not be written\n+          quickfix\tlist of errors |:cwindow| or locations |:lwindow|\n+          terminal\t|terminal-emulator| buffer\n+          prompt\tbuffer where only the last line can be edited, meant\n+        \t\tto be used by a plugin, see |prompt-buffer|\n+\n+        This option is used together with 'bufhidden' and 'swapfile' to\n+        specify special kinds of buffers.   See |special-buffers|.\n+        Also see |win_gettype()|, which returns the type of the window.\n+\n+        Be careful with changing this option, it can have many side effects!\n+        One such effect is that Vim will not check the timestamp of the file,\n+        if the file is changed by another program this will not be noticed.\n+\n+        A \"quickfix\" buffer is only used for the error list and the location\n+        list.  This value is set by the |:cwindow| and |:lwindow| commands and\n+        you are not supposed to change it.\n+\n+        \"nofile\" and \"nowrite\" buffers are similar:\n+        both:\t\tThe buffer is not to be written to disk, \":w\" doesn't\n+        \t\twork (\":w filename\" does work though).\n+        both:\t\tThe buffer is never considered to be |'modified'|.\n+        \t\tThere is no warning when the changes will be lost, for\n+        \t\texample when you quit Vim.\n+        both:\t\tA swap file is only created when using too much memory\n+        \t\t(when 'swapfile' has been reset there is never a swap\n+        \t\tfile).\n+        nofile only:\tThe buffer name is fixed, it is not handled like a\n+        \t\tfile name.  It is not modified in response to a |:cd|\n+        \t\tcommand.\n+        both:\t\tWhen using \":e bufname\" and already editing \"bufname\"\n+        \t\tthe buffer is made empty and autocommands are\n+        \t\ttriggered as usual for |:edit|.\n+        \t\t\t\t\t\t*E676*\n+        \"acwrite\" implies that the buffer name is not related to a file, like\n+        \"nofile\", but it will be written.  Thus, in contrast to \"nofile\" and\n+        \"nowrite\", \":w\" does work and a modified buffer can't be abandoned\n+        without saving.  For writing there must be matching |BufWriteCmd|,\n+        |FileWriteCmd| or |FileAppendCmd| autocommands.\n+      ]=],\n+      full_name = 'buftype',\n+      noglob = true,\n+      scope = { 'buffer' },\n+      tags = { 'E382' },\n+      short_desc = N_('special type of buffer'),\n+      type = 'string',\n+      varname = 'p_bt',\n+    },\n+    {\n+      abbreviation = 'cmp',\n+      cb = 'did_set_casemap',\n+      defaults = { if_true = 'internal,keepascii' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Specifies details about changing the case of letters.  It may contain\n+        these words, separated by a comma:\n+        internal\tUse internal case mapping functions, the current\n+        \t\tlocale does not change the case mapping. When\n+        \t\t\"internal\" is omitted, the towupper() and towlower()\n+        \t\tsystem library functions are used when available.\n+        keepascii\tFor the ASCII characters (0x00 to 0x7f) use the US\n+        \t\tcase mapping, the current locale is not effective.\n+        \t\tThis probably only matters for Turkish.\n+      ]=],\n+      full_name = 'casemap',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('specifies how case of letters is changed'),\n+      type = 'string',\n+      varname = 'p_cmp',\n+    },\n+    {\n+      abbreviation = 'cdh',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        When on, |:cd|, |:tcd| and |:lcd| without an argument changes the\n+        current working directory to the |$HOME| directory like in Unix.\n+        When off, those commands just print the current directory name.\n+        On Unix this option has no effect.\n+      ]=],\n+      full_name = 'cdhome',\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_(':cd without argument goes to the home directory'),\n+      type = 'bool',\n+      varname = 'p_cdh',\n+    },\n+    {\n+      abbreviation = 'cd',\n+      defaults = {\n+        if_true = ',,',\n+        doc = 'equivalent to $CDPATH or \",,\"',\n+      },\n+      deny_duplicates = true,\n+      desc = [=[\n+        This is a list of directories which will be searched when using the\n+        |:cd|, |:tcd| and |:lcd| commands, provided that the directory being\n+        searched for has a relative path, not an absolute part starting with\n+        \"/\", \"./\" or \"../\", the 'cdpath' option is not used then.\n+        The 'cdpath' option's value has the same form and semantics as\n+        |'path'|.  Also see |file-searching|.\n+        The default value is taken from $CDPATH, with a \",\" prepended to look\n+        in the current directory first.\n+        If the default value taken from $CDPATH is not what you want, include\n+        a modified version of the following command in your vimrc file to\n+        override it: >\n+          :let &cdpath = ',' .. substitute(substitute($CDPATH, '[, ]', '\\\\\\0', 'g'), ':', ',', 'g')\n+        <\tThis option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+        (parts of 'cdpath' can be passed to the shell to expand file names).\n+      ]=],\n+      expand = true,\n+      full_name = 'cdpath',\n+      list = 'comma',\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_('list of directories searched with \":cd\"'),\n+      tags = { 'E344', 'E346' },\n+      type = 'string',\n+      varname = 'p_cdpath',\n+    },\n+    {\n+      cb = 'did_set_cedit',\n+      defaults = {\n+        if_true = macros('CTRL_F_STR'),\n+        doc = 'CTRL-F',\n+      },\n+      desc = [=[\n+        The key used in Command-line Mode to open the command-line window.\n+        Only non-printable keys are allowed.\n+        The key can be specified as a single character, but it is difficult to\n+        type.  The preferred way is to use the <> notation.  Examples: >\n+        \t:exe \"set cedit=\\\\<C-Y>\"\n+        \t:exe \"set cedit=\\\\<Esc>\"\n+        <\t|Nvi| also has this option, but it only uses the first character.\n+        See |cmdwin|.\n+      ]=],\n+      full_name = 'cedit',\n+      scope = { 'global' },\n+      short_desc = N_('used to open the command-line window'),\n+      type = 'string',\n+      varname = 'p_cedit',\n+    },\n+    {\n+      defaults = { if_true = 0 },\n+      desc = [=[\n+        |channel| connected to the buffer, or 0 if no channel is connected.\n+        In a |:terminal| buffer this is the terminal channel.\n+        Read-only.\n+      ]=],\n+      full_name = 'channel',\n+      no_mkrc = true,\n+      nodefault = true,\n+      scope = { 'buffer' },\n+      short_desc = N_('Channel connected to the buffer'),\n+      type = 'number',\n+      varname = 'p_channel',\n+    },\n+    {\n+      abbreviation = 'ccv',\n+      cb = 'did_set_optexpr',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        An expression that is used for character encoding conversion.  It is\n+        evaluated when a file that is to be read or has been written has a\n+        different encoding from what is desired.\n+        'charconvert' is not used when the internal iconv() function is\n+        supported and is able to do the conversion.  Using iconv() is\n+        preferred, because it is much faster.\n+        'charconvert' is not used when reading stdin |--|, because there is no\n+        file to convert from.  You will have to save the text in a file first.\n+        The expression must return zero, false or an empty string for success,\n+        non-zero or true for failure.\n+        See |encoding-names| for possible encoding names.\n+        Additionally, names given in 'fileencodings' and 'fileencoding' are\n+        used.\n+        Conversion between \"latin1\", \"unicode\", \"ucs-2\", \"ucs-4\" and \"utf-8\"\n+        is done internally by Vim, 'charconvert' is not used for this.\n+        Also used for Unicode conversion.\n+        Example: >\n+        \tset charconvert=CharConvert()\n+        \tfun CharConvert()\n+        \t  system(\"recode \"\n+        \t\t\\ .. v:charconvert_from .. \"..\" .. v:charconvert_to\n+        \t\t\\ .. \" <\" .. v:fname_in .. \" >\" .. v:fname_out)\n+        \t  return v:shell_error\n+        \tendfun\n+        <\tThe related Vim variables are:\n+        \tv:charconvert_from\tname of the current encoding\n+        \tv:charconvert_to\tname of the desired encoding\n+        \tv:fname_in\t\tname of the input file\n+        \tv:fname_out\t\tname of the output file\n+        Note that v:fname_in and v:fname_out will never be the same.\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      full_name = 'charconvert',\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_('expression for character encoding conversion'),\n+      type = 'string',\n+      tags = { 'E202', 'E214', 'E513' },\n+      varname = 'p_ccv',\n+    },\n+    {\n+      abbreviation = 'cin',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Enables automatic C program indenting.  See 'cinkeys' to set the keys\n+        that trigger reindenting in insert mode and 'cinoptions' to set your\n+        preferred indent style.\n+        If 'indentexpr' is not empty, it overrules 'cindent'.\n+        If 'lisp' is not on and both 'indentexpr' and 'equalprg' are empty,\n+        the \"=\" operator indents using this algorithm rather than calling an\n+        external program.\n+        See |C-indenting|.\n+        When you don't like the way 'cindent' works, try the 'smartindent'\n+        option or 'indentexpr'.\n+      ]=],\n+      full_name = 'cindent',\n+      scope = { 'buffer' },\n+      short_desc = N_('do C program indenting'),\n+      type = 'bool',\n+      varname = 'p_cin',\n+    },\n+    {\n+      abbreviation = 'cink',\n+      alloced = true,\n+      defaults = { if_true = '0{,0},0),0],:,0#,!^F,o,O,e' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        A list of keys that, when typed in Insert mode, cause reindenting of\n+        the current line.  Only used if 'cindent' is on and 'indentexpr' is\n+        empty.\n+        For the format of this option see |cinkeys-format|.\n+        See |C-indenting|.\n+      ]=],\n+      full_name = 'cinkeys',\n+      list = 'onecomma',\n+      scope = { 'buffer' },\n+      short_desc = N_(\"keys that trigger indent when 'cindent' is set\"),\n+      type = 'string',\n+      varname = 'p_cink',\n+    },\n+    {\n+      abbreviation = 'cino',\n+      alloced = true,\n+      cb = 'did_set_cinoptions',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        The 'cinoptions' affect the way 'cindent' reindents lines in a C\n+        program.  See |cinoptions-values| for the values of this option, and\n+        |C-indenting| for info on C indenting in general.\n+      ]=],\n+      full_name = 'cinoptions',\n+      list = 'onecomma',\n+      scope = { 'buffer' },\n+      short_desc = N_(\"how to do indenting when 'cindent' is set\"),\n+      type = 'string',\n+      varname = 'p_cino',\n+    },\n+    {\n+      abbreviation = 'cinw',\n+      alloced = true,\n+      defaults = { if_true = 'if,else,while,do,for,switch' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        These keywords start an extra indent in the next line when\n+        'smartindent' or 'cindent' is set.  For 'cindent' this is only done at\n+        an appropriate place (inside {}).\n+        Note that 'ignorecase' isn't used for 'cinwords'.  If case doesn't\n+        matter, include the keyword both the uppercase and lowercase:\n+        \"if,If,IF\".\n+      ]=],\n+      full_name = 'cinwords',\n+      list = 'onecomma',\n+      scope = { 'buffer' },\n+      short_desc = N_(\"words where 'si' and 'cin' add an indent\"),\n+      type = 'string',\n+      varname = 'p_cinw',\n+    },\n+    {\n+      abbreviation = 'cinsd',\n+      alloced = true,\n+      defaults = { if_true = 'public,protected,private' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Keywords that are interpreted as a C++ scope declaration by |cino-g|.\n+        Useful e.g. for working with the Qt framework that defines additional\n+        scope declarations \"signals\", \"public slots\" and \"private slots\": >\n+        \tset cinscopedecls+=signals,public\\ slots,private\\ slots\n+        <\n+      ]=],\n+      full_name = 'cinscopedecls',\n+      list = 'onecomma',\n+      scope = { 'buffer' },\n+      short_desc = N_(\"words that are recognized by 'cino-g'\"),\n+      type = 'string',\n+      varname = 'p_cinsd',\n+    },\n+    {\n+      abbreviation = 'cb',\n+      cb = 'did_set_clipboard',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        This option is a list of comma-separated names.\n+        These names are recognized:\n+\n+        \t\t\t\t\t*clipboard-unnamed*\n+        unnamed\t\tWhen included, Vim will use the clipboard register \"*\"\n+        \t\tfor all yank, delete, change and put operations which\n+        \t\twould normally go to the unnamed register.  When a\n+        \t\tregister is explicitly specified, it will always be\n+        \t\tused regardless of whether \"unnamed\" is in 'clipboard'\n+        \t\tor not.  The clipboard register can always be\n+        \t\texplicitly accessed using the \"* notation.  Also see\n+        \t\t|clipboard|.\n+\n+        \t\t\t\t\t*clipboard-unnamedplus*\n+        unnamedplus\tA variant of the \"unnamed\" flag which uses the\n+        \t\tclipboard register \"+\" (|quoteplus|) instead of\n+        \t\tregister \"*\" for all yank, delete, change and put\n+        \t\toperations which would normally go to the unnamed\n+        \t\tregister.  When \"unnamed\" is also included to the\n+        \t\toption, yank and delete operations (but not put)\n+        \t\twill additionally copy the text into register\n+        \t\t\"*\". See |clipboard|.\n+      ]=],\n+      deny_duplicates = true,\n+      full_name = 'clipboard',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('use the clipboard as the unnamed register'),\n+      type = 'string',\n+      varname = 'p_cb',\n+    },\n+    {\n+      abbreviation = 'ch',\n+      cb = 'did_set_cmdheight',\n+      defaults = { if_true = 1 },\n+      desc = [=[\n+        Number of screen lines to use for the command-line.  Helps avoiding\n+        |hit-enter| prompts.\n+        The value of this option is stored with the tab page, so that each tab\n+        page can have a different value.\n+\n+        When 'cmdheight' is zero, there is no command-line unless it is being\n+        used.  The command-line will cover the last line of the screen when\n+        shown.\n+\n+        WARNING: `cmdheight=0` is considered experimental. Expect some\n+        unwanted behaviour. Some 'shortmess' flags and similar\n+        mechanism might fail to take effect, causing unwanted hit-enter\n+        prompts.  Some informative messages, both from Nvim itself and\n+        plugins, will not be displayed.\n+      ]=],\n+      full_name = 'cmdheight',\n+      redraw = { 'all_windows' },\n+      scope = { 'global' },\n+      short_desc = N_('number of lines to use for the command-line'),\n+      type = 'number',\n+      varname = 'p_ch',\n+    },\n+    {\n+      abbreviation = 'cwh',\n+      defaults = { if_true = 7 },\n+      desc = [=[\n+        Number of screen lines to use for the command-line window. |cmdwin|\n+      ]=],\n+      full_name = 'cmdwinheight',\n+      scope = { 'global' },\n+      short_desc = N_('height of the command-line window'),\n+      type = 'number',\n+      varname = 'p_cwh',\n+    },\n+    {\n+      abbreviation = 'cc',\n+      cb = 'did_set_colorcolumn',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        'colorcolumn' is a comma-separated list of screen columns that are\n+        highlighted with ColorColumn |hl-ColorColumn|.  Useful to align\n+        text.  Will make screen redrawing slower.\n+        The screen column can be an absolute number, or a number preceded with\n+        '+' or '-', which is added to or subtracted from 'textwidth'. >\n+\n+        \t:set cc=+1\t  \" highlight column after 'textwidth'\n+        \t:set cc=+1,+2,+3  \" highlight three columns after 'textwidth'\n+        \t:hi ColorColumn ctermbg=lightgrey guibg=lightgrey\n+        <\n+        When 'textwidth' is zero then the items with '-' and '+' are not used.\n+        A maximum of 256 columns are highlighted.\n+      ]=],\n+      full_name = 'colorcolumn',\n+      list = 'onecomma',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('columns to highlight'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'co',\n+      defaults = {\n+        if_true = macros('DFLT_COLS'),\n+        doc = '80 or terminal width',\n+      },\n+      desc = [=[\n+        Number of columns of the screen.  Normally this is set by the terminal\n+        initialization and does not have to be set by hand.\n+        When Vim is running in the GUI or in a resizable window, setting this\n+        option will cause the window size to be changed.  When you only want\n+        to use the size for the GUI, put the command in your |ginit.vim| file.\n+        When you set this option and Vim is unable to change the physical\n+        number of columns of the display, the display may be messed up.  For\n+        the GUI it is always possible and Vim limits the number of columns to\n+        what fits on the screen.  You can use this command to get the widest\n+        window possible: >\n+        \t:set columns=9999\n+        <\tMinimum value is 12, maximum value is 10000.\n+      ]=],\n+      full_name = 'columns',\n+      no_mkrc = true,\n+      scope = { 'global' },\n+      short_desc = N_('number of columns in the display'),\n+      tags = { 'E594' },\n+      type = 'number',\n+      varname = 'p_columns',\n+    },\n+    {\n+      abbreviation = 'com',\n+      alloced = true,\n+      cb = 'did_set_comments',\n+      defaults = { if_true = 's1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        A comma-separated list of strings that can start a comment line.  See\n+        |format-comments|.  See |option-backslash| about using backslashes to\n+        insert a space.\n+      ]=],\n+      full_name = 'comments',\n+      list = 'onecomma',\n+      redraw = { 'curswant' },\n+      scope = { 'buffer' },\n+      short_desc = N_('patterns that can start a comment line'),\n+      tags = { 'E524', 'E525' },\n+      type = 'string',\n+      varname = 'p_com',\n+    },\n+    {\n+      abbreviation = 'cms',\n+      alloced = true,\n+      cb = 'did_set_commentstring',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        A template for a comment.  The \"%s\" in the value is replaced with the\n+        comment text.  For example, C uses \"/*%s*/\". Currently only used to\n+        add markers for folding, see |fold-marker|.\n+      ]=],\n+      full_name = 'commentstring',\n+      redraw = { 'curswant' },\n+      scope = { 'buffer' },\n+      short_desc = N_('template for comments; used for fold marker'),\n+      tags = { 'E537' },\n+      type = 'string',\n+      varname = 'p_cms',\n+    },\n+    {\n+      abbreviation = 'cp',\n+      defaults = { if_true = false },\n+      full_name = 'compatible',\n+      scope = { 'global' },\n+      short_desc = N_('No description'),\n+      type = 'bool',\n+      varname = 'p_force_off',\n+    },\n+    {\n+      abbreviation = 'cpt',\n+      alloced = true,\n+      cb = 'did_set_complete',\n+      defaults = { if_true = '.,w,b,u,t' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        This option specifies how keyword completion |ins-completion| works\n+        when CTRL-P or CTRL-N are used.  It is also used for whole-line\n+        completion |i_CTRL-X_CTRL-L|.  It indicates the type of completion\n+        and the places to scan.  It is a comma-separated list of flags:\n+        .\tscan the current buffer ('wrapscan' is ignored)\n+        w\tscan buffers from other windows\n+        b\tscan other loaded buffers that are in the buffer list\n+        u\tscan the unloaded buffers that are in the buffer list\n+        U\tscan the buffers that are not in the buffer list\n+        k\tscan the files given with the 'dictionary' option\n+        kspell  use the currently active spell checking |spell|\n+        k{dict}\tscan the file {dict}.  Several \"k\" flags can be given,\n+        \tpatterns are valid too.  For example: >\n+        \t\t:set cpt=k/usr/dict/*,k~/spanish\n+        <\ts\tscan the files given with the 'thesaurus' option\n+        s{tsr}\tscan the file {tsr}.  Several \"s\" flags can be given, patterns\n+        \tare valid too.\n+        i\tscan current and included files\n+        d\tscan current and included files for defined name or macro\n+        \t|i_CTRL-X_CTRL-D|\n+        ]\ttag completion\n+        t\tsame as \"]\"\n+\n+        Unloaded buffers are not loaded, thus their autocmds |:autocmd| are\n+        not executed, this may lead to unexpected completions from some files\n+        (gzipped files for example).  Unloaded buffers are not scanned for\n+        whole-line completion.\n+\n+        As you can see, CTRL-N and CTRL-P can be used to do any 'iskeyword'-\n+        based expansion (e.g., dictionary |i_CTRL-X_CTRL-K|, included patterns\n+        |i_CTRL-X_CTRL-I|, tags |i_CTRL-X_CTRL-]| and normal expansions).\n+      ]=],\n+      full_name = 'complete',\n+      list = 'onecomma',\n+      scope = { 'buffer' },\n+      short_desc = N_('specify how Insert mode completion works'),\n+      tags = { 'E535' },\n+      type = 'string',\n+      varname = 'p_cpt',\n+    },\n+    {\n+      abbreviation = 'cocu',\n+      alloced = true,\n+      cb = 'did_set_concealcursor',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        Sets the modes in which text in the cursor line can also be concealed.\n+        When the current mode is listed then concealing happens just like in\n+        other lines.\n+          n\t\tNormal mode\n+          v\t\tVisual mode\n+          i\t\tInsert mode\n+          c\t\tCommand line editing, for 'incsearch'\n+\n+        'v' applies to all lines in the Visual area, not only the cursor.\n+        A useful value is \"nc\".  This is used in help files.  So long as you\n+        are moving around text is concealed, but when starting to insert text\n+        or selecting a Visual area the concealed text is displayed, so that\n+        you can see what you are doing.\n+        Keep in mind that the cursor position is not always where it's\n+        displayed.  E.g., when moving vertically it may change column.\n+      ]=],\n+      full_name = 'concealcursor',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('whether concealable text is hidden in cursor line'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'cole',\n+      defaults = { if_true = 0 },\n+      desc = [=[\n+        Determine how text with the \"conceal\" syntax attribute |:syn-conceal|\n+        is shown:\n+\n+        Value\t\tEffect ~\n+        0\t\tText is shown normally\n+        1\t\tEach block of concealed text is replaced with one\n+        \t\tcharacter.  If the syntax item does not have a custom\n+        \t\treplacement character defined (see |:syn-cchar|) the\n+        \t\tcharacter defined in 'listchars' is used.\n+        \t\tIt is highlighted with the \"Conceal\" highlight group.\n+        2\t\tConcealed text is completely hidden unless it has a\n+        \t\tcustom replacement character defined (see\n+        \t\t|:syn-cchar|).\n+        3\t\tConcealed text is completely hidden.\n+\n+        Note: in the cursor line concealed text is not hidden, so that you can\n+        edit and copy the text.  This can be changed with the 'concealcursor'\n+        option.\n+      ]=],\n+      full_name = 'conceallevel',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('whether concealable text is shown or hidden'),\n+      type = 'number',\n+    },\n+    {\n+      abbreviation = 'cfu',\n+      alloced = true,\n+      cb = 'did_set_completefunc',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        This option specifies a function to be used for Insert mode completion\n+        with CTRL-X CTRL-U. |i_CTRL-X_CTRL-U|\n+        See |complete-functions| for an explanation of how the function is\n+        invoked and what it should return.  The value can be the name of a\n+        function, a |lambda| or a |Funcref|. See |option-value-function| for\n+        more information.\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      full_name = 'completefunc',\n+      func = true,\n+      scope = { 'buffer' },\n+      secure = true,\n+      short_desc = N_('function to be used for Insert mode completion'),\n+      type = 'string',\n+      varname = 'p_cfu',\n+    },\n+    {\n+      abbreviation = 'cot',\n+      cb = 'did_set_completeopt',\n+      defaults = { if_true = 'menu,preview' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        A comma-separated list of options for Insert mode completion\n+        |ins-completion|.  The supported values are:\n+\n+           menu\t    Use a popup menu to show the possible completions.  The\n+        \t    menu is only shown when there is more than one match and\n+        \t    sufficient colors are available.  |ins-completion-menu|\n+\n+           menuone  Use the popup menu also when there is only one match.\n+        \t    Useful when there is additional information about the\n+        \t    match, e.g., what file it comes from.\n+\n+           longest  Only insert the longest common text of the matches.  If\n+        \t    the menu is displayed you can use CTRL-L to add more\n+        \t    characters.  Whether case is ignored depends on the kind\n+        \t    of completion.  For buffer text the 'ignorecase' option is\n+        \t    used.\n+\n+           preview  Show extra information about the currently selected\n+        \t    completion in the preview window.  Only works in\n+        \t    combination with \"menu\" or \"menuone\".\n+\n+          noinsert  Do not insert any text for a match until the user selects\n+        \t    a match from the menu. Only works in combination with\n+        \t    \"menu\" or \"menuone\". No effect if \"longest\" is present.\n+\n+          noselect  Do not select a match in the menu, force the user to\n+        \t    select one from the menu. Only works in combination with\n+        \t    \"menu\" or \"menuone\".\n+      ]=],\n+      full_name = 'completeopt',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('options for Insert mode completion'),\n+      type = 'string',\n+      varname = 'p_cot',\n+    },\n+    {\n+      abbreviation = 'csl',\n+      cb = 'did_set_completeslash',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        \t\tonly for MS-Windows\n+        When this option is set it overrules 'shellslash' for completion:\n+        - When this option is set to \"slash\", a forward slash is used for path\n+          completion in insert mode. This is useful when editing HTML tag, or\n+          Makefile with 'noshellslash' on MS-Windows.\n+        - When this option is set to \"backslash\", backslash is used. This is\n+          useful when editing a batch file with 'shellslash' set on MS-Windows.\n+        - When this option is empty, same character is used as for\n+          'shellslash'.\n+        For Insert mode completion the buffer-local value is used.  For\n+        command line completion the global value is used.\n+      ]=],\n+      enable_if = 'BACKSLASH_IN_FILENAME',\n+      full_name = 'completeslash',\n+      scope = { 'buffer' },\n+      type = 'string',\n+      varname = 'p_csl',\n+    },\n+    {\n+      abbreviation = 'cf',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        When 'confirm' is on, certain operations that would normally\n+        fail because of unsaved changes to a buffer, e.g. \":q\" and \":e\",\n+        instead raise a dialog asking if you wish to save the current\n+        file(s).  You can still use a ! to unconditionally |abandon| a buffer.\n+        If 'confirm' is off you can still activate confirmation for one\n+        command only (this is most useful in mappings) with the |:confirm|\n+        command.\n+        Also see the |confirm()| function and the 'v' flag in 'guioptions'.\n+      ]=],\n+      full_name = 'confirm',\n+      scope = { 'global' },\n+      short_desc = N_('ask what to do about unsaved/read-only files'),\n+      type = 'bool',\n+      varname = 'p_confirm',\n+    },\n+    {\n+      abbreviation = 'ci',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Copy the structure of the existing lines indent when autoindenting a\n+        new line.  Normally the new indent is reconstructed by a series of\n+        tabs followed by spaces as required (unless |'expandtab'| is enabled,\n+        in which case only spaces are used).  Enabling this option makes the\n+        new line copy whatever characters were used for indenting on the\n+        existing line.  'expandtab' has no effect on these characters, a Tab\n+        remains a Tab.  If the new indent is greater than on the existing\n+        line, the remaining space is filled in the normal manner.\n+        See 'preserveindent'.\n+      ]=],\n+      full_name = 'copyindent',\n+      scope = { 'buffer' },\n+      short_desc = N_(\"make 'autoindent' use existing indent structure\"),\n+      type = 'bool',\n+      varname = 'p_ci',\n+    },\n+    {\n+      abbreviation = 'cpo',\n+      cb = 'did_set_cpoptions',\n+      defaults = { if_true = macros('CPO_VIM') },\n+      desc = [=[\n+        A sequence of single character flags.  When a character is present\n+        this indicates Vi-compatible behavior.  This is used for things where\n+        not being Vi-compatible is mostly or sometimes preferred.\n+        'cpoptions' stands for \"compatible-options\".\n+        Commas can be added for readability.\n+        To avoid problems with flags that are added in the future, use the\n+        \"+=\" and \"-=\" feature of \":set\" |add-option-flags|.\n+\n+            contains\tbehavior\t~\n+        \t\t\t\t\t\t\t*cpo-a*\n+        \ta\tWhen included, a \":read\" command with a file name\n+        \t\targument will set the alternate file name for the\n+        \t\tcurrent window.\n+        \t\t\t\t\t\t\t*cpo-A*\n+        \tA\tWhen included, a \":write\" command with a file name\n+        \t\targument will set the alternate file name for the\n+        \t\tcurrent window.\n+        \t\t\t\t\t\t\t*cpo-b*\n+        \tb\t\"\\|\" in a \":map\" command is recognized as the end of\n+        \t\tthe map command.  The '\\' is included in the mapping,\n+        \t\tthe text after the '|' is interpreted as the next\n+        \t\tcommand.  Use a CTRL-V instead of a backslash to\n+        \t\tinclude the '|' in the mapping.  Applies to all\n+        \t\tmapping, abbreviation, menu and autocmd commands.\n+        \t\tSee also |map_bar|.\n+        \t\t\t\t\t\t\t*cpo-B*\n+        \tB\tA backslash has no special meaning in mappings,\n+        \t\tabbreviations, user commands and the \"to\" part of the\n+        \t\tmenu commands.  Remove this flag to be able to use a\n+        \t\tbackslash like a CTRL-V.  For example, the command\n+        \t\t\":map X \\\\<Esc>\" results in X being mapped to:\n+        \t\t\t'B' included:\t\"\\^[\"\t (^[ is a real <Esc>)\n+        \t\t\t'B' excluded:\t\"<Esc>\"  (5 characters)\n+        \t\t\t\t\t\t\t*cpo-c*\n+        \tc\tSearching continues at the end of any match at the\n+        \t\tcursor position, but not further than the start of the\n+        \t\tnext line.  When not present searching continues\n+        \t\tone character from the cursor position.  With 'c'\n+        \t\t\"abababababab\" only gets three matches when repeating\n+        \t\t\"/abab\", without 'c' there are five matches.\n+        \t\t\t\t\t\t\t*cpo-C*\n+        \tC\tDo not concatenate sourced lines that start with a\n+        \t\tbackslash.  See |line-continuation|.\n+        \t\t\t\t\t\t\t*cpo-d*\n+        \td\tUsing \"./\" in the 'tags' option doesn't mean to use\n+        \t\tthe tags file relative to the current file, but the\n+        \t\ttags file in the current directory.\n+        \t\t\t\t\t\t\t*cpo-D*\n+        \tD\tCan't use CTRL-K to enter a digraph after Normal mode\n+        \t\tcommands with a character argument, like |r|, |f| and\n+        \t\t|t|.\n+        \t\t\t\t\t\t\t*cpo-e*\n+        \te\tWhen executing a register with \":@r\", always add a\n+        \t\t<CR> to the last line, also when the register is not\n+        \t\tlinewise.  If this flag is not present, the register\n+        \t\tis not linewise and the last line does not end in a\n+        \t\t<CR>, then the last line is put on the command-line\n+        \t\tand can be edited before hitting <CR>.\n+        \t\t\t\t\t\t\t*cpo-E*\n+        \tE\tIt is an error when using \"y\", \"d\", \"c\", \"g~\", \"gu\" or\n+        \t\t\"gU\" on an Empty region.  The operators only work when\n+        \t\tat least one character is to be operated on.  Example:\n+        \t\tThis makes \"y0\" fail in the first column.\n+        \t\t\t\t\t\t\t*cpo-f*\n+        \tf\tWhen included, a \":read\" command with a file name\n+        \t\targument will set the file name for the current buffer,\n+        \t\tif the current buffer doesn't have a file name yet.\n+        \t\t\t\t\t\t\t*cpo-F*\n+        \tF\tWhen included, a \":write\" command with a file name\n+        \t\targument will set the file name for the current\n+        \t\tbuffer, if the current buffer doesn't have a file name\n+        \t\tyet.  Also see |cpo-P|.\n+        \t\t\t\t\t\t\t*cpo-i*\n+        \ti\tWhen included, interrupting the reading of a file will\n+        \t\tleave it modified.\n+        \t\t\t\t\t\t\t*cpo-I*\n+        \tI\tWhen moving the cursor up or down just after inserting\n+        \t\tindent for 'autoindent', do not delete the indent.\n+        \t\t\t\t\t\t\t*cpo-J*\n+        \tJ\tA |sentence| has to be followed by two spaces after\n+        \t\tthe '.', '!' or '?'.  A <Tab> is not recognized as\n+        \t\twhite space.\n+        \t\t\t\t\t\t\t*cpo-K*\n+        \tK\tDon't wait for a key code to complete when it is\n+        \t\thalfway through a mapping.  This breaks mapping\n+        \t\t<F1><F1> when only part of the second <F1> has been\n+        \t\tread.  It enables cancelling the mapping by typing\n+        \t\t<F1><Esc>.\n+        \t\t\t\t\t\t\t*cpo-l*\n+        \tl\tBackslash in a [] range in a search pattern is taken\n+        \t\tliterally, only \"\\]\", \"\\^\", \"\\-\" and \"\\\\\" are special.\n+        \t\tSee |/[]|\n+        \t\t   'l' included: \"/[ \\t]\"  finds <Space>, '\\' and 't'\n+        \t\t   'l' excluded: \"/[ \\t]\"  finds <Space> and <Tab>\n+        \t\t\t\t\t\t\t*cpo-L*\n+        \tL\tWhen the 'list' option is set, 'wrapmargin',\n+        \t\t'textwidth', 'softtabstop' and Virtual Replace mode\n+        \t\t(see |gR|) count a <Tab> as two characters, instead of\n+        \t\tthe normal behavior of a <Tab>.\n+        \t\t\t\t\t\t\t*cpo-m*\n+        \tm\tWhen included, a showmatch will always wait half a\n+        \t\tsecond.  When not included, a showmatch will wait half\n+        \t\ta second or until a character is typed.  |'showmatch'|\n+        \t\t\t\t\t\t\t*cpo-M*\n+        \tM\tWhen excluded, \"%\" matching will take backslashes into\n+        \t\taccount.  Thus in \"( \\( )\" and \"\\( ( \\)\" the outer\n+        \t\tparenthesis match.  When included \"%\" ignores\n+        \t\tbackslashes, which is Vi compatible.\n+        \t\t\t\t\t\t\t*cpo-n*\n+        \tn\tWhen included, the column used for 'number' and\n+        \t\t'relativenumber' will also be used for text of wrapped\n+        \t\tlines.\n+        \t\t\t\t\t\t\t*cpo-o*\n+        \to\tLine offset to search command is not remembered for\n+        \t\tnext search.\n+        \t\t\t\t\t\t\t*cpo-O*\n+        \tO\tDon't complain if a file is being overwritten, even\n+        \t\twhen it didn't exist when editing it.  This is a\n+        \t\tprotection against a file unexpectedly created by\n+        \t\tsomeone else.  Vi didn't complain about this.\n+        \t\t\t\t\t\t\t*cpo-p*\n+        \tp\tVi compatible Lisp indenting.  When not present, a\n+        \t\tslightly better algorithm is used.\n+        \t\t\t\t\t\t\t*cpo-P*\n+        \tP\tWhen included, a \":write\" command that appends to a\n+        \t\tfile will set the file name for the current buffer, if\n+        \t\tthe current buffer doesn't have a file name yet and\n+        \t\tthe 'F' flag is also included |cpo-F|.\n+        \t\t\t\t\t\t\t*cpo-q*\n+        \tq\tWhen joining multiple lines leave the cursor at the\n+        \t\tposition where it would be when joining two lines.\n+        \t\t\t\t\t\t\t*cpo-r*\n+        \tr\tRedo (\".\" command) uses \"/\" to repeat a search\n+        \t\tcommand, instead of the actually used search string.\n+        \t\t\t\t\t\t\t*cpo-R*\n+        \tR\tRemove marks from filtered lines.  Without this flag\n+        \t\tmarks are kept like |:keepmarks| was used.\n+        \t\t\t\t\t\t\t*cpo-s*\n+        \ts\tSet buffer options when entering the buffer for the\n+        \t\tfirst time.  This is like it is in Vim version 3.0.\n+        \t\tAnd it is the default.  If not present the options are\n+        \t\tset when the buffer is created.\n+        \t\t\t\t\t\t\t*cpo-S*\n+        \tS\tSet buffer options always when entering a buffer\n+        \t\t(except 'readonly', 'fileformat', 'filetype' and\n+        \t\t'syntax').  This is the (most) Vi compatible setting.\n+        \t\tThe options are set to the values in the current\n+        \t\tbuffer.  When you change an option and go to another\n+        \t\tbuffer, the value is copied.  Effectively makes the\n+        \t\tbuffer options global to all buffers.\n+\n+        \t\t's'    'S'     copy buffer options\n+        \t\tno     no      when buffer created\n+        \t\tyes    no      when buffer first entered (default)\n+        \t\t X     yes     each time when buffer entered (vi comp.)\n+        \t\t\t\t\t\t\t*cpo-t*\n+        \tt\tSearch pattern for the tag command is remembered for\n+        \t\t\"n\" command.  Otherwise Vim only puts the pattern in\n+        \t\tthe history for search pattern, but doesn't change the\n+        \t\tlast used search pattern.\n+        \t\t\t\t\t\t\t*cpo-u*\n+        \tu\tUndo is Vi compatible.  See |undo-two-ways|.\n+        \t\t\t\t\t\t\t*cpo-v*\n+        \tv\tBackspaced characters remain visible on the screen in\n+        \t\tInsert mode.  Without this flag the characters are\n+        \t\terased from the screen right away.  With this flag the\n+        \t\tscreen newly typed text overwrites backspaced\n+        \t\tcharacters.\n+        \t\t\t\t\t\t\t*cpo-W*\n+        \tW\tDon't overwrite a readonly file.  When omitted, \":w!\"\n+        \t\toverwrites a readonly file, if possible.\n+        \t\t\t\t\t\t\t*cpo-x*\n+        \tx\t<Esc> on the command-line executes the command-line.\n+        \t\tThe default in Vim is to abandon the command-line,\n+        \t\tbecause <Esc> normally aborts a command.  |c_<Esc>|\n+        \t\t\t\t\t\t\t*cpo-X*\n+        \tX\tWhen using a count with \"R\" the replaced text is\n+        \t\tdeleted only once.  Also when repeating \"R\" with \".\"\n+        \t\tand a count.\n+        \t\t\t\t\t\t\t*cpo-y*\n+        \ty\tA yank command can be redone with \".\".  Think twice if\n+        \t\tyou really want to use this, it may break some\n+        \t\tplugins, since most people expect \".\" to only repeat a\n+        \t\tchange.\n+        \t\t\t\t\t\t\t*cpo-Z*\n+        \tZ\tWhen using \"w!\" while the 'readonly' option is set,\n+        \t\tdon't reset 'readonly'.\n+        \t\t\t\t\t\t\t*cpo-!*\n+        \t!\tWhen redoing a filter command, use the last used\n+        \t\texternal command, whatever it was.  Otherwise the last\n+        \t\tused -filter- command is used.\n+        \t\t\t\t\t\t\t*cpo-$*\n+        \t$\tWhen making a change to one line, don't redisplay the\n+        \t\tline, but put a '$' at the end of the changed text.\n+        \t\tThe changed text will be overwritten when you type the\n+        \t\tnew text.  The line is redisplayed if you type any\n+        \t\tcommand that moves the cursor from the insertion\n+        \t\tpoint.\n+        \t\t\t\t\t\t\t*cpo-%*\n+        \t%\tVi-compatible matching is done for the \"%\" command.\n+        \t\tDoes not recognize \"#if\", \"#endif\", etc.\n+        \t\tDoes not recognize \"/*\" and \"*/\".\n+        \t\tParens inside single and double quotes are also\n+        \t\tcounted, causing a string that contains a paren to\n+        \t\tdisturb the matching.  For example, in a line like\n+        \t\t\"if (strcmp(\"foo(\", s))\" the first paren does not\n+        \t\tmatch the last one.  When this flag is not included,\n+        \t\tparens inside single and double quotes are treated\n+        \t\tspecially.  When matching a paren outside of quotes,\n+        \t\teverything inside quotes is ignored.  When matching a\n+        \t\tparen inside quotes, it will find the matching one (if\n+        \t\tthere is one).  This works very well for C programs.\n+        \t\tThis flag is also used for other features, such as\n+        \t\tC-indenting.\n+        \t\t\t\t\t\t\t*cpo-+*\n+        \t+\tWhen included, a \":write file\" command will reset the\n+        \t\t'modified' flag of the buffer, even though the buffer\n+        \t\titself may still be different from its file.\n+        \t\t\t\t\t\t\t*cpo->*\n+        \t>\tWhen appending to a register, put a line break before\n+        \t\tthe appended text.\n+        \t\t\t\t\t\t\t*cpo-;*\n+        \t;\tWhen using |,| or |;| to repeat the last |t| search\n+        \t\tand the cursor is right in front of the searched\n+        \t\tcharacter, the cursor won't move. When not included,\n+        \t\tthe cursor would skip over it and jump to the\n+        \t\tfollowing occurrence.\n+        \t\t\t\t\t\t\t*cpo-_*\n+        \t_\tWhen using |cw| on a word, do not include the\n+        \t\twhitespace following the word in the motion.\n+      ]=],\n+      full_name = 'cpoptions',\n+      list = 'flags',\n+      redraw = { 'all_windows' },\n+      scope = { 'global' },\n+      short_desc = N_('flags for Vi-compatible behavior'),\n+      tags = { 'cpo' },\n+      type = 'string',\n+      varname = 'p_cpo',\n+    },\n+    {\n+      abbreviation = 'crb',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        When this option is set, as the cursor in the current\n+        window moves other cursorbound windows (windows that also have\n+        this option set) move their cursors to the corresponding line and\n+        column.  This option is useful for viewing the\n+        differences between two versions of a file (see 'diff'); in diff mode,\n+        inserted and deleted lines (though not characters within a line) are\n+        taken into account.\n+      ]=],\n+      full_name = 'cursorbind',\n+      pv_name = 'p_crbind',\n+      scope = { 'window' },\n+      short_desc = N_('move cursor in window as it moves in other windows'),\n+      type = 'bool',\n+    },\n+    {\n+      abbreviation = 'cuc',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Highlight the screen column of the cursor with CursorColumn\n+        |hl-CursorColumn|.  Useful to align text.  Will make screen redrawing\n+        slower.\n+        If you only want the highlighting in the current window you can use\n+        these autocommands: >\n+        \tau WinLeave * set nocursorline nocursorcolumn\n+        \tau WinEnter * set cursorline cursorcolumn\n+        <\n+      ]=],\n+      full_name = 'cursorcolumn',\n+      redraw = { 'current_window_only' },\n+      scope = { 'window' },\n+      short_desc = N_('highlight the screen column of the cursor'),\n+      type = 'bool',\n+    },\n+    {\n+      abbreviation = 'cul',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Highlight the text line of the cursor with CursorLine |hl-CursorLine|.\n+        Useful to easily spot the cursor.  Will make screen redrawing slower.\n+        When Visual mode is active the highlighting isn't used to make it\n+        easier to see the selected text.\n+      ]=],\n+      full_name = 'cursorline',\n+      redraw = { 'current_window_only' },\n+      scope = { 'window' },\n+      short_desc = N_('highlight the screen line of the cursor'),\n+      type = 'bool',\n+    },\n+    {\n+      abbreviation = 'culopt',\n+      cb = 'did_set_cursorlineopt',\n+      defaults = { if_true = 'both' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Comma-separated list of settings for how 'cursorline' is displayed.\n+        Valid values:\n+        \"line\"\t\tHighlight the text line of the cursor with\n+        \t\tCursorLine |hl-CursorLine|.\n+        \"screenline\"\tHighlight only the screen line of the cursor with\n+        \t\tCursorLine |hl-CursorLine|.\n+        \"number\"\tHighlight the line number of the cursor with\n+        \t\tCursorLineNr |hl-CursorLineNr|.\n+\n+        Special value:\n+        \"both\"\t\tAlias for the values \"line,number\".\n+\n+        \"line\" and \"screenline\" cannot be used together.\n+      ]=],\n+      full_name = 'cursorlineopt',\n+      list = 'onecomma',\n+      redraw = { 'current_window_only' },\n+      scope = { 'window' },\n+      short_desc = N_(\"settings for 'cursorline'\"),\n+      type = 'string',\n+    },\n+    {\n+      cb = 'did_set_debug',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        These values can be used:\n+        msg\tError messages that would otherwise be omitted will be given\n+        \tanyway.\n+        throw\tError messages that would otherwise be omitted will be given\n+        \tanyway and also throw an exception and set |v:errmsg|.\n+        beep\tA message will be given when otherwise only a beep would be\n+        \tproduced.\n+        The values can be combined, separated by a comma.\n+        \"msg\" and \"throw\" are useful for debugging 'foldexpr', 'formatexpr' or\n+        'indentexpr'.\n+      ]=],\n+      full_name = 'debug',\n+      scope = { 'global' },\n+      short_desc = N_('to \"msg\" to see all error messages'),\n+      type = 'string',\n+      varname = 'p_debug',\n+    },\n+    {\n+      abbreviation = 'def',\n+      alloced = true,\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        Pattern to be used to find a macro definition.  It is a search\n+        pattern, just like for the \"/\" command.  This option is used for the\n+        commands like \"[i\" and \"[d\" |include-search|.  The 'isident' option is\n+        used to recognize the defined name after the match: >\n+        \t{match with 'define'}{non-ID chars}{defined name}{non-ID char}\n+        <\tSee |option-backslash| about inserting backslashes to include a space\n+        or backslash.\n+        For C++ this value would be useful, to include const type declarations: >\n+        \t^\\(#\\s*define\\|[a-z]*\\s*const\\s*[a-z]*\\)\n+        <\tYou can also use \"\\ze\" just before the name and continue the pattern\n+        to check what is following.  E.g. for Javascript, if a function is\n+        defined with `func_name = function(args)`: >\n+        \t^\\s*\\ze\\i\\+\\s*=\\s*function(\n+        <\tIf the function is defined with `func_name : function() {...`: >\n+                ^\\s*\\ze\\i\\+\\s*[:]\\s*(*function\\s*(\n+        <\tWhen using the \":set\" command, you need to double the backslashes!\n+        To avoid that use `:let` with a single quote string: >\n+        \tlet &l:define = '^\\s*\\ze\\k\\+\\s*=\\s*function('\n+        <\n+      ]=],\n+      full_name = 'define',\n+      redraw = { 'curswant' },\n+      scope = { 'global', 'buffer' },\n+      short_desc = N_('pattern to be used to find a macro definition'),\n+      type = 'string',\n+      varname = 'p_def',\n+    },\n+    {\n+      abbreviation = 'deco',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        If editing Unicode and this option is set, backspace and Normal mode\n+        \"x\" delete each combining character on its own.  When it is off (the\n+        default) the character along with its combining characters are\n+        deleted.\n+        Note: When 'delcombine' is set \"xx\" may work differently from \"2x\"!\n+\n+        This is useful for Arabic, Hebrew and many other languages where one\n+        may have combining characters overtop of base characters, and want\n+        to remove only the combining ones.\n+      ]=],\n+      full_name = 'delcombine',\n+      scope = { 'global' },\n+      short_desc = N_('delete combining characters on their own'),\n+      type = 'bool',\n+      varname = 'p_deco',\n+    },\n+    {\n+      abbreviation = 'dict',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        List of file names, separated by commas, that are used to lookup words\n+        for keyword completion commands |i_CTRL-X_CTRL-K|.  Each file should\n+        contain a list of words.  This can be one word per line, or several\n+        words per line, separated by non-keyword characters (white space is\n+        preferred).  Maximum line length is 510 bytes.\n+\n+        When this option is empty or an entry \"spell\" is present, and spell\n+        checking is enabled, words in the word lists for the currently active\n+        'spelllang' are used. See |spell|.\n+\n+        To include a comma in a file name precede it with a backslash.  Spaces\n+        after a comma are ignored, otherwise spaces are included in the file\n+        name.  See |option-backslash| about using backslashes.\n+        This has nothing to do with the |Dictionary| variable type.\n+        Where to find a list of words?\n+        - BSD/macOS include the \"/usr/share/dict/words\" file.\n+        - Try \"apt install spell\" to get the \"/usr/share/dict/words\" file on\n+          apt-managed systems (Debian/Ubuntu).\n+        The use of |:set+=| and |:set-=| is preferred when adding or removing\n+        directories from the list.  This avoids problems when a future version\n+        uses another default.\n+        Backticks cannot be used in this option for security reasons.\n+      ]=],\n+      expand = true,\n+      full_name = 'dictionary',\n+      list = 'onecomma',\n+      normal_dname_chars = true,\n+      scope = { 'global', 'buffer' },\n+      short_desc = N_('list of file names used for keyword completion'),\n+      type = 'string',\n+      varname = 'p_dict',\n+    },\n+    {\n+      cb = 'did_set_diff',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Join the current window in the group of windows that shows differences\n+        between files.  See |diff-mode|.\n+      ]=],\n+      full_name = 'diff',\n+      noglob = true,\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('diff mode for the current window'),\n+      type = 'bool',\n+    },\n+    {\n+      abbreviation = 'dex',\n+      cb = 'did_set_optexpr',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        Expression which is evaluated to obtain a diff file (either ed-style\n+        or unified-style) from two versions of a file.  See |diff-diffexpr|.\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      full_name = 'diffexpr',\n+      redraw = { 'curswant' },\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_('expression used to obtain a diff file'),\n+      type = 'string',\n+      varname = 'p_dex',\n+    },\n+    {\n+      abbreviation = 'dip',\n+      alloced = true,\n+      cb = 'did_set_diffopt',\n+      defaults = { if_true = 'internal,filler,closeoff' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Option settings for diff mode.  It can consist of the following items.\n+        All are optional.  Items must be separated by a comma.\n+\n+        \tfiller\t\tShow filler lines, to keep the text\n+        \t\t\tsynchronized with a window that has inserted\n+        \t\t\tlines at the same position.  Mostly useful\n+        \t\t\twhen windows are side-by-side and 'scrollbind'\n+        \t\t\tis set.\n+\n+        \tcontext:{n}\tUse a context of {n} lines between a change\n+        \t\t\tand a fold that contains unchanged lines.\n+        \t\t\tWhen omitted a context of six lines is used.\n+        \t\t\tWhen using zero the context is actually one,\n+        \t\t\tsince folds require a line in between, also\n+        \t\t\tfor a deleted line.\n+        \t\t\tSee |fold-diff|.\n+\n+        \tiblank\t\tIgnore changes where lines are all blank.  Adds\n+        \t\t\tthe \"-B\" flag to the \"diff\" command if\n+        \t\t\t'diffexpr' is empty.  Check the documentation\n+        \t\t\tof the \"diff\" command for what this does\n+        \t\t\texactly.\n+        \t\t\tNOTE: the diff windows will get out of sync,\n+        \t\t\tbecause no differences between blank lines are\n+        \t\t\ttaken into account.\n+\n+        \ticase\t\tIgnore changes in case of text.  \"a\" and \"A\"\n+        \t\t\tare considered the same.  Adds the \"-i\" flag\n+        \t\t\tto the \"diff\" command if 'diffexpr' is empty.\n+\n+        \tiwhite\t\tIgnore changes in amount of white space.  Adds\n+        \t\t\tthe \"-b\" flag to the \"diff\" command if\n+        \t\t\t'diffexpr' is empty.  Check the documentation\n+        \t\t\tof the \"diff\" command for what this does\n+        \t\t\texactly.  It should ignore adding trailing\n+        \t\t\twhite space, but not leading white space.\n+\n+        \tiwhiteall\tIgnore all white space changes.  Adds\n+        \t\t\tthe \"-w\" flag to the \"diff\" command if\n+        \t\t\t'diffexpr' is empty.  Check the documentation\n+        \t\t\tof the \"diff\" command for what this does\n+        \t\t\texactly.\n+\n+        \tiwhiteeol\tIgnore white space changes at end of line.\n+        \t\t\tAdds the \"-Z\" flag to the \"diff\" command if\n+        \t\t\t'diffexpr' is empty.  Check the documentation\n+        \t\t\tof the \"diff\" command for what this does\n+        \t\t\texactly.\n+\n+        \thorizontal\tStart diff mode with horizontal splits (unless\n+        \t\t\texplicitly specified otherwise).\n+\n+        \tvertical\tStart diff mode with vertical splits (unless\n+        \t\t\texplicitly specified otherwise).\n+\n+        \tcloseoff\tWhen a window is closed where 'diff' is set\n+        \t\t\tand there is only one window remaining in the\n+        \t\t\tsame tab page with 'diff' set, execute\n+        \t\t\t`:diffoff` in that window.  This undoes a\n+        \t\t\t`:diffsplit` command.\n+\n+        \thiddenoff\tDo not use diff mode for a buffer when it\n+        \t\t\tbecomes hidden.\n+\n+        \tfoldcolumn:{n}\tSet the 'foldcolumn' option to {n} when\n+        \t\t\tstarting diff mode.  Without this 2 is used.\n+\n+        \tfollowwrap\tFollow the 'wrap' option and leave as it is.\n+\n+        \tinternal\tUse the internal diff library.  This is\n+        \t\t\tignored when 'diffexpr' is set.  *E960*\n+        \t\t\tWhen running out of memory when writing a\n+        \t\t\tbuffer this item will be ignored for diffs\n+        \t\t\tinvolving that buffer.  Set the 'verbose'\n+        \t\t\toption to see when this happens.\n+\n+        \tindent-heuristic\n+        \t\t\tUse the indent heuristic for the internal\n+        \t\t\tdiff library.\n+\n+        \tlinematch:{n}   Enable a second stage diff on each generated\n+        \t\t\thunk in order to align lines. When the total\n+        \t\t\tnumber of lines in a hunk exceeds {n}, the\n+        \t\t\tsecond stage diff will not be performed as\n+        \t\t\tvery large hunks can cause noticeable lag. A\n+        \t\t\trecommended setting is \"linematch:60\", as this\n+        \t\t\twill enable alignment for a 2 buffer diff with\n+        \t\t\thunks of up to 30 lines each, or a 3 buffer\n+        \t\t\tdiff with hunks of up to 20 lines each.\n+\n+        \talgorithm:{text} Use the specified diff algorithm with the\n+        \t\t\tinternal diff engine. Currently supported\n+        \t\t\talgorithms are:\n+        \t\t\tmyers      the default algorithm\n+        \t\t\tminimal    spend extra time to generate the\n+        \t\t\t\t   smallest possible diff\n+        \t\t\tpatience   patience diff algorithm\n+        \t\t\thistogram  histogram diff algorithm\n+\n+        Examples: >\n+        \t:set diffopt=internal,filler,context:4\n+        \t:set diffopt=\n+        \t:set diffopt=internal,filler,foldcolumn:3\n+        \t:set diffopt-=internal  \" do NOT use the internal diff parser\n+        <\n+      ]=],\n+      full_name = 'diffopt',\n+      list = 'onecomma',\n+      redraw = { 'current_window' },\n+      scope = { 'global' },\n+      short_desc = N_('options for using diff mode'),\n+      type = 'string',\n+      varname = 'p_dip',\n+    },\n+    {\n+      abbreviation = 'dg',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Enable the entering of digraphs in Insert mode with {char1} <BS>\n+        {char2}.  See |digraphs|.\n+      ]=],\n+      full_name = 'digraph',\n+      scope = { 'global' },\n+      short_desc = N_('enable the entering of digraphs in Insert mode'),\n+      type = 'bool',\n+      varname = 'p_dg',\n+    },\n+    {\n+      abbreviation = 'dir',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        List of directory names for the swap file, separated with commas.\n+\n+        Possible items:\n+        - The swap file will be created in the first directory where this is\n+          possible.  If it is not possible in any directory, but last\n+          directory listed in the option does not exist, it is created.\n+        - Empty means that no swap file will be used (recovery is\n+          impossible!) and no |E303| error will be given.\n+        - A directory \".\" means to put the swap file in the same directory as\n+          the edited file.  On Unix, a dot is prepended to the file name, so\n+          it doesn't show in a directory listing.  On MS-Windows the \"hidden\"\n+          attribute is set and a dot prepended if possible.\n+        - A directory starting with \"./\" (or \".\\\" for MS-Windows) means to put\n+          the swap file relative to where the edited file is.  The leading \".\"\n+          is replaced with the path name of the edited file.\n+        - For Unix and Win32, if a directory ends in two path separators \"//\",\n+          the swap file name will be built from the complete path to the file\n+          with all path separators replaced by percent '%' signs (including\n+          the colon following the drive letter on Win32). This will ensure\n+          file name uniqueness in the preserve directory.\n+          On Win32, it is also possible to end with \"\\\\\".  However, When a\n+          separating comma is following, you must use \"//\", since \"\\\\\" will\n+          include the comma in the file name. Therefore it is recommended to\n+          use '//', instead of '\\\\'.\n+        - Spaces after the comma are ignored, other spaces are considered part\n+          of the directory name.  To have a space at the start of a directory\n+          name, precede it with a backslash.\n+        - To include a comma in a directory name precede it with a backslash.\n+        - A directory name may end in an ':' or '/'.\n+        - Environment variables are expanded |:set_env|.\n+        - Careful with '\\' characters, type one before a space, type two to\n+          get one in the option (see |option-backslash|), for example: >\n+            :set dir=c:\\\\tmp,\\ dir\\\\,with\\\\,commas,\\\\\\ dir\\ with\\ spaces\n+        <\n+        Editing the same file twice will result in a warning.  Using \"/tmp\" on\n+        is discouraged: if the system crashes you lose the swap file. And\n+        others on the computer may be able to see the files.\n+        Use |:set+=| and |:set-=| when adding or removing directories from the\n+        list, this avoids problems if the Nvim default is changed.\n+\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      expand = 'nodefault',\n+      full_name = 'directory',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_('list of directory names for the swap file'),\n+      type = 'string',\n+      varname = 'p_dir',\n+    },\n+    {\n+      abbreviation = 'dy',\n+      cb = 'did_set_display',\n+      defaults = { if_true = 'lastline' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Change the way text is displayed.  This is a comma-separated list of\n+        flags:\n+        lastline\tWhen included, as much as possible of the last line\n+        \t\tin a window will be displayed.  \"@@@\" is put in the\n+        \t\tlast columns of the last screen line to indicate the\n+        \t\trest of the line is not displayed.\n+        truncate\tLike \"lastline\", but \"@@@\" is displayed in the first\n+        \t\tcolumn of the last screen line.  Overrules \"lastline\".\n+        uhex\t\tShow unprintable characters hexadecimal as <xx>\n+        \t\tinstead of using ^C and ~C.\n+        msgsep\t\tObsolete flag. Allowed but takes no effect. |msgsep|\n+\n+        When neither \"lastline\" nor \"truncate\" is included, a last line that\n+        doesn't fit is replaced with \"@\" lines.\n+\n+        The \"@\" character can be changed by setting the \"lastline\" item in\n+        'fillchars'.  The character is highlighted with |hl-NonText|.\n+      ]=],\n+      full_name = 'display',\n+      list = 'onecomma',\n+      redraw = { 'all_windows' },\n+      scope = { 'global' },\n+      short_desc = N_('list of flags for how to display text'),\n+      type = 'string',\n+      varname = 'p_dy',\n+    },\n+    {\n+      abbreviation = 'ead',\n+      cb = 'did_set_eadirection',\n+      defaults = { if_true = 'both' },\n+      desc = [=[\n+        Tells when the 'equalalways' option applies:\n+        \tver\tvertically, width of windows is not affected\n+        \thor\thorizontally, height of windows is not affected\n+        \tboth\twidth and height of windows is affected\n+      ]=],\n+      full_name = 'eadirection',\n+      scope = { 'global' },\n+      short_desc = N_(\"in which direction 'equalalways' works\"),\n+      type = 'string',\n+      varname = 'p_ead',\n+    },\n+    {\n+      abbreviation = 'ed',\n+      defaults = { if_true = false },\n+      full_name = 'edcompatible',\n+      scope = { 'global' },\n+      short_desc = N_('No description'),\n+      type = 'bool',\n+      varname = 'p_force_off',\n+    },\n+    {\n+      abbreviation = 'emo',\n+      cb = 'did_set_ambiwidth',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        When on all Unicode emoji characters are considered to be full width.\n+        This excludes \"text emoji\" characters, which are normally displayed as\n+        single width.  Unfortunately there is no good specification for this\n+        and it has been determined on trial-and-error basis.  Use the\n+        |setcellwidths()| function to change the behavior.\n+      ]=],\n+      full_name = 'emoji',\n+      redraw = { 'all_windows', 'ui_option' },\n+      scope = { 'global' },\n+      short_desc = N_('No description'),\n+      type = 'bool',\n+      varname = 'p_emoji',\n+    },\n+    {\n+      abbreviation = 'enc',\n+      cb = 'did_set_encoding',\n+      defaults = { if_true = macros('ENC_DFLT') },\n+      deny_in_modelines = true,\n+      desc = [=[\n+        String-encoding used internally and for |RPC| communication.\n+        Always UTF-8.\n+\n+        See 'fileencoding' to control file-content encoding.\n+      ]=],\n+      full_name = 'encoding',\n+      scope = { 'global' },\n+      short_desc = N_('encoding used internally'),\n+      type = 'string',\n+      varname = 'p_enc',\n+    },\n+    {\n+      abbreviation = 'eof',\n+      cb = 'did_set_eof_eol_fixeol_bomb',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Indicates that a CTRL-Z character was found at the end of the file\n+        when reading it.  Normally only happens when 'fileformat' is \"dos\".\n+        When writing a file and this option is off and the 'binary' option\n+        is on, or 'fixeol' option is off, no CTRL-Z will be written at the\n+        end of the file.\n+        See |eol-and-eof| for example settings.\n+      ]=],\n+      full_name = 'endoffile',\n+      no_mkrc = true,\n+      redraw = { 'statuslines' },\n+      scope = { 'buffer' },\n+      short_desc = N_('write CTRL-Z for last line in file'),\n+      type = 'bool',\n+      varname = 'p_eof',\n+    },\n+    {\n+      abbreviation = 'eol',\n+      cb = 'did_set_eof_eol_fixeol_bomb',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        When writing a file and this option is off and the 'binary' option\n+        is on, or 'fixeol' option is off, no <EOL> will be written for the\n+        last line in the file.  This option is automatically set or reset when\n+        starting to edit a new file, depending on whether file has an <EOL>\n+        for the last line in the file.  Normally you don't have to set or\n+        reset this option.\n+        When 'binary' is off and 'fixeol' is on the value is not used when\n+        writing the file.  When 'binary' is on or 'fixeol' is off it is used\n+        to remember the presence of a <EOL> for the last line in the file, so\n+        that when you write the file the situation from the original file can\n+        be kept.  But you can change it if you want to.\n+        See |eol-and-eof| for example settings.\n+      ]=],\n+      full_name = 'endofline',\n+      no_mkrc = true,\n+      redraw = { 'statuslines' },\n+      scope = { 'buffer' },\n+      short_desc = N_('write <EOL> for last line in file'),\n+      type = 'bool',\n+      varname = 'p_eol',\n+    },\n+    {\n+      abbreviation = 'ea',\n+      cb = 'did_set_equalalways',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        When on, all the windows are automatically made the same size after\n+        splitting or closing a window.  This also happens the moment the\n+        option is switched on.  When off, splitting a window will reduce the\n+        size of the current window and leave the other windows the same.  When\n+        closing a window the extra lines are given to the window next to it\n+        (depending on 'splitbelow' and 'splitright').\n+        When mixing vertically and horizontally split windows, a minimal size\n+        is computed and some windows may be larger if there is room.  The\n+        'eadirection' option tells in which direction the size is affected.\n+        Changing the height and width of a window can be avoided by setting\n+        'winfixheight' and 'winfixwidth', respectively.\n+        If a window size is specified when creating a new window sizes are\n+        currently not equalized (it's complicated, but may be implemented in\n+        the future).\n+      ]=],\n+      full_name = 'equalalways',\n+      scope = { 'global' },\n+      short_desc = N_('windows are automatically made the same size'),\n+      type = 'bool',\n+      varname = 'p_ea',\n+    },\n+    {\n+      abbreviation = 'ep',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        External program to use for \"=\" command.  When this option is empty\n+        the internal formatting functions are used; either 'lisp', 'cindent'\n+        or 'indentexpr'.\n+        Environment variables are expanded |:set_env|.  See |option-backslash|\n+        about including spaces and backslashes.\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      expand = true,\n+      full_name = 'equalprg',\n+      scope = { 'global', 'buffer' },\n+      secure = true,\n+      short_desc = N_('external program to use for \"=\" command'),\n+      type = 'string',\n+      varname = 'p_ep',\n+    },\n+    {\n+      abbreviation = 'eb',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Ring the bell (beep or screen flash) for error messages.  This only\n+        makes a difference for error messages, the bell will be used always\n+        for a lot of errors without a message (e.g., hitting <Esc> in Normal\n+        mode).  See 'visualbell' to make the bell behave like a screen flash\n+        or do nothing. See 'belloff' to finetune when to ring the bell.\n+      ]=],\n+      full_name = 'errorbells',\n+      scope = { 'global' },\n+      short_desc = N_('ring the bell for error messages'),\n+      type = 'bool',\n+      varname = 'p_eb',\n+    },\n+    {\n+      abbreviation = 'ef',\n+      defaults = { if_true = macros('DFLT_ERRORFILE') },\n+      desc = [=[\n+        Name of the errorfile for the QuickFix mode (see |:cf|).\n+        When the \"-q\" command-line argument is used, 'errorfile' is set to the\n+        following argument.  See |-q|.\n+        NOT used for the \":make\" command.  See 'makeef' for that.\n+        Environment variables are expanded |:set_env|.\n+        See |option-backslash| about including spaces and backslashes.\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      expand = true,\n+      full_name = 'errorfile',\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_('name of the errorfile for the QuickFix mode'),\n+      type = 'string',\n+      varname = 'p_ef',\n+    },\n+    {\n+      abbreviation = 'efm',\n+      defaults = {\n+        if_true = macros('DFLT_EFM'),\n+        doc = 'is very long',\n+      },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Scanf-like description of the format for the lines in the error file\n+        (see |errorformat|).\n+      ]=],\n+      full_name = 'errorformat',\n+      list = 'onecomma',\n+      scope = { 'global', 'buffer' },\n+      short_desc = N_('description of the lines in the error file'),\n+      type = 'string',\n+      varname = 'p_efm',\n+    },\n+    {\n+      abbreviation = 'ei',\n+      cb = 'did_set_eventignore',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        A list of autocommand event names, which are to be ignored.\n+        When set to \"all\" or when \"all\" is one of the items, all autocommand\n+        events are ignored, autocommands will not be executed.\n+        Otherwise this is a comma-separated list of event names.  Example: >\n+            :set ei=WinEnter,WinLeave\n+        <\n+      ]=],\n+      full_name = 'eventignore',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('autocommand events that are ignored'),\n+      type = 'string',\n+      varname = 'p_ei',\n+    },\n+    {\n+      abbreviation = 'et',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        In Insert mode: Use the appropriate number of spaces to insert a\n+        <Tab>.  Spaces are used in indents with the '>' and '<' commands and\n+        when 'autoindent' is on.  To insert a real tab when 'expandtab' is\n+        on, use CTRL-V<Tab>.  See also |:retab| and |ins-expandtab|.\n+      ]=],\n+      full_name = 'expandtab',\n+      scope = { 'buffer' },\n+      short_desc = N_('use spaces when <Tab> is inserted'),\n+      type = 'bool',\n+      varname = 'p_et',\n+    },\n+    {\n+      abbreviation = 'ex',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Automatically execute .nvim.lua, .nvimrc, and .exrc files in the\n+        current directory, if the file is in the |trust| list. Use |:trust| to\n+        manage trusted files. See also |vim.secure.read()|.\n+\n+        Compare 'exrc' to |editorconfig|:\n+        - 'exrc' can execute any code; editorconfig only specifies settings.\n+        - 'exrc' is Nvim-specific; editorconfig works in other editors.\n+\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      full_name = 'exrc',\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_('read .nvimrc and .exrc in the current directory'),\n+      type = 'bool',\n+      varname = 'p_exrc',\n+    },\n+    {\n+      abbreviation = 'fenc',\n+      alloced = true,\n+      cb = 'did_set_encoding',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        File-content encoding for the current buffer. Conversion is done with\n+        iconv() or as specified with 'charconvert'.\n+\n+        When 'fileencoding' is not UTF-8, conversion will be done when\n+        writing the file.  For reading see below.\n+        When 'fileencoding' is empty, the file will be saved with UTF-8\n+        encoding (no conversion when reading or writing a file).\n+\n+        WARNING: Conversion to a non-Unicode encoding can cause loss of\n+        information!\n+\n+        See |encoding-names| for the possible values.  Additionally, values may be\n+        specified that can be handled by the converter, see\n+        |mbyte-conversion|.\n+\n+        When reading a file 'fileencoding' will be set from 'fileencodings'.\n+        To read a file in a certain encoding it won't work by setting\n+        'fileencoding', use the |++enc| argument.  One exception: when\n+        'fileencodings' is empty the value of 'fileencoding' is used.\n+        For a new file the global value of 'fileencoding' is used.\n+\n+        Prepending \"8bit-\" and \"2byte-\" has no meaning here, they are ignored.\n+        When the option is set, the value is converted to lowercase.  Thus\n+        you can set it with uppercase values too.  '_' characters are\n+        replaced with '-'.  If a name is recognized from the list at\n+        |encoding-names|, it is replaced by the standard name.  For example\n+        \"ISO8859-2\" becomes \"iso-8859-2\".\n+\n+        When this option is set, after starting to edit a file, the 'modified'\n+        option is set, because the file would be different when written.\n+\n+        Keep in mind that changing 'fenc' from a modeline happens\n+        AFTER the text has been read, thus it applies to when the file will be\n+        written.  If you do set 'fenc' in a modeline, you might want to set\n+        'nomodified' to avoid not being able to \":q\".\n+\n+        This option cannot be changed when 'modifiable' is off.\n+      ]=],\n+      full_name = 'fileencoding',\n+      no_mkrc = true,\n+      redraw = { 'statuslines', 'current_buffer' },\n+      scope = { 'buffer' },\n+      short_desc = N_('file encoding for multi-byte text'),\n+      tags = { 'E213' },\n+      type = 'string',\n+      varname = 'p_fenc',\n+    },\n+    {\n+      abbreviation = 'fencs',\n+      defaults = { if_true = 'ucs-bom,utf-8,default,latin1' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        This is a list of character encodings considered when starting to edit\n+        an existing file.  When a file is read, Vim tries to use the first\n+        mentioned character encoding.  If an error is detected, the next one\n+        in the list is tried.  When an encoding is found that works,\n+        'fileencoding' is set to it.  If all fail, 'fileencoding' is set to\n+        an empty string, which means that UTF-8 is used.\n+        \tWARNING: Conversion can cause loss of information! You can use\n+        \tthe |++bad| argument to specify what is done with characters\n+        \tthat can't be converted.\n+        For an empty file or a file with only ASCII characters most encodings\n+        will work and the first entry of 'fileencodings' will be used (except\n+        \"ucs-bom\", which requires the BOM to be present).  If you prefer\n+        another encoding use an BufReadPost autocommand event to test if your\n+        preferred encoding is to be used.  Example: >\n+        \tau BufReadPost * if search('\\S', 'w') == 0 |\n+        \t\t\\ set fenc=iso-2022-jp | endif\n+        <\tThis sets 'fileencoding' to \"iso-2022-jp\" if the file does not contain\n+        non-blank characters.\n+        When the |++enc| argument is used then the value of 'fileencodings' is\n+        not used.\n+        Note that 'fileencodings' is not used for a new file, the global value\n+        of 'fileencoding' is used instead.  You can set it with: >\n+        \t:setglobal fenc=iso-8859-2\n+        <\tThis means that a non-existing file may get a different encoding than\n+        an empty file.\n+        The special value \"ucs-bom\" can be used to check for a Unicode BOM\n+        (Byte Order Mark) at the start of the file.  It must not be preceded\n+        by \"utf-8\" or another Unicode encoding for this to work properly.\n+        An entry for an 8-bit encoding (e.g., \"latin1\") should be the last,\n+        because Vim cannot detect an error, thus the encoding is always\n+        accepted.\n+        The special value \"default\" can be used for the encoding from the\n+        environment.  It is useful when your environment uses a non-latin1\n+        encoding, such as Russian.\n+        When a file contains an illegal UTF-8 byte sequence it won't be\n+        recognized as \"utf-8\".  You can use the |8g8| command to find the\n+        illegal byte sequence.\n+        WRONG VALUES:\t\t\tWHAT'S WRONG:\n+        \tlatin1,utf-8\t\t\"latin1\" will always be used\n+        \tutf-8,ucs-bom,latin1\tBOM won't be recognized in an utf-8\n+        \t\t\t\tfile\n+        \tcp1250,latin1\t\t\"cp1250\" will always be used\n+        If 'fileencodings' is empty, 'fileencoding' is not modified.\n+        See 'fileencoding' for the possible values.\n+        Setting this option does not have an effect until the next time a file\n+        is read.\n+      ]=],\n+      full_name = 'fileencodings',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('automatically detected character encodings'),\n+      type = 'string',\n+      varname = 'p_fencs',\n+    },\n+    {\n+      abbreviation = 'ff',\n+      alloced = true,\n+      cb = 'did_set_fileformat',\n+      defaults = {\n+        if_true = macros('DFLT_FF'),\n+        doc = 'Windows: \"dos\", Unix: \"unix\"',\n+      },\n+      desc = [=[\n+        This gives the <EOL> of the current buffer, which is used for\n+        reading/writing the buffer from/to a file:\n+            dos\t    <CR><NL>\n+            unix    <NL>\n+            mac\t    <CR>\n+        When \"dos\" is used, CTRL-Z at the end of a file is ignored.\n+        See |file-formats| and |file-read|.\n+        For the character encoding of the file see 'fileencoding'.\n+        When 'binary' is set, the value of 'fileformat' is ignored, file I/O\n+        works like it was set to \"unix\".\n+        This option is set automatically when starting to edit a file and\n+        'fileformats' is not empty and 'binary' is off.\n+        When this option is set, after starting to edit a file, the 'modified'\n+        option is set, because the file would be different when written.\n+        This option cannot be changed when 'modifiable' is off.\n+      ]=],\n+      full_name = 'fileformat',\n+      no_mkrc = true,\n+      redraw = { 'curswant', 'statuslines' },\n+      scope = { 'buffer' },\n+      short_desc = N_('file format used for file I/O'),\n+      type = 'string',\n+      varname = 'p_ff',\n+    },\n+    {\n+      abbreviation = 'ffs',\n+      cb = 'did_set_fileformats',\n+      defaults = {\n+        if_true = macros('DFLT_FFS_VIM'),\n+        doc = 'Windows: \"dos,unix\", Unix: \"unix,dos\"',\n+      },\n+      deny_duplicates = true,\n+      desc = [=[\n+        This gives the end-of-line (<EOL>) formats that will be tried when\n+        starting to edit a new buffer and when reading a file into an existing\n+        buffer:\n+        - When empty, the format defined with 'fileformat' will be used\n+          always.  It is not set automatically.\n+        - When set to one name, that format will be used whenever a new buffer\n+          is opened.  'fileformat' is set accordingly for that buffer.  The\n+          'fileformats' name will be used when a file is read into an existing\n+          buffer, no matter what 'fileformat' for that buffer is set to.\n+        - When more than one name is present, separated by commas, automatic\n+          <EOL> detection will be done when reading a file.  When starting to\n+          edit a file, a check is done for the <EOL>:\n+          1. If all lines end in <CR><NL>, and 'fileformats' includes \"dos\",\n+             'fileformat' is set to \"dos\".\n+          2. If a <NL> is found and 'fileformats' includes \"unix\", 'fileformat'\n+             is set to \"unix\".  Note that when a <NL> is found without a\n+             preceding <CR>, \"unix\" is preferred over \"dos\".\n+          3. If 'fileformat' has not yet been set, and if a <CR> is found, and\n+             if 'fileformats' includes \"mac\", 'fileformat' is set to \"mac\".\n+             This means that \"mac\" is only chosen when:\n+              \"unix\" is not present or no <NL> is found in the file, and\n+              \"dos\" is not present or no <CR><NL> is found in the file.\n+             Except: if \"unix\" was chosen, but there is a <CR> before\n+             the first <NL>, and there appear to be more <CR>s than <NL>s in\n+             the first few lines, \"mac\" is used.\n+          4. If 'fileformat' is still not set, the first name from\n+             'fileformats' is used.\n+          When reading a file into an existing buffer, the same is done, but\n+          this happens like 'fileformat' has been set appropriately for that\n+          file only, the option is not changed.\n+        When 'binary' is set, the value of 'fileformats' is not used.\n+\n+        When Vim starts up with an empty buffer the first item is used.  You\n+        can overrule this by setting 'fileformat' in your .vimrc.\n+\n+        For systems with a Dos-like <EOL> (<CR><NL>), when reading files that\n+        are \":source\"ed and for vimrc files, automatic <EOL> detection may be\n+        done:\n+        - When 'fileformats' is empty, there is no automatic detection.  Dos\n+          format will be used.\n+        - When 'fileformats' is set to one or more names, automatic detection\n+          is done.  This is based on the first <NL> in the file: If there is a\n+          <CR> in front of it, Dos format is used, otherwise Unix format is\n+          used.\n+        Also see |file-formats|.\n+      ]=],\n+      full_name = 'fileformats',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_(\"automatically detected values for 'fileformat'\"),\n+      type = 'string',\n+      varname = 'p_ffs',\n+    },\n+    {\n+      abbreviation = 'fic',\n+      defaults = {\n+        condition = 'CASE_INSENSITIVE_FILENAME',\n+        if_false = false,\n+        if_true = true,\n+        doc = [[on for systems where case in file\n+   names is normally ignored]],\n+      },\n+      desc = [=[\n+        When set case is ignored when using file names and directories.\n+        See 'wildignorecase' for only ignoring case when doing completion.\n+      ]=],\n+      full_name = 'fileignorecase',\n+      scope = { 'global' },\n+      short_desc = N_('ignore case when using file names'),\n+      type = 'bool',\n+      varname = 'p_fic',\n+    },\n+    {\n+      abbreviation = 'ft',\n+      alloced = true,\n+      cb = 'did_set_filetype_or_syntax',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        When this option is set, the FileType autocommand event is triggered.\n+        All autocommands that match with the value of this option will be\n+        executed.  Thus the value of 'filetype' is used in place of the file\n+        name.\n+        Otherwise this option does not always reflect the current file type.\n+        This option is normally set when the file type is detected.  To enable\n+        this use the \":filetype on\" command. |:filetype|\n+        Setting this option to a different value is most useful in a modeline,\n+        for a file for which the file type is not automatically recognized.\n+        Example, for in an IDL file: >\n+        \t/* vim: set filetype=idl : */\n+        <\t|FileType| |filetypes|\n+        When a dot appears in the value then this separates two filetype\n+        names.  Example: >\n+        \t/* vim: set filetype=c.doxygen : */\n+        <\tThis will use the \"c\" filetype first, then the \"doxygen\" filetype.\n+        This works both for filetype plugins and for syntax files.  More than\n+        one dot may appear.\n+        This option is not copied to another buffer, independent of the 's' or\n+        'S' flag in 'cpoptions'.\n+        Only normal file name characters can be used, `/\\*?[|<>` are illegal.\n+      ]=],\n+      expand = true,\n+      full_name = 'filetype',\n+      noglob = true,\n+      normal_fname_chars = true,\n+      scope = { 'buffer' },\n+      short_desc = N_('type of file, used for autocommands'),\n+      type = 'string',\n+      varname = 'p_ft',\n+    },\n+    {\n+      abbreviation = 'fcs',\n+      alloced = true,\n+      cb = 'did_set_chars_option',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Characters to fill the statuslines, vertical separators and special\n+        lines in the window.\n+        It is a comma-separated list of items.  Each item has a name, a colon\n+        and the value of that item:\n+\n+          item\t\tdefault\t\tUsed for ~\n+          stl\t\t' ' or '^'\tstatusline of the current window\n+          stlnc\t\t' ' or '='\tstatusline of the non-current windows\n+          wbr\t\t' '\t\twindow bar\n+          horiz\t\t'─' or '-'\thorizontal separators |:split|\n+          horizup\t'┴' or '-'\tupwards facing horizontal separator\n+          horizdown\t'┬' or '-'\tdownwards facing horizontal separator\n+          vert\t\t'│' or '|'\tvertical separators |:vsplit|\n+          vertleft\t'┤' or '|'\tleft facing vertical separator\n+          vertright\t'├' or '|'\tright facing vertical separator\n+          verthoriz\t'┼' or '+'\toverlapping vertical and horizontal\n+        \t\t\t\tseparator\n+          fold\t\t'·' or '-'\tfilling 'foldtext'\n+          foldopen\t'-'\t\tmark the beginning of a fold\n+          foldclose\t'+'\t\tshow a closed fold\n+          foldsep\t'│' or '|'      open fold middle marker\n+          diff\t\t'-'\t\tdeleted lines of the 'diff' option\n+          msgsep\t' '\t\tmessage separator 'display'\n+          eob\t\t'~'\t\tempty lines at the end of a buffer\n+          lastline\t'@'\t\t'display' contains lastline/truncate\n+\n+        Any one that is omitted will fall back to the default.  For \"stl\" and\n+        \"stlnc\" the space will be used when there is highlighting, '^' or '='\n+        otherwise.\n+\n+        Note that \"horiz\", \"horizup\", \"horizdown\", \"vertleft\", \"vertright\" and\n+        \"verthoriz\" are only used when 'laststatus' is 3, since only vertical\n+        window separators are used otherwise.\n+\n+        If 'ambiwidth' is \"double\" then \"horiz\", \"horizup\", \"horizdown\",\n+        \"vert\", \"vertleft\", \"vertright\", \"verthoriz\", \"foldsep\" and \"fold\"\n+        default to single-byte alternatives.\n+\n+        Example: >\n+            :set fillchars=stl:^,stlnc:=,vert:│,fold:·,diff:-\n+        <\tThis is similar to the default, except that these characters will also\n+        be used when there is highlighting.\n+\n+        For the \"stl\", \"stlnc\", \"foldopen\", \"foldclose\" and \"foldsep\" items\n+        single-byte and multibyte characters are supported.  But double-width\n+        characters are not supported.\n+\n+        The highlighting used for these items:\n+          item\t\thighlight group ~\n+          stl\t\tStatusLine\t\t|hl-StatusLine|\n+          stlnc\t\tStatusLineNC\t\t|hl-StatusLineNC|\n+          wbr\t\tWinBar\t\t\t|hl-WinBar| or |hl-WinBarNC|\n+          horiz\t\tWinSeparator\t\t|hl-WinSeparator|\n+          horizup\tWinSeparator\t\t|hl-WinSeparator|\n+          horizdown\tWinSeparator\t\t|hl-WinSeparator|\n+          vert\t\tWinSeparator\t\t|hl-WinSeparator|\n+          vertleft\tWinSeparator\t\t|hl-WinSeparator|\n+          vertright\tWinSeparator\t\t|hl-WinSeparator|\n+          verthoriz\tWinSeparator\t\t|hl-WinSeparator|\n+          fold\t\tFolded\t\t\t|hl-Folded|\n+          diff\t\tDiffDelete\t\t|hl-DiffDelete|\n+          eob\t\tEndOfBuffer\t\t|hl-EndOfBuffer|\n+          lastline\tNonText\t\t\t|hl-NonText|\n+      ]=],\n+      full_name = 'fillchars',\n+      list = 'onecomma',\n+      redraw = { 'current_window' },\n+      scope = { 'global', 'window' },\n+      short_desc = N_('characters to use for displaying special items'),\n+      type = 'string',\n+      varname = 'p_fcs',\n+    },\n+    {\n+      abbreviation = 'fixeol',\n+      cb = 'did_set_eof_eol_fixeol_bomb',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        When writing a file and this option is on, <EOL> at the end of file\n+        will be restored if missing.  Turn this option off if you want to\n+        preserve the situation from the original file.\n+        When the 'binary' option is set the value of this option doesn't\n+        matter.\n+        See the 'endofline' option.\n+        See |eol-and-eof| for example settings.\n+      ]=],\n+      full_name = 'fixendofline',\n+      redraw = { 'statuslines' },\n+      scope = { 'buffer' },\n+      short_desc = N_('make sure last line in file has <EOL>'),\n+      type = 'bool',\n+      varname = 'p_fixeol',\n+    },\n+    {\n+      abbreviation = 'fcl',\n+      cb = 'did_set_foldclose',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        When set to \"all\", a fold is closed when the cursor isn't in it and\n+        its level is higher than 'foldlevel'.  Useful if you want folds to\n+        automatically close when moving out of them.\n+      ]=],\n+      full_name = 'foldclose',\n+      list = 'onecomma',\n+      redraw = { 'current_window' },\n+      scope = { 'global' },\n+      short_desc = N_('close a fold when the cursor leaves it'),\n+      type = 'string',\n+      varname = 'p_fcl',\n+    },\n+    {\n+      abbreviation = 'fdc',\n+      alloced = true,\n+      cb = 'did_set_foldcolumn',\n+      defaults = { if_true = '0' },\n+      desc = [=[\n+        When and how to draw the foldcolumn. Valid values are:\n+            \"auto\":       resize to the minimum amount of folds to display.\n+            \"auto:[1-9]\": resize to accommodate multiple folds up to the\n+        \t\t  selected level\n+            0:            to disable foldcolumn\n+            \"[1-9]\":      to display a fixed number of columns\n+        See |folding|.\n+      ]=],\n+      full_name = 'foldcolumn',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('width of the column used to indicate folds'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'fen',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        When off, all folds are open.  This option can be used to quickly\n+        switch between showing all text unfolded and viewing the text with\n+        folds (including manually opened or closed folds).  It can be toggled\n+        with the |zi| command.  The 'foldcolumn' will remain blank when\n+        'foldenable' is off.\n+        This option is set by commands that create a new fold or close a fold.\n+        See |folding|.\n+      ]=],\n+      full_name = 'foldenable',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('set to display all folds open'),\n+      type = 'bool',\n+    },\n+    {\n+      abbreviation = 'fde',\n+      alloced = true,\n+      cb = 'did_set_foldexpr',\n+      defaults = { if_true = '0' },\n+      desc = [=[\n+        The expression used for when 'foldmethod' is \"expr\".  It is evaluated\n+        for each line to obtain its fold level.  The context is set to the\n+        script where 'foldexpr' was set, script-local items can be accessed.\n+        See |fold-expr| for the usage.\n+\n+        The expression will be evaluated in the |sandbox| if set from a\n+        modeline, see |sandbox-option|.\n+        This option can't be set from a |modeline| when the 'diff' option is\n+        on or the 'modelineexpr' option is off.\n+\n+        It is not allowed to change text or jump to another window while\n+        evaluating 'foldexpr' |textlock|.\n+      ]=],\n+      full_name = 'foldexpr',\n+      modelineexpr = true,\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('expression used when \\'foldmethod\\' is \"expr\"'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'fdi',\n+      alloced = true,\n+      cb = 'did_set_foldignore',\n+      defaults = { if_true = '#' },\n+      desc = [=[\n+        Used only when 'foldmethod' is \"indent\".  Lines starting with\n+        characters in 'foldignore' will get their fold level from surrounding\n+        lines.  White space is skipped before checking for this character.\n+        The default \"#\" works well for C programs.  See |fold-indent|.\n+      ]=],\n+      full_name = 'foldignore',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('ignore lines when \\'foldmethod\\' is \"indent\"'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'fdl',\n+      cb = 'did_set_foldlevel',\n+      defaults = { if_true = 0 },\n+      desc = [=[\n+        Sets the fold level: Folds with a higher level will be closed.\n+        Setting this option to zero will close all folds.  Higher numbers will\n+        close fewer folds.\n+        This option is set by commands like |zm|, |zM| and |zR|.\n+        See |fold-foldlevel|.\n+      ]=],\n+      full_name = 'foldlevel',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('close folds with a level higher than this'),\n+      type = 'number',\n+    },\n+    {\n+      abbreviation = 'fdls',\n+      defaults = { if_true = -1 },\n+      desc = [=[\n+        Sets 'foldlevel' when starting to edit another buffer in a window.\n+        Useful to always start editing with all folds closed (value zero),\n+        some folds closed (one) or no folds closed (99).\n+        This is done before reading any modeline, thus a setting in a modeline\n+        overrules this option.  Starting to edit a file for |diff-mode| also\n+        ignores this option and closes all folds.\n+        It is also done before BufReadPre autocommands, to allow an autocmd to\n+        overrule the 'foldlevel' value for specific files.\n+        When the value is negative, it is not used.\n+      ]=],\n+      full_name = 'foldlevelstart',\n+      redraw = { 'curswant' },\n+      scope = { 'global' },\n+      short_desc = N_(\"'foldlevel' when starting to edit a file\"),\n+      type = 'number',\n+      varname = 'p_fdls',\n+    },\n+    {\n+      abbreviation = 'fmr',\n+      alloced = true,\n+      cb = 'did_set_foldmarker',\n+      defaults = { if_true = '{{{,}}}' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        The start and end marker used when 'foldmethod' is \"marker\".  There\n+        must be one comma, which separates the start and end marker.  The\n+        marker is a literal string (a regular expression would be too slow).\n+        See |fold-marker|.\n+      ]=],\n+      full_name = 'foldmarker',\n+      list = 'onecomma',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('markers used when \\'foldmethod\\' is \"marker\"'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'fdm',\n+      alloced = true,\n+      cb = 'did_set_foldmethod',\n+      defaults = { if_true = 'manual' },\n+      desc = [=[\n+        The kind of folding used for the current window.  Possible values:\n+        |fold-manual|\tmanual\t    Folds are created manually.\n+        |fold-indent|\tindent\t    Lines with equal indent form a fold.\n+        |fold-expr|\texpr\t    'foldexpr' gives the fold level of a line.\n+        |fold-marker|\tmarker\t    Markers are used to specify folds.\n+        |fold-syntax|\tsyntax\t    Syntax highlighting items specify folds.\n+        |fold-diff|\tdiff\t    Fold text that is not changed.\n+      ]=],\n+      full_name = 'foldmethod',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('folding type'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'fml',\n+      cb = 'did_set_foldminlines',\n+      defaults = { if_true = 1 },\n+      desc = [=[\n+        Sets the number of screen lines above which a fold can be displayed\n+        closed.  Also for manually closed folds.  With the default value of\n+        one a fold can only be closed if it takes up two or more screen lines.\n+        Set to zero to be able to close folds of just one screen line.\n+        Note that this only has an effect on what is displayed.  After using\n+        \"zc\" to close a fold, which is displayed open because it's smaller\n+        than 'foldminlines', a following \"zc\" may close a containing fold.\n+      ]=],\n+      full_name = 'foldminlines',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('minimum number of lines for a fold to be closed'),\n+      type = 'number',\n+    },\n+    {\n+      abbreviation = 'fdn',\n+      cb = 'did_set_foldnestmax',\n+      defaults = { if_true = 20 },\n+      desc = [=[\n+        Sets the maximum nesting of folds for the \"indent\" and \"syntax\"\n+        methods.  This avoids that too many folds will be created.  Using more\n+        than 20 doesn't work, because the internal limit is 20.\n+      ]=],\n+      full_name = 'foldnestmax',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('maximum fold depth'),\n+      type = 'number',\n+    },\n+    {\n+      abbreviation = 'fdo',\n+      cb = 'did_set_foldopen',\n+      defaults = { if_true = 'block,hor,mark,percent,quickfix,search,tag,undo' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Specifies for which type of commands folds will be opened, if the\n+        command moves the cursor into a closed fold.  It is a comma-separated\n+        list of items.\n+        NOTE: When the command is part of a mapping this option is not used.\n+        Add the |zv| command to the mapping to get the same effect.\n+        (rationale: the mapping may want to control opening folds itself)\n+\n+        \titem\t\tcommands ~\n+        \tall\t\tany\n+        \tblock\t\t(, {, [[, [{, etc.\n+        \thor\t\thorizontal movements: \"l\", \"w\", \"fx\", etc.\n+        \tinsert\t\tany command in Insert mode\n+        \tjump\t\tfar jumps: \"G\", \"gg\", etc.\n+        \tmark\t\tjumping to a mark: \"'m\", CTRL-O, etc.\n+        \tpercent\t\t\"%\"\n+        \tquickfix\t\":cn\", \":crew\", \":make\", etc.\n+        \tsearch\t\tsearch for a pattern: \"/\", \"n\", \"*\", \"gd\", etc.\n+        \t\t\t(not for a search pattern in a \":\" command)\n+        \t\t\tAlso for |[s| and |]s|.\n+        \ttag\t\tjumping to a tag: \":ta\", CTRL-T, etc.\n+        \tundo\t\tundo or redo: \"u\" and CTRL-R\n+        When a movement command is used for an operator (e.g., \"dl\" or \"y%\")\n+        this option is not used.  This means the operator will include the\n+        whole closed fold.\n+        Note that vertical movements are not here, because it would make it\n+        very difficult to move onto a closed fold.\n+        In insert mode the folds containing the cursor will always be open\n+        when text is inserted.\n+        To close folds you can re-apply 'foldlevel' with the |zx| command or\n+        set the 'foldclose' option to \"all\".\n+      ]=],\n+      full_name = 'foldopen',\n+      list = 'onecomma',\n+      redraw = { 'curswant' },\n+      scope = { 'global' },\n+      short_desc = N_('for which commands a fold will be opened'),\n+      type = 'string',\n+      varname = 'p_fdo',\n+    },\n+    {\n+      abbreviation = 'fdt',\n+      alloced = true,\n+      cb = 'did_set_optexpr',\n+      defaults = { if_true = 'foldtext()' },\n+      desc = [=[\n+        An expression which is used to specify the text displayed for a closed\n+        fold.  The context is set to the script where 'foldexpr' was set,\n+        script-local items can be accessed.  See |fold-foldtext| for the\n+        usage.\n+\n+        The expression will be evaluated in the |sandbox| if set from a\n+        modeline, see |sandbox-option|.\n+        This option cannot be set in a modeline when 'modelineexpr' is off.\n+\n+        It is not allowed to change text or jump to another window while\n+        evaluating 'foldtext' |textlock|.\n+      ]=],\n+      full_name = 'foldtext',\n+      modelineexpr = true,\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('expression used to display for a closed fold'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'fex',\n+      alloced = true,\n+      cb = 'did_set_optexpr',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        Expression which is evaluated to format a range of lines for the |gq|\n+        operator or automatic formatting (see 'formatoptions').  When this\n+        option is empty 'formatprg' is used.\n+\n+        The |v:lnum|  variable holds the first line to be formatted.\n+        The |v:count| variable holds the number of lines to be formatted.\n+        The |v:char|  variable holds the character that is going to be\n+        \t      inserted if the expression is being evaluated due to\n+        \t      automatic formatting.  This can be empty.  Don't insert\n+        \t      it yet!\n+\n+        Example: >\n+        \t:set formatexpr=mylang#Format()\n+        <\tThis will invoke the mylang#Format() function in the\n+        autoload/mylang.vim file in 'runtimepath'. |autoload|\n+\n+        The expression is also evaluated when 'textwidth' is set and adding\n+        text beyond that limit.  This happens under the same conditions as\n+        when internal formatting is used.  Make sure the cursor is kept in the\n+        same spot relative to the text then!  The |mode()| function will\n+        return \"i\" or \"R\" in this situation.\n+\n+        When the expression evaluates to non-zero Vim will fall back to using\n+        the internal format mechanism.\n+\n+        If the expression starts with s: or |<SID>|, then it is replaced with\n+        the script ID (|local-function|). Example: >\n+        \tset formatexpr=s:MyFormatExpr()\n+        \tset formatexpr=<SID>SomeFormatExpr()\n+        <\tOtherwise, the expression is evaluated in the context of the script\n+        where the option was set, thus script-local items are available.\n+\n+        The expression will be evaluated in the |sandbox| when set from a\n+        modeline, see |sandbox-option|.  That stops the option from working,\n+        since changing the buffer text is not allowed.\n+        This option cannot be set in a modeline when 'modelineexpr' is off.\n+        NOTE: This option is set to \"\" when 'compatible' is set.\n+      ]=],\n+      full_name = 'formatexpr',\n+      modelineexpr = true,\n+      scope = { 'buffer' },\n+      short_desc = N_('expression used with \"gq\" command'),\n+      type = 'string',\n+      varname = 'p_fex',\n+    },\n+    {\n+      abbreviation = 'fo',\n+      alloced = true,\n+      cb = 'did_set_formatoptions',\n+      defaults = { if_true = macros('DFLT_FO_VIM') },\n+      desc = [=[\n+        This is a sequence of letters which describes how automatic\n+        formatting is to be done.  See |fo-table|.  Commas can be inserted for\n+        readability.\n+        To avoid problems with flags that are added in the future, use the\n+        \"+=\" and \"-=\" feature of \":set\" |add-option-flags|.\n+      ]=],\n+      full_name = 'formatoptions',\n+      list = 'flags',\n+      scope = { 'buffer' },\n+      short_desc = N_('how automatic formatting is to be done'),\n+      type = 'string',\n+      varname = 'p_fo',\n+    },\n+    {\n+      abbreviation = 'flp',\n+      alloced = true,\n+      defaults = { if_true = '^\\\\s*\\\\d\\\\+[\\\\]:.)}\\\\t ]\\\\s*' },\n+      desc = [=[\n+        A pattern that is used to recognize a list header.  This is used for\n+        the \"n\" flag in 'formatoptions'.\n+        The pattern must match exactly the text that will be the indent for\n+        the line below it.  You can use |/\\ze| to mark the end of the match\n+        while still checking more characters.  There must be a character\n+        following the pattern, when it matches the whole line it is handled\n+        like there is no match.\n+        The default recognizes a number, followed by an optional punctuation\n+        character and white space.\n+      ]=],\n+      full_name = 'formatlistpat',\n+      scope = { 'buffer' },\n+      short_desc = N_('pattern used to recognize a list header'),\n+      type = 'string',\n+      varname = 'p_flp',\n+    },\n+    {\n+      abbreviation = 'fp',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        The name of an external program that will be used to format the lines\n+        selected with the |gq| operator.  The program must take the input on\n+        stdin and produce the output on stdout.  The Unix program \"fmt\" is\n+        such a program.\n+        If the 'formatexpr' option is not empty it will be used instead.\n+        Otherwise, if 'formatprg' option is an empty string, the internal\n+        format function will be used |C-indenting|.\n+        Environment variables are expanded |:set_env|.  See |option-backslash|\n+        about including spaces and backslashes.\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      expand = true,\n+      full_name = 'formatprg',\n+      scope = { 'global', 'buffer' },\n+      secure = true,\n+      short_desc = N_('name of external program used with \"gq\" command'),\n+      type = 'string',\n+      varname = 'p_fp',\n+    },\n+    {\n+      abbreviation = 'fs',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        When on, the OS function fsync() will be called after saving a file\n+        (|:write|, |writefile()|, …), |swap-file|, |undo-persistence| and |shada-file|.\n+        This flushes the file to disk, ensuring that it is safely written.\n+        Slow on some systems: writing buffers, quitting Nvim, and other\n+        operations may sometimes take a few seconds.\n+\n+        Files are ALWAYS flushed ('fsync' is ignored) when:\n+        - |CursorHold| event is triggered\n+        - |:preserve| is called\n+        - system signals low battery life\n+        - Nvim exits abnormally\n+\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      full_name = 'fsync',\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_('whether to invoke fsync() after file write'),\n+      type = 'bool',\n+      varname = 'p_fs',\n+    },\n+    {\n+      abbreviation = 'gd',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        When on, the \":substitute\" flag 'g' is default on.  This means that\n+        all matches in a line are substituted instead of one.  When a 'g' flag\n+        is given to a \":substitute\" command, this will toggle the substitution\n+        of all or one match.  See |complex-change|.\n+\n+        \tcommand\t\t'gdefault' on\t'gdefault' off\t~\n+        \t:s///\t\t  subst. all\t  subst. one\n+        \t:s///g\t\t  subst. one\t  subst. all\n+        \t:s///gg\t\t  subst. all\t  subst. one\n+\n+        DEPRECATED: Setting this option may break plugins that are not aware\n+        of this option.  Also, many users get confused that adding the /g flag\n+        has the opposite effect of that it normally does.\n+      ]=],\n+      full_name = 'gdefault',\n+      scope = { 'global' },\n+      short_desc = N_('the \":substitute\" flag \\'g\\' is default on'),\n+      type = 'bool',\n+      varname = 'p_gd',\n+    },\n+    {\n+      abbreviation = 'gfm',\n+      defaults = { if_true = macros('DFLT_GREPFORMAT') },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Format to recognize for the \":grep\" command output.\n+        This is a scanf-like string that uses the same format as the\n+        'errorformat' option: see |errorformat|.\n+      ]=],\n+      full_name = 'grepformat',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_(\"format of 'grepprg' output\"),\n+      type = 'string',\n+      varname = 'p_gefm',\n+    },\n+    {\n+      abbreviation = 'gp',\n+      defaults = {\n+        condition = 'MSWIN',\n+        if_false = 'grep -n $* /dev/null',\n+        if_true = 'findstr /n $* nul',\n+        doc = [[\"grep -n \",\n+           Unix: \"grep -n $* /dev/null\"]],\n+      },\n+      desc = [=[\n+        Program to use for the |:grep| command.  This option may contain '%'\n+        and '#' characters, which are expanded like when used in a command-\n+        line.  The placeholder \"$*\" is allowed to specify where the arguments\n+        will be included.  Environment variables are expanded |:set_env|.  See\n+        |option-backslash| about including spaces and backslashes.\n+        When your \"grep\" accepts the \"-H\" argument, use this to make \":grep\"\n+        also work well with a single file: >\n+        \t:set grepprg=grep\\ -nH\n+        <\tSpecial value: When 'grepprg' is set to \"internal\" the |:grep| command\n+        works like |:vimgrep|, |:lgrep| like |:lvimgrep|, |:grepadd| like\n+        |:vimgrepadd| and |:lgrepadd| like |:lvimgrepadd|.\n+        See also the section |:make_makeprg|, since most of the comments there\n+        apply equally to 'grepprg'.\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      expand = true,\n+      full_name = 'grepprg',\n+      scope = { 'global', 'buffer' },\n+      secure = true,\n+      short_desc = N_('program to use for \":grep\"'),\n+      type = 'string',\n+      varname = 'p_gp',\n+    },\n+    {\n+      abbreviation = 'gcr',\n+      cb = 'did_set_guicursor',\n+      defaults = { if_true = 'n-v-c-sm:block,i-ci-ve:ver25,r-cr-o:hor20' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Configures the cursor style for each mode. Works in the GUI and many\n+        terminals.  See |tui-cursor-shape|.\n+\n+        To disable cursor-styling, reset the option: >\n+        \t:set guicursor=\n+\n+        <\tTo enable mode shapes, \"Cursor\" highlight, and blinking: >\n+        \t:set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50\n+        \t  \\,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor\n+        \t  \\,sm:block-blinkwait175-blinkoff150-blinkon175\n+\n+        <\tThe option is a comma-separated list of parts.  Each part consists of a\n+        mode-list and an argument-list:\n+        \tmode-list:argument-list,mode-list:argument-list,..\n+        The mode-list is a dash separated list of these modes:\n+        \tn\tNormal mode\n+        \tv\tVisual mode\n+        \tve\tVisual mode with 'selection' \"exclusive\" (same as 'v',\n+        \t\tif not specified)\n+        \to\tOperator-pending mode\n+        \ti\tInsert mode\n+        \tr\tReplace mode\n+        \tc\tCommand-line Normal (append) mode\n+        \tci\tCommand-line Insert mode\n+        \tcr\tCommand-line Replace mode\n+        \tsm\tshowmatch in Insert mode\n+        \ta\tall modes\n+        The argument-list is a dash separated list of these arguments:\n+        \thor{N}\thorizontal bar, {N} percent of the character height\n+        \tver{N}\tvertical bar, {N} percent of the character width\n+        \tblock\tblock cursor, fills the whole character\n+        \t\t- Only one of the above three should be present.\n+        \t\t- Default is \"block\" for each mode.\n+        \tblinkwait{N}\t\t\t\t*cursor-blinking*\n+        \tblinkon{N}\n+        \tblinkoff{N}\n+        \t\tblink times for cursor: blinkwait is the delay before\n+        \t\tthe cursor starts blinking, blinkon is the time that\n+        \t\tthe cursor is shown and blinkoff is the time that the\n+        \t\tcursor is not shown.  Times are in msec.  When one of\n+        \t\tthe numbers is zero, there is no blinking. E.g.: >\n+        \t\t\t:set guicursor=n:blinkon0\n+        <\t\t\t- Default is \"blinkon0\" for each mode.\n+        \t{group-name}\n+        \t\tHighlight group that decides the color and font of the\n+        \t\tcursor.\n+        \t\tIn the |TUI|:\n+        \t\t- |inverse|/reverse and no group-name are interpreted\n+        \t\t  as \"host-terminal default cursor colors\" which\n+        \t\t  typically means \"inverted bg and fg colors\".\n+        \t\t- |ctermfg| and |guifg| are ignored.\n+        \t{group-name}/{group-name}\n+        \t\tTwo highlight group names, the first is used when\n+        \t\tno language mappings are used, the other when they\n+        \t\tare. |language-mapping|\n+\n+        Examples of parts:\n+           n-c-v:block-nCursor\tIn Normal, Command-line and Visual mode, use a\n+        \t\t\tblock cursor with colors from the \"nCursor\"\n+        \t\t\thighlight group\n+           n-v-c-sm:block,i-ci-ve:ver25-Cursor,r-cr-o:hor20\n+        \t\t\tIn Normal et al. modes, use a block cursor\n+        \t\t\twith the default colors defined by the host\n+        \t\t\tterminal.  In Insert-likes modes, use\n+        \t\t\ta vertical bar cursor with colors from\n+        \t\t\t\"Cursor\" highlight group.  In Replace-likes\n+        \t\t\tmodes, use a underline cursor with\n+        \t\t\tdefault colors.\n+           i-ci:ver30-iCursor-blinkwait300-blinkon200-blinkoff150\n+        \t\t\tIn Insert and Command-line Insert mode, use a\n+        \t\t\t30% vertical bar cursor with colors from the\n+        \t\t\t\"iCursor\" highlight group.  Blink a bit\n+        \t\t\tfaster.\n+\n+        The 'a' mode is different.  It will set the given argument-list for\n+        all modes.  It does not reset anything to defaults.  This can be used\n+        to do a common setting for all modes.  For example, to switch off\n+        blinking: \"a:blinkon0\"\n+\n+        Examples of cursor highlighting: >\n+            :highlight Cursor gui=reverse guifg=NONE guibg=NONE\n+            :highlight Cursor gui=NONE guifg=bg guibg=fg\n+        <\n+      ]=],\n+      full_name = 'guicursor',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('GUI: settings for cursor shape and blinking'),\n+      tags = { 'E545', 'E546', 'E548', 'E549' },\n+      type = 'string',\n+      varname = 'p_guicursor',\n+    },\n+    {\n+      abbreviation = 'gfn',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        This is a list of fonts which will be used for the GUI version of Vim.\n+        In its simplest form the value is just one font name.  When\n+        the font cannot be found you will get an error message.  To try other\n+        font names a list can be specified, font names separated with commas.\n+        The first valid font is used.\n+\n+        Spaces after a comma are ignored.  To include a comma in a font name\n+        precede it with a backslash.  Setting an option requires an extra\n+        backslash before a space and a backslash.  See also\n+        |option-backslash|.  For example: >\n+            :set guifont=Screen15,\\ 7x13,font\\\\,with\\\\,commas\n+        <\twill make Vim try to use the font \"Screen15\" first, and if it fails it\n+        will try to use \"7x13\" and then \"font,with,commas\" instead.\n+\n+        If none of the fonts can be loaded, Vim will keep the current setting.\n+        If an empty font list is given, Vim will try using other resource\n+        settings (for X, it will use the Vim.font resource), and finally it\n+        will try some builtin default which should always be there (\"7x13\" in\n+        the case of X).  The font names given should be \"normal\" fonts.  Vim\n+        will try to find the related bold and italic fonts.\n+\n+        For Win32 and Mac OS: >\n+            :set guifont=*\n+        <\twill bring up a font requester, where you can pick the font you want.\n+\n+        The font name depends on the GUI used.\n+\n+        For Mac OSX you can use something like this: >\n+            :set guifont=Monaco:h10\n+        <\t\t\t\t\t\t\t\t*E236*\n+        Note that the fonts must be mono-spaced (all characters have the same\n+        width).\n+\n+        To preview a font on X11, you might be able to use the \"xfontsel\"\n+        program.  The \"xlsfonts\" program gives a list of all available fonts.\n+\n+        For the Win32 GUI\t\t\t\t\t*E244* *E245*\n+        - takes these options in the font name:\n+        \thXX - height is XX (points, can be floating-point)\n+        \twXX - width is XX (points, can be floating-point)\n+        \tb   - bold\n+        \ti   - italic\n+        \tu   - underline\n+        \ts   - strikeout\n+        \tcXX - character set XX.  Valid charsets are: ANSI, ARABIC,\n+        \t      BALTIC, CHINESEBIG5, DEFAULT, EASTEUROPE, GB2312, GREEK,\n+        \t      HANGEUL, HEBREW, JOHAB, MAC, OEM, RUSSIAN, SHIFTJIS,\n+        \t      SYMBOL, THAI, TURKISH, VIETNAMESE ANSI and BALTIC.\n+        \t      Normally you would use \"cDEFAULT\".\n+\n+          Use a ':' to separate the options.\n+        - A '_' can be used in the place of a space, so you don't need to use\n+          backslashes to escape the spaces.\n+        - Examples: >\n+            :set guifont=courier_new:h12:w5:b:cRUSSIAN\n+            :set guifont=Andale_Mono:h7.5:w4.5\n+        <\n+      ]=],\n+      deny_duplicates = true,\n+      full_name = 'guifont',\n+      list = 'onecomma',\n+      redraw = { 'ui_option' },\n+      scope = { 'global' },\n+      short_desc = N_('GUI: Name(s) of font(s) to be used'),\n+      tags = { 'E235', 'E596' },\n+      type = 'string',\n+      varname = 'p_guifont',\n+    },\n+    {\n+      abbreviation = 'gfw',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Comma-separated list of fonts to be used for double-width characters.\n+        The first font that can be loaded is used.\n+        Note: The size of these fonts must be exactly twice as wide as the one\n+        specified with 'guifont' and the same height.\n+\n+        When 'guifont' has a valid font and 'guifontwide' is empty Vim will\n+        attempt to set 'guifontwide' to a matching double-width font.\n+      ]=],\n+      full_name = 'guifontwide',\n+      list = 'onecomma',\n+      redraw = { 'ui_option' },\n+      scope = { 'global' },\n+      short_desc = N_('list of font names for double-wide characters'),\n+      tags = { 'E231', 'E533', 'E534' },\n+      type = 'string',\n+      varname = 'p_guifontwide',\n+    },\n+    {\n+      abbreviation = 'go',\n+      defaults = {\n+        if_true = '',\n+        doc = '\"egmrLT\"   (MS-Windows)',\n+      },\n+      desc = [=[\n+        This option only has an effect in the GUI version of Vim.  It is a\n+        sequence of letters which describes what components and options of the\n+        GUI should be used.\n+        To avoid problems with flags that are added in the future, use the\n+        \"+=\" and \"-=\" feature of \":set\" |add-option-flags|.\n+\n+        Valid letters are as follows:\n+        \t\t\t\t\t\t*guioptions_a* *'go-a'*\n+          'a'\tAutoselect:  If present, then whenever VISUAL mode is started,\n+        \tor the Visual area extended, Vim tries to become the owner of\n+        \tthe windowing system's global selection.  This means that the\n+        \tVisually highlighted text is available for pasting into other\n+        \tapplications as well as into Vim itself.  When the Visual mode\n+        \tends, possibly due to an operation on the text, or when an\n+        \tapplication wants to paste the selection, the highlighted text\n+        \tis automatically yanked into the \"* selection register.\n+        \tThus the selection is still available for pasting into other\n+        \tapplications after the VISUAL mode has ended.\n+        \t    If not present, then Vim won't become the owner of the\n+        \twindowing system's global selection unless explicitly told to\n+        \tby a yank or delete operation for the \"* register.\n+        \tThe same applies to the modeless selection.\n+        \t\t\t\t\t\t\t*'go-P'*\n+          'P'\tLike autoselect but using the \"+ register instead of the \"*\n+        \tregister.\n+        \t\t\t\t\t\t\t*'go-A'*\n+          'A'\tAutoselect for the modeless selection.  Like 'a', but only\n+        \tapplies to the modeless selection.\n+\n+        \t    'guioptions'   autoselect Visual  autoselect modeless ~\n+        \t\t \"\"\t\t -\t\t\t -\n+        \t\t \"a\"\t\tyes\t\t\tyes\n+        \t\t \"A\"\t\t -\t\t\tyes\n+        \t\t \"aA\"\t\tyes\t\t\tyes\n+\n+        \t\t\t\t\t\t\t*'go-c'*\n+          'c'\tUse console dialogs instead of popup dialogs for simple\n+        \tchoices.\n+        \t\t\t\t\t\t\t*'go-d'*\n+          'd'\tUse dark theme variant if available.\n+        \t\t\t\t\t\t\t*'go-e'*\n+          'e'\tAdd tab pages when indicated with 'showtabline'.\n+        \t'guitablabel' can be used to change the text in the labels.\n+        \tWhen 'e' is missing a non-GUI tab pages line may be used.\n+        \tThe GUI tabs are only supported on some systems, currently\n+        \tMac OS/X and MS-Windows.\n+        \t\t\t\t\t\t\t*'go-i'*\n+          'i'\tUse a Vim icon.\n+        \t\t\t\t\t\t\t*'go-m'*\n+          'm'\tMenu bar is present.\n+        \t\t\t\t\t\t\t*'go-M'*\n+          'M'\tThe system menu \"$VIMRUNTIME/menu.vim\" is not sourced.  Note\n+        \tthat this flag must be added in the vimrc file, before\n+        \tswitching on syntax or filetype recognition (when the |gvimrc|\n+        \tfile is sourced the system menu has already been loaded; the\n+        \t`:syntax on` and `:filetype on` commands load the menu too).\n+        \t\t\t\t\t\t\t*'go-g'*\n+          'g'\tGrey menu items: Make menu items that are not active grey.  If\n+        \t'g' is not included inactive menu items are not shown at all.\n+        \t\t\t\t\t\t\t*'go-T'*\n+          'T'\tInclude Toolbar.  Currently only in Win32 GUI.\n+        \t\t\t\t\t\t\t*'go-r'*\n+          'r'\tRight-hand scrollbar is always present.\n+        \t\t\t\t\t\t\t*'go-R'*\n+          'R'\tRight-hand scrollbar is present when there is a vertically\n+        \tsplit window.\n+        \t\t\t\t\t\t\t*'go-l'*\n+          'l'\tLeft-hand scrollbar is always present.\n+        \t\t\t\t\t\t\t*'go-L'*\n+          'L'\tLeft-hand scrollbar is present when there is a vertically\n+        \tsplit window.\n+        \t\t\t\t\t\t\t*'go-b'*\n+          'b'\tBottom (horizontal) scrollbar is present.  Its size depends on\n+        \tthe longest visible line, or on the cursor line if the 'h'\n+        \tflag is included. |gui-horiz-scroll|\n+        \t\t\t\t\t\t\t*'go-h'*\n+          'h'\tLimit horizontal scrollbar size to the length of the cursor\n+        \tline.  Reduces computations. |gui-horiz-scroll|\n+\n+        And yes, you may even have scrollbars on the left AND the right if\n+        you really want to :-).  See |gui-scrollbars| for more information.\n+\n+        \t\t\t\t\t\t\t*'go-v'*\n+          'v'\tUse a vertical button layout for dialogs.  When not included,\n+        \ta horizontal layout is preferred, but when it doesn't fit a\n+        \tvertical layout is used anyway.  Not supported in GTK 3.\n+        \t\t\t\t\t\t\t*'go-p'*\n+          'p'\tUse Pointer callbacks for X11 GUI.  This is required for some\n+        \twindow managers.  If the cursor is not blinking or hollow at\n+        \tthe right moment, try adding this flag.  This must be done\n+        \tbefore starting the GUI.  Set it in your |gvimrc|.  Adding or\n+        \tremoving it after the GUI has started has no effect.\n+        \t\t\t\t\t\t\t*'go-k'*\n+          'k'\tKeep the GUI window size when adding/removing a scrollbar, or\n+        \ttoolbar, tabline, etc.  Instead, the behavior is similar to\n+        \twhen the window is maximized and will adjust 'lines' and\n+        \t'columns' to fit to the window.  Without the 'k' flag Vim will\n+        \ttry to keep 'lines' and 'columns' the same when adding and\n+        \tremoving GUI components.\n+      ]=],\n+      enable_if = false,\n+      full_name = 'guioptions',\n+      list = 'flags',\n+      scope = { 'global' },\n+      short_desc = N_('GUI: Which components and options are used'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'gtl',\n+      desc = [=[\n+        When non-empty describes the text to use in a label of the GUI tab\n+        pages line.  When empty and when the result is empty Vim will use a\n+        default label.  See |setting-guitablabel| for more info.\n+\n+        The format of this option is like that of 'statusline'.\n+        'guitabtooltip' is used for the tooltip, see below.\n+        The expression will be evaluated in the |sandbox| when set from a\n+        modeline, see |sandbox-option|.\n+        This option cannot be set in a modeline when 'modelineexpr' is off.\n+\n+        Only used when the GUI tab pages line is displayed.  'e' must be\n+        present in 'guioptions'.  For the non-GUI tab pages line 'tabline' is\n+        used.\n+      ]=],\n+      enable_if = false,\n+      full_name = 'guitablabel',\n+      modelineexpr = true,\n+      redraw = { 'current_window' },\n+      scope = { 'global' },\n+      short_desc = N_('GUI: custom label for a tab page'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'gtt',\n+      desc = [=[\n+        When non-empty describes the text to use in a tooltip for the GUI tab\n+        pages line.  When empty Vim will use a default tooltip.\n+        This option is otherwise just like 'guitablabel' above.\n+        You can include a line break.  Simplest method is to use |:let|: >\n+        \t:let &guitabtooltip = \"line one\\nline two\"\n+        <\n+      ]=],\n+      enable_if = false,\n+      full_name = 'guitabtooltip',\n+      redraw = { 'current_window' },\n+      scope = { 'global' },\n+      short_desc = N_('GUI: custom tooltip for a tab page'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'hf',\n+      cb = 'did_set_helpfile',\n+      defaults = {\n+        if_true = macros('DFLT_HELPFILE'),\n+        doc = [[(MS-Windows) \"$VIMRUNTIME\\doc\\help.txt\"\n+                  (others) \"$VIMRUNTIME/doc/help.txt\")\n+      ]],\n+      },\n+      desc = [=[\n+        Name of the main help file.  All distributed help files should be\n+        placed together in one directory.  Additionally, all \"doc\" directories\n+        in 'runtimepath' will be used.\n+        Environment variables are expanded |:set_env|.  For example:\n+        \"$VIMRUNTIME/doc/help.txt\".  If $VIMRUNTIME is not set, $VIM is also\n+        tried.  Also see |$VIMRUNTIME| and |option-backslash| about including\n+        spaces and backslashes.\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      expand = true,\n+      full_name = 'helpfile',\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_('full path name of the main help file'),\n+      type = 'string',\n+      varname = 'p_hf',\n+    },\n+    {\n+      abbreviation = 'hh',\n+      cb = 'did_set_helpheight',\n+      defaults = { if_true = 20 },\n+      desc = [=[\n+        Minimal initial height of the help window when it is opened with the\n+        \":help\" command.  The initial height of the help window is half of the\n+        current window, or (when the 'ea' option is on) the same as other\n+        windows.  When the height is less than 'helpheight', the height is\n+        set to 'helpheight'.  Set to zero to disable.\n+      ]=],\n+      full_name = 'helpheight',\n+      scope = { 'global' },\n+      short_desc = N_('minimum height of a new help window'),\n+      type = 'number',\n+      varname = 'p_hh',\n+    },\n+    {\n+      abbreviation = 'hlg',\n+      cb = 'did_set_helplang',\n+      defaults = {\n+        if_true = '',\n+        doc = 'messages language or empty',\n+      },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Comma-separated list of languages.  Vim will use the first language\n+        for which the desired help can be found.  The English help will always\n+        be used as a last resort.  You can add \"en\" to prefer English over\n+        another language, but that will only find tags that exist in that\n+        language and not in the English help.\n+        Example: >\n+        \t:set helplang=de,it\n+        <\tThis will first search German, then Italian and finally English help\n+        files.\n+        When using |CTRL-]| and \":help!\" in a non-English help file Vim will\n+        try to find the tag in the current language before using this option.\n+        See |help-translated|.\n+      ]=],\n+      full_name = 'helplang',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('preferred help languages'),\n+      type = 'string',\n+      varname = 'p_hlg',\n+    },\n+    {\n+      abbreviation = 'hid',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        When off a buffer is unloaded (including loss of undo information)\n+        when it is |abandon|ed.  When on a buffer becomes hidden when it is\n+        |abandon|ed.  A buffer displayed in another window does not become\n+        hidden, of course.\n+\n+        Commands that move through the buffer list sometimes hide a buffer\n+        although the 'hidden' option is off when these three are true:\n+        - the buffer is modified\n+        - 'autowrite' is off or writing is not possible\n+        - the '!' flag was used\n+        Also see |windows|.\n+\n+        To hide a specific buffer use the 'bufhidden' option.\n+        'hidden' is set for one command with \":hide {command}\" |:hide|.\n+      ]=],\n+      full_name = 'hidden',\n+      scope = { 'global' },\n+      short_desc = N_(\"don't unload buffer when it is |abandon|ed\"),\n+      type = 'bool',\n+      varname = 'p_hid',\n+    },\n+    {\n+      abbreviation = 'hl',\n+      cb = 'did_set_highlight',\n+      defaults = { if_true = macros('HIGHLIGHT_INIT') },\n+      deny_duplicates = true,\n+      full_name = 'highlight',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('sets highlighting mode for various occasions'),\n+      type = 'string',\n+      varname = 'p_hl',\n+    },\n+    {\n+      abbreviation = 'hi',\n+      defaults = { if_true = 10000 },\n+      desc = [=[\n+        A history of \":\" commands, and a history of previous search patterns\n+        is remembered.  This option decides how many entries may be stored in\n+        each of these histories (see |cmdline-editing|).\n+        The maximum value is 10000.\n+      ]=],\n+      full_name = 'history',\n+      scope = { 'global' },\n+      short_desc = N_('number of command-lines that are remembered'),\n+      type = 'number',\n+      varname = 'p_hi',\n+    },\n+    {\n+      abbreviation = 'hk',\n+      defaults = { if_true = false },\n+      full_name = 'hkmap',\n+      scope = { 'global' },\n+      short_desc = N_('No descripti",
            "html_url": "https://github.com/neovim/neovim/pull/24528#discussion_r1284409308",
            "id": 1284409308,
            "in_reply_to_id": 1284344262,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Mjofc",
            "original_commit_id": "8735c361b3f2657c5ac340f75c31cdaf12cd6e59",
            "original_line": 7660,
            "original_position": 10719,
            "original_start_line": null,
            "path": "src/nvim/options.lua",
            "position": null,
            "pull_request_review_id": 1562849751,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24528",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284409308/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-04T13:14:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284409308",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24528#discussion_r1284422123"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24528"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284422123"
                }
            },
            "author_association": "MEMBER",
            "body": "Change the TAB in default 'spellcapcheck' from `\\t` to `\\\\t`, i.e. have a literal backslash.",
            "commit_id": "fe5eadf4a3c0dd57c5a9936c4982187e3f9d082c",
            "created_at": "2023-08-04T13:25:06Z",
            "diff_hunk": "@@ -1,3079 +1,10001 @@\n--- {\n---  {\n---    full_name='aleph', abbreviation='al',\n---    short_desc=\"ASCII code of the letter Aleph (Hebrew)\",\n---    varname='p_aleph', pv_name=nil,\n---    type='number', list=nil, scope={'global'},\n---    deny_duplicates=nil,\n---    enable_if=nil,\n---    defaults={condition=nil, if_true=224, if_false=nil},\n---    secure=nil, gettext=nil, noglob=nil, normal_fname_chars=nil,\n---    pri_mkrc=nil, deny_in_modelines=nil, normal_dname_chars=nil,\n---    modelineexpr=nil,\n---    func=nil,\n---    expand=nil, nodefault=nil, no_mkrc=nil,\n---    alloced=nil,\n---    save_pv_indir=nil,\n---    redraw={'curswant'},\n---  }\n--- }\n--- types: bool, number, string\n--- lists: (nil), comma, onecomma, flags, flagscomma\n--- scopes: global, buffer, window\n--- redraw options: statuslines, tabline, current_window, current_window_only,\n---                 current_buffer, all_windows, curswant\n--- defaults: {condition=#if condition, if_true=default, if_false=default}\n--- #if condition:\n---    string: #ifdef string\n---    !string: #ifndef string\n---    {string, string}: #if defined(string) && defined(string)\n---    {!string, !string}: #if !defined(string) && !defined(string)\n-local cstr = function(s)\n+--- @class vim.option_meta\n+--- @field full_name string\n+--- @field desc? string\n+--- @field abbreviation? string\n+--- @field short_desc? string|fun(): string\n+--- @field varname? string\n+--- @field pv_name? string\n+--- @field type 'bool'|'number'|'string'\n+--- @field list? 'comma'|'onecomma'|'flags'|'flagscomma'\n+--- @field scope vim.option_scope[]\n+--- @field deny_duplicates? boolean\n+--- @field enable_if? string|false\n+--- @field defaults? vim.option_defaults\n+--- @field secure? true\n+--- @field noglob? true\n+--- @field normal_fname_chars? true\n+--- @field pri_mkrc? true\n+--- @field deny_in_modelines? true\n+--- @field normal_dname_chars? true\n+--- @field modelineexpr? true\n+--- @field func? true\n+--- @field expand? string|true\n+--- @field nodefault? true\n+--- @field no_mkrc? true\n+--- @field alloced? true\n+--- @field redraw? vim.option_redraw[]\n+--- @field cb? string\n+--- @field tags? string[]\n+\n+--- @class vim.option_defaults\n+--- @field condition? string\n+---    string: #ifdef string\n+---    !string: #ifndef string\n+--- @field if_true integer|boolean|string|fun(): string\n+--- @field if_false? integer|boolean|string\n+--- @field doc? string Default to show in options.txt\n+--- @field meta? integer|boolean|string Default to use in Lua meta files\n+\n+--- @alias vim.option_scope 'global'|'buffer'|'window'\n+\n+--- @alias vim.option_redraw\n+--- |'statuslines'\n+--- |'tabline'\n+--- |'current_window'\n+--- |'current_window_only'\n+--- |'current_buffer'\n+--- |'all_windows'\n+--- |'curswant'\n+--- |'ui_option'\n+\n+--- @param s string\n+--- @return string\n+local function cstr(s)\n   return '\"' .. s:gsub('[\"\\\\]', '\\\\%0'):gsub('\\t', '\\\\t') .. '\"'\n end\n-local macros=function(s)\n+\n+--- @param s string\n+--- @return fun(): string\n+local function macros(s)\n   return function()\n     return s\n   end\n end\n-local imacros=function(s)\n+\n+--- @param s string\n+--- @return fun(): string\n+local function imacros(s)\n   return function()\n     return '(intptr_t)' .. s\n   end\n end\n-local N_=function(s) -- luacheck: ignore 211 (currently unused)\n+\n+--- @param s string\n+--- @return fun(): string\n+local function N_(s) -- luacheck: ignore 211 (currently unused)\n   return function()\n     return 'N_(' .. cstr(s) .. ')'\n   end\n end\n--- used for 'cinkeys' and 'indentkeys'\n-local indentkeys_default = '0{,0},0),0],:,0#,!^F,o,O,e';\n+\n return {\n-  cstr=cstr,\n-  options={\n-    {\n-      full_name='aleph', abbreviation='al',\n-      short_desc=N_(\"ASCII code of the letter Aleph (Hebrew)\"),\n-      type='number', scope={'global'},\n-      defaults={if_true=224}\n-    },\n-    {\n-      full_name='arabic', abbreviation='arab',\n-      short_desc=N_(\"Arabic as a default second language\"),\n-      type='bool', scope={'window'},\n-      redraw={'curswant'},\n-      defaults={if_true=false},\n-      cb='did_set_arabic'\n-    },\n-    {\n-      full_name='arabicshape', abbreviation='arshape',\n-      short_desc=N_(\"do shaping for Arabic characters\"),\n-      type='bool', scope={'global'},\n-      redraw={'all_windows', 'ui_option'},\n+  cstr = cstr,\n+  --- @type vim.option_meta[]\n+  options = {\n+    {\n+      abbreviation = 'al',\n+      defaults = { if_true = 224 },\n+      full_name = 'aleph',\n+      scope = { 'global' },\n+      short_desc = N_('ASCII code of the letter Aleph (Hebrew)'),\n+      type = 'number',\n+    },\n+    {\n+      abbreviation = 'arab',\n+      cb = 'did_set_arabic',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        This option can be set to start editing Arabic text.\n+        Setting this option will:\n+        - Set the 'rightleft' option, unless 'termbidi' is set.\n+        - Set the 'arabicshape' option, unless 'termbidi' is set.\n+        - Set the 'keymap' option to \"arabic\"; in Insert mode CTRL-^ toggles\n+          between typing English and Arabic key mapping.\n+        - Set the 'delcombine' option\n \n-      varname='p_arshape',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='allowrevins', abbreviation='ari',\n-      short_desc=N_(\"allow CTRL-_ in Insert and Command-line mode\"),\n-      type='bool', scope={'global'},\n-      varname='p_ari',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='ambiwidth', abbreviation='ambw',\n-      short_desc=N_(\"what to do with Unicode chars of ambiguous width\"),\n-      type='string', scope={'global'},\n-      redraw={'all_windows', 'ui_option'},\n-      varname='p_ambw',\n-      defaults={if_true=\"single\"},\n-      cb='did_set_ambiwidth'\n-    },\n-    {\n-      full_name='autochdir', abbreviation='acd',\n-      short_desc=N_(\"change directory to the file in the current window\"),\n-      type='bool', scope={'global'},\n-      varname='p_acd',\n-      defaults={if_true=false},\n-      cb='did_set_autochdir'\n-    },\n-    {\n-      full_name='autoindent', abbreviation='ai',\n-      short_desc=N_(\"take indent for new line from previous line\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_ai',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='autoread', abbreviation='ar',\n-      short_desc=N_(\"autom. read file when changed outside of Vim\"),\n-      type='bool', scope={'global', 'buffer'},\n-      varname='p_ar',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='autowrite', abbreviation='aw',\n-      short_desc=N_(\"automatically write file if changed\"),\n-      type='bool', scope={'global'},\n-      varname='p_aw',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='autowriteall', abbreviation='awa',\n-      short_desc=N_(\"as 'autowrite', but works with more commands\"),\n-      type='bool', scope={'global'},\n-      varname='p_awa',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='background', abbreviation='bg',\n-      short_desc=N_(\"\\\"dark\\\" or \\\"light\\\", used for highlight colors\"),\n-      type='string', scope={'global'},\n-      varname='p_bg',\n-      defaults={if_true=\"dark\"},\n-      cb='did_set_background'\n-    },\n-    {\n-      full_name='backspace', abbreviation='bs',\n-      short_desc=N_(\"how backspace works at start of line\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_bs',\n-      defaults={if_true=\"indent,eol,start\"},\n-      cb='did_set_backspace'\n-    },\n-    {\n-      full_name='backup', abbreviation='bk',\n-      short_desc=N_(\"keep backup file after overwriting a file\"),\n-      type='bool', scope={'global'},\n-      varname='p_bk',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='backupcopy', abbreviation='bkc',\n-      short_desc=N_(\"make backup as a copy, don't rename the file\"),\n-      type='string', list='onecomma', scope={'global', 'buffer'},\n-      deny_duplicates=true,\n-      varname='p_bkc',\n-      defaults={\n-        condition='UNIX',\n-        if_true=\"auto\",\n-        if_false=\"auto\"\n+        Resetting this option will:\n+        - Reset the 'rightleft' option.\n+        - Disable the use of 'keymap' (without changing its value).\n+        Note that 'arabicshape' and 'delcombine' are not reset (it is a global\n+        option).\n+        Also see |arabic.txt|.\n+      ]=],\n+      full_name = 'arabic',\n+      redraw = { 'curswant' },\n+      scope = { 'window' },\n+      short_desc = N_('Arabic as a default second language'),\n+      type = 'bool',\n+    },\n+    {\n+      abbreviation = 'arshape',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        When on and 'termbidi' is off, the required visual character\n+        corrections that need to take place for displaying the Arabic language\n+        take effect.  Shaping, in essence, gets enabled; the term is a broad\n+        one which encompasses:\n+          a) the changing/morphing of characters based on their location\n+             within a word (initial, medial, final and stand-alone).\n+          b) the enabling of the ability to compose characters\n+          c) the enabling of the required combining of some characters\n+        When disabled the display shows each character's true stand-alone\n+        form.\n+        Arabic is a complex language which requires other settings, for\n+        further details see |arabic.txt|.\n+      ]=],\n+      full_name = 'arabicshape',\n+      redraw = { 'all_windows', 'ui_option' },\n+      scope = { 'global' },\n+      short_desc = N_('do shaping for Arabic characters'),\n+      type = 'bool',\n+      varname = 'p_arshape',\n+    },\n+    {\n+      abbreviation = 'ari',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Allow CTRL-_ in Insert and Command-line mode.  This is default off, to\n+        avoid that users that accidentally type CTRL-_ instead of SHIFT-_ get\n+        into reverse Insert mode, and don't know how to get out.  See\n+        'revins'.\n+      ]=],\n+      full_name = 'allowrevins',\n+      scope = { 'global' },\n+      short_desc = N_('allow CTRL-_ in Insert and Command-line mode'),\n+      type = 'bool',\n+      varname = 'p_ari',\n+    },\n+    {\n+      abbreviation = 'ambw',\n+      cb = 'did_set_ambiwidth',\n+      defaults = { if_true = 'single' },\n+      desc = [=[\n+        Tells Vim what to do with characters with East Asian Width Class\n+        Ambiguous (such as Euro, Registered Sign, Copyright Sign, Greek\n+        letters, Cyrillic letters).\n+\n+        There are currently two possible values:\n+        \"single\":\tUse the same width as characters in US-ASCII.  This is\n+        \t\texpected by most users.\n+        \"double\":\tUse twice the width of ASCII characters.\n+        \t\t\t\t\t\t*E834* *E835*\n+        The value \"double\" cannot be used if 'listchars' or 'fillchars'\n+        contains a character that would be double width.  These errors may\n+        also be given when calling setcellwidths().\n+\n+        The values are overruled for characters specified with\n+        |setcellwidths()|.\n+\n+        There are a number of CJK fonts for which the width of glyphs for\n+        those characters are solely based on how many octets they take in\n+        legacy/traditional CJK encodings.  In those encodings, Euro,\n+        Registered sign, Greek/Cyrillic letters are represented by two octets,\n+        therefore those fonts have \"wide\" glyphs for them.  This is also\n+        true of some line drawing characters used to make tables in text\n+        file.  Therefore, when a CJK font is used for GUI Vim or\n+        Vim is running inside a terminal (emulators) that uses a CJK font\n+        (or Vim is run inside an xterm invoked with \"-cjkwidth\" option.),\n+        this option should be set to \"double\" to match the width perceived\n+        by Vim with the width of glyphs in the font.  Perhaps it also has\n+        to be set to \"double\" under CJK MS-Windows when the system locale is\n+        set to one of CJK locales.  See Unicode Standard Annex #11\n+        (https://www.unicode.org/reports/tr11).\n+      ]=],\n+      full_name = 'ambiwidth',\n+      redraw = { 'all_windows', 'ui_option' },\n+      scope = { 'global' },\n+      short_desc = N_('what to do with Unicode chars of ambiguous width'),\n+      type = 'string',\n+      varname = 'p_ambw',\n+    },\n+    {\n+      abbreviation = 'acd',\n+      cb = 'did_set_autochdir',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        When on, Vim will change the current working directory whenever you\n+        open a file, switch buffers, delete a buffer or open/close a window.\n+        It will change to the directory containing the file which was opened\n+        or selected.  When a buffer has no name it also has no directory, thus\n+        the current directory won't change when navigating to it.\n+        Note: When this option is on some plugins may not work.\n+      ]=],\n+      full_name = 'autochdir',\n+      scope = { 'global' },\n+      short_desc = N_('change directory to the file in the current window'),\n+      type = 'bool',\n+      varname = 'p_acd',\n+    },\n+    {\n+      abbreviation = 'ai',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        Copy indent from current line when starting a new line (typing <CR>\n+        in Insert mode or when using the \"o\" or \"O\" command).  If you do not\n+        type anything on the new line except <BS> or CTRL-D and then type\n+        <Esc>, CTRL-O or <CR>, the indent is deleted again.  Moving the cursor\n+        to another line has the same effect, unless the 'I' flag is included\n+        in 'cpoptions'.\n+        When autoindent is on, formatting (with the \"gq\" command or when you\n+        reach 'textwidth' in Insert mode) uses the indentation of the first\n+        line.\n+        When 'smartindent' or 'cindent' is on the indent is changed in\n+        a different way.\n+      ]=],\n+      full_name = 'autoindent',\n+      scope = { 'buffer' },\n+      short_desc = N_('take indent for new line from previous line'),\n+      type = 'bool',\n+      varname = 'p_ai',\n+    },\n+    {\n+      abbreviation = 'ar',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        When a file has been detected to have been changed outside of Vim and\n+        it has not been changed inside of Vim, automatically read it again.\n+        When the file has been deleted this is not done, so you have the text\n+        from before it was deleted.  When it appears again then it is read.\n+        |timestamp|\n+        If this option has a local value, use this command to switch back to\n+        using the global value: >\n+        \t:set autoread<\n+        <\n+      ]=],\n+      full_name = 'autoread',\n+      scope = { 'global', 'buffer' },\n+      short_desc = N_('autom. read file when changed outside of Vim'),\n+      type = 'bool',\n+      varname = 'p_ar',\n+    },\n+    {\n+      abbreviation = 'aw',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Write the contents of the file, if it has been modified, on each\n+        `:next`, `:rewind`, `:last`, `:first`, `:previous`, `:stop`,\n+        `:suspend`, `:tag`, `:!`, `:make`, CTRL-] and CTRL-^ command; and when\n+        a `:buffer`, CTRL-O, CTRL-I, '{A-Z0-9}, or `{A-Z0-9} command takes one\n+        to another file.\n+        A buffer is not written if it becomes hidden, e.g. when 'bufhidden' is\n+        set to \"hide\" and `:next` is used.\n+        Note that for some commands the 'autowrite' option is not used, see\n+        'autowriteall' for that.\n+        Some buffers will not be written, specifically when 'buftype' is\n+        \"nowrite\", \"nofile\", \"terminal\" or \"prompt\".\n+        USE WITH CARE: If you make temporary changes to a buffer that you\n+        don't want to be saved this option may cause it to be saved anyway.\n+        Renaming the buffer with \":file {name}\" may help avoid this.\n+      ]=],\n+      full_name = 'autowrite',\n+      scope = { 'global' },\n+      short_desc = N_('automatically write file if changed'),\n+      type = 'bool',\n+      varname = 'p_aw',\n+    },\n+    {\n+      abbreviation = 'awa',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Like 'autowrite', but also used for commands \":edit\", \":enew\", \":quit\",\n+        \":qall\", \":exit\", \":xit\", \":recover\" and closing the Vim window.\n+        Setting this option also implies that Vim behaves like 'autowrite' has\n+        been set.\n+      ]=],\n+      full_name = 'autowriteall',\n+      scope = { 'global' },\n+      short_desc = N_(\"as 'autowrite', but works with more commands\"),\n+      type = 'bool',\n+      varname = 'p_awa',\n+    },\n+    {\n+      abbreviation = 'bg',\n+      cb = 'did_set_background',\n+      defaults = { if_true = 'dark' },\n+      desc = [=[\n+        When set to \"dark\" or \"light\", adjusts the default color groups for\n+        that background type.  The |TUI| or other UI sets this on startup\n+        (triggering |OptionSet|) if it can detect the background color.\n+\n+        This option does NOT change the background color, it tells Nvim what\n+        the \"inherited\" (terminal/GUI) background looks like.\n+        See |:hi-normal| if you want to set the background color explicitly.\n+        \t\t\t\t\t*g:colors_name*\n+        When a color scheme is loaded (the \"g:colors_name\" variable is set)\n+        setting 'background' will cause the color scheme to be reloaded.  If\n+        the color scheme adjusts to the value of 'background' this will work.\n+        However, if the color scheme sets 'background' itself the effect may\n+        be undone.  First delete the \"g:colors_name\" variable when needed.\n+\n+        Normally this option would be set in the vimrc file.  Possibly\n+        depending on the terminal name.  Example: >\n+        \t:if $TERM ==# \"xterm\"\n+        \t:  set background=dark\n+        \t:endif\n+        <\tWhen this option is set, the default settings for the highlight groups\n+        will change.  To use other settings, place \":highlight\" commands AFTER\n+        the setting of the 'background' option.\n+        This option is also used in the \"$VIMRUNTIME/syntax/syntax.vim\" file\n+        to select the colors for syntax highlighting.  After changing this\n+        option, you must load syntax.vim again to see the result.  This can be\n+        done with \":syntax on\".\n+      ]=],\n+      full_name = 'background',\n+      scope = { 'global' },\n+      short_desc = N_('\"dark\" or \"light\", used for highlight colors'),\n+      type = 'string',\n+      varname = 'p_bg',\n+    },\n+    {\n+      abbreviation = 'bs',\n+      cb = 'did_set_backspace',\n+      defaults = { if_true = 'indent,eol,start' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Influences the working of <BS>, <Del>, CTRL-W and CTRL-U in Insert\n+        mode.  This is a list of items, separated by commas.  Each item allows\n+        a way to backspace over something:\n+        value\teffect\t~\n+        indent\tallow backspacing over autoindent\n+        eol\tallow backspacing over line breaks (join lines)\n+        start\tallow backspacing over the start of insert; CTRL-W and CTRL-U\n+        \tstop once at the start of insert.\n+        nostop\tlike start, except CTRL-W and CTRL-U do not stop at the start of\n+        \tinsert.\n+\n+        When the value is empty, Vi compatible backspacing is used, none of\n+        the ways mentioned for the items above are possible.\n+      ]=],\n+      full_name = 'backspace',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('how backspace works at start of line'),\n+      type = 'string',\n+      varname = 'p_bs',\n+    },\n+    {\n+      abbreviation = 'bk',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Make a backup before overwriting a file.  Leave it around after the\n+        file has been successfully written.  If you do not want to keep the\n+        backup file, but you do want a backup while the file is being\n+        written, reset this option and set the 'writebackup' option (this is\n+        the default).  If you do not want a backup file at all reset both\n+        options (use this if your file system is almost full).  See the\n+        |backup-table| for more explanations.\n+        When the 'backupskip' pattern matches, a backup is not made anyway.\n+        When 'patchmode' is set, the backup may be renamed to become the\n+        oldest version of a file.\n+      ]=],\n+      full_name = 'backup',\n+      scope = { 'global' },\n+      short_desc = N_('keep backup file after overwriting a file'),\n+      type = 'bool',\n+      varname = 'p_bk',\n+    },\n+    {\n+      abbreviation = 'bkc',\n+      cb = 'did_set_backupcopy',\n+      defaults = { condition = 'UNIX', if_false = 'auto', if_true = 'auto' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        When writing a file and a backup is made, this option tells how it's\n+        done.  This is a comma-separated list of words.\n+\n+        The main values are:\n+        \"yes\"\tmake a copy of the file and overwrite the original one\n+        \"no\"\trename the file and write a new one\n+        \"auto\"\tone of the previous, what works best\n+\n+        Extra values that can be combined with the ones above are:\n+        \"breaksymlink\"\talways break symlinks when writing\n+        \"breakhardlink\"\talways break hardlinks when writing\n+\n+        Making a copy and overwriting the original file:\n+        - Takes extra time to copy the file.\n+        + When the file has special attributes, is a (hard/symbolic) link or\n+          has a resource fork, all this is preserved.\n+        - When the file is a link the backup will have the name of the link,\n+          not of the real file.\n+\n+        Renaming the file and writing a new one:\n+        + It's fast.\n+        - Sometimes not all attributes of the file can be copied to the new\n+          file.\n+        - When the file is a link the new file will not be a link.\n+\n+        The \"auto\" value is the middle way: When Vim sees that renaming the\n+        file is possible without side effects (the attributes can be passed on\n+        and the file is not a link) that is used.  When problems are expected,\n+        a copy will be made.\n+\n+        The \"breaksymlink\" and \"breakhardlink\" values can be used in\n+        combination with any of \"yes\", \"no\" and \"auto\".  When included, they\n+        force Vim to always break either symbolic or hard links by doing\n+        exactly what the \"no\" option does, renaming the original file to\n+        become the backup and writing a new file in its place.  This can be\n+        useful for example in source trees where all the files are symbolic or\n+        hard links and any changes should stay in the local source tree, not\n+        be propagated back to the original source.\n+        \t\t\t\t\t\t*crontab*\n+        One situation where \"no\" and \"auto\" will cause problems: A program\n+        that opens a file, invokes Vim to edit that file, and then tests if\n+        the open file was changed (through the file descriptor) will check the\n+        backup file instead of the newly created file.  \"crontab -e\" is an\n+        example.\n+\n+        When a copy is made, the original file is truncated and then filled\n+        with the new text.  This means that protection bits, owner and\n+        symbolic links of the original file are unmodified.  The backup file,\n+        however, is a new file, owned by the user who edited the file.  The\n+        group of the backup is set to the group of the original file.  If this\n+        fails, the protection bits for the group are made the same as for\n+        others.\n+\n+        When the file is renamed, this is the other way around: The backup has\n+        the same attributes of the original file, and the newly written file\n+        is owned by the current user.  When the file was a (hard/symbolic)\n+        link, the new file will not!  That's why the \"auto\" value doesn't\n+        rename when the file is a link.  The owner and group of the newly\n+        written file will be set to the same ones as the original file, but\n+        the system may refuse to do this.  In that case the \"auto\" value will\n+        again not rename the file.\n+      ]=],\n+      full_name = 'backupcopy',\n+      list = 'onecomma',\n+      scope = { 'global', 'buffer' },\n+      short_desc = N_(\"make backup as a copy, don't rename the file\"),\n+      type = 'string',\n+      varname = 'p_bkc',\n+    },\n+    {\n+      abbreviation = 'bdir',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        List of directories for the backup file, separated with commas.\n+        - The backup file will be created in the first directory in the list\n+          where this is possible.  If none of the directories exist Nvim will\n+          attempt to create the last directory in the list.\n+        - Empty means that no backup file will be created ('patchmode' is\n+          impossible!).  Writing may fail because of this.\n+        - A directory \".\" means to put the backup file in the same directory\n+          as the edited file.\n+        - A directory starting with \"./\" (or \".\\\" for MS-Windows) means to put\n+          the backup file relative to where the edited file is.  The leading\n+          \".\" is replaced with the path name of the edited file.\n+          (\".\" inside a directory name has no special meaning).\n+        - Spaces after the comma are ignored, other spaces are considered part\n+          of the directory name.  To have a space at the start of a directory\n+          name, precede it with a backslash.\n+        - To include a comma in a directory name precede it with a backslash.\n+        - A directory name may end in an '/'.\n+        - For Unix and Win32, if a directory ends in two path separators \"//\",\n+          the swap file name will be built from the complete path to the file\n+          with all path separators changed to percent '%' signs. This will\n+          ensure file name uniqueness in the backup directory.\n+          On Win32, it is also possible to end with \"\\\\\".  However, When a\n+          separating comma is following, you must use \"//\", since \"\\\\\" will\n+          include the comma in the file name. Therefore it is recommended to\n+          use '//', instead of '\\\\'.\n+        - Environment variables are expanded |:set_env|.\n+        - Careful with '\\' characters, type one before a space, type two to\n+          get one in the option (see |option-backslash|), for example: >\n+            :set bdir=c:\\\\tmp,\\ dir\\\\,with\\\\,commas,\\\\\\ dir\\ with\\ spaces\n+        <\n+        See also 'backup' and 'writebackup' options.\n+        If you want to hide your backup files on Unix, consider this value: >\n+        \t:set backupdir=./.backup,~/.backup,.,/tmp\n+        <\tYou must create a \".backup\" directory in each directory and in your\n+        home directory for this to work properly.\n+        The use of |:set+=| and |:set-=| is preferred when adding or removing\n+        directories from the list.  This avoids problems when a future version\n+        uses another default.\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      expand = 'nodefault',\n+      full_name = 'backupdir',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_('list of directories for the backup file'),\n+      type = 'string',\n+      varname = 'p_bdir',\n+    },\n+    {\n+      abbreviation = 'bex',\n+      cb = 'did_set_backupext_or_patchmode',\n+      defaults = { if_true = '~' },\n+      desc = [=[\n+        String which is appended to a file name to make the name of the\n+        backup file.  The default is quite unusual, because this avoids\n+        accidentally overwriting existing files with a backup file.  You might\n+        prefer using \".bak\", but make sure that you don't have files with\n+        \".bak\" that you want to keep.\n+        Only normal file name characters can be used; `/\\*?[|<>` are illegal.\n+\n+        If you like to keep a lot of backups, you could use a BufWritePre\n+        autocommand to change 'backupext' just before writing the file to\n+        include a timestamp. >\n+        \t:au BufWritePre * let &bex = '-' .. strftime(\"%Y%b%d%X\") .. '~'\n+        <\tUse 'backupdir' to put the backup in a different directory.\n+      ]=],\n+      full_name = 'backupext',\n+      normal_fname_chars = true,\n+      scope = { 'global' },\n+      short_desc = N_('extension used for the backup file'),\n+      tags = { 'E589' },\n+      type = 'string',\n+      varname = 'p_bex',\n+    },\n+    {\n+      abbreviation = 'bsk',\n+      defaults = {\n+        if_true = '',\n+        doc = [[\"$TMPDIR/*,$TMP/*,$TEMP/*\"\n+        Unix: \"/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*\"\n+        Mac: \"/private/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*\")]],\n+        meta = '/tmp/*',\n       },\n-      cb='did_set_backupcopy'\n-    },\n-    {\n-      full_name='backupdir', abbreviation='bdir',\n-      short_desc=N_(\"list of directories for the backup file\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      secure=true,\n-      expand='nodefault',\n-      varname='p_bdir',\n-      defaults={if_true=''}\n-    },\n-    {\n-      full_name='backupext', abbreviation='bex',\n-      short_desc=N_(\"extension used for the backup file\"),\n-      type='string', scope={'global'},\n-      normal_fname_chars=true,\n-      varname='p_bex',\n-      defaults={if_true=\"~\"},\n-      cb='did_set_backupext_or_patchmode'\n-    },\n-    {\n-      full_name='backupskip', abbreviation='bsk',\n-      short_desc=N_(\"no backup for files that match these patterns\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_bsk',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='belloff', abbreviation='bo',\n-      short_desc=N_(\"do not ring the bell for these reasons\"),\n-      type='string', list='comma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_bo',\n-      defaults={if_true=\"all\"},\n-      cb='did_set_belloff'\n-    },\n-    {\n-      full_name='binary', abbreviation='bin',\n-      short_desc=N_(\"read/write/edit file in binary mode\"),\n-      type='bool', scope={'buffer'},\n-      redraw={'statuslines'},\n-      varname='p_bin',\n-      defaults={if_true=false},\n-      cb='did_set_binary'\n-    },\n-    {\n-      full_name='bomb',\n-      short_desc=N_(\"a Byte Order Mark to the file\"),\n-      type='bool', scope={'buffer'},\n-      no_mkrc=true,\n-      redraw={'statuslines'},\n-      varname='p_bomb',\n-      defaults={if_true=false},\n-      cb='did_set_eof_eol_fixeol_bomb'\n-    },\n-    {\n-      full_name='breakat', abbreviation='brk',\n-      short_desc=N_(\"characters that may cause a line break\"),\n-      type='string', list='flags', scope={'global'},\n-      redraw={'all_windows'},\n-      varname='p_breakat',\n-      defaults={if_true=\" \\t!@*-+;:,./?\"},\n-      cb='did_set_breakat'\n-    },\n-    {\n-      full_name='breakindent', abbreviation='bri',\n-      short_desc=N_(\"wrapped line repeats indent\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='breakindentopt', abbreviation='briopt',\n-      short_desc=N_(\"settings for 'breakindent'\"),\n-      type='string', list='onecomma', scope={'window'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      redraw={'current_buffer'},\n-      defaults={if_true=\"\"},\n-      cb='did_set_breakindentopt'\n-    },\n-    {\n-      full_name='browsedir', abbreviation='bsdir',\n-      short_desc=N_(\"which directory to start browsing in\"),\n-      type='string', scope={'global'},\n-      enable_if=false,\n-    },\n-    {\n-      full_name='bufhidden', abbreviation='bh',\n-      short_desc=N_(\"what to do when buffer is no longer in window\"),\n-      type='string', scope={'buffer'},\n-      noglob=true,\n-      alloced=true,\n-      varname='p_bh',\n-      defaults={if_true=\"\"},\n-      cb='did_set_bufhidden'\n-    },\n-    {\n-      full_name='buflisted', abbreviation='bl',\n-      short_desc=N_(\"whether the buffer shows up in the buffer list\"),\n-      type='bool', scope={'buffer'},\n-      noglob=true,\n-      varname='p_bl',\n-      defaults={if_true=1},\n-      cb='did_set_buflisted'\n-    },\n-    {\n-      full_name='buftype', abbreviation='bt',\n-      short_desc=N_(\"special type of buffer\"),\n-      type='string', scope={'buffer'},\n-      noglob=true,\n-      alloced=true,\n-      varname='p_bt',\n-      defaults={if_true=\"\"},\n-      cb='did_set_buftype'\n-    },\n-    {\n-      full_name='casemap', abbreviation='cmp',\n-      short_desc=N_(\"specifies how case of letters is changed\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_cmp',\n-      defaults={if_true=\"internal,keepascii\"},\n-      cb='did_set_casemap'\n-    },\n-    {\n-      full_name='cdhome', abbreviation='cdh',\n-      short_desc=N_(\":cd without argument goes to the home directory\"),\n-      type='bool', scope={'global'},\n-      secure=true,\n-      varname='p_cdh',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='cdpath', abbreviation='cd',\n-      short_desc=N_(\"list of directories searched with \\\":cd\\\"\"),\n-      type='string', list='comma', scope={'global'},\n-      deny_duplicates=true,\n-      expand=true,\n-      secure=true,\n-      varname='p_cdpath',\n-      defaults={if_true=\",,\"}\n-    },\n-    {\n-      full_name='cedit',\n-      short_desc=N_(\"used to open the command-line window\"),\n-      type='string', scope={'global'},\n-      varname='p_cedit',\n-      defaults={if_true=macros('CTRL_F_STR')},\n-      cb='did_set_cedit'\n-    },\n-    {\n-      full_name='channel',\n-      short_desc=N_(\"Channel connected to the buffer\"),\n-      type='number', scope={'buffer'},\n-      no_mkrc=true,\n-      nodefault=true,\n-      varname='p_channel',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='charconvert', abbreviation='ccv',\n-      short_desc=N_(\"expression for character encoding conversion\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      varname='p_ccv',\n-      defaults={if_true=\"\"},\n-      cb='did_set_optexpr'\n-    },\n-    {\n-      full_name='cindent', abbreviation='cin',\n-      short_desc=N_(\"do C program indenting\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_cin',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='cinkeys', abbreviation='cink',\n-      short_desc=N_(\"keys that trigger indent when 'cindent' is set\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_cink',\n-      defaults={if_true=indentkeys_default}\n-    },\n-    {\n-      full_name='cinoptions', abbreviation='cino',\n-      short_desc=N_(\"how to do indenting when 'cindent' is set\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_cino',\n-      defaults={if_true=\"\"},\n-      cb='did_set_cinoptions'\n-    },\n-    {\n-      full_name='cinwords', abbreviation='cinw',\n-      short_desc=N_(\"words where 'si' and 'cin' add an indent\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_cinw',\n-      defaults={if_true=\"if,else,while,do,for,switch\"}\n-    },\n-    {\n-      full_name='cinscopedecls', abbreviation='cinsd',\n-      short_desc=N_(\"words that are recognized by 'cino-g'\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_cinsd',\n-      defaults={if_true=\"public,protected,private\"}\n-    },\n-    {\n-      full_name='clipboard', abbreviation='cb',\n-      short_desc=N_(\"use the clipboard as the unnamed register\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_cb',\n-      defaults={if_true=\"\"},\n-      cb='did_set_clipboard'\n-    },\n-    {\n-      full_name='cmdheight', abbreviation='ch',\n-      short_desc=N_(\"number of lines to use for the command-line\"),\n-      type='number', scope={'global'},\n-      redraw={'all_windows'},\n-      varname='p_ch',\n-      defaults={if_true=1},\n-      cb='did_set_cmdheight'\n-    },\n-    {\n-      full_name='cmdwinheight', abbreviation='cwh',\n-      short_desc=N_(\"height of the command-line window\"),\n-      type='number', scope={'global'},\n-      varname='p_cwh',\n-      defaults={if_true=7}\n-    },\n-    {\n-      full_name='colorcolumn', abbreviation='cc',\n-      short_desc=N_(\"columns to highlight\"),\n-      type='string', list='onecomma', scope={'window'},\n-      deny_duplicates=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"\"},\n-      cb='did_set_colorcolumn'\n-    },\n-    {\n-      full_name='columns', abbreviation='co',\n-      short_desc=N_(\"number of columns in the display\"),\n-      type='number', scope={'global'},\n-      no_mkrc=true,\n-      varname='p_columns',\n-      defaults={if_true=macros('DFLT_COLS')}\n-    },\n-    {\n-      full_name='comments', abbreviation='com',\n-      short_desc=N_(\"patterns that can start a comment line\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      redraw={'curswant'},\n-      varname='p_com',\n-      defaults={if_true=\"s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-\"},\n-      cb='did_set_comments'\n-    },\n-    {\n-      full_name='commentstring', abbreviation='cms',\n-      short_desc=N_(\"template for comments; used for fold marker\"),\n-      type='string', scope={'buffer'},\n-      alloced=true,\n-      redraw={'curswant'},\n-      varname='p_cms',\n-      defaults={if_true=\"\"},\n-      cb='did_set_commentstring'\n-    },\n-    {\n-      full_name='compatible', abbreviation='cp',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      varname='p_force_off',\n-      -- pri_mkrc isn't needed here, optval_default()\n-      -- always returns TRUE for 'compatible'\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='complete', abbreviation='cpt',\n-      short_desc=N_(\"specify how Insert mode completion works\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_cpt',\n-      defaults={if_true=\".,w,b,u,t\"},\n-      cb='did_set_complete'\n-    },\n-    {\n-      full_name='concealcursor', abbreviation='cocu',\n-      short_desc=N_(\"whether concealable text is hidden in cursor line\"),\n-      type='string', scope={'window'},\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"\"},\n-      cb='did_set_concealcursor'\n-    },\n-    {\n-      full_name='conceallevel', abbreviation='cole',\n-      short_desc=N_(\"whether concealable text is shown or hidden\"),\n-      type='number', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='completefunc', abbreviation='cfu',\n-      short_desc=N_(\"function to be used for Insert mode completion\"),\n-      type='string', scope={'buffer'},\n-      secure=true,\n-      alloced=true,\n-      func=true,\n-      varname='p_cfu',\n-      defaults={if_true=\"\"},\n-      cb='did_set_completefunc'\n-    },\n-    {\n-      full_name='completeopt', abbreviation='cot',\n-      short_desc=N_(\"options for Insert mode completion\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_cot',\n-      defaults={if_true=\"menu,preview\"},\n-      cb='did_set_completeopt'\n-    },\n-    {\n-      full_name='completeslash', abbreviation='csl',\n-      type='string', scope={'buffer'},\n-      varname='p_csl',\n-      enable_if='BACKSLASH_IN_FILENAME',\n-      defaults={if_true=\"\"},\n-      cb='did_set_completeslash'\n-    },\n-    {\n-      full_name='confirm', abbreviation='cf',\n-      short_desc=N_(\"ask what to do about unsaved/read-only files\"),\n-      type='bool', scope={'global'},\n-      varname='p_confirm',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='copyindent', abbreviation='ci',\n-      short_desc=N_(\"make 'autoindent' use existing indent structure\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_ci',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='cpoptions', abbreviation='cpo',\n-      short_desc=N_(\"flags for Vi-compatible behavior\"),\n-      type='string', list='flags', scope={'global'},\n-      redraw={'all_windows'},\n-      varname='p_cpo',\n-      defaults={if_true=macros('CPO_VIM')},\n-      cb='did_set_cpoptions'\n-    },\n-    {\n-      full_name='cursorbind', abbreviation='crb',\n-      short_desc=N_(\"move cursor in window as it moves in other windows\"),\n-      type='bool', scope={'window'},\n-      pv_name='p_crbind',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='cursorcolumn', abbreviation='cuc',\n-      short_desc=N_(\"highlight the screen column of the cursor\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window_only'},\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='cursorline', abbreviation='cul',\n-      short_desc=N_(\"highlight the screen line of the cursor\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window_only'},\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='cursorlineopt', abbreviation='culopt',\n-      short_desc=N_(\"settings for 'cursorline'\"),\n-      type='string', list='onecomma', scope={'window'},\n-      deny_duplicates=true,\n-      redraw={'current_window_only'},\n-      defaults={if_true=\"both\"},\n-      cb='did_set_cursorlineopt'\n-    },\n-    {\n-      full_name='debug',\n-      short_desc=N_(\"to \\\"msg\\\" to see all error messages\"),\n-      type='string', scope={'global'},\n-      varname='p_debug',\n-      defaults={if_true=\"\"},\n-      cb='did_set_debug'\n-    },\n-    {\n-      full_name='define', abbreviation='def',\n-      short_desc=N_(\"pattern to be used to find a macro definition\"),\n-      type='string', scope={'global', 'buffer'},\n-      alloced=true,\n-      redraw={'curswant'},\n-      varname='p_def',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='delcombine', abbreviation='deco',\n-      short_desc=N_(\"delete combining characters on their own\"),\n-      type='bool', scope={'global'},\n-      varname='p_deco',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='dictionary', abbreviation='dict',\n-      short_desc=N_(\"list of file names used for keyword completion\"),\n-      type='string', list='onecomma', scope={'global', 'buffer'},\n-      deny_duplicates=true,\n-      normal_dname_chars=true,\n-      expand=true,\n-      varname='p_dict',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='diff',\n-      short_desc=N_(\"diff mode for the current window\"),\n-      type='bool', scope={'window'},\n-      noglob=true,\n-      redraw={'current_window'},\n-      defaults={if_true=false},\n-      cb='did_set_diff'\n-    },\n-    {\n-      full_name='diffexpr', abbreviation='dex',\n-      short_desc=N_(\"expression used to obtain a diff file\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      redraw={'curswant'},\n-      varname='p_dex',\n-      defaults={if_true=\"\"},\n-      cb='did_set_optexpr'\n-    },\n-    {\n-      full_name='diffopt', abbreviation='dip',\n-      short_desc=N_(\"options for using diff mode\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      redraw={'current_window'},\n-      varname='p_dip',\n-      defaults={if_true=\"internal,filler,closeoff\"},\n-      cb='did_set_diffopt'\n-    },\n-    {\n-      full_name='digraph', abbreviation='dg',\n-      short_desc=N_(\"enable the entering of digraphs in Insert mode\"),\n-      type='bool', scope={'global'},\n-      varname='p_dg',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='directory', abbreviation='dir',\n-      short_desc=N_(\"list of directory names for the swap file\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      secure=true,\n-      expand='nodefault',\n-      varname='p_dir',\n-      defaults={if_true=''}\n-    },\n-    {\n-      full_name='display', abbreviation='dy',\n-      short_desc=N_(\"list of flags for how to display text\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      redraw={'all_windows'},\n-      varname='p_dy',\n-      defaults={if_true=\"lastline\"},\n-      cb='did_set_display'\n-    },\n-    {\n-      full_name='eadirection', abbreviation='ead',\n-      short_desc=N_(\"in which direction 'equalalways' works\"),\n-      type='string', scope={'global'},\n-      varname='p_ead',\n-      defaults={if_true=\"both\"},\n-      cb='did_set_eadirection'\n-    },\n-    {\n-      full_name='edcompatible', abbreviation='ed',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      varname='p_force_off',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='emoji', abbreviation='emo',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      redraw={'all_windows', 'ui_option'},\n-      varname='p_emoji',\n-      defaults={if_true=true},\n-      cb='did_set_ambiwidth'\n-    },\n-    {\n-      full_name='encoding', abbreviation='enc',\n-      short_desc=N_(\"encoding used internally\"),\n-      type='string', scope={'global'},\n-      deny_in_modelines=true,\n-      varname='p_enc',\n-      defaults={if_true=macros('ENC_DFLT')},\n-      cb='did_set_encoding'\n-    },\n-    {\n-      full_name='endoffile', abbreviation='eof',\n-      short_desc=N_(\"write CTRL-Z for last line in file\"),\n-      type='bool', scope={'buffer'},\n-      no_mkrc=true,\n-      redraw={'statuslines'},\n-      varname='p_eof',\n-      defaults={if_true=false},\n-      cb='did_set_eof_eol_fixeol_bomb'\n-    },\n-    {\n-      full_name='endofline', abbreviation='eol',\n-      short_desc=N_(\"write <EOL> for last line in file\"),\n-      type='bool', scope={'buffer'},\n-      no_mkrc=true,\n-      redraw={'statuslines'},\n-      varname='p_eol',\n-      defaults={if_true=true},\n-      cb='did_set_eof_eol_fixeol_bomb'\n-    },\n-    {\n-      full_name='equalalways', abbreviation='ea',\n-      short_desc=N_(\"windows are automatically made the same size\"),\n-      type='bool', scope={'global'},\n-      varname='p_ea',\n-      defaults={if_true=true},\n-      cb='did_set_equalalways'\n-    },\n-    {\n-      full_name='equalprg', abbreviation='ep',\n-      short_desc=N_(\"external program to use for \\\"=\\\" command\"),\n-      type='string', scope={'global', 'buffer'},\n-      secure=true,\n-      expand=true,\n-      varname='p_ep',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='errorbells', abbreviation='eb',\n-      short_desc=N_(\"ring the bell for error messages\"),\n-      type='bool', scope={'global'},\n-      varname='p_eb',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='errorfile', abbreviation='ef',\n-      short_desc=N_(\"name of the errorfile for the QuickFix mode\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      expand=true,\n-      varname='p_ef',\n-      defaults={if_true=macros('DFLT_ERRORFILE')}\n-    },\n-    {\n-      full_name='errorformat', abbreviation='efm',\n-      short_desc=N_(\"description of the lines in the error file\"),\n-      type='string', list='onecomma', scope={'global', 'buffer'},\n-      deny_duplicates=true,\n-      varname='p_efm',\n-      defaults={if_true=macros('DFLT_EFM')}\n-    },\n-    {\n-      full_name='eventignore', abbreviation='ei',\n-      short_desc=N_(\"autocommand events that are ignored\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_ei',\n-      defaults={if_true=\"\"},\n-      cb='did_set_eventignore'\n-    },\n-    {\n-      full_name='expandtab', abbreviation='et',\n-      short_desc=N_(\"use spaces when <Tab> is inserted\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_et',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='exrc', abbreviation='ex',\n-      short_desc=N_(\"read .nvimrc and .exrc in the current directory\"),\n-      type='bool', scope={'global'},\n-      secure=true,\n-      varname='p_exrc',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='fileencoding', abbreviation='fenc',\n-      short_desc=N_(\"file encoding for multi-byte text\"),\n-      type='string', scope={'buffer'},\n-      no_mkrc=true,\n-      alloced=true,\n-      redraw={'statuslines', 'current_buffer'},\n-      varname='p_fenc',\n-      defaults={if_true=\"\"},\n-      cb='did_set_encoding'\n-    },\n-    {\n-      full_name='fileencodings', abbreviation='fencs',\n-      short_desc=N_(\"automatically detected character encodings\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_fencs',\n-      defaults={if_true=\"ucs-bom,utf-8,default,latin1\"}\n-    },\n-    {\n-      full_name='fileformat', abbreviation='ff',\n-      short_desc=N_(\"file format used for file I/O\"),\n-      type='string', scope={'buffer'},\n-      no_mkrc=true,\n-      alloced=true,\n-      redraw={'curswant', 'statuslines'},\n-      varname='p_ff',\n-      defaults={if_true=macros('DFLT_FF')},\n-      cb='did_set_fileformat'\n-    },\n-    {\n-      full_name='fileformats', abbreviation='ffs',\n-      short_desc=N_(\"automatically detected values for 'fileformat'\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_ffs',\n-      defaults={if_true=macros('DFLT_FFS_VIM')},\n-      cb='did_set_fileformats'\n-    },\n-    {\n-      full_name='fileignorecase', abbreviation='fic',\n-      short_desc=N_(\"ignore case when using file names\"),\n-      type='bool', scope={'global'},\n-      varname='p_fic',\n-      defaults={\n-        condition='CASE_INSENSITIVE_FILENAME',\n-        if_true=true,\n-        if_false=false,\n-      }\n-    },\n-    {\n-      full_name='filetype', abbreviation='ft',\n-      short_desc=N_(\"type of file, used for autocommands\"),\n-      type='string', scope={'buffer'},\n-      noglob=true,\n-      normal_fname_chars=true,\n-      alloced=true,\n-      expand=true,\n-      varname='p_ft',\n-      defaults={if_true=\"\"},\n-      cb='did_set_filetype_or_syntax'\n-    },\n-    {\n-      full_name='fillchars', abbreviation='fcs',\n-      short_desc=N_(\"characters to use for displaying special items\"),\n-      type='string', list='onecomma', scope={'global', 'window'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      redraw={'current_window'},\n-      varname='p_fcs',\n-      defaults={if_true=''},\n-      cb='did_set_chars_option'\n-    },\n-    {\n-      full_name='fixendofline', abbreviation='fixeol',\n-      short_desc=N_(\"make sure last line in file has <EOL>\"),\n-      type='bool', scope={'buffer'},\n-      redraw={'statuslines'},\n-      varname='p_fixeol',\n-      defaults={if_true=true},\n-      cb='did_set_eof_eol_fixeol_bomb'\n-    },\n-    {\n-      full_name='foldclose', abbreviation='fcl',\n-      short_desc=N_(\"close a fold when the cursor leaves it\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      redraw={'current_window'},\n-      varname='p_fcl',\n-      defaults={if_true=\"\"},\n-      cb='did_set_foldclose'\n-    },\n-    {\n-      full_name='foldcolumn', abbreviation='fdc',\n-      short_desc=N_(\"width of the column used to indicate folds\"),\n-      type='string', scope={'window'},\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"0\"},\n-      cb='did_set_foldcolumn'\n-    },\n-    {\n-      full_name='foldenable', abbreviation='fen',\n-      short_desc=N_(\"set to display all folds open\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='foldexpr', abbreviation='fde',\n-      short_desc=N_(\"expression used when 'foldmethod' is \\\"expr\\\"\"),\n-      type='string', scope={'window'},\n-      modelineexpr=true,\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"0\"},\n-      cb='did_set_foldexpr'\n-    },\n-    {\n-      full_name='foldignore', abbreviation='fdi',\n-      short_desc=N_(\"ignore lines when 'foldmethod' is \\\"indent\\\"\"),\n-      type='string', scope={'window'},\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"#\"},\n-      cb='did_set_foldignore'\n-    },\n-    {\n-      full_name='foldlevel', abbreviation='fdl',\n-      short_desc=N_(\"close folds with a level higher than this\"),\n-      type='number', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=0},\n-      cb='did_set_foldlevel'\n-    },\n-    {\n-      full_name='foldlevelstart', abbreviation='fdls',\n-      short_desc=N_(\"'foldlevel' when starting to edit a file\"),\n-      type='number', scope={'global'},\n-      redraw={'curswant'},\n-      varname='p_fdls',\n-      defaults={if_true=-1}\n-    },\n-    {\n-      full_name='foldmarker', abbreviation='fmr',\n-      short_desc=N_(\"markers used when 'foldmethod' is \\\"marker\\\"\"),\n-      type='string', list='onecomma', scope={'window'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"{{{,}}}\"},\n-      cb='did_set_foldmarker'\n-    },\n-    {\n-      full_name='foldmethod', abbreviation='fdm',\n-      short_desc=N_(\"folding type\"),\n-      type='string', scope={'window'},\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"manual\"},\n-      cb='did_set_foldmethod'\n-    },\n-    {\n-      full_name='foldminlines', abbreviation='fml',\n-      short_desc=N_(\"minimum number of lines for a fold to be closed\"),\n-      type='number', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=1},\n-      cb='did_set_foldminlines'\n-    },\n-    {\n-      full_name='foldnestmax', abbreviation='fdn',\n-      short_desc=N_(\"maximum fold depth\"),\n-      type='number', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=20},\n-      cb='did_set_foldnestmax'\n-    },\n-    {\n-      full_name='foldopen', abbreviation='fdo',\n-      short_desc=N_(\"for which commands a fold will be opened\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      redraw={'curswant'},\n-      varname='p_fdo',\n-      defaults={if_true=\"block,hor,mark,percent,quickfix,search,tag,undo\"},\n-      cb='did_set_foldopen'\n-    },\n-    {\n-      full_name='foldtext', abbreviation='fdt',\n-      short_desc=N_(\"expression used to display for a closed fold\"),\n-      type='string', scope={'window'},\n-      modelineexpr=true,\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"foldtext()\"},\n-      cb='did_set_optexpr'\n-    },\n-    {\n-      full_name='formatexpr', abbreviation='fex',\n-      short_desc=N_(\"expression used with \\\"gq\\\" command\"),\n-      type='string', scope={'buffer'},\n-      modelineexpr=true,\n-      alloced=true,\n-      varname='p_fex',\n-      defaults={if_true=\"\"},\n-      cb='did_set_optexpr'\n-    },\n-    {\n-      full_name='formatoptions', abbreviation='fo',\n-      short_desc=N_(\"how automatic formatting is to be done\"),\n-      type='string', list='flags', scope={'buffer'},\n-      alloced=true,\n-      varname='p_fo',\n-      defaults={if_true=macros('DFLT_FO_VIM')},\n-      cb='did_set_formatoptions'\n-    },\n-    {\n-      full_name='formatlistpat', abbreviation='flp',\n-      short_desc=N_(\"pattern used to recognize a list header\"),\n-      type='string', scope={'buffer'},\n-      alloced=true,\n-      varname='p_flp',\n-      defaults={if_true=\"^\\\\s*\\\\d\\\\+[\\\\]:.)}\\\\t ]\\\\s*\"}\n-    },\n-    {\n-      full_name='formatprg', abbreviation='fp',\n-      short_desc=N_(\"name of external program used with \\\"gq\\\" command\"),\n-      type='string', scope={'global', 'buffer'},\n-      secure=true,\n-      expand=true,\n-      varname='p_fp',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='fsync', abbreviation='fs',\n-      short_desc=N_(\"whether to invoke fsync() after file write\"),\n-      type='bool', scope={'global'},\n-      secure=true,\n-      varname='p_fs',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='gdefault', abbreviation='gd',\n-      short_desc=N_(\"the \\\":substitute\\\" flag 'g' is default on\"),\n-      type='bool', scope={'global'},\n-      varname='p_gd',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='grepformat', abbreviation='gfm',\n-      short_desc=N_(\"format of 'grepprg' output\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_gefm',\n-      defaults={if_true=macros('DFLT_GREPFORMAT')}\n-    },\n-    {\n-      full_name='grepprg', abbreviation='gp',\n-      short_desc=N_(\"program to use for \\\":grep\\\"\"),\n-      type='string', scope={'global', 'buffer'},\n-      secure=true,\n-      expand=true,\n-      varname='p_gp',\n-      defaults={\n-        condition='MSWIN',\n-        -- Add an extra file name so that grep will always\n-        -- insert a file name in the match line. */\n-        if_true=\"findstr /n $* nul\",\n-        if_false=\"grep -n $* /dev/null\"\n-      }\n-    },\n-    {\n-      full_name='guicursor', abbreviation='gcr',\n-      short_desc=N_(\"GUI: settings for cursor shape and blinking\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_guicursor',\n-      defaults={if_true=\"n-v-c-sm:block,i-ci-ve:ver25,r-cr-o:hor20\"},\n-      cb='did_set_guicursor'\n-    },\n-    {\n-      full_name='guifont', abbreviation='gfn',\n-      short_desc=N_(\"GUI: Name(s) of font(s) to be used\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_guifont',\n-      redraw={'ui_option'},\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='guifontwide', abbreviation='gfw',\n-      short_desc=N_(\"list of font names for double-wide characters\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      redraw={'ui_option'},\n-      varname='p_guifontwide',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='guioptions', abbreviation='go',\n-      short_desc=N_(\"GUI: Which components and options are used\"),\n-      type='string', list='flags', scope={'global'},\n-      enable_if=false,\n-    },\n-    {\n-      full_name='guitablabel', abbreviation='gtl',\n-      short_desc=N_(\"GUI: custom label for a tab page\"),\n-      type='string', scope={'global'},\n-      modelineexpr=true,\n-      redraw={'current_window'},\n-      enable_if=false,\n-    },\n-    {\n-      full_name='guitabtooltip', abbreviation='gtt',\n-      short_desc=N_(\"GUI: custom tooltip for a tab page\"),\n-      type='string', scope={'global'},\n-      redraw={'current_window'},\n-      enable_if=false,\n-    },\n-    {\n-      full_name='helpfile', abbreviation='hf',\n-      short_desc=N_(\"full path name of the main help file\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      expand=true,\n-      varname='p_hf',\n-      defaults={if_true=macros('DFLT_HELPFILE')},\n-      cb='did_set_helpfile'\n-    },\n-    {\n-      full_name='helpheight', abbreviation='hh',\n-      short_desc=N_(\"minimum height of a new help window\"),\n-      type='number', scope={'global'},\n-      varname='p_hh',\n-      defaults={if_true=20},\n-      cb='did_set_helpheight'\n-    },\n-    {\n-      full_name='helplang', abbreviation='hlg',\n-      short_desc=N_(\"preferred help languages\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_hlg',\n-      defaults={if_true=\"\"},\n-      cb='did_set_helplang'\n-    },\n-    {\n-      full_name='hidden', abbreviation='hid',\n-      short_desc=N_(\"don't unload buffer when it is |abandon|ed\"),\n-      type='bool', scope={'global'},\n-      varname='p_hid',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='highlight', abbreviation='hl',\n-      short_desc=N_(\"sets highlighting mode for various occasions\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_hl',\n-      defaults={if_true=macros('HIGHLIGHT_INIT')},\n-      cb='did_set_highlight'\n-    },\n-    {\n-      full_name='history', abbreviation='hi',\n-      short_desc=N_(\"number of command-lines that are remembered\"),\n-      type='number', scope={'global'},\n-      varname='p_hi',\n-      defaults={if_true=10000}\n-    },\n-    {\n-      full_name='hkmap', abbreviation='hk',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      varname='p_force_off',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='hkmapp', abbreviation='hkp',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      varname='p_force_off',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='hlsearch', abbreviation='hls',\n-      short_desc=N_(\"highlight matches with last search pattern\"),\n-      type='bool', scope={'global'},\n-      redraw={'all_windows'},\n-      varname='p_hls',\n-      defaults={if_true=true},\n-      cb='did_set_hlsearch'\n-    },\n-    {\n-      full_name='icon',\n-      short_desc=N_(\"Vim set the text of the window icon\"),\n-      type='bool', scope={'global'},\n-      varname='p_icon',\n-      defaults={if_true=false},\n-      cb='did_set_title_icon'\n-    },\n-    {\n-      full_name='iconstring',\n-      short_desc=N_(\"to use for the Vim icon text\"),\n-      type='string', scope={'global'},\n-      modelineexpr=true,\n-      varname='p_iconstring',\n-      defaults={if_true=\"\"},\n-      cb='did_set_iconstring'\n-    },\n-    {\n-      full_name='ignorecase', abbreviation='ic',\n-      short_desc=N_(\"ignore case in search patterns\"),\n-      type='bool', scope={'global'},\n-      varname='p_ic',\n-      defaults={if_true=false},\n-      cb='did_set_ignorecase'\n-    },\n-    {\n-      full_name='imcmdline', abbreviation='imc',\n-      short_desc=N_(\"use IM when starting to edit a command line\"),\n-      type='bool', scope={'global'},\n-      enable_if=false,\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='imdisable', abbreviation='imd',\n-      short_desc=N_(\"do not use the IM in any mode\"),\n-      type='bool', scope={'global'},\n-      enable_if=false,\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='iminsert', abbreviation='imi',\n-      short_desc=N_(\"use :lmap or IM in Insert mode\"),\n-      type='number', scope={'buffer'},\n-      varname='p_iminsert', pv_name='p_imi',\n-      defaults={if_true=macros('B_IMODE_NONE')},\n-      cb='did_set_iminsert'\n-    },\n-    {\n-      full_name='imsearch', abbreviation='ims',\n-      short_desc=N_(\"use :lmap or IM when typing a search pattern\"),\n-      type='number', scope={'buffer'},\n-      varname='p_imsearch', pv_name='p_ims',\n-      defaults={\n-        if_true=macros('B_IMODE_USE_INSERT'),\n-      }\n-    },\n-    {\n-      full_name='inccommand', abbreviation='icm',\n-      short_desc=N_(\"Live preview of substitution\"),\n-      type='string', scope={'global'},\n-      varname='p_icm',\n-      defaults={if_true=\"nosplit\"},\n-      cb='did_set_inccommand'\n-    },\n-    {\n-      full_name='include', abbreviation='inc',\n-      short_desc=N_(\"pattern to be used to find an include file\"),\n-      type='string', scope={'global', 'buffer'},\n-      alloced=true,\n-      varname='p_inc',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='includeexpr', abbreviation='inex',\n-      short_desc=N_(\"expression used to process an include line\"),\n-      type='string', scope={'buffer'},\n-      modelineexpr=true,\n-      alloced=true,\n-      varname='p_inex',\n-      defaults={if_true=\"\"},\n-      cb='did_set_optexpr'\n-    },\n-    {\n-      full_name='incsearch', abbreviation='is',\n-      short_desc=N_(\"highlight match while typing search pattern\"),\n-      type='bool', scope={'global'},\n-      varname='p_is',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='indentexpr', abbreviation='inde',\n-      short_desc=N_(\"expression used to obtain the indent of a line\"),\n-      type='string', scope={'buffer'},\n-      modelineexpr=true,\n-      alloced=true,\n-      varname='p_inde',\n-      defaults={if_true=\"\"},\n-      cb='did_set_optexpr'\n-    },\n-    {\n-      full_name='indentkeys', abbreviation='indk',\n-      short_desc=N_(\"keys that trigger indenting with 'indentexpr'\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_indk',\n-      defaults={if_true=indentkeys_default}\n-    },\n-    {\n-      full_name='infercase', abbreviation='inf',\n-      short_desc=N_(\"adjust case of match for keyword completion\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_inf',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='insertmode', abbreviation='im',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      varname='p_force_off',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='isfname', abbreviation='isf',\n-      short_desc=N_(\"characters included in file names and pathnames\"),\n-      type='string', list='comma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_isf',\n-      defaults={\n-        condition='BACKSLASH_IN_FILENAME',\n-        -- Excluded are: & and ^ are special in cmd.exe\n-        -- ( and ) are used in text separating fnames */\n-        if_true=\"@,48-57,/,\\\\,.,-,_,+,,,#,$,%,{,},[,],:,@-@,!,~,=\",\n-        if_false=\"@,48-57,/,.,-,_,+,,,#,$,%,~,=\"\n+      deny_duplicates = true,\n+      desc = [=[\n+        A list of file patterns.  When one of the patterns matches with the\n+        name of the file which is written, no backup file is created.  Both\n+        the specified file name and the full path name of the file are used.\n+        The pattern is used like with |:autocmd|, see |autocmd-pattern|.\n+        Watch out for special characters, see |option-backslash|.\n+        When $TMPDIR, $TMP or $TEMP is not defined, it is not used for the\n+        default value.  \"/tmp/*\" is only used for Unix.\n+\n+        WARNING: Not having a backup file means that when Vim fails to write\n+        your buffer correctly and then, for whatever reason, Vim exits, you\n+        lose both the original file and what you were writing.  Only disable\n+        backups if you don't care about losing the file.\n+\n+        Note that environment variables are not expanded.  If you want to use\n+        $HOME you must expand it explicitly, e.g.: >\n+        \t:let &backupskip = escape(expand('$HOME'), '\\') .. '/tmp/*'\n+\n+        <\tNote that the default also makes sure that \"crontab -e\" works (when a\n+        backup would be made by renaming the original file crontab won't see\n+        the newly created file).  Also see 'backupcopy' and |crontab|.\n+      ]=],\n+      full_name = 'backupskip',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('no backup for files that match these patterns'),\n+      type = 'string',\n+      varname = 'p_bsk',\n+    },\n+    {\n+      abbreviation = 'bo',\n+      cb = 'did_set_belloff',\n+      defaults = { if_true = 'all' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Specifies for which events the bell will not be rung. It is a comma-\n+        separated list of items. For each item that is present, the bell\n+        will be silenced. This is most useful to specify specific events in\n+        insert mode to be silenced.\n+\n+        item\t    meaning when present\t~\n+        all\t    All events.\n+        backspace   When hitting <BS> or <Del> and deleting results in an\n+        \t    error.\n+        cursor\t    Fail to move around using the cursor keys or\n+        \t    <PageUp>/<PageDown> in |Insert-mode|.\n+        complete    Error occurred when using |i_CTRL-X_CTRL-K| or\n+        \t    |i_CTRL-X_CTRL-T|.\n+        copy\t    Cannot copy char from insert mode using |i_CTRL-Y| or\n+        \t    |i_CTRL-E|.\n+        ctrlg\t    Unknown Char after <C-G> in Insert mode.\n+        error\t    Other Error occurred (e.g. try to join last line)\n+        \t    (mostly used in |Normal-mode| or |Cmdline-mode|).\n+        esc\t    hitting <Esc> in |Normal-mode|.\n+        hangul\t    Ignored.\n+        lang\t    Calling the beep module for Lua/Mzscheme/TCL.\n+        mess\t    No output available for |g<|.\n+        showmatch   Error occurred for 'showmatch' function.\n+        operator    Empty region error |cpo-E|.\n+        register    Unknown register after <C-R> in |Insert-mode|.\n+        shell\t    Bell from shell output |:!|.\n+        spell\t    Error happened on spell suggest.\n+        wildmode    More matches in |cmdline-completion| available\n+        \t    (depends on the 'wildmode' setting).\n+\n+        This is most useful to fine tune when in Insert mode the bell should\n+        be rung. For Normal mode and Ex commands, the bell is often rung to\n+        indicate that an error occurred. It can be silenced by adding the\n+        \"error\" keyword.\n+      ]=],\n+      full_name = 'belloff',\n+      list = 'comma',\n+      scope = { 'global' },\n+      short_desc = N_('do not ring the bell for these reasons'),\n+      type = 'string',\n+      varname = 'p_bo',\n+    },\n+    {\n+      abbreviation = 'bin',\n+      cb = 'did_set_binary',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        This option should be set before editing a binary file.  You can also\n+        use the |-b| Vim argument.  When this option is switched on a few\n+        options will be changed (also when it already was on):\n+        \t'textwidth'  will be set to 0\n+        \t'wrapmargin' will be set to 0\n+        \t'modeline'   will be off\n+        \t'expandtab'  will be off\n+        Also, 'fileformat' and 'fileformats' options will not be used, the\n+        file is read and written like 'fileformat' was \"unix\" (a single <NL>\n+        separates lines).\n+        The 'fileencoding' and 'fileencodings' options will not be used, the\n+        file is read without conversion.\n+        NOTE: When you start editing a(nother) file while the 'bin' option is\n+        on, settings from autocommands may change the settings again (e.g.,\n+        'textwidth'), causing trouble when editing.  You might want to set\n+        'bin' again when the file has been loaded.\n+        The previous values of these options are remembered and restored when\n+        'bin' is switched from on to off.  Each buffer has its own set of\n+        saved option values.\n+        To edit a file with 'binary' set you can use the |++bin| argument.\n+        This avoids you have to do \":set bin\", which would have effect for all\n+        files you edit.\n+        When writing a file the <EOL> for the last line is only written if\n+        there was one in the original file (normally Vim appends an <EOL> to\n+        the last line if there is none; this would make the file longer).  See\n+        the 'endofline' option.\n+      ]=],\n+      full_name = 'binary',\n+      redraw = { 'statuslines' },\n+      scope = { 'buffer' },\n+      short_desc = N_('read/write/edit file in binary mode'),\n+      type = 'bool',\n+      varname = 'p_bin',\n+    },\n+    {\n+      cb = 'did_set_eof_eol_fixeol_bomb',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        When writing a file and the following conditions are met, a BOM (Byte\n+        Order Mark) is prepended to the file:\n+        - this option is on\n+        - the 'binary' option is off\n+        - 'fileencoding' is \"utf-8\", \"ucs-2\", \"ucs-4\" or one of the little/big\n+          endian variants.\n+        Some applications use the BOM to recognize the encoding of the file.\n+        Often used for UCS-2 files on MS-Windows.  For other applications it\n+        causes trouble, for example: \"cat file1 file2\" makes the BOM of file2\n+        appear halfway through the resulting file.  Gcc doesn't accept a BOM.\n+        When Vim reads a file and 'fileencodings' starts with \"ucs-bom\", a\n+        check for the presence of the BOM is done and 'bomb' set accordingly.\n+        Unless 'binary' is set, it is removed from the first line, so that you\n+        don't see it when editing.  When you don't change the options, the BOM\n+        will be restored when writing the file.\n+      ]=],\n+      full_name = 'bomb',\n+      no_mkrc = true,\n+      redraw = { 'statuslines' },\n+      scope = { 'buffer' },\n+      short_desc = N_('a Byte Order Mark to the file'),\n+      type = 'bool',\n+      varname = 'p_bomb',\n+    },\n+    {\n+      abbreviation = 'brk',\n+      cb = 'did_set_breakat',\n+      defaults = {\n+        if_true = ' \\t!@*-+;:,./?',\n+        doc = '\" ^I!@*-+;:,./?\"',\n       },\n-      cb='did_set_isopt'\n-    },\n-    {\n-      full_name='isident', abbreviation='isi',\n-      short_desc=N_(\"characters included in identifiers\"),\n-      type='string', list='comma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_isi',\n-      defaults={\n-        condition='MSWIN',\n-        if_true=\"@,48-57,_,128-167,224-235\",\n-        if_false=\"@,48-57,_,192-255\"\n+      desc = [=[\n+        This option lets you choose which characters might cause a line\n+        break if 'linebreak' is on.  Only works for ASCII characters.\n+      ]=],\n+      full_name = 'breakat',\n+      list = 'flags',\n+      redraw = { 'all_windows' },\n+      scope = { 'global' },\n+      short_desc = N_('characters that may cause a line break'),\n+      type = 'string',\n+      varname = 'p_breakat',\n+    },\n+    {\n+      abbreviation = 'bri',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Every wrapped line will continue visually indented (same amount of\n+        space as the beginning of that line), thus preserving horizontal blocks\n+        of text.\n+      ]=],\n+      full_name = 'breakindent',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('wrapped line repeats indent'),\n+      type = 'bool',\n+    },\n+    {\n+      abbreviation = 'briopt',\n+      alloced = true,\n+      cb = 'did_set_breakindentopt',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Settings for 'breakindent'. It can consist of the following optional\n+        items and must be separated by a comma:\n+        \tmin:{n}\t    Minimum text width that will be kept after\n+        \t\t    applying 'breakindent', even if the resulting\n+        \t\t    text should normally be narrower. This prevents\n+        \t\t    text indented almost to the right window border\n+        \t\t    occupying lot of vertical space when broken.\n+        \t\t    (default: 20)\n+        \tshift:{n}   After applying 'breakindent', the wrapped line's\n+        \t\t    beginning will be shifted by the given number of\n+        \t\t    characters.  It permits dynamic French paragraph\n+        \t\t    indentation (negative) or emphasizing the line\n+        \t\t    continuation (positive).\n+        \t\t    (default: 0)\n+        \tsbr\t    Display the 'showbreak' value before applying the\n+        \t\t    additional indent.\n+        \t\t    (default: off)\n+        \tlist:{n}    Adds an additional indent for lines that match a\n+        \t\t    numbered or bulleted list (using the\n+        \t\t    'formatlistpat' setting).\n+        \tlist:-1\t    Uses the length of a match with 'formatlistpat'\n+        \t\t    for indentation.\n+        \t\t    (default: 0)\n+        \tcolumn:{n}  Indent at column {n}. Will overrule the other\n+        \t\t    sub-options. Note: an additional indent may be\n+        \t\t    added for the 'showbreak' setting.\n+        \t\t    (default: off)\n+      ]=],\n+      full_name = 'breakindentopt',\n+      list = 'onecomma',\n+      redraw = { 'current_buffer' },\n+      scope = { 'window' },\n+      short_desc = N_(\"settings for 'breakindent'\"),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'bsdir',\n+      defaults = {\n+        if_true = '',\n+        doc = '\"last\"',\n       },\n-      cb='did_set_isopt'\n-    },\n-    {\n-      full_name='iskeyword', abbreviation='isk',\n-      short_desc=N_(\"characters included in keywords\"),\n-      type='string', list='comma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_isk',\n-      defaults={if_true=\"@,48-57,_,192-255\"},\n-      cb='did_set_isopt'\n-    },\n-    {\n-      full_name='isprint', abbreviation='isp',\n-      short_desc=N_(\"printable characters\"),\n-      type='string', list='comma', scope={'global'},\n-      deny_duplicates=true,\n-      redraw={'all_windows'},\n-      varname='p_isp',\n-      defaults={if_true=\"@,161-255\"},\n-      cb='did_set_isopt'\n-    },\n-    {\n-      full_name='joinspaces', abbreviation='js',\n-      short_desc=N_(\"two spaces after a period with a join command\"),\n-      type='bool', scope={'global'},\n-      varname='p_js',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='jumpoptions', abbreviation='jop',\n-      short_desc=N_(\"Controls the behavior of the jumplist\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_jop',\n-      defaults={if_true=''},\n-      cb='did_set_jumpoptions'\n-    },\n-    {\n-      full_name='keymap', abbreviation='kmp',\n-      short_desc=N_(\"name of a keyboard mapping\"),\n-      type='string', scope={'buffer'},\n-      normal_fname_chars=true,\n-      pri_mkrc=true,\n-      alloced=true,\n-      redraw={'statuslines', 'current_buffer'},\n-      varname='p_keymap', pv_name='p_kmap',\n-      defaults={if_true=\"\"},\n-      cb='did_set_keymap'\n-    },\n-    {\n-      full_name='keymodel', abbreviation='km',\n-      short_desc=N_(\"enable starting/stopping selection with keys\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_km',\n-      defaults={if_true=\"\"},\n-      cb='did_set_keymodel'\n-    },\n-    {\n-      full_name='keywordprg', abbreviation='kp',\n-      short_desc=N_(\"program to use for the \\\"K\\\" command\"),\n-      type='string', scope={'global', 'buffer'},\n-      secure=true,\n-      expand=true,\n-      varname='p_kp',\n-      defaults={\n-        if_true=\":Man\",\n-      }\n-    },\n-    {\n-      full_name='langmap', abbreviation='lmap',\n-      short_desc=N_(\"alphabetic characters for other language mode\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      secure=true,\n-      varname='p_langmap',\n-      defaults={if_true=\"\"},\n-      cb='did_set_langmap'\n-    },\n-    {\n-      full_name='langmenu', abbreviation='lm',\n-      short_desc=N_(\"language to be used for the menus\"),\n-      type='string', scope={'global'},\n-      normal_fname_chars=true,\n-      varname='p_lm',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='langnoremap', abbreviation='lnr',\n-      short_desc=N_(\"do not apply 'langmap' to mapped characters\"),\n-      type='bool', scope={'global'},\n-      varname='p_lnr',\n-      defaults={if_true=true},\n-      cb='did_set_langnoremap'\n-    },\n-    {\n-      full_name='langremap', abbreviation='lrm',\n-      short_desc=N_('No description'),\n-      type='bool', scope={'global'},\n-      varname='p_lrm',\n-      defaults={if_true=false},\n-      cb='did_set_langremap'\n-    },\n-    {\n-      full_name='laststatus', abbreviation='ls',\n-      short_desc=N_(\"tells when last window has status lines\"),\n-      type='number', scope={'global'},\n-      redraw={'all_windows'},\n-      varname='p_ls',\n-      defaults={if_true=2},\n-      cb='did_set_laststatus'\n-    },\n-    {\n-      full_name='lazyredraw', abbreviation='lz',\n-      short_desc=N_(\"don't redraw while executing macros\"),\n-      type='bool', scope={'global'},\n-      varname='p_lz',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='linebreak', abbreviation='lbr',\n-      short_desc=N_(\"wrap long lines at a blank\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='lines',\n-      short_desc=N_(\"of lines in the display\"),\n-      type='number', scope={'global'},\n-      no_mkrc=true,\n-      varname='p_lines',\n-      defaults={if_true=macros('DFLT_ROWS')}\n-    },\n-    {\n-      full_name='linespace', abbreviation='lsp',\n-      short_desc=N_(\"number of pixel lines to use between characters\"),\n-      type='number', scope={'global'},\n-      redraw={'ui_option'},\n-      varname='p_linespace',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='lisp',\n-      short_desc=N_(\"indenting for Lisp\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_lisp',\n-      defaults={if_true=false},\n-      cb='did_set_lisp'\n-    },\n-    {\n-      full_name='lispoptions', abbreviation='lop',\n-      short_desc=N_(\"options for lisp indenting\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      varname='p_lop', pv_name='p_lop',\n-      defaults={if_true=''},\n-      cb='did_set_lispoptions'\n-    },\n-    {\n-      full_name='lispwords', abbreviation='lw',\n-      short_desc=N_(\"words that change how lisp indenting works\"),\n-      type='string', list='onecomma', scope={'global', 'buffer'},\n-      deny_duplicates=true,\n-      varname='p_lispwords', pv_name='p_lw',\n-      defaults={if_true=macros('LISPWORD_VALUE')}\n-    },\n-    {\n-      full_name='list',\n-      short_desc=N_(\"<Tab> and <EOL>\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='listchars', abbreviation='lcs',\n-      short_desc=N_(\"characters for displaying in list mode\"),\n-      type='string', list='onecomma', scope={'global', 'window'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      redraw={'current_window'},\n-      varname='p_lcs',\n-      defaults={if_true=\"tab:> ,trail:-,nbsp:+\"},\n-      cb='did_set_chars_option'\n-    },\n-    {\n-      full_name='loadplugins', abbreviation='lpl',\n-      short_desc=N_(\"load plugin scripts when starting up\"),\n-      type='bool', scope={'global'},\n-      varname='p_lpl',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='magic',\n-      short_desc=N_(\"special characters in search patterns\"),\n-      type='bool', scope={'global'},\n-      varname='p_magic',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='makeef', abbreviation='mef',\n-      short_desc=N_(\"name of the errorfile for \\\":make\\\"\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      expand=true,\n-      varname='p_mef',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='makeencoding', abbreviation='menc',\n-      short_desc=N_(\"Converts the output of external commands\"),\n-      type='string', scope={'global', 'buffer'},\n-      varname='p_menc',\n-      defaults={if_true=\"\"},\n-      cb='did_set_encoding'\n-    },\n-    {\n-      full_name='makeprg', abbreviation='mp',\n-      short_desc=N_(\"program to use for the \\\":make\\\" command\"),\n-      type='string', scope={'global', 'buffer'},\n-      secure=true,\n-      expand=true,\n-      varname='p_mp',\n-      defaults={if_true=\"make\"}\n-    },\n-    {\n-      full_name='matchpairs', abbreviation='mps',\n-      short_desc=N_(\"pairs of characters that \\\"%\\\" can match\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_mps',\n-      defaults={if_true=\"(:),{:},[:]\"},\n-      cb='did_set_matchpairs'\n-    },\n-    {\n-      full_name='matchtime', abbreviation='mat',\n-      short_desc=N_(\"tenths of a second to show matching paren\"),\n-      type='number', scope={'global'},\n-      varname='p_mat',\n-      defaults={if_true=5}\n-    },\n-    {\n-      full_name='maxcombine', abbreviation='mco',\n-      short_desc=N_(\"maximum nr of combining characters displayed\"),\n-      type='number', scope={'global'},\n-      varname='p_mco',\n-      defaults={if_true=6}\n-    },\n-    {\n-      full_name='maxfuncdepth', abbreviation='mfd',\n-      short_desc=N_(\"maximum recursive depth for user functions\"),\n-      type='number', scope={'global'},\n-      varname='p_mfd',\n-      defaults={if_true=100}\n-    },\n-    {\n-      full_name='maxmapdepth', abbreviation='mmd',\n-      short_desc=N_(\"maximum recursive depth for mapping\"),\n-      type='number', scope={'global'},\n-      varname='p_mmd',\n-      defaults={if_true=1000}\n-    },\n-    {\n-      full_name='maxmempattern', abbreviation='mmp',\n-      short_desc=N_(\"maximum memory (in Kbyte) used for pattern search\"),\n-      type='number', scope={'global'},\n-      varname='p_mmp',\n-      defaults={if_true=1000}\n-    },\n-    {\n-      full_name='menuitems', abbreviation='mis',\n-      short_desc=N_(\"maximum number of items in a menu\"),\n-      type='number', scope={'global'},\n-      varname='p_mis',\n-      defaults={if_true=25}\n-    },\n-    {\n-      full_name='mkspellmem', abbreviation='msm',\n-      short_desc=N_(\"memory used before |:mkspell| compresses the tree\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      expand=true,\n-      varname='p_msm',\n-      defaults={if_true=\"460000,2000,500\"},\n-      cb='did_set_mkspellmem'\n-    },\n-    {\n-      full_name='modeline', abbreviation='ml',\n-      short_desc=N_(\"recognize modelines at start or end of file\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_ml',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='modelineexpr', abbreviation='mle',\n-      short_desc=N_(\"allow some options to be set in modeline\"),\n-      type='bool', scope={'global'},\n-      secure=true,\n-      varname='p_mle',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='modelines', abbreviation='mls',\n-      short_desc=N_(\"number of lines checked for modelines\"),\n-      type='number', scope={'global'},\n-      varname='p_mls',\n-      defaults={if_true=5}\n-    },\n-    {\n-      full_name='modifiable', abbreviation='ma',\n-      short_desc=N_(\"changes to the text are not possible\"),\n-      type='bool', scope={'buffer'},\n-      noglob=true,\n-      varname='p_ma',\n-      defaults={if_true=true},\n-      cb='did_set_modifiable'\n-    },\n-    {\n-      full_name='modified', abbreviation='mod',\n-      short_desc=N_(\"buffer has been modified\"),\n-      type='bool', scope={'buffer'},\n-      no_mkrc=true,\n-      redraw={'statuslines'},\n-      varname='p_mod',\n-      defaults={if_true=false},\n-      cb='did_set_modified'\n-    },\n-    {\n-      full_name='more',\n-      short_desc=N_(\"listings when the whole screen is filled\"),\n-      type='bool', scope={'global'},\n-      varname='p_more',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='mouse',\n-      short_desc=N_(\"the use of mouse clicks\"),\n-      type='string', list='flags', scope={'global'},\n-      varname='p_mouse',\n-      defaults={if_true=\"nvi\"},\n-      cb='did_set_mouse'\n-    },\n-    {\n-      full_name='mousefocus', abbreviation='mousef',\n-      short_desc=N_(\"keyboard focus follows the mouse\"),\n-      type='bool', scope={'global'},\n-      redraw={'ui_option'},\n-      varname='p_mousef',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='mousehide', abbreviation='mh',\n-      short_desc=N_(\"hide mouse pointer while typing\"),\n-      type='bool', scope={'global'},\n-      enable_if=false,\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='mousemodel', abbreviation='mousem',\n-      short_desc=N_(\"changes meaning of mouse buttons\"),\n-      type='string', scope={'global'},\n-      varname='p_mousem',\n-      defaults={if_true=\"popup_setpos\"},\n-      cb='did_set_mousemodel'\n-    },\n-    {\n-      full_name='mousemoveevent', abbreviation='mousemev',\n-      short_desc=N_(\"deliver mouse move events to input queue\"),\n-      type='bool', scope={'global'},\n-      redraw={'ui_option'},\n-      varname='p_mousemev',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='mousescroll',\n-      short_desc=N_(\"amount to scroll by when scrolling with a mouse\"),\n-      type='string', list='comma', scope={'global'},\n-      vi_def=true,\n-      varname='p_mousescroll',\n-      defaults={if_true=\"ver:3,hor:6\"},\n-      cb='did_set_mousescroll'\n-    },\n-    {\n-      full_name='mouseshape', abbreviation='mouses',\n-      short_desc=N_(\"shape of the mouse pointer in different modes\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      enable_if=false,\n-    },\n-    {\n-      full_name='mousetime', abbreviation='mouset',\n-      short_desc=N_(\"max time between mouse double-click\"),\n-      type='number', scope={'global'},\n-      varname='p_mouset',\n-      defaults={if_true=500}\n-    },\n-    {\n-      full_name='nrformats', abbreviation='nf',\n-      short_desc=N_(\"number formats recognized for CTRL-A command\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_nf',\n-      defaults={if_true=\"bin,hex\"},\n-      cb='did_set_nrformats'\n-    },\n-    {\n-      full_name='number', abbreviation='nu',\n-      short_desc=N_(\"print the line number in front of each line\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=false},\n-      cb='did_set_number_relativenumber'\n-    },\n-    {\n-      full_name='numberwidth', abbreviation='nuw',\n-      short_desc=N_(\"number of columns used for the line number\"),\n-      type='number', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=4},\n-      cb='did_set_numberwidth'\n-    },\n-    {\n-      full_name='omnifunc', abbreviation='ofu',\n-      short_desc=N_(\"function for filetype-specific completion\"),\n-      type='string', scope={'buffer'},\n-      secure=true,\n-      alloced=true,\n-      func=true,\n-      varname='p_ofu',\n-      defaults={if_true=\"\"},\n-      cb='did_set_omnifunc'\n-    },\n-    {\n-      full_name='opendevice', abbreviation='odev',\n-      short_desc=N_(\"allow reading/writing devices on MS-Windows\"),\n-      type='bool', scope={'global'},\n-      enable_if=false,\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='operatorfunc', abbreviation='opfunc',\n-      short_desc=N_(\"function to be called for |g@| operator\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      func=true,\n-      varname='p_opfunc',\n-      defaults={if_true=\"\"},\n-      cb='did_set_operatorfunc'\n-    },\n-    {\n-      full_name='packpath', abbreviation='pp',\n-      short_desc=N_(\"list of directories used for packages\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      secure=true,\n-      expand=true,\n-      varname='p_pp',\n-      defaults={if_true=''},\n-      cb='did_set_runtimepackpath'\n-    },\n-    {\n-      full_name='paragraphs', abbreviation='para',\n-      short_desc=N_(\"nroff macros that separate paragraphs\"),\n-      type='string', scope={'global'},\n-      varname='p_para',\n-      defaults={if_true=\"IPLPPPQPP TPHPLIPpLpItpplpipbp\"}\n-    },\n-    {\n-      full_name='paste',\n-      short_desc=N_(\"pasting text\"),\n-      type='bool', scope={'global'},\n-      pri_mkrc=true,\n-      varname='p_paste',\n-      defaults={if_true=false},\n-      cb='did_set_paste'\n-    },\n-    {\n-      full_name='pastetoggle', abbreviation='pt',\n-      short_desc=N_(\"No description\"),\n-      type='string', scope={'global'},\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='patchexpr', abbreviation='pex',\n-      short_desc=N_(\"expression used to patch a file\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      varname='p_pex',\n-      defaults={if_true=\"\"},\n-      cb='did_set_optexpr'\n-    },\n-    {\n-      full_name='patchmode', abbreviation='pm',\n-      short_desc=N_(\"keep the oldest version of a file\"),\n-      type='string', scope={'global'},\n-      normal_fname_chars=true,\n-      varname='p_pm',\n-      defaults={if_true=\"\"},\n-      cb='did_set_backupext_or_patchmode'\n-    },\n-    {\n-      full_name='path', abbreviation='pa',\n-      short_desc=N_(\"list of directories searched with \\\"gf\\\" et.al.\"),\n-      type='string', list='comma', scope={'global', 'buffer'},\n-      deny_duplicates=true,\n-      expand=true,\n-      varname='p_path',\n-      defaults={if_true=\".,,\"}\n-    },\n-    {\n-      full_name='preserveindent', abbreviation='pi',\n-      short_desc=N_(\"preserve the indent structure when reindenting\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_pi',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='previewheight', abbreviation='pvh',\n-      short_desc=N_(\"height of the preview window\"),\n-      type='number', scope={'global'},\n-      varname='p_pvh',\n-      defaults={if_true=12}\n-    },\n-    {\n-      full_name='previewwindow', abbreviation='pvw',\n-      short_desc=N_(\"identifies the preview window\"),\n-      type='bool', scope={'window'},\n-      noglob=true,\n-      redraw={'statuslines'},\n-      defaults={if_true=false},\n-      cb='did_set_previewwindow'\n-    },\n-    {\n-      full_name='prompt',\n-      short_desc=N_(\"enable prompt in Ex mode\"),\n-      type='bool', scope={'global'},\n-      varname='p_force_on',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='pumblend', abbreviation='pb',\n-      short_desc=N_(\"Controls transparency level of popup menu\"),\n-      type='number', scope={'global'},\n-      redraw={'ui_option'},\n-      varname='p_pb',\n-      defaults={if_true=0},\n-      cb='did_set_pumblend'\n-    },\n-    {\n-      full_name='pumheight', abbreviation='ph',\n-      short_desc=N_(\"maximum height of the popup menu\"),\n-      type='number', scope={'global'},\n-      varname='p_ph',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='pumwidth', abbreviation='pw',\n-      short_desc=N_(\"minimum width of the popup menu\"),\n-      type='number', scope={'global'},\n-      varname='p_pw',\n-      defaults={if_true=15}\n-    },\n-    {\n-      full_name='pyxversion', abbreviation='pyx',\n-      short_desc=N_(\"selects default python version to use\"),\n-      type='number', scope={'global'},\n-      secure=true,\n-      varname='p_pyx',\n-      defaults={if_true=3}\n-    },\n-    {\n-      full_name='quickfixtextfunc', abbreviation='qftf',\n-      short_desc=N_(\"customize the quickfix window\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      func=true,\n-      varname='p_qftf',\n-      defaults={if_true=\"\"},\n-      cb='did_set_quickfixtextfunc'\n-    },\n-    {\n-      full_name='quoteescape', abbreviation='qe',\n-      short_desc=N_(\"escape characters used in a string\"),\n-      type='string', scope={'buffer'},\n-      alloced=true,\n-      varname='p_qe',\n-      defaults={if_true=\"\\\\\"}\n-    },\n-    {\n-      full_name='readonly', abbreviation='ro',\n-      short_desc=N_(\"disallow writing the buffer\"),\n-      type='bool', scope={'buffer'},\n-      noglob=true,\n-      redraw={'statuslines'},\n-      varname='p_ro',\n-      defaults={if_true=false},\n-      cb='did_set_readonly'\n-    },\n-    {\n-      full_name='redrawdebug', abbreviation='rdb',\n-      short_desc=N_(\"Changes the way redrawing works (debug)\"),\n-      type='string', list='onecomma', scope={'global'},\n-      varname='p_rdb',\n-      defaults={if_true=''},\n-      cb='did_set_redrawdebug'\n-    },\n-    {\n-      full_name='redrawtime', abbreviation='rdt',\n-      short_desc=N_(\"timeout for 'hlsearch' and |:match| highlighting\"),\n-      type='number', scope={'global'},\n-      varname='p_rdt',\n-      defaults={if_true=2000}\n-    },\n-    {\n-      full_name='regexpengine', abbreviation='re',\n-      short_desc=N_(\"default regexp engine to use\"),\n-      type='number', scope={'global'},\n-      varname='p_re',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='relativenumber', abbreviation='rnu',\n-      short_desc=N_(\"show relative line number in front of each line\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=false},\n-      cb='did_set_number_relativenumber'\n-    },\n-    {\n-      full_name='remap',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      varname='p_force_on',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='report',\n-      short_desc=N_(\"for reporting nr. of lines changed\"),\n-      type='number', scope={'global'},\n-      varname='p_report',\n-      defaults={if_true=2}\n-    },\n-    {\n-      full_name='revins', abbreviation='ri',\n-      short_desc=N_(\"inserting characters will work backwards\"),\n-      type='bool', scope={'global'},\n-      varname='p_ri',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='rightleft', abbreviation='rl',\n-      short_desc=N_(\"window is right-to-left oriented\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='rightleftcmd', abbreviation='rlc',\n-      short_desc=N_(\"commands for which editing works right-to-left\"),\n-      type='string', scope={'window'},\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"search\"},\n-      cb='did_set_rightleftcmd'\n-    },\n-    {\n-      full_name='ruler', abbreviation='ru',\n-      short_desc=N_(\"show cursor line and column in the status line\"),\n-      type='bool', scope={'global'},\n-      redraw={'statuslines'},\n-      varname='p_ru',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='rulerformat', abbreviation='ruf',\n-      short_desc=N_(\"custom format for the ruler\"),\n-      type='string', scope={'global'},\n-      alloced=true,\n-      modelineexpr=true,\n-      redraw={'statuslines'},\n-      varname='p_ruf',\n-      defaults={if_true=\"\"},\n-      cb='did_set_rulerformat'\n-    },\n-    {\n-      full_name='runtimepath', abbreviation='rtp',\n-      short_desc=N_(\"list of directories used for runtime files\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      secure=true,\n-      expand='nodefault',\n-      varname='p_rtp',\n-      defaults={if_true=''},\n-      cb='did_set_runtimepackpath'\n-    },\n-    {\n-      full_name='scroll', abbreviation='scr',\n-      short_desc=N_(\"lines to scroll with CTRL-U and CTRL-D\"),\n-      type='number', scope={'window'},\n-      no_mkrc=true,\n-      pv_name='p_scroll',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='smoothscroll', abbreviation='sms',\n-      short_desc=N_(\"scroll by screen lines when 'wrap' is set\"),\n-      type='bool', scope={'window'},\n-      pv_name='p_sms',\n-      redraw={'current_window'},\n-      defaults={if_true=0},\n-      cb='did_set_smoothscroll'\n-    },\n-    {\n-      full_name='scrollback', abbreviation='scbk',\n-      short_desc=N_(\"lines to scroll with CTRL-U and CTRL-D\"),\n-      type='number', scope={'buffer'},\n-      varname='p_scbk',\n-      redraw={'current_buffer'},\n-      defaults={if_true=-1},\n-      cb='did_set_scrollback'\n-    },\n-    {\n-      full_name='scrollbind', abbreviation='scb',\n-      short_desc=N_(\"scroll in window as other windows scroll\"),\n-      type='bool', scope={'window'},\n-      pv_name='p_scbind',\n-      defaults={if_true=false},\n-      cb='did_set_scrollbind'\n-    },\n-    {\n-      full_name='scrolljump', abbreviation='sj',\n-      short_desc=N_(\"minimum number of lines to scroll\"),\n-      type='number', scope={'global'},\n-      varname='p_sj',\n-      defaults={if_true=1}\n-    },\n-    {\n-      full_name='scrolloff', abbreviation='so',\n-      short_desc=N_(\"minimum nr. of lines above and below cursor\"),\n-      type='number', scope={'global', 'window'},\n-      varname='p_so',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='scrollopt', abbreviation='sbo',\n-      short_desc=N_(\"how 'scrollbind' should behave\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_sbo',\n-      defaults={if_true=\"ver,jump\"},\n-      cb='did_set_scrollopt'\n-    },\n-    {\n-      full_name='sections', abbreviation='sect',\n-      short_desc=N_(\"nroff macros that separate sections\"),\n-      type='string', scope={'global'},\n-      varname='p_sections',\n-      defaults={if_true=\"SHNHH HUnhsh\"}\n-    },\n-    {\n-      full_name='secure',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      secure=true,\n-      varname='p_secure',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='selection', abbreviation='sel',\n-      short_desc=N_(\"what type of selection to use\"),\n-      type='string', scope={'global'},\n-      varname='p_sel',\n-      defaults={if_true=\"inclusive\"},\n-      cb='did_set_selection'\n-    },\n-    {\n-      full_name='selectmode', abbreviation='slm',\n-      short_desc=N_(\"when to use Select mode instead of Visual mode\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_slm',\n-      defaults={if_true=\"\"},\n-      cb='did_set_selectmode'\n-    },\n-    {\n-      full_name='sessionoptions', abbreviation='ssop',\n-      short_desc=N_(\"options for |:mksession|\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_ssop',\n-      defaults={if_true=\"blank,buffers,curdir,folds,help,tabpages,winsize,terminal\"},\n-      cb='did_set_sessionoptions',\n-    },\n-    {\n-      full_name='shada', abbreviation='sd',\n-      short_desc=N_(\"use .shada file upon startup and exiting\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      secure=true,\n-      varname='p_shada',\n-      defaults={if_true=\"!,'100,<50,s10,h\"}\n-    },\n-    {\n-      full_name='shadafile', abbreviation='sdf',\n-      short_desc=N_(\"overrides the filename used for shada\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      secure=true,\n-      expand=true,\n-      varname='p_shadafile',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='shell', abbreviation='sh',\n-      short_desc=N_(\"name of shell to use for external commands\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      expand=true,\n-      varname='p_sh',\n-      defaults={\n-        condition='MSWIN',\n-        if_true=\"cmd.exe\",\n-        if_false=\"sh\"\n-      }\n-    },\n-    {\n-      full_name='shellcmdflag', abbreviation='shcf',\n-      short_desc=N_(\"flag to shell to execute one command\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      varname='p_shcf',\n-      defaults={\n-        condition='MSWIN',\n-        if_true=\"/s /c\",\n-        if_false=\"-c\"\n-      }\n-    },\n-    {\n-      full_name='shellpipe', abbreviation='sp',\n-      short_desc=N_(\"string to put output of \\\":make\\\" in error file\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      varname='p_sp',\n-      defaults={\n-        condition='MSWIN',\n-        if_true=\"2>&1| tee\",\n-        if_false=\"| tee\",\n-      }\n-    },\n-    {\n-      full_name='shellquote', abbreviation='shq',\n-      short_desc=N_(\"quote character(s) for around shell command\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      varname='p_shq',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='shellredir', abbreviation='srr',\n-      short_desc=N_(\"string to put output of filter in a temp file\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      varname='p_srr',\n-      defaults={\n-        condition='MSWIN',\n-        if_true=\">%s 2>&1\",\n-        if_false=\">\"\n-      }\n-    },\n-    {\n-      full_name='shellslash', abbreviation='ssl',\n-      short_desc=N_(\"use forward slash for shell file names\"),\n-      type='bool', scope={'global'},\n-      varname='p_ssl',\n-      enable_if='BACKSLASH_IN_FILENAME',\n-      defaults={if_true=false},\n-      cb='did_set_shellslash'\n-    },\n-    {\n-      full_name='shelltemp', abbreviation='stmp',\n-      short_desc=N_(\"whether to use a temp file for shell commands\"),\n-      type='bool', scope={'global'},\n-      varname='p_stmp',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='shellxquote', abbreviation='sxq',\n-      short_desc=N_(\"like 'shellquote', but include redirection\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      varname='p_sxq',\n-      defaults={\n-        condition='MSWIN',\n-        if_true=\"\\\"\",\n-        if_false=\"\",\n-      }\n-    },\n-    {\n-      full_name='shellxescape', abbreviation='sxe',\n-      short_desc=N_(\"characters to escape when 'shellxquote' is (\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      varname='p_sxe',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='shiftround', abbreviation='sr',\n-      short_desc=N_(\"round indent to multiple of shiftwidth\"),\n-      type='bool', scope={'global'},\n-      varname='p_sr',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='shiftwidth', abbreviation='sw',\n-      short_desc=N_(\"number of spaces to use for (auto)indent step\"),\n-      type='number', scope={'buffer'},\n-      varname='p_sw',\n-      defaults={if_true=8},\n-      cb='did_set_shiftwidth_tabstop'\n-    },\n-    {\n-      full_name='shortmess', abbreviation='shm',\n-      short_desc=N_(\"list of flags, reduce length of messages\"),\n-      type='string', list='flags', scope={'global'},\n-      varname='p_shm',\n-      defaults={if_true=\"filnxtToOCF\"},\n-      cb='did_set_shortmess'\n-    },\n-    {\n-      full_name='showbreak', abbreviation='sbr',\n-      short_desc=N_(\"string to use at the start of wrapped lines\"),\n-      type='string', scope={'global', 'window'},\n-      redraw={'all_windows'},\n-      varname='p_sbr',\n-      defaults={if_true=\"\"},\n-      cb='did_set_showbreak'\n-    },\n-    {\n-      full_name='showcmd', abbreviation='sc',\n-      short_desc=N_(\"show (partial) command in status line\"),\n-      type='bool', scope={'global'},\n-      varname='p_sc',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='showcmdloc', abbreviation='sloc',\n-      short_desc=N_(\"change location of partial command\"),\n-      type='string', scope={'global'},\n-      varname='p_sloc',\n-      defaults={if_true=\"last\"},\n-      cb='did_set_showcmdloc'\n-    },\n-    {\n-      full_name='showfulltag', abbreviation='sft',\n-      short_desc=N_(\"show full tag pattern when completing tag\"),\n-      type='bool', scope={'global'},\n-      varname='p_sft',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='showmatch', abbreviation='sm',\n-      short_desc=N_(\"briefly jump to matching bracket if insert one\"),\n-      type='bool', scope={'global'},\n-      varname='p_sm',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='showmode', abbreviation='smd',\n-      short_desc=N_(\"message on status line to show current mode\"),\n-      type='bool', scope={'global'},\n-      varname='p_smd',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='showtabline', abbreviation='stal',\n-      short_desc=N_(\"tells when the tab pages line is displayed\"),\n-      type='number', scope={'global'},\n-      redraw={'all_windows', 'ui_option'},\n-      varname='p_stal',\n-      defaults={if_true=1},\n-      cb='did_set_showtabline'\n-    },\n-    {\n-      full_name='sidescroll', abbreviation='ss',\n-      short_desc=N_(\"minimum number of columns to scroll horizontal\"),\n-      type='number', scope={'global'},\n-      varname='p_ss',\n-      defaults={if_true=1}\n-    },\n-    {\n-      full_name='sidescrolloff', abbreviation='siso',\n-      short_desc=N_(\"min. nr. of columns to left and right of cursor\"),\n-      type='number', scope={'global', 'window'},\n-      varname='p_siso',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='signcolumn', abbreviation='scl',\n-      short_desc=N_(\"when to display the sign column\"),\n-      type='string', scope={'window'},\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"auto\"},\n-      cb='did_set_signcolumn'\n-    },\n-    {\n-      full_name='smartcase', abbreviation='scs',\n-      short_desc=N_(\"no ignore case when pattern has uppercase\"),\n-      type='bool', scope={'global'},\n-      varname='p_scs',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='smartindent', abbreviation='si',\n-      short_desc=N_(\"smart autoindenting for C programs\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_si',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='smarttab', abbreviation='sta',\n-      short_desc=N_(\"use 'shiftwidth' when inserting <Tab>\"),\n-      type='bool', scope={'global'},\n-      varname='p_sta',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='softtabstop', abbreviation='sts',\n-      short_desc=N_(\"number of spaces that <Tab> uses while editing\"),\n-      type='number', scope={'buffer'},\n-      varname='p_sts',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='spell',\n-      short_desc=N_(\"spell checking\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=false},\n-      cb='did_set_spell'\n-    },\n-    {\n-      full_name='spellcapcheck', abbreviation='spc',\n-      short_desc=N_(\"pattern to locate end of a sentence\"),\n-      type='string', scope={'buffer'},\n-      alloced=true,\n-      redraw={'current_buffer'},\n-      varname='p_spc',\n-      defaults={if_true=\"[.?!]\\\\_[\\\\])'\\\"\t ]\\\\+\"},\n-      cb='did_set_spellcapcheck'\n-    },\n-    {\n-      full_name='spellfile', abbreviation='spf',\n-      short_desc=N_(\"files where |zg| and |zw| store words\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      secure=true,\n-      alloced=true,\n-      expand=true,\n-      varname='p_spf',\n-      defaults={if_true=\"\"},\n-      cb='did_set_spellfile'\n-    },\n-    {\n-      full_name='spelllang', abbreviation='spl',\n-      short_desc=N_(\"language(s) to do spell checking for\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      expand=true,\n-      redraw={'current_buffer'},\n-      varname='p_spl',\n-      defaults={if_true=\"en\"},\n-      cb='did_set_spelllang'\n-    },\n-    {\n-      full_name='spellsuggest', abbreviation='sps',\n-      short_desc=N_(\"method(s) used to suggest spelling corrections\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      secure=true,\n-      expand=true,\n-      varname='p_sps',\n-      defaults={if_true=\"best\"},\n-      cb='did_set_spellsuggest'\n-    },\n-    {\n-      full_name='spelloptions', abbreviation='spo',\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      secure=true,\n-      expand=true,\n-      varname='p_spo',\n-      redraw={'current_buffer'},\n-      defaults={if_true=\"\"},\n-      cb='did_set_spelloptions'\n-    },\n-    {\n-      full_name='splitbelow', abbreviation='sb',\n-      short_desc=N_(\"new window from split is below the current one\"),\n-      type='bool', scope={'global'},\n-      varname='p_sb',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='splitkeep', abbreviation='spk',\n-      short_desc=N_(\"determines scroll behavior for split windows\"),\n-      type='string', scope={'global'},\n-      varname='p_spk',\n-      defaults={if_true='cursor'},\n-      cb='did_set_splitkeep'\n-    },\n-    {\n-      full_name='splitright', abbreviation='spr',\n-      short_desc=N_(\"new window is put right of the current one\"),\n-      type='bool', scope={'global'},\n-      varname='p_spr',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='startofline', abbreviation='sol',\n-      short_desc=N_(\"commands move cursor to first non-blank in line\"),\n-      type='bool', scope={'global'},\n-      vim=false,\n-      varname='p_sol',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='statuscolumn', abbreviation='stc',\n-      short_desc=N_(\"custom format for the status column\"),\n-      type='string', scope={'window'},\n-      redraw={'current_window'},\n-      secure=true,\n-      alloced=true,\n-      defaults={if_true=\"\"},\n-      cb='did_set_statuscolumn'\n-    },\n-    {\n-      full_name='statusline', abbreviation='stl',\n-      short_desc=N_(\"custom format for the status line\"),\n-      type='string', scope={'global', 'window'},\n-      alloced=true,\n-      modelineexpr=true,\n-      redraw={'statuslines'},\n-      varname='p_stl',\n-      defaults={if_true=\"\"},\n-      cb='did_set_statusline'\n-    },\n-    {\n-      full_name='suffixes', abbreviation='su',\n-      short_desc=N_(\"suffixes that are ignored with multiple match\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_su',\n-      defaults={if_true=\".bak,~,.o,.h,.info,.swp,.obj\"}\n-    },\n-    {\n-      full_name='suffixesadd', abbreviation='sua',\n-      short_desc=N_(\"suffixes added when searching for a file\"),\n-      type='string', list='onecomma', scope={'buffer'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      varname='p_sua',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='swapfile', abbreviation='swf',\n-      short_desc=N_(\"whether to use a swapfile for a buffer\"),\n-      type='bool', scope={'buffer'},\n-      redraw={'statuslines'},\n-      varname='p_swf',\n-      defaults={if_true=true},\n-      cb='did_set_swapfile'\n-    },\n-    {\n-      full_name='switchbuf', abbreviation='swb',\n-      short_desc=N_(\"sets behavior when switching to another buffer\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_swb',\n-      defaults={if_true=\"uselast\"},\n-      cb='did_set_switchbuf'\n-    },\n-    {\n-      full_name='synmaxcol', abbreviation='smc',\n-      short_desc=N_(\"maximum column to find syntax items\"),\n-      type='number', scope={'buffer'},\n-      redraw={'current_buffer'},\n-      varname='p_smc',\n-      defaults={if_true=3000}\n-    },\n-    {\n-      full_name='syntax', abbreviation='syn',\n-      short_desc=N_(\"syntax to be loaded for current buffer\"),\n-      type='string', scope={'buffer'},\n-      noglob=true,\n-      normal_fname_chars=true,\n-      alloced=true,\n-      varname='p_syn',\n-      defaults={if_true=\"\"},\n-      cb='did_set_filetype_or_syntax'\n-    },\n-    {\n-      full_name='tagfunc', abbreviation='tfu',\n-      short_desc=N_(\"function used to perform tag searches\"),\n-      type='string', scope={'buffer'},\n-      secure=true,\n-      func=true,\n-      varname='p_tfu',\n-      defaults={if_true=\"\"},\n-      cb='did_set_tagfunc'\n-    },\n-    {\n-      full_name='tabline', abbreviation='tal',\n-      short_desc=N_(\"custom format for the console tab pages line\"),\n-      type='string', scope={'global'},\n-      modelineexpr=true,\n-      redraw={'tabline'},\n-      varname='p_tal',\n-      defaults={if_true=\"\"},\n-      cb='did_set_tabline'\n-    },\n-    {\n-      full_name='tabpagemax', abbreviation='tpm',\n-      short_desc=N_(\"maximum number of tab pages for |-p| and \\\"tab all\\\"\"),\n-      type='number', scope={'global'},\n-      varname='p_tpm',\n-      defaults={if_true=50}\n-    },\n-    {\n-      full_name='tabstop', abbreviation='ts',\n-      short_desc=N_(\"number of spaces that <Tab> in file uses\"),\n-      type='number', scope={'buffer'},\n-      redraw={'current_buffer'},\n-      varname='p_ts',\n-      defaults={if_true=8},\n-      cb='did_set_shiftwidth_tabstop'\n-    },\n-    {\n-      full_name='tagbsearch', abbreviation='tbs',\n-      short_desc=N_(\"use binary searching in tags files\"),\n-      type='bool', scope={'global'},\n-      varname='p_tbs',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='tagcase', abbreviation='tc',\n-      short_desc=N_(\"how to handle case when searching in tags files\"),\n-      type='string', scope={'global', 'buffer'},\n-      varname='p_tc',\n-      defaults={if_true=\"followic\"},\n-      cb='did_set_tagcase'\n-    },\n-    {\n-      full_name='taglength', abbreviation='tl',\n-      short_desc=N_(\"number of significant characters for a tag\"),\n-      type='number', scope={'global'},\n-      varname='p_tl',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='tagrelative', abbreviation='tr',\n-      short_desc=N_(\"file names in tag file are relative\"),\n-      type='bool', scope={'global'},\n-      varname='p_tr',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='tags', abbreviation='tag',\n-      short_desc=N_(\"list of file names used by the tag command\"),\n-      type='string', list='onecomma', scope={'global', 'buffer'},\n-      deny_duplicates=true,\n-      expand=true,\n-      varname='p_tags',\n-      defaults={if_true=\"./tags;,tags\"}\n-    },\n-    {\n-      full_name='tagstack', abbreviation='tgst',\n-      short_desc=N_(\"push tags onto the tag stack\"),\n-      type='bool', scope={'global'},\n-      varname='p_tgst',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='termbidi', abbreviation='tbidi',\n-      short_desc=N_(\"terminal takes care of bi-directionality\"),\n-      type='bool', scope={'global'},\n-      varname='p_tbidi',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='termencoding', abbreviation='tenc',\n-      short_desc=N_(\"Terminal encoding\"),\n-      type='string', scope={'global'},\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='termguicolors', abbreviation='tgc',\n-      short_desc=N_(\"Terminal true color support\"),\n-      type='bool', scope={'global'},\n-      redraw={'ui_option'},\n-      varname='p_tgc',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='termpastefilter', abbreviation='tpf',\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_tpf',\n-      defaults={if_true=\"BS,HT,ESC,DEL\"},\n-      cb='did_set_termpastefilter'\n-    },\n-    {\n-      full_name='terse',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      varname='p_force_off',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='textwidth', abbreviation='tw',\n-      short_desc=N_(\"maximum width of text that is being inserted\"),\n-      type='number', scope={'buffer'},\n-      redraw={'current_buffer'},\n-      varname='p_tw',\n-      defaults={if_true=0},\n-      cb='did_set_textwidth'\n-    },\n-    {\n-      full_name='thesaurus', abbreviation='tsr',\n-      short_desc=N_(\"list of thesaurus files for keyword completion\"),\n-      type='string', list='onecomma', scope={'global', 'buffer'},\n-      deny_duplicates=true,\n-      normal_dname_chars=true,\n-      expand=true,\n-      varname='p_tsr',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='thesaurusfunc', abbreviation='tsrfu',\n-      short_desc=N_(\"function used for thesaurus completion\"),\n-      type='string', scope={'global', 'buffer'},\n-      secure=true,\n-      alloced=true,\n-      func=true,\n-      varname='p_tsrfu',\n-      defaults={if_true=\"\"},\n-      cb='did_set_thesaurusfunc'\n-    },\n-    {\n-      full_name='tildeop', abbreviation='top',\n-      short_desc=N_(\"tilde command \\\"~\\\" behaves like an operator\"),\n-      type='bool', scope={'global'},\n-      varname='p_to',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='timeout', abbreviation='to',\n-      short_desc=N_(\"time out on mappings and key codes\"),\n-      type='bool', scope={'global'},\n-      varname='p_timeout',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='timeoutlen', abbreviation='tm',\n-      short_desc=N_(\"time out time in milliseconds\"),\n-      type='number', scope={'global'},\n-      varname='p_tm',\n-      defaults={if_true=1000}\n-    },\n-    {\n-      full_name='title',\n-      short_desc=N_(\"Vim set the title of the window\"),\n-      type='bool', scope={'global'},\n-      varname='p_title',\n-      defaults={if_true=false},\n-      cb='did_set_title_icon'\n-    },\n-    {\n-      full_name='titlelen',\n-      short_desc=N_(\"of 'columns' used for window title\"),\n-      type='number', scope={'global'},\n-      varname='p_titlelen',\n-      defaults={if_true=85},\n-      cb='did_set_titlelen'\n-    },\n-    {\n-      full_name='titleold',\n-      short_desc=N_(\"title, restored when exiting\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      no_mkrc=true,\n-      varname='p_titleold',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='titlestring',\n-      short_desc=N_(\"to use for the Vim window title\"),\n-      type='string', scope={'global'},\n-      modelineexpr=true,\n-      varname='p_titlestring',\n-      defaults={if_true=\"\"},\n-      cb='did_set_titlestring'\n-    },\n-    {\n-      full_name='ttimeout',\n-      short_desc=N_(\"out on mappings\"),\n-      type='bool', scope={'global'},\n-      redraw={'ui_option'},\n-      varname='p_ttimeout',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='ttimeoutlen', abbreviation='ttm',\n-      short_desc=N_(\"time out time for key codes in milliseconds\"),\n-      type='number', scope={'global'},\n-      redraw={'ui_option'},\n-      varname='p_ttm',\n-      defaults={if_true=50}\n-    },\n-    {\n-      full_name='ttyfast', abbreviation='tf',\n-      short_desc=N_(\"No description\"),\n-      type='bool', scope={'global'},\n-      no_mkrc=true,\n-      varname='p_force_on',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='undodir', abbreviation='udir',\n-      short_desc=N_(\"where to store undo files\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      secure=true,\n-      expand='nodefault',\n-      varname='p_udir',\n-      defaults={if_true=''}\n-    },\n-    {\n-      full_name='undofile', abbreviation='udf',\n-      short_desc=N_(\"save undo information in a file\"),\n-      type='bool', scope={'buffer'},\n-      varname='p_udf',\n-      defaults={if_true=false},\n-      cb='did_set_undofile'\n-    },\n-    {\n-      full_name='undolevels', abbreviation='ul',\n-      short_desc=N_(\"maximum number of changes that can be undone\"),\n-      type='number', scope={'global', 'buffer'},\n-      varname='p_ul',\n-      defaults={if_true=1000},\n-      cb='did_set_undolevels'\n-    },\n-    {\n-      full_name='undoreload', abbreviation='ur',\n-      short_desc=N_(\"max nr of lines to save for undo on a buffer reload\"),\n-      type='number', scope={'global'},\n-      varname='p_ur',\n-      defaults={if_true=10000}\n-    },\n-    {\n-      full_name='updatecount', abbreviation='uc',\n-      short_desc=N_(\"after this many characters flush swap file\"),\n-      type='number', scope={'global'},\n-      varname='p_uc',\n-      defaults={if_true=200},\n-      cb='did_set_updatecount'\n-    },\n-    {\n-      full_name='updatetime', abbreviation='ut',\n-      short_desc=N_(\"after this many milliseconds flush swap file\"),\n-      type='number', scope={'global'},\n-      varname='p_ut',\n-      defaults={if_true=4000}\n-    },\n-    {\n-      full_name='varsofttabstop', abbreviation='vsts',\n-      short_desc=N_(\"list of numbers of spaces that <Tab> uses while editing\"),\n-      type='string', list='comma', scope={'buffer'},\n-      varname='p_vsts',\n-      defaults={if_true=\"\"},\n-      cb='did_set_varsofttabstop'\n-    },\n-    {\n-      full_name='vartabstop', abbreviation='vts',\n-      short_desc=N_(\"list of numbers of spaces that <Tab> in file uses\"),\n-      type='string', list='comma', scope={'buffer'},\n-      varname='p_vts',\n-      redraw={'current_buffer'},\n-      defaults={if_true=\"\"},\n-      cb='did_set_vartabstop'\n-    },\n-    {\n-      full_name='verbose', abbreviation='vbs',\n-      short_desc=N_(\"give informative messages\"),\n-      type='number', scope={'global'},\n-      varname='p_verbose', redraw={'ui_option'},\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='verbosefile', abbreviation='vfile',\n-      short_desc=N_(\"file to write messages in\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      expand=true,\n-      varname='p_vfile',\n-      defaults={if_true=\"\"},\n-      cb='did_set_verbosefile'\n-    },\n-    {\n-      full_name='viewdir', abbreviation='vdir',\n-      short_desc=N_(\"directory where to store files with :mkview\"),\n-      type='string', scope={'global'},\n-      secure=true,\n-      expand='nodefault',\n-      varname='p_vdir',\n-      defaults={if_true=''}\n-    },\n-    {\n-      full_name='viewoptions', abbreviation='vop',\n-      short_desc=N_(\"specifies what to save for :mkview\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_vop',\n-      defaults={if_true=\"folds,cursor,curdir\"},\n-      cb='did_set_viewoptions'\n-    },\n-    {\n-      -- Alias for \"shada\".\n-      full_name='viminfo', abbreviation='vi',\n-      short_desc=N_(\"Alias for shada\"),\n-      type='string', scope={'global'}, nodefault=true,\n-    },\n-    {\n-      -- Alias for \"shadafile\".\n-      full_name='viminfofile', abbreviation='vif',\n-      short_desc=N_(\"Alias for shadafile instead\"),\n-      type='string', scope={'global'}, nodefault=true,\n-    },\n-    {\n-      full_name='virtualedit', abbreviation='ve',\n-      short_desc=N_(\"when to use virtual editing\"),\n-      type='string', list='onecomma', scope={'global', 'window'},\n-      deny_duplicates=true,\n-      redraw={'curswant'},\n-      varname='p_ve',\n-      defaults={if_true=\"\"},\n-      cb='did_set_virtualedit'\n-    },\n-    {\n-      full_name='visualbell', abbreviation='vb',\n-      short_desc=N_(\"use visual bell instead of beeping\"),\n-      type='bool', scope={'global'},\n-      varname='p_vb',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='warn',\n-      short_desc=N_(\"for shell command when buffer was changed\"),\n-      type='bool', scope={'global'},\n-      varname='p_warn',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='whichwrap', abbreviation='ww',\n-      short_desc=N_(\"allow specified keys to cross line boundaries\"),\n-      type='string', list='flagscomma', scope={'global'},\n-      varname='p_ww',\n-      defaults={if_true=\"b,s\"},\n-      cb='did_set_whichwrap'\n-    },\n-    {\n-      full_name='wildchar', abbreviation='wc',\n-      short_desc=N_(\"command-line character for wildcard expansion\"),\n-      type='number', scope={'global'},\n-      varname='p_wc',\n-      defaults={if_true=imacros('TAB')}\n-    },\n-    {\n-      full_name='wildcharm', abbreviation='wcm',\n-      short_desc=N_(\"like 'wildchar' but also works when mapped\"),\n-      type='number', scope={'global'},\n-      varname='p_wcm',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='wildignore', abbreviation='wig',\n-      short_desc=N_(\"files matching these patterns are not completed\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_wig',\n-      defaults={if_true=\"\"}\n-    },\n-    {\n-      full_name='wildignorecase', abbreviation='wic',\n-      short_desc=N_(\"ignore case when completing file names\"),\n-      type='bool', scope={'global'},\n-      varname='p_wic',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='wildmenu', abbreviation='wmnu',\n-      short_desc=N_(\"use menu for command line completion\"),\n-      type='bool', scope={'global'},\n-      varname='p_wmnu',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='wildmode', abbreviation='wim',\n-      short_desc=N_(\"mode for 'wildchar' command-line expansion\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=false,\n-      varname='p_wim',\n-      defaults={if_true=\"full\"},\n-      cb='did_set_wildmode'\n-    },\n-    {\n-      full_name='wildoptions', abbreviation='wop',\n-      short_desc=N_(\"specifies how command line completion is done\"),\n-      type='string', list='onecomma', scope={'global'},\n-      deny_duplicates=true,\n-      varname='p_wop',\n-      defaults={if_true='pum,tagfile'},\n-      cb='did_set_wildoptions'\n-    },\n-    {\n-      full_name='winaltkeys', abbreviation='wak',\n-      short_desc=N_(\"when the windows system handles ALT keys\"),\n-      type='string', scope={'global'},\n-      varname='p_wak',\n-      defaults={if_true=\"menu\"},\n-      cb='did_set_winaltkeys'\n-    },\n-    {\n-      full_name='winbar', abbreviation='wbr',\n-      short_desc=N_(\"custom format for the window bar\"),\n-      type='string', scope={'global', 'window'},\n-      alloced=true,\n-      modelineexpr=true,\n-      redraw={'statuslines'},\n-      varname='p_wbr',\n-      defaults={if_true=\"\"},\n-      cb='did_set_winbar'\n-    },\n-    {\n-      full_name='winblend', abbreviation='winbl',\n-      short_desc=N_(\"Controls transparency level for floating windows\"),\n-      type='number', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=0},\n-      cb='did_set_winblend'\n-    },\n-    {\n-      full_name='winhighlight', abbreviation='winhl',\n-      short_desc=N_(\"Setup window-local highlights\");\n-      type='string', list='onecomma', scope={'window'},\n-      deny_duplicates=true,\n-      alloced=true,\n-      redraw={'current_window'},\n-      defaults={if_true=\"\"},\n-      cb='did_set_winhl'\n-    },\n-    {\n-      full_name='window', abbreviation='wi',\n-      short_desc=N_(\"nr of lines to scroll for CTRL-F and CTRL-B\"),\n-      type='number', scope={'global'},\n-      varname='p_window',\n-      defaults={if_true=0},\n-      cb='did_set_window'\n-    },\n-    {\n-      full_name='winheight', abbreviation='wh',\n-      short_desc=N_(\"minimum number of lines for the current window\"),\n-      type='number', scope={'global'},\n-      varname='p_wh',\n-      defaults={if_true=1},\n-      cb='did_set_winheight'\n-    },\n-    {\n-      full_name='winfixheight', abbreviation='wfh',\n-      short_desc=N_(\"keep window height when opening/closing windows\"),\n-      type='bool', scope={'window'},\n-      redraw={'statuslines'},\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='winfixwidth', abbreviation='wfw',\n-      short_desc=N_(\"keep window width when opening/closing windows\"),\n-      type='bool', scope={'window'},\n-      redraw={'statuslines'},\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='winminheight', abbreviation='wmh',\n-      short_desc=N_(\"minimum number of lines for any window\"),\n-      type='number', scope={'global'},\n-      varname='p_wmh',\n-      defaults={if_true=1},\n-      cb='did_set_winminheight'\n-    },\n-    {\n-      full_name='winminwidth', abbreviation='wmw',\n-      short_desc=N_(\"minimal number of columns for any window\"),\n-      type='number', scope={'global'},\n-      varname='p_wmw',\n-      defaults={if_true=1},\n-      cb='did_set_winminwidth'\n-    },\n-    {\n-      full_name='winwidth', abbreviation='wiw',\n-      short_desc=N_(\"minimal number of columns for current window\"),\n-      type='number', scope={'global'},\n-      varname='p_wiw',\n-      defaults={if_true=20},\n-      cb='did_set_winwidth'\n-    },\n-    {\n-      full_name='wrap',\n-      short_desc=N_(\"lines wrap and continue on the next line\"),\n-      type='bool', scope={'window'},\n-      redraw={'current_window'},\n-      defaults={if_true=true},\n-      cb='did_set_wrap'\n-    },\n-    {\n-      full_name='wrapmargin', abbreviation='wm',\n-      short_desc=N_(\"chars from the right where wrapping starts\"),\n-      type='number', scope={'buffer'},\n-      varname='p_wm',\n-      defaults={if_true=0}\n-    },\n-    {\n-      full_name='wrapscan', abbreviation='ws',\n-      short_desc=N_(\"searches wrap around the end of the file\"),\n-      type='bool', scope={'global'},\n-      varname='p_ws',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='write',\n-      short_desc=N_(\"to a file is allowed\"),\n-      type='bool', scope={'global'},\n-      varname='p_write',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='writeany', abbreviation='wa',\n-      short_desc=N_(\"write to file with no need for \\\"!\\\" override\"),\n-      type='bool', scope={'global'},\n-      varname='p_wa',\n-      defaults={if_true=false}\n-    },\n-    {\n-      full_name='writebackup', abbreviation='wb',\n-      short_desc=N_(\"make a backup before overwriting a file\"),\n-      type='bool', scope={'global'},\n-      varname='p_wb',\n-      defaults={if_true=true}\n-    },\n-    {\n-      full_name='writedelay', abbreviation='wd',\n-      short_desc=N_(\"delay this many msec for each char (for debug)\"),\n-      type='number', scope={'global'},\n-      varname='p_wd',\n-      defaults={if_true=0}\n-    },\n-  }\n+      desc = [=[\n+        Which directory to use for the file browser:\n+           last\t\tUse same directory as with last file browser, where a\n+        \t\tfile was opened or saved.\n+           buffer\tUse the directory of the related buffer.\n+           current\tUse the current directory.\n+           {path}\tUse the specified directory\n+      ]=],\n+      enable_if = false,\n+      full_name = 'browsedir',\n+      scope = { 'global' },\n+      short_desc = N_('which directory to start browsing in'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'bh',\n+      alloced = true,\n+      cb = 'did_set_bufhidden',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        This option specifies what happens when a buffer is no longer\n+        displayed in a window:\n+          <empty>\tfollow the global 'hidden' option\n+          hide\t\thide the buffer (don't unload it), even if 'hidden' is\n+        \t\tnot set\n+          unload\tunload the buffer, even if 'hidden' is set; the\n+        \t\t|:hide| command will also unload the buffer\n+          delete\tdelete the buffer from the buffer list, even if\n+        \t\t'hidden' is set; the |:hide| command will also delete\n+        \t\tthe buffer, making it behave like |:bdelete|\n+          wipe\t\twipe the buffer from the buffer list, even if\n+        \t\t'hidden' is set; the |:hide| command will also wipe\n+        \t\tout the buffer, making it behave like |:bwipeout|\n+\n+        CAREFUL: when \"unload\", \"delete\" or \"wipe\" is used changes in a buffer\n+        are lost without a warning.  Also, these values may break autocommands\n+        that switch between buffers temporarily.\n+        This option is used together with 'buftype' and 'swapfile' to specify\n+        special kinds of buffers.   See |special-buffers|.\n+      ]=],\n+      full_name = 'bufhidden',\n+      noglob = true,\n+      scope = { 'buffer' },\n+      short_desc = N_('what to do when buffer is no longer in window'),\n+      type = 'string',\n+      varname = 'p_bh',\n+    },\n+    {\n+      abbreviation = 'bl',\n+      cb = 'did_set_buflisted',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        When this option is set, the buffer shows up in the buffer list.  If\n+        it is reset it is not used for \":bnext\", \"ls\", the Buffers menu, etc.\n+        This option is reset by Vim for buffers that are only used to remember\n+        a file name or marks.  Vim sets it when starting to edit a buffer.\n+        But not when moving to a buffer with \":buffer\".\n+      ]=],\n+      full_name = 'buflisted',\n+      noglob = true,\n+      scope = { 'buffer' },\n+      short_desc = N_('whether the buffer shows up in the buffer list'),\n+      tags = { 'E85' },\n+      type = 'bool',\n+      varname = 'p_bl',\n+    },\n+    {\n+      abbreviation = 'bt',\n+      alloced = true,\n+      cb = 'did_set_buftype',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        The value of this option specifies the type of a buffer:\n+          <empty>\tnormal buffer\n+          acwrite\tbuffer will always be written with |BufWriteCmd|s\n+          help\t\thelp buffer (do not set this manually)\n+          nofile\tbuffer is not related to a file, will not be written\n+          nowrite\tbuffer will not be written\n+          quickfix\tlist of errors |:cwindow| or locations |:lwindow|\n+          terminal\t|terminal-emulator| buffer\n+          prompt\tbuffer where only the last line can be edited, meant\n+        \t\tto be used by a plugin, see |prompt-buffer|\n+\n+        This option is used together with 'bufhidden' and 'swapfile' to\n+        specify special kinds of buffers.   See |special-buffers|.\n+        Also see |win_gettype()|, which returns the type of the window.\n+\n+        Be careful with changing this option, it can have many side effects!\n+        One such effect is that Vim will not check the timestamp of the file,\n+        if the file is changed by another program this will not be noticed.\n+\n+        A \"quickfix\" buffer is only used for the error list and the location\n+        list.  This value is set by the |:cwindow| and |:lwindow| commands and\n+        you are not supposed to change it.\n+\n+        \"nofile\" and \"nowrite\" buffers are similar:\n+        both:\t\tThe buffer is not to be written to disk, \":w\" doesn't\n+        \t\twork (\":w filename\" does work though).\n+        both:\t\tThe buffer is never considered to be |'modified'|.\n+        \t\tThere is no warning when the changes will be lost, for\n+        \t\texample when you quit Vim.\n+        both:\t\tA swap file is only created when using too much memory\n+        \t\t(when 'swapfile' has been reset there is never a swap\n+        \t\tfile).\n+        nofile only:\tThe buffer name is fixed, it is not handled like a\n+        \t\tfile name.  It is not modified in response to a |:cd|\n+        \t\tcommand.\n+        both:\t\tWhen using \":e bufname\" and already editing \"bufname\"\n+        \t\tthe buffer is made empty and autocommands are\n+        \t\ttriggered as usual for |:edit|.\n+        \t\t\t\t\t\t*E676*\n+        \"acwrite\" implies that the buffer name is not related to a file, like\n+        \"nofile\", but it will be written.  Thus, in contrast to \"nofile\" and\n+        \"nowrite\", \":w\" does work and a modified buffer can't be abandoned\n+        without saving.  For writing there must be matching |BufWriteCmd|,\n+        |FileWriteCmd| or |FileAppendCmd| autocommands.\n+      ]=],\n+      full_name = 'buftype',\n+      noglob = true,\n+      scope = { 'buffer' },\n+      tags = { 'E382' },\n+      short_desc = N_('special type of buffer'),\n+      type = 'string',\n+      varname = 'p_bt',\n+    },\n+    {\n+      abbreviation = 'cmp',\n+      cb = 'did_set_casemap',\n+      defaults = { if_true = 'internal,keepascii' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Specifies details about changing the case of letters.  It may contain\n+        these words, separated by a comma:\n+        internal\tUse internal case mapping functions, the current\n+        \t\tlocale does not change the case mapping. When\n+        \t\t\"internal\" is omitted, the towupper() and towlower()\n+        \t\tsystem library functions are used when available.\n+        keepascii\tFor the ASCII characters (0x00 to 0x7f) use the US\n+        \t\tcase mapping, the current locale is not effective.\n+        \t\tThis probably only matters for Turkish.\n+      ]=],\n+      full_name = 'casemap',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('specifies how case of letters is changed'),\n+      type = 'string',\n+      varname = 'p_cmp',\n+    },\n+    {\n+      abbreviation = 'cdh',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        When on, |:cd|, |:tcd| and |:lcd| without an argument changes the\n+        current working directory to the |$HOME| directory like in Unix.\n+        When off, those commands just print the current directory name.\n+        On Unix this option has no effect.\n+      ]=],\n+      full_name = 'cdhome',\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_(':cd without argument goes to the home directory'),\n+      type = 'bool',\n+      varname = 'p_cdh',\n+    },\n+    {\n+      abbreviation = 'cd',\n+      defaults = {\n+        if_true = ',,',\n+        doc = 'equivalent to $CDPATH or \",,\"',\n+      },\n+      deny_duplicates = true,\n+      desc = [=[\n+        This is a list of directories which will be searched when using the\n+        |:cd|, |:tcd| and |:lcd| commands, provided that the directory being\n+        searched for has a relative path, not an absolute part starting with\n+        \"/\", \"./\" or \"../\", the 'cdpath' option is not used then.\n+        The 'cdpath' option's value has the same form and semantics as\n+        |'path'|.  Also see |file-searching|.\n+        The default value is taken from $CDPATH, with a \",\" prepended to look\n+        in the current directory first.\n+        If the default value taken from $CDPATH is not what you want, include\n+        a modified version of the following command in your vimrc file to\n+        override it: >\n+          :let &cdpath = ',' .. substitute(substitute($CDPATH, '[, ]', '\\\\\\0', 'g'), ':', ',', 'g')\n+        <\tThis option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+        (parts of 'cdpath' can be passed to the shell to expand file names).\n+      ]=],\n+      expand = true,\n+      full_name = 'cdpath',\n+      list = 'comma',\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_('list of directories searched with \":cd\"'),\n+      tags = { 'E344', 'E346' },\n+      type = 'string',\n+      varname = 'p_cdpath',\n+    },\n+    {\n+      cb = 'did_set_cedit',\n+      defaults = {\n+        if_true = macros('CTRL_F_STR'),\n+        doc = 'CTRL-F',\n+      },\n+      desc = [=[\n+        The key used in Command-line Mode to open the command-line window.\n+        Only non-printable keys are allowed.\n+        The key can be specified as a single character, but it is difficult to\n+        type.  The preferred way is to use the <> notation.  Examples: >\n+        \t:exe \"set cedit=\\\\<C-Y>\"\n+        \t:exe \"set cedit=\\\\<Esc>\"\n+        <\t|Nvi| also has this option, but it only uses the first character.\n+        See |cmdwin|.\n+      ]=],\n+      full_name = 'cedit',\n+      scope = { 'global' },\n+      short_desc = N_('used to open the command-line window'),\n+      type = 'string',\n+      varname = 'p_cedit',\n+    },\n+    {\n+      defaults = { if_true = 0 },\n+      desc = [=[\n+        |channel| connected to the buffer, or 0 if no channel is connected.\n+        In a |:terminal| buffer this is the terminal channel.\n+        Read-only.\n+      ]=],\n+      full_name = 'channel',\n+      no_mkrc = true,\n+      nodefault = true,\n+      scope = { 'buffer' },\n+      short_desc = N_('Channel connected to the buffer'),\n+      type = 'number',\n+      varname = 'p_channel',\n+    },\n+    {\n+      abbreviation = 'ccv',\n+      cb = 'did_set_optexpr',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        An expression that is used for character encoding conversion.  It is\n+        evaluated when a file that is to be read or has been written has a\n+        different encoding from what is desired.\n+        'charconvert' is not used when the internal iconv() function is\n+        supported and is able to do the conversion.  Using iconv() is\n+        preferred, because it is much faster.\n+        'charconvert' is not used when reading stdin |--|, because there is no\n+        file to convert from.  You will have to save the text in a file first.\n+        The expression must return zero, false or an empty string for success,\n+        non-zero or true for failure.\n+        See |encoding-names| for possible encoding names.\n+        Additionally, names given in 'fileencodings' and 'fileencoding' are\n+        used.\n+        Conversion between \"latin1\", \"unicode\", \"ucs-2\", \"ucs-4\" and \"utf-8\"\n+        is done internally by Vim, 'charconvert' is not used for this.\n+        Also used for Unicode conversion.\n+        Example: >\n+        \tset charconvert=CharConvert()\n+        \tfun CharConvert()\n+        \t  system(\"recode \"\n+        \t\t\\ .. v:charconvert_from .. \"..\" .. v:charconvert_to\n+        \t\t\\ .. \" <\" .. v:fname_in .. \" >\" .. v:fname_out)\n+        \t  return v:shell_error\n+        \tendfun\n+        <\tThe related Vim variables are:\n+        \tv:charconvert_from\tname of the current encoding\n+        \tv:charconvert_to\tname of the desired encoding\n+        \tv:fname_in\t\tname of the input file\n+        \tv:fname_out\t\tname of the output file\n+        Note that v:fname_in and v:fname_out will never be the same.\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      full_name = 'charconvert',\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_('expression for character encoding conversion'),\n+      type = 'string',\n+      tags = { 'E202', 'E214', 'E513' },\n+      varname = 'p_ccv',\n+    },\n+    {\n+      abbreviation = 'cin',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Enables automatic C program indenting.  See 'cinkeys' to set the keys\n+        that trigger reindenting in insert mode and 'cinoptions' to set your\n+        preferred indent style.\n+        If 'indentexpr' is not empty, it overrules 'cindent'.\n+        If 'lisp' is not on and both 'indentexpr' and 'equalprg' are empty,\n+        the \"=\" operator indents using this algorithm rather than calling an\n+        external program.\n+        See |C-indenting|.\n+        When you don't like the way 'cindent' works, try the 'smartindent'\n+        option or 'indentexpr'.\n+      ]=],\n+      full_name = 'cindent',\n+      scope = { 'buffer' },\n+      short_desc = N_('do C program indenting'),\n+      type = 'bool',\n+      varname = 'p_cin',\n+    },\n+    {\n+      abbreviation = 'cink',\n+      alloced = true,\n+      defaults = { if_true = '0{,0},0),0],:,0#,!^F,o,O,e' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        A list of keys that, when typed in Insert mode, cause reindenting of\n+        the current line.  Only used if 'cindent' is on and 'indentexpr' is\n+        empty.\n+        For the format of this option see |cinkeys-format|.\n+        See |C-indenting|.\n+      ]=],\n+      full_name = 'cinkeys',\n+      list = 'onecomma',\n+      scope = { 'buffer' },\n+      short_desc = N_(\"keys that trigger indent when 'cindent' is set\"),\n+      type = 'string',\n+      varname = 'p_cink',\n+    },\n+    {\n+      abbreviation = 'cino',\n+      alloced = true,\n+      cb = 'did_set_cinoptions',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        The 'cinoptions' affect the way 'cindent' reindents lines in a C\n+        program.  See |cinoptions-values| for the values of this option, and\n+        |C-indenting| for info on C indenting in general.\n+      ]=],\n+      full_name = 'cinoptions',\n+      list = 'onecomma',\n+      scope = { 'buffer' },\n+      short_desc = N_(\"how to do indenting when 'cindent' is set\"),\n+      type = 'string',\n+      varname = 'p_cino',\n+    },\n+    {\n+      abbreviation = 'cinw',\n+      alloced = true,\n+      defaults = { if_true = 'if,else,while,do,for,switch' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        These keywords start an extra indent in the next line when\n+        'smartindent' or 'cindent' is set.  For 'cindent' this is only done at\n+        an appropriate place (inside {}).\n+        Note that 'ignorecase' isn't used for 'cinwords'.  If case doesn't\n+        matter, include the keyword both the uppercase and lowercase:\n+        \"if,If,IF\".\n+      ]=],\n+      full_name = 'cinwords',\n+      list = 'onecomma',\n+      scope = { 'buffer' },\n+      short_desc = N_(\"words where 'si' and 'cin' add an indent\"),\n+      type = 'string',\n+      varname = 'p_cinw',\n+    },\n+    {\n+      abbreviation = 'cinsd',\n+      alloced = true,\n+      defaults = { if_true = 'public,protected,private' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Keywords that are interpreted as a C++ scope declaration by |cino-g|.\n+        Useful e.g. for working with the Qt framework that defines additional\n+        scope declarations \"signals\", \"public slots\" and \"private slots\": >\n+        \tset cinscopedecls+=signals,public\\ slots,private\\ slots\n+        <\n+      ]=],\n+      full_name = 'cinscopedecls',\n+      list = 'onecomma',\n+      scope = { 'buffer' },\n+      short_desc = N_(\"words that are recognized by 'cino-g'\"),\n+      type = 'string',\n+      varname = 'p_cinsd',\n+    },\n+    {\n+      abbreviation = 'cb',\n+      cb = 'did_set_clipboard',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        This option is a list of comma-separated names.\n+        These names are recognized:\n+\n+        \t\t\t\t\t*clipboard-unnamed*\n+        unnamed\t\tWhen included, Vim will use the clipboard register \"*\"\n+        \t\tfor all yank, delete, change and put operations which\n+        \t\twould normally go to the unnamed register.  When a\n+        \t\tregister is explicitly specified, it will always be\n+        \t\tused regardless of whether \"unnamed\" is in 'clipboard'\n+        \t\tor not.  The clipboard register can always be\n+        \t\texplicitly accessed using the \"* notation.  Also see\n+        \t\t|clipboard|.\n+\n+        \t\t\t\t\t*clipboard-unnamedplus*\n+        unnamedplus\tA variant of the \"unnamed\" flag which uses the\n+        \t\tclipboard register \"+\" (|quoteplus|) instead of\n+        \t\tregister \"*\" for all yank, delete, change and put\n+        \t\toperations which would normally go to the unnamed\n+        \t\tregister.  When \"unnamed\" is also included to the\n+        \t\toption, yank and delete operations (but not put)\n+        \t\twill additionally copy the text into register\n+        \t\t\"*\". See |clipboard|.\n+      ]=],\n+      deny_duplicates = true,\n+      full_name = 'clipboard',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('use the clipboard as the unnamed register'),\n+      type = 'string',\n+      varname = 'p_cb',\n+    },\n+    {\n+      abbreviation = 'ch',\n+      cb = 'did_set_cmdheight',\n+      defaults = { if_true = 1 },\n+      desc = [=[\n+        Number of screen lines to use for the command-line.  Helps avoiding\n+        |hit-enter| prompts.\n+        The value of this option is stored with the tab page, so that each tab\n+        page can have a different value.\n+\n+        When 'cmdheight' is zero, there is no command-line unless it is being\n+        used.  The command-line will cover the last line of the screen when\n+        shown.\n+\n+        WARNING: `cmdheight=0` is considered experimental. Expect some\n+        unwanted behaviour. Some 'shortmess' flags and similar\n+        mechanism might fail to take effect, causing unwanted hit-enter\n+        prompts.  Some informative messages, both from Nvim itself and\n+        plugins, will not be displayed.\n+      ]=],\n+      full_name = 'cmdheight',\n+      redraw = { 'all_windows' },\n+      scope = { 'global' },\n+      short_desc = N_('number of lines to use for the command-line'),\n+      type = 'number',\n+      varname = 'p_ch',\n+    },\n+    {\n+      abbreviation = 'cwh',\n+      defaults = { if_true = 7 },\n+      desc = [=[\n+        Number of screen lines to use for the command-line window. |cmdwin|\n+      ]=],\n+      full_name = 'cmdwinheight',\n+      scope = { 'global' },\n+      short_desc = N_('height of the command-line window'),\n+      type = 'number',\n+      varname = 'p_cwh',\n+    },\n+    {\n+      abbreviation = 'cc',\n+      cb = 'did_set_colorcolumn',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        'colorcolumn' is a comma-separated list of screen columns that are\n+        highlighted with ColorColumn |hl-ColorColumn|.  Useful to align\n+        text.  Will make screen redrawing slower.\n+        The screen column can be an absolute number, or a number preceded with\n+        '+' or '-', which is added to or subtracted from 'textwidth'. >\n+\n+        \t:set cc=+1\t  \" highlight column after 'textwidth'\n+        \t:set cc=+1,+2,+3  \" highlight three columns after 'textwidth'\n+        \t:hi ColorColumn ctermbg=lightgrey guibg=lightgrey\n+        <\n+        When 'textwidth' is zero then the items with '-' and '+' are not used.\n+        A maximum of 256 columns are highlighted.\n+      ]=],\n+      full_name = 'colorcolumn',\n+      list = 'onecomma',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('columns to highlight'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'co',\n+      defaults = {\n+        if_true = macros('DFLT_COLS'),\n+        doc = '80 or terminal width',\n+      },\n+      desc = [=[\n+        Number of columns of the screen.  Normally this is set by the terminal\n+        initialization and does not have to be set by hand.\n+        When Vim is running in the GUI or in a resizable window, setting this\n+        option will cause the window size to be changed.  When you only want\n+        to use the size for the GUI, put the command in your |ginit.vim| file.\n+        When you set this option and Vim is unable to change the physical\n+        number of columns of the display, the display may be messed up.  For\n+        the GUI it is always possible and Vim limits the number of columns to\n+        what fits on the screen.  You can use this command to get the widest\n+        window possible: >\n+        \t:set columns=9999\n+        <\tMinimum value is 12, maximum value is 10000.\n+      ]=],\n+      full_name = 'columns',\n+      no_mkrc = true,\n+      scope = { 'global' },\n+      short_desc = N_('number of columns in the display'),\n+      tags = { 'E594' },\n+      type = 'number',\n+      varname = 'p_columns',\n+    },\n+    {\n+      abbreviation = 'com',\n+      alloced = true,\n+      cb = 'did_set_comments',\n+      defaults = { if_true = 's1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        A comma-separated list of strings that can start a comment line.  See\n+        |format-comments|.  See |option-backslash| about using backslashes to\n+        insert a space.\n+      ]=],\n+      full_name = 'comments',\n+      list = 'onecomma',\n+      redraw = { 'curswant' },\n+      scope = { 'buffer' },\n+      short_desc = N_('patterns that can start a comment line'),\n+      tags = { 'E524', 'E525' },\n+      type = 'string',\n+      varname = 'p_com',\n+    },\n+    {\n+      abbreviation = 'cms',\n+      alloced = true,\n+      cb = 'did_set_commentstring',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        A template for a comment.  The \"%s\" in the value is replaced with the\n+        comment text.  For example, C uses \"/*%s*/\". Currently only used to\n+        add markers for folding, see |fold-marker|.\n+      ]=],\n+      full_name = 'commentstring',\n+      redraw = { 'curswant' },\n+      scope = { 'buffer' },\n+      short_desc = N_('template for comments; used for fold marker'),\n+      tags = { 'E537' },\n+      type = 'string',\n+      varname = 'p_cms',\n+    },\n+    {\n+      abbreviation = 'cp',\n+      defaults = { if_true = false },\n+      full_name = 'compatible',\n+      scope = { 'global' },\n+      short_desc = N_('No description'),\n+      type = 'bool',\n+      varname = 'p_force_off',\n+    },\n+    {\n+      abbreviation = 'cpt',\n+      alloced = true,\n+      cb = 'did_set_complete',\n+      defaults = { if_true = '.,w,b,u,t' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        This option specifies how keyword completion |ins-completion| works\n+        when CTRL-P or CTRL-N are used.  It is also used for whole-line\n+        completion |i_CTRL-X_CTRL-L|.  It indicates the type of completion\n+        and the places to scan.  It is a comma-separated list of flags:\n+        .\tscan the current buffer ('wrapscan' is ignored)\n+        w\tscan buffers from other windows\n+        b\tscan other loaded buffers that are in the buffer list\n+        u\tscan the unloaded buffers that are in the buffer list\n+        U\tscan the buffers that are not in the buffer list\n+        k\tscan the files given with the 'dictionary' option\n+        kspell  use the currently active spell checking |spell|\n+        k{dict}\tscan the file {dict}.  Several \"k\" flags can be given,\n+        \tpatterns are valid too.  For example: >\n+        \t\t:set cpt=k/usr/dict/*,k~/spanish\n+        <\ts\tscan the files given with the 'thesaurus' option\n+        s{tsr}\tscan the file {tsr}.  Several \"s\" flags can be given, patterns\n+        \tare valid too.\n+        i\tscan current and included files\n+        d\tscan current and included files for defined name or macro\n+        \t|i_CTRL-X_CTRL-D|\n+        ]\ttag completion\n+        t\tsame as \"]\"\n+\n+        Unloaded buffers are not loaded, thus their autocmds |:autocmd| are\n+        not executed, this may lead to unexpected completions from some files\n+        (gzipped files for example).  Unloaded buffers are not scanned for\n+        whole-line completion.\n+\n+        As you can see, CTRL-N and CTRL-P can be used to do any 'iskeyword'-\n+        based expansion (e.g., dictionary |i_CTRL-X_CTRL-K|, included patterns\n+        |i_CTRL-X_CTRL-I|, tags |i_CTRL-X_CTRL-]| and normal expansions).\n+      ]=],\n+      full_name = 'complete',\n+      list = 'onecomma',\n+      scope = { 'buffer' },\n+      short_desc = N_('specify how Insert mode completion works'),\n+      tags = { 'E535' },\n+      type = 'string',\n+      varname = 'p_cpt',\n+    },\n+    {\n+      abbreviation = 'cocu',\n+      alloced = true,\n+      cb = 'did_set_concealcursor',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        Sets the modes in which text in the cursor line can also be concealed.\n+        When the current mode is listed then concealing happens just like in\n+        other lines.\n+          n\t\tNormal mode\n+          v\t\tVisual mode\n+          i\t\tInsert mode\n+          c\t\tCommand line editing, for 'incsearch'\n+\n+        'v' applies to all lines in the Visual area, not only the cursor.\n+        A useful value is \"nc\".  This is used in help files.  So long as you\n+        are moving around text is concealed, but when starting to insert text\n+        or selecting a Visual area the concealed text is displayed, so that\n+        you can see what you are doing.\n+        Keep in mind that the cursor position is not always where it's\n+        displayed.  E.g., when moving vertically it may change column.\n+      ]=],\n+      full_name = 'concealcursor',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('whether concealable text is hidden in cursor line'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'cole',\n+      defaults = { if_true = 0 },\n+      desc = [=[\n+        Determine how text with the \"conceal\" syntax attribute |:syn-conceal|\n+        is shown:\n+\n+        Value\t\tEffect ~\n+        0\t\tText is shown normally\n+        1\t\tEach block of concealed text is replaced with one\n+        \t\tcharacter.  If the syntax item does not have a custom\n+        \t\treplacement character defined (see |:syn-cchar|) the\n+        \t\tcharacter defined in 'listchars' is used.\n+        \t\tIt is highlighted with the \"Conceal\" highlight group.\n+        2\t\tConcealed text is completely hidden unless it has a\n+        \t\tcustom replacement character defined (see\n+        \t\t|:syn-cchar|).\n+        3\t\tConcealed text is completely hidden.\n+\n+        Note: in the cursor line concealed text is not hidden, so that you can\n+        edit and copy the text.  This can be changed with the 'concealcursor'\n+        option.\n+      ]=],\n+      full_name = 'conceallevel',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('whether concealable text is shown or hidden'),\n+      type = 'number',\n+    },\n+    {\n+      abbreviation = 'cfu',\n+      alloced = true,\n+      cb = 'did_set_completefunc',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        This option specifies a function to be used for Insert mode completion\n+        with CTRL-X CTRL-U. |i_CTRL-X_CTRL-U|\n+        See |complete-functions| for an explanation of how the function is\n+        invoked and what it should return.  The value can be the name of a\n+        function, a |lambda| or a |Funcref|. See |option-value-function| for\n+        more information.\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      full_name = 'completefunc',\n+      func = true,\n+      scope = { 'buffer' },\n+      secure = true,\n+      short_desc = N_('function to be used for Insert mode completion'),\n+      type = 'string',\n+      varname = 'p_cfu',\n+    },\n+    {\n+      abbreviation = 'cot',\n+      cb = 'did_set_completeopt',\n+      defaults = { if_true = 'menu,preview' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        A comma-separated list of options for Insert mode completion\n+        |ins-completion|.  The supported values are:\n+\n+           menu\t    Use a popup menu to show the possible completions.  The\n+        \t    menu is only shown when there is more than one match and\n+        \t    sufficient colors are available.  |ins-completion-menu|\n+\n+           menuone  Use the popup menu also when there is only one match.\n+        \t    Useful when there is additional information about the\n+        \t    match, e.g., what file it comes from.\n+\n+           longest  Only insert the longest common text of the matches.  If\n+        \t    the menu is displayed you can use CTRL-L to add more\n+        \t    characters.  Whether case is ignored depends on the kind\n+        \t    of completion.  For buffer text the 'ignorecase' option is\n+        \t    used.\n+\n+           preview  Show extra information about the currently selected\n+        \t    completion in the preview window.  Only works in\n+        \t    combination with \"menu\" or \"menuone\".\n+\n+          noinsert  Do not insert any text for a match until the user selects\n+        \t    a match from the menu. Only works in combination with\n+        \t    \"menu\" or \"menuone\". No effect if \"longest\" is present.\n+\n+          noselect  Do not select a match in the menu, force the user to\n+        \t    select one from the menu. Only works in combination with\n+        \t    \"menu\" or \"menuone\".\n+      ]=],\n+      full_name = 'completeopt',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('options for Insert mode completion'),\n+      type = 'string',\n+      varname = 'p_cot',\n+    },\n+    {\n+      abbreviation = 'csl',\n+      cb = 'did_set_completeslash',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        \t\tonly for MS-Windows\n+        When this option is set it overrules 'shellslash' for completion:\n+        - When this option is set to \"slash\", a forward slash is used for path\n+          completion in insert mode. This is useful when editing HTML tag, or\n+          Makefile with 'noshellslash' on MS-Windows.\n+        - When this option is set to \"backslash\", backslash is used. This is\n+          useful when editing a batch file with 'shellslash' set on MS-Windows.\n+        - When this option is empty, same character is used as for\n+          'shellslash'.\n+        For Insert mode completion the buffer-local value is used.  For\n+        command line completion the global value is used.\n+      ]=],\n+      enable_if = 'BACKSLASH_IN_FILENAME',\n+      full_name = 'completeslash',\n+      scope = { 'buffer' },\n+      type = 'string',\n+      varname = 'p_csl',\n+    },\n+    {\n+      abbreviation = 'cf',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        When 'confirm' is on, certain operations that would normally\n+        fail because of unsaved changes to a buffer, e.g. \":q\" and \":e\",\n+        instead raise a dialog asking if you wish to save the current\n+        file(s).  You can still use a ! to unconditionally |abandon| a buffer.\n+        If 'confirm' is off you can still activate confirmation for one\n+        command only (this is most useful in mappings) with the |:confirm|\n+        command.\n+        Also see the |confirm()| function and the 'v' flag in 'guioptions'.\n+      ]=],\n+      full_name = 'confirm',\n+      scope = { 'global' },\n+      short_desc = N_('ask what to do about unsaved/read-only files'),\n+      type = 'bool',\n+      varname = 'p_confirm',\n+    },\n+    {\n+      abbreviation = 'ci',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Copy the structure of the existing lines indent when autoindenting a\n+        new line.  Normally the new indent is reconstructed by a series of\n+        tabs followed by spaces as required (unless |'expandtab'| is enabled,\n+        in which case only spaces are used).  Enabling this option makes the\n+        new line copy whatever characters were used for indenting on the\n+        existing line.  'expandtab' has no effect on these characters, a Tab\n+        remains a Tab.  If the new indent is greater than on the existing\n+        line, the remaining space is filled in the normal manner.\n+        See 'preserveindent'.\n+      ]=],\n+      full_name = 'copyindent',\n+      scope = { 'buffer' },\n+      short_desc = N_(\"make 'autoindent' use existing indent structure\"),\n+      type = 'bool',\n+      varname = 'p_ci',\n+    },\n+    {\n+      abbreviation = 'cpo',\n+      cb = 'did_set_cpoptions',\n+      defaults = { if_true = macros('CPO_VIM') },\n+      desc = [=[\n+        A sequence of single character flags.  When a character is present\n+        this indicates Vi-compatible behavior.  This is used for things where\n+        not being Vi-compatible is mostly or sometimes preferred.\n+        'cpoptions' stands for \"compatible-options\".\n+        Commas can be added for readability.\n+        To avoid problems with flags that are added in the future, use the\n+        \"+=\" and \"-=\" feature of \":set\" |add-option-flags|.\n+\n+            contains\tbehavior\t~\n+        \t\t\t\t\t\t\t*cpo-a*\n+        \ta\tWhen included, a \":read\" command with a file name\n+        \t\targument will set the alternate file name for the\n+        \t\tcurrent window.\n+        \t\t\t\t\t\t\t*cpo-A*\n+        \tA\tWhen included, a \":write\" command with a file name\n+        \t\targument will set the alternate file name for the\n+        \t\tcurrent window.\n+        \t\t\t\t\t\t\t*cpo-b*\n+        \tb\t\"\\|\" in a \":map\" command is recognized as the end of\n+        \t\tthe map command.  The '\\' is included in the mapping,\n+        \t\tthe text after the '|' is interpreted as the next\n+        \t\tcommand.  Use a CTRL-V instead of a backslash to\n+        \t\tinclude the '|' in the mapping.  Applies to all\n+        \t\tmapping, abbreviation, menu and autocmd commands.\n+        \t\tSee also |map_bar|.\n+        \t\t\t\t\t\t\t*cpo-B*\n+        \tB\tA backslash has no special meaning in mappings,\n+        \t\tabbreviations, user commands and the \"to\" part of the\n+        \t\tmenu commands.  Remove this flag to be able to use a\n+        \t\tbackslash like a CTRL-V.  For example, the command\n+        \t\t\":map X \\\\<Esc>\" results in X being mapped to:\n+        \t\t\t'B' included:\t\"\\^[\"\t (^[ is a real <Esc>)\n+        \t\t\t'B' excluded:\t\"<Esc>\"  (5 characters)\n+        \t\t\t\t\t\t\t*cpo-c*\n+        \tc\tSearching continues at the end of any match at the\n+        \t\tcursor position, but not further than the start of the\n+        \t\tnext line.  When not present searching continues\n+        \t\tone character from the cursor position.  With 'c'\n+        \t\t\"abababababab\" only gets three matches when repeating\n+        \t\t\"/abab\", without 'c' there are five matches.\n+        \t\t\t\t\t\t\t*cpo-C*\n+        \tC\tDo not concatenate sourced lines that start with a\n+        \t\tbackslash.  See |line-continuation|.\n+        \t\t\t\t\t\t\t*cpo-d*\n+        \td\tUsing \"./\" in the 'tags' option doesn't mean to use\n+        \t\tthe tags file relative to the current file, but the\n+        \t\ttags file in the current directory.\n+        \t\t\t\t\t\t\t*cpo-D*\n+        \tD\tCan't use CTRL-K to enter a digraph after Normal mode\n+        \t\tcommands with a character argument, like |r|, |f| and\n+        \t\t|t|.\n+        \t\t\t\t\t\t\t*cpo-e*\n+        \te\tWhen executing a register with \":@r\", always add a\n+        \t\t<CR> to the last line, also when the register is not\n+        \t\tlinewise.  If this flag is not present, the register\n+        \t\tis not linewise and the last line does not end in a\n+        \t\t<CR>, then the last line is put on the command-line\n+        \t\tand can be edited before hitting <CR>.\n+        \t\t\t\t\t\t\t*cpo-E*\n+        \tE\tIt is an error when using \"y\", \"d\", \"c\", \"g~\", \"gu\" or\n+        \t\t\"gU\" on an Empty region.  The operators only work when\n+        \t\tat least one character is to be operated on.  Example:\n+        \t\tThis makes \"y0\" fail in the first column.\n+        \t\t\t\t\t\t\t*cpo-f*\n+        \tf\tWhen included, a \":read\" command with a file name\n+        \t\targument will set the file name for the current buffer,\n+        \t\tif the current buffer doesn't have a file name yet.\n+        \t\t\t\t\t\t\t*cpo-F*\n+        \tF\tWhen included, a \":write\" command with a file name\n+        \t\targument will set the file name for the current\n+        \t\tbuffer, if the current buffer doesn't have a file name\n+        \t\tyet.  Also see |cpo-P|.\n+        \t\t\t\t\t\t\t*cpo-i*\n+        \ti\tWhen included, interrupting the reading of a file will\n+        \t\tleave it modified.\n+        \t\t\t\t\t\t\t*cpo-I*\n+        \tI\tWhen moving the cursor up or down just after inserting\n+        \t\tindent for 'autoindent', do not delete the indent.\n+        \t\t\t\t\t\t\t*cpo-J*\n+        \tJ\tA |sentence| has to be followed by two spaces after\n+        \t\tthe '.', '!' or '?'.  A <Tab> is not recognized as\n+        \t\twhite space.\n+        \t\t\t\t\t\t\t*cpo-K*\n+        \tK\tDon't wait for a key code to complete when it is\n+        \t\thalfway through a mapping.  This breaks mapping\n+        \t\t<F1><F1> when only part of the second <F1> has been\n+        \t\tread.  It enables cancelling the mapping by typing\n+        \t\t<F1><Esc>.\n+        \t\t\t\t\t\t\t*cpo-l*\n+        \tl\tBackslash in a [] range in a search pattern is taken\n+        \t\tliterally, only \"\\]\", \"\\^\", \"\\-\" and \"\\\\\" are special.\n+        \t\tSee |/[]|\n+        \t\t   'l' included: \"/[ \\t]\"  finds <Space>, '\\' and 't'\n+        \t\t   'l' excluded: \"/[ \\t]\"  finds <Space> and <Tab>\n+        \t\t\t\t\t\t\t*cpo-L*\n+        \tL\tWhen the 'list' option is set, 'wrapmargin',\n+        \t\t'textwidth', 'softtabstop' and Virtual Replace mode\n+        \t\t(see |gR|) count a <Tab> as two characters, instead of\n+        \t\tthe normal behavior of a <Tab>.\n+        \t\t\t\t\t\t\t*cpo-m*\n+        \tm\tWhen included, a showmatch will always wait half a\n+        \t\tsecond.  When not included, a showmatch will wait half\n+        \t\ta second or until a character is typed.  |'showmatch'|\n+        \t\t\t\t\t\t\t*cpo-M*\n+        \tM\tWhen excluded, \"%\" matching will take backslashes into\n+        \t\taccount.  Thus in \"( \\( )\" and \"\\( ( \\)\" the outer\n+        \t\tparenthesis match.  When included \"%\" ignores\n+        \t\tbackslashes, which is Vi compatible.\n+        \t\t\t\t\t\t\t*cpo-n*\n+        \tn\tWhen included, the column used for 'number' and\n+        \t\t'relativenumber' will also be used for text of wrapped\n+        \t\tlines.\n+        \t\t\t\t\t\t\t*cpo-o*\n+        \to\tLine offset to search command is not remembered for\n+        \t\tnext search.\n+        \t\t\t\t\t\t\t*cpo-O*\n+        \tO\tDon't complain if a file is being overwritten, even\n+        \t\twhen it didn't exist when editing it.  This is a\n+        \t\tprotection against a file unexpectedly created by\n+        \t\tsomeone else.  Vi didn't complain about this.\n+        \t\t\t\t\t\t\t*cpo-p*\n+        \tp\tVi compatible Lisp indenting.  When not present, a\n+        \t\tslightly better algorithm is used.\n+        \t\t\t\t\t\t\t*cpo-P*\n+        \tP\tWhen included, a \":write\" command that appends to a\n+        \t\tfile will set the file name for the current buffer, if\n+        \t\tthe current buffer doesn't have a file name yet and\n+        \t\tthe 'F' flag is also included |cpo-F|.\n+        \t\t\t\t\t\t\t*cpo-q*\n+        \tq\tWhen joining multiple lines leave the cursor at the\n+        \t\tposition where it would be when joining two lines.\n+        \t\t\t\t\t\t\t*cpo-r*\n+        \tr\tRedo (\".\" command) uses \"/\" to repeat a search\n+        \t\tcommand, instead of the actually used search string.\n+        \t\t\t\t\t\t\t*cpo-R*\n+        \tR\tRemove marks from filtered lines.  Without this flag\n+        \t\tmarks are kept like |:keepmarks| was used.\n+        \t\t\t\t\t\t\t*cpo-s*\n+        \ts\tSet buffer options when entering the buffer for the\n+        \t\tfirst time.  This is like it is in Vim version 3.0.\n+        \t\tAnd it is the default.  If not present the options are\n+        \t\tset when the buffer is created.\n+        \t\t\t\t\t\t\t*cpo-S*\n+        \tS\tSet buffer options always when entering a buffer\n+        \t\t(except 'readonly', 'fileformat', 'filetype' and\n+        \t\t'syntax').  This is the (most) Vi compatible setting.\n+        \t\tThe options are set to the values in the current\n+        \t\tbuffer.  When you change an option and go to another\n+        \t\tbuffer, the value is copied.  Effectively makes the\n+        \t\tbuffer options global to all buffers.\n+\n+        \t\t's'    'S'     copy buffer options\n+        \t\tno     no      when buffer created\n+        \t\tyes    no      when buffer first entered (default)\n+        \t\t X     yes     each time when buffer entered (vi comp.)\n+        \t\t\t\t\t\t\t*cpo-t*\n+        \tt\tSearch pattern for the tag command is remembered for\n+        \t\t\"n\" command.  Otherwise Vim only puts the pattern in\n+        \t\tthe history for search pattern, but doesn't change the\n+        \t\tlast used search pattern.\n+        \t\t\t\t\t\t\t*cpo-u*\n+        \tu\tUndo is Vi compatible.  See |undo-two-ways|.\n+        \t\t\t\t\t\t\t*cpo-v*\n+        \tv\tBackspaced characters remain visible on the screen in\n+        \t\tInsert mode.  Without this flag the characters are\n+        \t\terased from the screen right away.  With this flag the\n+        \t\tscreen newly typed text overwrites backspaced\n+        \t\tcharacters.\n+        \t\t\t\t\t\t\t*cpo-W*\n+        \tW\tDon't overwrite a readonly file.  When omitted, \":w!\"\n+        \t\toverwrites a readonly file, if possible.\n+        \t\t\t\t\t\t\t*cpo-x*\n+        \tx\t<Esc> on the command-line executes the command-line.\n+        \t\tThe default in Vim is to abandon the command-line,\n+        \t\tbecause <Esc> normally aborts a command.  |c_<Esc>|\n+        \t\t\t\t\t\t\t*cpo-X*\n+        \tX\tWhen using a count with \"R\" the replaced text is\n+        \t\tdeleted only once.  Also when repeating \"R\" with \".\"\n+        \t\tand a count.\n+        \t\t\t\t\t\t\t*cpo-y*\n+        \ty\tA yank command can be redone with \".\".  Think twice if\n+        \t\tyou really want to use this, it may break some\n+        \t\tplugins, since most people expect \".\" to only repeat a\n+        \t\tchange.\n+        \t\t\t\t\t\t\t*cpo-Z*\n+        \tZ\tWhen using \"w!\" while the 'readonly' option is set,\n+        \t\tdon't reset 'readonly'.\n+        \t\t\t\t\t\t\t*cpo-!*\n+        \t!\tWhen redoing a filter command, use the last used\n+        \t\texternal command, whatever it was.  Otherwise the last\n+        \t\tused -filter- command is used.\n+        \t\t\t\t\t\t\t*cpo-$*\n+        \t$\tWhen making a change to one line, don't redisplay the\n+        \t\tline, but put a '$' at the end of the changed text.\n+        \t\tThe changed text will be overwritten when you type the\n+        \t\tnew text.  The line is redisplayed if you type any\n+        \t\tcommand that moves the cursor from the insertion\n+        \t\tpoint.\n+        \t\t\t\t\t\t\t*cpo-%*\n+        \t%\tVi-compatible matching is done for the \"%\" command.\n+        \t\tDoes not recognize \"#if\", \"#endif\", etc.\n+        \t\tDoes not recognize \"/*\" and \"*/\".\n+        \t\tParens inside single and double quotes are also\n+        \t\tcounted, causing a string that contains a paren to\n+        \t\tdisturb the matching.  For example, in a line like\n+        \t\t\"if (strcmp(\"foo(\", s))\" the first paren does not\n+        \t\tmatch the last one.  When this flag is not included,\n+        \t\tparens inside single and double quotes are treated\n+        \t\tspecially.  When matching a paren outside of quotes,\n+        \t\teverything inside quotes is ignored.  When matching a\n+        \t\tparen inside quotes, it will find the matching one (if\n+        \t\tthere is one).  This works very well for C programs.\n+        \t\tThis flag is also used for other features, such as\n+        \t\tC-indenting.\n+        \t\t\t\t\t\t\t*cpo-+*\n+        \t+\tWhen included, a \":write file\" command will reset the\n+        \t\t'modified' flag of the buffer, even though the buffer\n+        \t\titself may still be different from its file.\n+        \t\t\t\t\t\t\t*cpo->*\n+        \t>\tWhen appending to a register, put a line break before\n+        \t\tthe appended text.\n+        \t\t\t\t\t\t\t*cpo-;*\n+        \t;\tWhen using |,| or |;| to repeat the last |t| search\n+        \t\tand the cursor is right in front of the searched\n+        \t\tcharacter, the cursor won't move. When not included,\n+        \t\tthe cursor would skip over it and jump to the\n+        \t\tfollowing occurrence.\n+        \t\t\t\t\t\t\t*cpo-_*\n+        \t_\tWhen using |cw| on a word, do not include the\n+        \t\twhitespace following the word in the motion.\n+      ]=],\n+      full_name = 'cpoptions',\n+      list = 'flags',\n+      redraw = { 'all_windows' },\n+      scope = { 'global' },\n+      short_desc = N_('flags for Vi-compatible behavior'),\n+      tags = { 'cpo' },\n+      type = 'string',\n+      varname = 'p_cpo',\n+    },\n+    {\n+      abbreviation = 'crb',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        When this option is set, as the cursor in the current\n+        window moves other cursorbound windows (windows that also have\n+        this option set) move their cursors to the corresponding line and\n+        column.  This option is useful for viewing the\n+        differences between two versions of a file (see 'diff'); in diff mode,\n+        inserted and deleted lines (though not characters within a line) are\n+        taken into account.\n+      ]=],\n+      full_name = 'cursorbind',\n+      pv_name = 'p_crbind',\n+      scope = { 'window' },\n+      short_desc = N_('move cursor in window as it moves in other windows'),\n+      type = 'bool',\n+    },\n+    {\n+      abbreviation = 'cuc',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Highlight the screen column of the cursor with CursorColumn\n+        |hl-CursorColumn|.  Useful to align text.  Will make screen redrawing\n+        slower.\n+        If you only want the highlighting in the current window you can use\n+        these autocommands: >\n+        \tau WinLeave * set nocursorline nocursorcolumn\n+        \tau WinEnter * set cursorline cursorcolumn\n+        <\n+      ]=],\n+      full_name = 'cursorcolumn',\n+      redraw = { 'current_window_only' },\n+      scope = { 'window' },\n+      short_desc = N_('highlight the screen column of the cursor'),\n+      type = 'bool',\n+    },\n+    {\n+      abbreviation = 'cul',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Highlight the text line of the cursor with CursorLine |hl-CursorLine|.\n+        Useful to easily spot the cursor.  Will make screen redrawing slower.\n+        When Visual mode is active the highlighting isn't used to make it\n+        easier to see the selected text.\n+      ]=],\n+      full_name = 'cursorline',\n+      redraw = { 'current_window_only' },\n+      scope = { 'window' },\n+      short_desc = N_('highlight the screen line of the cursor'),\n+      type = 'bool',\n+    },\n+    {\n+      abbreviation = 'culopt',\n+      cb = 'did_set_cursorlineopt',\n+      defaults = { if_true = 'both' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Comma-separated list of settings for how 'cursorline' is displayed.\n+        Valid values:\n+        \"line\"\t\tHighlight the text line of the cursor with\n+        \t\tCursorLine |hl-CursorLine|.\n+        \"screenline\"\tHighlight only the screen line of the cursor with\n+        \t\tCursorLine |hl-CursorLine|.\n+        \"number\"\tHighlight the line number of the cursor with\n+        \t\tCursorLineNr |hl-CursorLineNr|.\n+\n+        Special value:\n+        \"both\"\t\tAlias for the values \"line,number\".\n+\n+        \"line\" and \"screenline\" cannot be used together.\n+      ]=],\n+      full_name = 'cursorlineopt',\n+      list = 'onecomma',\n+      redraw = { 'current_window_only' },\n+      scope = { 'window' },\n+      short_desc = N_(\"settings for 'cursorline'\"),\n+      type = 'string',\n+    },\n+    {\n+      cb = 'did_set_debug',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        These values can be used:\n+        msg\tError messages that would otherwise be omitted will be given\n+        \tanyway.\n+        throw\tError messages that would otherwise be omitted will be given\n+        \tanyway and also throw an exception and set |v:errmsg|.\n+        beep\tA message will be given when otherwise only a beep would be\n+        \tproduced.\n+        The values can be combined, separated by a comma.\n+        \"msg\" and \"throw\" are useful for debugging 'foldexpr', 'formatexpr' or\n+        'indentexpr'.\n+      ]=],\n+      full_name = 'debug',\n+      scope = { 'global' },\n+      short_desc = N_('to \"msg\" to see all error messages'),\n+      type = 'string',\n+      varname = 'p_debug',\n+    },\n+    {\n+      abbreviation = 'def',\n+      alloced = true,\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        Pattern to be used to find a macro definition.  It is a search\n+        pattern, just like for the \"/\" command.  This option is used for the\n+        commands like \"[i\" and \"[d\" |include-search|.  The 'isident' option is\n+        used to recognize the defined name after the match: >\n+        \t{match with 'define'}{non-ID chars}{defined name}{non-ID char}\n+        <\tSee |option-backslash| about inserting backslashes to include a space\n+        or backslash.\n+        For C++ this value would be useful, to include const type declarations: >\n+        \t^\\(#\\s*define\\|[a-z]*\\s*const\\s*[a-z]*\\)\n+        <\tYou can also use \"\\ze\" just before the name and continue the pattern\n+        to check what is following.  E.g. for Javascript, if a function is\n+        defined with `func_name = function(args)`: >\n+        \t^\\s*\\ze\\i\\+\\s*=\\s*function(\n+        <\tIf the function is defined with `func_name : function() {...`: >\n+                ^\\s*\\ze\\i\\+\\s*[:]\\s*(*function\\s*(\n+        <\tWhen using the \":set\" command, you need to double the backslashes!\n+        To avoid that use `:let` with a single quote string: >\n+        \tlet &l:define = '^\\s*\\ze\\k\\+\\s*=\\s*function('\n+        <\n+      ]=],\n+      full_name = 'define',\n+      redraw = { 'curswant' },\n+      scope = { 'global', 'buffer' },\n+      short_desc = N_('pattern to be used to find a macro definition'),\n+      type = 'string',\n+      varname = 'p_def',\n+    },\n+    {\n+      abbreviation = 'deco',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        If editing Unicode and this option is set, backspace and Normal mode\n+        \"x\" delete each combining character on its own.  When it is off (the\n+        default) the character along with its combining characters are\n+        deleted.\n+        Note: When 'delcombine' is set \"xx\" may work differently from \"2x\"!\n+\n+        This is useful for Arabic, Hebrew and many other languages where one\n+        may have combining characters overtop of base characters, and want\n+        to remove only the combining ones.\n+      ]=],\n+      full_name = 'delcombine',\n+      scope = { 'global' },\n+      short_desc = N_('delete combining characters on their own'),\n+      type = 'bool',\n+      varname = 'p_deco',\n+    },\n+    {\n+      abbreviation = 'dict',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        List of file names, separated by commas, that are used to lookup words\n+        for keyword completion commands |i_CTRL-X_CTRL-K|.  Each file should\n+        contain a list of words.  This can be one word per line, or several\n+        words per line, separated by non-keyword characters (white space is\n+        preferred).  Maximum line length is 510 bytes.\n+\n+        When this option is empty or an entry \"spell\" is present, and spell\n+        checking is enabled, words in the word lists for the currently active\n+        'spelllang' are used. See |spell|.\n+\n+        To include a comma in a file name precede it with a backslash.  Spaces\n+        after a comma are ignored, otherwise spaces are included in the file\n+        name.  See |option-backslash| about using backslashes.\n+        This has nothing to do with the |Dictionary| variable type.\n+        Where to find a list of words?\n+        - BSD/macOS include the \"/usr/share/dict/words\" file.\n+        - Try \"apt install spell\" to get the \"/usr/share/dict/words\" file on\n+          apt-managed systems (Debian/Ubuntu).\n+        The use of |:set+=| and |:set-=| is preferred when adding or removing\n+        directories from the list.  This avoids problems when a future version\n+        uses another default.\n+        Backticks cannot be used in this option for security reasons.\n+      ]=],\n+      expand = true,\n+      full_name = 'dictionary',\n+      list = 'onecomma',\n+      normal_dname_chars = true,\n+      scope = { 'global', 'buffer' },\n+      short_desc = N_('list of file names used for keyword completion'),\n+      type = 'string',\n+      varname = 'p_dict',\n+    },\n+    {\n+      cb = 'did_set_diff',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Join the current window in the group of windows that shows differences\n+        between files.  See |diff-mode|.\n+      ]=],\n+      full_name = 'diff',\n+      noglob = true,\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('diff mode for the current window'),\n+      type = 'bool',\n+    },\n+    {\n+      abbreviation = 'dex',\n+      cb = 'did_set_optexpr',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        Expression which is evaluated to obtain a diff file (either ed-style\n+        or unified-style) from two versions of a file.  See |diff-diffexpr|.\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      full_name = 'diffexpr',\n+      redraw = { 'curswant' },\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_('expression used to obtain a diff file'),\n+      type = 'string',\n+      varname = 'p_dex',\n+    },\n+    {\n+      abbreviation = 'dip',\n+      alloced = true,\n+      cb = 'did_set_diffopt',\n+      defaults = { if_true = 'internal,filler,closeoff' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Option settings for diff mode.  It can consist of the following items.\n+        All are optional.  Items must be separated by a comma.\n+\n+        \tfiller\t\tShow filler lines, to keep the text\n+        \t\t\tsynchronized with a window that has inserted\n+        \t\t\tlines at the same position.  Mostly useful\n+        \t\t\twhen windows are side-by-side and 'scrollbind'\n+        \t\t\tis set.\n+\n+        \tcontext:{n}\tUse a context of {n} lines between a change\n+        \t\t\tand a fold that contains unchanged lines.\n+        \t\t\tWhen omitted a context of six lines is used.\n+        \t\t\tWhen using zero the context is actually one,\n+        \t\t\tsince folds require a line in between, also\n+        \t\t\tfor a deleted line.\n+        \t\t\tSee |fold-diff|.\n+\n+        \tiblank\t\tIgnore changes where lines are all blank.  Adds\n+        \t\t\tthe \"-B\" flag to the \"diff\" command if\n+        \t\t\t'diffexpr' is empty.  Check the documentation\n+        \t\t\tof the \"diff\" command for what this does\n+        \t\t\texactly.\n+        \t\t\tNOTE: the diff windows will get out of sync,\n+        \t\t\tbecause no differences between blank lines are\n+        \t\t\ttaken into account.\n+\n+        \ticase\t\tIgnore changes in case of text.  \"a\" and \"A\"\n+        \t\t\tare considered the same.  Adds the \"-i\" flag\n+        \t\t\tto the \"diff\" command if 'diffexpr' is empty.\n+\n+        \tiwhite\t\tIgnore changes in amount of white space.  Adds\n+        \t\t\tthe \"-b\" flag to the \"diff\" command if\n+        \t\t\t'diffexpr' is empty.  Check the documentation\n+        \t\t\tof the \"diff\" command for what this does\n+        \t\t\texactly.  It should ignore adding trailing\n+        \t\t\twhite space, but not leading white space.\n+\n+        \tiwhiteall\tIgnore all white space changes.  Adds\n+        \t\t\tthe \"-w\" flag to the \"diff\" command if\n+        \t\t\t'diffexpr' is empty.  Check the documentation\n+        \t\t\tof the \"diff\" command for what this does\n+        \t\t\texactly.\n+\n+        \tiwhiteeol\tIgnore white space changes at end of line.\n+        \t\t\tAdds the \"-Z\" flag to the \"diff\" command if\n+        \t\t\t'diffexpr' is empty.  Check the documentation\n+        \t\t\tof the \"diff\" command for what this does\n+        \t\t\texactly.\n+\n+        \thorizontal\tStart diff mode with horizontal splits (unless\n+        \t\t\texplicitly specified otherwise).\n+\n+        \tvertical\tStart diff mode with vertical splits (unless\n+        \t\t\texplicitly specified otherwise).\n+\n+        \tcloseoff\tWhen a window is closed where 'diff' is set\n+        \t\t\tand there is only one window remaining in the\n+        \t\t\tsame tab page with 'diff' set, execute\n+        \t\t\t`:diffoff` in that window.  This undoes a\n+        \t\t\t`:diffsplit` command.\n+\n+        \thiddenoff\tDo not use diff mode for a buffer when it\n+        \t\t\tbecomes hidden.\n+\n+        \tfoldcolumn:{n}\tSet the 'foldcolumn' option to {n} when\n+        \t\t\tstarting diff mode.  Without this 2 is used.\n+\n+        \tfollowwrap\tFollow the 'wrap' option and leave as it is.\n+\n+        \tinternal\tUse the internal diff library.  This is\n+        \t\t\tignored when 'diffexpr' is set.  *E960*\n+        \t\t\tWhen running out of memory when writing a\n+        \t\t\tbuffer this item will be ignored for diffs\n+        \t\t\tinvolving that buffer.  Set the 'verbose'\n+        \t\t\toption to see when this happens.\n+\n+        \tindent-heuristic\n+        \t\t\tUse the indent heuristic for the internal\n+        \t\t\tdiff library.\n+\n+        \tlinematch:{n}   Enable a second stage diff on each generated\n+        \t\t\thunk in order to align lines. When the total\n+        \t\t\tnumber of lines in a hunk exceeds {n}, the\n+        \t\t\tsecond stage diff will not be performed as\n+        \t\t\tvery large hunks can cause noticeable lag. A\n+        \t\t\trecommended setting is \"linematch:60\", as this\n+        \t\t\twill enable alignment for a 2 buffer diff with\n+        \t\t\thunks of up to 30 lines each, or a 3 buffer\n+        \t\t\tdiff with hunks of up to 20 lines each.\n+\n+        \talgorithm:{text} Use the specified diff algorithm with the\n+        \t\t\tinternal diff engine. Currently supported\n+        \t\t\talgorithms are:\n+        \t\t\tmyers      the default algorithm\n+        \t\t\tminimal    spend extra time to generate the\n+        \t\t\t\t   smallest possible diff\n+        \t\t\tpatience   patience diff algorithm\n+        \t\t\thistogram  histogram diff algorithm\n+\n+        Examples: >\n+        \t:set diffopt=internal,filler,context:4\n+        \t:set diffopt=\n+        \t:set diffopt=internal,filler,foldcolumn:3\n+        \t:set diffopt-=internal  \" do NOT use the internal diff parser\n+        <\n+      ]=],\n+      full_name = 'diffopt',\n+      list = 'onecomma',\n+      redraw = { 'current_window' },\n+      scope = { 'global' },\n+      short_desc = N_('options for using diff mode'),\n+      type = 'string',\n+      varname = 'p_dip',\n+    },\n+    {\n+      abbreviation = 'dg',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Enable the entering of digraphs in Insert mode with {char1} <BS>\n+        {char2}.  See |digraphs|.\n+      ]=],\n+      full_name = 'digraph',\n+      scope = { 'global' },\n+      short_desc = N_('enable the entering of digraphs in Insert mode'),\n+      type = 'bool',\n+      varname = 'p_dg',\n+    },\n+    {\n+      abbreviation = 'dir',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        List of directory names for the swap file, separated with commas.\n+\n+        Possible items:\n+        - The swap file will be created in the first directory where this is\n+          possible.  If it is not possible in any directory, but last\n+          directory listed in the option does not exist, it is created.\n+        - Empty means that no swap file will be used (recovery is\n+          impossible!) and no |E303| error will be given.\n+        - A directory \".\" means to put the swap file in the same directory as\n+          the edited file.  On Unix, a dot is prepended to the file name, so\n+          it doesn't show in a directory listing.  On MS-Windows the \"hidden\"\n+          attribute is set and a dot prepended if possible.\n+        - A directory starting with \"./\" (or \".\\\" for MS-Windows) means to put\n+          the swap file relative to where the edited file is.  The leading \".\"\n+          is replaced with the path name of the edited file.\n+        - For Unix and Win32, if a directory ends in two path separators \"//\",\n+          the swap file name will be built from the complete path to the file\n+          with all path separators replaced by percent '%' signs (including\n+          the colon following the drive letter on Win32). This will ensure\n+          file name uniqueness in the preserve directory.\n+          On Win32, it is also possible to end with \"\\\\\".  However, When a\n+          separating comma is following, you must use \"//\", since \"\\\\\" will\n+          include the comma in the file name. Therefore it is recommended to\n+          use '//', instead of '\\\\'.\n+        - Spaces after the comma are ignored, other spaces are considered part\n+          of the directory name.  To have a space at the start of a directory\n+          name, precede it with a backslash.\n+        - To include a comma in a directory name precede it with a backslash.\n+        - A directory name may end in an ':' or '/'.\n+        - Environment variables are expanded |:set_env|.\n+        - Careful with '\\' characters, type one before a space, type two to\n+          get one in the option (see |option-backslash|), for example: >\n+            :set dir=c:\\\\tmp,\\ dir\\\\,with\\\\,commas,\\\\\\ dir\\ with\\ spaces\n+        <\n+        Editing the same file twice will result in a warning.  Using \"/tmp\" on\n+        is discouraged: if the system crashes you lose the swap file. And\n+        others on the computer may be able to see the files.\n+        Use |:set+=| and |:set-=| when adding or removing directories from the\n+        list, this avoids problems if the Nvim default is changed.\n+\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      expand = 'nodefault',\n+      full_name = 'directory',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_('list of directory names for the swap file'),\n+      type = 'string',\n+      varname = 'p_dir',\n+    },\n+    {\n+      abbreviation = 'dy',\n+      cb = 'did_set_display',\n+      defaults = { if_true = 'lastline' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Change the way text is displayed.  This is a comma-separated list of\n+        flags:\n+        lastline\tWhen included, as much as possible of the last line\n+        \t\tin a window will be displayed.  \"@@@\" is put in the\n+        \t\tlast columns of the last screen line to indicate the\n+        \t\trest of the line is not displayed.\n+        truncate\tLike \"lastline\", but \"@@@\" is displayed in the first\n+        \t\tcolumn of the last screen line.  Overrules \"lastline\".\n+        uhex\t\tShow unprintable characters hexadecimal as <xx>\n+        \t\tinstead of using ^C and ~C.\n+        msgsep\t\tObsolete flag. Allowed but takes no effect. |msgsep|\n+\n+        When neither \"lastline\" nor \"truncate\" is included, a last line that\n+        doesn't fit is replaced with \"@\" lines.\n+\n+        The \"@\" character can be changed by setting the \"lastline\" item in\n+        'fillchars'.  The character is highlighted with |hl-NonText|.\n+      ]=],\n+      full_name = 'display',\n+      list = 'onecomma',\n+      redraw = { 'all_windows' },\n+      scope = { 'global' },\n+      short_desc = N_('list of flags for how to display text'),\n+      type = 'string',\n+      varname = 'p_dy',\n+    },\n+    {\n+      abbreviation = 'ead',\n+      cb = 'did_set_eadirection',\n+      defaults = { if_true = 'both' },\n+      desc = [=[\n+        Tells when the 'equalalways' option applies:\n+        \tver\tvertically, width of windows is not affected\n+        \thor\thorizontally, height of windows is not affected\n+        \tboth\twidth and height of windows is affected\n+      ]=],\n+      full_name = 'eadirection',\n+      scope = { 'global' },\n+      short_desc = N_(\"in which direction 'equalalways' works\"),\n+      type = 'string',\n+      varname = 'p_ead',\n+    },\n+    {\n+      abbreviation = 'ed',\n+      defaults = { if_true = false },\n+      full_name = 'edcompatible',\n+      scope = { 'global' },\n+      short_desc = N_('No description'),\n+      type = 'bool',\n+      varname = 'p_force_off',\n+    },\n+    {\n+      abbreviation = 'emo',\n+      cb = 'did_set_ambiwidth',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        When on all Unicode emoji characters are considered to be full width.\n+        This excludes \"text emoji\" characters, which are normally displayed as\n+        single width.  Unfortunately there is no good specification for this\n+        and it has been determined on trial-and-error basis.  Use the\n+        |setcellwidths()| function to change the behavior.\n+      ]=],\n+      full_name = 'emoji',\n+      redraw = { 'all_windows', 'ui_option' },\n+      scope = { 'global' },\n+      short_desc = N_('No description'),\n+      type = 'bool',\n+      varname = 'p_emoji',\n+    },\n+    {\n+      abbreviation = 'enc',\n+      cb = 'did_set_encoding',\n+      defaults = { if_true = macros('ENC_DFLT') },\n+      deny_in_modelines = true,\n+      desc = [=[\n+        String-encoding used internally and for |RPC| communication.\n+        Always UTF-8.\n+\n+        See 'fileencoding' to control file-content encoding.\n+      ]=],\n+      full_name = 'encoding',\n+      scope = { 'global' },\n+      short_desc = N_('encoding used internally'),\n+      type = 'string',\n+      varname = 'p_enc',\n+    },\n+    {\n+      abbreviation = 'eof',\n+      cb = 'did_set_eof_eol_fixeol_bomb',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Indicates that a CTRL-Z character was found at the end of the file\n+        when reading it.  Normally only happens when 'fileformat' is \"dos\".\n+        When writing a file and this option is off and the 'binary' option\n+        is on, or 'fixeol' option is off, no CTRL-Z will be written at the\n+        end of the file.\n+        See |eol-and-eof| for example settings.\n+      ]=],\n+      full_name = 'endoffile',\n+      no_mkrc = true,\n+      redraw = { 'statuslines' },\n+      scope = { 'buffer' },\n+      short_desc = N_('write CTRL-Z for last line in file'),\n+      type = 'bool',\n+      varname = 'p_eof',\n+    },\n+    {\n+      abbreviation = 'eol',\n+      cb = 'did_set_eof_eol_fixeol_bomb',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        When writing a file and this option is off and the 'binary' option\n+        is on, or 'fixeol' option is off, no <EOL> will be written for the\n+        last line in the file.  This option is automatically set or reset when\n+        starting to edit a new file, depending on whether file has an <EOL>\n+        for the last line in the file.  Normally you don't have to set or\n+        reset this option.\n+        When 'binary' is off and 'fixeol' is on the value is not used when\n+        writing the file.  When 'binary' is on or 'fixeol' is off it is used\n+        to remember the presence of a <EOL> for the last line in the file, so\n+        that when you write the file the situation from the original file can\n+        be kept.  But you can change it if you want to.\n+        See |eol-and-eof| for example settings.\n+      ]=],\n+      full_name = 'endofline',\n+      no_mkrc = true,\n+      redraw = { 'statuslines' },\n+      scope = { 'buffer' },\n+      short_desc = N_('write <EOL> for last line in file'),\n+      type = 'bool',\n+      varname = 'p_eol',\n+    },\n+    {\n+      abbreviation = 'ea',\n+      cb = 'did_set_equalalways',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        When on, all the windows are automatically made the same size after\n+        splitting or closing a window.  This also happens the moment the\n+        option is switched on.  When off, splitting a window will reduce the\n+        size of the current window and leave the other windows the same.  When\n+        closing a window the extra lines are given to the window next to it\n+        (depending on 'splitbelow' and 'splitright').\n+        When mixing vertically and horizontally split windows, a minimal size\n+        is computed and some windows may be larger if there is room.  The\n+        'eadirection' option tells in which direction the size is affected.\n+        Changing the height and width of a window can be avoided by setting\n+        'winfixheight' and 'winfixwidth', respectively.\n+        If a window size is specified when creating a new window sizes are\n+        currently not equalized (it's complicated, but may be implemented in\n+        the future).\n+      ]=],\n+      full_name = 'equalalways',\n+      scope = { 'global' },\n+      short_desc = N_('windows are automatically made the same size'),\n+      type = 'bool',\n+      varname = 'p_ea',\n+    },\n+    {\n+      abbreviation = 'ep',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        External program to use for \"=\" command.  When this option is empty\n+        the internal formatting functions are used; either 'lisp', 'cindent'\n+        or 'indentexpr'.\n+        Environment variables are expanded |:set_env|.  See |option-backslash|\n+        about including spaces and backslashes.\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      expand = true,\n+      full_name = 'equalprg',\n+      scope = { 'global', 'buffer' },\n+      secure = true,\n+      short_desc = N_('external program to use for \"=\" command'),\n+      type = 'string',\n+      varname = 'p_ep',\n+    },\n+    {\n+      abbreviation = 'eb',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Ring the bell (beep or screen flash) for error messages.  This only\n+        makes a difference for error messages, the bell will be used always\n+        for a lot of errors without a message (e.g., hitting <Esc> in Normal\n+        mode).  See 'visualbell' to make the bell behave like a screen flash\n+        or do nothing. See 'belloff' to finetune when to ring the bell.\n+      ]=],\n+      full_name = 'errorbells',\n+      scope = { 'global' },\n+      short_desc = N_('ring the bell for error messages'),\n+      type = 'bool',\n+      varname = 'p_eb',\n+    },\n+    {\n+      abbreviation = 'ef',\n+      defaults = { if_true = macros('DFLT_ERRORFILE') },\n+      desc = [=[\n+        Name of the errorfile for the QuickFix mode (see |:cf|).\n+        When the \"-q\" command-line argument is used, 'errorfile' is set to the\n+        following argument.  See |-q|.\n+        NOT used for the \":make\" command.  See 'makeef' for that.\n+        Environment variables are expanded |:set_env|.\n+        See |option-backslash| about including spaces and backslashes.\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      expand = true,\n+      full_name = 'errorfile',\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_('name of the errorfile for the QuickFix mode'),\n+      type = 'string',\n+      varname = 'p_ef',\n+    },\n+    {\n+      abbreviation = 'efm',\n+      defaults = {\n+        if_true = macros('DFLT_EFM'),\n+        doc = 'is very long',\n+      },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Scanf-like description of the format for the lines in the error file\n+        (see |errorformat|).\n+      ]=],\n+      full_name = 'errorformat',\n+      list = 'onecomma',\n+      scope = { 'global', 'buffer' },\n+      short_desc = N_('description of the lines in the error file'),\n+      type = 'string',\n+      varname = 'p_efm',\n+    },\n+    {\n+      abbreviation = 'ei',\n+      cb = 'did_set_eventignore',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        A list of autocommand event names, which are to be ignored.\n+        When set to \"all\" or when \"all\" is one of the items, all autocommand\n+        events are ignored, autocommands will not be executed.\n+        Otherwise this is a comma-separated list of event names.  Example: >\n+            :set ei=WinEnter,WinLeave\n+        <\n+      ]=],\n+      full_name = 'eventignore',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('autocommand events that are ignored'),\n+      type = 'string',\n+      varname = 'p_ei',\n+    },\n+    {\n+      abbreviation = 'et',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        In Insert mode: Use the appropriate number of spaces to insert a\n+        <Tab>.  Spaces are used in indents with the '>' and '<' commands and\n+        when 'autoindent' is on.  To insert a real tab when 'expandtab' is\n+        on, use CTRL-V<Tab>.  See also |:retab| and |ins-expandtab|.\n+      ]=],\n+      full_name = 'expandtab',\n+      scope = { 'buffer' },\n+      short_desc = N_('use spaces when <Tab> is inserted'),\n+      type = 'bool',\n+      varname = 'p_et',\n+    },\n+    {\n+      abbreviation = 'ex',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        Automatically execute .nvim.lua, .nvimrc, and .exrc files in the\n+        current directory, if the file is in the |trust| list. Use |:trust| to\n+        manage trusted files. See also |vim.secure.read()|.\n+\n+        Compare 'exrc' to |editorconfig|:\n+        - 'exrc' can execute any code; editorconfig only specifies settings.\n+        - 'exrc' is Nvim-specific; editorconfig works in other editors.\n+\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      full_name = 'exrc',\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_('read .nvimrc and .exrc in the current directory'),\n+      type = 'bool',\n+      varname = 'p_exrc',\n+    },\n+    {\n+      abbreviation = 'fenc',\n+      alloced = true,\n+      cb = 'did_set_encoding',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        File-content encoding for the current buffer. Conversion is done with\n+        iconv() or as specified with 'charconvert'.\n+\n+        When 'fileencoding' is not UTF-8, conversion will be done when\n+        writing the file.  For reading see below.\n+        When 'fileencoding' is empty, the file will be saved with UTF-8\n+        encoding (no conversion when reading or writing a file).\n+\n+        WARNING: Conversion to a non-Unicode encoding can cause loss of\n+        information!\n+\n+        See |encoding-names| for the possible values.  Additionally, values may be\n+        specified that can be handled by the converter, see\n+        |mbyte-conversion|.\n+\n+        When reading a file 'fileencoding' will be set from 'fileencodings'.\n+        To read a file in a certain encoding it won't work by setting\n+        'fileencoding', use the |++enc| argument.  One exception: when\n+        'fileencodings' is empty the value of 'fileencoding' is used.\n+        For a new file the global value of 'fileencoding' is used.\n+\n+        Prepending \"8bit-\" and \"2byte-\" has no meaning here, they are ignored.\n+        When the option is set, the value is converted to lowercase.  Thus\n+        you can set it with uppercase values too.  '_' characters are\n+        replaced with '-'.  If a name is recognized from the list at\n+        |encoding-names|, it is replaced by the standard name.  For example\n+        \"ISO8859-2\" becomes \"iso-8859-2\".\n+\n+        When this option is set, after starting to edit a file, the 'modified'\n+        option is set, because the file would be different when written.\n+\n+        Keep in mind that changing 'fenc' from a modeline happens\n+        AFTER the text has been read, thus it applies to when the file will be\n+        written.  If you do set 'fenc' in a modeline, you might want to set\n+        'nomodified' to avoid not being able to \":q\".\n+\n+        This option cannot be changed when 'modifiable' is off.\n+      ]=],\n+      full_name = 'fileencoding',\n+      no_mkrc = true,\n+      redraw = { 'statuslines', 'current_buffer' },\n+      scope = { 'buffer' },\n+      short_desc = N_('file encoding for multi-byte text'),\n+      tags = { 'E213' },\n+      type = 'string',\n+      varname = 'p_fenc',\n+    },\n+    {\n+      abbreviation = 'fencs',\n+      defaults = { if_true = 'ucs-bom,utf-8,default,latin1' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        This is a list of character encodings considered when starting to edit\n+        an existing file.  When a file is read, Vim tries to use the first\n+        mentioned character encoding.  If an error is detected, the next one\n+        in the list is tried.  When an encoding is found that works,\n+        'fileencoding' is set to it.  If all fail, 'fileencoding' is set to\n+        an empty string, which means that UTF-8 is used.\n+        \tWARNING: Conversion can cause loss of information! You can use\n+        \tthe |++bad| argument to specify what is done with characters\n+        \tthat can't be converted.\n+        For an empty file or a file with only ASCII characters most encodings\n+        will work and the first entry of 'fileencodings' will be used (except\n+        \"ucs-bom\", which requires the BOM to be present).  If you prefer\n+        another encoding use an BufReadPost autocommand event to test if your\n+        preferred encoding is to be used.  Example: >\n+        \tau BufReadPost * if search('\\S', 'w') == 0 |\n+        \t\t\\ set fenc=iso-2022-jp | endif\n+        <\tThis sets 'fileencoding' to \"iso-2022-jp\" if the file does not contain\n+        non-blank characters.\n+        When the |++enc| argument is used then the value of 'fileencodings' is\n+        not used.\n+        Note that 'fileencodings' is not used for a new file, the global value\n+        of 'fileencoding' is used instead.  You can set it with: >\n+        \t:setglobal fenc=iso-8859-2\n+        <\tThis means that a non-existing file may get a different encoding than\n+        an empty file.\n+        The special value \"ucs-bom\" can be used to check for a Unicode BOM\n+        (Byte Order Mark) at the start of the file.  It must not be preceded\n+        by \"utf-8\" or another Unicode encoding for this to work properly.\n+        An entry for an 8-bit encoding (e.g., \"latin1\") should be the last,\n+        because Vim cannot detect an error, thus the encoding is always\n+        accepted.\n+        The special value \"default\" can be used for the encoding from the\n+        environment.  It is useful when your environment uses a non-latin1\n+        encoding, such as Russian.\n+        When a file contains an illegal UTF-8 byte sequence it won't be\n+        recognized as \"utf-8\".  You can use the |8g8| command to find the\n+        illegal byte sequence.\n+        WRONG VALUES:\t\t\tWHAT'S WRONG:\n+        \tlatin1,utf-8\t\t\"latin1\" will always be used\n+        \tutf-8,ucs-bom,latin1\tBOM won't be recognized in an utf-8\n+        \t\t\t\tfile\n+        \tcp1250,latin1\t\t\"cp1250\" will always be used\n+        If 'fileencodings' is empty, 'fileencoding' is not modified.\n+        See 'fileencoding' for the possible values.\n+        Setting this option does not have an effect until the next time a file\n+        is read.\n+      ]=],\n+      full_name = 'fileencodings',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('automatically detected character encodings'),\n+      type = 'string',\n+      varname = 'p_fencs',\n+    },\n+    {\n+      abbreviation = 'ff',\n+      alloced = true,\n+      cb = 'did_set_fileformat',\n+      defaults = {\n+        if_true = macros('DFLT_FF'),\n+        doc = 'Windows: \"dos\", Unix: \"unix\"',\n+      },\n+      desc = [=[\n+        This gives the <EOL> of the current buffer, which is used for\n+        reading/writing the buffer from/to a file:\n+            dos\t    <CR><NL>\n+            unix    <NL>\n+            mac\t    <CR>\n+        When \"dos\" is used, CTRL-Z at the end of a file is ignored.\n+        See |file-formats| and |file-read|.\n+        For the character encoding of the file see 'fileencoding'.\n+        When 'binary' is set, the value of 'fileformat' is ignored, file I/O\n+        works like it was set to \"unix\".\n+        This option is set automatically when starting to edit a file and\n+        'fileformats' is not empty and 'binary' is off.\n+        When this option is set, after starting to edit a file, the 'modified'\n+        option is set, because the file would be different when written.\n+        This option cannot be changed when 'modifiable' is off.\n+      ]=],\n+      full_name = 'fileformat',\n+      no_mkrc = true,\n+      redraw = { 'curswant', 'statuslines' },\n+      scope = { 'buffer' },\n+      short_desc = N_('file format used for file I/O'),\n+      type = 'string',\n+      varname = 'p_ff',\n+    },\n+    {\n+      abbreviation = 'ffs',\n+      cb = 'did_set_fileformats',\n+      defaults = {\n+        if_true = macros('DFLT_FFS_VIM'),\n+        doc = 'Windows: \"dos,unix\", Unix: \"unix,dos\"',\n+      },\n+      deny_duplicates = true,\n+      desc = [=[\n+        This gives the end-of-line (<EOL>) formats that will be tried when\n+        starting to edit a new buffer and when reading a file into an existing\n+        buffer:\n+        - When empty, the format defined with 'fileformat' will be used\n+          always.  It is not set automatically.\n+        - When set to one name, that format will be used whenever a new buffer\n+          is opened.  'fileformat' is set accordingly for that buffer.  The\n+          'fileformats' name will be used when a file is read into an existing\n+          buffer, no matter what 'fileformat' for that buffer is set to.\n+        - When more than one name is present, separated by commas, automatic\n+          <EOL> detection will be done when reading a file.  When starting to\n+          edit a file, a check is done for the <EOL>:\n+          1. If all lines end in <CR><NL>, and 'fileformats' includes \"dos\",\n+             'fileformat' is set to \"dos\".\n+          2. If a <NL> is found and 'fileformats' includes \"unix\", 'fileformat'\n+             is set to \"unix\".  Note that when a <NL> is found without a\n+             preceding <CR>, \"unix\" is preferred over \"dos\".\n+          3. If 'fileformat' has not yet been set, and if a <CR> is found, and\n+             if 'fileformats' includes \"mac\", 'fileformat' is set to \"mac\".\n+             This means that \"mac\" is only chosen when:\n+              \"unix\" is not present or no <NL> is found in the file, and\n+              \"dos\" is not present or no <CR><NL> is found in the file.\n+             Except: if \"unix\" was chosen, but there is a <CR> before\n+             the first <NL>, and there appear to be more <CR>s than <NL>s in\n+             the first few lines, \"mac\" is used.\n+          4. If 'fileformat' is still not set, the first name from\n+             'fileformats' is used.\n+          When reading a file into an existing buffer, the same is done, but\n+          this happens like 'fileformat' has been set appropriately for that\n+          file only, the option is not changed.\n+        When 'binary' is set, the value of 'fileformats' is not used.\n+\n+        When Vim starts up with an empty buffer the first item is used.  You\n+        can overrule this by setting 'fileformat' in your .vimrc.\n+\n+        For systems with a Dos-like <EOL> (<CR><NL>), when reading files that\n+        are \":source\"ed and for vimrc files, automatic <EOL> detection may be\n+        done:\n+        - When 'fileformats' is empty, there is no automatic detection.  Dos\n+          format will be used.\n+        - When 'fileformats' is set to one or more names, automatic detection\n+          is done.  This is based on the first <NL> in the file: If there is a\n+          <CR> in front of it, Dos format is used, otherwise Unix format is\n+          used.\n+        Also see |file-formats|.\n+      ]=],\n+      full_name = 'fileformats',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_(\"automatically detected values for 'fileformat'\"),\n+      type = 'string',\n+      varname = 'p_ffs',\n+    },\n+    {\n+      abbreviation = 'fic',\n+      defaults = {\n+        condition = 'CASE_INSENSITIVE_FILENAME',\n+        if_false = false,\n+        if_true = true,\n+        doc = [[on for systems where case in file\n+   names is normally ignored]],\n+      },\n+      desc = [=[\n+        When set case is ignored when using file names and directories.\n+        See 'wildignorecase' for only ignoring case when doing completion.\n+      ]=],\n+      full_name = 'fileignorecase',\n+      scope = { 'global' },\n+      short_desc = N_('ignore case when using file names'),\n+      type = 'bool',\n+      varname = 'p_fic',\n+    },\n+    {\n+      abbreviation = 'ft',\n+      alloced = true,\n+      cb = 'did_set_filetype_or_syntax',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        When this option is set, the FileType autocommand event is triggered.\n+        All autocommands that match with the value of this option will be\n+        executed.  Thus the value of 'filetype' is used in place of the file\n+        name.\n+        Otherwise this option does not always reflect the current file type.\n+        This option is normally set when the file type is detected.  To enable\n+        this use the \":filetype on\" command. |:filetype|\n+        Setting this option to a different value is most useful in a modeline,\n+        for a file for which the file type is not automatically recognized.\n+        Example, for in an IDL file: >\n+        \t/* vim: set filetype=idl : */\n+        <\t|FileType| |filetypes|\n+        When a dot appears in the value then this separates two filetype\n+        names.  Example: >\n+        \t/* vim: set filetype=c.doxygen : */\n+        <\tThis will use the \"c\" filetype first, then the \"doxygen\" filetype.\n+        This works both for filetype plugins and for syntax files.  More than\n+        one dot may appear.\n+        This option is not copied to another buffer, independent of the 's' or\n+        'S' flag in 'cpoptions'.\n+        Only normal file name characters can be used, `/\\*?[|<>` are illegal.\n+      ]=],\n+      expand = true,\n+      full_name = 'filetype',\n+      noglob = true,\n+      normal_fname_chars = true,\n+      scope = { 'buffer' },\n+      short_desc = N_('type of file, used for autocommands'),\n+      type = 'string',\n+      varname = 'p_ft',\n+    },\n+    {\n+      abbreviation = 'fcs',\n+      alloced = true,\n+      cb = 'did_set_chars_option',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Characters to fill the statuslines, vertical separators and special\n+        lines in the window.\n+        It is a comma-separated list of items.  Each item has a name, a colon\n+        and the value of that item:\n+\n+          item\t\tdefault\t\tUsed for ~\n+          stl\t\t' ' or '^'\tstatusline of the current window\n+          stlnc\t\t' ' or '='\tstatusline of the non-current windows\n+          wbr\t\t' '\t\twindow bar\n+          horiz\t\t'─' or '-'\thorizontal separators |:split|\n+          horizup\t'┴' or '-'\tupwards facing horizontal separator\n+          horizdown\t'┬' or '-'\tdownwards facing horizontal separator\n+          vert\t\t'│' or '|'\tvertical separators |:vsplit|\n+          vertleft\t'┤' or '|'\tleft facing vertical separator\n+          vertright\t'├' or '|'\tright facing vertical separator\n+          verthoriz\t'┼' or '+'\toverlapping vertical and horizontal\n+        \t\t\t\tseparator\n+          fold\t\t'·' or '-'\tfilling 'foldtext'\n+          foldopen\t'-'\t\tmark the beginning of a fold\n+          foldclose\t'+'\t\tshow a closed fold\n+          foldsep\t'│' or '|'      open fold middle marker\n+          diff\t\t'-'\t\tdeleted lines of the 'diff' option\n+          msgsep\t' '\t\tmessage separator 'display'\n+          eob\t\t'~'\t\tempty lines at the end of a buffer\n+          lastline\t'@'\t\t'display' contains lastline/truncate\n+\n+        Any one that is omitted will fall back to the default.  For \"stl\" and\n+        \"stlnc\" the space will be used when there is highlighting, '^' or '='\n+        otherwise.\n+\n+        Note that \"horiz\", \"horizup\", \"horizdown\", \"vertleft\", \"vertright\" and\n+        \"verthoriz\" are only used when 'laststatus' is 3, since only vertical\n+        window separators are used otherwise.\n+\n+        If 'ambiwidth' is \"double\" then \"horiz\", \"horizup\", \"horizdown\",\n+        \"vert\", \"vertleft\", \"vertright\", \"verthoriz\", \"foldsep\" and \"fold\"\n+        default to single-byte alternatives.\n+\n+        Example: >\n+            :set fillchars=stl:^,stlnc:=,vert:│,fold:·,diff:-\n+        <\tThis is similar to the default, except that these characters will also\n+        be used when there is highlighting.\n+\n+        For the \"stl\", \"stlnc\", \"foldopen\", \"foldclose\" and \"foldsep\" items\n+        single-byte and multibyte characters are supported.  But double-width\n+        characters are not supported.\n+\n+        The highlighting used for these items:\n+          item\t\thighlight group ~\n+          stl\t\tStatusLine\t\t|hl-StatusLine|\n+          stlnc\t\tStatusLineNC\t\t|hl-StatusLineNC|\n+          wbr\t\tWinBar\t\t\t|hl-WinBar| or |hl-WinBarNC|\n+          horiz\t\tWinSeparator\t\t|hl-WinSeparator|\n+          horizup\tWinSeparator\t\t|hl-WinSeparator|\n+          horizdown\tWinSeparator\t\t|hl-WinSeparator|\n+          vert\t\tWinSeparator\t\t|hl-WinSeparator|\n+          vertleft\tWinSeparator\t\t|hl-WinSeparator|\n+          vertright\tWinSeparator\t\t|hl-WinSeparator|\n+          verthoriz\tWinSeparator\t\t|hl-WinSeparator|\n+          fold\t\tFolded\t\t\t|hl-Folded|\n+          diff\t\tDiffDelete\t\t|hl-DiffDelete|\n+          eob\t\tEndOfBuffer\t\t|hl-EndOfBuffer|\n+          lastline\tNonText\t\t\t|hl-NonText|\n+      ]=],\n+      full_name = 'fillchars',\n+      list = 'onecomma',\n+      redraw = { 'current_window' },\n+      scope = { 'global', 'window' },\n+      short_desc = N_('characters to use for displaying special items'),\n+      type = 'string',\n+      varname = 'p_fcs',\n+    },\n+    {\n+      abbreviation = 'fixeol',\n+      cb = 'did_set_eof_eol_fixeol_bomb',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        When writing a file and this option is on, <EOL> at the end of file\n+        will be restored if missing.  Turn this option off if you want to\n+        preserve the situation from the original file.\n+        When the 'binary' option is set the value of this option doesn't\n+        matter.\n+        See the 'endofline' option.\n+        See |eol-and-eof| for example settings.\n+      ]=],\n+      full_name = 'fixendofline',\n+      redraw = { 'statuslines' },\n+      scope = { 'buffer' },\n+      short_desc = N_('make sure last line in file has <EOL>'),\n+      type = 'bool',\n+      varname = 'p_fixeol',\n+    },\n+    {\n+      abbreviation = 'fcl',\n+      cb = 'did_set_foldclose',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        When set to \"all\", a fold is closed when the cursor isn't in it and\n+        its level is higher than 'foldlevel'.  Useful if you want folds to\n+        automatically close when moving out of them.\n+      ]=],\n+      full_name = 'foldclose',\n+      list = 'onecomma',\n+      redraw = { 'current_window' },\n+      scope = { 'global' },\n+      short_desc = N_('close a fold when the cursor leaves it'),\n+      type = 'string',\n+      varname = 'p_fcl',\n+    },\n+    {\n+      abbreviation = 'fdc',\n+      alloced = true,\n+      cb = 'did_set_foldcolumn',\n+      defaults = { if_true = '0' },\n+      desc = [=[\n+        When and how to draw the foldcolumn. Valid values are:\n+            \"auto\":       resize to the minimum amount of folds to display.\n+            \"auto:[1-9]\": resize to accommodate multiple folds up to the\n+        \t\t  selected level\n+            0:            to disable foldcolumn\n+            \"[1-9]\":      to display a fixed number of columns\n+        See |folding|.\n+      ]=],\n+      full_name = 'foldcolumn',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('width of the column used to indicate folds'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'fen',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        When off, all folds are open.  This option can be used to quickly\n+        switch between showing all text unfolded and viewing the text with\n+        folds (including manually opened or closed folds).  It can be toggled\n+        with the |zi| command.  The 'foldcolumn' will remain blank when\n+        'foldenable' is off.\n+        This option is set by commands that create a new fold or close a fold.\n+        See |folding|.\n+      ]=],\n+      full_name = 'foldenable',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('set to display all folds open'),\n+      type = 'bool',\n+    },\n+    {\n+      abbreviation = 'fde',\n+      alloced = true,\n+      cb = 'did_set_foldexpr',\n+      defaults = { if_true = '0' },\n+      desc = [=[\n+        The expression used for when 'foldmethod' is \"expr\".  It is evaluated\n+        for each line to obtain its fold level.  The context is set to the\n+        script where 'foldexpr' was set, script-local items can be accessed.\n+        See |fold-expr| for the usage.\n+\n+        The expression will be evaluated in the |sandbox| if set from a\n+        modeline, see |sandbox-option|.\n+        This option can't be set from a |modeline| when the 'diff' option is\n+        on or the 'modelineexpr' option is off.\n+\n+        It is not allowed to change text or jump to another window while\n+        evaluating 'foldexpr' |textlock|.\n+      ]=],\n+      full_name = 'foldexpr',\n+      modelineexpr = true,\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('expression used when \\'foldmethod\\' is \"expr\"'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'fdi',\n+      alloced = true,\n+      cb = 'did_set_foldignore',\n+      defaults = { if_true = '#' },\n+      desc = [=[\n+        Used only when 'foldmethod' is \"indent\".  Lines starting with\n+        characters in 'foldignore' will get their fold level from surrounding\n+        lines.  White space is skipped before checking for this character.\n+        The default \"#\" works well for C programs.  See |fold-indent|.\n+      ]=],\n+      full_name = 'foldignore',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('ignore lines when \\'foldmethod\\' is \"indent\"'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'fdl',\n+      cb = 'did_set_foldlevel',\n+      defaults = { if_true = 0 },\n+      desc = [=[\n+        Sets the fold level: Folds with a higher level will be closed.\n+        Setting this option to zero will close all folds.  Higher numbers will\n+        close fewer folds.\n+        This option is set by commands like |zm|, |zM| and |zR|.\n+        See |fold-foldlevel|.\n+      ]=],\n+      full_name = 'foldlevel',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('close folds with a level higher than this'),\n+      type = 'number',\n+    },\n+    {\n+      abbreviation = 'fdls',\n+      defaults = { if_true = -1 },\n+      desc = [=[\n+        Sets 'foldlevel' when starting to edit another buffer in a window.\n+        Useful to always start editing with all folds closed (value zero),\n+        some folds closed (one) or no folds closed (99).\n+        This is done before reading any modeline, thus a setting in a modeline\n+        overrules this option.  Starting to edit a file for |diff-mode| also\n+        ignores this option and closes all folds.\n+        It is also done before BufReadPre autocommands, to allow an autocmd to\n+        overrule the 'foldlevel' value for specific files.\n+        When the value is negative, it is not used.\n+      ]=],\n+      full_name = 'foldlevelstart',\n+      redraw = { 'curswant' },\n+      scope = { 'global' },\n+      short_desc = N_(\"'foldlevel' when starting to edit a file\"),\n+      type = 'number',\n+      varname = 'p_fdls',\n+    },\n+    {\n+      abbreviation = 'fmr',\n+      alloced = true,\n+      cb = 'did_set_foldmarker',\n+      defaults = { if_true = '{{{,}}}' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        The start and end marker used when 'foldmethod' is \"marker\".  There\n+        must be one comma, which separates the start and end marker.  The\n+        marker is a literal string (a regular expression would be too slow).\n+        See |fold-marker|.\n+      ]=],\n+      full_name = 'foldmarker',\n+      list = 'onecomma',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('markers used when \\'foldmethod\\' is \"marker\"'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'fdm',\n+      alloced = true,\n+      cb = 'did_set_foldmethod',\n+      defaults = { if_true = 'manual' },\n+      desc = [=[\n+        The kind of folding used for the current window.  Possible values:\n+        |fold-manual|\tmanual\t    Folds are created manually.\n+        |fold-indent|\tindent\t    Lines with equal indent form a fold.\n+        |fold-expr|\texpr\t    'foldexpr' gives the fold level of a line.\n+        |fold-marker|\tmarker\t    Markers are used to specify folds.\n+        |fold-syntax|\tsyntax\t    Syntax highlighting items specify folds.\n+        |fold-diff|\tdiff\t    Fold text that is not changed.\n+      ]=],\n+      full_name = 'foldmethod',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('folding type'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'fml',\n+      cb = 'did_set_foldminlines',\n+      defaults = { if_true = 1 },\n+      desc = [=[\n+        Sets the number of screen lines above which a fold can be displayed\n+        closed.  Also for manually closed folds.  With the default value of\n+        one a fold can only be closed if it takes up two or more screen lines.\n+        Set to zero to be able to close folds of just one screen line.\n+        Note that this only has an effect on what is displayed.  After using\n+        \"zc\" to close a fold, which is displayed open because it's smaller\n+        than 'foldminlines', a following \"zc\" may close a containing fold.\n+      ]=],\n+      full_name = 'foldminlines',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('minimum number of lines for a fold to be closed'),\n+      type = 'number',\n+    },\n+    {\n+      abbreviation = 'fdn',\n+      cb = 'did_set_foldnestmax',\n+      defaults = { if_true = 20 },\n+      desc = [=[\n+        Sets the maximum nesting of folds for the \"indent\" and \"syntax\"\n+        methods.  This avoids that too many folds will be created.  Using more\n+        than 20 doesn't work, because the internal limit is 20.\n+      ]=],\n+      full_name = 'foldnestmax',\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('maximum fold depth'),\n+      type = 'number',\n+    },\n+    {\n+      abbreviation = 'fdo',\n+      cb = 'did_set_foldopen',\n+      defaults = { if_true = 'block,hor,mark,percent,quickfix,search,tag,undo' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Specifies for which type of commands folds will be opened, if the\n+        command moves the cursor into a closed fold.  It is a comma-separated\n+        list of items.\n+        NOTE: When the command is part of a mapping this option is not used.\n+        Add the |zv| command to the mapping to get the same effect.\n+        (rationale: the mapping may want to control opening folds itself)\n+\n+        \titem\t\tcommands ~\n+        \tall\t\tany\n+        \tblock\t\t(, {, [[, [{, etc.\n+        \thor\t\thorizontal movements: \"l\", \"w\", \"fx\", etc.\n+        \tinsert\t\tany command in Insert mode\n+        \tjump\t\tfar jumps: \"G\", \"gg\", etc.\n+        \tmark\t\tjumping to a mark: \"'m\", CTRL-O, etc.\n+        \tpercent\t\t\"%\"\n+        \tquickfix\t\":cn\", \":crew\", \":make\", etc.\n+        \tsearch\t\tsearch for a pattern: \"/\", \"n\", \"*\", \"gd\", etc.\n+        \t\t\t(not for a search pattern in a \":\" command)\n+        \t\t\tAlso for |[s| and |]s|.\n+        \ttag\t\tjumping to a tag: \":ta\", CTRL-T, etc.\n+        \tundo\t\tundo or redo: \"u\" and CTRL-R\n+        When a movement command is used for an operator (e.g., \"dl\" or \"y%\")\n+        this option is not used.  This means the operator will include the\n+        whole closed fold.\n+        Note that vertical movements are not here, because it would make it\n+        very difficult to move onto a closed fold.\n+        In insert mode the folds containing the cursor will always be open\n+        when text is inserted.\n+        To close folds you can re-apply 'foldlevel' with the |zx| command or\n+        set the 'foldclose' option to \"all\".\n+      ]=],\n+      full_name = 'foldopen',\n+      list = 'onecomma',\n+      redraw = { 'curswant' },\n+      scope = { 'global' },\n+      short_desc = N_('for which commands a fold will be opened'),\n+      type = 'string',\n+      varname = 'p_fdo',\n+    },\n+    {\n+      abbreviation = 'fdt',\n+      alloced = true,\n+      cb = 'did_set_optexpr',\n+      defaults = { if_true = 'foldtext()' },\n+      desc = [=[\n+        An expression which is used to specify the text displayed for a closed\n+        fold.  The context is set to the script where 'foldexpr' was set,\n+        script-local items can be accessed.  See |fold-foldtext| for the\n+        usage.\n+\n+        The expression will be evaluated in the |sandbox| if set from a\n+        modeline, see |sandbox-option|.\n+        This option cannot be set in a modeline when 'modelineexpr' is off.\n+\n+        It is not allowed to change text or jump to another window while\n+        evaluating 'foldtext' |textlock|.\n+      ]=],\n+      full_name = 'foldtext',\n+      modelineexpr = true,\n+      redraw = { 'current_window' },\n+      scope = { 'window' },\n+      short_desc = N_('expression used to display for a closed fold'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'fex',\n+      alloced = true,\n+      cb = 'did_set_optexpr',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        Expression which is evaluated to format a range of lines for the |gq|\n+        operator or automatic formatting (see 'formatoptions').  When this\n+        option is empty 'formatprg' is used.\n+\n+        The |v:lnum|  variable holds the first line to be formatted.\n+        The |v:count| variable holds the number of lines to be formatted.\n+        The |v:char|  variable holds the character that is going to be\n+        \t      inserted if the expression is being evaluated due to\n+        \t      automatic formatting.  This can be empty.  Don't insert\n+        \t      it yet!\n+\n+        Example: >\n+        \t:set formatexpr=mylang#Format()\n+        <\tThis will invoke the mylang#Format() function in the\n+        autoload/mylang.vim file in 'runtimepath'. |autoload|\n+\n+        The expression is also evaluated when 'textwidth' is set and adding\n+        text beyond that limit.  This happens under the same conditions as\n+        when internal formatting is used.  Make sure the cursor is kept in the\n+        same spot relative to the text then!  The |mode()| function will\n+        return \"i\" or \"R\" in this situation.\n+\n+        When the expression evaluates to non-zero Vim will fall back to using\n+        the internal format mechanism.\n+\n+        If the expression starts with s: or |<SID>|, then it is replaced with\n+        the script ID (|local-function|). Example: >\n+        \tset formatexpr=s:MyFormatExpr()\n+        \tset formatexpr=<SID>SomeFormatExpr()\n+        <\tOtherwise, the expression is evaluated in the context of the script\n+        where the option was set, thus script-local items are available.\n+\n+        The expression will be evaluated in the |sandbox| when set from a\n+        modeline, see |sandbox-option|.  That stops the option from working,\n+        since changing the buffer text is not allowed.\n+        This option cannot be set in a modeline when 'modelineexpr' is off.\n+        NOTE: This option is set to \"\" when 'compatible' is set.\n+      ]=],\n+      full_name = 'formatexpr',\n+      modelineexpr = true,\n+      scope = { 'buffer' },\n+      short_desc = N_('expression used with \"gq\" command'),\n+      type = 'string',\n+      varname = 'p_fex',\n+    },\n+    {\n+      abbreviation = 'fo',\n+      alloced = true,\n+      cb = 'did_set_formatoptions',\n+      defaults = { if_true = macros('DFLT_FO_VIM') },\n+      desc = [=[\n+        This is a sequence of letters which describes how automatic\n+        formatting is to be done.  See |fo-table|.  Commas can be inserted for\n+        readability.\n+        To avoid problems with flags that are added in the future, use the\n+        \"+=\" and \"-=\" feature of \":set\" |add-option-flags|.\n+      ]=],\n+      full_name = 'formatoptions',\n+      list = 'flags',\n+      scope = { 'buffer' },\n+      short_desc = N_('how automatic formatting is to be done'),\n+      type = 'string',\n+      varname = 'p_fo',\n+    },\n+    {\n+      abbreviation = 'flp',\n+      alloced = true,\n+      defaults = { if_true = '^\\\\s*\\\\d\\\\+[\\\\]:.)}\\\\t ]\\\\s*' },\n+      desc = [=[\n+        A pattern that is used to recognize a list header.  This is used for\n+        the \"n\" flag in 'formatoptions'.\n+        The pattern must match exactly the text that will be the indent for\n+        the line below it.  You can use |/\\ze| to mark the end of the match\n+        while still checking more characters.  There must be a character\n+        following the pattern, when it matches the whole line it is handled\n+        like there is no match.\n+        The default recognizes a number, followed by an optional punctuation\n+        character and white space.\n+      ]=],\n+      full_name = 'formatlistpat',\n+      scope = { 'buffer' },\n+      short_desc = N_('pattern used to recognize a list header'),\n+      type = 'string',\n+      varname = 'p_flp',\n+    },\n+    {\n+      abbreviation = 'fp',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        The name of an external program that will be used to format the lines\n+        selected with the |gq| operator.  The program must take the input on\n+        stdin and produce the output on stdout.  The Unix program \"fmt\" is\n+        such a program.\n+        If the 'formatexpr' option is not empty it will be used instead.\n+        Otherwise, if 'formatprg' option is an empty string, the internal\n+        format function will be used |C-indenting|.\n+        Environment variables are expanded |:set_env|.  See |option-backslash|\n+        about including spaces and backslashes.\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      expand = true,\n+      full_name = 'formatprg',\n+      scope = { 'global', 'buffer' },\n+      secure = true,\n+      short_desc = N_('name of external program used with \"gq\" command'),\n+      type = 'string',\n+      varname = 'p_fp',\n+    },\n+    {\n+      abbreviation = 'fs',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        When on, the OS function fsync() will be called after saving a file\n+        (|:write|, |writefile()|, …), |swap-file|, |undo-persistence| and |shada-file|.\n+        This flushes the file to disk, ensuring that it is safely written.\n+        Slow on some systems: writing buffers, quitting Nvim, and other\n+        operations may sometimes take a few seconds.\n+\n+        Files are ALWAYS flushed ('fsync' is ignored) when:\n+        - |CursorHold| event is triggered\n+        - |:preserve| is called\n+        - system signals low battery life\n+        - Nvim exits abnormally\n+\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      full_name = 'fsync',\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_('whether to invoke fsync() after file write'),\n+      type = 'bool',\n+      varname = 'p_fs',\n+    },\n+    {\n+      abbreviation = 'gd',\n+      defaults = { if_true = false },\n+      desc = [=[\n+        When on, the \":substitute\" flag 'g' is default on.  This means that\n+        all matches in a line are substituted instead of one.  When a 'g' flag\n+        is given to a \":substitute\" command, this will toggle the substitution\n+        of all or one match.  See |complex-change|.\n+\n+        \tcommand\t\t'gdefault' on\t'gdefault' off\t~\n+        \t:s///\t\t  subst. all\t  subst. one\n+        \t:s///g\t\t  subst. one\t  subst. all\n+        \t:s///gg\t\t  subst. all\t  subst. one\n+\n+        DEPRECATED: Setting this option may break plugins that are not aware\n+        of this option.  Also, many users get confused that adding the /g flag\n+        has the opposite effect of that it normally does.\n+      ]=],\n+      full_name = 'gdefault',\n+      scope = { 'global' },\n+      short_desc = N_('the \":substitute\" flag \\'g\\' is default on'),\n+      type = 'bool',\n+      varname = 'p_gd',\n+    },\n+    {\n+      abbreviation = 'gfm',\n+      defaults = { if_true = macros('DFLT_GREPFORMAT') },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Format to recognize for the \":grep\" command output.\n+        This is a scanf-like string that uses the same format as the\n+        'errorformat' option: see |errorformat|.\n+      ]=],\n+      full_name = 'grepformat',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_(\"format of 'grepprg' output\"),\n+      type = 'string',\n+      varname = 'p_gefm',\n+    },\n+    {\n+      abbreviation = 'gp',\n+      defaults = {\n+        condition = 'MSWIN',\n+        if_false = 'grep -n $* /dev/null',\n+        if_true = 'findstr /n $* nul',\n+        doc = [[\"grep -n \",\n+           Unix: \"grep -n $* /dev/null\"]],\n+      },\n+      desc = [=[\n+        Program to use for the |:grep| command.  This option may contain '%'\n+        and '#' characters, which are expanded like when used in a command-\n+        line.  The placeholder \"$*\" is allowed to specify where the arguments\n+        will be included.  Environment variables are expanded |:set_env|.  See\n+        |option-backslash| about including spaces and backslashes.\n+        When your \"grep\" accepts the \"-H\" argument, use this to make \":grep\"\n+        also work well with a single file: >\n+        \t:set grepprg=grep\\ -nH\n+        <\tSpecial value: When 'grepprg' is set to \"internal\" the |:grep| command\n+        works like |:vimgrep|, |:lgrep| like |:lvimgrep|, |:grepadd| like\n+        |:vimgrepadd| and |:lgrepadd| like |:lvimgrepadd|.\n+        See also the section |:make_makeprg|, since most of the comments there\n+        apply equally to 'grepprg'.\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      expand = true,\n+      full_name = 'grepprg',\n+      scope = { 'global', 'buffer' },\n+      secure = true,\n+      short_desc = N_('program to use for \":grep\"'),\n+      type = 'string',\n+      varname = 'p_gp',\n+    },\n+    {\n+      abbreviation = 'gcr',\n+      cb = 'did_set_guicursor',\n+      defaults = { if_true = 'n-v-c-sm:block,i-ci-ve:ver25,r-cr-o:hor20' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Configures the cursor style for each mode. Works in the GUI and many\n+        terminals.  See |tui-cursor-shape|.\n+\n+        To disable cursor-styling, reset the option: >\n+        \t:set guicursor=\n+\n+        <\tTo enable mode shapes, \"Cursor\" highlight, and blinking: >\n+        \t:set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50\n+        \t  \\,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor\n+        \t  \\,sm:block-blinkwait175-blinkoff150-blinkon175\n+\n+        <\tThe option is a comma-separated list of parts.  Each part consists of a\n+        mode-list and an argument-list:\n+        \tmode-list:argument-list,mode-list:argument-list,..\n+        The mode-list is a dash separated list of these modes:\n+        \tn\tNormal mode\n+        \tv\tVisual mode\n+        \tve\tVisual mode with 'selection' \"exclusive\" (same as 'v',\n+        \t\tif not specified)\n+        \to\tOperator-pending mode\n+        \ti\tInsert mode\n+        \tr\tReplace mode\n+        \tc\tCommand-line Normal (append) mode\n+        \tci\tCommand-line Insert mode\n+        \tcr\tCommand-line Replace mode\n+        \tsm\tshowmatch in Insert mode\n+        \ta\tall modes\n+        The argument-list is a dash separated list of these arguments:\n+        \thor{N}\thorizontal bar, {N} percent of the character height\n+        \tver{N}\tvertical bar, {N} percent of the character width\n+        \tblock\tblock cursor, fills the whole character\n+        \t\t- Only one of the above three should be present.\n+        \t\t- Default is \"block\" for each mode.\n+        \tblinkwait{N}\t\t\t\t*cursor-blinking*\n+        \tblinkon{N}\n+        \tblinkoff{N}\n+        \t\tblink times for cursor: blinkwait is the delay before\n+        \t\tthe cursor starts blinking, blinkon is the time that\n+        \t\tthe cursor is shown and blinkoff is the time that the\n+        \t\tcursor is not shown.  Times are in msec.  When one of\n+        \t\tthe numbers is zero, there is no blinking. E.g.: >\n+        \t\t\t:set guicursor=n:blinkon0\n+        <\t\t\t- Default is \"blinkon0\" for each mode.\n+        \t{group-name}\n+        \t\tHighlight group that decides the color and font of the\n+        \t\tcursor.\n+        \t\tIn the |TUI|:\n+        \t\t- |inverse|/reverse and no group-name are interpreted\n+        \t\t  as \"host-terminal default cursor colors\" which\n+        \t\t  typically means \"inverted bg and fg colors\".\n+        \t\t- |ctermfg| and |guifg| are ignored.\n+        \t{group-name}/{group-name}\n+        \t\tTwo highlight group names, the first is used when\n+        \t\tno language mappings are used, the other when they\n+        \t\tare. |language-mapping|\n+\n+        Examples of parts:\n+           n-c-v:block-nCursor\tIn Normal, Command-line and Visual mode, use a\n+        \t\t\tblock cursor with colors from the \"nCursor\"\n+        \t\t\thighlight group\n+           n-v-c-sm:block,i-ci-ve:ver25-Cursor,r-cr-o:hor20\n+        \t\t\tIn Normal et al. modes, use a block cursor\n+        \t\t\twith the default colors defined by the host\n+        \t\t\tterminal.  In Insert-likes modes, use\n+        \t\t\ta vertical bar cursor with colors from\n+        \t\t\t\"Cursor\" highlight group.  In Replace-likes\n+        \t\t\tmodes, use a underline cursor with\n+        \t\t\tdefault colors.\n+           i-ci:ver30-iCursor-blinkwait300-blinkon200-blinkoff150\n+        \t\t\tIn Insert and Command-line Insert mode, use a\n+        \t\t\t30% vertical bar cursor with colors from the\n+        \t\t\t\"iCursor\" highlight group.  Blink a bit\n+        \t\t\tfaster.\n+\n+        The 'a' mode is different.  It will set the given argument-list for\n+        all modes.  It does not reset anything to defaults.  This can be used\n+        to do a common setting for all modes.  For example, to switch off\n+        blinking: \"a:blinkon0\"\n+\n+        Examples of cursor highlighting: >\n+            :highlight Cursor gui=reverse guifg=NONE guibg=NONE\n+            :highlight Cursor gui=NONE guifg=bg guibg=fg\n+        <\n+      ]=],\n+      full_name = 'guicursor',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('GUI: settings for cursor shape and blinking'),\n+      tags = { 'E545', 'E546', 'E548', 'E549' },\n+      type = 'string',\n+      varname = 'p_guicursor',\n+    },\n+    {\n+      abbreviation = 'gfn',\n+      defaults = { if_true = '' },\n+      desc = [=[\n+        This is a list of fonts which will be used for the GUI version of Vim.\n+        In its simplest form the value is just one font name.  When\n+        the font cannot be found you will get an error message.  To try other\n+        font names a list can be specified, font names separated with commas.\n+        The first valid font is used.\n+\n+        Spaces after a comma are ignored.  To include a comma in a font name\n+        precede it with a backslash.  Setting an option requires an extra\n+        backslash before a space and a backslash.  See also\n+        |option-backslash|.  For example: >\n+            :set guifont=Screen15,\\ 7x13,font\\\\,with\\\\,commas\n+        <\twill make Vim try to use the font \"Screen15\" first, and if it fails it\n+        will try to use \"7x13\" and then \"font,with,commas\" instead.\n+\n+        If none of the fonts can be loaded, Vim will keep the current setting.\n+        If an empty font list is given, Vim will try using other resource\n+        settings (for X, it will use the Vim.font resource), and finally it\n+        will try some builtin default which should always be there (\"7x13\" in\n+        the case of X).  The font names given should be \"normal\" fonts.  Vim\n+        will try to find the related bold and italic fonts.\n+\n+        For Win32 and Mac OS: >\n+            :set guifont=*\n+        <\twill bring up a font requester, where you can pick the font you want.\n+\n+        The font name depends on the GUI used.\n+\n+        For Mac OSX you can use something like this: >\n+            :set guifont=Monaco:h10\n+        <\t\t\t\t\t\t\t\t*E236*\n+        Note that the fonts must be mono-spaced (all characters have the same\n+        width).\n+\n+        To preview a font on X11, you might be able to use the \"xfontsel\"\n+        program.  The \"xlsfonts\" program gives a list of all available fonts.\n+\n+        For the Win32 GUI\t\t\t\t\t*E244* *E245*\n+        - takes these options in the font name:\n+        \thXX - height is XX (points, can be floating-point)\n+        \twXX - width is XX (points, can be floating-point)\n+        \tb   - bold\n+        \ti   - italic\n+        \tu   - underline\n+        \ts   - strikeout\n+        \tcXX - character set XX.  Valid charsets are: ANSI, ARABIC,\n+        \t      BALTIC, CHINESEBIG5, DEFAULT, EASTEUROPE, GB2312, GREEK,\n+        \t      HANGEUL, HEBREW, JOHAB, MAC, OEM, RUSSIAN, SHIFTJIS,\n+        \t      SYMBOL, THAI, TURKISH, VIETNAMESE ANSI and BALTIC.\n+        \t      Normally you would use \"cDEFAULT\".\n+\n+          Use a ':' to separate the options.\n+        - A '_' can be used in the place of a space, so you don't need to use\n+          backslashes to escape the spaces.\n+        - Examples: >\n+            :set guifont=courier_new:h12:w5:b:cRUSSIAN\n+            :set guifont=Andale_Mono:h7.5:w4.5\n+        <\n+      ]=],\n+      deny_duplicates = true,\n+      full_name = 'guifont',\n+      list = 'onecomma',\n+      redraw = { 'ui_option' },\n+      scope = { 'global' },\n+      short_desc = N_('GUI: Name(s) of font(s) to be used'),\n+      tags = { 'E235', 'E596' },\n+      type = 'string',\n+      varname = 'p_guifont',\n+    },\n+    {\n+      abbreviation = 'gfw',\n+      defaults = { if_true = '' },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Comma-separated list of fonts to be used for double-width characters.\n+        The first font that can be loaded is used.\n+        Note: The size of these fonts must be exactly twice as wide as the one\n+        specified with 'guifont' and the same height.\n+\n+        When 'guifont' has a valid font and 'guifontwide' is empty Vim will\n+        attempt to set 'guifontwide' to a matching double-width font.\n+      ]=],\n+      full_name = 'guifontwide',\n+      list = 'onecomma',\n+      redraw = { 'ui_option' },\n+      scope = { 'global' },\n+      short_desc = N_('list of font names for double-wide characters'),\n+      tags = { 'E231', 'E533', 'E534' },\n+      type = 'string',\n+      varname = 'p_guifontwide',\n+    },\n+    {\n+      abbreviation = 'go',\n+      defaults = {\n+        if_true = '',\n+        doc = '\"egmrLT\"   (MS-Windows)',\n+      },\n+      desc = [=[\n+        This option only has an effect in the GUI version of Vim.  It is a\n+        sequence of letters which describes what components and options of the\n+        GUI should be used.\n+        To avoid problems with flags that are added in the future, use the\n+        \"+=\" and \"-=\" feature of \":set\" |add-option-flags|.\n+\n+        Valid letters are as follows:\n+        \t\t\t\t\t\t*guioptions_a* *'go-a'*\n+          'a'\tAutoselect:  If present, then whenever VISUAL mode is started,\n+        \tor the Visual area extended, Vim tries to become the owner of\n+        \tthe windowing system's global selection.  This means that the\n+        \tVisually highlighted text is available for pasting into other\n+        \tapplications as well as into Vim itself.  When the Visual mode\n+        \tends, possibly due to an operation on the text, or when an\n+        \tapplication wants to paste the selection, the highlighted text\n+        \tis automatically yanked into the \"* selection register.\n+        \tThus the selection is still available for pasting into other\n+        \tapplications after the VISUAL mode has ended.\n+        \t    If not present, then Vim won't become the owner of the\n+        \twindowing system's global selection unless explicitly told to\n+        \tby a yank or delete operation for the \"* register.\n+        \tThe same applies to the modeless selection.\n+        \t\t\t\t\t\t\t*'go-P'*\n+          'P'\tLike autoselect but using the \"+ register instead of the \"*\n+        \tregister.\n+        \t\t\t\t\t\t\t*'go-A'*\n+          'A'\tAutoselect for the modeless selection.  Like 'a', but only\n+        \tapplies to the modeless selection.\n+\n+        \t    'guioptions'   autoselect Visual  autoselect modeless ~\n+        \t\t \"\"\t\t -\t\t\t -\n+        \t\t \"a\"\t\tyes\t\t\tyes\n+        \t\t \"A\"\t\t -\t\t\tyes\n+        \t\t \"aA\"\t\tyes\t\t\tyes\n+\n+        \t\t\t\t\t\t\t*'go-c'*\n+          'c'\tUse console dialogs instead of popup dialogs for simple\n+        \tchoices.\n+        \t\t\t\t\t\t\t*'go-d'*\n+          'd'\tUse dark theme variant if available.\n+        \t\t\t\t\t\t\t*'go-e'*\n+          'e'\tAdd tab pages when indicated with 'showtabline'.\n+        \t'guitablabel' can be used to change the text in the labels.\n+        \tWhen 'e' is missing a non-GUI tab pages line may be used.\n+        \tThe GUI tabs are only supported on some systems, currently\n+        \tMac OS/X and MS-Windows.\n+        \t\t\t\t\t\t\t*'go-i'*\n+          'i'\tUse a Vim icon.\n+        \t\t\t\t\t\t\t*'go-m'*\n+          'm'\tMenu bar is present.\n+        \t\t\t\t\t\t\t*'go-M'*\n+          'M'\tThe system menu \"$VIMRUNTIME/menu.vim\" is not sourced.  Note\n+        \tthat this flag must be added in the vimrc file, before\n+        \tswitching on syntax or filetype recognition (when the |gvimrc|\n+        \tfile is sourced the system menu has already been loaded; the\n+        \t`:syntax on` and `:filetype on` commands load the menu too).\n+        \t\t\t\t\t\t\t*'go-g'*\n+          'g'\tGrey menu items: Make menu items that are not active grey.  If\n+        \t'g' is not included inactive menu items are not shown at all.\n+        \t\t\t\t\t\t\t*'go-T'*\n+          'T'\tInclude Toolbar.  Currently only in Win32 GUI.\n+        \t\t\t\t\t\t\t*'go-r'*\n+          'r'\tRight-hand scrollbar is always present.\n+        \t\t\t\t\t\t\t*'go-R'*\n+          'R'\tRight-hand scrollbar is present when there is a vertically\n+        \tsplit window.\n+        \t\t\t\t\t\t\t*'go-l'*\n+          'l'\tLeft-hand scrollbar is always present.\n+        \t\t\t\t\t\t\t*'go-L'*\n+          'L'\tLeft-hand scrollbar is present when there is a vertically\n+        \tsplit window.\n+        \t\t\t\t\t\t\t*'go-b'*\n+          'b'\tBottom (horizontal) scrollbar is present.  Its size depends on\n+        \tthe longest visible line, or on the cursor line if the 'h'\n+        \tflag is included. |gui-horiz-scroll|\n+        \t\t\t\t\t\t\t*'go-h'*\n+          'h'\tLimit horizontal scrollbar size to the length of the cursor\n+        \tline.  Reduces computations. |gui-horiz-scroll|\n+\n+        And yes, you may even have scrollbars on the left AND the right if\n+        you really want to :-).  See |gui-scrollbars| for more information.\n+\n+        \t\t\t\t\t\t\t*'go-v'*\n+          'v'\tUse a vertical button layout for dialogs.  When not included,\n+        \ta horizontal layout is preferred, but when it doesn't fit a\n+        \tvertical layout is used anyway.  Not supported in GTK 3.\n+        \t\t\t\t\t\t\t*'go-p'*\n+          'p'\tUse Pointer callbacks for X11 GUI.  This is required for some\n+        \twindow managers.  If the cursor is not blinking or hollow at\n+        \tthe right moment, try adding this flag.  This must be done\n+        \tbefore starting the GUI.  Set it in your |gvimrc|.  Adding or\n+        \tremoving it after the GUI has started has no effect.\n+        \t\t\t\t\t\t\t*'go-k'*\n+          'k'\tKeep the GUI window size when adding/removing a scrollbar, or\n+        \ttoolbar, tabline, etc.  Instead, the behavior is similar to\n+        \twhen the window is maximized and will adjust 'lines' and\n+        \t'columns' to fit to the window.  Without the 'k' flag Vim will\n+        \ttry to keep 'lines' and 'columns' the same when adding and\n+        \tremoving GUI components.\n+      ]=],\n+      enable_if = false,\n+      full_name = 'guioptions',\n+      list = 'flags',\n+      scope = { 'global' },\n+      short_desc = N_('GUI: Which components and options are used'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'gtl',\n+      desc = [=[\n+        When non-empty describes the text to use in a label of the GUI tab\n+        pages line.  When empty and when the result is empty Vim will use a\n+        default label.  See |setting-guitablabel| for more info.\n+\n+        The format of this option is like that of 'statusline'.\n+        'guitabtooltip' is used for the tooltip, see below.\n+        The expression will be evaluated in the |sandbox| when set from a\n+        modeline, see |sandbox-option|.\n+        This option cannot be set in a modeline when 'modelineexpr' is off.\n+\n+        Only used when the GUI tab pages line is displayed.  'e' must be\n+        present in 'guioptions'.  For the non-GUI tab pages line 'tabline' is\n+        used.\n+      ]=],\n+      enable_if = false,\n+      full_name = 'guitablabel',\n+      modelineexpr = true,\n+      redraw = { 'current_window' },\n+      scope = { 'global' },\n+      short_desc = N_('GUI: custom label for a tab page'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'gtt',\n+      desc = [=[\n+        When non-empty describes the text to use in a tooltip for the GUI tab\n+        pages line.  When empty Vim will use a default tooltip.\n+        This option is otherwise just like 'guitablabel' above.\n+        You can include a line break.  Simplest method is to use |:let|: >\n+        \t:let &guitabtooltip = \"line one\\nline two\"\n+        <\n+      ]=],\n+      enable_if = false,\n+      full_name = 'guitabtooltip',\n+      redraw = { 'current_window' },\n+      scope = { 'global' },\n+      short_desc = N_('GUI: custom tooltip for a tab page'),\n+      type = 'string',\n+    },\n+    {\n+      abbreviation = 'hf',\n+      cb = 'did_set_helpfile',\n+      defaults = {\n+        if_true = macros('DFLT_HELPFILE'),\n+        doc = [[(MS-Windows) \"$VIMRUNTIME\\doc\\help.txt\"\n+                  (others) \"$VIMRUNTIME/doc/help.txt\")\n+      ]],\n+      },\n+      desc = [=[\n+        Name of the main help file.  All distributed help files should be\n+        placed together in one directory.  Additionally, all \"doc\" directories\n+        in 'runtimepath' will be used.\n+        Environment variables are expanded |:set_env|.  For example:\n+        \"$VIMRUNTIME/doc/help.txt\".  If $VIMRUNTIME is not set, $VIM is also\n+        tried.  Also see |$VIMRUNTIME| and |option-backslash| about including\n+        spaces and backslashes.\n+        This option cannot be set from a |modeline| or in the |sandbox|, for\n+        security reasons.\n+      ]=],\n+      expand = true,\n+      full_name = 'helpfile',\n+      scope = { 'global' },\n+      secure = true,\n+      short_desc = N_('full path name of the main help file'),\n+      type = 'string',\n+      varname = 'p_hf',\n+    },\n+    {\n+      abbreviation = 'hh',\n+      cb = 'did_set_helpheight',\n+      defaults = { if_true = 20 },\n+      desc = [=[\n+        Minimal initial height of the help window when it is opened with the\n+        \":help\" command.  The initial height of the help window is half of the\n+        current window, or (when the 'ea' option is on) the same as other\n+        windows.  When the height is less than 'helpheight', the height is\n+        set to 'helpheight'.  Set to zero to disable.\n+      ]=],\n+      full_name = 'helpheight',\n+      scope = { 'global' },\n+      short_desc = N_('minimum height of a new help window'),\n+      type = 'number',\n+      varname = 'p_hh',\n+    },\n+    {\n+      abbreviation = 'hlg',\n+      cb = 'did_set_helplang',\n+      defaults = {\n+        if_true = '',\n+        doc = 'messages language or empty',\n+      },\n+      deny_duplicates = true,\n+      desc = [=[\n+        Comma-separated list of languages.  Vim will use the first language\n+        for which the desired help can be found.  The English help will always\n+        be used as a last resort.  You can add \"en\" to prefer English over\n+        another language, but that will only find tags that exist in that\n+        language and not in the English help.\n+        Example: >\n+        \t:set helplang=de,it\n+        <\tThis will first search German, then Italian and finally English help\n+        files.\n+        When using |CTRL-]| and \":help!\" in a non-English help file Vim will\n+        try to find the tag in the current language before using this option.\n+        See |help-translated|.\n+      ]=],\n+      full_name = 'helplang',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('preferred help languages'),\n+      type = 'string',\n+      varname = 'p_hlg',\n+    },\n+    {\n+      abbreviation = 'hid',\n+      defaults = { if_true = true },\n+      desc = [=[\n+        When off a buffer is unloaded (including loss of undo information)\n+        when it is |abandon|ed.  When on a buffer becomes hidden when it is\n+        |abandon|ed.  A buffer displayed in another window does not become\n+        hidden, of course.\n+\n+        Commands that move through the buffer list sometimes hide a buffer\n+        although the 'hidden' option is off when these three are true:\n+        - the buffer is modified\n+        - 'autowrite' is off or writing is not possible\n+        - the '!' flag was used\n+        Also see |windows|.\n+\n+        To hide a specific buffer use the 'bufhidden' option.\n+        'hidden' is set for one command with \":hide {command}\" |:hide|.\n+      ]=],\n+      full_name = 'hidden',\n+      scope = { 'global' },\n+      short_desc = N_(\"don't unload buffer when it is |abandon|ed\"),\n+      type = 'bool',\n+      varname = 'p_hid',\n+    },\n+    {\n+      abbreviation = 'hl',\n+      cb = 'did_set_highlight',\n+      defaults = { if_true = macros('HIGHLIGHT_INIT') },\n+      deny_duplicates = true,\n+      full_name = 'highlight',\n+      list = 'onecomma',\n+      scope = { 'global' },\n+      short_desc = N_('sets highlighting mode for various occasions'),\n+      type = 'string',\n+      varname = 'p_hl',\n+    },\n+    {\n+      abbreviation = 'hi',\n+      defaults = { if_true = 10000 },\n+      desc = [=[\n+        A history of \":\" commands, and a history of previous search patterns\n+        is remembered.  This option decides how many entries may be stored in\n+        each of these histories (see |cmdline-editing|).\n+        The maximum value is 10000.\n+      ]=],\n+      full_name = 'history',\n+      scope = { 'global' },\n+      short_desc = N_('number of command-lines that are remembered'),\n+      type = 'number',\n+      varname = 'p_hi',\n+    },\n+    {\n+      abbreviation = 'hk',\n+      defaults = { if_true = false },\n+      full_name = 'hkmap',\n+      scope = { 'global' },\n+      short_desc = N_('No descripti",
            "html_url": "https://github.com/neovim/neovim/pull/24528#discussion_r1284422123",
            "id": 1284422123,
            "in_reply_to_id": 1284344262,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Mjrnr",
            "original_commit_id": "8735c361b3f2657c5ac340f75c31cdaf12cd6e59",
            "original_line": 7660,
            "original_position": 10719,
            "original_start_line": null,
            "path": "src/nvim/options.lua",
            "position": null,
            "pull_request_review_id": 1562870684,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24528",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284422123/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-04T13:31:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284422123",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24528#discussion_r1284427437"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24528"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284427437"
                }
            },
            "author_association": "MEMBER",
            "body": "Do we definitely need to ignore all these files? Generated code can have errors.",
            "commit_id": "fe5eadf4a3c0dd57c5a9936c4982187e3f9d082c",
            "created_at": "2023-08-04T13:29:02Z",
            "diff_hunk": "@@ -48,4 +48,5 @@ exclude_files = {\n   'runtime/lua/vim/_meta/api.lua',\n   'runtime/lua/vim/re.lua',\n   'src/nvim/eval.lua',\n+  'src/nvim/options.lua',",
            "html_url": "https://github.com/neovim/neovim/pull/24528#discussion_r1284427437",
            "id": 1284427437,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Mjs6t",
            "original_commit_id": "601b9217949a61ed9138a5ffa829146fd288e2e5",
            "original_line": 51,
            "original_position": 4,
            "original_start_line": null,
            "path": ".luacheckrc",
            "position": null,
            "pull_request_review_id": 1562877461,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24528",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284427437/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-04T13:29:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284427437",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24528#discussion_r1284428453"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24528"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284428453"
                }
            },
            "author_association": "MEMBER",
            "body": "Why is it failing? Is it feasible to fix the warnings?",
            "commit_id": "fe5eadf4a3c0dd57c5a9936c4982187e3f9d082c",
            "created_at": "2023-08-04T13:29:55Z",
            "diff_hunk": "@@ -2,3 +2,4 @@\n /src\n /test\n /runtime/lua/vim/re.lua\n+/runtime/lua/vim/_meta/options.lua",
            "html_url": "https://github.com/neovim/neovim/pull/24528#discussion_r1284428453",
            "id": 1284428453,
            "in_reply_to_id": 1283454434,
            "line": 5,
            "node_id": "PRRC_kwDOAPphoM5MjtKl",
            "original_commit_id": "b3d64435740ec124f75f06015f751356633a46f5",
            "original_line": 5,
            "original_position": 4,
            "original_start_line": null,
            "path": ".styluaignore",
            "position": 4,
            "pull_request_review_id": 1562879050,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24528",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284428453/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-04T13:29:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284428453",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24528#discussion_r1284429451"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24528"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284429451"
                }
            },
            "author_association": "MEMBER",
            "body": "Yep, luacheck provides way too many false-negatives in `[[...]]` strings.",
            "commit_id": "fe5eadf4a3c0dd57c5a9936c4982187e3f9d082c",
            "created_at": "2023-08-04T13:30:43Z",
            "diff_hunk": "@@ -48,4 +48,5 @@ exclude_files = {\n   'runtime/lua/vim/_meta/api.lua',\n   'runtime/lua/vim/re.lua',\n   'src/nvim/eval.lua',\n+  'src/nvim/options.lua',",
            "html_url": "https://github.com/neovim/neovim/pull/24528#discussion_r1284429451",
            "id": 1284429451,
            "in_reply_to_id": 1284427437,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MjtaL",
            "original_commit_id": "601b9217949a61ed9138a5ffa829146fd288e2e5",
            "original_line": 51,
            "original_position": 4,
            "original_start_line": null,
            "path": ".luacheckrc",
            "position": null,
            "pull_request_review_id": 1562880489,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24528",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284429451/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-04T13:30:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284429451",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24528#discussion_r1284432621"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24528"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284432621"
                }
            },
            "author_association": "MEMBER",
            "body": "Also this file isn't generated.",
            "commit_id": "fe5eadf4a3c0dd57c5a9936c4982187e3f9d082c",
            "created_at": "2023-08-04T13:33:35Z",
            "diff_hunk": "@@ -48,4 +48,5 @@ exclude_files = {\n   'runtime/lua/vim/_meta/api.lua',\n   'runtime/lua/vim/re.lua',\n   'src/nvim/eval.lua',\n+  'src/nvim/options.lua',",
            "html_url": "https://github.com/neovim/neovim/pull/24528#discussion_r1284432621",
            "id": 1284432621,
            "in_reply_to_id": 1284427437,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MjuLt",
            "original_commit_id": "601b9217949a61ed9138a5ffa829146fd288e2e5",
            "original_line": 51,
            "original_position": 4,
            "original_start_line": null,
            "path": ".luacheckrc",
            "position": null,
            "pull_request_review_id": 1562885325,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24528",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284432621/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-04T13:33:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284432621",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24528#discussion_r1284437052"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24528"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284437052"
                }
            },
            "author_association": "MEMBER",
            "body": "can't we ignore more granular warnings instead of all warnings?",
            "commit_id": "fe5eadf4a3c0dd57c5a9936c4982187e3f9d082c",
            "created_at": "2023-08-04T13:37:35Z",
            "diff_hunk": "@@ -48,4 +48,5 @@ exclude_files = {\n   'runtime/lua/vim/_meta/api.lua',\n   'runtime/lua/vim/re.lua',\n   'src/nvim/eval.lua',\n+  'src/nvim/options.lua',",
            "html_url": "https://github.com/neovim/neovim/pull/24528#discussion_r1284437052",
            "id": 1284437052,
            "in_reply_to_id": 1284427437,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MjvQ8",
            "original_commit_id": "601b9217949a61ed9138a5ffa829146fd288e2e5",
            "original_line": 51,
            "original_position": 4,
            "original_start_line": null,
            "path": ".luacheckrc",
            "position": null,
            "pull_request_review_id": 1562892798,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24528",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284437052/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-04T13:37:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284437052",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24528#discussion_r1284438942"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24528"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284438942"
                }
            },
            "author_association": "MEMBER",
            "body": "Maybe, but honestly I've never found luacheck that valuable.\r\n\r\nI'll have a look.",
            "commit_id": "fe5eadf4a3c0dd57c5a9936c4982187e3f9d082c",
            "created_at": "2023-08-04T13:39:19Z",
            "diff_hunk": "@@ -48,4 +48,5 @@ exclude_files = {\n   'runtime/lua/vim/_meta/api.lua',\n   'runtime/lua/vim/re.lua',\n   'src/nvim/eval.lua',\n+  'src/nvim/options.lua',",
            "html_url": "https://github.com/neovim/neovim/pull/24528#discussion_r1284438942",
            "id": 1284438942,
            "in_reply_to_id": 1284427437,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Mjvue",
            "original_commit_id": "601b9217949a61ed9138a5ffa829146fd288e2e5",
            "original_line": 51,
            "original_position": 4,
            "original_start_line": null,
            "path": ".luacheckrc",
            "position": null,
            "pull_request_review_id": 1562895695,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24528",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284438942/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-04T13:39:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284438942",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24528#discussion_r1284451900"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24528"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284451900"
                }
            },
            "author_association": "MEMBER",
            "body": "hmm. created https://github.com/neovim/neovim/issues/24563",
            "commit_id": "fe5eadf4a3c0dd57c5a9936c4982187e3f9d082c",
            "created_at": "2023-08-04T13:51:10Z",
            "diff_hunk": "@@ -48,4 +48,5 @@ exclude_files = {\n   'runtime/lua/vim/_meta/api.lua',\n   'runtime/lua/vim/re.lua',\n   'src/nvim/eval.lua',\n+  'src/nvim/options.lua',",
            "html_url": "https://github.com/neovim/neovim/pull/24528#discussion_r1284451900",
            "id": 1284451900,
            "in_reply_to_id": 1284427437,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Mjy48",
            "original_commit_id": "601b9217949a61ed9138a5ffa829146fd288e2e5",
            "original_line": 51,
            "original_position": 4,
            "original_start_line": null,
            "path": ".luacheckrc",
            "position": null,
            "pull_request_review_id": 1562917708,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24528",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284451900/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-04T13:51:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284451900",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24528#discussion_r1284474508"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24528"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284474508"
                }
            },
            "author_association": "MEMBER",
            "body": "done",
            "commit_id": "fe5eadf4a3c0dd57c5a9936c4982187e3f9d082c",
            "created_at": "2023-08-04T14:10:09Z",
            "diff_hunk": "@@ -48,4 +48,5 @@ exclude_files = {\n   'runtime/lua/vim/_meta/api.lua',\n   'runtime/lua/vim/re.lua',\n   'src/nvim/eval.lua',\n+  'src/nvim/options.lua',",
            "html_url": "https://github.com/neovim/neovim/pull/24528#discussion_r1284474508",
            "id": 1284474508,
            "in_reply_to_id": 1284427437,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Mj4aM",
            "original_commit_id": "601b9217949a61ed9138a5ffa829146fd288e2e5",
            "original_line": 51,
            "original_position": 4,
            "original_start_line": null,
            "path": ".luacheckrc",
            "position": null,
            "pull_request_review_id": 1562955092,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24528",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284474508/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-04T14:10:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1284474508",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "Nice! Is the plan here to bootstrap `src/nvim/options.lua` with the docs, as with `eval.lua`? Or alternatively, use `_meta/options.lua` to generate options.txt. \r\n",
            "created_at": "2023-08-01T23:25:21Z",
            "html_url": "https://github.com/neovim/neovim/pull/24528#issuecomment-1661235571",
            "id": 1661235571,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24528",
            "node_id": "IC_kwDOAPphoM5jBHFz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1661235571/reactions"
            },
            "updated_at": "2023-08-01T23:25:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1661235571",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Is there any plan to do the same to `vim.opt` and `vim.opt_local` ? :thinking: \r\n\r\nI think referencing https://github.com/folke/neodev.nvim/blob/main/lua/neodev/build/options.lua for generating it would also be nice ",
            "created_at": "2023-08-02T02:16:19Z",
            "html_url": "https://github.com/neovim/neovim/pull/24528#issuecomment-1661385636",
            "id": 1661385636,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24528",
            "node_id": "IC_kwDOAPphoM5jBruk",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1661385636/reactions"
            },
            "updated_at": "2023-08-02T02:16:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1661385636",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29790821?v=4",
                "events_url": "https://api.github.com/users/lucario387/events{/privacy}",
                "followers_url": "https://api.github.com/users/lucario387/followers",
                "following_url": "https://api.github.com/users/lucario387/following{/other_user}",
                "gists_url": "https://api.github.com/users/lucario387/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lucario387",
                "id": 29790821,
                "login": "lucario387",
                "node_id": "MDQ6VXNlcjI5NzkwODIx",
                "organizations_url": "https://api.github.com/users/lucario387/orgs",
                "received_events_url": "https://api.github.com/users/lucario387/received_events",
                "repos_url": "https://api.github.com/users/lucario387/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lucario387/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lucario387/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lucario387"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Nice! Is the plan here to bootstrap src/nvim/options.lua with the docs, as with eval.lua?\r\n\r\nAssuming we are ok to take ownership of options.txt. Since you're asking I'll take that as a yes.\r\n\r\n> Is there any plan to do the same to vim.opt and vim.opt_local ? 🤔\r\n\r\nYes.",
            "created_at": "2023-08-02T08:25:07Z",
            "html_url": "https://github.com/neovim/neovim/pull/24528#issuecomment-1661738286",
            "id": 1661738286,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24528",
            "node_id": "IC_kwDOAPphoM5jDB0u",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1661738286/reactions"
            },
            "updated_at": "2023-08-02T08:25:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1661738286",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "In the generated file, `vim.o.backupdir` has the value of \r\n`vim.o.backupdir = \".,/Users/lewrus01/.local/state/nvim/backup//\"`\r\n\r\nI think `$XDG_*` needs to be gsubbed.",
            "created_at": "2023-08-02T11:12:39Z",
            "html_url": "https://github.com/neovim/neovim/pull/24528#issuecomment-1662017491",
            "id": 1662017491,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24528",
            "node_id": "IC_kwDOAPphoM5jEF_T",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1662017491/reactions"
            },
            "updated_at": "2023-08-02T11:13:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1662017491",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29790821?v=4",
                "events_url": "https://api.github.com/users/lucario387/events{/privacy}",
                "followers_url": "https://api.github.com/users/lucario387/followers",
                "following_url": "https://api.github.com/users/lucario387/following{/other_user}",
                "gists_url": "https://api.github.com/users/lucario387/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lucario387",
                "id": 29790821,
                "login": "lucario387",
                "node_id": "MDQ6VXNlcjI5NzkwODIx",
                "organizations_url": "https://api.github.com/users/lucario387/orgs",
                "received_events_url": "https://api.github.com/users/lucario387/received_events",
                "repos_url": "https://api.github.com/users/lucario387/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lucario387/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lucario387/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lucario387"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Reworking this PR to take ownership of the options documentation, similar for what we've done for `builtin.txt`.",
            "created_at": "2023-08-02T11:15:43Z",
            "html_url": "https://github.com/neovim/neovim/pull/24528#issuecomment-1662021323",
            "id": 1662021323,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24528",
            "node_id": "IC_kwDOAPphoM5jEG7L",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1662021323/reactions"
            },
            "updated_at": "2023-08-02T11:15:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1662021323",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > Is there any plan to do the same to vim.opt and vim.opt_local ? 🤔\r\n> \r\n> Yes.\r\n\r\nNot in favor of that. We shouldn't add more \"armor\" around vim.opt, we need to deprecate it and enhance vim.o to serve any missing important use-case. https://github.com/neovim/neovim/issues/20107",
            "created_at": "2023-08-02T13:48:49Z",
            "html_url": "https://github.com/neovim/neovim/pull/24528#issuecomment-1662248706",
            "id": 1662248706,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24528",
            "node_id": "IC_kwDOAPphoM5jE-cC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1662248706/reactions"
            },
            "updated_at": "2023-08-02T13:48:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1662248706",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "`vim.o.packpath` and `vim.o.runtimepath` currently still have paths that should be gsubbed.\r\n\r\n`vim.o.packpath = \"/Users/lewis/projects/dotfiles/config/nvim,/etc/xdg/nvim,/Users/lewis/.data/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/share/nvim/runtime,/usr/local/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/lewis/.data/nvim/site/after,/etc/xdg/nvim/after,/Users/lewis/projects/dotfiles/config/nvim/after\"`\r\n\r\nAlmost similar thing for `rtp` too",
            "created_at": "2023-08-03T14:37:09Z",
            "html_url": "https://github.com/neovim/neovim/pull/24528#issuecomment-1664110829",
            "id": 1664110829,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24528",
            "node_id": "IC_kwDOAPphoM5jMFDt",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1664110829/reactions"
            },
            "updated_at": "2023-08-03T14:37:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1664110829",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29790821?v=4",
                "events_url": "https://api.github.com/users/lucario387/events{/privacy}",
                "followers_url": "https://api.github.com/users/lucario387/followers",
                "following_url": "https://api.github.com/users/lucario387/following{/other_user}",
                "gists_url": "https://api.github.com/users/lucario387/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lucario387",
                "id": 29790821,
                "login": "lucario387",
                "node_id": "MDQ6VXNlcjI5NzkwODIx",
                "organizations_url": "https://api.github.com/users/lucario387/orgs",
                "received_events_url": "https://api.github.com/users/lucario387/received_events",
                "repos_url": "https://api.github.com/users/lucario387/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lucario387/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lucario387/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lucario387"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "language annotations? 🥺 ",
            "created_at": "2023-08-03T21:45:14Z",
            "html_url": "https://github.com/neovim/neovim/pull/24528#issuecomment-1664684283",
            "id": 1664684283,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24528",
            "node_id": "IC_kwDOAPphoM5jORD7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1664684283/reactions"
            },
            "updated_at": "2023-08-03T21:45:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1664684283",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "As with the eval.lua, I'd like to avoid that in this PR just to make the diffs reviewable. The larger the diff, the higher the risk of mistakes not getting caught.",
            "created_at": "2023-08-03T21:53:14Z",
            "html_url": "https://github.com/neovim/neovim/pull/24528#issuecomment-1664691072",
            "id": 1664691072,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24528",
            "node_id": "IC_kwDOAPphoM5jOSuA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1664691072/reactions"
            },
            "updated_at": "2023-08-03T21:53:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1664691072",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Unless anyone wants me to hold off, I'll merge this sometime tomorrow.",
            "created_at": "2023-08-04T11:28:28Z",
            "html_url": "https://github.com/neovim/neovim/pull/24528#issuecomment-1665458511",
            "id": 1665458511,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24528",
            "node_id": "IC_kwDOAPphoM5jROFP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1665458511/reactions"
            },
            "updated_at": "2023-08-04T11:28:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1665458511",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Needs rebase and regeneration of docs",
            "created_at": "2023-08-04T13:51:02Z",
            "html_url": "https://github.com/neovim/neovim/pull/24528#issuecomment-1665640583",
            "id": 1665640583,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24528",
            "node_id": "IC_kwDOAPphoM5jR6iH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1665640583/reactions"
            },
            "updated_at": "2023-08-04T13:52:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1665640583",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "author_association": "NONE",
            "body": "Will https://github.com/ii14/emmylua-nvim still be necessary with this PR / once nvim 0.10.0 gets released?",
            "created_at": "2023-09-20T23:25:49Z",
            "html_url": "https://github.com/neovim/neovim/pull/24528#issuecomment-1728549704",
            "id": 1728549704,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24528",
            "node_id": "IC_kwDOAPphoM5nB5NI",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1728549704/reactions"
            },
            "updated_at": "2023-09-20T23:25:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1728549704",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/9730330?v=4",
                "events_url": "https://api.github.com/users/bew/events{/privacy}",
                "followers_url": "https://api.github.com/users/bew/followers",
                "following_url": "https://api.github.com/users/bew/following{/other_user}",
                "gists_url": "https://api.github.com/users/bew/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bew",
                "id": 9730330,
                "login": "bew",
                "node_id": "MDQ6VXNlcjk3MzAzMzA=",
                "organizations_url": "https://api.github.com/users/bew/orgs",
                "received_events_url": "https://api.github.com/users/bew/received_events",
                "repos_url": "https://api.github.com/users/bew/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bew/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bew/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bew"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/24528/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/24528/commits",
    "created_at": "2023-08-01T16:30:01Z",
    "diff_url": "https://github.com/neovim/neovim/pull/24528.diff",
    "draft": false,
    "head": {
        "label": "lewis6991:feat/opttypes",
        "ref": "feat/opttypes",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/lewis6991/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/lewis6991/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/lewis6991/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/lewis6991/neovim/branches{/branch}",
            "clone_url": "https://github.com/lewis6991/neovim.git",
            "collaborators_url": "https://api.github.com/repos/lewis6991/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/lewis6991/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/lewis6991/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/lewis6991/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/lewis6991/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/lewis6991/neovim/contributors",
            "created_at": "2020-11-24T21:47:43Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/lewis6991/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/lewis6991/neovim/downloads",
            "events_url": "https://api.github.com/repos/lewis6991/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/lewis6991/neovim/forks",
            "full_name": "lewis6991/neovim",
            "git_commits_url": "https://api.github.com/repos/lewis6991/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/lewis6991/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/lewis6991/neovim/git/tags{/sha}",
            "git_url": "git://github.com/lewis6991/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/lewis6991/neovim/hooks",
            "html_url": "https://github.com/lewis6991/neovim",
            "id": 315760150,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/lewis6991/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/lewis6991/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/lewis6991/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/lewis6991/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/lewis6991/neovim/labels{/name}",
            "language": "Vim script",
            "languages_url": "https://api.github.com/repos/lewis6991/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/lewis6991/neovim/merges",
            "milestones_url": "https://api.github.com/repos/lewis6991/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkzMTU3NjAxNTA=",
            "notifications_url": "https://api.github.com/repos/lewis6991/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/lewis6991/neovim/pulls{/number}",
            "pushed_at": "2023-09-20T12:42:46Z",
            "releases_url": "https://api.github.com/repos/lewis6991/neovim/releases{/id}",
            "size": 241579,
            "ssh_url": "git@github.com:lewis6991/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/lewis6991/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/lewis6991/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/lewis6991/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/lewis6991/neovim/subscription",
            "svn_url": "https://github.com/lewis6991/neovim",
            "tags_url": "https://api.github.com/repos/lewis6991/neovim/tags",
            "teams_url": "https://api.github.com/repos/lewis6991/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/lewis6991/neovim/git/trees{/sha}",
            "updated_at": "2023-01-31T18:36:52Z",
            "url": "https://api.github.com/repos/lewis6991/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "fe5eadf4a3c0dd57c5a9936c4982187e3f9d082c",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
            "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
            "followers_url": "https://api.github.com/users/lewis6991/followers",
            "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
            "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/lewis6991",
            "id": 7904185,
            "login": "lewis6991",
            "node_id": "MDQ6VXNlcjc5MDQxODU=",
            "organizations_url": "https://api.github.com/users/lewis6991/orgs",
            "received_events_url": "https://api.github.com/users/lewis6991/received_events",
            "repos_url": "https://api.github.com/users/lewis6991/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/lewis6991"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/24528",
    "id": 1458431725,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24528",
    "labels": [
        {
            "color": "c5def5",
            "default": true,
            "description": "",
            "id": 84744038,
            "name": "documentation",
            "node_id": "MDU6TGFiZWw4NDc0NDAzOA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/documentation"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "",
            "id": 4242493821,
            "name": "options",
            "node_id": "LA_kwDOAPphoM7831F9",
            "url": "https://api.github.com/repos/neovim/neovim/labels/options"
        }
    ],
    "locked": false,
    "merge_commit_sha": "6fa17da39b270bf230764859a9537124b18d3ed5",
    "merged_at": "2023-08-04T20:26:53Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5W7ebt",
    "number": 24528,
    "patch_url": "https://github.com/neovim/neovim/pull/24528.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/24528/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/fe5eadf4a3c0dd57c5a9936c4982187e3f9d082c",
    "title": "docs(options): take ownership of options.txt",
    "updated_at": "2023-09-20T23:25:49Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/24528",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
        "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
        "followers_url": "https://api.github.com/users/lewis6991/followers",
        "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
        "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/lewis6991",
        "id": 7904185,
        "login": "lewis6991",
        "node_id": "MDQ6VXNlcjc5MDQxODU=",
        "organizations_url": "https://api.github.com/users/lewis6991/orgs",
        "received_events_url": "https://api.github.com/users/lewis6991/received_events",
        "repos_url": "https://api.github.com/users/lewis6991/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/lewis6991"
    }
}