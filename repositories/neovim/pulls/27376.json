{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/27376/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/27376/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/27376"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/27376"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/27376/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/27376"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/ce0ca9cc5051cdc7746bcb5c925fec81cba4371c"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5201,
            "forks_count": 5201,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1728,
            "open_issues_count": 1728,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-02-12T23:38:13Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 252813,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 73720,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-02-13T01:34:21Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 73720,
            "watchers_count": 73720,
            "web_commit_signoff_required": false
        },
        "sha": "cca8a78ea2ac0803d9e97ee761db9d3e31a77aeb",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "Problem:\n  The LSP client code is implemented as a complicated closure-class\n  (class defined in a single function).\n\nSolution:\n  Move LSP client code to a more conventional Lua class and move to a\n  separate file.\n",
    "closed_at": "2024-02-07T19:48:37Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27376#discussion_r1481967804"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27376"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1481967804"
                }
            },
            "author_association": "MEMBER",
            "body": "Nice, bwc concerns were the main reason I had never attempted this. Nice solution",
            "commit_id": "ce0ca9cc5051cdc7746bcb5c925fec81cba4371c",
            "created_at": "2024-02-07T19:19:12Z",
            "diff_hunk": "@@ -0,0 +1,663 @@\n+local uv = vim.uv\n+local api = vim.api\n+local lsp = vim.lsp\n+local log = lsp.log\n+local ms = lsp.protocol.Methods\n+local changetracking = lsp._changetracking\n+\n+--- @class lsp.Client.Progress: vim.Ringbuf<{token: integer|string, value: any}>\n+--- @field pending table<lsp.ProgressToken,lsp.LSPAny>\n+\n+--- @class lsp.Client\n+---\n+--- The id allocated to the client.\n+--- @field id integer\n+---\n+--- If a name is specified on creation, that will be used. Otherwise it is just\n+--- the client id. This is used for logs and messages.\n+--- @field name string\n+---\n+--- RPC client object, for low level interaction with the client.\n+--- See |vim.lsp.rpc.start()|.\n+--- @field rpc vim.lsp.rpc.PublicClient\n+---\n+--- The encoding used for communicating with the server. You can modify this in\n+--- the `config`'s `on_init` method before text is sent to the server.\n+--- @field offset_encoding string\n+---\n+--- The handlers used by the client as described in |lsp-handler|.\n+--- @field handlers table<string,lsp.Handler>\n+---\n+--- The current pending requests in flight to the server. Entries are key-value\n+--- pairs with the key being the request ID while the value is a table with\n+--- `type`, `bufnr`, and `method` key-value pairs. `type` is either \"pending\"\n+--- for an active request, or \"cancel\" for a cancel request. It will be\n+--- \"complete\" ephemerally while executing |LspRequest| autocmds when replies\n+--- are received from the server.\n+--- @field requests table<integer,{ type: string, bufnr: integer, method: string}>\n+---\n+--- copy of the table that was passed by the user\n+--- to |vim.lsp.start_client()|.\n+--- @field config lsp.ClientConfig\n+---\n+--- Response from the server sent on\n+--- initialize` describing the server's capabilities.\n+--- @field server_capabilities lsp.ServerCapabilities\n+---\n+--- A ring buffer (|vim.ringbuf()|) containing progress messages\n+--- sent by the server.\n+--- @field progress lsp.Client.Progress\n+---\n+--- @field initialized true?\n+--- @field workspace_folders lsp.WorkspaceFolder[]?\n+--- @field attached_buffers table<integer,true>\n+--- @field commands table<string,function>\n+--- @field private _log_prefix string\n+--- Track this so that we can escalate automatically if we've already tried a\n+--- graceful shutdown\n+--- @field private _graceful_shutdown_failed true?\n+---\n+--- @field dynamic_capabilities lsp.DynamicCapabilities\n+---\n+--- Sends a request to the server.\n+--- This is a thin wrapper around {client.rpc.request} with some additional\n+--- checking.\n+--- If {handler} is not specified,  If one is not found there, then an error\n+--- will occur. Returns: {status}, {[client_id]}. {status} is a boolean\n+--- indicating if the notification was successful. If it is `false`, then it\n+--- will always be `false` (the client has shutdown).\n+--- If {status} is `true`, the function returns {request_id} as the second\n+--- result. You can use this with `client.cancel_request(request_id)` to cancel\n+--- the request.\n+--- @field request fun(method: string, params: table?, handler: lsp.Handler?, bufnr: integer): boolean, integer?\n+---\n+--- Sends a request to the server and synchronously waits for the response.\n+--- This is a wrapper around {client.request}\n+--- Returns: { err=err, result=result }, a dictionary, where `err` and `result`\n+--- come from the |lsp-handler|. On timeout, cancel or error, returns `(nil,\n+--- err)` where `err` is a string describing the failure reason. If the request\n+--- was unsuccessful returns `nil`.\n+--- @field request_sync fun(method: string, params: table?, timeout_ms: integer?, bufnr: integer): {err: lsp.ResponseError|nil, result:any}|nil, string|nil err # a dictionary, where\n+---\n+--- Sends a notification to an LSP server.\n+--- Returns: a boolean to indicate if the notification was successful. If\n+--- it is false, then it will always be false (the client has shutdown).\n+--- @field notify fun(method: string, params: table?): boolean\n+---\n+--- Cancels a request with a given request id.\n+--- Returns: same as `notify()`.\n+--- @field cancel_request fun(id: integer): boolean\n+---\n+--- Stops a client, optionally with force.\n+--- By default, it will just ask the server to shutdown without force.\n+--- If you request to stop a client which has previously been requested to\n+--- shutdown, it will automatically escalate and force shutdown.\n+--- @field stop fun(force?: boolean)\n+---\n+--- Runs the on_attach function from the client's config if it was defined.\n+--- Useful for buffer-local setup.\n+--- @field on_attach fun(bufnr: integer)\n+---\n+--- Checks if a client supports a given method.\n+--- Always returns true for unknown off-spec methods.\n+--- [opts] is a optional `{bufnr?: integer}` table.\n+--- Some language server capabilities can be file specific.\n+--- @field supports_method fun(method: string, opts?: {bufnr: integer?}): boolean\n+---\n+--- Checks whether a client is stopped.\n+--- Returns: true if the client is fully stopped.\n+--- @field is_stopped fun(): boolean\n+local Client = {}\n+Client.__index = Client\n+\n+--- @param cls table\n+--- @param meth any\n+--- @return function\n+local function method_wrapper(cls, meth)\n+  return function(...)\n+    return meth(cls, ...)\n+  end\n+end\n+\n+--- @package\n+--- @param id integer\n+--- @param rpc vim.lsp.rpc.PublicClient\n+--- @param handlers table<string,lsp.Handler>\n+--- @param offset_encoding string\n+--- @param config lsp.ClientConfig\n+--- @return lsp.Client\n+function Client.new(id, rpc, handlers, offset_encoding, config)\n+  local name = config.name\n+\n+  --- @class lsp.Client\n+  local self = {\n+    id = id,\n+    config = config,\n+    handlers = handlers,\n+    rpc = rpc,\n+    offset_encoding = offset_encoding,\n+    name = name,\n+    _log_prefix = string.format('LSP[%s]', name),\n+    requests = {},\n+    commands = config.commands or {},\n+    attached_buffers = {},\n+    server_capabilities = {},\n+    dynamic_capabilities = vim.lsp._dynamic.new(id),\n+\n+    --- Contains $/progress report messages.\n+    --- They have the format {token: integer|string, value: any}\n+    --- For \"work done progress\", value will be one of:\n+    --- - lsp.WorkDoneProgressBegin,\n+    --- - lsp.WorkDoneProgressReport (extended with title from Begin)\n+    --- - lsp.WorkDoneProgressEnd    (extended with title from Begin)\n+    progress = vim.ringbuf(50) --[[@as lsp.Client.Progress]],\n+\n+    --- @deprecated use client.progress instead\n+    messages = { name = name, messages = {}, progress = {}, status = {} },\n+  }\n+\n+  self.request = method_wrapper(self, Client._request)",
            "html_url": "https://github.com/neovim/neovim/pull/27376#discussion_r1481967804",
            "id": 1481967804,
            "line": 159,
            "node_id": "PRRC_kwDOAPphoM5YVQi8",
            "original_commit_id": "ce0ca9cc5051cdc7746bcb5c925fec81cba4371c",
            "original_line": 159,
            "original_position": 159,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/client.lua",
            "position": 159,
            "pull_request_review_id": 1868592536,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27376",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1481967804/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-07T19:19:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1481967804",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27376#discussion_r1482150068"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27376"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1482150068"
                }
            },
            "author_association": "MEMBER",
            "body": "This looks like a great refactoring. However, I think the failing tests might be relevant to this change:\r\n```\r\nError executing lua: ...er/work/neovim/neovim/runtime/lua/vim/lsp/client.lua:140: bad argument #2 to 'format' (string expected, got nil)\r\n```\r\n\r\nThe code removed from `lsp.lua` and added here (moved) are slightly different, so it's not very easy to have a clear diff through web UI.",
            "commit_id": "ce0ca9cc5051cdc7746bcb5c925fec81cba4371c",
            "created_at": "2024-02-07T22:01:58Z",
            "diff_hunk": "@@ -0,0 +1,663 @@\n+local uv = vim.uv\n+local api = vim.api\n+local lsp = vim.lsp\n+local log = lsp.log\n+local ms = lsp.protocol.Methods\n+local changetracking = lsp._changetracking\n+\n+--- @class lsp.Client.Progress: vim.Ringbuf<{token: integer|string, value: any}>\n+--- @field pending table<lsp.ProgressToken,lsp.LSPAny>\n+\n+--- @class lsp.Client\n+---\n+--- The id allocated to the client.\n+--- @field id integer\n+---\n+--- If a name is specified on creation, that will be used. Otherwise it is just\n+--- the client id. This is used for logs and messages.\n+--- @field name string\n+---\n+--- RPC client object, for low level interaction with the client.\n+--- See |vim.lsp.rpc.start()|.\n+--- @field rpc vim.lsp.rpc.PublicClient\n+---\n+--- The encoding used for communicating with the server. You can modify this in\n+--- the `config`'s `on_init` method before text is sent to the server.\n+--- @field offset_encoding string\n+---\n+--- The handlers used by the client as described in |lsp-handler|.\n+--- @field handlers table<string,lsp.Handler>\n+---\n+--- The current pending requests in flight to the server. Entries are key-value\n+--- pairs with the key being the request ID while the value is a table with\n+--- `type`, `bufnr`, and `method` key-value pairs. `type` is either \"pending\"\n+--- for an active request, or \"cancel\" for a cancel request. It will be\n+--- \"complete\" ephemerally while executing |LspRequest| autocmds when replies\n+--- are received from the server.\n+--- @field requests table<integer,{ type: string, bufnr: integer, method: string}>\n+---\n+--- copy of the table that was passed by the user\n+--- to |vim.lsp.start_client()|.\n+--- @field config lsp.ClientConfig\n+---\n+--- Response from the server sent on\n+--- initialize` describing the server's capabilities.\n+--- @field server_capabilities lsp.ServerCapabilities\n+---\n+--- A ring buffer (|vim.ringbuf()|) containing progress messages\n+--- sent by the server.\n+--- @field progress lsp.Client.Progress\n+---\n+--- @field initialized true?\n+--- @field workspace_folders lsp.WorkspaceFolder[]?\n+--- @field attached_buffers table<integer,true>\n+--- @field commands table<string,function>\n+--- @field private _log_prefix string\n+--- Track this so that we can escalate automatically if we've already tried a\n+--- graceful shutdown\n+--- @field private _graceful_shutdown_failed true?\n+---\n+--- @field dynamic_capabilities lsp.DynamicCapabilities\n+---\n+--- Sends a request to the server.\n+--- This is a thin wrapper around {client.rpc.request} with some additional\n+--- checking.\n+--- If {handler} is not specified,  If one is not found there, then an error\n+--- will occur. Returns: {status}, {[client_id]}. {status} is a boolean\n+--- indicating if the notification was successful. If it is `false`, then it\n+--- will always be `false` (the client has shutdown).\n+--- If {status} is `true`, the function returns {request_id} as the second\n+--- result. You can use this with `client.cancel_request(request_id)` to cancel\n+--- the request.\n+--- @field request fun(method: string, params: table?, handler: lsp.Handler?, bufnr: integer): boolean, integer?\n+---\n+--- Sends a request to the server and synchronously waits for the response.\n+--- This is a wrapper around {client.request}\n+--- Returns: { err=err, result=result }, a dictionary, where `err` and `result`\n+--- come from the |lsp-handler|. On timeout, cancel or error, returns `(nil,\n+--- err)` where `err` is a string describing the failure reason. If the request\n+--- was unsuccessful returns `nil`.\n+--- @field request_sync fun(method: string, params: table?, timeout_ms: integer?, bufnr: integer): {err: lsp.ResponseError|nil, result:any}|nil, string|nil err # a dictionary, where\n+---\n+--- Sends a notification to an LSP server.\n+--- Returns: a boolean to indicate if the notification was successful. If\n+--- it is false, then it will always be false (the client has shutdown).\n+--- @field notify fun(method: string, params: table?): boolean\n+---\n+--- Cancels a request with a given request id.\n+--- Returns: same as `notify()`.\n+--- @field cancel_request fun(id: integer): boolean\n+---\n+--- Stops a client, optionally with force.\n+--- By default, it will just ask the server to shutdown without force.\n+--- If you request to stop a client which has previously been requested to\n+--- shutdown, it will automatically escalate and force shutdown.\n+--- @field stop fun(force?: boolean)\n+---\n+--- Runs the on_attach function from the client's config if it was defined.\n+--- Useful for buffer-local setup.\n+--- @field on_attach fun(bufnr: integer)\n+---\n+--- Checks if a client supports a given method.\n+--- Always returns true for unknown off-spec methods.\n+--- [opts] is a optional `{bufnr?: integer}` table.\n+--- Some language server capabilities can be file specific.\n+--- @field supports_method fun(method: string, opts?: {bufnr: integer?}): boolean\n+---\n+--- Checks whether a client is stopped.\n+--- Returns: true if the client is fully stopped.\n+--- @field is_stopped fun(): boolean\n+local Client = {}\n+Client.__index = Client\n+\n+--- @param cls table\n+--- @param meth any\n+--- @return function\n+local function method_wrapper(cls, meth)\n+  return function(...)\n+    return meth(cls, ...)\n+  end\n+end\n+\n+--- @package\n+--- @param id integer\n+--- @param rpc vim.lsp.rpc.PublicClient\n+--- @param handlers table<string,lsp.Handler>\n+--- @param offset_encoding string\n+--- @param config lsp.ClientConfig\n+--- @return lsp.Client\n+function Client.new(id, rpc, handlers, offset_encoding, config)\n+  local name = config.name\n+\n+  --- @class lsp.Client\n+  local self = {\n+    id = id,\n+    config = config,\n+    handlers = handlers,\n+    rpc = rpc,\n+    offset_encoding = offset_encoding,\n+    name = name,\n+    _log_prefix = string.format('LSP[%s]', name),",
            "html_url": "https://github.com/neovim/neovim/pull/27376#discussion_r1482150068",
            "id": 1482150068,
            "line": 140,
            "node_id": "PRRC_kwDOAPphoM5YV9C0",
            "original_commit_id": "ce0ca9cc5051cdc7746bcb5c925fec81cba4371c",
            "original_line": 140,
            "original_position": 140,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/client.lua",
            "position": 140,
            "pull_request_review_id": 1868883946,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27376",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1482150068/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-07T22:02:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1482150068",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27376#discussion_r1482152606"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27376"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1482152606"
                }
            },
            "author_association": "MEMBER",
            "body": "Ah. I assumed because the other functionaltests passed that the failure was unrelated.\n\nLooks like something unusual is happening with puc-lua. Can fix in a follow up.",
            "commit_id": "ce0ca9cc5051cdc7746bcb5c925fec81cba4371c",
            "created_at": "2024-02-07T22:05:03Z",
            "diff_hunk": "@@ -0,0 +1,663 @@\n+local uv = vim.uv\n+local api = vim.api\n+local lsp = vim.lsp\n+local log = lsp.log\n+local ms = lsp.protocol.Methods\n+local changetracking = lsp._changetracking\n+\n+--- @class lsp.Client.Progress: vim.Ringbuf<{token: integer|string, value: any}>\n+--- @field pending table<lsp.ProgressToken,lsp.LSPAny>\n+\n+--- @class lsp.Client\n+---\n+--- The id allocated to the client.\n+--- @field id integer\n+---\n+--- If a name is specified on creation, that will be used. Otherwise it is just\n+--- the client id. This is used for logs and messages.\n+--- @field name string\n+---\n+--- RPC client object, for low level interaction with the client.\n+--- See |vim.lsp.rpc.start()|.\n+--- @field rpc vim.lsp.rpc.PublicClient\n+---\n+--- The encoding used for communicating with the server. You can modify this in\n+--- the `config`'s `on_init` method before text is sent to the server.\n+--- @field offset_encoding string\n+---\n+--- The handlers used by the client as described in |lsp-handler|.\n+--- @field handlers table<string,lsp.Handler>\n+---\n+--- The current pending requests in flight to the server. Entries are key-value\n+--- pairs with the key being the request ID while the value is a table with\n+--- `type`, `bufnr`, and `method` key-value pairs. `type` is either \"pending\"\n+--- for an active request, or \"cancel\" for a cancel request. It will be\n+--- \"complete\" ephemerally while executing |LspRequest| autocmds when replies\n+--- are received from the server.\n+--- @field requests table<integer,{ type: string, bufnr: integer, method: string}>\n+---\n+--- copy of the table that was passed by the user\n+--- to |vim.lsp.start_client()|.\n+--- @field config lsp.ClientConfig\n+---\n+--- Response from the server sent on\n+--- initialize` describing the server's capabilities.\n+--- @field server_capabilities lsp.ServerCapabilities\n+---\n+--- A ring buffer (|vim.ringbuf()|) containing progress messages\n+--- sent by the server.\n+--- @field progress lsp.Client.Progress\n+---\n+--- @field initialized true?\n+--- @field workspace_folders lsp.WorkspaceFolder[]?\n+--- @field attached_buffers table<integer,true>\n+--- @field commands table<string,function>\n+--- @field private _log_prefix string\n+--- Track this so that we can escalate automatically if we've already tried a\n+--- graceful shutdown\n+--- @field private _graceful_shutdown_failed true?\n+---\n+--- @field dynamic_capabilities lsp.DynamicCapabilities\n+---\n+--- Sends a request to the server.\n+--- This is a thin wrapper around {client.rpc.request} with some additional\n+--- checking.\n+--- If {handler} is not specified,  If one is not found there, then an error\n+--- will occur. Returns: {status}, {[client_id]}. {status} is a boolean\n+--- indicating if the notification was successful. If it is `false`, then it\n+--- will always be `false` (the client has shutdown).\n+--- If {status} is `true`, the function returns {request_id} as the second\n+--- result. You can use this with `client.cancel_request(request_id)` to cancel\n+--- the request.\n+--- @field request fun(method: string, params: table?, handler: lsp.Handler?, bufnr: integer): boolean, integer?\n+---\n+--- Sends a request to the server and synchronously waits for the response.\n+--- This is a wrapper around {client.request}\n+--- Returns: { err=err, result=result }, a dictionary, where `err` and `result`\n+--- come from the |lsp-handler|. On timeout, cancel or error, returns `(nil,\n+--- err)` where `err` is a string describing the failure reason. If the request\n+--- was unsuccessful returns `nil`.\n+--- @field request_sync fun(method: string, params: table?, timeout_ms: integer?, bufnr: integer): {err: lsp.ResponseError|nil, result:any}|nil, string|nil err # a dictionary, where\n+---\n+--- Sends a notification to an LSP server.\n+--- Returns: a boolean to indicate if the notification was successful. If\n+--- it is false, then it will always be false (the client has shutdown).\n+--- @field notify fun(method: string, params: table?): boolean\n+---\n+--- Cancels a request with a given request id.\n+--- Returns: same as `notify()`.\n+--- @field cancel_request fun(id: integer): boolean\n+---\n+--- Stops a client, optionally with force.\n+--- By default, it will just ask the server to shutdown without force.\n+--- If you request to stop a client which has previously been requested to\n+--- shutdown, it will automatically escalate and force shutdown.\n+--- @field stop fun(force?: boolean)\n+---\n+--- Runs the on_attach function from the client's config if it was defined.\n+--- Useful for buffer-local setup.\n+--- @field on_attach fun(bufnr: integer)\n+---\n+--- Checks if a client supports a given method.\n+--- Always returns true for unknown off-spec methods.\n+--- [opts] is a optional `{bufnr?: integer}` table.\n+--- Some language server capabilities can be file specific.\n+--- @field supports_method fun(method: string, opts?: {bufnr: integer?}): boolean\n+---\n+--- Checks whether a client is stopped.\n+--- Returns: true if the client is fully stopped.\n+--- @field is_stopped fun(): boolean\n+local Client = {}\n+Client.__index = Client\n+\n+--- @param cls table\n+--- @param meth any\n+--- @return function\n+local function method_wrapper(cls, meth)\n+  return function(...)\n+    return meth(cls, ...)\n+  end\n+end\n+\n+--- @package\n+--- @param id integer\n+--- @param rpc vim.lsp.rpc.PublicClient\n+--- @param handlers table<string,lsp.Handler>\n+--- @param offset_encoding string\n+--- @param config lsp.ClientConfig\n+--- @return lsp.Client\n+function Client.new(id, rpc, handlers, offset_encoding, config)\n+  local name = config.name\n+\n+  --- @class lsp.Client\n+  local self = {\n+    id = id,\n+    config = config,\n+    handlers = handlers,\n+    rpc = rpc,\n+    offset_encoding = offset_encoding,\n+    name = name,\n+    _log_prefix = string.format('LSP[%s]', name),",
            "html_url": "https://github.com/neovim/neovim/pull/27376#discussion_r1482152606",
            "id": 1482152606,
            "in_reply_to_id": 1482150068,
            "line": 140,
            "node_id": "PRRC_kwDOAPphoM5YV9qe",
            "original_commit_id": "ce0ca9cc5051cdc7746bcb5c925fec81cba4371c",
            "original_line": 140,
            "original_position": 140,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/client.lua",
            "position": 140,
            "pull_request_review_id": 1868888065,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27376",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1482152606/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-07T22:05:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1482152606",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27376#discussion_r1482247471"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27376"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1482247471"
                }
            },
            "author_association": "MEMBER",
            "body": "probably fixed in [5785c32](https://github.com/neovim/neovim/commit/5785c32f1115833cf69ec9062c5bc8907360aab0)",
            "commit_id": "ce0ca9cc5051cdc7746bcb5c925fec81cba4371c",
            "created_at": "2024-02-07T23:51:50Z",
            "diff_hunk": "@@ -0,0 +1,663 @@\n+local uv = vim.uv\n+local api = vim.api\n+local lsp = vim.lsp\n+local log = lsp.log\n+local ms = lsp.protocol.Methods\n+local changetracking = lsp._changetracking\n+\n+--- @class lsp.Client.Progress: vim.Ringbuf<{token: integer|string, value: any}>\n+--- @field pending table<lsp.ProgressToken,lsp.LSPAny>\n+\n+--- @class lsp.Client\n+---\n+--- The id allocated to the client.\n+--- @field id integer\n+---\n+--- If a name is specified on creation, that will be used. Otherwise it is just\n+--- the client id. This is used for logs and messages.\n+--- @field name string\n+---\n+--- RPC client object, for low level interaction with the client.\n+--- See |vim.lsp.rpc.start()|.\n+--- @field rpc vim.lsp.rpc.PublicClient\n+---\n+--- The encoding used for communicating with the server. You can modify this in\n+--- the `config`'s `on_init` method before text is sent to the server.\n+--- @field offset_encoding string\n+---\n+--- The handlers used by the client as described in |lsp-handler|.\n+--- @field handlers table<string,lsp.Handler>\n+---\n+--- The current pending requests in flight to the server. Entries are key-value\n+--- pairs with the key being the request ID while the value is a table with\n+--- `type`, `bufnr`, and `method` key-value pairs. `type` is either \"pending\"\n+--- for an active request, or \"cancel\" for a cancel request. It will be\n+--- \"complete\" ephemerally while executing |LspRequest| autocmds when replies\n+--- are received from the server.\n+--- @field requests table<integer,{ type: string, bufnr: integer, method: string}>\n+---\n+--- copy of the table that was passed by the user\n+--- to |vim.lsp.start_client()|.\n+--- @field config lsp.ClientConfig\n+---\n+--- Response from the server sent on\n+--- initialize` describing the server's capabilities.\n+--- @field server_capabilities lsp.ServerCapabilities\n+---\n+--- A ring buffer (|vim.ringbuf()|) containing progress messages\n+--- sent by the server.\n+--- @field progress lsp.Client.Progress\n+---\n+--- @field initialized true?\n+--- @field workspace_folders lsp.WorkspaceFolder[]?\n+--- @field attached_buffers table<integer,true>\n+--- @field commands table<string,function>\n+--- @field private _log_prefix string\n+--- Track this so that we can escalate automatically if we've already tried a\n+--- graceful shutdown\n+--- @field private _graceful_shutdown_failed true?\n+---\n+--- @field dynamic_capabilities lsp.DynamicCapabilities\n+---\n+--- Sends a request to the server.\n+--- This is a thin wrapper around {client.rpc.request} with some additional\n+--- checking.\n+--- If {handler} is not specified,  If one is not found there, then an error\n+--- will occur. Returns: {status}, {[client_id]}. {status} is a boolean\n+--- indicating if the notification was successful. If it is `false`, then it\n+--- will always be `false` (the client has shutdown).\n+--- If {status} is `true`, the function returns {request_id} as the second\n+--- result. You can use this with `client.cancel_request(request_id)` to cancel\n+--- the request.\n+--- @field request fun(method: string, params: table?, handler: lsp.Handler?, bufnr: integer): boolean, integer?\n+---\n+--- Sends a request to the server and synchronously waits for the response.\n+--- This is a wrapper around {client.request}\n+--- Returns: { err=err, result=result }, a dictionary, where `err` and `result`\n+--- come from the |lsp-handler|. On timeout, cancel or error, returns `(nil,\n+--- err)` where `err` is a string describing the failure reason. If the request\n+--- was unsuccessful returns `nil`.\n+--- @field request_sync fun(method: string, params: table?, timeout_ms: integer?, bufnr: integer): {err: lsp.ResponseError|nil, result:any}|nil, string|nil err # a dictionary, where\n+---\n+--- Sends a notification to an LSP server.\n+--- Returns: a boolean to indicate if the notification was successful. If\n+--- it is false, then it will always be false (the client has shutdown).\n+--- @field notify fun(method: string, params: table?): boolean\n+---\n+--- Cancels a request with a given request id.\n+--- Returns: same as `notify()`.\n+--- @field cancel_request fun(id: integer): boolean\n+---\n+--- Stops a client, optionally with force.\n+--- By default, it will just ask the server to shutdown without force.\n+--- If you request to stop a client which has previously been requested to\n+--- shutdown, it will automatically escalate and force shutdown.\n+--- @field stop fun(force?: boolean)\n+---\n+--- Runs the on_attach function from the client's config if it was defined.\n+--- Useful for buffer-local setup.\n+--- @field on_attach fun(bufnr: integer)\n+---\n+--- Checks if a client supports a given method.\n+--- Always returns true for unknown off-spec methods.\n+--- [opts] is a optional `{bufnr?: integer}` table.\n+--- Some language server capabilities can be file specific.\n+--- @field supports_method fun(method: string, opts?: {bufnr: integer?}): boolean\n+---\n+--- Checks whether a client is stopped.\n+--- Returns: true if the client is fully stopped.\n+--- @field is_stopped fun(): boolean\n+local Client = {}\n+Client.__index = Client\n+\n+--- @param cls table\n+--- @param meth any\n+--- @return function\n+local function method_wrapper(cls, meth)\n+  return function(...)\n+    return meth(cls, ...)\n+  end\n+end\n+\n+--- @package\n+--- @param id integer\n+--- @param rpc vim.lsp.rpc.PublicClient\n+--- @param handlers table<string,lsp.Handler>\n+--- @param offset_encoding string\n+--- @param config lsp.ClientConfig\n+--- @return lsp.Client\n+function Client.new(id, rpc, handlers, offset_encoding, config)\n+  local name = config.name\n+\n+  --- @class lsp.Client\n+  local self = {\n+    id = id,\n+    config = config,\n+    handlers = handlers,\n+    rpc = rpc,\n+    offset_encoding = offset_encoding,\n+    name = name,\n+    _log_prefix = string.format('LSP[%s]', name),",
            "html_url": "https://github.com/neovim/neovim/pull/27376#discussion_r1482247471",
            "id": 1482247471,
            "in_reply_to_id": 1482150068,
            "line": 140,
            "node_id": "PRRC_kwDOAPphoM5YWU0v",
            "original_commit_id": "ce0ca9cc5051cdc7746bcb5c925fec81cba4371c",
            "original_line": 140,
            "original_position": 140,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/client.lua",
            "position": 140,
            "pull_request_review_id": 1869029916,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27376",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1482247471/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-07T23:52:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1482247471",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        }
    ],
    "comment_regular_data": [],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/27376/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/27376/commits",
    "created_at": "2024-02-07T17:25:16Z",
    "diff_url": "https://github.com/neovim/neovim/pull/27376.diff",
    "draft": false,
    "head": {
        "label": "lewis6991:clientclass",
        "ref": "clientclass",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/lewis6991/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/lewis6991/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/lewis6991/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/lewis6991/neovim/branches{/branch}",
            "clone_url": "https://github.com/lewis6991/neovim.git",
            "collaborators_url": "https://api.github.com/repos/lewis6991/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/lewis6991/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/lewis6991/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/lewis6991/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/lewis6991/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/lewis6991/neovim/contributors",
            "created_at": "2020-11-24T21:47:43Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/lewis6991/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/lewis6991/neovim/downloads",
            "events_url": "https://api.github.com/repos/lewis6991/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/lewis6991/neovim/forks",
            "full_name": "lewis6991/neovim",
            "git_commits_url": "https://api.github.com/repos/lewis6991/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/lewis6991/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/lewis6991/neovim/git/tags{/sha}",
            "git_url": "git://github.com/lewis6991/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/lewis6991/neovim/hooks",
            "html_url": "https://github.com/lewis6991/neovim",
            "id": 315760150,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/lewis6991/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/lewis6991/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/lewis6991/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/lewis6991/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/lewis6991/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/lewis6991/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/lewis6991/neovim/merges",
            "milestones_url": "https://api.github.com/repos/lewis6991/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkzMTU3NjAxNTA=",
            "notifications_url": "https://api.github.com/repos/lewis6991/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/lewis6991/neovim/pulls{/number}",
            "pushed_at": "2024-02-12T14:51:29Z",
            "releases_url": "https://api.github.com/repos/lewis6991/neovim/releases{/id}",
            "size": 247566,
            "ssh_url": "git@github.com:lewis6991/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/lewis6991/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/lewis6991/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/lewis6991/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/lewis6991/neovim/subscription",
            "svn_url": "https://github.com/lewis6991/neovim",
            "tags_url": "https://api.github.com/repos/lewis6991/neovim/tags",
            "teams_url": "https://api.github.com/repos/lewis6991/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/lewis6991/neovim/git/trees{/sha}",
            "updated_at": "2024-02-06T12:43:15Z",
            "url": "https://api.github.com/repos/lewis6991/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "ce0ca9cc5051cdc7746bcb5c925fec81cba4371c",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
            "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
            "followers_url": "https://api.github.com/users/lewis6991/followers",
            "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
            "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/lewis6991",
            "id": 7904185,
            "login": "lewis6991",
            "node_id": "MDQ6VXNlcjc5MDQxODU=",
            "organizations_url": "https://api.github.com/users/lewis6991/orgs",
            "received_events_url": "https://api.github.com/users/lewis6991/received_events",
            "repos_url": "https://api.github.com/users/lewis6991/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/lewis6991"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/27376",
    "id": 1716113839,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27376",
    "labels": [
        {
            "color": "C5DEF5",
            "default": false,
            "description": "changes that are not features or bugfixes",
            "id": 106949155,
            "name": "refactor",
            "node_id": "MDU6TGFiZWwxMDY5NDkxNTU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/refactor"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "locked": false,
    "merge_commit_sha": "59cf827f99d53ec8dbb90e48a7561c0cb8b8ca6f",
    "merged_at": "2024-02-07T19:48:37Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5mSdGv",
    "number": 27376,
    "patch_url": "https://github.com/neovim/neovim/pull/27376.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/27376/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/ce0ca9cc5051cdc7746bcb5c925fec81cba4371c",
    "title": "refactor(lsp): move client code to a regular Lua class",
    "updated_at": "2024-02-07T23:51:50Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/27376",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
        "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
        "followers_url": "https://api.github.com/users/lewis6991/followers",
        "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
        "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/lewis6991",
        "id": 7904185,
        "login": "lewis6991",
        "node_id": "MDQ6VXNlcjc5MDQxODU=",
        "organizations_url": "https://api.github.com/users/lewis6991/orgs",
        "received_events_url": "https://api.github.com/users/lewis6991/received_events",
        "repos_url": "https://api.github.com/users/lewis6991/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/lewis6991"
    }
}