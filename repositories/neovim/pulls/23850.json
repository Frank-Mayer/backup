{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/23850/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/23850/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/23850"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/23850"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/23850/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/23850"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/6fd58ec320eb0fbf624117130b5bec92e63936f0"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 4791,
            "forks_count": 4791,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1648,
            "open_issues_count": 1648,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2023-08-01T12:17:00Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 247672,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 67911,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2023-08-01T11:58:40Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 67911,
            "watchers_count": 67911,
            "web_commit_signoff_required": false
        },
        "sha": "175e5c8b96fe0756040fcb31f46d9c97b3957776",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "Removes the `getoption_T` struct and also introduces the `OptVal` struct to unify the methods of getting/setting different option value types. This is the first of many PRs to reduce code duplication in the Vim option code as well as to make options easier to maintain. It also increases the flexibility and extensibility of options. Which opens the door for things like array and dict options.",
    "closed_at": "2023-06-07T00:05:16Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23850#discussion_r1218750906"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23850"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1218750906"
                }
            },
            "author_association": "MEMBER",
            "body": "This is only used in `option.c`, so I think it's better to make this a static variable in `option.c` until it is uses somewhere else.",
            "commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "created_at": "2023-06-06T00:55:56Z",
            "diff_hunk": "@@ -1080,4 +1081,31 @@ typedef struct vimoption {\n // buffers.  Indicate this by setting \"var\" to VAR_WIN.\n #define VAR_WIN ((char *)-1)\n \n+// Option value type\n+typedef enum {\n+  kOptValTypeNil = 0,\n+  kOptValTypeBoolean,\n+  kOptValTypeNumber,\n+  kOptValTypeString,\n+} OptValType;\n+\n+// Option value\n+typedef struct {\n+  OptValType type;\n+\n+  union {\n+    // Vim boolean options are actually tri-states because they have a third \"None\" value.\n+    TriState boolean;\n+    Integer number;\n+    String string;\n+  } data;\n+} OptVal;\n+\n+EXTERN const char *optval_type_names[] INIT(= {\n+  [kOptValTypeNil] = \"Nil\",\n+  [kOptValTypeBoolean] = \"Boolean\",\n+  [kOptValTypeNumber] = \"Number\",\n+  [kOptValTypeString] = \"String\"\n+});",
            "html_url": "https://github.com/neovim/neovim/pull/23850#discussion_r1218750906",
            "id": 1218750906,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5IpKm6",
            "original_commit_id": "08826bfbee098c21947a21305db9df83413d5212",
            "original_line": 1109,
            "original_position": 37,
            "original_start_line": 1103,
            "path": "src/nvim/option_defs.h",
            "position": null,
            "pull_request_review_id": 1463940913,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23850",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1218750906/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-06-06T01:01:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1218750906",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23850#discussion_r1218751983"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23850"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1218751983"
                }
            },
            "author_association": "MEMBER",
            "body": "There also doesn't seem to be a previous example of putting an `EXTERN` constant array in a header file.\r\n`extern` global constants shouldn't be added to `_defs.h` according to #6371, although there are already a lot of then in `option_defs.h` (probably because Vim has an `optiondefs.h`).",
            "commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "created_at": "2023-06-06T00:58:32Z",
            "diff_hunk": "@@ -1080,4 +1081,31 @@ typedef struct vimoption {\n // buffers.  Indicate this by setting \"var\" to VAR_WIN.\n #define VAR_WIN ((char *)-1)\n \n+// Option value type\n+typedef enum {\n+  kOptValTypeNil = 0,\n+  kOptValTypeBoolean,\n+  kOptValTypeNumber,\n+  kOptValTypeString,\n+} OptValType;\n+\n+// Option value\n+typedef struct {\n+  OptValType type;\n+\n+  union {\n+    // Vim boolean options are actually tri-states because they have a third \"None\" value.\n+    TriState boolean;\n+    Integer number;\n+    String string;\n+  } data;\n+} OptVal;\n+\n+EXTERN const char *optval_type_names[] INIT(= {\n+  [kOptValTypeNil] = \"Nil\",\n+  [kOptValTypeBoolean] = \"Boolean\",\n+  [kOptValTypeNumber] = \"Number\",\n+  [kOptValTypeString] = \"String\"\n+});",
            "html_url": "https://github.com/neovim/neovim/pull/23850#discussion_r1218751983",
            "id": 1218751983,
            "in_reply_to_id": 1218750906,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5IpK3v",
            "original_commit_id": "08826bfbee098c21947a21305db9df83413d5212",
            "original_line": 1109,
            "original_position": 37,
            "original_start_line": 1103,
            "path": "src/nvim/option_defs.h",
            "position": null,
            "pull_request_review_id": 1463945429,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23850",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1218751983/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-06-06T01:02:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1218751983",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23850#discussion_r1218899574"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23850"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1218899574"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n/// Convert typval to option value for a particular option.\r\n```",
            "commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "created_at": "2023-06-06T04:58:13Z",
            "diff_hunk": "@@ -1809,28 +1809,84 @@ static void getwinvar(typval_T *argvars, typval_T *rettv, int off)\n   get_var_from(varname, rettv, &argvars[off + 2], 'w', tp, win, NULL);\n }\n \n-/// Set option \"varname\" to the value of \"varp\" for the current buffer/window.\n-static void set_option_from_tv(const char *varname, typval_T *varp)\n+/// Convert Vim object to option value for a particular option.",
            "html_url": "https://github.com/neovim/neovim/pull/23850#discussion_r1218899574",
            "id": 1218899574,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Ipu52",
            "original_commit_id": "08826bfbee098c21947a21305db9df83413d5212",
            "original_line": 1812,
            "original_position": 162,
            "original_start_line": null,
            "path": "src/nvim/eval/vars.c",
            "position": null,
            "pull_request_review_id": 1464261000,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23850",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1218899574/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-06-06T04:58:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1218899574",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23850#discussion_r1218899773"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23850"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1218899773"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n/// @param[in]   tv      typval to convert.\r\n```",
            "commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "created_at": "2023-06-06T04:58:28Z",
            "diff_hunk": "@@ -1809,28 +1809,84 @@ static void getwinvar(typval_T *argvars, typval_T *rettv, int off)\n   get_var_from(varname, rettv, &argvars[off + 2], 'w', tp, win, NULL);\n }\n \n-/// Set option \"varname\" to the value of \"varp\" for the current buffer/window.\n-static void set_option_from_tv(const char *varname, typval_T *varp)\n+/// Convert Vim object to option value for a particular option.\n+///\n+/// @param[in]   tv      Vim object to convert.",
            "html_url": "https://github.com/neovim/neovim/pull/23850#discussion_r1218899773",
            "id": 1218899773,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Ipu89",
            "original_commit_id": "08826bfbee098c21947a21305db9df83413d5212",
            "original_line": 1814,
            "original_position": 164,
            "original_start_line": null,
            "path": "src/nvim/eval/vars.c",
            "position": null,
            "pull_request_review_id": 1464261000,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23850",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1218899773/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-06-06T04:58:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1218899773",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23850#discussion_r1218899990"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23850"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1218899990"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n/// @return  Typval converted to OptVal. Must be freed by caller.\r\n```",
            "commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "created_at": "2023-06-06T04:58:44Z",
            "diff_hunk": "@@ -1809,28 +1809,84 @@ static void getwinvar(typval_T *argvars, typval_T *rettv, int off)\n   get_var_from(varname, rettv, &argvars[off + 2], 'w', tp, win, NULL);\n }\n \n-/// Set option \"varname\" to the value of \"varp\" for the current buffer/window.\n-static void set_option_from_tv(const char *varname, typval_T *varp)\n+/// Convert Vim object to option value for a particular option.\n+///\n+/// @param[in]   tv      Vim object to convert.\n+/// @param[in]   option  Option name.\n+/// @param[in]   scope   Option scope.\n+/// @param[out]  error   Whether an error occured.\n+///\n+/// @return  Vim object converted to OptVal. Must be freed by caller.",
            "html_url": "https://github.com/neovim/neovim/pull/23850#discussion_r1218899990",
            "id": 1218899990,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5IpvAW",
            "original_commit_id": "08826bfbee098c21947a21305db9df83413d5212",
            "original_line": 1819,
            "original_position": 169,
            "original_start_line": null,
            "path": "src/nvim/eval/vars.c",
            "position": null,
            "pull_request_review_id": 1464261000,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23850",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1218899990/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-06-06T04:58:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1218899990",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23850#discussion_r1219022234"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23850"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219022234"
                }
            },
            "author_association": "MEMBER",
            "body": "If there will be options with multiple types in future, the type of the new value should have to depend on both the type of the old value and the operator used, so deciding the type of the new value here before checking for the operator doesn't look right.",
            "commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "created_at": "2023-06-06T06:54:06Z",
            "diff_hunk": "@@ -766,84 +766,84 @@ static char *ex_let_option(char *arg, typval_T *const tv, const bool is_const,\n       || (endchars != NULL\n           && vim_strchr(endchars, (uint8_t)(*skipwhite(p))) == NULL)) {\n     emsg(_(e_letunexp));\n-  } else {\n-    varnumber_T n = 0;\n-    getoption_T opt_type;\n-    long numval;\n-    char *stringval = NULL;\n-    const char *s = NULL;\n-    bool failed = false;\n-    uint32_t opt_p_flags;\n-    char *tofree = NULL;\n-\n-    const char c1 = *p;\n-    *p = NUL;\n+    return NULL;\n+  }\n \n-    opt_type = get_option_value(arg, &numval, &stringval, &opt_p_flags, scope);\n-    if (opt_type == gov_bool\n-        || opt_type == gov_number\n-        || opt_type == gov_hidden_bool\n-        || opt_type == gov_hidden_number) {\n-      // number, possibly hidden\n-      n = (long)tv_get_number(tv);\n-    }\n-\n-    if ((opt_p_flags & P_FUNC) && tv_is_func(*tv)) {\n-      // If the option can be set to a function reference or a lambda\n-      // and the passed value is a function reference, then convert it to\n-      // the name (string) of the function reference.\n-      s = tofree = encode_tv2string(tv, NULL);\n-    } else if (tv->v_type != VAR_BOOL && tv->v_type != VAR_SPECIAL) {\n-      // Avoid setting a string option to the text \"v:false\" or similar.\n-      s = tv_get_string_chk(tv);\n-    }\n-\n-    if (op != NULL && *op != '=') {\n-      if (((opt_type == gov_bool || opt_type == gov_number) && *op == '.')\n-          || (opt_type == gov_string && *op != '.')) {\n-        semsg(_(e_letwrong), op);\n-        failed = true;  // don't set the value\n-      } else {\n-        // number or bool\n-        if (opt_type == gov_number || opt_type == gov_bool) {\n-          switch (*op) {\n-          case '+':\n-            n = numval + n; break;\n-          case '-':\n-            n = numval - n; break;\n-          case '*':\n-            n = numval * n; break;\n-          case '/':\n-            n = num_divide(numval, n); break;\n-          case '%':\n-            n = num_modulus(numval, n); break;\n-          }\n-          s = NULL;\n-        } else if (opt_type == gov_string && stringval != NULL && s != NULL) {\n-          // string\n-          char *const oldstringval = stringval;\n-          stringval = concat_str(stringval, s);\n-          xfree(oldstringval);\n-          s = stringval;\n+  bool hidden;\n+  bool error;\n+  const char c1 = *p;\n+  *p = NUL;\n+\n+  OptVal curval = get_option_value(arg, NULL, scope, &hidden);\n+  OptVal newval = tv_to_optval(tv, arg, scope, &error);\n+\n+  // Ignore errors for num types\n+  if (newval.type != kOptValTypeNumber && newval.type != kOptValTypeBoolean && error) {\n+    goto end;\n+  }\n+\n+  // Don't assume current and new values are of the same type in order to future-proof the code for\n+  // when an option can have multiple types.\n+  const bool is_num = ((curval.type == kOptValTypeNumber || curval.type == kOptValTypeBoolean)\n+                       && (newval.type == kOptValTypeNumber || newval.type == kOptValTypeBoolean));\n+  const bool is_string = curval.type == kOptValTypeString && newval.type == kOptValTypeString;\n+\n+  if (op != NULL && *op != '=') {\n+    if (!hidden && ((is_num && *op == '.') || (is_string && *op != '.'))) {\n+      semsg(_(e_letwrong), op);\n+      goto end;",
            "html_url": "https://github.com/neovim/neovim/pull/23850#discussion_r1219022234",
            "id": 1219022234,
            "line": 794,
            "node_id": "PRRC_kwDOAPphoM5IqM2a",
            "original_commit_id": "bf31417c934971315f2d7695701b18d81b8b1ff6",
            "original_line": 794,
            "original_position": 87,
            "original_start_line": 777,
            "path": "src/nvim/eval/vars.c",
            "position": 87,
            "pull_request_review_id": 1464398047,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23850",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219022234/reactions"
            },
            "side": "RIGHT",
            "start_line": 777,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-06-06T06:54:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219022234",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23850#discussion_r1219034437"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23850"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219034437"
                }
            },
            "author_association": "MEMBER",
            "body": "I think it's better to pass the operator `op` to `tv_to_optval()` and check for it there. This may also allow changing back the error number in `test_vimscript.vim`.",
            "commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "created_at": "2023-06-06T07:01:14Z",
            "diff_hunk": "@@ -766,84 +766,84 @@ static char *ex_let_option(char *arg, typval_T *const tv, const bool is_const,\n       || (endchars != NULL\n           && vim_strchr(endchars, (uint8_t)(*skipwhite(p))) == NULL)) {\n     emsg(_(e_letunexp));\n-  } else {\n-    varnumber_T n = 0;\n-    getoption_T opt_type;\n-    long numval;\n-    char *stringval = NULL;\n-    const char *s = NULL;\n-    bool failed = false;\n-    uint32_t opt_p_flags;\n-    char *tofree = NULL;\n-\n-    const char c1 = *p;\n-    *p = NUL;\n+    return NULL;\n+  }\n \n-    opt_type = get_option_value(arg, &numval, &stringval, &opt_p_flags, scope);\n-    if (opt_type == gov_bool\n-        || opt_type == gov_number\n-        || opt_type == gov_hidden_bool\n-        || opt_type == gov_hidden_number) {\n-      // number, possibly hidden\n-      n = (long)tv_get_number(tv);\n-    }\n-\n-    if ((opt_p_flags & P_FUNC) && tv_is_func(*tv)) {\n-      // If the option can be set to a function reference or a lambda\n-      // and the passed value is a function reference, then convert it to\n-      // the name (string) of the function reference.\n-      s = tofree = encode_tv2string(tv, NULL);\n-    } else if (tv->v_type != VAR_BOOL && tv->v_type != VAR_SPECIAL) {\n-      // Avoid setting a string option to the text \"v:false\" or similar.\n-      s = tv_get_string_chk(tv);\n-    }\n-\n-    if (op != NULL && *op != '=') {\n-      if (((opt_type == gov_bool || opt_type == gov_number) && *op == '.')\n-          || (opt_type == gov_string && *op != '.')) {\n-        semsg(_(e_letwrong), op);\n-        failed = true;  // don't set the value\n-      } else {\n-        // number or bool\n-        if (opt_type == gov_number || opt_type == gov_bool) {\n-          switch (*op) {\n-          case '+':\n-            n = numval + n; break;\n-          case '-':\n-            n = numval - n; break;\n-          case '*':\n-            n = numval * n; break;\n-          case '/':\n-            n = num_divide(numval, n); break;\n-          case '%':\n-            n = num_modulus(numval, n); break;\n-          }\n-          s = NULL;\n-        } else if (opt_type == gov_string && stringval != NULL && s != NULL) {\n-          // string\n-          char *const oldstringval = stringval;\n-          stringval = concat_str(stringval, s);\n-          xfree(oldstringval);\n-          s = stringval;\n+  bool hidden;\n+  bool error;\n+  const char c1 = *p;\n+  *p = NUL;\n+\n+  OptVal curval = get_option_value(arg, NULL, scope, &hidden);\n+  OptVal newval = tv_to_optval(tv, arg, scope, &error);\n+\n+  // Ignore errors for num types\n+  if (newval.type != kOptValTypeNumber && newval.type != kOptValTypeBoolean && error) {\n+    goto end;\n+  }\n+\n+  // Don't assume current and new values are of the same type in order to future-proof the code for\n+  // when an option can have multiple types.\n+  const bool is_num = ((curval.type == kOptValTypeNumber || curval.type == kOptValTypeBoolean)\n+                       && (newval.type == kOptValTypeNumber || newval.type == kOptValTypeBoolean));\n+  const bool is_string = curval.type == kOptValTypeString && newval.type == kOptValTypeString;\n+\n+  if (op != NULL && *op != '=') {\n+    if (!hidden && ((is_num && *op == '.') || (is_string && *op != '.'))) {\n+      semsg(_(e_letwrong), op);\n+      goto end;",
            "html_url": "https://github.com/neovim/neovim/pull/23850#discussion_r1219034437",
            "id": 1219034437,
            "in_reply_to_id": 1219022234,
            "line": 794,
            "node_id": "PRRC_kwDOAPphoM5IqP1F",
            "original_commit_id": "bf31417c934971315f2d7695701b18d81b8b1ff6",
            "original_line": 794,
            "original_position": 87,
            "original_start_line": 777,
            "path": "src/nvim/eval/vars.c",
            "position": 87,
            "pull_request_review_id": 1464413326,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23850",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219034437/reactions"
            },
            "side": "RIGHT",
            "start_line": 777,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-06-06T07:01:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219034437",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23850#discussion_r1219098193"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23850"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219098193"
                }
            },
            "author_association": "MEMBER",
            "body": "You're right. I'm thinking that if the `op` isn't `NULL` or `=`, we should try to coerce the new typval to have the same type as `curval` if possible. Does that sound right?",
            "commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "created_at": "2023-06-06T07:42:22Z",
            "diff_hunk": "@@ -766,84 +766,84 @@ static char *ex_let_option(char *arg, typval_T *const tv, const bool is_const,\n       || (endchars != NULL\n           && vim_strchr(endchars, (uint8_t)(*skipwhite(p))) == NULL)) {\n     emsg(_(e_letunexp));\n-  } else {\n-    varnumber_T n = 0;\n-    getoption_T opt_type;\n-    long numval;\n-    char *stringval = NULL;\n-    const char *s = NULL;\n-    bool failed = false;\n-    uint32_t opt_p_flags;\n-    char *tofree = NULL;\n-\n-    const char c1 = *p;\n-    *p = NUL;\n+    return NULL;\n+  }\n \n-    opt_type = get_option_value(arg, &numval, &stringval, &opt_p_flags, scope);\n-    if (opt_type == gov_bool\n-        || opt_type == gov_number\n-        || opt_type == gov_hidden_bool\n-        || opt_type == gov_hidden_number) {\n-      // number, possibly hidden\n-      n = (long)tv_get_number(tv);\n-    }\n-\n-    if ((opt_p_flags & P_FUNC) && tv_is_func(*tv)) {\n-      // If the option can be set to a function reference or a lambda\n-      // and the passed value is a function reference, then convert it to\n-      // the name (string) of the function reference.\n-      s = tofree = encode_tv2string(tv, NULL);\n-    } else if (tv->v_type != VAR_BOOL && tv->v_type != VAR_SPECIAL) {\n-      // Avoid setting a string option to the text \"v:false\" or similar.\n-      s = tv_get_string_chk(tv);\n-    }\n-\n-    if (op != NULL && *op != '=') {\n-      if (((opt_type == gov_bool || opt_type == gov_number) && *op == '.')\n-          || (opt_type == gov_string && *op != '.')) {\n-        semsg(_(e_letwrong), op);\n-        failed = true;  // don't set the value\n-      } else {\n-        // number or bool\n-        if (opt_type == gov_number || opt_type == gov_bool) {\n-          switch (*op) {\n-          case '+':\n-            n = numval + n; break;\n-          case '-':\n-            n = numval - n; break;\n-          case '*':\n-            n = numval * n; break;\n-          case '/':\n-            n = num_divide(numval, n); break;\n-          case '%':\n-            n = num_modulus(numval, n); break;\n-          }\n-          s = NULL;\n-        } else if (opt_type == gov_string && stringval != NULL && s != NULL) {\n-          // string\n-          char *const oldstringval = stringval;\n-          stringval = concat_str(stringval, s);\n-          xfree(oldstringval);\n-          s = stringval;\n+  bool hidden;\n+  bool error;\n+  const char c1 = *p;\n+  *p = NUL;\n+\n+  OptVal curval = get_option_value(arg, NULL, scope, &hidden);\n+  OptVal newval = tv_to_optval(tv, arg, scope, &error);\n+\n+  // Ignore errors for num types\n+  if (newval.type != kOptValTypeNumber && newval.type != kOptValTypeBoolean && error) {\n+    goto end;\n+  }\n+\n+  // Don't assume current and new values are of the same type in order to future-proof the code for\n+  // when an option can have multiple types.\n+  const bool is_num = ((curval.type == kOptValTypeNumber || curval.type == kOptValTypeBoolean)\n+                       && (newval.type == kOptValTypeNumber || newval.type == kOptValTypeBoolean));\n+  const bool is_string = curval.type == kOptValTypeString && newval.type == kOptValTypeString;\n+\n+  if (op != NULL && *op != '=') {\n+    if (!hidden && ((is_num && *op == '.') || (is_string && *op != '.'))) {\n+      semsg(_(e_letwrong), op);\n+      goto end;",
            "html_url": "https://github.com/neovim/neovim/pull/23850#discussion_r1219098193",
            "id": 1219098193,
            "in_reply_to_id": 1219022234,
            "line": 794,
            "node_id": "PRRC_kwDOAPphoM5IqfZR",
            "original_commit_id": "bf31417c934971315f2d7695701b18d81b8b1ff6",
            "original_line": 794,
            "original_position": 87,
            "original_start_line": 777,
            "path": "src/nvim/eval/vars.c",
            "position": 87,
            "pull_request_review_id": 1464492589,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23850",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219098193/reactions"
            },
            "side": "RIGHT",
            "start_line": 777,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-06-06T07:42:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219098193",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23850#discussion_r1219100918"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23850"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219100918"
                }
            },
            "author_association": "MEMBER",
            "body": "> I think it's better to pass the operator `op` to `tv_to_optval()` and check for it there. This may also allow changing back the error number in `test_vimscript.vim`.\r\n\r\nwell I think we add a `keep_type` boolean flag instead which'd make it try to keep the old value's type for the new value. It's more general since `tv_to_optval` is used in `set_option_from_tv()` as well",
            "commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "created_at": "2023-06-06T07:44:25Z",
            "diff_hunk": "@@ -766,84 +766,84 @@ static char *ex_let_option(char *arg, typval_T *const tv, const bool is_const,\n       || (endchars != NULL\n           && vim_strchr(endchars, (uint8_t)(*skipwhite(p))) == NULL)) {\n     emsg(_(e_letunexp));\n-  } else {\n-    varnumber_T n = 0;\n-    getoption_T opt_type;\n-    long numval;\n-    char *stringval = NULL;\n-    const char *s = NULL;\n-    bool failed = false;\n-    uint32_t opt_p_flags;\n-    char *tofree = NULL;\n-\n-    const char c1 = *p;\n-    *p = NUL;\n+    return NULL;\n+  }\n \n-    opt_type = get_option_value(arg, &numval, &stringval, &opt_p_flags, scope);\n-    if (opt_type == gov_bool\n-        || opt_type == gov_number\n-        || opt_type == gov_hidden_bool\n-        || opt_type == gov_hidden_number) {\n-      // number, possibly hidden\n-      n = (long)tv_get_number(tv);\n-    }\n-\n-    if ((opt_p_flags & P_FUNC) && tv_is_func(*tv)) {\n-      // If the option can be set to a function reference or a lambda\n-      // and the passed value is a function reference, then convert it to\n-      // the name (string) of the function reference.\n-      s = tofree = encode_tv2string(tv, NULL);\n-    } else if (tv->v_type != VAR_BOOL && tv->v_type != VAR_SPECIAL) {\n-      // Avoid setting a string option to the text \"v:false\" or similar.\n-      s = tv_get_string_chk(tv);\n-    }\n-\n-    if (op != NULL && *op != '=') {\n-      if (((opt_type == gov_bool || opt_type == gov_number) && *op == '.')\n-          || (opt_type == gov_string && *op != '.')) {\n-        semsg(_(e_letwrong), op);\n-        failed = true;  // don't set the value\n-      } else {\n-        // number or bool\n-        if (opt_type == gov_number || opt_type == gov_bool) {\n-          switch (*op) {\n-          case '+':\n-            n = numval + n; break;\n-          case '-':\n-            n = numval - n; break;\n-          case '*':\n-            n = numval * n; break;\n-          case '/':\n-            n = num_divide(numval, n); break;\n-          case '%':\n-            n = num_modulus(numval, n); break;\n-          }\n-          s = NULL;\n-        } else if (opt_type == gov_string && stringval != NULL && s != NULL) {\n-          // string\n-          char *const oldstringval = stringval;\n-          stringval = concat_str(stringval, s);\n-          xfree(oldstringval);\n-          s = stringval;\n+  bool hidden;\n+  bool error;\n+  const char c1 = *p;\n+  *p = NUL;\n+\n+  OptVal curval = get_option_value(arg, NULL, scope, &hidden);\n+  OptVal newval = tv_to_optval(tv, arg, scope, &error);\n+\n+  // Ignore errors for num types\n+  if (newval.type != kOptValTypeNumber && newval.type != kOptValTypeBoolean && error) {\n+    goto end;\n+  }\n+\n+  // Don't assume current and new values are of the same type in order to future-proof the code for\n+  // when an option can have multiple types.\n+  const bool is_num = ((curval.type == kOptValTypeNumber || curval.type == kOptValTypeBoolean)\n+                       && (newval.type == kOptValTypeNumber || newval.type == kOptValTypeBoolean));\n+  const bool is_string = curval.type == kOptValTypeString && newval.type == kOptValTypeString;\n+\n+  if (op != NULL && *op != '=') {\n+    if (!hidden && ((is_num && *op == '.') || (is_string && *op != '.'))) {\n+      semsg(_(e_letwrong), op);\n+      goto end;",
            "html_url": "https://github.com/neovim/neovim/pull/23850#discussion_r1219100918",
            "id": 1219100918,
            "in_reply_to_id": 1219022234,
            "line": 794,
            "node_id": "PRRC_kwDOAPphoM5IqgD2",
            "original_commit_id": "bf31417c934971315f2d7695701b18d81b8b1ff6",
            "original_line": 794,
            "original_position": 87,
            "original_start_line": 777,
            "path": "src/nvim/eval/vars.c",
            "position": 87,
            "pull_request_review_id": 1464496021,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23850",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219100918/reactions"
            },
            "side": "RIGHT",
            "start_line": 777,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-06-06T07:44:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219100918",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23850#discussion_r1219126863"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23850"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219126863"
                }
            },
            "author_association": "MEMBER",
            "body": "What if there will type changes like the change between number and bool? And why is handling an operator less general than not handling it?",
            "commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "created_at": "2023-06-06T07:59:14Z",
            "diff_hunk": "@@ -766,84 +766,84 @@ static char *ex_let_option(char *arg, typval_T *const tv, const bool is_const,\n       || (endchars != NULL\n           && vim_strchr(endchars, (uint8_t)(*skipwhite(p))) == NULL)) {\n     emsg(_(e_letunexp));\n-  } else {\n-    varnumber_T n = 0;\n-    getoption_T opt_type;\n-    long numval;\n-    char *stringval = NULL;\n-    const char *s = NULL;\n-    bool failed = false;\n-    uint32_t opt_p_flags;\n-    char *tofree = NULL;\n-\n-    const char c1 = *p;\n-    *p = NUL;\n+    return NULL;\n+  }\n \n-    opt_type = get_option_value(arg, &numval, &stringval, &opt_p_flags, scope);\n-    if (opt_type == gov_bool\n-        || opt_type == gov_number\n-        || opt_type == gov_hidden_bool\n-        || opt_type == gov_hidden_number) {\n-      // number, possibly hidden\n-      n = (long)tv_get_number(tv);\n-    }\n-\n-    if ((opt_p_flags & P_FUNC) && tv_is_func(*tv)) {\n-      // If the option can be set to a function reference or a lambda\n-      // and the passed value is a function reference, then convert it to\n-      // the name (string) of the function reference.\n-      s = tofree = encode_tv2string(tv, NULL);\n-    } else if (tv->v_type != VAR_BOOL && tv->v_type != VAR_SPECIAL) {\n-      // Avoid setting a string option to the text \"v:false\" or similar.\n-      s = tv_get_string_chk(tv);\n-    }\n-\n-    if (op != NULL && *op != '=') {\n-      if (((opt_type == gov_bool || opt_type == gov_number) && *op == '.')\n-          || (opt_type == gov_string && *op != '.')) {\n-        semsg(_(e_letwrong), op);\n-        failed = true;  // don't set the value\n-      } else {\n-        // number or bool\n-        if (opt_type == gov_number || opt_type == gov_bool) {\n-          switch (*op) {\n-          case '+':\n-            n = numval + n; break;\n-          case '-':\n-            n = numval - n; break;\n-          case '*':\n-            n = numval * n; break;\n-          case '/':\n-            n = num_divide(numval, n); break;\n-          case '%':\n-            n = num_modulus(numval, n); break;\n-          }\n-          s = NULL;\n-        } else if (opt_type == gov_string && stringval != NULL && s != NULL) {\n-          // string\n-          char *const oldstringval = stringval;\n-          stringval = concat_str(stringval, s);\n-          xfree(oldstringval);\n-          s = stringval;\n+  bool hidden;\n+  bool error;\n+  const char c1 = *p;\n+  *p = NUL;\n+\n+  OptVal curval = get_option_value(arg, NULL, scope, &hidden);\n+  OptVal newval = tv_to_optval(tv, arg, scope, &error);\n+\n+  // Ignore errors for num types\n+  if (newval.type != kOptValTypeNumber && newval.type != kOptValTypeBoolean && error) {\n+    goto end;\n+  }\n+\n+  // Don't assume current and new values are of the same type in order to future-proof the code for\n+  // when an option can have multiple types.\n+  const bool is_num = ((curval.type == kOptValTypeNumber || curval.type == kOptValTypeBoolean)\n+                       && (newval.type == kOptValTypeNumber || newval.type == kOptValTypeBoolean));\n+  const bool is_string = curval.type == kOptValTypeString && newval.type == kOptValTypeString;\n+\n+  if (op != NULL && *op != '=') {\n+    if (!hidden && ((is_num && *op == '.') || (is_string && *op != '.'))) {\n+      semsg(_(e_letwrong), op);\n+      goto end;",
            "html_url": "https://github.com/neovim/neovim/pull/23850#discussion_r1219126863",
            "id": 1219126863,
            "in_reply_to_id": 1219022234,
            "line": 794,
            "node_id": "PRRC_kwDOAPphoM5IqmZP",
            "original_commit_id": "bf31417c934971315f2d7695701b18d81b8b1ff6",
            "original_line": 794,
            "original_position": 87,
            "original_start_line": 777,
            "path": "src/nvim/eval/vars.c",
            "position": 87,
            "pull_request_review_id": 1464530127,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23850",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219126863/reactions"
            },
            "side": "RIGHT",
            "start_line": 777,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-06-06T08:00:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219126863",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23850#discussion_r1219140525"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23850"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219140525"
                }
            },
            "author_association": "MEMBER",
            "body": "It's general in the sense that `set_option_from_tv` doesn't use an operator and thus will have no operator, and `ex_let_option` can just handle the operator itself to set the value of the boolean flag that it passes to `tv_to_optval`.\r\n\r\n> What if there will type changes like the change between number and bool\r\n\r\nWdym? That'll just be handled normally. If the current value is a bool, the new value will be too. Same for number option value.",
            "commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "created_at": "2023-06-06T08:07:51Z",
            "diff_hunk": "@@ -766,84 +766,84 @@ static char *ex_let_option(char *arg, typval_T *const tv, const bool is_const,\n       || (endchars != NULL\n           && vim_strchr(endchars, (uint8_t)(*skipwhite(p))) == NULL)) {\n     emsg(_(e_letunexp));\n-  } else {\n-    varnumber_T n = 0;\n-    getoption_T opt_type;\n-    long numval;\n-    char *stringval = NULL;\n-    const char *s = NULL;\n-    bool failed = false;\n-    uint32_t opt_p_flags;\n-    char *tofree = NULL;\n-\n-    const char c1 = *p;\n-    *p = NUL;\n+    return NULL;\n+  }\n \n-    opt_type = get_option_value(arg, &numval, &stringval, &opt_p_flags, scope);\n-    if (opt_type == gov_bool\n-        || opt_type == gov_number\n-        || opt_type == gov_hidden_bool\n-        || opt_type == gov_hidden_number) {\n-      // number, possibly hidden\n-      n = (long)tv_get_number(tv);\n-    }\n-\n-    if ((opt_p_flags & P_FUNC) && tv_is_func(*tv)) {\n-      // If the option can be set to a function reference or a lambda\n-      // and the passed value is a function reference, then convert it to\n-      // the name (string) of the function reference.\n-      s = tofree = encode_tv2string(tv, NULL);\n-    } else if (tv->v_type != VAR_BOOL && tv->v_type != VAR_SPECIAL) {\n-      // Avoid setting a string option to the text \"v:false\" or similar.\n-      s = tv_get_string_chk(tv);\n-    }\n-\n-    if (op != NULL && *op != '=') {\n-      if (((opt_type == gov_bool || opt_type == gov_number) && *op == '.')\n-          || (opt_type == gov_string && *op != '.')) {\n-        semsg(_(e_letwrong), op);\n-        failed = true;  // don't set the value\n-      } else {\n-        // number or bool\n-        if (opt_type == gov_number || opt_type == gov_bool) {\n-          switch (*op) {\n-          case '+':\n-            n = numval + n; break;\n-          case '-':\n-            n = numval - n; break;\n-          case '*':\n-            n = numval * n; break;\n-          case '/':\n-            n = num_divide(numval, n); break;\n-          case '%':\n-            n = num_modulus(numval, n); break;\n-          }\n-          s = NULL;\n-        } else if (opt_type == gov_string && stringval != NULL && s != NULL) {\n-          // string\n-          char *const oldstringval = stringval;\n-          stringval = concat_str(stringval, s);\n-          xfree(oldstringval);\n-          s = stringval;\n+  bool hidden;\n+  bool error;\n+  const char c1 = *p;\n+  *p = NUL;\n+\n+  OptVal curval = get_option_value(arg, NULL, scope, &hidden);\n+  OptVal newval = tv_to_optval(tv, arg, scope, &error);\n+\n+  // Ignore errors for num types\n+  if (newval.type != kOptValTypeNumber && newval.type != kOptValTypeBoolean && error) {\n+    goto end;\n+  }\n+\n+  // Don't assume current and new values are of the same type in order to future-proof the code for\n+  // when an option can have multiple types.\n+  const bool is_num = ((curval.type == kOptValTypeNumber || curval.type == kOptValTypeBoolean)\n+                       && (newval.type == kOptValTypeNumber || newval.type == kOptValTypeBoolean));\n+  const bool is_string = curval.type == kOptValTypeString && newval.type == kOptValTypeString;\n+\n+  if (op != NULL && *op != '=') {\n+    if (!hidden && ((is_num && *op == '.') || (is_string && *op != '.'))) {\n+      semsg(_(e_letwrong), op);\n+      goto end;",
            "html_url": "https://github.com/neovim/neovim/pull/23850#discussion_r1219140525",
            "id": 1219140525,
            "in_reply_to_id": 1219022234,
            "line": 794,
            "node_id": "PRRC_kwDOAPphoM5Iqput",
            "original_commit_id": "bf31417c934971315f2d7695701b18d81b8b1ff6",
            "original_line": 794,
            "original_position": 87,
            "original_start_line": 777,
            "path": "src/nvim/eval/vars.c",
            "position": 87,
            "pull_request_review_id": 1464547856,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23850",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219140525/reactions"
            },
            "side": "RIGHT",
            "start_line": 777,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-06-06T08:09:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219140525",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23850#discussion_r1219147951"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23850"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219147951"
                }
            },
            "author_association": "MEMBER",
            "body": "> It's general in the sense that `set_option_from_tv` doesn't use an operator and thus will have no operator, and `ex_let_option` can just handle the operator itself to set the value of the boolean flag that it passes to `tv_to_optval`.\r\n> \r\n> > What if there will type changes like the change between number and bool\r\n> \r\n> Wdym? That'll just be handled normally. If the current value is a bool, the new value will be too. Same for number option value.\r\n\r\nActually, no, numeric types won't be changed. So if new value is number and old value is bool, new value will remain a number. Num and bool types are handled together in `tv_to_optval` anyway so that shouldn't be an exceptional case.",
            "commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "created_at": "2023-06-06T08:13:05Z",
            "diff_hunk": "@@ -766,84 +766,84 @@ static char *ex_let_option(char *arg, typval_T *const tv, const bool is_const,\n       || (endchars != NULL\n           && vim_strchr(endchars, (uint8_t)(*skipwhite(p))) == NULL)) {\n     emsg(_(e_letunexp));\n-  } else {\n-    varnumber_T n = 0;\n-    getoption_T opt_type;\n-    long numval;\n-    char *stringval = NULL;\n-    const char *s = NULL;\n-    bool failed = false;\n-    uint32_t opt_p_flags;\n-    char *tofree = NULL;\n-\n-    const char c1 = *p;\n-    *p = NUL;\n+    return NULL;\n+  }\n \n-    opt_type = get_option_value(arg, &numval, &stringval, &opt_p_flags, scope);\n-    if (opt_type == gov_bool\n-        || opt_type == gov_number\n-        || opt_type == gov_hidden_bool\n-        || opt_type == gov_hidden_number) {\n-      // number, possibly hidden\n-      n = (long)tv_get_number(tv);\n-    }\n-\n-    if ((opt_p_flags & P_FUNC) && tv_is_func(*tv)) {\n-      // If the option can be set to a function reference or a lambda\n-      // and the passed value is a function reference, then convert it to\n-      // the name (string) of the function reference.\n-      s = tofree = encode_tv2string(tv, NULL);\n-    } else if (tv->v_type != VAR_BOOL && tv->v_type != VAR_SPECIAL) {\n-      // Avoid setting a string option to the text \"v:false\" or similar.\n-      s = tv_get_string_chk(tv);\n-    }\n-\n-    if (op != NULL && *op != '=') {\n-      if (((opt_type == gov_bool || opt_type == gov_number) && *op == '.')\n-          || (opt_type == gov_string && *op != '.')) {\n-        semsg(_(e_letwrong), op);\n-        failed = true;  // don't set the value\n-      } else {\n-        // number or bool\n-        if (opt_type == gov_number || opt_type == gov_bool) {\n-          switch (*op) {\n-          case '+':\n-            n = numval + n; break;\n-          case '-':\n-            n = numval - n; break;\n-          case '*':\n-            n = numval * n; break;\n-          case '/':\n-            n = num_divide(numval, n); break;\n-          case '%':\n-            n = num_modulus(numval, n); break;\n-          }\n-          s = NULL;\n-        } else if (opt_type == gov_string && stringval != NULL && s != NULL) {\n-          // string\n-          char *const oldstringval = stringval;\n-          stringval = concat_str(stringval, s);\n-          xfree(oldstringval);\n-          s = stringval;\n+  bool hidden;\n+  bool error;\n+  const char c1 = *p;\n+  *p = NUL;\n+\n+  OptVal curval = get_option_value(arg, NULL, scope, &hidden);\n+  OptVal newval = tv_to_optval(tv, arg, scope, &error);\n+\n+  // Ignore errors for num types\n+  if (newval.type != kOptValTypeNumber && newval.type != kOptValTypeBoolean && error) {\n+    goto end;\n+  }\n+\n+  // Don't assume current and new values are of the same type in order to future-proof the code for\n+  // when an option can have multiple types.\n+  const bool is_num = ((curval.type == kOptValTypeNumber || curval.type == kOptValTypeBoolean)\n+                       && (newval.type == kOptValTypeNumber || newval.type == kOptValTypeBoolean));\n+  const bool is_string = curval.type == kOptValTypeString && newval.type == kOptValTypeString;\n+\n+  if (op != NULL && *op != '=') {\n+    if (!hidden && ((is_num && *op == '.') || (is_string && *op != '.'))) {\n+      semsg(_(e_letwrong), op);\n+      goto end;",
            "html_url": "https://github.com/neovim/neovim/pull/23850#discussion_r1219147951",
            "id": 1219147951,
            "in_reply_to_id": 1219022234,
            "line": 794,
            "node_id": "PRRC_kwDOAPphoM5Iqriv",
            "original_commit_id": "bf31417c934971315f2d7695701b18d81b8b1ff6",
            "original_line": 794,
            "original_position": 87,
            "original_start_line": 777,
            "path": "src/nvim/eval/vars.c",
            "position": 87,
            "pull_request_review_id": 1464557153,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23850",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219147951/reactions"
            },
            "side": "RIGHT",
            "start_line": 777,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-06-06T08:13:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219147951",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23850#discussion_r1219201378"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23850"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219201378"
                }
            },
            "author_association": "MEMBER",
            "body": "Actually I think the following makes more sense:\r\n\r\nAdd a `want_type` argument to force `tv_to_optval()` to get that type. If `want_type` is provided `tv_to_optval()` also doesn't need to call `get_option_value()` again.",
            "commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "created_at": "2023-06-06T08:47:46Z",
            "diff_hunk": "@@ -766,84 +766,84 @@ static char *ex_let_option(char *arg, typval_T *const tv, const bool is_const,\n       || (endchars != NULL\n           && vim_strchr(endchars, (uint8_t)(*skipwhite(p))) == NULL)) {\n     emsg(_(e_letunexp));\n-  } else {\n-    varnumber_T n = 0;\n-    getoption_T opt_type;\n-    long numval;\n-    char *stringval = NULL;\n-    const char *s = NULL;\n-    bool failed = false;\n-    uint32_t opt_p_flags;\n-    char *tofree = NULL;\n-\n-    const char c1 = *p;\n-    *p = NUL;\n+    return NULL;\n+  }\n \n-    opt_type = get_option_value(arg, &numval, &stringval, &opt_p_flags, scope);\n-    if (opt_type == gov_bool\n-        || opt_type == gov_number\n-        || opt_type == gov_hidden_bool\n-        || opt_type == gov_hidden_number) {\n-      // number, possibly hidden\n-      n = (long)tv_get_number(tv);\n-    }\n-\n-    if ((opt_p_flags & P_FUNC) && tv_is_func(*tv)) {\n-      // If the option can be set to a function reference or a lambda\n-      // and the passed value is a function reference, then convert it to\n-      // the name (string) of the function reference.\n-      s = tofree = encode_tv2string(tv, NULL);\n-    } else if (tv->v_type != VAR_BOOL && tv->v_type != VAR_SPECIAL) {\n-      // Avoid setting a string option to the text \"v:false\" or similar.\n-      s = tv_get_string_chk(tv);\n-    }\n-\n-    if (op != NULL && *op != '=') {\n-      if (((opt_type == gov_bool || opt_type == gov_number) && *op == '.')\n-          || (opt_type == gov_string && *op != '.')) {\n-        semsg(_(e_letwrong), op);\n-        failed = true;  // don't set the value\n-      } else {\n-        // number or bool\n-        if (opt_type == gov_number || opt_type == gov_bool) {\n-          switch (*op) {\n-          case '+':\n-            n = numval + n; break;\n-          case '-':\n-            n = numval - n; break;\n-          case '*':\n-            n = numval * n; break;\n-          case '/':\n-            n = num_divide(numval, n); break;\n-          case '%':\n-            n = num_modulus(numval, n); break;\n-          }\n-          s = NULL;\n-        } else if (opt_type == gov_string && stringval != NULL && s != NULL) {\n-          // string\n-          char *const oldstringval = stringval;\n-          stringval = concat_str(stringval, s);\n-          xfree(oldstringval);\n-          s = stringval;\n+  bool hidden;\n+  bool error;\n+  const char c1 = *p;\n+  *p = NUL;\n+\n+  OptVal curval = get_option_value(arg, NULL, scope, &hidden);\n+  OptVal newval = tv_to_optval(tv, arg, scope, &error);\n+\n+  // Ignore errors for num types\n+  if (newval.type != kOptValTypeNumber && newval.type != kOptValTypeBoolean && error) {\n+    goto end;\n+  }\n+\n+  // Don't assume current and new values are of the same type in order to future-proof the code for\n+  // when an option can have multiple types.\n+  const bool is_num = ((curval.type == kOptValTypeNumber || curval.type == kOptValTypeBoolean)\n+                       && (newval.type == kOptValTypeNumber || newval.type == kOptValTypeBoolean));\n+  const bool is_string = curval.type == kOptValTypeString && newval.type == kOptValTypeString;\n+\n+  if (op != NULL && *op != '=') {\n+    if (!hidden && ((is_num && *op == '.') || (is_string && *op != '.'))) {\n+      semsg(_(e_letwrong), op);\n+      goto end;",
            "html_url": "https://github.com/neovim/neovim/pull/23850#discussion_r1219201378",
            "id": 1219201378,
            "in_reply_to_id": 1219022234,
            "line": 794,
            "node_id": "PRRC_kwDOAPphoM5Iq4li",
            "original_commit_id": "bf31417c934971315f2d7695701b18d81b8b1ff6",
            "original_line": 794,
            "original_position": 87,
            "original_start_line": 777,
            "path": "src/nvim/eval/vars.c",
            "position": 87,
            "pull_request_review_id": 1464628355,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23850",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219201378/reactions"
            },
            "side": "RIGHT",
            "start_line": 777,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-06-06T08:47:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219201378",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23850#discussion_r1219208721"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23850"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219208721"
                }
            },
            "author_association": "MEMBER",
            "body": "> Actually I think the following makes more sense:\r\n> \r\n> Add a `want_type` argument to force `tv_to_optval()` to get that type. If `want_type` is provided `tv_to_optval()` also doesn't need to call `get_option_value()` again.\r\n\r\nI really like this as well. I think it's better than my idea.",
            "commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "created_at": "2023-06-06T08:50:43Z",
            "diff_hunk": "@@ -766,84 +766,84 @@ static char *ex_let_option(char *arg, typval_T *const tv, const bool is_const,\n       || (endchars != NULL\n           && vim_strchr(endchars, (uint8_t)(*skipwhite(p))) == NULL)) {\n     emsg(_(e_letunexp));\n-  } else {\n-    varnumber_T n = 0;\n-    getoption_T opt_type;\n-    long numval;\n-    char *stringval = NULL;\n-    const char *s = NULL;\n-    bool failed = false;\n-    uint32_t opt_p_flags;\n-    char *tofree = NULL;\n-\n-    const char c1 = *p;\n-    *p = NUL;\n+    return NULL;\n+  }\n \n-    opt_type = get_option_value(arg, &numval, &stringval, &opt_p_flags, scope);\n-    if (opt_type == gov_bool\n-        || opt_type == gov_number\n-        || opt_type == gov_hidden_bool\n-        || opt_type == gov_hidden_number) {\n-      // number, possibly hidden\n-      n = (long)tv_get_number(tv);\n-    }\n-\n-    if ((opt_p_flags & P_FUNC) && tv_is_func(*tv)) {\n-      // If the option can be set to a function reference or a lambda\n-      // and the passed value is a function reference, then convert it to\n-      // the name (string) of the function reference.\n-      s = tofree = encode_tv2string(tv, NULL);\n-    } else if (tv->v_type != VAR_BOOL && tv->v_type != VAR_SPECIAL) {\n-      // Avoid setting a string option to the text \"v:false\" or similar.\n-      s = tv_get_string_chk(tv);\n-    }\n-\n-    if (op != NULL && *op != '=') {\n-      if (((opt_type == gov_bool || opt_type == gov_number) && *op == '.')\n-          || (opt_type == gov_string && *op != '.')) {\n-        semsg(_(e_letwrong), op);\n-        failed = true;  // don't set the value\n-      } else {\n-        // number or bool\n-        if (opt_type == gov_number || opt_type == gov_bool) {\n-          switch (*op) {\n-          case '+':\n-            n = numval + n; break;\n-          case '-':\n-            n = numval - n; break;\n-          case '*':\n-            n = numval * n; break;\n-          case '/':\n-            n = num_divide(numval, n); break;\n-          case '%':\n-            n = num_modulus(numval, n); break;\n-          }\n-          s = NULL;\n-        } else if (opt_type == gov_string && stringval != NULL && s != NULL) {\n-          // string\n-          char *const oldstringval = stringval;\n-          stringval = concat_str(stringval, s);\n-          xfree(oldstringval);\n-          s = stringval;\n+  bool hidden;\n+  bool error;\n+  const char c1 = *p;\n+  *p = NUL;\n+\n+  OptVal curval = get_option_value(arg, NULL, scope, &hidden);\n+  OptVal newval = tv_to_optval(tv, arg, scope, &error);\n+\n+  // Ignore errors for num types\n+  if (newval.type != kOptValTypeNumber && newval.type != kOptValTypeBoolean && error) {\n+    goto end;\n+  }\n+\n+  // Don't assume current and new values are of the same type in order to future-proof the code for\n+  // when an option can have multiple types.\n+  const bool is_num = ((curval.type == kOptValTypeNumber || curval.type == kOptValTypeBoolean)\n+                       && (newval.type == kOptValTypeNumber || newval.type == kOptValTypeBoolean));\n+  const bool is_string = curval.type == kOptValTypeString && newval.type == kOptValTypeString;\n+\n+  if (op != NULL && *op != '=') {\n+    if (!hidden && ((is_num && *op == '.') || (is_string && *op != '.'))) {\n+      semsg(_(e_letwrong), op);\n+      goto end;",
            "html_url": "https://github.com/neovim/neovim/pull/23850#discussion_r1219208721",
            "id": 1219208721,
            "in_reply_to_id": 1219022234,
            "line": 794,
            "node_id": "PRRC_kwDOAPphoM5Iq6YR",
            "original_commit_id": "bf31417c934971315f2d7695701b18d81b8b1ff6",
            "original_line": 794,
            "original_position": 87,
            "original_start_line": 777,
            "path": "src/nvim/eval/vars.c",
            "position": 87,
            "pull_request_review_id": 1464637205,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23850",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219208721/reactions"
            },
            "side": "RIGHT",
            "start_line": 777,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-06-06T08:50:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219208721",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23850#discussion_r1219802650"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23850"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219802650"
                }
            },
            "author_association": "MEMBER",
            "body": "E5383 doesn't seems to be currently reachable because the type is already checked by `tv_to_optval()`, and it definitely cannot be thrown by `:set` because `:set` doesn't even call `set_option_value()`. Maybe it's better to remove this tag.",
            "commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "created_at": "2023-06-06T14:53:47Z",
            "diff_hunk": "@@ -52,7 +52,7 @@ achieve special effects.  These options come in three forms:\n \t\t\t  'lines'\n \t\t\tWarning: This may have a lot of side effects.\n \n-\t\t\t\t\t\t*:set-args* *E487* *E521*\n+\t\t\t\t\t*:set-args* *E487* *E521* *E5383*",
            "html_url": "https://github.com/neovim/neovim/pull/23850#discussion_r1219802650",
            "id": 1219802650,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ItLYa",
            "original_commit_id": "9e38fee6f95903b96b85c1d6b5f0910045569980",
            "original_line": 55,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/doc/options.txt",
            "position": null,
            "pull_request_review_id": 1465411292,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23850",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219802650/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-06-06T14:53:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219802650",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23850#discussion_r1219847841"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23850"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219847841"
                }
            },
            "author_association": "MEMBER",
            "body": "Wait, it can be reached through `nvim_set_option_value` though, right?",
            "commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "created_at": "2023-06-06T15:21:13Z",
            "diff_hunk": "@@ -52,7 +52,7 @@ achieve special effects.  These options come in three forms:\n \t\t\t  'lines'\n \t\t\tWarning: This may have a lot of side effects.\n \n-\t\t\t\t\t\t*:set-args* *E487* *E521*\n+\t\t\t\t\t*:set-args* *E487* *E521* *E5383*",
            "html_url": "https://github.com/neovim/neovim/pull/23850#discussion_r1219847841",
            "id": 1219847841,
            "in_reply_to_id": 1219802650,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ItWah",
            "original_commit_id": "9e38fee6f95903b96b85c1d6b5f0910045569980",
            "original_line": 55,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/doc/options.txt",
            "position": null,
            "pull_request_review_id": 1465471721,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23850",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219847841/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-06-06T15:21:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219847841",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23850#discussion_r1219851384"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23850"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219851384"
                }
            },
            "author_association": "MEMBER",
            "body": "Oh right. I guess the tag can be moved there then.",
            "commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "created_at": "2023-06-06T15:22:59Z",
            "diff_hunk": "@@ -52,7 +52,7 @@ achieve special effects.  These options come in three forms:\n \t\t\t  'lines'\n \t\t\tWarning: This may have a lot of side effects.\n \n-\t\t\t\t\t\t*:set-args* *E487* *E521*\n+\t\t\t\t\t*:set-args* *E487* *E521* *E5383*",
            "html_url": "https://github.com/neovim/neovim/pull/23850#discussion_r1219851384",
            "id": 1219851384,
            "in_reply_to_id": 1219802650,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ItXR4",
            "original_commit_id": "9e38fee6f95903b96b85c1d6b5f0910045569980",
            "original_line": 55,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/doc/options.txt",
            "position": null,
            "pull_request_review_id": 1465476376,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23850",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219851384/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-06-06T15:22:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219851384",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23850#discussion_r1219868611"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23850"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219868611"
                }
            },
            "author_association": "MEMBER",
            "body": "> Oh right. I guess the tag can be moved there then.\r\n\r\nAs far as I can tell though, `api.txt` doesn't have any error codes because API errors are treated differently. Which I recall is why @bfredl told me to put the `E5383` error tag alongside the other ones in `:set` ",
            "commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "created_at": "2023-06-06T15:30:56Z",
            "diff_hunk": "@@ -52,7 +52,7 @@ achieve special effects.  These options come in three forms:\n \t\t\t  'lines'\n \t\t\tWarning: This may have a lot of side effects.\n \n-\t\t\t\t\t\t*:set-args* *E487* *E521*\n+\t\t\t\t\t*:set-args* *E487* *E521* *E5383*",
            "html_url": "https://github.com/neovim/neovim/pull/23850#discussion_r1219868611",
            "id": 1219868611,
            "in_reply_to_id": 1219802650,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ItbfD",
            "original_commit_id": "9e38fee6f95903b96b85c1d6b5f0910045569980",
            "original_line": 55,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/doc/options.txt",
            "position": null,
            "pull_request_review_id": 1465496176,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23850",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219868611/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-06-06T15:30:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1219868611",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23850#discussion_r1220525574"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23850"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220525574"
                }
            },
            "author_association": "MEMBER",
            "body": "Actually many other API type mismatches don't have an error number either. So maybe just remove this error number from the message?",
            "commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "created_at": "2023-06-06T23:20:08Z",
            "diff_hunk": "@@ -52,7 +52,7 @@ achieve special effects.  These options come in three forms:\n \t\t\t  'lines'\n \t\t\tWarning: This may have a lot of side effects.\n \n-\t\t\t\t\t\t*:set-args* *E487* *E521*\n+\t\t\t\t\t*:set-args* *E487* *E521* *E5383*",
            "html_url": "https://github.com/neovim/neovim/pull/23850#discussion_r1220525574",
            "id": 1220525574,
            "in_reply_to_id": 1219802650,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Iv74G",
            "original_commit_id": "9e38fee6f95903b96b85c1d6b5f0910045569980",
            "original_line": 55,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/doc/options.txt",
            "position": null,
            "pull_request_review_id": 1466285983,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23850",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220525574/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-06-06T23:20:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220525574",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23850#discussion_r1220582738"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23850"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220582738"
                }
            },
            "author_association": "MEMBER",
            "body": "Created a new PR #23942",
            "commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "created_at": "2023-06-07T00:16:07Z",
            "diff_hunk": "@@ -52,7 +52,7 @@ achieve special effects.  These options come in three forms:\n \t\t\t  'lines'\n \t\t\tWarning: This may have a lot of side effects.\n \n-\t\t\t\t\t\t*:set-args* *E487* *E521*\n+\t\t\t\t\t*:set-args* *E487* *E521* *E5383*",
            "html_url": "https://github.com/neovim/neovim/pull/23850#discussion_r1220582738",
            "id": 1220582738,
            "in_reply_to_id": 1219802650,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5IwJ1S",
            "original_commit_id": "9e38fee6f95903b96b85c1d6b5f0910045569980",
            "original_line": 55,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/doc/options.txt",
            "position": null,
            "pull_request_review_id": 1466346968,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23850",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220582738/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-06-07T00:16:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220582738",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23850#discussion_r1220585658"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23850"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220585658"
                }
            },
            "author_association": "MEMBER",
            "body": "👀 ",
            "commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "created_at": "2023-06-07T00:18:37Z",
            "diff_hunk": "@@ -94,7 +94,7 @@\n \n #define cbuf_as_string(d, s) ((String) { .data = d, .size = s })\n \n-#define STATIC_CSTR_AS_STRING(s) ((String) { .data = s, .size = sizeof(s) - 1 })\n+#define STATIC_CSTR_AS_STRING(s) ((String) { .data = s, .size = sizeof(\"\" s) - 1 })",
            "html_url": "https://github.com/neovim/neovim/pull/23850#discussion_r1220585658",
            "id": 1220585658,
            "line": 97,
            "node_id": "PRRC_kwDOAPphoM5IwKi6",
            "original_commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "original_line": 97,
            "original_position": 5,
            "original_start_line": null,
            "path": "src/nvim/api/private/helpers.h",
            "position": 5,
            "pull_request_review_id": 1466348938,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23850",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220585658/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-06-07T00:18:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220585658",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23850#discussion_r1220591377"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23850"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220591377"
                }
            },
            "author_association": "MEMBER",
            "body": "Could name this `kOpt*` instead of `kOptVal*`, there is no risk of ambiguity in the future.\r\n\r\n```c\r\ntypedef enum {\r\n  kOptTypeNil = 0,\r\n  kOptTypeBoolean,\r\n  kOptTypeNumber,\r\n  kOptTypeString,\r\n} OptType;\r\n```",
            "commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "created_at": "2023-06-07T00:25:56Z",
            "diff_hunk": "@@ -1080,4 +1081,24 @@ typedef struct vimoption {\n // buffers.  Indicate this by setting \"var\" to VAR_WIN.\n #define VAR_WIN ((char *)-1)\n \n+// Option value type\n+typedef enum {\n+  kOptValTypeNil = 0,\n+  kOptValTypeBoolean,\n+  kOptValTypeNumber,\n+  kOptValTypeString,\n+} OptValType;",
            "html_url": "https://github.com/neovim/neovim/pull/23850#discussion_r1220591377",
            "id": 1220591377,
            "line": 1090,
            "node_id": "PRRC_kwDOAPphoM5IwL8R",
            "original_commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "original_line": 1090,
            "original_position": 18,
            "original_start_line": 1085,
            "path": "src/nvim/option_defs.h",
            "position": 18,
            "pull_request_review_id": 1466353421,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23850",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220591377/reactions"
            },
            "side": "RIGHT",
            "start_line": 1085,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-06-07T00:25:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220591377",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23850#discussion_r1220598984"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23850"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220598984"
                }
            },
            "author_association": "MEMBER",
            "body": "Won't this lead to ambiguity if an option can have multiple types in future?",
            "commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "created_at": "2023-06-07T00:34:33Z",
            "diff_hunk": "@@ -1080,4 +1081,24 @@ typedef struct vimoption {\n // buffers.  Indicate this by setting \"var\" to VAR_WIN.\n #define VAR_WIN ((char *)-1)\n \n+// Option value type\n+typedef enum {\n+  kOptValTypeNil = 0,\n+  kOptValTypeBoolean,\n+  kOptValTypeNumber,\n+  kOptValTypeString,\n+} OptValType;",
            "html_url": "https://github.com/neovim/neovim/pull/23850#discussion_r1220598984",
            "id": 1220598984,
            "in_reply_to_id": 1220591377,
            "line": 1090,
            "node_id": "PRRC_kwDOAPphoM5IwNzI",
            "original_commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "original_line": 1090,
            "original_position": 18,
            "original_start_line": 1085,
            "path": "src/nvim/option_defs.h",
            "position": 18,
            "pull_request_review_id": 1466359747,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23850",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220598984/reactions"
            },
            "side": "RIGHT",
            "start_line": 1085,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-06-07T00:34:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220598984",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23850#discussion_r1220722206"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23850"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220722206"
                }
            },
            "author_association": "MEMBER",
            "body": "Agree with zeertz. Also, the current naming scheme for OptVal types is more consistent with other enums with types.",
            "commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "created_at": "2023-06-07T02:25:16Z",
            "diff_hunk": "@@ -1080,4 +1081,24 @@ typedef struct vimoption {\n // buffers.  Indicate this by setting \"var\" to VAR_WIN.\n #define VAR_WIN ((char *)-1)\n \n+// Option value type\n+typedef enum {\n+  kOptValTypeNil = 0,\n+  kOptValTypeBoolean,\n+  kOptValTypeNumber,\n+  kOptValTypeString,\n+} OptValType;",
            "html_url": "https://github.com/neovim/neovim/pull/23850#discussion_r1220722206",
            "id": 1220722206,
            "in_reply_to_id": 1220591377,
            "line": 1090,
            "node_id": "PRRC_kwDOAPphoM5Iwr4e",
            "original_commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "original_line": 1090,
            "original_position": 18,
            "original_start_line": 1085,
            "path": "src/nvim/option_defs.h",
            "position": 18,
            "pull_request_review_id": 1466477372,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23850",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220722206/reactions"
            },
            "side": "RIGHT",
            "start_line": 1085,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-06-07T02:25:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220722206",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23850#discussion_r1220738830"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23850"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220738830"
                }
            },
            "author_association": "MEMBER",
            "body": "It seems that using a wrong type for an option gives multiple error messages in many cases in Vim. Maybe it's better to fix that in Vim first.",
            "commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "created_at": "2023-06-07T02:45:17Z",
            "diff_hunk": "@@ -766,84 +766,84 @@ static char *ex_let_option(char *arg, typval_T *const tv, const bool is_const,\n       || (endchars != NULL\n           && vim_strchr(endchars, (uint8_t)(*skipwhite(p))) == NULL)) {\n     emsg(_(e_letunexp));\n-  } else {\n-    varnumber_T n = 0;\n-    getoption_T opt_type;\n-    long numval;\n-    char *stringval = NULL;\n-    const char *s = NULL;\n-    bool failed = false;\n-    uint32_t opt_p_flags;\n-    char *tofree = NULL;\n-\n-    const char c1 = *p;\n-    *p = NUL;\n+    return NULL;\n+  }\n \n-    opt_type = get_option_value(arg, &numval, &stringval, &opt_p_flags, scope);\n-    if (opt_type == gov_bool\n-        || opt_type == gov_number\n-        || opt_type == gov_hidden_bool\n-        || opt_type == gov_hidden_number) {\n-      // number, possibly hidden\n-      n = (long)tv_get_number(tv);\n-    }\n-\n-    if ((opt_p_flags & P_FUNC) && tv_is_func(*tv)) {\n-      // If the option can be set to a function reference or a lambda\n-      // and the passed value is a function reference, then convert it to\n-      // the name (string) of the function reference.\n-      s = tofree = encode_tv2string(tv, NULL);\n-    } else if (tv->v_type != VAR_BOOL && tv->v_type != VAR_SPECIAL) {\n-      // Avoid setting a string option to the text \"v:false\" or similar.\n-      s = tv_get_string_chk(tv);\n-    }\n-\n-    if (op != NULL && *op != '=') {\n-      if (((opt_type == gov_bool || opt_type == gov_number) && *op == '.')\n-          || (opt_type == gov_string && *op != '.')) {\n-        semsg(_(e_letwrong), op);\n-        failed = true;  // don't set the value\n-      } else {\n-        // number or bool\n-        if (opt_type == gov_number || opt_type == gov_bool) {\n-          switch (*op) {\n-          case '+':\n-            n = numval + n; break;\n-          case '-':\n-            n = numval - n; break;\n-          case '*':\n-            n = numval * n; break;\n-          case '/':\n-            n = num_divide(numval, n); break;\n-          case '%':\n-            n = num_modulus(numval, n); break;\n-          }\n-          s = NULL;\n-        } else if (opt_type == gov_string && stringval != NULL && s != NULL) {\n-          // string\n-          char *const oldstringval = stringval;\n-          stringval = concat_str(stringval, s);\n-          xfree(oldstringval);\n-          s = stringval;\n+  bool hidden;\n+  bool error;\n+  const char c1 = *p;\n+  *p = NUL;\n+\n+  OptVal curval = get_option_value(arg, NULL, scope, &hidden);\n+  OptVal newval = tv_to_optval(tv, arg, scope, &error);\n+\n+  // Ignore errors for num types\n+  if (newval.type != kOptValTypeNumber && newval.type != kOptValTypeBoolean && error) {\n+    goto end;\n+  }\n+\n+  // Don't assume current and new values are of the same type in order to future-proof the code for\n+  // when an option can have multiple types.\n+  const bool is_num = ((curval.type == kOptValTypeNumber || curval.type == kOptValTypeBoolean)\n+                       && (newval.type == kOptValTypeNumber || newval.type == kOptValTypeBoolean));\n+  const bool is_string = curval.type == kOptValTypeString && newval.type == kOptValTypeString;\n+\n+  if (op != NULL && *op != '=') {\n+    if (!hidden && ((is_num && *op == '.') || (is_string && *op != '.'))) {\n+      semsg(_(e_letwrong), op);\n+      goto end;",
            "html_url": "https://github.com/neovim/neovim/pull/23850#discussion_r1220738830",
            "id": 1220738830,
            "in_reply_to_id": 1219022234,
            "line": 794,
            "node_id": "PRRC_kwDOAPphoM5Iwv8O",
            "original_commit_id": "bf31417c934971315f2d7695701b18d81b8b1ff6",
            "original_line": 794,
            "original_position": 87,
            "original_start_line": 777,
            "path": "src/nvim/eval/vars.c",
            "position": 87,
            "pull_request_review_id": 1466491969,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23850",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220738830/reactions"
            },
            "side": "RIGHT",
            "start_line": 777,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-06-07T02:45:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220738830",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23850#discussion_r1220743490"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23850"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220743490"
                }
            },
            "author_association": "MEMBER",
            "body": "> It seems that using a wrong type for an option gives multiple error messages in many cases in Vim. Maybe it's better to fix that in Vim first.\r\n\r\nCould you give me an example",
            "commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "created_at": "2023-06-07T02:50:47Z",
            "diff_hunk": "@@ -766,84 +766,84 @@ static char *ex_let_option(char *arg, typval_T *const tv, const bool is_const,\n       || (endchars != NULL\n           && vim_strchr(endchars, (uint8_t)(*skipwhite(p))) == NULL)) {\n     emsg(_(e_letunexp));\n-  } else {\n-    varnumber_T n = 0;\n-    getoption_T opt_type;\n-    long numval;\n-    char *stringval = NULL;\n-    const char *s = NULL;\n-    bool failed = false;\n-    uint32_t opt_p_flags;\n-    char *tofree = NULL;\n-\n-    const char c1 = *p;\n-    *p = NUL;\n+    return NULL;\n+  }\n \n-    opt_type = get_option_value(arg, &numval, &stringval, &opt_p_flags, scope);\n-    if (opt_type == gov_bool\n-        || opt_type == gov_number\n-        || opt_type == gov_hidden_bool\n-        || opt_type == gov_hidden_number) {\n-      // number, possibly hidden\n-      n = (long)tv_get_number(tv);\n-    }\n-\n-    if ((opt_p_flags & P_FUNC) && tv_is_func(*tv)) {\n-      // If the option can be set to a function reference or a lambda\n-      // and the passed value is a function reference, then convert it to\n-      // the name (string) of the function reference.\n-      s = tofree = encode_tv2string(tv, NULL);\n-    } else if (tv->v_type != VAR_BOOL && tv->v_type != VAR_SPECIAL) {\n-      // Avoid setting a string option to the text \"v:false\" or similar.\n-      s = tv_get_string_chk(tv);\n-    }\n-\n-    if (op != NULL && *op != '=') {\n-      if (((opt_type == gov_bool || opt_type == gov_number) && *op == '.')\n-          || (opt_type == gov_string && *op != '.')) {\n-        semsg(_(e_letwrong), op);\n-        failed = true;  // don't set the value\n-      } else {\n-        // number or bool\n-        if (opt_type == gov_number || opt_type == gov_bool) {\n-          switch (*op) {\n-          case '+':\n-            n = numval + n; break;\n-          case '-':\n-            n = numval - n; break;\n-          case '*':\n-            n = numval * n; break;\n-          case '/':\n-            n = num_divide(numval, n); break;\n-          case '%':\n-            n = num_modulus(numval, n); break;\n-          }\n-          s = NULL;\n-        } else if (opt_type == gov_string && stringval != NULL && s != NULL) {\n-          // string\n-          char *const oldstringval = stringval;\n-          stringval = concat_str(stringval, s);\n-          xfree(oldstringval);\n-          s = stringval;\n+  bool hidden;\n+  bool error;\n+  const char c1 = *p;\n+  *p = NUL;\n+\n+  OptVal curval = get_option_value(arg, NULL, scope, &hidden);\n+  OptVal newval = tv_to_optval(tv, arg, scope, &error);\n+\n+  // Ignore errors for num types\n+  if (newval.type != kOptValTypeNumber && newval.type != kOptValTypeBoolean && error) {\n+    goto end;\n+  }\n+\n+  // Don't assume current and new values are of the same type in order to future-proof the code for\n+  // when an option can have multiple types.\n+  const bool is_num = ((curval.type == kOptValTypeNumber || curval.type == kOptValTypeBoolean)\n+                       && (newval.type == kOptValTypeNumber || newval.type == kOptValTypeBoolean));\n+  const bool is_string = curval.type == kOptValTypeString && newval.type == kOptValTypeString;\n+\n+  if (op != NULL && *op != '=') {\n+    if (!hidden && ((is_num && *op == '.') || (is_string && *op != '.'))) {\n+      semsg(_(e_letwrong), op);\n+      goto end;",
            "html_url": "https://github.com/neovim/neovim/pull/23850#discussion_r1220743490",
            "id": 1220743490,
            "in_reply_to_id": 1219022234,
            "line": 794,
            "node_id": "PRRC_kwDOAPphoM5IwxFC",
            "original_commit_id": "bf31417c934971315f2d7695701b18d81b8b1ff6",
            "original_line": 794,
            "original_position": 87,
            "original_start_line": 777,
            "path": "src/nvim/eval/vars.c",
            "position": 87,
            "pull_request_review_id": 1466495844,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23850",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220743490/reactions"
            },
            "side": "RIGHT",
            "start_line": 777,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-06-07T02:50:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220743490",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23850#discussion_r1220745219"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23850"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220745219"
                }
            },
            "author_association": "MEMBER",
            "body": "`:let &number = []`\r\n```\r\nE745: Using a List as a Number\r\nE730: Using a List as a String\r\n```",
            "commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "created_at": "2023-06-07T02:52:51Z",
            "diff_hunk": "@@ -766,84 +766,84 @@ static char *ex_let_option(char *arg, typval_T *const tv, const bool is_const,\n       || (endchars != NULL\n           && vim_strchr(endchars, (uint8_t)(*skipwhite(p))) == NULL)) {\n     emsg(_(e_letunexp));\n-  } else {\n-    varnumber_T n = 0;\n-    getoption_T opt_type;\n-    long numval;\n-    char *stringval = NULL;\n-    const char *s = NULL;\n-    bool failed = false;\n-    uint32_t opt_p_flags;\n-    char *tofree = NULL;\n-\n-    const char c1 = *p;\n-    *p = NUL;\n+    return NULL;\n+  }\n \n-    opt_type = get_option_value(arg, &numval, &stringval, &opt_p_flags, scope);\n-    if (opt_type == gov_bool\n-        || opt_type == gov_number\n-        || opt_type == gov_hidden_bool\n-        || opt_type == gov_hidden_number) {\n-      // number, possibly hidden\n-      n = (long)tv_get_number(tv);\n-    }\n-\n-    if ((opt_p_flags & P_FUNC) && tv_is_func(*tv)) {\n-      // If the option can be set to a function reference or a lambda\n-      // and the passed value is a function reference, then convert it to\n-      // the name (string) of the function reference.\n-      s = tofree = encode_tv2string(tv, NULL);\n-    } else if (tv->v_type != VAR_BOOL && tv->v_type != VAR_SPECIAL) {\n-      // Avoid setting a string option to the text \"v:false\" or similar.\n-      s = tv_get_string_chk(tv);\n-    }\n-\n-    if (op != NULL && *op != '=') {\n-      if (((opt_type == gov_bool || opt_type == gov_number) && *op == '.')\n-          || (opt_type == gov_string && *op != '.')) {\n-        semsg(_(e_letwrong), op);\n-        failed = true;  // don't set the value\n-      } else {\n-        // number or bool\n-        if (opt_type == gov_number || opt_type == gov_bool) {\n-          switch (*op) {\n-          case '+':\n-            n = numval + n; break;\n-          case '-':\n-            n = numval - n; break;\n-          case '*':\n-            n = numval * n; break;\n-          case '/':\n-            n = num_divide(numval, n); break;\n-          case '%':\n-            n = num_modulus(numval, n); break;\n-          }\n-          s = NULL;\n-        } else if (opt_type == gov_string && stringval != NULL && s != NULL) {\n-          // string\n-          char *const oldstringval = stringval;\n-          stringval = concat_str(stringval, s);\n-          xfree(oldstringval);\n-          s = stringval;\n+  bool hidden;\n+  bool error;\n+  const char c1 = *p;\n+  *p = NUL;\n+\n+  OptVal curval = get_option_value(arg, NULL, scope, &hidden);\n+  OptVal newval = tv_to_optval(tv, arg, scope, &error);\n+\n+  // Ignore errors for num types\n+  if (newval.type != kOptValTypeNumber && newval.type != kOptValTypeBoolean && error) {\n+    goto end;\n+  }\n+\n+  // Don't assume current and new values are of the same type in order to future-proof the code for\n+  // when an option can have multiple types.\n+  const bool is_num = ((curval.type == kOptValTypeNumber || curval.type == kOptValTypeBoolean)\n+                       && (newval.type == kOptValTypeNumber || newval.type == kOptValTypeBoolean));\n+  const bool is_string = curval.type == kOptValTypeString && newval.type == kOptValTypeString;\n+\n+  if (op != NULL && *op != '=') {\n+    if (!hidden && ((is_num && *op == '.') || (is_string && *op != '.'))) {\n+      semsg(_(e_letwrong), op);\n+      goto end;",
            "html_url": "https://github.com/neovim/neovim/pull/23850#discussion_r1220745219",
            "id": 1220745219,
            "in_reply_to_id": 1219022234,
            "line": 794,
            "node_id": "PRRC_kwDOAPphoM5IwxgD",
            "original_commit_id": "bf31417c934971315f2d7695701b18d81b8b1ff6",
            "original_line": 794,
            "original_position": 87,
            "original_start_line": 777,
            "path": "src/nvim/eval/vars.c",
            "position": 87,
            "pull_request_review_id": 1466497189,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23850",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220745219/reactions"
            },
            "side": "RIGHT",
            "start_line": 777,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-06-07T02:52:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220745219",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23850#discussion_r1220747499"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23850"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220747499"
                }
            },
            "author_association": "MEMBER",
            "body": "I'll send a PR to Vim after deciding what to do.",
            "commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "created_at": "2023-06-07T02:55:49Z",
            "diff_hunk": "@@ -766,84 +766,84 @@ static char *ex_let_option(char *arg, typval_T *const tv, const bool is_const,\n       || (endchars != NULL\n           && vim_strchr(endchars, (uint8_t)(*skipwhite(p))) == NULL)) {\n     emsg(_(e_letunexp));\n-  } else {\n-    varnumber_T n = 0;\n-    getoption_T opt_type;\n-    long numval;\n-    char *stringval = NULL;\n-    const char *s = NULL;\n-    bool failed = false;\n-    uint32_t opt_p_flags;\n-    char *tofree = NULL;\n-\n-    const char c1 = *p;\n-    *p = NUL;\n+    return NULL;\n+  }\n \n-    opt_type = get_option_value(arg, &numval, &stringval, &opt_p_flags, scope);\n-    if (opt_type == gov_bool\n-        || opt_type == gov_number\n-        || opt_type == gov_hidden_bool\n-        || opt_type == gov_hidden_number) {\n-      // number, possibly hidden\n-      n = (long)tv_get_number(tv);\n-    }\n-\n-    if ((opt_p_flags & P_FUNC) && tv_is_func(*tv)) {\n-      // If the option can be set to a function reference or a lambda\n-      // and the passed value is a function reference, then convert it to\n-      // the name (string) of the function reference.\n-      s = tofree = encode_tv2string(tv, NULL);\n-    } else if (tv->v_type != VAR_BOOL && tv->v_type != VAR_SPECIAL) {\n-      // Avoid setting a string option to the text \"v:false\" or similar.\n-      s = tv_get_string_chk(tv);\n-    }\n-\n-    if (op != NULL && *op != '=') {\n-      if (((opt_type == gov_bool || opt_type == gov_number) && *op == '.')\n-          || (opt_type == gov_string && *op != '.')) {\n-        semsg(_(e_letwrong), op);\n-        failed = true;  // don't set the value\n-      } else {\n-        // number or bool\n-        if (opt_type == gov_number || opt_type == gov_bool) {\n-          switch (*op) {\n-          case '+':\n-            n = numval + n; break;\n-          case '-':\n-            n = numval - n; break;\n-          case '*':\n-            n = numval * n; break;\n-          case '/':\n-            n = num_divide(numval, n); break;\n-          case '%':\n-            n = num_modulus(numval, n); break;\n-          }\n-          s = NULL;\n-        } else if (opt_type == gov_string && stringval != NULL && s != NULL) {\n-          // string\n-          char *const oldstringval = stringval;\n-          stringval = concat_str(stringval, s);\n-          xfree(oldstringval);\n-          s = stringval;\n+  bool hidden;\n+  bool error;\n+  const char c1 = *p;\n+  *p = NUL;\n+\n+  OptVal curval = get_option_value(arg, NULL, scope, &hidden);\n+  OptVal newval = tv_to_optval(tv, arg, scope, &error);\n+\n+  // Ignore errors for num types\n+  if (newval.type != kOptValTypeNumber && newval.type != kOptValTypeBoolean && error) {\n+    goto end;\n+  }\n+\n+  // Don't assume current and new values are of the same type in order to future-proof the code for\n+  // when an option can have multiple types.\n+  const bool is_num = ((curval.type == kOptValTypeNumber || curval.type == kOptValTypeBoolean)\n+                       && (newval.type == kOptValTypeNumber || newval.type == kOptValTypeBoolean));\n+  const bool is_string = curval.type == kOptValTypeString && newval.type == kOptValTypeString;\n+\n+  if (op != NULL && *op != '=') {\n+    if (!hidden && ((is_num && *op == '.') || (is_string && *op != '.'))) {\n+      semsg(_(e_letwrong), op);\n+      goto end;",
            "html_url": "https://github.com/neovim/neovim/pull/23850#discussion_r1220747499",
            "id": 1220747499,
            "in_reply_to_id": 1219022234,
            "line": 794,
            "node_id": "PRRC_kwDOAPphoM5IwyDr",
            "original_commit_id": "bf31417c934971315f2d7695701b18d81b8b1ff6",
            "original_line": 794,
            "original_position": 87,
            "original_start_line": 777,
            "path": "src/nvim/eval/vars.c",
            "position": 87,
            "pull_request_review_id": 1466498993,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23850",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220747499/reactions"
            },
            "side": "RIGHT",
            "start_line": 777,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-06-07T02:55:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220747499",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23850#discussion_r1220758729"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23850"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220758729"
                }
            },
            "author_association": "MEMBER",
            "body": "Oh, that just exists to prevent non-static strings from being passed to `STATIC_CSTR_AS_STRING`",
            "commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "created_at": "2023-06-07T03:06:55Z",
            "diff_hunk": "@@ -94,7 +94,7 @@\n \n #define cbuf_as_string(d, s) ((String) { .data = d, .size = s })\n \n-#define STATIC_CSTR_AS_STRING(s) ((String) { .data = s, .size = sizeof(s) - 1 })\n+#define STATIC_CSTR_AS_STRING(s) ((String) { .data = s, .size = sizeof(\"\" s) - 1 })",
            "html_url": "https://github.com/neovim/neovim/pull/23850#discussion_r1220758729",
            "id": 1220758729,
            "in_reply_to_id": 1220585658,
            "line": 97,
            "node_id": "PRRC_kwDOAPphoM5Iw0zJ",
            "original_commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "original_line": 97,
            "original_position": 5,
            "original_start_line": null,
            "path": "src/nvim/api/private/helpers.h",
            "position": 5,
            "pull_request_review_id": 1466511096,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23850",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220758729/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-06-07T03:06:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220758729",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23850#discussion_r1220766327"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23850"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220766327"
                }
            },
            "author_association": "MEMBER",
            "body": "I guess this is applicable to `S_LEN` and `STATIC_CSTR_TO_STRING` too.",
            "commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "created_at": "2023-06-07T03:14:44Z",
            "diff_hunk": "@@ -94,7 +94,7 @@\n \n #define cbuf_as_string(d, s) ((String) { .data = d, .size = s })\n \n-#define STATIC_CSTR_AS_STRING(s) ((String) { .data = s, .size = sizeof(s) - 1 })\n+#define STATIC_CSTR_AS_STRING(s) ((String) { .data = s, .size = sizeof(\"\" s) - 1 })",
            "html_url": "https://github.com/neovim/neovim/pull/23850#discussion_r1220766327",
            "id": 1220766327,
            "in_reply_to_id": 1220585658,
            "line": 97,
            "node_id": "PRRC_kwDOAPphoM5Iw2p3",
            "original_commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "original_line": 97,
            "original_position": 5,
            "original_start_line": null,
            "path": "src/nvim/api/private/helpers.h",
            "position": 5,
            "pull_request_review_id": 1466518327,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23850",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220766327/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-06-07T03:14:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220766327",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23850#discussion_r1220777257"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23850"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220777257"
                }
            },
            "author_association": "MEMBER",
            "body": "It should be, yes",
            "commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "created_at": "2023-06-07T03:26:46Z",
            "diff_hunk": "@@ -94,7 +94,7 @@\n \n #define cbuf_as_string(d, s) ((String) { .data = d, .size = s })\n \n-#define STATIC_CSTR_AS_STRING(s) ((String) { .data = s, .size = sizeof(s) - 1 })\n+#define STATIC_CSTR_AS_STRING(s) ((String) { .data = s, .size = sizeof(\"\" s) - 1 })",
            "html_url": "https://github.com/neovim/neovim/pull/23850#discussion_r1220777257",
            "id": 1220777257,
            "in_reply_to_id": 1220585658,
            "line": 97,
            "node_id": "PRRC_kwDOAPphoM5Iw5Up",
            "original_commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "original_line": 97,
            "original_position": 5,
            "original_start_line": null,
            "path": "src/nvim/api/private/helpers.h",
            "position": 5,
            "pull_request_review_id": 1466528656,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23850",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220777257/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-06-07T03:26:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220777257",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/23850#discussion_r1220817327"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/23850"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220817327"
                }
            },
            "author_association": "MEMBER",
            "body": "@zeertzjq seems like `S_LEN` is used a lot for `char[]` variables in which case this safeguard shows an error even though `sizeof` does work as intended for `char[]` variables.",
            "commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "created_at": "2023-06-07T04:13:16Z",
            "diff_hunk": "@@ -94,7 +94,7 @@\n \n #define cbuf_as_string(d, s) ((String) { .data = d, .size = s })\n \n-#define STATIC_CSTR_AS_STRING(s) ((String) { .data = s, .size = sizeof(s) - 1 })\n+#define STATIC_CSTR_AS_STRING(s) ((String) { .data = s, .size = sizeof(\"\" s) - 1 })",
            "html_url": "https://github.com/neovim/neovim/pull/23850#discussion_r1220817327",
            "id": 1220817327,
            "in_reply_to_id": 1220585658,
            "line": 97,
            "node_id": "PRRC_kwDOAPphoM5IxDGv",
            "original_commit_id": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
            "original_line": 97,
            "original_position": 5,
            "original_start_line": null,
            "path": "src/nvim/api/private/helpers.h",
            "position": 5,
            "pull_request_review_id": 1466565211,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/23850",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220817327/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-06-07T04:41:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1220817327",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "LGTM!",
            "created_at": "2023-06-06T15:06:01Z",
            "html_url": "https://github.com/neovim/neovim/pull/23850#issuecomment-1578942401",
            "id": 1578942401,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23850",
            "node_id": "IC_kwDOAPphoM5eHL_B",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1578942401/reactions"
            },
            "updated_at": "2023-06-06T15:06:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1578942401",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/23850/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/23850/commits",
    "created_at": "2023-05-31T11:07:50Z",
    "diff_url": "https://github.com/neovim/neovim/pull/23850.diff",
    "draft": false,
    "head": {
        "label": "famiu:refactor/options/optval",
        "ref": "refactor/options/optval",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/famiu/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/famiu/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/famiu/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/famiu/neovim/branches{/branch}",
            "clone_url": "https://github.com/famiu/neovim.git",
            "collaborators_url": "https://api.github.com/repos/famiu/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/famiu/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/famiu/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/famiu/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/famiu/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/famiu/neovim/contributors",
            "created_at": "2021-10-11T04:58:58Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/famiu/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/famiu/neovim/downloads",
            "events_url": "https://api.github.com/repos/famiu/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/famiu/neovim/forks",
            "full_name": "famiu/neovim",
            "git_commits_url": "https://api.github.com/repos/famiu/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/famiu/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/famiu/neovim/git/tags{/sha}",
            "git_url": "git://github.com/famiu/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/famiu/neovim/hooks",
            "html_url": "https://github.com/famiu/neovim",
            "id": 415783665,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/famiu/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/famiu/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/famiu/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/famiu/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/famiu/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/famiu/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/famiu/neovim/merges",
            "milestones_url": "https://api.github.com/repos/famiu/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOGMha8Q",
            "notifications_url": "https://api.github.com/repos/famiu/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/famiu/neovim/pulls{/number}",
            "pushed_at": "2023-07-04T15:40:18Z",
            "releases_url": "https://api.github.com/repos/famiu/neovim/releases{/id}",
            "size": 243075,
            "ssh_url": "git@github.com:famiu/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/famiu/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/famiu/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/famiu/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/famiu/neovim/subscription",
            "svn_url": "https://github.com/famiu/neovim",
            "tags_url": "https://api.github.com/repos/famiu/neovim/tags",
            "teams_url": "https://api.github.com/repos/famiu/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/famiu/neovim/git/trees{/sha}",
            "updated_at": "2022-08-29T10:09:33Z",
            "url": "https://api.github.com/repos/famiu/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "6fd58ec320eb0fbf624117130b5bec92e63936f0",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
            "events_url": "https://api.github.com/users/famiu/events{/privacy}",
            "followers_url": "https://api.github.com/users/famiu/followers",
            "following_url": "https://api.github.com/users/famiu/following{/other_user}",
            "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/famiu",
            "id": 29580810,
            "login": "famiu",
            "node_id": "MDQ6VXNlcjI5NTgwODEw",
            "organizations_url": "https://api.github.com/users/famiu/orgs",
            "received_events_url": "https://api.github.com/users/famiu/received_events",
            "repos_url": "https://api.github.com/users/famiu/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/famiu"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/23850",
    "id": 1371974138,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/23850",
    "labels": [
        {
            "color": "C5DEF5",
            "default": false,
            "description": "changes that are not features or bugfixes",
            "id": 106949155,
            "name": "refactor",
            "node_id": "MDU6TGFiZWwxMDY5NDkxNTU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/refactor"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "",
            "id": 4242493821,
            "name": "options",
            "node_id": "LA_kwDOAPphoM7831F9",
            "url": "https://api.github.com/repos/neovim/neovim/labels/options"
        }
    ],
    "locked": false,
    "merge_commit_sha": "b3d5138fd0066fda26ef7724a542ae45eb42fc84",
    "merged_at": "2023-06-07T00:05:16Z",
    "milestone": {
        "closed_at": null,
        "closed_issues": 99,
        "created_at": "2023-02-02T14:11:43Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
            "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
            "followers_url": "https://api.github.com/users/bfredl/followers",
            "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
            "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bfredl",
            "id": 1363104,
            "login": "bfredl",
            "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
            "organizations_url": "https://api.github.com/users/bfredl/orgs",
            "received_events_url": "https://api.github.com/users/bfredl/received_events",
            "repos_url": "https://api.github.com/users/bfredl/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bfredl"
        },
        "description": "",
        "due_on": null,
        "html_url": "https://github.com/neovim/neovim/milestone/36",
        "id": 8997654,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/36/labels",
        "node_id": "MI_kwDOAPphoM4AiUsW",
        "number": 36,
        "open_issues": 139,
        "state": "open",
        "title": "0.10",
        "updated_at": "2023-08-01T12:13:54Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/36"
    },
    "node_id": "PR_kwDOAPphoM5Rxqn6",
    "number": 23850,
    "patch_url": "https://github.com/neovim/neovim/pull/23850.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/23850/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/6fd58ec320eb0fbf624117130b5bec92e63936f0",
    "title": "refactor(options): remove `getoption_T` and introduce `OptVal`",
    "updated_at": "2023-07-26T01:14:13Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/23850",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
        "events_url": "https://api.github.com/users/famiu/events{/privacy}",
        "followers_url": "https://api.github.com/users/famiu/followers",
        "following_url": "https://api.github.com/users/famiu/following{/other_user}",
        "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/famiu",
        "id": 29580810,
        "login": "famiu",
        "node_id": "MDQ6VXNlcjI5NTgwODEw",
        "organizations_url": "https://api.github.com/users/famiu/orgs",
        "received_events_url": "https://api.github.com/users/famiu/received_events",
        "repos_url": "https://api.github.com/users/famiu/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/famiu"
    }
}