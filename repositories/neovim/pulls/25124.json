{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/25124/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/25124/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/25124"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/25124"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/25124/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/25124"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/fb49d44726b0413469819cd4b9cb3e8b1a9199e4"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 4864,
            "forks_count": 4864,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1673,
            "open_issues_count": 1673,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2023-09-14T01:46:48Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 241274,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 69338,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2023-09-14T01:12:33Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 69338,
            "watchers_count": 69338,
            "web_commit_signoff_required": false
        },
        "sha": "27a566f3f8e07a4cebb426674800bdf9a7f4f222",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "- vim-patch:f5356bf6751f\n- vim-patch:fc93594d562d\n- vim-patch:8b2457a38198\n",
    "closed_at": "2023-09-13T15:23:45Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25124#discussion_r1324332851"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25124"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324332851"
                }
            },
            "author_association": "MEMBER",
            "body": "stray `<`",
            "commit_id": "fb49d44726b0413469819cd4b9cb3e8b1a9199e4",
            "created_at": "2023-09-13T10:50:32Z",
            "diff_hunk": "@@ -77,62 +79,297 @@ g:rust_fold~\n \t\t\tglobal value (all folds are closed by default).\n \n \t\t\t\t\t\t  *g:rust_bang_comment_leader*\n-g:rust_bang_comment_leader~\n+g:rust_bang_comment_leader ~\n \tSet this option to 1 to preserve the leader on multi-line doc comments\n-\tusing the /*! syntax: >\n+\tusing the `/*!` syntax: >vim\n \t    let g:rust_bang_comment_leader = 1\n <\n \n-\t\t\t\t\t\t *g:ftplugin_rust_source_path*\n-g:ftplugin_rust_source_path~\n+                                                *g:rust_use_custom_ctags_defs*\n+g:rust_use_custom_ctags_defs ~\n+\tSet this option to 1 if you have customized ctags definitions for Rust\n+\tand do not wish for those included with rust.vim to be used: >vim\n+\t    let g:rust_use_custom_ctags_defs = 1\n+<\n+\n+\tNOTE: rust.vim's built-in definitions are only used for the Tagbar Vim\n+\tplugin, if you have it installed, AND if Universal Ctags is not\n+\tdetected. This is because Universal Ctags already has built-in\n+\tsupport for Rust when used with Tagbar.\n+\n+\tAlso, note that when using ctags other than Universal Ctags, it is not\n+\tautomatically used when generating |tags| files that Vim can use to\n+\tnavigate to definitions across different source files. Feel free to\n+\tcopy `rust.vim/ctags/rust.ctags` into your own `~/.ctags` if you wish\n+\tto generate |tags| files.\n+\n+                                                 *g:ftplugin_rust_source_path*\n+g:ftplugin_rust_source_path ~\n \tSet this option to a path that should be prepended to 'path' for Rust\n-\tsource files: >\n-\t    let g:ftplugin_rust_source_path = $HOME .. '/dev/rust'\n+\tsource files: >vim\n+\t    let g:ftplugin_rust_source_path = $HOME . '/dev/rust'\n <\n \n \t\t\t\t\t\t       *g:rustfmt_command*\n-g:rustfmt_command~\n+g:rustfmt_command ~\n \tSet this option to the name of the \"rustfmt\" executable in your $PATH. If\n-\tnot specified it defaults to \"rustfmt\" : >\n+\tnot specified it defaults to \"rustfmt\" : >vim\n \t    let g:rustfmt_command = 'rustfmt'\n <\n \t\t\t\t\t\t       *g:rustfmt_autosave*\n-g:rustfmt_autosave~\n+g:rustfmt_autosave ~\n \tSet this option to 1 to run |:RustFmt| automatically when saving a\n-\tbuffer. If not specified it defaults to 0 : >\n+\tbuffer. If not specified it defaults to 0 : >vim\n \t    let g:rustfmt_autosave = 0\n+<\n+\tThere is also a buffer-local b:rustfmt_autosave that can be set for\n+\tthe same purpose, and can override the global setting.\n+\n+                                        *g:rustfmt_autosave_if_config_present*\n+g:rustfmt_autosave_if_config_present ~\n+\tSet this option to 1 to have *b:rustfmt_autosave* be set automatically\n+\tif a `rustfmt.toml` file is present in any parent directly leading to\n+\tthe file being edited. If not set, default to 0: >vim\n+\t    let g:rustfmt_autosave_if_config_present = 0\n+<\n+\tThis is useful to have `rustfmt` only execute on save, on projects\n+\tthat have `rustfmt.toml` configuration.\n+\n+\tThere is also a buffer-local b:rustfmt_autosave_if_config_present\n+\tthat can be set for the same purpose, which can overrides the global\n+\tsetting.\n <",
            "html_url": "https://github.com/neovim/neovim/pull/25124#discussion_r1324332851",
            "id": 1324332851,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5O77cz",
            "original_commit_id": "71edf38ffbe11f3ca150f07b70ceb9a3a6ae5be6",
            "original_line": 141,
            "original_position": 185,
            "original_start_line": null,
            "path": "runtime/doc/ft_rust.txt",
            "position": null,
            "pull_request_review_id": 1624255560,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25124",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324332851/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-13T11:10:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324332851",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6256228?v=4",
                "events_url": "https://api.github.com/users/seandewar/events{/privacy}",
                "followers_url": "https://api.github.com/users/seandewar/followers",
                "following_url": "https://api.github.com/users/seandewar/following{/other_user}",
                "gists_url": "https://api.github.com/users/seandewar/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seandewar",
                "id": 6256228,
                "login": "seandewar",
                "node_id": "MDQ6VXNlcjYyNTYyMjg=",
                "organizations_url": "https://api.github.com/users/seandewar/orgs",
                "received_events_url": "https://api.github.com/users/seandewar/received_events",
                "repos_url": "https://api.github.com/users/seandewar/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seandewar/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seandewar/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seandewar"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25124#discussion_r1324338266"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25124"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324338266"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n                Shortcut for `cargo build` .\r\n```\r\n\r\nBackticks with spaces inside need a space before the `.` after them to be syntax'd properly.\r\n(Same for the others below; the one ending in `,` is fine).",
            "commit_id": "fb49d44726b0413469819cd4b9cb3e8b1a9199e4",
            "created_at": "2023-09-13T10:55:48Z",
            "diff_hunk": "@@ -77,62 +79,297 @@ g:rust_fold~\n \t\t\tglobal value (all folds are closed by default).\n \n \t\t\t\t\t\t  *g:rust_bang_comment_leader*\n-g:rust_bang_comment_leader~\n+g:rust_bang_comment_leader ~\n \tSet this option to 1 to preserve the leader on multi-line doc comments\n-\tusing the /*! syntax: >\n+\tusing the `/*!` syntax: >vim\n \t    let g:rust_bang_comment_leader = 1\n <\n \n-\t\t\t\t\t\t *g:ftplugin_rust_source_path*\n-g:ftplugin_rust_source_path~\n+                                                *g:rust_use_custom_ctags_defs*\n+g:rust_use_custom_ctags_defs ~\n+\tSet this option to 1 if you have customized ctags definitions for Rust\n+\tand do not wish for those included with rust.vim to be used: >vim\n+\t    let g:rust_use_custom_ctags_defs = 1\n+<\n+\n+\tNOTE: rust.vim's built-in definitions are only used for the Tagbar Vim\n+\tplugin, if you have it installed, AND if Universal Ctags is not\n+\tdetected. This is because Universal Ctags already has built-in\n+\tsupport for Rust when used with Tagbar.\n+\n+\tAlso, note that when using ctags other than Universal Ctags, it is not\n+\tautomatically used when generating |tags| files that Vim can use to\n+\tnavigate to definitions across different source files. Feel free to\n+\tcopy `rust.vim/ctags/rust.ctags` into your own `~/.ctags` if you wish\n+\tto generate |tags| files.\n+\n+                                                 *g:ftplugin_rust_source_path*\n+g:ftplugin_rust_source_path ~\n \tSet this option to a path that should be prepended to 'path' for Rust\n-\tsource files: >\n-\t    let g:ftplugin_rust_source_path = $HOME .. '/dev/rust'\n+\tsource files: >vim\n+\t    let g:ftplugin_rust_source_path = $HOME . '/dev/rust'\n <\n \n \t\t\t\t\t\t       *g:rustfmt_command*\n-g:rustfmt_command~\n+g:rustfmt_command ~\n \tSet this option to the name of the \"rustfmt\" executable in your $PATH. If\n-\tnot specified it defaults to \"rustfmt\" : >\n+\tnot specified it defaults to \"rustfmt\" : >vim\n \t    let g:rustfmt_command = 'rustfmt'\n <\n \t\t\t\t\t\t       *g:rustfmt_autosave*\n-g:rustfmt_autosave~\n+g:rustfmt_autosave ~\n \tSet this option to 1 to run |:RustFmt| automatically when saving a\n-\tbuffer. If not specified it defaults to 0 : >\n+\tbuffer. If not specified it defaults to 0 : >vim\n \t    let g:rustfmt_autosave = 0\n+<\n+\tThere is also a buffer-local b:rustfmt_autosave that can be set for\n+\tthe same purpose, and can override the global setting.\n+\n+                                        *g:rustfmt_autosave_if_config_present*\n+g:rustfmt_autosave_if_config_present ~\n+\tSet this option to 1 to have *b:rustfmt_autosave* be set automatically\n+\tif a `rustfmt.toml` file is present in any parent directly leading to\n+\tthe file being edited. If not set, default to 0: >vim\n+\t    let g:rustfmt_autosave_if_config_present = 0\n+<\n+\tThis is useful to have `rustfmt` only execute on save, on projects\n+\tthat have `rustfmt.toml` configuration.\n+\n+\tThere is also a buffer-local b:rustfmt_autosave_if_config_present\n+\tthat can be set for the same purpose, which can overrides the global\n+\tsetting.\n <\n \t\t\t\t\t\t       *g:rustfmt_fail_silently*\n-g:rustfmt_fail_silently~\n+g:rustfmt_fail_silently ~\n \tSet this option to 1 to prevent \"rustfmt\" from populating the\n-\t|location-list| with errors. If not specified it defaults to 0: >\n+\t|location-list| with errors. If not specified it defaults to 0: >vim\n \t    let g:rustfmt_fail_silently = 0\n <\n \t\t\t\t\t\t       *g:rustfmt_options*\n-g:rustfmt_options~\n+g:rustfmt_options ~\n \tSet this option to a string of options to pass to \"rustfmt\". The\n \twrite-mode is already set to \"overwrite\". If not specified it\n-\tdefaults to '' : >\n+\tdefaults to '' : >vim\n \t    let g:rustfmt_options = ''\n <\n+                                                       *g:rustfmt_emit_files*\n+g:rustfmt_emit_files ~\n+\tIf not specified rust.vim tries to detect the right parameter to\n+\tpass to rustfmt based on its reported version. Otherwise, it\n+\tdetermines whether to run rustfmt with '--emit=files' (when 1 is\n+\tprovided) instead of '--write-mode=overwrite'. >vim\n+\t    let g:rustfmt_emit_files = 0\n+<\n \n \t\t\t\t\t\t\t  *g:rust_playpen_url*\n-g:rust_playpen_url~\n-\tSet this option to override the URL for the playpen to use: >\n+g:rust_playpen_url ~\n+\tSet this option to override the url for the playpen to use: >vim\n \t    let g:rust_playpen_url = 'https://play.rust-lang.org/'\n <\n \n \t\t\t\t\t\t\t*g:rust_shortener_url*\n-g:rust_shortener_url~\n-\tSet this option to override the URL for the URL shortener: >\n+g:rust_shortener_url ~\n+\tSet this option to override the url for the url shortener: >vim\n \t    let g:rust_shortener_url = 'https://is.gd/'\n <\n+                                                        *g:rust_clip_command*\n+g:rust_clip_command ~\n+\tSet this option to the command used in your OS to copy the Rust Play\n+\turl to the clipboard: >vim\n+\t    let g:rust_clip_command = 'xclip -selection clipboard'\n+<\n \n+                                                       *g:cargo_makeprg_params*\n+g:cargo_makeprg_params ~\n+\tSet this option to the string of parameters to pass to cargo. If not\n+\tspecified it defaults to `$*` : >vim\n+\t    let g:cargo_makeprg_params = 'build'\n+<\n+\n+                                                  *g:cargo_shell_command_runner*\n+g:cargo_shell_command_runner ~\n+\tSet this option to change how to run shell commands for cargo commands\n+\t|:Cargo|, |:Cbuild|, |:Crun|, ...\n+\tBy default, |:terminal| is used to run shell command in terminal window\n+\tasynchronously. But if you prefer |:!| for running the commands, it can\n+\tbe specified: >vim\n+\t    let g:cargo_shell_command_runner = '!'\n+<\n+\n+------------------------------------------------------------------------------\n+Integration with Syntastic                                    *rust-syntastic*\n+\n+This plugin automatically integrates with the Syntastic checker. There are two\n+checkers provided: `rustc`, and `cargo`. The latter invokes `cargo` in order to\n+build code, and the former delivers a single edited '.rs' file as a compilation\n+target directly to the Rust compiler, `rustc`.\n+\n+Because Cargo is almost exclusively being used for building Rust code these\n+days, `cargo` is the default checker. >vim\n+\n+    let g:syntastic_rust_checkers = ['cargo']\n+<\n+If you would like to change it, you can set `g:syntastic_rust_checkers` to a\n+different value.\n+                                          *g:rust_cargo_avoid_whole_workspace*\n+                                          *b:rust_cargo_avoid_whole_workspace*\n+g:rust_cargo_avoid_whole_workspace ~\n+\tWhen editing a crate that is part of a Cargo workspace, and this\n+\toption is set to 1 (the default), then `cargo` will be executed\n+\tdirectly in that crate directory instead of in the workspace\n+\tdirectory. Setting 0 prevents this behavior - however be aware that if\n+\tyou are working in large workspace, Cargo commands may take more time,\n+\tplus the Syntastic error list may include all the crates in the\n+\tworkspace. >vim\n+            let g:rust_cargo_avoid_whole_workspace = 0\n+<\n+                                              *g:rust_cargo_check_all_targets*\n+                                              *b:rust_cargo_check_all_targets*\n+g:rust_cargo_check_all_targets ~\n+\tWhen set to 1, the `--all-targets` option will be passed to cargo when\n+\tSyntastic executes it, allowing the linting of all targets under the\n+\tpackage.\n+\tThe default is 0.\n+\n+                                              *g:rust_cargo_check_all_features*\n+                                              *b:rust_cargo_check_all_features*\n+g:rust_cargo_check_all_features ~\n+\tWhen set to 1, the `--all-features` option will be passed to cargo when\n+\tSyntastic executes it, allowing the linting of all features of the\n+\tpackage.\n+\tThe default is 0.\n+\n+                                                 *g:rust_cargo_check_examples*\n+                                                 *b:rust_cargo_check_examples*\n+g:rust_cargo_check_examples ~\n+\tWhen set to 1, the `--examples` option will be passed to cargo when\n+\tSyntastic executes it, to prevent the exclusion of examples from\n+\tlinting. The examples are normally under the `examples/` directory of\n+\tthe crate.\n+\tThe default is 0.\n+\n+                                                    *g:rust_cargo_check_tests*\n+                                                    *b:rust_cargo_check_tests*\n+g:rust_cargo_check_tests ~\n+\tWhen set to 1, the `--tests` option will be passed to cargo when\n+\tSyntastic executes it, to prevent the exclusion of tests from linting.\n+\tThe tests are normally under the `tests/` directory of the crate.\n+\tThe default is 0.\n+\n+                                                  *g:rust_cargo_check_benches*\n+                                                  *b:rust_cargo_check_benches*\n+g:rust_cargo_check_benches ~\n+\tWhen set to 1, the `--benches` option will be passed to cargo when\n+\tSyntastic executes it.  The benches are normally under the `benches/`\n+\tdirectory of the crate.\n+\tThe default is 0.\n+\n+------------------------------------------------------------------------------\n+Integration with auto-pairs                                    *rust-auto-pairs*\n+\n+This plugin automatically configures the auto-pairs plugin not to duplicate\n+single quotes, which are used more often for lifetime annotations than for\n+single character literals.\n+\n+                                                  *g:rust_keep_autopairs_default*\n+g:rust_keep_autopairs_default ~\n+\n+\tDon't override auto-pairs default for the Rust filetype. The default\n+\tis 0.\n+ \n \n ==============================================================================\n-COMMANDS\t\t\t\t\t\t       *rust-commands*\n+COMMANDS                                                       *rust-commands*\n+\n+Invoking Cargo ~\n+\n+This plug defines very simple shortcuts for invoking Cargo from with Vim.\n+\n+:Cargo <args>                                                       *:Cargo*\n+                Runs `cargo` with the provided arguments.\n+\n+:Cbuild <args>                                                     *:Cbuild*\n+                Shortcut for `cargo build`.",
            "html_url": "https://github.com/neovim/neovim/pull/25124#discussion_r1324338266",
            "id": 1324338266,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5O78xa",
            "original_commit_id": "71edf38ffbe11f3ca150f07b70ceb9a3a6ae5be6",
            "original_line": 292,
            "original_position": 345,
            "original_start_line": null,
            "path": "runtime/doc/ft_rust.txt",
            "position": null,
            "pull_request_review_id": 1624255560,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25124",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324338266/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-13T11:10:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324338266",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6256228?v=4",
                "events_url": "https://api.github.com/users/seandewar/events{/privacy}",
                "followers_url": "https://api.github.com/users/seandewar/followers",
                "following_url": "https://api.github.com/users/seandewar/following{/other_user}",
                "gists_url": "https://api.github.com/users/seandewar/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seandewar",
                "id": 6256228,
                "login": "seandewar",
                "node_id": "MDQ6VXNlcjYyNTYyMjg=",
                "organizations_url": "https://api.github.com/users/seandewar/orgs",
                "received_events_url": "https://api.github.com/users/seandewar/received_events",
                "repos_url": "https://api.github.com/users/seandewar/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seandewar/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seandewar/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seandewar"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25124#discussion_r1324339227"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25124"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324339227"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n\t\tpass to `rustc --pretty` . Otherwise it will default to\r\n```",
            "commit_id": "fb49d44726b0413469819cd4b9cb3e8b1a9199e4",
            "created_at": "2023-09-13T10:56:43Z",
            "diff_hunk": "@@ -150,26 +387,26 @@ COMMANDS\t\t\t\t\t\t       *rust-commands*\n \t\tIf |g:rustc_path| is defined, it is used as the path to rustc.\n \t\tOtherwise it is assumed rustc can be found in $PATH.\n \n-:RustExpand  [args]\t\t\t\t\t\t *:RustExpand*\n+:RustExpand  [args]                                              *:RustExpand*\n :RustExpand! [TYPE] [args]\n-\t\tExpands the current file using --pretty and displays the\n+\t\tExpands the current file using `--pretty` and displays the\n \t\tresults in a new split. If the current file has unsaved\n \t\tchanges, it will be saved first using |:update|. If the\n \t\tcurrent file is an unnamed buffer, it will be written to a\n \t\ttemporary file first.\n \n \t\tThe arguments given to |:RustExpand| will be passed to rustc.\n-\t\tThis is largely intended for specifying various --cfg\n+\t\tThis is largely intended for specifying various `--cfg`\n \t\tconfigurations.\n \n \t\tIf ! is specified, the first argument is the expansion type to\n-\t\tpass to rustc --pretty. Otherwise it will default to\n+\t\tpass to `rustc --pretty`. Otherwise it will default to",
            "html_url": "https://github.com/neovim/neovim/pull/25124#discussion_r1324339227",
            "id": 1324339227,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5O79Ab",
            "original_commit_id": "71edf38ffbe11f3ca150f07b70ceb9a3a6ae5be6",
            "original_line": 403,
            "original_position": 451,
            "original_start_line": null,
            "path": "runtime/doc/ft_rust.txt",
            "position": null,
            "pull_request_review_id": 1624255560,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25124",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324339227/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-13T11:10:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324339227",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6256228?v=4",
                "events_url": "https://api.github.com/users/seandewar/events{/privacy}",
                "followers_url": "https://api.github.com/users/seandewar/followers",
                "following_url": "https://api.github.com/users/seandewar/following{/other_user}",
                "gists_url": "https://api.github.com/users/seandewar/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seandewar",
                "id": 6256228,
                "login": "seandewar",
                "node_id": "MDQ6VXNlcjYyNTYyMjg=",
                "organizations_url": "https://api.github.com/users/seandewar/orgs",
                "received_events_url": "https://api.github.com/users/seandewar/received_events",
                "repos_url": "https://api.github.com/users/seandewar/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seandewar/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seandewar/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seandewar"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25124#discussion_r1324349175"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25124"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324349175"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n\t\tTakes optional modifiers (see |<mods>|):  >vim\r\n```",
            "commit_id": "fb49d44726b0413469819cd4b9cb3e8b1a9199e4",
            "created_at": "2023-09-13T11:06:14Z",
            "diff_hunk": "@@ -191,49 +428,52 @@ COMMANDS\t\t\t\t\t\t       *rust-commands*\n \t\tIf |g:rustc_path| is defined, it is used as the path to rustc.\n \t\tOtherwise it is assumed rustc can be found in $PATH.\n \n-:RustPlay\t\t\t\t\t\t\t   *:RustPlay*\n-\t\tThis command will only work if you have web-api.vim installed\n-\t\t(available at https://github.com/mattn/webapi-vim).  It sends the\n-\t\tcurrent selection, or if nothing is selected, the entirety of the\n-\t\tcurrent buffer to the Rust playpen, and emits a message with the\n-\t\tshortened URL to the playpen.\n \n-\t\t|g:rust_playpen_url| is the base URL to the playpen, by default\n-\t\t\"https://play.rust-lang.org/\".\n+Running test(s) ~\n \n-\t\t|g:rust_shortener_url| is the base URL for the shortener, by\n-\t\tdefault \"https://is.gd/\"\n+:[N]RustTest[!] [options]                                       *:RustTest*\n+\t\tRuns a test under the cursor when the current buffer is in a\n+\t\tcargo project with \"cargo test\" command. If the command did\n+\t\tnot find any test function under the cursor, it stops with an\n+\t\terror message.\n \n-:RustFmt\t\t\t\t\t\t       *:RustFmt*\n-\t\tRuns |g:rustfmt_command| on the current buffer. If\n-\t\t|g:rustfmt_options| is set then those will be passed to the\n-\t\texecutable.\n+\t\tWhen N is given, adjust the size of the new window to N lines\n+\t\tor columns.\n \n-\t\tIf |g:rustfmt_fail_silently| is 0 (the default) then it\n-\t\twill populate the |location-list| with the errors from\n-\t\t|g:rustfmt_command|. If |g:rustfmt_fail_silently| is set to 1\n-\t\tthen it will not populate the |location-list|.\n+\t\tWhen ! is given, runs all tests regardless of current cursor\n+\t\tposition.\n \n-:RustFmtRange\t\t\t\t\t\t       *:RustFmtRange*\n-\t\tRuns |g:rustfmt_command| with selected range. See\n-\t\t|:RustFmt| for any other information.\n+\t\tWhen [options] is given, it is passed to \"cargo\" command\n+\t\targuments.\n \n-==============================================================================\n-MAPPINGS\t\t\t\t\t\t       *rust-mappings*\n+\t\tWhen the current buffer is outside cargo project, the command\n+\t\truns `rustc --test` command instead of \"cargo test\" as\n+\t\tfallback. All tests are run regardless of adding ! since there\n+\t\tis no way to run specific test function with rustc. [options]\n+\t\tis passed to `rustc` command arguments in the case.\n \n-This plugin defines mappings for |[[| and |]]| to support hanging indents.\n+\t\tTakes optional modifiers (see |<mods>|):  >",
            "html_url": "https://github.com/neovim/neovim/pull/25124#discussion_r1324349175",
            "id": 1324349175,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5O7_b3",
            "original_commit_id": "71edf38ffbe11f3ca150f07b70ceb9a3a6ae5be6",
            "original_line": 455,
            "original_position": 523,
            "original_start_line": null,
            "path": "runtime/doc/ft_rust.txt",
            "position": null,
            "pull_request_review_id": 1624255560,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25124",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324349175/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-13T11:10:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324349175",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6256228?v=4",
                "events_url": "https://api.github.com/users/seandewar/events{/privacy}",
                "followers_url": "https://api.github.com/users/seandewar/followers",
                "following_url": "https://api.github.com/users/seandewar/following{/other_user}",
                "gists_url": "https://api.github.com/users/seandewar/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seandewar",
                "id": 6256228,
                "login": "seandewar",
                "node_id": "MDQ6VXNlcjYyNTYyMjg=",
                "organizations_url": "https://api.github.com/users/seandewar/orgs",
                "received_events_url": "https://api.github.com/users/seandewar/received_events",
                "repos_url": "https://api.github.com/users/seandewar/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seandewar/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seandewar/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seandewar"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25124#discussion_r1324354789"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25124"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324354789"
                }
            },
            "author_association": "MEMBER",
            "body": "I only target the vimdoc parser :>",
            "commit_id": "fb49d44726b0413469819cd4b9cb3e8b1a9199e4",
            "created_at": "2023-09-13T11:12:01Z",
            "diff_hunk": "@@ -77,62 +79,297 @@ g:rust_fold~\n \t\t\tglobal value (all folds are closed by default).\n \n \t\t\t\t\t\t  *g:rust_bang_comment_leader*\n-g:rust_bang_comment_leader~\n+g:rust_bang_comment_leader ~\n \tSet this option to 1 to preserve the leader on multi-line doc comments\n-\tusing the /*! syntax: >\n+\tusing the `/*!` syntax: >vim\n \t    let g:rust_bang_comment_leader = 1\n <\n \n-\t\t\t\t\t\t *g:ftplugin_rust_source_path*\n-g:ftplugin_rust_source_path~\n+                                                *g:rust_use_custom_ctags_defs*\n+g:rust_use_custom_ctags_defs ~\n+\tSet this option to 1 if you have customized ctags definitions for Rust\n+\tand do not wish for those included with rust.vim to be used: >vim\n+\t    let g:rust_use_custom_ctags_defs = 1\n+<\n+\n+\tNOTE: rust.vim's built-in definitions are only used for the Tagbar Vim\n+\tplugin, if you have it installed, AND if Universal Ctags is not\n+\tdetected. This is because Universal Ctags already has built-in\n+\tsupport for Rust when used with Tagbar.\n+\n+\tAlso, note that when using ctags other than Universal Ctags, it is not\n+\tautomatically used when generating |tags| files that Vim can use to\n+\tnavigate to definitions across different source files. Feel free to\n+\tcopy `rust.vim/ctags/rust.ctags` into your own `~/.ctags` if you wish\n+\tto generate |tags| files.\n+\n+                                                 *g:ftplugin_rust_source_path*\n+g:ftplugin_rust_source_path ~\n \tSet this option to a path that should be prepended to 'path' for Rust\n-\tsource files: >\n-\t    let g:ftplugin_rust_source_path = $HOME .. '/dev/rust'\n+\tsource files: >vim\n+\t    let g:ftplugin_rust_source_path = $HOME . '/dev/rust'\n <\n \n \t\t\t\t\t\t       *g:rustfmt_command*\n-g:rustfmt_command~\n+g:rustfmt_command ~\n \tSet this option to the name of the \"rustfmt\" executable in your $PATH. If\n-\tnot specified it defaults to \"rustfmt\" : >\n+\tnot specified it defaults to \"rustfmt\" : >vim\n \t    let g:rustfmt_command = 'rustfmt'\n <\n \t\t\t\t\t\t       *g:rustfmt_autosave*\n-g:rustfmt_autosave~\n+g:rustfmt_autosave ~\n \tSet this option to 1 to run |:RustFmt| automatically when saving a\n-\tbuffer. If not specified it defaults to 0 : >\n+\tbuffer. If not specified it defaults to 0 : >vim\n \t    let g:rustfmt_autosave = 0\n+<\n+\tThere is also a buffer-local b:rustfmt_autosave that can be set for\n+\tthe same purpose, and can override the global setting.\n+\n+                                        *g:rustfmt_autosave_if_config_present*\n+g:rustfmt_autosave_if_config_present ~\n+\tSet this option to 1 to have *b:rustfmt_autosave* be set automatically\n+\tif a `rustfmt.toml` file is present in any parent directly leading to\n+\tthe file being edited. If not set, default to 0: >vim\n+\t    let g:rustfmt_autosave_if_config_present = 0\n+<\n+\tThis is useful to have `rustfmt` only execute on save, on projects\n+\tthat have `rustfmt.toml` configuration.\n+\n+\tThere is also a buffer-local b:rustfmt_autosave_if_config_present\n+\tthat can be set for the same purpose, which can overrides the global\n+\tsetting.\n <\n \t\t\t\t\t\t       *g:rustfmt_fail_silently*\n-g:rustfmt_fail_silently~\n+g:rustfmt_fail_silently ~\n \tSet this option to 1 to prevent \"rustfmt\" from populating the\n-\t|location-list| with errors. If not specified it defaults to 0: >\n+\t|location-list| with errors. If not specified it defaults to 0: >vim\n \t    let g:rustfmt_fail_silently = 0\n <\n \t\t\t\t\t\t       *g:rustfmt_options*\n-g:rustfmt_options~\n+g:rustfmt_options ~\n \tSet this option to a string of options to pass to \"rustfmt\". The\n \twrite-mode is already set to \"overwrite\". If not specified it\n-\tdefaults to '' : >\n+\tdefaults to '' : >vim\n \t    let g:rustfmt_options = ''\n <\n+                                                       *g:rustfmt_emit_files*\n+g:rustfmt_emit_files ~\n+\tIf not specified rust.vim tries to detect the right parameter to\n+\tpass to rustfmt based on its reported version. Otherwise, it\n+\tdetermines whether to run rustfmt with '--emit=files' (when 1 is\n+\tprovided) instead of '--write-mode=overwrite'. >vim\n+\t    let g:rustfmt_emit_files = 0\n+<\n \n \t\t\t\t\t\t\t  *g:rust_playpen_url*\n-g:rust_playpen_url~\n-\tSet this option to override the URL for the playpen to use: >\n+g:rust_playpen_url ~\n+\tSet this option to override the url for the playpen to use: >vim\n \t    let g:rust_playpen_url = 'https://play.rust-lang.org/'\n <\n \n \t\t\t\t\t\t\t*g:rust_shortener_url*\n-g:rust_shortener_url~\n-\tSet this option to override the URL for the URL shortener: >\n+g:rust_shortener_url ~\n+\tSet this option to override the url for the url shortener: >vim\n \t    let g:rust_shortener_url = 'https://is.gd/'\n <\n+                                                        *g:rust_clip_command*\n+g:rust_clip_command ~\n+\tSet this option to the command used in your OS to copy the Rust Play\n+\turl to the clipboard: >vim\n+\t    let g:rust_clip_command = 'xclip -selection clipboard'\n+<\n \n+                                                       *g:cargo_makeprg_params*\n+g:cargo_makeprg_params ~\n+\tSet this option to the string of parameters to pass to cargo. If not\n+\tspecified it defaults to `$*` : >vim\n+\t    let g:cargo_makeprg_params = 'build'\n+<\n+\n+                                                  *g:cargo_shell_command_runner*\n+g:cargo_shell_command_runner ~\n+\tSet this option to change how to run shell commands for cargo commands\n+\t|:Cargo|, |:Cbuild|, |:Crun|, ...\n+\tBy default, |:terminal| is used to run shell command in terminal window\n+\tasynchronously. But if you prefer |:!| for running the commands, it can\n+\tbe specified: >vim\n+\t    let g:cargo_shell_command_runner = '!'\n+<\n+\n+------------------------------------------------------------------------------\n+Integration with Syntastic                                    *rust-syntastic*\n+\n+This plugin automatically integrates with the Syntastic checker. There are two\n+checkers provided: `rustc`, and `cargo`. The latter invokes `cargo` in order to\n+build code, and the former delivers a single edited '.rs' file as a compilation\n+target directly to the Rust compiler, `rustc`.\n+\n+Because Cargo is almost exclusively being used for building Rust code these\n+days, `cargo` is the default checker. >vim\n+\n+    let g:syntastic_rust_checkers = ['cargo']\n+<\n+If you would like to change it, you can set `g:syntastic_rust_checkers` to a\n+different value.\n+                                          *g:rust_cargo_avoid_whole_workspace*\n+                                          *b:rust_cargo_avoid_whole_workspace*\n+g:rust_cargo_avoid_whole_workspace ~\n+\tWhen editing a crate that is part of a Cargo workspace, and this\n+\toption is set to 1 (the default), then `cargo` will be executed\n+\tdirectly in that crate directory instead of in the workspace\n+\tdirectory. Setting 0 prevents this behavior - however be aware that if\n+\tyou are working in large workspace, Cargo commands may take more time,\n+\tplus the Syntastic error list may include all the crates in the\n+\tworkspace. >vim\n+            let g:rust_cargo_avoid_whole_workspace = 0\n+<\n+                                              *g:rust_cargo_check_all_targets*\n+                                              *b:rust_cargo_check_all_targets*\n+g:rust_cargo_check_all_targets ~\n+\tWhen set to 1, the `--all-targets` option will be passed to cargo when\n+\tSyntastic executes it, allowing the linting of all targets under the\n+\tpackage.\n+\tThe default is 0.\n+\n+                                              *g:rust_cargo_check_all_features*\n+                                              *b:rust_cargo_check_all_features*\n+g:rust_cargo_check_all_features ~\n+\tWhen set to 1, the `--all-features` option will be passed to cargo when\n+\tSyntastic executes it, allowing the linting of all features of the\n+\tpackage.\n+\tThe default is 0.\n+\n+                                                 *g:rust_cargo_check_examples*\n+                                                 *b:rust_cargo_check_examples*\n+g:rust_cargo_check_examples ~\n+\tWhen set to 1, the `--examples` option will be passed to cargo when\n+\tSyntastic executes it, to prevent the exclusion of examples from\n+\tlinting. The examples are normally under the `examples/` directory of\n+\tthe crate.\n+\tThe default is 0.\n+\n+                                                    *g:rust_cargo_check_tests*\n+                                                    *b:rust_cargo_check_tests*\n+g:rust_cargo_check_tests ~\n+\tWhen set to 1, the `--tests` option will be passed to cargo when\n+\tSyntastic executes it, to prevent the exclusion of tests from linting.\n+\tThe tests are normally under the `tests/` directory of the crate.\n+\tThe default is 0.\n+\n+                                                  *g:rust_cargo_check_benches*\n+                                                  *b:rust_cargo_check_benches*\n+g:rust_cargo_check_benches ~\n+\tWhen set to 1, the `--benches` option will be passed to cargo when\n+\tSyntastic executes it.  The benches are normally under the `benches/`\n+\tdirectory of the crate.\n+\tThe default is 0.\n+\n+------------------------------------------------------------------------------\n+Integration with auto-pairs                                    *rust-auto-pairs*\n+\n+This plugin automatically configures the auto-pairs plugin not to duplicate\n+single quotes, which are used more often for lifetime annotations than for\n+single character literals.\n+\n+                                                  *g:rust_keep_autopairs_default*\n+g:rust_keep_autopairs_default ~\n+\n+\tDon't override auto-pairs default for the Rust filetype. The default\n+\tis 0.\n+ \n \n ==============================================================================\n-COMMANDS\t\t\t\t\t\t       *rust-commands*\n+COMMANDS                                                       *rust-commands*\n+\n+Invoking Cargo ~\n+\n+This plug defines very simple shortcuts for invoking Cargo from with Vim.\n+\n+:Cargo <args>                                                       *:Cargo*\n+                Runs `cargo` with the provided arguments.\n+\n+:Cbuild <args>                                                     *:Cbuild*\n+                Shortcut for `cargo build`.",
            "html_url": "https://github.com/neovim/neovim/pull/25124#discussion_r1324354789",
            "id": 1324354789,
            "in_reply_to_id": 1324338266,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5O8Azl",
            "original_commit_id": "71edf38ffbe11f3ca150f07b70ceb9a3a6ae5be6",
            "original_line": 292,
            "original_position": 345,
            "original_start_line": null,
            "path": "runtime/doc/ft_rust.txt",
            "position": null,
            "pull_request_review_id": 1624289668,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25124",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 1,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324354789/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-13T11:12:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324354789",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25124#discussion_r1324356476"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25124"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324356476"
                }
            },
            "author_association": "MEMBER",
            "body": "In that case, carry on :innocent: ",
            "commit_id": "fb49d44726b0413469819cd4b9cb3e8b1a9199e4",
            "created_at": "2023-09-13T11:13:44Z",
            "diff_hunk": "@@ -77,62 +79,297 @@ g:rust_fold~\n \t\t\tglobal value (all folds are closed by default).\n \n \t\t\t\t\t\t  *g:rust_bang_comment_leader*\n-g:rust_bang_comment_leader~\n+g:rust_bang_comment_leader ~\n \tSet this option to 1 to preserve the leader on multi-line doc comments\n-\tusing the /*! syntax: >\n+\tusing the `/*!` syntax: >vim\n \t    let g:rust_bang_comment_leader = 1\n <\n \n-\t\t\t\t\t\t *g:ftplugin_rust_source_path*\n-g:ftplugin_rust_source_path~\n+                                                *g:rust_use_custom_ctags_defs*\n+g:rust_use_custom_ctags_defs ~\n+\tSet this option to 1 if you have customized ctags definitions for Rust\n+\tand do not wish for those included with rust.vim to be used: >vim\n+\t    let g:rust_use_custom_ctags_defs = 1\n+<\n+\n+\tNOTE: rust.vim's built-in definitions are only used for the Tagbar Vim\n+\tplugin, if you have it installed, AND if Universal Ctags is not\n+\tdetected. This is because Universal Ctags already has built-in\n+\tsupport for Rust when used with Tagbar.\n+\n+\tAlso, note that when using ctags other than Universal Ctags, it is not\n+\tautomatically used when generating |tags| files that Vim can use to\n+\tnavigate to definitions across different source files. Feel free to\n+\tcopy `rust.vim/ctags/rust.ctags` into your own `~/.ctags` if you wish\n+\tto generate |tags| files.\n+\n+                                                 *g:ftplugin_rust_source_path*\n+g:ftplugin_rust_source_path ~\n \tSet this option to a path that should be prepended to 'path' for Rust\n-\tsource files: >\n-\t    let g:ftplugin_rust_source_path = $HOME .. '/dev/rust'\n+\tsource files: >vim\n+\t    let g:ftplugin_rust_source_path = $HOME . '/dev/rust'\n <\n \n \t\t\t\t\t\t       *g:rustfmt_command*\n-g:rustfmt_command~\n+g:rustfmt_command ~\n \tSet this option to the name of the \"rustfmt\" executable in your $PATH. If\n-\tnot specified it defaults to \"rustfmt\" : >\n+\tnot specified it defaults to \"rustfmt\" : >vim\n \t    let g:rustfmt_command = 'rustfmt'\n <\n \t\t\t\t\t\t       *g:rustfmt_autosave*\n-g:rustfmt_autosave~\n+g:rustfmt_autosave ~\n \tSet this option to 1 to run |:RustFmt| automatically when saving a\n-\tbuffer. If not specified it defaults to 0 : >\n+\tbuffer. If not specified it defaults to 0 : >vim\n \t    let g:rustfmt_autosave = 0\n+<\n+\tThere is also a buffer-local b:rustfmt_autosave that can be set for\n+\tthe same purpose, and can override the global setting.\n+\n+                                        *g:rustfmt_autosave_if_config_present*\n+g:rustfmt_autosave_if_config_present ~\n+\tSet this option to 1 to have *b:rustfmt_autosave* be set automatically\n+\tif a `rustfmt.toml` file is present in any parent directly leading to\n+\tthe file being edited. If not set, default to 0: >vim\n+\t    let g:rustfmt_autosave_if_config_present = 0\n+<\n+\tThis is useful to have `rustfmt` only execute on save, on projects\n+\tthat have `rustfmt.toml` configuration.\n+\n+\tThere is also a buffer-local b:rustfmt_autosave_if_config_present\n+\tthat can be set for the same purpose, which can overrides the global\n+\tsetting.\n <\n \t\t\t\t\t\t       *g:rustfmt_fail_silently*\n-g:rustfmt_fail_silently~\n+g:rustfmt_fail_silently ~\n \tSet this option to 1 to prevent \"rustfmt\" from populating the\n-\t|location-list| with errors. If not specified it defaults to 0: >\n+\t|location-list| with errors. If not specified it defaults to 0: >vim\n \t    let g:rustfmt_fail_silently = 0\n <\n \t\t\t\t\t\t       *g:rustfmt_options*\n-g:rustfmt_options~\n+g:rustfmt_options ~\n \tSet this option to a string of options to pass to \"rustfmt\". The\n \twrite-mode is already set to \"overwrite\". If not specified it\n-\tdefaults to '' : >\n+\tdefaults to '' : >vim\n \t    let g:rustfmt_options = ''\n <\n+                                                       *g:rustfmt_emit_files*\n+g:rustfmt_emit_files ~\n+\tIf not specified rust.vim tries to detect the right parameter to\n+\tpass to rustfmt based on its reported version. Otherwise, it\n+\tdetermines whether to run rustfmt with '--emit=files' (when 1 is\n+\tprovided) instead of '--write-mode=overwrite'. >vim\n+\t    let g:rustfmt_emit_files = 0\n+<\n \n \t\t\t\t\t\t\t  *g:rust_playpen_url*\n-g:rust_playpen_url~\n-\tSet this option to override the URL for the playpen to use: >\n+g:rust_playpen_url ~\n+\tSet this option to override the url for the playpen to use: >vim\n \t    let g:rust_playpen_url = 'https://play.rust-lang.org/'\n <\n \n \t\t\t\t\t\t\t*g:rust_shortener_url*\n-g:rust_shortener_url~\n-\tSet this option to override the URL for the URL shortener: >\n+g:rust_shortener_url ~\n+\tSet this option to override the url for the url shortener: >vim\n \t    let g:rust_shortener_url = 'https://is.gd/'\n <\n+                                                        *g:rust_clip_command*\n+g:rust_clip_command ~\n+\tSet this option to the command used in your OS to copy the Rust Play\n+\turl to the clipboard: >vim\n+\t    let g:rust_clip_command = 'xclip -selection clipboard'\n+<\n \n+                                                       *g:cargo_makeprg_params*\n+g:cargo_makeprg_params ~\n+\tSet this option to the string of parameters to pass to cargo. If not\n+\tspecified it defaults to `$*` : >vim\n+\t    let g:cargo_makeprg_params = 'build'\n+<\n+\n+                                                  *g:cargo_shell_command_runner*\n+g:cargo_shell_command_runner ~\n+\tSet this option to change how to run shell commands for cargo commands\n+\t|:Cargo|, |:Cbuild|, |:Crun|, ...\n+\tBy default, |:terminal| is used to run shell command in terminal window\n+\tasynchronously. But if you prefer |:!| for running the commands, it can\n+\tbe specified: >vim\n+\t    let g:cargo_shell_command_runner = '!'\n+<\n+\n+------------------------------------------------------------------------------\n+Integration with Syntastic                                    *rust-syntastic*\n+\n+This plugin automatically integrates with the Syntastic checker. There are two\n+checkers provided: `rustc`, and `cargo`. The latter invokes `cargo` in order to\n+build code, and the former delivers a single edited '.rs' file as a compilation\n+target directly to the Rust compiler, `rustc`.\n+\n+Because Cargo is almost exclusively being used for building Rust code these\n+days, `cargo` is the default checker. >vim\n+\n+    let g:syntastic_rust_checkers = ['cargo']\n+<\n+If you would like to change it, you can set `g:syntastic_rust_checkers` to a\n+different value.\n+                                          *g:rust_cargo_avoid_whole_workspace*\n+                                          *b:rust_cargo_avoid_whole_workspace*\n+g:rust_cargo_avoid_whole_workspace ~\n+\tWhen editing a crate that is part of a Cargo workspace, and this\n+\toption is set to 1 (the default), then `cargo` will be executed\n+\tdirectly in that crate directory instead of in the workspace\n+\tdirectory. Setting 0 prevents this behavior - however be aware that if\n+\tyou are working in large workspace, Cargo commands may take more time,\n+\tplus the Syntastic error list may include all the crates in the\n+\tworkspace. >vim\n+            let g:rust_cargo_avoid_whole_workspace = 0\n+<\n+                                              *g:rust_cargo_check_all_targets*\n+                                              *b:rust_cargo_check_all_targets*\n+g:rust_cargo_check_all_targets ~\n+\tWhen set to 1, the `--all-targets` option will be passed to cargo when\n+\tSyntastic executes it, allowing the linting of all targets under the\n+\tpackage.\n+\tThe default is 0.\n+\n+                                              *g:rust_cargo_check_all_features*\n+                                              *b:rust_cargo_check_all_features*\n+g:rust_cargo_check_all_features ~\n+\tWhen set to 1, the `--all-features` option will be passed to cargo when\n+\tSyntastic executes it, allowing the linting of all features of the\n+\tpackage.\n+\tThe default is 0.\n+\n+                                                 *g:rust_cargo_check_examples*\n+                                                 *b:rust_cargo_check_examples*\n+g:rust_cargo_check_examples ~\n+\tWhen set to 1, the `--examples` option will be passed to cargo when\n+\tSyntastic executes it, to prevent the exclusion of examples from\n+\tlinting. The examples are normally under the `examples/` directory of\n+\tthe crate.\n+\tThe default is 0.\n+\n+                                                    *g:rust_cargo_check_tests*\n+                                                    *b:rust_cargo_check_tests*\n+g:rust_cargo_check_tests ~\n+\tWhen set to 1, the `--tests` option will be passed to cargo when\n+\tSyntastic executes it, to prevent the exclusion of tests from linting.\n+\tThe tests are normally under the `tests/` directory of the crate.\n+\tThe default is 0.\n+\n+                                                  *g:rust_cargo_check_benches*\n+                                                  *b:rust_cargo_check_benches*\n+g:rust_cargo_check_benches ~\n+\tWhen set to 1, the `--benches` option will be passed to cargo when\n+\tSyntastic executes it.  The benches are normally under the `benches/`\n+\tdirectory of the crate.\n+\tThe default is 0.\n+\n+------------------------------------------------------------------------------\n+Integration with auto-pairs                                    *rust-auto-pairs*\n+\n+This plugin automatically configures the auto-pairs plugin not to duplicate\n+single quotes, which are used more often for lifetime annotations than for\n+single character literals.\n+\n+                                                  *g:rust_keep_autopairs_default*\n+g:rust_keep_autopairs_default ~\n+\n+\tDon't override auto-pairs default for the Rust filetype. The default\n+\tis 0.\n+ \n \n ==============================================================================\n-COMMANDS\t\t\t\t\t\t       *rust-commands*\n+COMMANDS                                                       *rust-commands*\n+\n+Invoking Cargo ~\n+\n+This plug defines very simple shortcuts for invoking Cargo from with Vim.\n+\n+:Cargo <args>                                                       *:Cargo*\n+                Runs `cargo` with the provided arguments.\n+\n+:Cbuild <args>                                                     *:Cbuild*\n+                Shortcut for `cargo build`.",
            "html_url": "https://github.com/neovim/neovim/pull/25124#discussion_r1324356476",
            "id": 1324356476,
            "in_reply_to_id": 1324338266,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5O8BN8",
            "original_commit_id": "71edf38ffbe11f3ca150f07b70ceb9a3a6ae5be6",
            "original_line": 292,
            "original_position": 345,
            "original_start_line": null,
            "path": "runtime/doc/ft_rust.txt",
            "position": null,
            "pull_request_review_id": 1624292297,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25124",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324356476/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-13T11:13:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1324356476",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6256228?v=4",
                "events_url": "https://api.github.com/users/seandewar/events{/privacy}",
                "followers_url": "https://api.github.com/users/seandewar/followers",
                "following_url": "https://api.github.com/users/seandewar/following{/other_user}",
                "gists_url": "https://api.github.com/users/seandewar/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seandewar",
                "id": 6256228,
                "login": "seandewar",
                "node_id": "MDQ6VXNlcjYyNTYyMjg=",
                "organizations_url": "https://api.github.com/users/seandewar/orgs",
                "received_events_url": "https://api.github.com/users/seandewar/received_events",
                "repos_url": "https://api.github.com/users/seandewar/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seandewar/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seandewar/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seandewar"
            }
        }
    ],
    "comment_regular_data": [],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/25124/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/25124/commits",
    "created_at": "2023-09-12T20:37:15Z",
    "diff_url": "https://github.com/neovim/neovim/pull/25124.diff",
    "draft": false,
    "head": {
        "label": "clason:vim-f5356bf6751f",
        "ref": "vim-f5356bf6751f",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/clason/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/clason/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/clason/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/clason/neovim/branches{/branch}",
            "clone_url": "https://github.com/clason/neovim.git",
            "collaborators_url": "https://api.github.com/repos/clason/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/clason/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/clason/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/clason/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/clason/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/clason/neovim/contributors",
            "created_at": "2022-06-19T14:32:07Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/clason/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/clason/neovim/downloads",
            "events_url": "https://api.github.com/repos/clason/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/clason/neovim/forks",
            "full_name": "clason/neovim",
            "git_commits_url": "https://api.github.com/repos/clason/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/clason/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/clason/neovim/git/tags{/sha}",
            "git_url": "git://github.com/clason/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/clason/neovim/hooks",
            "html_url": "https://github.com/clason/neovim",
            "id": 505133677,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/clason/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/clason/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/clason/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/clason/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/clason/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/clason/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/clason/neovim/merges",
            "milestones_url": "https://api.github.com/repos/clason/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOHhu6bQ",
            "notifications_url": "https://api.github.com/repos/clason/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/clason/neovim/pulls{/number}",
            "pushed_at": "2023-09-13T15:23:50Z",
            "releases_url": "https://api.github.com/repos/clason/neovim/releases{/id}",
            "size": 238466,
            "ssh_url": "git@github.com:clason/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/clason/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/clason/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/clason/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/clason/neovim/subscription",
            "svn_url": "https://github.com/clason/neovim",
            "tags_url": "https://api.github.com/repos/clason/neovim/tags",
            "teams_url": "https://api.github.com/repos/clason/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/clason/neovim/git/trees{/sha}",
            "updated_at": "2023-01-31T19:57:54Z",
            "url": "https://api.github.com/repos/clason/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "fb49d44726b0413469819cd4b9cb3e8b1a9199e4",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
            "events_url": "https://api.github.com/users/clason/events{/privacy}",
            "followers_url": "https://api.github.com/users/clason/followers",
            "following_url": "https://api.github.com/users/clason/following{/other_user}",
            "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/clason",
            "id": 2361214,
            "login": "clason",
            "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
            "organizations_url": "https://api.github.com/users/clason/orgs",
            "received_events_url": "https://api.github.com/users/clason/received_events",
            "repos_url": "https://api.github.com/users/clason/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/clason"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/25124",
    "id": 1512763338,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25124",
    "labels": [
        {
            "color": "e6e6e6",
            "default": false,
            "description": "See https://github.com/neovim/neovim/wiki/Merging-patches-from-upstream-Vim",
            "id": 843184430,
            "name": "vim-patch",
            "node_id": "MDU6TGFiZWw4NDMxODQ0MzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/vim-patch"
        }
    ],
    "locked": false,
    "merge_commit_sha": "199cf5a526a1a9bf826272caac99427385810500",
    "merged_at": "2023-09-13T15:23:45Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5aKu_K",
    "number": 25124,
    "patch_url": "https://github.com/neovim/neovim/pull/25124.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/25124/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/fb49d44726b0413469819cd4b9cb3e8b1a9199e4",
    "title": "vim-patch: update runtime files",
    "updated_at": "2023-09-13T15:23:50Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/25124",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
        "events_url": "https://api.github.com/users/clason/events{/privacy}",
        "followers_url": "https://api.github.com/users/clason/followers",
        "following_url": "https://api.github.com/users/clason/following{/other_user}",
        "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/clason",
        "id": 2361214,
        "login": "clason",
        "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
        "organizations_url": "https://api.github.com/users/clason/orgs",
        "received_events_url": "https://api.github.com/users/clason/received_events",
        "repos_url": "https://api.github.com/users/clason/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/clason"
    }
}