{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/1617/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/1617/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/1617"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/1617"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/1617/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/1617"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/08a2480632030ee2e705a3a8a88da3c1b7eb32c5"
        }
    },
    "active_lock_reason": null,
    "assignee": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
        "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
        "followers_url": "https://api.github.com/users/justinmk/followers",
        "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
        "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/justinmk",
        "id": 1359421,
        "login": "justinmk",
        "node_id": "MDQ6VXNlcjEzNTk0MjE=",
        "organizations_url": "https://api.github.com/users/justinmk/orgs",
        "received_events_url": "https://api.github.com/users/justinmk/received_events",
        "repos_url": "https://api.github.com/users/justinmk/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/justinmk",
        "user_view_type": "public"
    },
    "assignees": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk",
            "user_view_type": "public"
        }
    ],
    "author_association": "NONE",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5766,
            "forks_count": 5766,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1818,
            "open_issues_count": 1818,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-12-23T21:39:36Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 300480,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 84495,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-12-24T02:11:47Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 84495,
            "watchers_count": 84495,
            "web_commit_signoff_required": false
        },
        "sha": "40adddd8e5ec5e20c29647c71f00632f6bcf4fa1",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "The two commits in this PR originates as a followup to issue #1432. I wanted to add a test case or two to detect the issue. In the act of doing this, I realize a few more test cases of a similar nature could be added. Also, I added a test to directly verify temp directory deletion.\n\nThe new test cases are mostly concerned with testing two successive calls of gettempdir or tempname, and when the calls are interrupted by deleting the temp directory, or by doing the other operation. For example,\n1. gettempdir, gettempdir\n2. gettempdir, deltempdir, gettempdir - 'internally' delete temp directory\n3. gettempdir, lfs.rmdir, gettempdir - 'externally' delete temp directory\n4. gettempdir, tempname, gettempdir\n\nTest case 1 appears in the original unit test, which is a check for idempotency.\nTest case 4 checks for any side effects between gettempdir and tempname.\nTest case 3 checks for #1432 and is to be compared with test case 2. Test case 3 is written to succeed, although it should more naturally fail, if it wasn't for the performance hit that will occur (see comments in #1432).\n\nA similar test sequence is repeated for tempname.\n\nRoughly speaking, the first commit re-expresses the original unit test with shortcut aliases so there is less verbosity. The first commit also merges two of the test cases into one. The second commit adds the extra test cases.\n",
    "closed_at": "2024-12-17T12:25:18Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/1617#discussion_r21402744"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/1617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/21402744"
                }
            },
            "author_association": "NONE",
            "body": "Why not just define the above `os.*` locals as\n\n``` lua\nlocal isdir, is_writable, exists = ...\n```\n",
            "commit_id": "08a2480632030ee2e705a3a8a88da3c1b7eb32c5",
            "created_at": "2014-12-05T21:48:20Z",
            "diff_hunk": "@@ -1,60 +1,151 @@\n local lfs = require 'lfs'\n+\n local helpers = require 'test.unit.helpers'\n+local cimport, vim_init, ffi, to_cstr =\n+  helpers.cimport, helpers.vim_init, helpers.ffi, helpers.to_cstr\n \n local os = helpers.cimport './src/nvim/os/os.h'\n-local tempfile = helpers.cimport './src/nvim/tempfile.h'\n+local os_isdir, os_file_is_writable, os_file_exists =\n+  os.os_isdir, os.os_file_is_writable, os.os_file_exists\n \n-helpers.vim_init()\n+local is_dir = function(x) return os_isdir(x) end",
            "html_url": "https://github.com/neovim/neovim/pull/1617#discussion_r21402744",
            "id": 21402744,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDAyNzQ0",
            "original_commit_id": "f793c2859143fc3bcdbd95437523a8868883d015",
            "original_line": null,
            "original_position": 13,
            "original_start_line": null,
            "path": "test/unit/tempfile_spec.lua",
            "position": null,
            "pull_request_review_id": null,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/1617",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21402744/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2014-12-11T21:46:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21402744",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38515?v=4",
                "events_url": "https://api.github.com/users/splinterofchaos/events{/privacy}",
                "followers_url": "https://api.github.com/users/splinterofchaos/followers",
                "following_url": "https://api.github.com/users/splinterofchaos/following{/other_user}",
                "gists_url": "https://api.github.com/users/splinterofchaos/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/splinterofchaos",
                "id": 38515,
                "login": "splinterofchaos",
                "node_id": "MDQ6VXNlcjM4NTE1",
                "organizations_url": "https://api.github.com/users/splinterofchaos/orgs",
                "received_events_url": "https://api.github.com/users/splinterofchaos/received_events",
                "repos_url": "https://api.github.com/users/splinterofchaos/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/splinterofchaos/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/splinterofchaos/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/splinterofchaos",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/1617#discussion_r21402884"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/1617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/21402884"
                }
            },
            "author_association": "NONE",
            "body": "Why not\n\n``` lua\nif f ~= '.' and f ~= '..' then return false end\n```\n",
            "commit_id": "08a2480632030ee2e705a3a8a88da3c1b7eb32c5",
            "created_at": "2014-12-05T21:50:45Z",
            "diff_hunk": "@@ -1,60 +1,151 @@\n local lfs = require 'lfs'\n+\n local helpers = require 'test.unit.helpers'\n+local cimport, vim_init, ffi, to_cstr =\n+  helpers.cimport, helpers.vim_init, helpers.ffi, helpers.to_cstr\n \n local os = helpers.cimport './src/nvim/os/os.h'\n-local tempfile = helpers.cimport './src/nvim/tempfile.h'\n+local os_isdir, os_file_is_writable, os_file_exists =\n+  os.os_isdir, os.os_file_is_writable, os.os_file_exists\n \n-helpers.vim_init()\n+local is_dir = function(x) return os_isdir(x) end\n \n-describe('tempfile related functions', function()\n-  after_each(function()\n-    tempfile.vim_deltempdir()\n-  end)\n+-- os_file_is_writable returns 2 for a directory which we have rights\n+-- to write into.\n+local is_writable = function(x) return os_file_is_writable(to_cstr(x)) == 2 end\n \n-  local vim_gettempdir = function()\n-    return helpers.ffi.string(tempfile.vim_gettempdir())\n+local is_empty = function(x)\n+  local r = true\n+  for f in lfs.dir(x) do\n+    r = r and (f == '.' or f == '..')",
            "html_url": "https://github.com/neovim/neovim/pull/1617#discussion_r21402884",
            "id": 21402884,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDAyODg0",
            "original_commit_id": "f793c2859143fc3bcdbd95437523a8868883d015",
            "original_line": null,
            "original_position": 28,
            "original_start_line": null,
            "path": "test/unit/tempfile_spec.lua",
            "position": null,
            "pull_request_review_id": null,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/1617",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21402884/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2014-12-11T21:46:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21402884",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38515?v=4",
                "events_url": "https://api.github.com/users/splinterofchaos/events{/privacy}",
                "followers_url": "https://api.github.com/users/splinterofchaos/followers",
                "following_url": "https://api.github.com/users/splinterofchaos/following{/other_user}",
                "gists_url": "https://api.github.com/users/splinterofchaos/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/splinterofchaos",
                "id": 38515,
                "login": "splinterofchaos",
                "node_id": "MDQ6VXNlcjM4NTE1",
                "organizations_url": "https://api.github.com/users/splinterofchaos/orgs",
                "received_events_url": "https://api.github.com/users/splinterofchaos/received_events",
                "repos_url": "https://api.github.com/users/splinterofchaos/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/splinterofchaos/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/splinterofchaos/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/splinterofchaos",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/1617#discussion_r21403249"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/1617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/21403249"
                }
            },
            "author_association": "NONE",
            "body": "See `helpers.eq` and `neq`. I don't think we have an equivalent for `assert.True/False`, and that could be generally useful, though I don't think `ok`/`notok` are good names for it. (If a return value of `false` means the test passed, `notok()` would imply that's a bad thing.)\n",
            "commit_id": "08a2480632030ee2e705a3a8a88da3c1b7eb32c5",
            "created_at": "2014-12-05T21:56:57Z",
            "diff_hunk": "@@ -1,60 +1,151 @@\n local lfs = require 'lfs'\n+\n local helpers = require 'test.unit.helpers'\n+local cimport, vim_init, ffi, to_cstr =\n+  helpers.cimport, helpers.vim_init, helpers.ffi, helpers.to_cstr\n \n local os = helpers.cimport './src/nvim/os/os.h'\n-local tempfile = helpers.cimport './src/nvim/tempfile.h'\n+local os_isdir, os_file_is_writable, os_file_exists =\n+  os.os_isdir, os.os_file_is_writable, os.os_file_exists\n \n-helpers.vim_init()\n+local is_dir = function(x) return os_isdir(x) end\n \n-describe('tempfile related functions', function()\n-  after_each(function()\n-    tempfile.vim_deltempdir()\n-  end)\n+-- os_file_is_writable returns 2 for a directory which we have rights\n+-- to write into.\n+local is_writable = function(x) return os_file_is_writable(to_cstr(x)) == 2 end\n \n-  local vim_gettempdir = function()\n-    return helpers.ffi.string(tempfile.vim_gettempdir())\n+local is_empty = function(x)\n+  local r = true\n+  for f in lfs.dir(x) do\n+    r = r and (f == '.' or f == '..')\n   end\n+  return r\n+end\n+\n+local file_exists = function(x) return os_file_exists(x) end\n+\n+local path_contains_dir = function(path, dir)\n+  return (path ~= nil) and (path:find(\"^\" .. tostring(dir) .. \"[^/]*$\") ~= nil)\n+end\n+\n+local dir_of_path = function(path)\n+  return path:match('(.-)[^/]+$') or ''\n+end\n+\n+local ok = function(x) return assert.True(x) end\n+local notok = function(x) return assert.False(x) end",
            "html_url": "https://github.com/neovim/neovim/pull/1617#discussion_r21403249",
            "id": 21403249,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDAzMjQ5",
            "original_commit_id": "f793c2859143fc3bcdbd95437523a8868883d015",
            "original_line": null,
            "original_position": 44,
            "original_start_line": null,
            "path": "test/unit/tempfile_spec.lua",
            "position": null,
            "pull_request_review_id": null,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/1617",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21403249/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2014-12-11T21:46:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21403249",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38515?v=4",
                "events_url": "https://api.github.com/users/splinterofchaos/events{/privacy}",
                "followers_url": "https://api.github.com/users/splinterofchaos/followers",
                "following_url": "https://api.github.com/users/splinterofchaos/following{/other_user}",
                "gists_url": "https://api.github.com/users/splinterofchaos/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/splinterofchaos",
                "id": 38515,
                "login": "splinterofchaos",
                "node_id": "MDQ6VXNlcjM4NTE1",
                "organizations_url": "https://api.github.com/users/splinterofchaos/orgs",
                "received_events_url": "https://api.github.com/users/splinterofchaos/received_events",
                "repos_url": "https://api.github.com/users/splinterofchaos/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/splinterofchaos/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/splinterofchaos/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/splinterofchaos",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/1617#discussion_r21403550"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/1617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/21403550"
                }
            },
            "author_association": "NONE",
            "body": "If this line fails, we won't know which one failed. May be best to put all of these on their own line.\n\nAlso, if there was a bug in `os_isdir()`, this test might result in a false positive or false negative. I think we should prefer to `lfs` to ensure correct behaviour, if possible.\n",
            "commit_id": "08a2480632030ee2e705a3a8a88da3c1b7eb32c5",
            "created_at": "2014-12-05T22:02:14Z",
            "diff_hunk": "@@ -1,60 +1,151 @@\n local lfs = require 'lfs'\n+\n local helpers = require 'test.unit.helpers'\n+local cimport, vim_init, ffi, to_cstr =\n+  helpers.cimport, helpers.vim_init, helpers.ffi, helpers.to_cstr\n \n local os = helpers.cimport './src/nvim/os/os.h'\n-local tempfile = helpers.cimport './src/nvim/tempfile.h'\n+local os_isdir, os_file_is_writable, os_file_exists =\n+  os.os_isdir, os.os_file_is_writable, os.os_file_exists\n \n-helpers.vim_init()\n+local is_dir = function(x) return os_isdir(x) end\n \n-describe('tempfile related functions', function()\n-  after_each(function()\n-    tempfile.vim_deltempdir()\n-  end)\n+-- os_file_is_writable returns 2 for a directory which we have rights\n+-- to write into.\n+local is_writable = function(x) return os_file_is_writable(to_cstr(x)) == 2 end\n \n-  local vim_gettempdir = function()\n-    return helpers.ffi.string(tempfile.vim_gettempdir())\n+local is_empty = function(x)\n+  local r = true\n+  for f in lfs.dir(x) do\n+    r = r and (f == '.' or f == '..')\n   end\n+  return r\n+end\n+\n+local file_exists = function(x) return os_file_exists(x) end\n+\n+local path_contains_dir = function(path, dir)\n+  return (path ~= nil) and (path:find(\"^\" .. tostring(dir) .. \"[^/]*$\") ~= nil)\n+end\n+\n+local dir_of_path = function(path)\n+  return path:match('(.-)[^/]+$') or ''\n+end\n+\n+local ok = function(x) return assert.True(x) end\n+local notok = function(x) return assert.False(x) end\n+\n+local tempfile = helpers.cimport './src/nvim/tempfile.h'\n+local vim_gettempdir = function() return ffi.string(tempfile.vim_gettempdir()) end\n+local vim_tempname = function() return ffi.string(tempfile.vim_tempname()) end\n+local vim_deltempdir = function() return tempfile.vim_deltempdir() end\n+\n+vim_init()\n+\n+describe('tempfile module:', function()\n+\n+  after_each(function() vim_deltempdir() end)\n \n   describe('vim_gettempdir', function()\n-    it('returns path to Neovim own temp directory', function()\n+\n+    it('generates directory name to a writable, empty directory on first call', function()\n       local dir = vim_gettempdir()\n-      assert.True(dir ~= nil and dir:len() > 0)\n-      -- os_file_is_writable returns 2 for a directory which we have rights\n-      -- to write into.\n-      assert.equals(os.os_file_is_writable(helpers.to_cstr(dir)), 2)\n-      for entry in lfs.dir(dir) do\n-        assert.True(entry == '.' or entry == '..')\n-      end\n+      ok(dir ~= nil and dir:len() > 0)\n+      ok((is_dir(dir)) and (is_writable(dir)) and (is_empty(dir)))",
            "html_url": "https://github.com/neovim/neovim/pull/1617#discussion_r21403550",
            "id": 21403550,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDAzNTUw",
            "original_commit_id": "f793c2859143fc3bcdbd95437523a8868883d015",
            "original_line": null,
            "original_position": 70,
            "original_start_line": null,
            "path": "test/unit/tempfile_spec.lua",
            "position": null,
            "pull_request_review_id": null,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/1617",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21403550/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2014-12-11T21:46:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21403550",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38515?v=4",
                "events_url": "https://api.github.com/users/splinterofchaos/events{/privacy}",
                "followers_url": "https://api.github.com/users/splinterofchaos/followers",
                "following_url": "https://api.github.com/users/splinterofchaos/following{/other_user}",
                "gists_url": "https://api.github.com/users/splinterofchaos/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/splinterofchaos",
                "id": 38515,
                "login": "splinterofchaos",
                "node_id": "MDQ6VXNlcjM4NTE1",
                "organizations_url": "https://api.github.com/users/splinterofchaos/orgs",
                "received_events_url": "https://api.github.com/users/splinterofchaos/received_events",
                "repos_url": "https://api.github.com/users/splinterofchaos/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/splinterofchaos/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/splinterofchaos/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/splinterofchaos",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/1617#discussion_r21403701"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/1617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/21403701"
                }
            },
            "author_association": "NONE",
            "body": "Stylistically, the declarations should not be separate from initialization. http://neovim.org/develop/style-guide.xml#Local_Variables\n",
            "commit_id": "08a2480632030ee2e705a3a8a88da3c1b7eb32c5",
            "created_at": "2014-12-05T22:04:42Z",
            "diff_hunk": "@@ -1,60 +1,151 @@\n local lfs = require 'lfs'\n+\n local helpers = require 'test.unit.helpers'\n+local cimport, vim_init, ffi, to_cstr =\n+  helpers.cimport, helpers.vim_init, helpers.ffi, helpers.to_cstr\n \n local os = helpers.cimport './src/nvim/os/os.h'\n-local tempfile = helpers.cimport './src/nvim/tempfile.h'\n+local os_isdir, os_file_is_writable, os_file_exists =\n+  os.os_isdir, os.os_file_is_writable, os.os_file_exists\n \n-helpers.vim_init()\n+local is_dir = function(x) return os_isdir(x) end\n \n-describe('tempfile related functions', function()\n-  after_each(function()\n-    tempfile.vim_deltempdir()\n-  end)\n+-- os_file_is_writable returns 2 for a directory which we have rights\n+-- to write into.\n+local is_writable = function(x) return os_file_is_writable(to_cstr(x)) == 2 end\n \n-  local vim_gettempdir = function()\n-    return helpers.ffi.string(tempfile.vim_gettempdir())\n+local is_empty = function(x)\n+  local r = true\n+  for f in lfs.dir(x) do\n+    r = r and (f == '.' or f == '..')\n   end\n+  return r\n+end\n+\n+local file_exists = function(x) return os_file_exists(x) end\n+\n+local path_contains_dir = function(path, dir)\n+  return (path ~= nil) and (path:find(\"^\" .. tostring(dir) .. \"[^/]*$\") ~= nil)\n+end\n+\n+local dir_of_path = function(path)\n+  return path:match('(.-)[^/]+$') or ''\n+end\n+\n+local ok = function(x) return assert.True(x) end\n+local notok = function(x) return assert.False(x) end\n+\n+local tempfile = helpers.cimport './src/nvim/tempfile.h'\n+local vim_gettempdir = function() return ffi.string(tempfile.vim_gettempdir()) end\n+local vim_tempname = function() return ffi.string(tempfile.vim_tempname()) end\n+local vim_deltempdir = function() return tempfile.vim_deltempdir() end\n+\n+vim_init()\n+\n+describe('tempfile module:', function()\n+\n+  after_each(function() vim_deltempdir() end)\n \n   describe('vim_gettempdir', function()\n-    it('returns path to Neovim own temp directory', function()\n+\n+    it('generates directory name to a writable, empty directory on first call', function()\n       local dir = vim_gettempdir()\n-      assert.True(dir ~= nil and dir:len() > 0)\n-      -- os_file_is_writable returns 2 for a directory which we have rights\n-      -- to write into.\n-      assert.equals(os.os_file_is_writable(helpers.to_cstr(dir)), 2)\n-      for entry in lfs.dir(dir) do\n-        assert.True(entry == '.' or entry == '..')\n-      end\n+      ok(dir ~= nil and dir:len() > 0)\n+      ok((is_dir(dir)) and (is_writable(dir)) and (is_empty(dir)))\n     end)\n \n-    it('returns the same directory on each call', function()\n-      local dir1 = vim_gettempdir()\n-      local dir2 = vim_gettempdir()\n-      assert.equals(dir1, dir2)\n+    it('generates a directory which can be later deleted', function()\n+      local dir = vim_gettempdir()\n+      ok(is_dir(dir))\n+      vim_deltempdir()\n+      notok(is_dir(dir))\n+    end)\n+\n+    context('called successively', function()\n+\n+      it('generates the same directory name', function()\n+        local dir1, dir2\n+        dir1 = vim_gettempdir()\n+        dir2 = vim_gettempdir()",
            "html_url": "https://github.com/neovim/neovim/pull/1617#discussion_r21403701",
            "id": 21403701,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDAzNzAx",
            "original_commit_id": "f793c2859143fc3bcdbd95437523a8868883d015",
            "original_line": null,
            "original_position": 89,
            "original_start_line": null,
            "path": "test/unit/tempfile_spec.lua",
            "position": null,
            "pull_request_review_id": null,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/1617",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21403701/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2014-12-11T21:46:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21403701",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38515?v=4",
                "events_url": "https://api.github.com/users/splinterofchaos/events{/privacy}",
                "followers_url": "https://api.github.com/users/splinterofchaos/followers",
                "following_url": "https://api.github.com/users/splinterofchaos/following{/other_user}",
                "gists_url": "https://api.github.com/users/splinterofchaos/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/splinterofchaos",
                "id": 38515,
                "login": "splinterofchaos",
                "node_id": "MDQ6VXNlcjM4NTE1",
                "organizations_url": "https://api.github.com/users/splinterofchaos/orgs",
                "received_events_url": "https://api.github.com/users/splinterofchaos/received_events",
                "repos_url": "https://api.github.com/users/splinterofchaos/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/splinterofchaos/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/splinterofchaos/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/splinterofchaos",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/1617#discussion_r21403881"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/1617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/21403881"
                }
            },
            "author_association": "NONE",
            "body": "~~Why should `path` not exist?~~\n\nnevermind\n",
            "commit_id": "08a2480632030ee2e705a3a8a88da3c1b7eb32c5",
            "created_at": "2014-12-05T22:07:18Z",
            "diff_hunk": "@@ -1,60 +1,151 @@\n local lfs = require 'lfs'\n+\n local helpers = require 'test.unit.helpers'\n+local cimport, vim_init, ffi, to_cstr =\n+  helpers.cimport, helpers.vim_init, helpers.ffi, helpers.to_cstr\n \n local os = helpers.cimport './src/nvim/os/os.h'\n-local tempfile = helpers.cimport './src/nvim/tempfile.h'\n+local os_isdir, os_file_is_writable, os_file_exists =\n+  os.os_isdir, os.os_file_is_writable, os.os_file_exists\n \n-helpers.vim_init()\n+local is_dir = function(x) return os_isdir(x) end\n \n-describe('tempfile related functions', function()\n-  after_each(function()\n-    tempfile.vim_deltempdir()\n-  end)\n+-- os_file_is_writable returns 2 for a directory which we have rights\n+-- to write into.\n+local is_writable = function(x) return os_file_is_writable(to_cstr(x)) == 2 end\n \n-  local vim_gettempdir = function()\n-    return helpers.ffi.string(tempfile.vim_gettempdir())\n+local is_empty = function(x)\n+  local r = true\n+  for f in lfs.dir(x) do\n+    r = r and (f == '.' or f == '..')\n   end\n+  return r\n+end\n+\n+local file_exists = function(x) return os_file_exists(x) end\n+\n+local path_contains_dir = function(path, dir)\n+  return (path ~= nil) and (path:find(\"^\" .. tostring(dir) .. \"[^/]*$\") ~= nil)\n+end\n+\n+local dir_of_path = function(path)\n+  return path:match('(.-)[^/]+$') or ''\n+end\n+\n+local ok = function(x) return assert.True(x) end\n+local notok = function(x) return assert.False(x) end\n+\n+local tempfile = helpers.cimport './src/nvim/tempfile.h'\n+local vim_gettempdir = function() return ffi.string(tempfile.vim_gettempdir()) end\n+local vim_tempname = function() return ffi.string(tempfile.vim_tempname()) end\n+local vim_deltempdir = function() return tempfile.vim_deltempdir() end\n+\n+vim_init()\n+\n+describe('tempfile module:', function()\n+\n+  after_each(function() vim_deltempdir() end)\n \n   describe('vim_gettempdir', function()\n-    it('returns path to Neovim own temp directory', function()\n+\n+    it('generates directory name to a writable, empty directory on first call', function()\n       local dir = vim_gettempdir()\n-      assert.True(dir ~= nil and dir:len() > 0)\n-      -- os_file_is_writable returns 2 for a directory which we have rights\n-      -- to write into.\n-      assert.equals(os.os_file_is_writable(helpers.to_cstr(dir)), 2)\n-      for entry in lfs.dir(dir) do\n-        assert.True(entry == '.' or entry == '..')\n-      end\n+      ok(dir ~= nil and dir:len() > 0)\n+      ok((is_dir(dir)) and (is_writable(dir)) and (is_empty(dir)))\n     end)\n \n-    it('returns the same directory on each call', function()\n-      local dir1 = vim_gettempdir()\n-      local dir2 = vim_gettempdir()\n-      assert.equals(dir1, dir2)\n+    it('generates a directory which can be later deleted', function()\n+      local dir = vim_gettempdir()\n+      ok(is_dir(dir))\n+      vim_deltempdir()\n+      notok(is_dir(dir))\n+    end)\n+\n+    context('called successively', function()\n+\n+      it('generates the same directory name', function()\n+        local dir1, dir2\n+        dir1 = vim_gettempdir()\n+        dir2 = vim_gettempdir()\n+        ok(dir1 == dir2)\n+      end)\n+\n+      it('interrupted by generating a file name, generates the same directory name', function()\n+        local dir1, dir2\n+        dir1 = vim_gettempdir()\n+        vim_tempname()\n+        dir2 = vim_gettempdir()\n+        ok(dir1 == dir2)\n+      end)\n+\n+      it('interrupted by deleting the temp directory, generates different directory names with corresponding directories', function()\n+        local dir1, dir2\n+        dir1 = vim_gettempdir()\n+        ok(is_dir(dir1))\n+        vim_deltempdir()\n+        dir2 = vim_gettempdir()\n+        ok(is_dir(dir2))\n+        ok(dir1 ~= dir2)\n+      end)\n+\n+      it('interrupted by externally deleting the temp directory, generates the same directory name and with no corresponding director ', function()\n+        local dir1, dir2\n+        dir1 = vim_gettempdir()\n+        ok(is_dir(dir1))\n+        ok(lfs.rmdir(dir1))\n+        dir2 = vim_gettempdir()\n+        notok(is_dir(dir2))\n+        notok(dir1 ~= dir2)\n+      end)\n     end)\n   end)\n \n   describe('vim_tempname', function()\n-    local vim_tempname = function()\n-      return helpers.ffi.string(tempfile.vim_tempname())\n-    end\n-\n-    it('generate name of non-existing file', function()\n-      local file = vim_tempname()\n-      assert.truthy(file)\n-      assert.False(os.os_file_exists(file))\n-    end)\n \n-    it('generate different names on each call', function()\n-      local fst = vim_tempname()\n-      local snd = vim_tempname()\n-      assert.not_equals(fst, snd)\n+    it('generates path name of a non-existing file in temp directory', function()\n+      local path, dir = vim_tempname(), vim_gettempdir()\n+      ok(path_contains_dir(path, dir))\n+      notok(file_exists(path))",
            "html_url": "https://github.com/neovim/neovim/pull/1617#discussion_r21403881",
            "id": 21403881,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDAzODgx",
            "original_commit_id": "f793c2859143fc3bcdbd95437523a8868883d015",
            "original_line": null,
            "original_position": 141,
            "original_start_line": null,
            "path": "test/unit/tempfile_spec.lua",
            "position": null,
            "pull_request_review_id": null,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/1617",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21403881/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2014-12-11T21:46:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21403881",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38515?v=4",
                "events_url": "https://api.github.com/users/splinterofchaos/events{/privacy}",
                "followers_url": "https://api.github.com/users/splinterofchaos/followers",
                "following_url": "https://api.github.com/users/splinterofchaos/following{/other_user}",
                "gists_url": "https://api.github.com/users/splinterofchaos/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/splinterofchaos",
                "id": 38515,
                "login": "splinterofchaos",
                "node_id": "MDQ6VXNlcjM4NTE1",
                "organizations_url": "https://api.github.com/users/splinterofchaos/orgs",
                "received_events_url": "https://api.github.com/users/splinterofchaos/received_events",
                "repos_url": "https://api.github.com/users/splinterofchaos/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/splinterofchaos/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/splinterofchaos/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/splinterofchaos",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/1617#discussion_r21637145"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/1617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/21637145"
                }
            },
            "author_association": "NONE",
            "body": "Yes, a bit redundant in the way I've done it.\n",
            "commit_id": "08a2480632030ee2e705a3a8a88da3c1b7eb32c5",
            "created_at": "2014-12-10T21:08:20Z",
            "diff_hunk": "@@ -1,60 +1,151 @@\n local lfs = require 'lfs'\n+\n local helpers = require 'test.unit.helpers'\n+local cimport, vim_init, ffi, to_cstr =\n+  helpers.cimport, helpers.vim_init, helpers.ffi, helpers.to_cstr\n \n local os = helpers.cimport './src/nvim/os/os.h'\n-local tempfile = helpers.cimport './src/nvim/tempfile.h'\n+local os_isdir, os_file_is_writable, os_file_exists =\n+  os.os_isdir, os.os_file_is_writable, os.os_file_exists\n \n-helpers.vim_init()\n+local is_dir = function(x) return os_isdir(x) end",
            "html_url": "https://github.com/neovim/neovim/pull/1617#discussion_r21637145",
            "id": 21637145,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjM3MTQ1",
            "original_commit_id": "f793c2859143fc3bcdbd95437523a8868883d015",
            "original_line": null,
            "original_position": 13,
            "original_start_line": null,
            "path": "test/unit/tempfile_spec.lua",
            "position": null,
            "pull_request_review_id": null,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/1617",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21637145/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2014-12-11T21:46:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21637145",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/259933?v=4",
                "events_url": "https://api.github.com/users/stevenyvr987/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevenyvr987/followers",
                "following_url": "https://api.github.com/users/stevenyvr987/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevenyvr987/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevenyvr987",
                "id": 259933,
                "login": "stevenyvr987",
                "node_id": "MDQ6VXNlcjI1OTkzMw==",
                "organizations_url": "https://api.github.com/users/stevenyvr987/orgs",
                "received_events_url": "https://api.github.com/users/stevenyvr987/received_events",
                "repos_url": "https://api.github.com/users/stevenyvr987/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevenyvr987/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevenyvr987/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevenyvr987",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/1617#discussion_r21637214"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/1617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/21637214"
                }
            },
            "author_association": "NONE",
            "body": "Yes, more direct. I've recoded the function as per suggestion.\n",
            "commit_id": "08a2480632030ee2e705a3a8a88da3c1b7eb32c5",
            "created_at": "2014-12-10T21:09:12Z",
            "diff_hunk": "@@ -1,60 +1,151 @@\n local lfs = require 'lfs'\n+\n local helpers = require 'test.unit.helpers'\n+local cimport, vim_init, ffi, to_cstr =\n+  helpers.cimport, helpers.vim_init, helpers.ffi, helpers.to_cstr\n \n local os = helpers.cimport './src/nvim/os/os.h'\n-local tempfile = helpers.cimport './src/nvim/tempfile.h'\n+local os_isdir, os_file_is_writable, os_file_exists =\n+  os.os_isdir, os.os_file_is_writable, os.os_file_exists\n \n-helpers.vim_init()\n+local is_dir = function(x) return os_isdir(x) end\n \n-describe('tempfile related functions', function()\n-  after_each(function()\n-    tempfile.vim_deltempdir()\n-  end)\n+-- os_file_is_writable returns 2 for a directory which we have rights\n+-- to write into.\n+local is_writable = function(x) return os_file_is_writable(to_cstr(x)) == 2 end\n \n-  local vim_gettempdir = function()\n-    return helpers.ffi.string(tempfile.vim_gettempdir())\n+local is_empty = function(x)\n+  local r = true\n+  for f in lfs.dir(x) do\n+    r = r and (f == '.' or f == '..')",
            "html_url": "https://github.com/neovim/neovim/pull/1617#discussion_r21637214",
            "id": 21637214,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjM3MjE0",
            "original_commit_id": "f793c2859143fc3bcdbd95437523a8868883d015",
            "original_line": null,
            "original_position": 28,
            "original_start_line": null,
            "path": "test/unit/tempfile_spec.lua",
            "position": null,
            "pull_request_review_id": null,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/1617",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21637214/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2014-12-11T21:46:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21637214",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/259933?v=4",
                "events_url": "https://api.github.com/users/stevenyvr987/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevenyvr987/followers",
                "following_url": "https://api.github.com/users/stevenyvr987/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevenyvr987/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevenyvr987",
                "id": 259933,
                "login": "stevenyvr987",
                "node_id": "MDQ6VXNlcjI1OTkzMw==",
                "organizations_url": "https://api.github.com/users/stevenyvr987/orgs",
                "received_events_url": "https://api.github.com/users/stevenyvr987/received_events",
                "repos_url": "https://api.github.com/users/stevenyvr987/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevenyvr987/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevenyvr987/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevenyvr987",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/1617#discussion_r21637680"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/1617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/21637680"
                }
            },
            "author_association": "NONE",
            "body": "The style guide is for C code, but there is no similar guide for Lua code for the project. In Lua, local declarations are initialized to nil by default, but in C I believe there is no default initialization.\n\nNevertheless, I've initialized all local vars for the unit test, which is possible.\n",
            "commit_id": "08a2480632030ee2e705a3a8a88da3c1b7eb32c5",
            "created_at": "2014-12-10T21:13:30Z",
            "diff_hunk": "@@ -1,60 +1,151 @@\n local lfs = require 'lfs'\n+\n local helpers = require 'test.unit.helpers'\n+local cimport, vim_init, ffi, to_cstr =\n+  helpers.cimport, helpers.vim_init, helpers.ffi, helpers.to_cstr\n \n local os = helpers.cimport './src/nvim/os/os.h'\n-local tempfile = helpers.cimport './src/nvim/tempfile.h'\n+local os_isdir, os_file_is_writable, os_file_exists =\n+  os.os_isdir, os.os_file_is_writable, os.os_file_exists\n \n-helpers.vim_init()\n+local is_dir = function(x) return os_isdir(x) end\n \n-describe('tempfile related functions', function()\n-  after_each(function()\n-    tempfile.vim_deltempdir()\n-  end)\n+-- os_file_is_writable returns 2 for a directory which we have rights\n+-- to write into.\n+local is_writable = function(x) return os_file_is_writable(to_cstr(x)) == 2 end\n \n-  local vim_gettempdir = function()\n-    return helpers.ffi.string(tempfile.vim_gettempdir())\n+local is_empty = function(x)\n+  local r = true\n+  for f in lfs.dir(x) do\n+    r = r and (f == '.' or f == '..')\n   end\n+  return r\n+end\n+\n+local file_exists = function(x) return os_file_exists(x) end\n+\n+local path_contains_dir = function(path, dir)\n+  return (path ~= nil) and (path:find(\"^\" .. tostring(dir) .. \"[^/]*$\") ~= nil)\n+end\n+\n+local dir_of_path = function(path)\n+  return path:match('(.-)[^/]+$') or ''\n+end\n+\n+local ok = function(x) return assert.True(x) end\n+local notok = function(x) return assert.False(x) end\n+\n+local tempfile = helpers.cimport './src/nvim/tempfile.h'\n+local vim_gettempdir = function() return ffi.string(tempfile.vim_gettempdir()) end\n+local vim_tempname = function() return ffi.string(tempfile.vim_tempname()) end\n+local vim_deltempdir = function() return tempfile.vim_deltempdir() end\n+\n+vim_init()\n+\n+describe('tempfile module:', function()\n+\n+  after_each(function() vim_deltempdir() end)\n \n   describe('vim_gettempdir', function()\n-    it('returns path to Neovim own temp directory', function()\n+\n+    it('generates directory name to a writable, empty directory on first call', function()\n       local dir = vim_gettempdir()\n-      assert.True(dir ~= nil and dir:len() > 0)\n-      -- os_file_is_writable returns 2 for a directory which we have rights\n-      -- to write into.\n-      assert.equals(os.os_file_is_writable(helpers.to_cstr(dir)), 2)\n-      for entry in lfs.dir(dir) do\n-        assert.True(entry == '.' or entry == '..')\n-      end\n+      ok(dir ~= nil and dir:len() > 0)\n+      ok((is_dir(dir)) and (is_writable(dir)) and (is_empty(dir)))\n     end)\n \n-    it('returns the same directory on each call', function()\n-      local dir1 = vim_gettempdir()\n-      local dir2 = vim_gettempdir()\n-      assert.equals(dir1, dir2)\n+    it('generates a directory which can be later deleted', function()\n+      local dir = vim_gettempdir()\n+      ok(is_dir(dir))\n+      vim_deltempdir()\n+      notok(is_dir(dir))\n+    end)\n+\n+    context('called successively', function()\n+\n+      it('generates the same directory name', function()\n+        local dir1, dir2\n+        dir1 = vim_gettempdir()\n+        dir2 = vim_gettempdir()",
            "html_url": "https://github.com/neovim/neovim/pull/1617#discussion_r21637680",
            "id": 21637680,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjM3Njgw",
            "original_commit_id": "f793c2859143fc3bcdbd95437523a8868883d015",
            "original_line": null,
            "original_position": 89,
            "original_start_line": null,
            "path": "test/unit/tempfile_spec.lua",
            "position": null,
            "pull_request_review_id": null,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/1617",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21637680/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2014-12-11T21:46:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21637680",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/259933?v=4",
                "events_url": "https://api.github.com/users/stevenyvr987/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevenyvr987/followers",
                "following_url": "https://api.github.com/users/stevenyvr987/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevenyvr987/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevenyvr987",
                "id": 259933,
                "login": "stevenyvr987",
                "node_id": "MDQ6VXNlcjI1OTkzMw==",
                "organizations_url": "https://api.github.com/users/stevenyvr987/orgs",
                "received_events_url": "https://api.github.com/users/stevenyvr987/received_events",
                "repos_url": "https://api.github.com/users/stevenyvr987/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevenyvr987/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevenyvr987/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevenyvr987",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/1617#discussion_r21638362"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/1617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/21638362"
                }
            },
            "author_association": "NONE",
            "body": "I've converted some of the ok/notok assertions to eq/neq ones. These are ones in which there is an explicit comparison of an expected value with an actual value. For the remaining notok(something) assertions, I've converted to using ok(not something). I'm going to continue using ok for the remaining assertions.\n\nI think it's very useful to have ok(something) as a synonym for assert.True(something), where something is typically a function implementing a predicate. In Perl, ok is often used for unit testing (see the Perl CPAN module, Test::Simple or Test::Simpler).\n",
            "commit_id": "08a2480632030ee2e705a3a8a88da3c1b7eb32c5",
            "created_at": "2014-12-10T21:21:44Z",
            "diff_hunk": "@@ -1,60 +1,151 @@\n local lfs = require 'lfs'\n+\n local helpers = require 'test.unit.helpers'\n+local cimport, vim_init, ffi, to_cstr =\n+  helpers.cimport, helpers.vim_init, helpers.ffi, helpers.to_cstr\n \n local os = helpers.cimport './src/nvim/os/os.h'\n-local tempfile = helpers.cimport './src/nvim/tempfile.h'\n+local os_isdir, os_file_is_writable, os_file_exists =\n+  os.os_isdir, os.os_file_is_writable, os.os_file_exists\n \n-helpers.vim_init()\n+local is_dir = function(x) return os_isdir(x) end\n \n-describe('tempfile related functions', function()\n-  after_each(function()\n-    tempfile.vim_deltempdir()\n-  end)\n+-- os_file_is_writable returns 2 for a directory which we have rights\n+-- to write into.\n+local is_writable = function(x) return os_file_is_writable(to_cstr(x)) == 2 end\n \n-  local vim_gettempdir = function()\n-    return helpers.ffi.string(tempfile.vim_gettempdir())\n+local is_empty = function(x)\n+  local r = true\n+  for f in lfs.dir(x) do\n+    r = r and (f == '.' or f == '..')\n   end\n+  return r\n+end\n+\n+local file_exists = function(x) return os_file_exists(x) end\n+\n+local path_contains_dir = function(path, dir)\n+  return (path ~= nil) and (path:find(\"^\" .. tostring(dir) .. \"[^/]*$\") ~= nil)\n+end\n+\n+local dir_of_path = function(path)\n+  return path:match('(.-)[^/]+$') or ''\n+end\n+\n+local ok = function(x) return assert.True(x) end\n+local notok = function(x) return assert.False(x) end",
            "html_url": "https://github.com/neovim/neovim/pull/1617#discussion_r21638362",
            "id": 21638362,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjM4MzYy",
            "original_commit_id": "f793c2859143fc3bcdbd95437523a8868883d015",
            "original_line": null,
            "original_position": 44,
            "original_start_line": null,
            "path": "test/unit/tempfile_spec.lua",
            "position": null,
            "pull_request_review_id": null,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/1617",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21638362/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2014-12-11T21:46:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21638362",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/259933?v=4",
                "events_url": "https://api.github.com/users/stevenyvr987/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevenyvr987/followers",
                "following_url": "https://api.github.com/users/stevenyvr987/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevenyvr987/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevenyvr987",
                "id": 259933,
                "login": "stevenyvr987",
                "node_id": "MDQ6VXNlcjI1OTkzMw==",
                "organizations_url": "https://api.github.com/users/stevenyvr987/orgs",
                "received_events_url": "https://api.github.com/users/stevenyvr987/received_events",
                "repos_url": "https://api.github.com/users/stevenyvr987/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevenyvr987/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevenyvr987/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevenyvr987",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/1617#discussion_r21638990"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/1617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/21638990"
                }
            },
            "author_association": "NONE",
            "body": "Good point about putting the assertions on their own lines.\n\nAbout involving the nvim os module for some the tests: I am simply continuing the practice of the original unit test, although I also did worry about the issue of false positive or false negative. I tried to re-implement isdir() with lfs.attributes() but I couldn't see a way; lfs seems slightly deficient in getting the status of access modes, even though it is using stat underneath. I suggest we continue as is, and maybe rewrite later. As is, the file tests are no worse than before.\n",
            "commit_id": "08a2480632030ee2e705a3a8a88da3c1b7eb32c5",
            "created_at": "2014-12-10T21:29:09Z",
            "diff_hunk": "@@ -1,60 +1,151 @@\n local lfs = require 'lfs'\n+\n local helpers = require 'test.unit.helpers'\n+local cimport, vim_init, ffi, to_cstr =\n+  helpers.cimport, helpers.vim_init, helpers.ffi, helpers.to_cstr\n \n local os = helpers.cimport './src/nvim/os/os.h'\n-local tempfile = helpers.cimport './src/nvim/tempfile.h'\n+local os_isdir, os_file_is_writable, os_file_exists =\n+  os.os_isdir, os.os_file_is_writable, os.os_file_exists\n \n-helpers.vim_init()\n+local is_dir = function(x) return os_isdir(x) end\n \n-describe('tempfile related functions', function()\n-  after_each(function()\n-    tempfile.vim_deltempdir()\n-  end)\n+-- os_file_is_writable returns 2 for a directory which we have rights\n+-- to write into.\n+local is_writable = function(x) return os_file_is_writable(to_cstr(x)) == 2 end\n \n-  local vim_gettempdir = function()\n-    return helpers.ffi.string(tempfile.vim_gettempdir())\n+local is_empty = function(x)\n+  local r = true\n+  for f in lfs.dir(x) do\n+    r = r and (f == '.' or f == '..')\n   end\n+  return r\n+end\n+\n+local file_exists = function(x) return os_file_exists(x) end\n+\n+local path_contains_dir = function(path, dir)\n+  return (path ~= nil) and (path:find(\"^\" .. tostring(dir) .. \"[^/]*$\") ~= nil)\n+end\n+\n+local dir_of_path = function(path)\n+  return path:match('(.-)[^/]+$') or ''\n+end\n+\n+local ok = function(x) return assert.True(x) end\n+local notok = function(x) return assert.False(x) end\n+\n+local tempfile = helpers.cimport './src/nvim/tempfile.h'\n+local vim_gettempdir = function() return ffi.string(tempfile.vim_gettempdir()) end\n+local vim_tempname = function() return ffi.string(tempfile.vim_tempname()) end\n+local vim_deltempdir = function() return tempfile.vim_deltempdir() end\n+\n+vim_init()\n+\n+describe('tempfile module:', function()\n+\n+  after_each(function() vim_deltempdir() end)\n \n   describe('vim_gettempdir', function()\n-    it('returns path to Neovim own temp directory', function()\n+\n+    it('generates directory name to a writable, empty directory on first call', function()\n       local dir = vim_gettempdir()\n-      assert.True(dir ~= nil and dir:len() > 0)\n-      -- os_file_is_writable returns 2 for a directory which we have rights\n-      -- to write into.\n-      assert.equals(os.os_file_is_writable(helpers.to_cstr(dir)), 2)\n-      for entry in lfs.dir(dir) do\n-        assert.True(entry == '.' or entry == '..')\n-      end\n+      ok(dir ~= nil and dir:len() > 0)\n+      ok((is_dir(dir)) and (is_writable(dir)) and (is_empty(dir)))",
            "html_url": "https://github.com/neovim/neovim/pull/1617#discussion_r21638990",
            "id": 21638990,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjM4OTkw",
            "original_commit_id": "f793c2859143fc3bcdbd95437523a8868883d015",
            "original_line": null,
            "original_position": 70,
            "original_start_line": null,
            "path": "test/unit/tempfile_spec.lua",
            "position": null,
            "pull_request_review_id": null,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/1617",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21638990/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2014-12-11T21:46:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21638990",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/259933?v=4",
                "events_url": "https://api.github.com/users/stevenyvr987/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevenyvr987/followers",
                "following_url": "https://api.github.com/users/stevenyvr987/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevenyvr987/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevenyvr987",
                "id": 259933,
                "login": "stevenyvr987",
                "node_id": "MDQ6VXNlcjI1OTkzMw==",
                "organizations_url": "https://api.github.com/users/stevenyvr987/orgs",
                "received_events_url": "https://api.github.com/users/stevenyvr987/received_events",
                "repos_url": "https://api.github.com/users/stevenyvr987/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevenyvr987/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevenyvr987/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevenyvr987",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/1617#discussion_r21700066"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/1617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/21700066"
                }
            },
            "author_association": "NONE",
            "body": "That's fine.\n",
            "commit_id": "08a2480632030ee2e705a3a8a88da3c1b7eb32c5",
            "created_at": "2014-12-11T19:14:34Z",
            "diff_hunk": "@@ -1,60 +1,151 @@\n local lfs = require 'lfs'\n+\n local helpers = require 'test.unit.helpers'\n+local cimport, vim_init, ffi, to_cstr =\n+  helpers.cimport, helpers.vim_init, helpers.ffi, helpers.to_cstr\n \n local os = helpers.cimport './src/nvim/os/os.h'\n-local tempfile = helpers.cimport './src/nvim/tempfile.h'\n+local os_isdir, os_file_is_writable, os_file_exists =\n+  os.os_isdir, os.os_file_is_writable, os.os_file_exists\n \n-helpers.vim_init()\n+local is_dir = function(x) return os_isdir(x) end\n \n-describe('tempfile related functions', function()\n-  after_each(function()\n-    tempfile.vim_deltempdir()\n-  end)\n+-- os_file_is_writable returns 2 for a directory which we have rights\n+-- to write into.\n+local is_writable = function(x) return os_file_is_writable(to_cstr(x)) == 2 end\n \n-  local vim_gettempdir = function()\n-    return helpers.ffi.string(tempfile.vim_gettempdir())\n+local is_empty = function(x)\n+  local r = true\n+  for f in lfs.dir(x) do\n+    r = r and (f == '.' or f == '..')\n   end\n+  return r\n+end\n+\n+local file_exists = function(x) return os_file_exists(x) end\n+\n+local path_contains_dir = function(path, dir)\n+  return (path ~= nil) and (path:find(\"^\" .. tostring(dir) .. \"[^/]*$\") ~= nil)\n+end\n+\n+local dir_of_path = function(path)\n+  return path:match('(.-)[^/]+$') or ''\n+end\n+\n+local ok = function(x) return assert.True(x) end\n+local notok = function(x) return assert.False(x) end\n+\n+local tempfile = helpers.cimport './src/nvim/tempfile.h'\n+local vim_gettempdir = function() return ffi.string(tempfile.vim_gettempdir()) end\n+local vim_tempname = function() return ffi.string(tempfile.vim_tempname()) end\n+local vim_deltempdir = function() return tempfile.vim_deltempdir() end\n+\n+vim_init()\n+\n+describe('tempfile module:', function()\n+\n+  after_each(function() vim_deltempdir() end)\n \n   describe('vim_gettempdir', function()\n-    it('returns path to Neovim own temp directory', function()\n+\n+    it('generates directory name to a writable, empty directory on first call', function()\n       local dir = vim_gettempdir()\n-      assert.True(dir ~= nil and dir:len() > 0)\n-      -- os_file_is_writable returns 2 for a directory which we have rights\n-      -- to write into.\n-      assert.equals(os.os_file_is_writable(helpers.to_cstr(dir)), 2)\n-      for entry in lfs.dir(dir) do\n-        assert.True(entry == '.' or entry == '..')\n-      end\n+      ok(dir ~= nil and dir:len() > 0)\n+      ok((is_dir(dir)) and (is_writable(dir)) and (is_empty(dir)))",
            "html_url": "https://github.com/neovim/neovim/pull/1617#discussion_r21700066",
            "id": 21700066,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzAwMDY2",
            "original_commit_id": "f793c2859143fc3bcdbd95437523a8868883d015",
            "original_line": null,
            "original_position": 70,
            "original_start_line": null,
            "path": "test/unit/tempfile_spec.lua",
            "position": null,
            "pull_request_review_id": null,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/1617",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21700066/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2014-12-11T21:46:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21700066",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38515?v=4",
                "events_url": "https://api.github.com/users/splinterofchaos/events{/privacy}",
                "followers_url": "https://api.github.com/users/splinterofchaos/followers",
                "following_url": "https://api.github.com/users/splinterofchaos/following{/other_user}",
                "gists_url": "https://api.github.com/users/splinterofchaos/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/splinterofchaos",
                "id": 38515,
                "login": "splinterofchaos",
                "node_id": "MDQ6VXNlcjM4NTE1",
                "organizations_url": "https://api.github.com/users/splinterofchaos/orgs",
                "received_events_url": "https://api.github.com/users/splinterofchaos/received_events",
                "repos_url": "https://api.github.com/users/splinterofchaos/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/splinterofchaos/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/splinterofchaos/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/splinterofchaos",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/1617#discussion_r21701857"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/1617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/21701857"
                }
            },
            "author_association": "NONE",
            "body": "But `ok` doesn't really imply `True`. `isTrue` and `isFalse` would be more descriptive names, and adding them to `helpers.lua` would be useful.\n",
            "commit_id": "08a2480632030ee2e705a3a8a88da3c1b7eb32c5",
            "created_at": "2014-12-11T19:24:57Z",
            "diff_hunk": "@@ -1,60 +1,151 @@\n local lfs = require 'lfs'\n+\n local helpers = require 'test.unit.helpers'\n+local cimport, vim_init, ffi, to_cstr =\n+  helpers.cimport, helpers.vim_init, helpers.ffi, helpers.to_cstr\n \n local os = helpers.cimport './src/nvim/os/os.h'\n-local tempfile = helpers.cimport './src/nvim/tempfile.h'\n+local os_isdir, os_file_is_writable, os_file_exists =\n+  os.os_isdir, os.os_file_is_writable, os.os_file_exists\n \n-helpers.vim_init()\n+local is_dir = function(x) return os_isdir(x) end\n \n-describe('tempfile related functions', function()\n-  after_each(function()\n-    tempfile.vim_deltempdir()\n-  end)\n+-- os_file_is_writable returns 2 for a directory which we have rights\n+-- to write into.\n+local is_writable = function(x) return os_file_is_writable(to_cstr(x)) == 2 end\n \n-  local vim_gettempdir = function()\n-    return helpers.ffi.string(tempfile.vim_gettempdir())\n+local is_empty = function(x)\n+  local r = true\n+  for f in lfs.dir(x) do\n+    r = r and (f == '.' or f == '..')\n   end\n+  return r\n+end\n+\n+local file_exists = function(x) return os_file_exists(x) end\n+\n+local path_contains_dir = function(path, dir)\n+  return (path ~= nil) and (path:find(\"^\" .. tostring(dir) .. \"[^/]*$\") ~= nil)\n+end\n+\n+local dir_of_path = function(path)\n+  return path:match('(.-)[^/]+$') or ''\n+end\n+\n+local ok = function(x) return assert.True(x) end\n+local notok = function(x) return assert.False(x) end",
            "html_url": "https://github.com/neovim/neovim/pull/1617#discussion_r21701857",
            "id": 21701857,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzAxODU3",
            "original_commit_id": "f793c2859143fc3bcdbd95437523a8868883d015",
            "original_line": null,
            "original_position": 44,
            "original_start_line": null,
            "path": "test/unit/tempfile_spec.lua",
            "position": null,
            "pull_request_review_id": null,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/1617",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21701857/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2014-12-11T21:46:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21701857",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38515?v=4",
                "events_url": "https://api.github.com/users/splinterofchaos/events{/privacy}",
                "followers_url": "https://api.github.com/users/splinterofchaos/followers",
                "following_url": "https://api.github.com/users/splinterofchaos/following{/other_user}",
                "gists_url": "https://api.github.com/users/splinterofchaos/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/splinterofchaos",
                "id": 38515,
                "login": "splinterofchaos",
                "node_id": "MDQ6VXNlcjM4NTE1",
                "organizations_url": "https://api.github.com/users/splinterofchaos/orgs",
                "received_events_url": "https://api.github.com/users/splinterofchaos/received_events",
                "repos_url": "https://api.github.com/users/splinterofchaos/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/splinterofchaos/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/splinterofchaos/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/splinterofchaos",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/1617#discussion_r21702390"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/1617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/21702390"
                }
            },
            "author_association": "NONE",
            "body": "If I've got my regex right, this function checks that the path begins with `dir` fallowed be any number of characters that aren't `'\\'` up to the end. So this would return `false`: `path_contains_dir('/a/b/c', '/a/')` as would `path_contains_dir('/a/b/c', '/a/b')` (no terminating `'/'`). Is that the desired behaviour?\n\nGenerally, one should avoid inserting logic into unit tests because it can be difficult to distinguish a bug in the test from a bug in the code at times. (I know I suggested not using unrelated vim functions to ensure the behaviour of the one being tested, but if it can't be helped, it can't be helped.)\n",
            "commit_id": "08a2480632030ee2e705a3a8a88da3c1b7eb32c5",
            "created_at": "2014-12-11T19:31:58Z",
            "diff_hunk": "@@ -1,60 +1,147 @@\n+local cimport, vim_init, ffi, to_cstr, eq, neq = (function()\n+  local _ = require 'test.unit.helpers'\n+  return _.cimport, _.vim_init, _.ffi, _.to_cstr, _.eq, _.neq\n+end)()\n+\n local lfs = require 'lfs'\n-local helpers = require 'test.unit.helpers'\n \n-local os = helpers.cimport './src/nvim/os/os.h'\n-local tempfile = helpers.cimport './src/nvim/tempfile.h'\n+local os = cimport './src/nvim/os/os.h'\n \n-helpers.vim_init()\n+-- is_dir('/a/b/') will return true if '/a/b/' is a directory name\n+local is_dir = function(x) return 'directory' == lfs.attributes(x, 'mode') end\n \n-describe('tempfile related functions', function()\n-  after_each(function()\n-    tempfile.vim_deltempdir()\n-  end)\n+-- os_file_is_writable returns 2 for a directory which we have rights\n+-- to write into.\n+local is_writable = function(x) return os.os_file_is_writable(to_cstr(x)) == 2 end\n \n-  local vim_gettempdir = function()\n-    return helpers.ffi.string(tempfile.vim_gettempdir())\n+-- is_empty('/a/b/') will return true if 'a/b/' is a directory linking only to itself and the parent dir\n+local is_empty = function(x)\n+  for f in lfs.dir(x) do\n+    if f ~= '.' and f ~= '..' then return false end\n   end\n+  return true\n+end\n+\n+-- file_exists('/a/b/c') will return true if '/a/b/c' is an existing file\n+local file_exists = os.os_file_exists\n+\n+-- path_contains_dir('/a/b/c', '/a/b/') will return true\n+local path_contains_dir = function(path, dir)\n+  return (path ~= nil) and (path:find(\"^\" .. tostring(dir) .. \"[^/]*$\") ~= nil)\n+end",
            "html_url": "https://github.com/neovim/neovim/pull/1617#discussion_r21702390",
            "id": 21702390,
            "line": 31,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzAyMzkw",
            "original_commit_id": "e77ad7dbc85ef9877b2ac11864e4517b5cd3d81d",
            "original_line": null,
            "original_position": 41,
            "original_start_line": null,
            "path": "test/unit/tempfile_spec.lua",
            "position": 41,
            "pull_request_review_id": null,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/1617",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21702390/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2014-12-11T21:46:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21702390",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38515?v=4",
                "events_url": "https://api.github.com/users/splinterofchaos/events{/privacy}",
                "followers_url": "https://api.github.com/users/splinterofchaos/followers",
                "following_url": "https://api.github.com/users/splinterofchaos/following{/other_user}",
                "gists_url": "https://api.github.com/users/splinterofchaos/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/splinterofchaos",
                "id": 38515,
                "login": "splinterofchaos",
                "node_id": "MDQ6VXNlcjM4NTE1",
                "organizations_url": "https://api.github.com/users/splinterofchaos/orgs",
                "received_events_url": "https://api.github.com/users/splinterofchaos/received_events",
                "repos_url": "https://api.github.com/users/splinterofchaos/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/splinterofchaos/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/splinterofchaos/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/splinterofchaos",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/1617#discussion_r21702587"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/1617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/21702587"
                }
            },
            "author_association": "NONE",
            "body": "Better: `eq(dir1, dir2)`. If this line fails, busted will be more helpful, printing the value of `dir1` and `dir2`.\n",
            "commit_id": "08a2480632030ee2e705a3a8a88da3c1b7eb32c5",
            "created_at": "2014-12-11T19:34:08Z",
            "diff_hunk": "@@ -1,60 +1,147 @@\n+local cimport, vim_init, ffi, to_cstr, eq, neq = (function()\n+  local _ = require 'test.unit.helpers'\n+  return _.cimport, _.vim_init, _.ffi, _.to_cstr, _.eq, _.neq\n+end)()\n+\n local lfs = require 'lfs'\n-local helpers = require 'test.unit.helpers'\n \n-local os = helpers.cimport './src/nvim/os/os.h'\n-local tempfile = helpers.cimport './src/nvim/tempfile.h'\n+local os = cimport './src/nvim/os/os.h'\n \n-helpers.vim_init()\n+-- is_dir('/a/b/') will return true if '/a/b/' is a directory name\n+local is_dir = function(x) return 'directory' == lfs.attributes(x, 'mode') end\n \n-describe('tempfile related functions', function()\n-  after_each(function()\n-    tempfile.vim_deltempdir()\n-  end)\n+-- os_file_is_writable returns 2 for a directory which we have rights\n+-- to write into.\n+local is_writable = function(x) return os.os_file_is_writable(to_cstr(x)) == 2 end\n \n-  local vim_gettempdir = function()\n-    return helpers.ffi.string(tempfile.vim_gettempdir())\n+-- is_empty('/a/b/') will return true if 'a/b/' is a directory linking only to itself and the parent dir\n+local is_empty = function(x)\n+  for f in lfs.dir(x) do\n+    if f ~= '.' and f ~= '..' then return false end\n   end\n+  return true\n+end\n+\n+-- file_exists('/a/b/c') will return true if '/a/b/c' is an existing file\n+local file_exists = os.os_file_exists\n+\n+-- path_contains_dir('/a/b/c', '/a/b/') will return true\n+local path_contains_dir = function(path, dir)\n+  return (path ~= nil) and (path:find(\"^\" .. tostring(dir) .. \"[^/]*$\") ~= nil)\n+end\n+\n+-- dir_of_path('/a/b/c') will return '/a/b/'\n+local dir_of_path = function(path)\n+  return path:match('(.-)[^/]+$') or ''\n+end\n+\n+local ok = function(x) return assert.True(x) end\n+\n+local tempfile = cimport './src/nvim/tempfile.h'\n+local vim_gettempdir = function() return ffi.string(tempfile.vim_gettempdir()) end\n+local vim_tempname = function() return ffi.string(tempfile.vim_tempname()) end\n+local vim_deltempdir = function() return tempfile.vim_deltempdir() end\n+\n+vim_init()\n+\n+describe('tempfile module:', function()\n+\n+  after_each(function() vim_deltempdir() end)\n \n   describe('vim_gettempdir', function()\n-    it('returns path to Neovim own temp directory', function()\n+\n+    it('generates directory name to a writable, empty directory on first call', function()\n+      local dir = vim_gettempdir()\n+      ok(dir ~= nil and dir:len() > 0)\n+      ok(is_dir(dir))\n+      ok(is_writable(dir))\n+      ok(is_empty(dir))\n+    end)\n+\n+    it('generates a directory which can be later deleted', function()\n       local dir = vim_gettempdir()\n-      assert.True(dir ~= nil and dir:len() > 0)\n-      -- os_file_is_writable returns 2 for a directory which we have rights\n-      -- to write into.\n-      assert.equals(os.os_file_is_writable(helpers.to_cstr(dir)), 2)\n-      for entry in lfs.dir(dir) do\n-        assert.True(entry == '.' or entry == '..')\n-      end\n+      ok(is_dir(dir))\n+      vim_deltempdir()\n+      ok(not is_dir(dir))\n     end)\n \n-    it('returns the same directory on each call', function()\n-      local dir1 = vim_gettempdir()\n-      local dir2 = vim_gettempdir()\n-      assert.equals(dir1, dir2)\n+    context('called successively', function()\n+\n+      it('generates the same directory name', function()\n+        local dir1 = vim_gettempdir()\n+        local dir2 = vim_gettempdir()\n+        ok(dir1 == dir2)",
            "html_url": "https://github.com/neovim/neovim/pull/1617#discussion_r21702587",
            "id": 21702587,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzAyNTg3",
            "original_commit_id": "e77ad7dbc85ef9877b2ac11864e4517b5cd3d81d",
            "original_line": null,
            "original_position": 95,
            "original_start_line": null,
            "path": "test/unit/tempfile_spec.lua",
            "position": null,
            "pull_request_review_id": null,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/1617",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21702587/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2014-12-11T21:46:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21702587",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38515?v=4",
                "events_url": "https://api.github.com/users/splinterofchaos/events{/privacy}",
                "followers_url": "https://api.github.com/users/splinterofchaos/followers",
                "following_url": "https://api.github.com/users/splinterofchaos/following{/other_user}",
                "gists_url": "https://api.github.com/users/splinterofchaos/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/splinterofchaos",
                "id": 38515,
                "login": "splinterofchaos",
                "node_id": "MDQ6VXNlcjM4NTE1",
                "organizations_url": "https://api.github.com/users/splinterofchaos/orgs",
                "received_events_url": "https://api.github.com/users/splinterofchaos/received_events",
                "repos_url": "https://api.github.com/users/splinterofchaos/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/splinterofchaos/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/splinterofchaos/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/splinterofchaos",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/1617#discussion_r21702898"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/1617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/21702898"
                }
            },
            "author_association": "NONE",
            "body": "I find it irksome to have a unit test ensuring the behaviour of a known bug, but it does offer insight into `tempdir()` so it's not a bad thing to have.\n",
            "commit_id": "08a2480632030ee2e705a3a8a88da3c1b7eb32c5",
            "created_at": "2014-12-11T19:38:03Z",
            "diff_hunk": "@@ -1,60 +1,147 @@\n+local cimport, vim_init, ffi, to_cstr, eq, neq = (function()\n+  local _ = require 'test.unit.helpers'\n+  return _.cimport, _.vim_init, _.ffi, _.to_cstr, _.eq, _.neq\n+end)()\n+\n local lfs = require 'lfs'\n-local helpers = require 'test.unit.helpers'\n \n-local os = helpers.cimport './src/nvim/os/os.h'\n-local tempfile = helpers.cimport './src/nvim/tempfile.h'\n+local os = cimport './src/nvim/os/os.h'\n \n-helpers.vim_init()\n+-- is_dir('/a/b/') will return true if '/a/b/' is a directory name\n+local is_dir = function(x) return 'directory' == lfs.attributes(x, 'mode') end\n \n-describe('tempfile related functions', function()\n-  after_each(function()\n-    tempfile.vim_deltempdir()\n-  end)\n+-- os_file_is_writable returns 2 for a directory which we have rights\n+-- to write into.\n+local is_writable = function(x) return os.os_file_is_writable(to_cstr(x)) == 2 end\n \n-  local vim_gettempdir = function()\n-    return helpers.ffi.string(tempfile.vim_gettempdir())\n+-- is_empty('/a/b/') will return true if 'a/b/' is a directory linking only to itself and the parent dir\n+local is_empty = function(x)\n+  for f in lfs.dir(x) do\n+    if f ~= '.' and f ~= '..' then return false end\n   end\n+  return true\n+end\n+\n+-- file_exists('/a/b/c') will return true if '/a/b/c' is an existing file\n+local file_exists = os.os_file_exists\n+\n+-- path_contains_dir('/a/b/c', '/a/b/') will return true\n+local path_contains_dir = function(path, dir)\n+  return (path ~= nil) and (path:find(\"^\" .. tostring(dir) .. \"[^/]*$\") ~= nil)\n+end\n+\n+-- dir_of_path('/a/b/c') will return '/a/b/'\n+local dir_of_path = function(path)\n+  return path:match('(.-)[^/]+$') or ''\n+end\n+\n+local ok = function(x) return assert.True(x) end\n+\n+local tempfile = cimport './src/nvim/tempfile.h'\n+local vim_gettempdir = function() return ffi.string(tempfile.vim_gettempdir()) end\n+local vim_tempname = function() return ffi.string(tempfile.vim_tempname()) end\n+local vim_deltempdir = function() return tempfile.vim_deltempdir() end\n+\n+vim_init()\n+\n+describe('tempfile module:', function()\n+\n+  after_each(function() vim_deltempdir() end)\n \n   describe('vim_gettempdir', function()\n-    it('returns path to Neovim own temp directory', function()\n+\n+    it('generates directory name to a writable, empty directory on first call', function()\n+      local dir = vim_gettempdir()\n+      ok(dir ~= nil and dir:len() > 0)\n+      ok(is_dir(dir))\n+      ok(is_writable(dir))\n+      ok(is_empty(dir))\n+    end)\n+\n+    it('generates a directory which can be later deleted', function()\n       local dir = vim_gettempdir()\n-      assert.True(dir ~= nil and dir:len() > 0)\n-      -- os_file_is_writable returns 2 for a directory which we have rights\n-      -- to write into.\n-      assert.equals(os.os_file_is_writable(helpers.to_cstr(dir)), 2)\n-      for entry in lfs.dir(dir) do\n-        assert.True(entry == '.' or entry == '..')\n-      end\n+      ok(is_dir(dir))\n+      vim_deltempdir()\n+      ok(not is_dir(dir))\n     end)\n \n-    it('returns the same directory on each call', function()\n-      local dir1 = vim_gettempdir()\n-      local dir2 = vim_gettempdir()\n-      assert.equals(dir1, dir2)\n+    context('called successively', function()\n+\n+      it('generates the same directory name', function()\n+        local dir1 = vim_gettempdir()\n+        local dir2 = vim_gettempdir()\n+        ok(dir1 == dir2)\n+      end)\n+\n+      it('interrupted by generating a file name, generates the same directory name', function()\n+        local dir1 = vim_gettempdir()\n+        vim_tempname()\n+        local dir2 = vim_gettempdir()\n+        eq(dir1, dir2)\n+      end)\n+\n+      it('interrupted by deleting the temp directory, generates different directory names with corresponding directories', function()\n+        local dir1 = vim_gettempdir()\n+        ok(is_dir(dir1))\n+        vim_deltempdir()\n+        local dir2 = vim_gettempdir()\n+        ok(is_dir(dir2))\n+        neq(dir1, dir2)\n+      end)\n+\n+      it('interrupted by externally deleting the temp directory, generates the same directory name and with no corresponding director ', function()\n+        local dir1 = vim_gettempdir()\n+        ok(is_dir(dir1))\n+        ok(lfs.rmdir(dir1))\n+        local dir2 = vim_gettempdir()\n+        ok(not is_dir(dir2))\n+        eq(dir1, dir2)\n+      end)\n     end)\n   end)\n \n   describe('vim_tempname', function()\n-    local vim_tempname = function()\n-      return helpers.ffi.string(tempfile.vim_tempname())\n-    end\n-\n-    it('generate name of non-existing file', function()\n-      local file = vim_tempname()\n-      assert.truthy(file)\n-      assert.False(os.os_file_exists(file))\n-    end)\n \n-    it('generate different names on each call', function()\n-      local fst = vim_tempname()\n-      local snd = vim_tempname()\n-      assert.not_equals(fst, snd)\n+    it('generates path name of a non-existing file in temp directory', function()\n+      local path, dir = vim_tempname(), vim_gettempdir()\n+      ok(path_contains_dir(path, dir))\n+      ok(not file_exists(path))\n     end)\n \n-    it('generate file name in Neovim own temp directory', function()\n-      local dir = vim_gettempdir()\n-      local file = vim_tempname()\n-      assert.truthy(file:find('^' .. dir .. '[^/]*$'))\n+    context('called successively', function()\n+\n+      it('generates different paths with a common temp directory', function()\n+        local path1, path2 = vim_tempname(), vim_tempname()\n+        neq(path1, path2)\n+        eq(dir_of_path(path1), dir_of_path(path2))\n+      end)\n+\n+      it('interrupted by generating a directory name, generates different paths with a common temp directory', function()\n+        local path1 = vim_tempname()\n+        vim_gettempdir()\n+        local path2 = vim_tempname()\n+        neq(path1, path2)\n+        eq(dir_of_path(path1), dir_of_path(path2))\n+      end)\n+\n+      it('interrupted by deleting the temp directory, generates paths with different temp directories', function()\n+        local path1 = vim_tempname()\n+        vim_deltempdir()\n+        local path2 = vim_tempname()\n+        neq(path1, path2)\n+        neq(dir_of_path(path1), dir_of_path(path2))\n+      end)\n+\n+      it('interrupted by externally deleting the temp directory, generates a path that is no longer useful', function()",
            "html_url": "https://github.com/neovim/neovim/pull/1617#discussion_r21702898",
            "id": 21702898,
            "line": 135,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzAyODk4",
            "original_commit_id": "e77ad7dbc85ef9877b2ac11864e4517b5cd3d81d",
            "original_line": null,
            "original_position": 174,
            "original_start_line": null,
            "path": "test/unit/tempfile_spec.lua",
            "position": 174,
            "pull_request_review_id": null,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/1617",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21702898/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2014-12-11T21:46:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21702898",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38515?v=4",
                "events_url": "https://api.github.com/users/splinterofchaos/events{/privacy}",
                "followers_url": "https://api.github.com/users/splinterofchaos/followers",
                "following_url": "https://api.github.com/users/splinterofchaos/following{/other_user}",
                "gists_url": "https://api.github.com/users/splinterofchaos/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/splinterofchaos",
                "id": 38515,
                "login": "splinterofchaos",
                "node_id": "MDQ6VXNlcjM4NTE1",
                "organizations_url": "https://api.github.com/users/splinterofchaos/orgs",
                "received_events_url": "https://api.github.com/users/splinterofchaos/received_events",
                "repos_url": "https://api.github.com/users/splinterofchaos/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/splinterofchaos/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/splinterofchaos/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/splinterofchaos",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/1617#discussion_r21712306"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/1617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/21712306"
                }
            },
            "author_association": "NONE",
            "body": "Good eye. I forgot to convert the ok() into an eq()\n",
            "commit_id": "08a2480632030ee2e705a3a8a88da3c1b7eb32c5",
            "created_at": "2014-12-11T21:47:52Z",
            "diff_hunk": "@@ -1,60 +1,147 @@\n+local cimport, vim_init, ffi, to_cstr, eq, neq = (function()\n+  local _ = require 'test.unit.helpers'\n+  return _.cimport, _.vim_init, _.ffi, _.to_cstr, _.eq, _.neq\n+end)()\n+\n local lfs = require 'lfs'\n-local helpers = require 'test.unit.helpers'\n \n-local os = helpers.cimport './src/nvim/os/os.h'\n-local tempfile = helpers.cimport './src/nvim/tempfile.h'\n+local os = cimport './src/nvim/os/os.h'\n \n-helpers.vim_init()\n+-- is_dir('/a/b/') will return true if '/a/b/' is a directory name\n+local is_dir = function(x) return 'directory' == lfs.attributes(x, 'mode') end\n \n-describe('tempfile related functions', function()\n-  after_each(function()\n-    tempfile.vim_deltempdir()\n-  end)\n+-- os_file_is_writable returns 2 for a directory which we have rights\n+-- to write into.\n+local is_writable = function(x) return os.os_file_is_writable(to_cstr(x)) == 2 end\n \n-  local vim_gettempdir = function()\n-    return helpers.ffi.string(tempfile.vim_gettempdir())\n+-- is_empty('/a/b/') will return true if 'a/b/' is a directory linking only to itself and the parent dir\n+local is_empty = function(x)\n+  for f in lfs.dir(x) do\n+    if f ~= '.' and f ~= '..' then return false end\n   end\n+  return true\n+end\n+\n+-- file_exists('/a/b/c') will return true if '/a/b/c' is an existing file\n+local file_exists = os.os_file_exists\n+\n+-- path_contains_dir('/a/b/c', '/a/b/') will return true\n+local path_contains_dir = function(path, dir)\n+  return (path ~= nil) and (path:find(\"^\" .. tostring(dir) .. \"[^/]*$\") ~= nil)\n+end\n+\n+-- dir_of_path('/a/b/c') will return '/a/b/'\n+local dir_of_path = function(path)\n+  return path:match('(.-)[^/]+$') or ''\n+end\n+\n+local ok = function(x) return assert.True(x) end\n+\n+local tempfile = cimport './src/nvim/tempfile.h'\n+local vim_gettempdir = function() return ffi.string(tempfile.vim_gettempdir()) end\n+local vim_tempname = function() return ffi.string(tempfile.vim_tempname()) end\n+local vim_deltempdir = function() return tempfile.vim_deltempdir() end\n+\n+vim_init()\n+\n+describe('tempfile module:', function()\n+\n+  after_each(function() vim_deltempdir() end)\n \n   describe('vim_gettempdir', function()\n-    it('returns path to Neovim own temp directory', function()\n+\n+    it('generates directory name to a writable, empty directory on first call', function()\n+      local dir = vim_gettempdir()\n+      ok(dir ~= nil and dir:len() > 0)\n+      ok(is_dir(dir))\n+      ok(is_writable(dir))\n+      ok(is_empty(dir))\n+    end)\n+\n+    it('generates a directory which can be later deleted', function()\n       local dir = vim_gettempdir()\n-      assert.True(dir ~= nil and dir:len() > 0)\n-      -- os_file_is_writable returns 2 for a directory which we have rights\n-      -- to write into.\n-      assert.equals(os.os_file_is_writable(helpers.to_cstr(dir)), 2)\n-      for entry in lfs.dir(dir) do\n-        assert.True(entry == '.' or entry == '..')\n-      end\n+      ok(is_dir(dir))\n+      vim_deltempdir()\n+      ok(not is_dir(dir))\n     end)\n \n-    it('returns the same directory on each call', function()\n-      local dir1 = vim_gettempdir()\n-      local dir2 = vim_gettempdir()\n-      assert.equals(dir1, dir2)\n+    context('called successively', function()\n+\n+      it('generates the same directory name', function()\n+        local dir1 = vim_gettempdir()\n+        local dir2 = vim_gettempdir()\n+        ok(dir1 == dir2)",
            "html_url": "https://github.com/neovim/neovim/pull/1617#discussion_r21712306",
            "id": 21712306,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzEyMzA2",
            "original_commit_id": "e77ad7dbc85ef9877b2ac11864e4517b5cd3d81d",
            "original_line": null,
            "original_position": 95,
            "original_start_line": null,
            "path": "test/unit/tempfile_spec.lua",
            "position": null,
            "pull_request_review_id": null,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/1617",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21712306/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2014-12-11T21:47:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21712306",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/259933?v=4",
                "events_url": "https://api.github.com/users/stevenyvr987/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevenyvr987/followers",
                "following_url": "https://api.github.com/users/stevenyvr987/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevenyvr987/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevenyvr987",
                "id": 259933,
                "login": "stevenyvr987",
                "node_id": "MDQ6VXNlcjI1OTkzMw==",
                "organizations_url": "https://api.github.com/users/stevenyvr987/orgs",
                "received_events_url": "https://api.github.com/users/stevenyvr987/received_events",
                "repos_url": "https://api.github.com/users/stevenyvr987/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevenyvr987/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevenyvr987/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevenyvr987",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/1617#discussion_r21712443"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/1617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/21712443"
                }
            },
            "author_association": "NONE",
            "body": "Yes. the temp dir path will always have a terminating /.\n\nI tried to find a pathname parser in Lua's standard library, but there doesn't seem to be one.\n",
            "commit_id": "08a2480632030ee2e705a3a8a88da3c1b7eb32c5",
            "created_at": "2014-12-11T21:49:35Z",
            "diff_hunk": "@@ -1,60 +1,147 @@\n+local cimport, vim_init, ffi, to_cstr, eq, neq = (function()\n+  local _ = require 'test.unit.helpers'\n+  return _.cimport, _.vim_init, _.ffi, _.to_cstr, _.eq, _.neq\n+end)()\n+\n local lfs = require 'lfs'\n-local helpers = require 'test.unit.helpers'\n \n-local os = helpers.cimport './src/nvim/os/os.h'\n-local tempfile = helpers.cimport './src/nvim/tempfile.h'\n+local os = cimport './src/nvim/os/os.h'\n \n-helpers.vim_init()\n+-- is_dir('/a/b/') will return true if '/a/b/' is a directory name\n+local is_dir = function(x) return 'directory' == lfs.attributes(x, 'mode') end\n \n-describe('tempfile related functions', function()\n-  after_each(function()\n-    tempfile.vim_deltempdir()\n-  end)\n+-- os_file_is_writable returns 2 for a directory which we have rights\n+-- to write into.\n+local is_writable = function(x) return os.os_file_is_writable(to_cstr(x)) == 2 end\n \n-  local vim_gettempdir = function()\n-    return helpers.ffi.string(tempfile.vim_gettempdir())\n+-- is_empty('/a/b/') will return true if 'a/b/' is a directory linking only to itself and the parent dir\n+local is_empty = function(x)\n+  for f in lfs.dir(x) do\n+    if f ~= '.' and f ~= '..' then return false end\n   end\n+  return true\n+end\n+\n+-- file_exists('/a/b/c') will return true if '/a/b/c' is an existing file\n+local file_exists = os.os_file_exists\n+\n+-- path_contains_dir('/a/b/c', '/a/b/') will return true\n+local path_contains_dir = function(path, dir)\n+  return (path ~= nil) and (path:find(\"^\" .. tostring(dir) .. \"[^/]*$\") ~= nil)\n+end",
            "html_url": "https://github.com/neovim/neovim/pull/1617#discussion_r21712443",
            "id": 21712443,
            "line": 31,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzEyNDQz",
            "original_commit_id": "e77ad7dbc85ef9877b2ac11864e4517b5cd3d81d",
            "original_line": null,
            "original_position": 41,
            "original_start_line": null,
            "path": "test/unit/tempfile_spec.lua",
            "position": 41,
            "pull_request_review_id": null,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/1617",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21712443/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2014-12-11T21:49:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21712443",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/259933?v=4",
                "events_url": "https://api.github.com/users/stevenyvr987/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevenyvr987/followers",
                "following_url": "https://api.github.com/users/stevenyvr987/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevenyvr987/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevenyvr987",
                "id": 259933,
                "login": "stevenyvr987",
                "node_id": "MDQ6VXNlcjI1OTkzMw==",
                "organizations_url": "https://api.github.com/users/stevenyvr987/orgs",
                "received_events_url": "https://api.github.com/users/stevenyvr987/received_events",
                "repos_url": "https://api.github.com/users/stevenyvr987/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevenyvr987/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevenyvr987/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevenyvr987",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/1617#discussion_r21712564"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/1617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/21712564"
                }
            },
            "author_association": "NONE",
            "body": "That was my motivation to add the new test cases, in order to clarify the tempdir() behaviour.\n",
            "commit_id": "08a2480632030ee2e705a3a8a88da3c1b7eb32c5",
            "created_at": "2014-12-11T21:51:15Z",
            "diff_hunk": "@@ -1,60 +1,147 @@\n+local cimport, vim_init, ffi, to_cstr, eq, neq = (function()\n+  local _ = require 'test.unit.helpers'\n+  return _.cimport, _.vim_init, _.ffi, _.to_cstr, _.eq, _.neq\n+end)()\n+\n local lfs = require 'lfs'\n-local helpers = require 'test.unit.helpers'\n \n-local os = helpers.cimport './src/nvim/os/os.h'\n-local tempfile = helpers.cimport './src/nvim/tempfile.h'\n+local os = cimport './src/nvim/os/os.h'\n \n-helpers.vim_init()\n+-- is_dir('/a/b/') will return true if '/a/b/' is a directory name\n+local is_dir = function(x) return 'directory' == lfs.attributes(x, 'mode') end\n \n-describe('tempfile related functions', function()\n-  after_each(function()\n-    tempfile.vim_deltempdir()\n-  end)\n+-- os_file_is_writable returns 2 for a directory which we have rights\n+-- to write into.\n+local is_writable = function(x) return os.os_file_is_writable(to_cstr(x)) == 2 end\n \n-  local vim_gettempdir = function()\n-    return helpers.ffi.string(tempfile.vim_gettempdir())\n+-- is_empty('/a/b/') will return true if 'a/b/' is a directory linking only to itself and the parent dir\n+local is_empty = function(x)\n+  for f in lfs.dir(x) do\n+    if f ~= '.' and f ~= '..' then return false end\n   end\n+  return true\n+end\n+\n+-- file_exists('/a/b/c') will return true if '/a/b/c' is an existing file\n+local file_exists = os.os_file_exists\n+\n+-- path_contains_dir('/a/b/c', '/a/b/') will return true\n+local path_contains_dir = function(path, dir)\n+  return (path ~= nil) and (path:find(\"^\" .. tostring(dir) .. \"[^/]*$\") ~= nil)\n+end\n+\n+-- dir_of_path('/a/b/c') will return '/a/b/'\n+local dir_of_path = function(path)\n+  return path:match('(.-)[^/]+$') or ''\n+end\n+\n+local ok = function(x) return assert.True(x) end\n+\n+local tempfile = cimport './src/nvim/tempfile.h'\n+local vim_gettempdir = function() return ffi.string(tempfile.vim_gettempdir()) end\n+local vim_tempname = function() return ffi.string(tempfile.vim_tempname()) end\n+local vim_deltempdir = function() return tempfile.vim_deltempdir() end\n+\n+vim_init()\n+\n+describe('tempfile module:', function()\n+\n+  after_each(function() vim_deltempdir() end)\n \n   describe('vim_gettempdir', function()\n-    it('returns path to Neovim own temp directory', function()\n+\n+    it('generates directory name to a writable, empty directory on first call', function()\n+      local dir = vim_gettempdir()\n+      ok(dir ~= nil and dir:len() > 0)\n+      ok(is_dir(dir))\n+      ok(is_writable(dir))\n+      ok(is_empty(dir))\n+    end)\n+\n+    it('generates a directory which can be later deleted', function()\n       local dir = vim_gettempdir()\n-      assert.True(dir ~= nil and dir:len() > 0)\n-      -- os_file_is_writable returns 2 for a directory which we have rights\n-      -- to write into.\n-      assert.equals(os.os_file_is_writable(helpers.to_cstr(dir)), 2)\n-      for entry in lfs.dir(dir) do\n-        assert.True(entry == '.' or entry == '..')\n-      end\n+      ok(is_dir(dir))\n+      vim_deltempdir()\n+      ok(not is_dir(dir))\n     end)\n \n-    it('returns the same directory on each call', function()\n-      local dir1 = vim_gettempdir()\n-      local dir2 = vim_gettempdir()\n-      assert.equals(dir1, dir2)\n+    context('called successively', function()\n+\n+      it('generates the same directory name', function()\n+        local dir1 = vim_gettempdir()\n+        local dir2 = vim_gettempdir()\n+        ok(dir1 == dir2)\n+      end)\n+\n+      it('interrupted by generating a file name, generates the same directory name', function()\n+        local dir1 = vim_gettempdir()\n+        vim_tempname()\n+        local dir2 = vim_gettempdir()\n+        eq(dir1, dir2)\n+      end)\n+\n+      it('interrupted by deleting the temp directory, generates different directory names with corresponding directories', function()\n+        local dir1 = vim_gettempdir()\n+        ok(is_dir(dir1))\n+        vim_deltempdir()\n+        local dir2 = vim_gettempdir()\n+        ok(is_dir(dir2))\n+        neq(dir1, dir2)\n+      end)\n+\n+      it('interrupted by externally deleting the temp directory, generates the same directory name and with no corresponding director ', function()\n+        local dir1 = vim_gettempdir()\n+        ok(is_dir(dir1))\n+        ok(lfs.rmdir(dir1))\n+        local dir2 = vim_gettempdir()\n+        ok(not is_dir(dir2))\n+        eq(dir1, dir2)\n+      end)\n     end)\n   end)\n \n   describe('vim_tempname', function()\n-    local vim_tempname = function()\n-      return helpers.ffi.string(tempfile.vim_tempname())\n-    end\n-\n-    it('generate name of non-existing file', function()\n-      local file = vim_tempname()\n-      assert.truthy(file)\n-      assert.False(os.os_file_exists(file))\n-    end)\n \n-    it('generate different names on each call', function()\n-      local fst = vim_tempname()\n-      local snd = vim_tempname()\n-      assert.not_equals(fst, snd)\n+    it('generates path name of a non-existing file in temp directory', function()\n+      local path, dir = vim_tempname(), vim_gettempdir()\n+      ok(path_contains_dir(path, dir))\n+      ok(not file_exists(path))\n     end)\n \n-    it('generate file name in Neovim own temp directory', function()\n-      local dir = vim_gettempdir()\n-      local file = vim_tempname()\n-      assert.truthy(file:find('^' .. dir .. '[^/]*$'))\n+    context('called successively', function()\n+\n+      it('generates different paths with a common temp directory', function()\n+        local path1, path2 = vim_tempname(), vim_tempname()\n+        neq(path1, path2)\n+        eq(dir_of_path(path1), dir_of_path(path2))\n+      end)\n+\n+      it('interrupted by generating a directory name, generates different paths with a common temp directory', function()\n+        local path1 = vim_tempname()\n+        vim_gettempdir()\n+        local path2 = vim_tempname()\n+        neq(path1, path2)\n+        eq(dir_of_path(path1), dir_of_path(path2))\n+      end)\n+\n+      it('interrupted by deleting the temp directory, generates paths with different temp directories', function()\n+        local path1 = vim_tempname()\n+        vim_deltempdir()\n+        local path2 = vim_tempname()\n+        neq(path1, path2)\n+        neq(dir_of_path(path1), dir_of_path(path2))\n+      end)\n+\n+      it('interrupted by externally deleting the temp directory, generates a path that is no longer useful', function()",
            "html_url": "https://github.com/neovim/neovim/pull/1617#discussion_r21712564",
            "id": 21712564,
            "line": 135,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzEyNTY0",
            "original_commit_id": "e77ad7dbc85ef9877b2ac11864e4517b5cd3d81d",
            "original_line": null,
            "original_position": 174,
            "original_start_line": null,
            "path": "test/unit/tempfile_spec.lua",
            "position": 174,
            "pull_request_review_id": null,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/1617",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21712564/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2014-12-11T21:51:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/21712564",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/259933?v=4",
                "events_url": "https://api.github.com/users/stevenyvr987/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevenyvr987/followers",
                "following_url": "https://api.github.com/users/stevenyvr987/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevenyvr987/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevenyvr987",
                "id": 259933,
                "login": "stevenyvr987",
                "node_id": "MDQ6VXNlcjI1OTkzMw==",
                "organizations_url": "https://api.github.com/users/stevenyvr987/orgs",
                "received_events_url": "https://api.github.com/users/stevenyvr987/received_events",
                "repos_url": "https://api.github.com/users/stevenyvr987/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevenyvr987/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevenyvr987/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevenyvr987",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/1617#discussion_r210127674"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/1617"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/210127674"
                }
            },
            "author_association": "MEMBER",
            "body": "this needs to be:\r\n\r\n    local _ = require(\"test.unit.helpers\")(after_each)\r\n",
            "commit_id": "08a2480632030ee2e705a3a8a88da3c1b7eb32c5",
            "created_at": "2018-08-14T22:46:34Z",
            "diff_hunk": "@@ -1,60 +1,147 @@\n+local cimport, vim_init, ffi, to_cstr, eq, neq = (function()\n+  local _ = require 'test.unit.helpers'",
            "html_url": "https://github.com/neovim/neovim/pull/1617#discussion_r210127674",
            "id": 210127674,
            "line": 2,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDEyNzY3NA==",
            "original_commit_id": "08a2480632030ee2e705a3a8a88da3c1b7eb32c5",
            "original_line": 2,
            "original_position": 2,
            "original_start_line": null,
            "path": "test/unit/tempfile_spec.lua",
            "position": 2,
            "pull_request_review_id": 146280492,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/1617",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/210127674/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2018-08-14T22:46:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/210127674",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "NONE",
            "body": "I've added a new, third commit as a response to the code review. The unit test was locally tested on my machine (Ubuntu 12.04, 32-bits):\n\n$ valgrind -q .deps/usr/bin/busted --lpath=build/?.lua test/unit/tempfile_spec.lua\n●●●●●●●●●●●\n11 successes / 0 failures / 0 errors / 0 pending : 0.0 seconds\n",
            "created_at": "2014-12-10T21:32:39Z",
            "html_url": "https://github.com/neovim/neovim/pull/1617#issuecomment-66527839",
            "id": 66527839,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1617",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTI3ODM5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/66527839/reactions"
            },
            "updated_at": "2014-12-10T21:32:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/66527839",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/259933?v=4",
                "events_url": "https://api.github.com/users/stevenyvr987/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevenyvr987/followers",
                "following_url": "https://api.github.com/users/stevenyvr987/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevenyvr987/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevenyvr987",
                "id": 259933,
                "login": "stevenyvr987",
                "node_id": "MDQ6VXNlcjI1OTkzMw==",
                "organizations_url": "https://api.github.com/users/stevenyvr987/orgs",
                "received_events_url": "https://api.github.com/users/stevenyvr987/received_events",
                "repos_url": "https://api.github.com/users/stevenyvr987/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevenyvr987/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevenyvr987/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevenyvr987",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "NONE",
            "body": "I pushed another commit to convert a forgotten ok(a == b) into an eq(a, b).\n",
            "created_at": "2014-12-11T21:52:13Z",
            "html_url": "https://github.com/neovim/neovim/pull/1617#issuecomment-66695699",
            "id": 66695699,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1617",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY2Njk1Njk5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/66695699/reactions"
            },
            "updated_at": "2014-12-11T21:52:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/66695699",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/259933?v=4",
                "events_url": "https://api.github.com/users/stevenyvr987/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevenyvr987/followers",
                "following_url": "https://api.github.com/users/stevenyvr987/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevenyvr987/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevenyvr987",
                "id": 259933,
                "login": "stevenyvr987",
                "node_id": "MDQ6VXNlcjI1OTkzMw==",
                "organizations_url": "https://api.github.com/users/stevenyvr987/orgs",
                "received_events_url": "https://api.github.com/users/stevenyvr987/received_events",
                "repos_url": "https://api.github.com/users/stevenyvr987/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevenyvr987/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevenyvr987/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevenyvr987",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "what would be required to get this rebased and merged? are their any substantive changes needed?",
            "created_at": "2018-08-14T22:16:49Z",
            "html_url": "https://github.com/neovim/neovim/pull/1617#issuecomment-413033967",
            "id": 413033967,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1617",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzAzMzk2Nw==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/413033967/reactions"
            },
            "updated_at": "2018-08-14T22:16:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/413033967",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7495?v=4",
                "events_url": "https://api.github.com/users/josephholsten/events{/privacy}",
                "followers_url": "https://api.github.com/users/josephholsten/followers",
                "following_url": "https://api.github.com/users/josephholsten/following{/other_user}",
                "gists_url": "https://api.github.com/users/josephholsten/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/josephholsten",
                "id": 7495,
                "login": "josephholsten",
                "node_id": "MDQ6VXNlcjc0OTU=",
                "organizations_url": "https://api.github.com/users/josephholsten/orgs",
                "received_events_url": "https://api.github.com/users/josephholsten/received_events",
                "repos_url": "https://api.github.com/users/josephholsten/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/josephholsten/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/josephholsten/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/josephholsten",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Probably doesn't need major changes, and it would be nice to have these tests.",
            "created_at": "2018-08-14T22:46:05Z",
            "html_url": "https://github.com/neovim/neovim/pull/1617#issuecomment-413040005",
            "id": 413040005,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1617",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzA0MDAwNQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/413040005/reactions"
            },
            "updated_at": "2018-08-14T22:46:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/413040005",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "We have more tempfile tests since this was added.",
            "created_at": "2024-12-17T12:25:18Z",
            "html_url": "https://github.com/neovim/neovim/pull/1617#issuecomment-2548323303",
            "id": 2548323303,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1617",
            "node_id": "IC_kwDOAPphoM6X5FPn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2548323303/reactions"
            },
            "updated_at": "2024-12-17T12:25:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2548323303",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/1617/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/1617/commits",
    "created_at": "2014-12-05T21:41:30Z",
    "diff_url": "https://github.com/neovim/neovim/pull/1617.diff",
    "draft": false,
    "head": {
        "label": "stevenyvr987:unit_test_tempfile",
        "ref": "unit_test_tempfile",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/stevenyvr987/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/stevenyvr987/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/stevenyvr987/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/stevenyvr987/neovim/branches{/branch}",
            "clone_url": "https://github.com/stevenyvr987/neovim.git",
            "collaborators_url": "https://api.github.com/repos/stevenyvr987/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/stevenyvr987/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/stevenyvr987/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/stevenyvr987/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/stevenyvr987/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/stevenyvr987/neovim/contributors",
            "created_at": "2014-12-02T20:37:07Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/stevenyvr987/neovim/deployments",
            "description": "vim out of the box",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/stevenyvr987/neovim/downloads",
            "events_url": "https://api.github.com/repos/stevenyvr987/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/stevenyvr987/neovim/forks",
            "full_name": "stevenyvr987/neovim",
            "git_commits_url": "https://api.github.com/repos/stevenyvr987/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/stevenyvr987/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/stevenyvr987/neovim/git/tags{/sha}",
            "git_url": "git://github.com/stevenyvr987/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "http://neovim.org/",
            "hooks_url": "https://api.github.com/repos/stevenyvr987/neovim/hooks",
            "html_url": "https://github.com/stevenyvr987/neovim",
            "id": 27452238,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/stevenyvr987/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/stevenyvr987/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/stevenyvr987/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/stevenyvr987/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/stevenyvr987/neovim/labels{/name}",
            "language": "VimL",
            "languages_url": "https://api.github.com/repos/stevenyvr987/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/stevenyvr987/neovim/merges",
            "milestones_url": "https://api.github.com/repos/stevenyvr987/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkyNzQ1MjIzOA==",
            "notifications_url": "https://api.github.com/repos/stevenyvr987/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/259933?v=4",
                "events_url": "https://api.github.com/users/stevenyvr987/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevenyvr987/followers",
                "following_url": "https://api.github.com/users/stevenyvr987/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevenyvr987/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevenyvr987",
                "id": 259933,
                "login": "stevenyvr987",
                "node_id": "MDQ6VXNlcjI1OTkzMw==",
                "organizations_url": "https://api.github.com/users/stevenyvr987/orgs",
                "received_events_url": "https://api.github.com/users/stevenyvr987/received_events",
                "repos_url": "https://api.github.com/users/stevenyvr987/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevenyvr987/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevenyvr987/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevenyvr987",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/stevenyvr987/neovim/pulls{/number}",
            "pushed_at": "2016-04-22T20:27:26Z",
            "releases_url": "https://api.github.com/repos/stevenyvr987/neovim/releases{/id}",
            "size": 41648,
            "ssh_url": "git@github.com:stevenyvr987/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/stevenyvr987/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/stevenyvr987/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/stevenyvr987/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/stevenyvr987/neovim/subscription",
            "svn_url": "https://github.com/stevenyvr987/neovim",
            "tags_url": "https://api.github.com/repos/stevenyvr987/neovim/tags",
            "teams_url": "https://api.github.com/repos/stevenyvr987/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/stevenyvr987/neovim/git/trees{/sha}",
            "updated_at": "2016-04-22T20:27:51Z",
            "url": "https://api.github.com/repos/stevenyvr987/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "08a2480632030ee2e705a3a8a88da3c1b7eb32c5",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/259933?v=4",
            "events_url": "https://api.github.com/users/stevenyvr987/events{/privacy}",
            "followers_url": "https://api.github.com/users/stevenyvr987/followers",
            "following_url": "https://api.github.com/users/stevenyvr987/following{/other_user}",
            "gists_url": "https://api.github.com/users/stevenyvr987/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/stevenyvr987",
            "id": 259933,
            "login": "stevenyvr987",
            "node_id": "MDQ6VXNlcjI1OTkzMw==",
            "organizations_url": "https://api.github.com/users/stevenyvr987/orgs",
            "received_events_url": "https://api.github.com/users/stevenyvr987/received_events",
            "repos_url": "https://api.github.com/users/stevenyvr987/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/stevenyvr987/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stevenyvr987/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/stevenyvr987",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/1617",
    "id": 25602243,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/1617",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 110418643,
            "name": "test",
            "node_id": "MDU6TGFiZWwxMTA0MTg2NDM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/test"
        }
    ],
    "locked": false,
    "merge_commit_sha": null,
    "merged_at": null,
    "milestone": null,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjU2MDIyNDM=",
    "number": 1617,
    "patch_url": "https://github.com/neovim/neovim/pull/1617.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/1617/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/08a2480632030ee2e705a3a8a88da3c1b7eb32c5",
    "title": "Unit test tempfile - add more test cases",
    "updated_at": "2024-12-17T12:25:19Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/1617",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/259933?v=4",
        "events_url": "https://api.github.com/users/stevenyvr987/events{/privacy}",
        "followers_url": "https://api.github.com/users/stevenyvr987/followers",
        "following_url": "https://api.github.com/users/stevenyvr987/following{/other_user}",
        "gists_url": "https://api.github.com/users/stevenyvr987/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/stevenyvr987",
        "id": 259933,
        "login": "stevenyvr987",
        "node_id": "MDQ6VXNlcjI1OTkzMw==",
        "organizations_url": "https://api.github.com/users/stevenyvr987/orgs",
        "received_events_url": "https://api.github.com/users/stevenyvr987/received_events",
        "repos_url": "https://api.github.com/users/stevenyvr987/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/stevenyvr987/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/stevenyvr987/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/stevenyvr987",
        "user_view_type": "public"
    }
}