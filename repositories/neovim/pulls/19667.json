{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/19667/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/19667/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/19667"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/19667"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/19667/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/19667"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/6a038b724925f20febe1be7f5f0661acceaa6478"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 4791,
            "forks_count": 4791,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1648,
            "open_issues_count": 1648,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2023-08-01T12:17:00Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 247672,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 67911,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2023-08-01T11:58:40Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 67911,
            "watchers_count": 67911,
            "web_commit_signoff_required": false
        },
        "sha": "629169462a82f0fbb7a8911a4554894537d6776c",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "API function for listing and getting details about vim script functions. It's going to be really useful for completion and debugging tools.\r\n\r\n* `nvim_get_functions({ builtin = true, user = true }, {})`\r\n  Lists functions:\r\n  ```\r\n  {\r\n    [\"<SNR>11_SetDefault\"] = {\r\n      name = \"<SNR>11_SetDefault\",\r\n      type = \"user\"\r\n    },\r\n    ...,\r\n    Abolished = {\r\n      name = \"Abolished\",\r\n      type = \"user\"\r\n    },\r\n    ...,\r\n    abs = {\r\n      name = \"abs\",\r\n      type = \"builtin\"\r\n    },\r\n    ...\r\n  }\r\n  ```\r\n* `nvim_get_functions({ builtin = true, user = true }, { details = true })`\r\n  Lists all functions with included details:\r\n  ```\r\n  {\r\n    Abolished = {\r\n      abort = false,\r\n      args = {},\r\n      closure = false,\r\n      dict = false,\r\n      lnum = 433,\r\n      name = \"Abolished\",\r\n      range = false,\r\n      sid = 36,\r\n      type = \"user\",\r\n      varargs = false\r\n    },\r\n    ...,\r\n    abs = {\r\n      argnames = { { \"expr\" } },\r\n      base_arg = 1,\r\n      fast = false,\r\n      max_argc = 1,\r\n      min_argc = 1,\r\n      name = \"abs\",\r\n      type = \"builtin\"\r\n    },\r\n    ...\r\n  }\r\n  ```\r\n* `nvim_get_functions('Abolished', { details = true })`\r\n  Returns details of a user function (same format as above)\r\n* `nvim_get_functions('Abolished', { lines = true })`\r\n  Returns user function source\r\n  ```\r\n  {\r\n    lines = { \"  return get(g:abolish_last_dict,submatch(0),submatch(0))\" },\r\n    name = \"Abolished\",\r\n    type = \"user\"\r\n  }\r\n  ```\r\n\r\n1. Is the name okay, or should it maybe be something that hints at vim script?\r\n2. Function has two \"modes\", getting a function under some name, and listing all functions. Maybe it should be split into two API functions?\r\n3. To keep it consistent with `nvim_get_commands`, should it take only one one `opts` argument? `{ name = '...' }` gets a single function/command, `{ builtin = true, user = true }` lists builtin/user functions/commands.\r\n\r\n---\r\n- [x] docs\r\n- [x] tests",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/19667#discussion_r953191906"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/19667"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/953191906"
                }
            },
            "author_association": "MEMBER",
            "body": "we have `@param[in]` and `@return [allocated]` conventions, I wonder if we need a `[owned]` or `[freed]` convention, e.g.\r\n\r\n```suggestion\r\n/// @param[freed] name\r\n```\r\n",
            "commit_id": "6a038b724925f20febe1be7f5f0661acceaa6478",
            "created_at": "2022-08-23T23:39:48Z",
            "diff_hunk": "@@ -745,3 +746,294 @@ Dictionary nvim_parse_expression(String expr, String flags, Boolean highlight, E\n   viml_parser_destroy(&pstate);\n   return ret;\n }\n+\n+/// Translates and returns allocated user function name.\n+static String user_function_name(ufunc_T *fp)\n+{\n+  String name;\n+  const size_t name_len = STRLEN(fp->uf_name);\n+  if (fp->uf_name[0] == K_SPECIAL) {\n+    // Replace [ K_SPECIAL KS_EXTRA KE_SNR ] with \"<SNR>\"\n+    name.size = name_len + 2;\n+    name.data = xmalloc(name.size + 1);\n+    name.data[0] = '<';\n+    name.data[1] = 'S';\n+    name.data[2] = 'N';\n+    name.data[3] = 'R';\n+    name.data[4] = '>';\n+    memcpy(name.data + 5, fp->uf_name + 3, name_len - 3);\n+    name.data[name.size] = '\\0';\n+  } else {\n+    name.size = name_len;\n+    name.data = xmalloc(name.size + 1);\n+    memcpy(name.data, fp->uf_name, name_len);\n+    name.data[name.size] = '\\0';\n+  }\n+  return name;\n+}\n+\n+/// Takes ownership of name.\n+static Dictionary user_function_dict(ufunc_T *fp, String name, bool details, bool lines)\n+{\n+  Dictionary dict = ARRAY_DICT_INIT;\n+  size_t dict_size = 2U + (details ? 8 : 0) + (lines ? 1 : 0);\n+  kv_resize(dict, dict_size);\n+\n+  // Function name\n+  PUT(dict, \"name\", STRING_OBJ(name));\n+  PUT(dict, \"type\", CSTR_TO_OBJ(\"user\"));\n+\n+  if (details) {\n+    // Arguments\n+    Array args = ARRAY_DICT_INIT;\n+    if (fp->uf_args.ga_len > 0) {\n+      kv_resize(args, (size_t)fp->uf_args.ga_len);\n+      for (int j = 0; j < fp->uf_args.ga_len; j++) {\n+        Dictionary arg = ARRAY_DICT_INIT;\n+        PUT(arg, \"name\", CSTR_TO_OBJ((const char *)FUNCARG(fp, j)));\n+        if (j >= fp->uf_args.ga_len - fp->uf_def_args.ga_len) {\n+          PUT(arg, \"default\",\n+              CSTR_TO_OBJ(((char **)(fp->uf_def_args.ga_data))\n+                          [j - fp->uf_args.ga_len + fp->uf_def_args.ga_len]));\n+        }\n+        kv_push(args, DICTIONARY_OBJ(arg));\n+      }\n+    }\n+    PUT(dict, \"args\", ARRAY_OBJ(args));\n+    PUT(dict, \"varargs\", BOOLEAN_OBJ(fp->uf_varargs));\n+    // Attributes\n+    PUT(dict, \"abort\", BOOLEAN_OBJ(fp->uf_flags & FC_ABORT));\n+    PUT(dict, \"range\", BOOLEAN_OBJ(fp->uf_flags & FC_RANGE));\n+    PUT(dict, \"dict\", BOOLEAN_OBJ(fp->uf_flags & FC_DICT));\n+    PUT(dict, \"closure\", BOOLEAN_OBJ(fp->uf_flags & FC_CLOSURE));\n+    // Script\n+    PUT(dict, \"sid\", INTEGER_OBJ(fp->uf_script_ctx.sc_sid));\n+    PUT(dict, \"lnum\", INTEGER_OBJ(fp->uf_script_ctx.sc_lnum));\n+  }\n+\n+  // Source lines\n+  if (lines) {\n+    Array array = ARRAY_DICT_INIT;\n+    if (fp->uf_lines.ga_len > 0) {\n+      kv_resize(array, (size_t)fp->uf_lines.ga_len);\n+      for (int j = 0; j < fp->uf_lines.ga_len; j++) {\n+        kv_push(array, CSTR_TO_OBJ((const char *)FUNCLINE(fp, j)));\n+      }\n+    }\n+    PUT(dict, \"lines\", ARRAY_OBJ(array));\n+  }\n+\n+  return dict;\n+}\n+\n+/// Takes ownership of name.",
            "html_url": "https://github.com/neovim/neovim/pull/19667#discussion_r953191906",
            "id": 953191906,
            "line": 829,
            "node_id": "PRRC_kwDOAPphoM440I3i",
            "original_commit_id": "6a038b724925f20febe1be7f5f0661acceaa6478",
            "original_line": 829,
            "original_position": 92,
            "original_start_line": null,
            "path": "src/nvim/api/vimscript.c",
            "position": 92,
            "pull_request_review_id": 1082952656,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/19667",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/953191906/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-08-23T23:39:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/953191906",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/19667#discussion_r953200696"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/19667"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/953200696"
                }
            },
            "author_association": "MEMBER",
            "body": "i don't understand the dictionary case. Need some rewording here.",
            "commit_id": "6a038b724925f20febe1be7f5f0661acceaa6478",
            "created_at": "2022-08-24T00:02:05Z",
            "diff_hunk": "@@ -745,3 +746,294 @@ Dictionary nvim_parse_expression(String expr, String flags, Boolean highlight, E\n   viml_parser_destroy(&pstate);\n   return ret;\n }\n+\n+/// Translates and returns allocated user function name.\n+static String user_function_name(ufunc_T *fp)\n+{\n+  String name;\n+  const size_t name_len = STRLEN(fp->uf_name);\n+  if (fp->uf_name[0] == K_SPECIAL) {\n+    // Replace [ K_SPECIAL KS_EXTRA KE_SNR ] with \"<SNR>\"\n+    name.size = name_len + 2;\n+    name.data = xmalloc(name.size + 1);\n+    name.data[0] = '<';\n+    name.data[1] = 'S';\n+    name.data[2] = 'N';\n+    name.data[3] = 'R';\n+    name.data[4] = '>';\n+    memcpy(name.data + 5, fp->uf_name + 3, name_len - 3);\n+    name.data[name.size] = '\\0';\n+  } else {\n+    name.size = name_len;\n+    name.data = xmalloc(name.size + 1);\n+    memcpy(name.data, fp->uf_name, name_len);\n+    name.data[name.size] = '\\0';\n+  }\n+  return name;\n+}\n+\n+/// Takes ownership of name.\n+static Dictionary user_function_dict(ufunc_T *fp, String name, bool details, bool lines)\n+{\n+  Dictionary dict = ARRAY_DICT_INIT;\n+  size_t dict_size = 2U + (details ? 8 : 0) + (lines ? 1 : 0);\n+  kv_resize(dict, dict_size);\n+\n+  // Function name\n+  PUT(dict, \"name\", STRING_OBJ(name));\n+  PUT(dict, \"type\", CSTR_TO_OBJ(\"user\"));\n+\n+  if (details) {\n+    // Arguments\n+    Array args = ARRAY_DICT_INIT;\n+    if (fp->uf_args.ga_len > 0) {\n+      kv_resize(args, (size_t)fp->uf_args.ga_len);\n+      for (int j = 0; j < fp->uf_args.ga_len; j++) {\n+        Dictionary arg = ARRAY_DICT_INIT;\n+        PUT(arg, \"name\", CSTR_TO_OBJ((const char *)FUNCARG(fp, j)));\n+        if (j >= fp->uf_args.ga_len - fp->uf_def_args.ga_len) {\n+          PUT(arg, \"default\",\n+              CSTR_TO_OBJ(((char **)(fp->uf_def_args.ga_data))\n+                          [j - fp->uf_args.ga_len + fp->uf_def_args.ga_len]));\n+        }\n+        kv_push(args, DICTIONARY_OBJ(arg));\n+      }\n+    }\n+    PUT(dict, \"args\", ARRAY_OBJ(args));\n+    PUT(dict, \"varargs\", BOOLEAN_OBJ(fp->uf_varargs));\n+    // Attributes\n+    PUT(dict, \"abort\", BOOLEAN_OBJ(fp->uf_flags & FC_ABORT));\n+    PUT(dict, \"range\", BOOLEAN_OBJ(fp->uf_flags & FC_RANGE));\n+    PUT(dict, \"dict\", BOOLEAN_OBJ(fp->uf_flags & FC_DICT));\n+    PUT(dict, \"closure\", BOOLEAN_OBJ(fp->uf_flags & FC_CLOSURE));\n+    // Script\n+    PUT(dict, \"sid\", INTEGER_OBJ(fp->uf_script_ctx.sc_sid));\n+    PUT(dict, \"lnum\", INTEGER_OBJ(fp->uf_script_ctx.sc_lnum));\n+  }\n+\n+  // Source lines\n+  if (lines) {\n+    Array array = ARRAY_DICT_INIT;\n+    if (fp->uf_lines.ga_len > 0) {\n+      kv_resize(array, (size_t)fp->uf_lines.ga_len);\n+      for (int j = 0; j < fp->uf_lines.ga_len; j++) {\n+        kv_push(array, CSTR_TO_OBJ((const char *)FUNCLINE(fp, j)));\n+      }\n+    }\n+    PUT(dict, \"lines\", ARRAY_OBJ(array));\n+  }\n+\n+  return dict;\n+}\n+\n+/// Takes ownership of name.\n+static Dictionary builtin_function_dict(const EvalFuncDef *fn, String name, bool details)\n+{\n+  Dictionary dict = ARRAY_DICT_INIT;\n+  kv_resize(dict, details ? 7 : 2);\n+\n+  PUT(dict, \"name\", STRING_OBJ(name));\n+  PUT(dict, \"type\", CSTR_TO_OBJ(\"builtin\"));\n+\n+  if (details) {\n+    PUT(dict, \"min_argc\", INTEGER_OBJ(fn->min_argc));\n+    PUT(dict, \"max_argc\", INTEGER_OBJ(fn->max_argc));\n+    PUT(dict, \"base_arg\", INTEGER_OBJ(fn->base_arg));\n+    PUT(dict, \"fast\", BOOLEAN_OBJ(fn->fast));\n+\n+    // Argument names\n+    if (fn->argnames != NULL) {\n+      Array overloads = ARRAY_DICT_INIT;\n+      Array names = ARRAY_DICT_INIT;\n+      char buf[64] = { 0 };\n+      size_t pos = 0;\n+\n+      // Argument are separated with unit separator (ascii \\x1F),\n+      // overloads with record separator (ascii \\x1E).\n+      for (const char *p = fn->argnames;; p++) {\n+        if (*p == NUL || *p == '\\x1F' || *p == '\\x1E') {\n+          assert(pos < 64);\n+          buf[pos++] = NUL;\n+          String str = {\n+            .data = xmemdupz(buf, pos),\n+            .size = pos - 1,\n+          };\n+          pos = 0;\n+\n+          if (*p == '\\x1F') {  // unit separator: argument separator\n+            kv_push(names, STRING_OBJ(str));\n+          } else if (*p == '\\x1E') {  // record separator: overload separator\n+            kv_push(names, STRING_OBJ(str));\n+            kv_push(overloads, ARRAY_OBJ(names));\n+            names = (Array)ARRAY_DICT_INIT;\n+          } else {  // NUL\n+            kv_push(names, STRING_OBJ(str));\n+            kv_push(overloads, ARRAY_OBJ(names));\n+            break;\n+          }\n+        } else {\n+          buf[pos++] = *p;\n+        }\n+      }\n+\n+      PUT(dict, \"argnames\", ARRAY_OBJ(overloads));\n+    }\n+  }\n+\n+  return dict;\n+}\n+\n+/// Lists Vimscript functions.\n+///\n+/// @param query    When string gets information about the function under this name.\n+///                 When dictionary lists functions. The following keys are accepted:",
            "html_url": "https://github.com/neovim/neovim/pull/19667#discussion_r953200696",
            "id": 953200696,
            "line": 889,
            "node_id": "PRRC_kwDOAPphoM440LA4",
            "original_commit_id": "6a038b724925f20febe1be7f5f0661acceaa6478",
            "original_line": 889,
            "original_position": 152,
            "original_start_line": 888,
            "path": "src/nvim/api/vimscript.c",
            "position": 152,
            "pull_request_review_id": 1082963475,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/19667",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/953200696/reactions"
            },
            "side": "RIGHT",
            "start_line": 888,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-08-24T00:14:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/953200696",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/19667#discussion_r953201789"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/19667"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/953201789"
                }
            },
            "author_association": "MEMBER",
            "body": "can avoid this for-loop by updating `keysets.lua`\r\nhttps://github.com/neovim/neovim/blob/6cc6e11929ad76a2dc5204aed95cb9ed1dafde23/src/nvim/api/extmark.c#L618",
            "commit_id": "6a038b724925f20febe1be7f5f0661acceaa6478",
            "created_at": "2022-08-24T00:04:53Z",
            "diff_hunk": "@@ -745,3 +746,294 @@ Dictionary nvim_parse_expression(String expr, String flags, Boolean highlight, E\n   viml_parser_destroy(&pstate);\n   return ret;\n }\n+\n+/// Translates and returns allocated user function name.\n+static String user_function_name(ufunc_T *fp)\n+{\n+  String name;\n+  const size_t name_len = STRLEN(fp->uf_name);\n+  if (fp->uf_name[0] == K_SPECIAL) {\n+    // Replace [ K_SPECIAL KS_EXTRA KE_SNR ] with \"<SNR>\"\n+    name.size = name_len + 2;\n+    name.data = xmalloc(name.size + 1);\n+    name.data[0] = '<';\n+    name.data[1] = 'S';\n+    name.data[2] = 'N';\n+    name.data[3] = 'R';\n+    name.data[4] = '>';\n+    memcpy(name.data + 5, fp->uf_name + 3, name_len - 3);\n+    name.data[name.size] = '\\0';\n+  } else {\n+    name.size = name_len;\n+    name.data = xmalloc(name.size + 1);\n+    memcpy(name.data, fp->uf_name, name_len);\n+    name.data[name.size] = '\\0';\n+  }\n+  return name;\n+}\n+\n+/// Takes ownership of name.\n+static Dictionary user_function_dict(ufunc_T *fp, String name, bool details, bool lines)\n+{\n+  Dictionary dict = ARRAY_DICT_INIT;\n+  size_t dict_size = 2U + (details ? 8 : 0) + (lines ? 1 : 0);\n+  kv_resize(dict, dict_size);\n+\n+  // Function name\n+  PUT(dict, \"name\", STRING_OBJ(name));\n+  PUT(dict, \"type\", CSTR_TO_OBJ(\"user\"));\n+\n+  if (details) {\n+    // Arguments\n+    Array args = ARRAY_DICT_INIT;\n+    if (fp->uf_args.ga_len > 0) {\n+      kv_resize(args, (size_t)fp->uf_args.ga_len);\n+      for (int j = 0; j < fp->uf_args.ga_len; j++) {\n+        Dictionary arg = ARRAY_DICT_INIT;\n+        PUT(arg, \"name\", CSTR_TO_OBJ((const char *)FUNCARG(fp, j)));\n+        if (j >= fp->uf_args.ga_len - fp->uf_def_args.ga_len) {\n+          PUT(arg, \"default\",\n+              CSTR_TO_OBJ(((char **)(fp->uf_def_args.ga_data))\n+                          [j - fp->uf_args.ga_len + fp->uf_def_args.ga_len]));\n+        }\n+        kv_push(args, DICTIONARY_OBJ(arg));\n+      }\n+    }\n+    PUT(dict, \"args\", ARRAY_OBJ(args));\n+    PUT(dict, \"varargs\", BOOLEAN_OBJ(fp->uf_varargs));\n+    // Attributes\n+    PUT(dict, \"abort\", BOOLEAN_OBJ(fp->uf_flags & FC_ABORT));\n+    PUT(dict, \"range\", BOOLEAN_OBJ(fp->uf_flags & FC_RANGE));\n+    PUT(dict, \"dict\", BOOLEAN_OBJ(fp->uf_flags & FC_DICT));\n+    PUT(dict, \"closure\", BOOLEAN_OBJ(fp->uf_flags & FC_CLOSURE));\n+    // Script\n+    PUT(dict, \"sid\", INTEGER_OBJ(fp->uf_script_ctx.sc_sid));\n+    PUT(dict, \"lnum\", INTEGER_OBJ(fp->uf_script_ctx.sc_lnum));\n+  }\n+\n+  // Source lines\n+  if (lines) {\n+    Array array = ARRAY_DICT_INIT;\n+    if (fp->uf_lines.ga_len > 0) {\n+      kv_resize(array, (size_t)fp->uf_lines.ga_len);\n+      for (int j = 0; j < fp->uf_lines.ga_len; j++) {\n+        kv_push(array, CSTR_TO_OBJ((const char *)FUNCLINE(fp, j)));\n+      }\n+    }\n+    PUT(dict, \"lines\", ARRAY_OBJ(array));\n+  }\n+\n+  return dict;\n+}\n+\n+/// Takes ownership of name.\n+static Dictionary builtin_function_dict(const EvalFuncDef *fn, String name, bool details)\n+{\n+  Dictionary dict = ARRAY_DICT_INIT;\n+  kv_resize(dict, details ? 7 : 2);\n+\n+  PUT(dict, \"name\", STRING_OBJ(name));\n+  PUT(dict, \"type\", CSTR_TO_OBJ(\"builtin\"));\n+\n+  if (details) {\n+    PUT(dict, \"min_argc\", INTEGER_OBJ(fn->min_argc));\n+    PUT(dict, \"max_argc\", INTEGER_OBJ(fn->max_argc));\n+    PUT(dict, \"base_arg\", INTEGER_OBJ(fn->base_arg));\n+    PUT(dict, \"fast\", BOOLEAN_OBJ(fn->fast));\n+\n+    // Argument names\n+    if (fn->argnames != NULL) {\n+      Array overloads = ARRAY_DICT_INIT;\n+      Array names = ARRAY_DICT_INIT;\n+      char buf[64] = { 0 };\n+      size_t pos = 0;\n+\n+      // Argument are separated with unit separator (ascii \\x1F),\n+      // overloads with record separator (ascii \\x1E).\n+      for (const char *p = fn->argnames;; p++) {\n+        if (*p == NUL || *p == '\\x1F' || *p == '\\x1E') {\n+          assert(pos < 64);\n+          buf[pos++] = NUL;\n+          String str = {\n+            .data = xmemdupz(buf, pos),\n+            .size = pos - 1,\n+          };\n+          pos = 0;\n+\n+          if (*p == '\\x1F') {  // unit separator: argument separator\n+            kv_push(names, STRING_OBJ(str));\n+          } else if (*p == '\\x1E') {  // record separator: overload separator\n+            kv_push(names, STRING_OBJ(str));\n+            kv_push(overloads, ARRAY_OBJ(names));\n+            names = (Array)ARRAY_DICT_INIT;\n+          } else {  // NUL\n+            kv_push(names, STRING_OBJ(str));\n+            kv_push(overloads, ARRAY_OBJ(names));\n+            break;\n+          }\n+        } else {\n+          buf[pos++] = *p;\n+        }\n+      }\n+\n+      PUT(dict, \"argnames\", ARRAY_OBJ(overloads));\n+    }\n+  }\n+\n+  return dict;\n+}\n+\n+/// Lists Vimscript functions.\n+///\n+/// @param query    When string gets information about the function under this name.\n+///                 When dictionary lists functions. The following keys are accepted:\n+///                 - builtin (boolean, default false) Include builtin functions.\n+///                 - user    (boolean, default true) Include user functions.\n+/// @param opts     Options dictionary:\n+///                 - details (boolean) Include function details.\n+///                 - lines   (boolean) Include user function lines. Ignored for builtin\n+///                           functions.\n+/// @param[out] err Error details, if any\n+/// @return A dictionary describing a function when {query} is a string, or a map of\n+///         function names to dictionaries describing them when {query} is a dictionary.\n+Dictionary nvim_get_functions(Object query, Dictionary opts, Error *err)\n+  FUNC_API_SINCE(10)\n+{\n+  Dictionary rv = ARRAY_DICT_INIT;\n+\n+  if (query.type != kObjectTypeString && query.type != kObjectTypeDictionary\n+      && (query.type == kObjectTypeArray && query.data.array.size != 0)) {\n+    api_set_error(err, kErrorTypeValidation, \"query is not a dictionary or string %d\", query.type);\n+    return rv;\n+  }\n+\n+  bool details = false;\n+  bool lines = false;\n+  for (size_t i = 0; i < opts.size; i++) {",
            "html_url": "https://github.com/neovim/neovim/pull/19667#discussion_r953201789",
            "id": 953201789,
            "line": 912,
            "node_id": "PRRC_kwDOAPphoM440LR9",
            "original_commit_id": "6a038b724925f20febe1be7f5f0661acceaa6478",
            "original_line": 912,
            "original_position": 175,
            "original_start_line": null,
            "path": "src/nvim/api/vimscript.c",
            "position": 175,
            "pull_request_review_id": 1082963475,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/19667",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/953201789/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-08-24T00:14:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/953201789",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/19667#discussion_r953203225"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/19667"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/953203225"
                }
            },
            "author_association": "MEMBER",
            "body": "keysets.h",
            "commit_id": "6a038b724925f20febe1be7f5f0661acceaa6478",
            "created_at": "2022-08-24T00:08:56Z",
            "diff_hunk": "@@ -745,3 +746,294 @@ Dictionary nvim_parse_expression(String expr, String flags, Boolean highlight, E\n   viml_parser_destroy(&pstate);\n   return ret;\n }\n+\n+/// Translates and returns allocated user function name.\n+static String user_function_name(ufunc_T *fp)\n+{\n+  String name;\n+  const size_t name_len = STRLEN(fp->uf_name);\n+  if (fp->uf_name[0] == K_SPECIAL) {\n+    // Replace [ K_SPECIAL KS_EXTRA KE_SNR ] with \"<SNR>\"\n+    name.size = name_len + 2;\n+    name.data = xmalloc(name.size + 1);\n+    name.data[0] = '<';\n+    name.data[1] = 'S';\n+    name.data[2] = 'N';\n+    name.data[3] = 'R';\n+    name.data[4] = '>';\n+    memcpy(name.data + 5, fp->uf_name + 3, name_len - 3);\n+    name.data[name.size] = '\\0';\n+  } else {\n+    name.size = name_len;\n+    name.data = xmalloc(name.size + 1);\n+    memcpy(name.data, fp->uf_name, name_len);\n+    name.data[name.size] = '\\0';\n+  }\n+  return name;\n+}\n+\n+/// Takes ownership of name.\n+static Dictionary user_function_dict(ufunc_T *fp, String name, bool details, bool lines)\n+{\n+  Dictionary dict = ARRAY_DICT_INIT;\n+  size_t dict_size = 2U + (details ? 8 : 0) + (lines ? 1 : 0);\n+  kv_resize(dict, dict_size);\n+\n+  // Function name\n+  PUT(dict, \"name\", STRING_OBJ(name));\n+  PUT(dict, \"type\", CSTR_TO_OBJ(\"user\"));\n+\n+  if (details) {\n+    // Arguments\n+    Array args = ARRAY_DICT_INIT;\n+    if (fp->uf_args.ga_len > 0) {\n+      kv_resize(args, (size_t)fp->uf_args.ga_len);\n+      for (int j = 0; j < fp->uf_args.ga_len; j++) {\n+        Dictionary arg = ARRAY_DICT_INIT;\n+        PUT(arg, \"name\", CSTR_TO_OBJ((const char *)FUNCARG(fp, j)));\n+        if (j >= fp->uf_args.ga_len - fp->uf_def_args.ga_len) {\n+          PUT(arg, \"default\",\n+              CSTR_TO_OBJ(((char **)(fp->uf_def_args.ga_data))\n+                          [j - fp->uf_args.ga_len + fp->uf_def_args.ga_len]));\n+        }\n+        kv_push(args, DICTIONARY_OBJ(arg));\n+      }\n+    }\n+    PUT(dict, \"args\", ARRAY_OBJ(args));\n+    PUT(dict, \"varargs\", BOOLEAN_OBJ(fp->uf_varargs));\n+    // Attributes\n+    PUT(dict, \"abort\", BOOLEAN_OBJ(fp->uf_flags & FC_ABORT));\n+    PUT(dict, \"range\", BOOLEAN_OBJ(fp->uf_flags & FC_RANGE));\n+    PUT(dict, \"dict\", BOOLEAN_OBJ(fp->uf_flags & FC_DICT));\n+    PUT(dict, \"closure\", BOOLEAN_OBJ(fp->uf_flags & FC_CLOSURE));\n+    // Script\n+    PUT(dict, \"sid\", INTEGER_OBJ(fp->uf_script_ctx.sc_sid));\n+    PUT(dict, \"lnum\", INTEGER_OBJ(fp->uf_script_ctx.sc_lnum));\n+  }\n+\n+  // Source lines\n+  if (lines) {\n+    Array array = ARRAY_DICT_INIT;\n+    if (fp->uf_lines.ga_len > 0) {\n+      kv_resize(array, (size_t)fp->uf_lines.ga_len);\n+      for (int j = 0; j < fp->uf_lines.ga_len; j++) {\n+        kv_push(array, CSTR_TO_OBJ((const char *)FUNCLINE(fp, j)));\n+      }\n+    }\n+    PUT(dict, \"lines\", ARRAY_OBJ(array));\n+  }\n+\n+  return dict;\n+}\n+\n+/// Takes ownership of name.\n+static Dictionary builtin_function_dict(const EvalFuncDef *fn, String name, bool details)\n+{\n+  Dictionary dict = ARRAY_DICT_INIT;\n+  kv_resize(dict, details ? 7 : 2);\n+\n+  PUT(dict, \"name\", STRING_OBJ(name));\n+  PUT(dict, \"type\", CSTR_TO_OBJ(\"builtin\"));\n+\n+  if (details) {\n+    PUT(dict, \"min_argc\", INTEGER_OBJ(fn->min_argc));\n+    PUT(dict, \"max_argc\", INTEGER_OBJ(fn->max_argc));\n+    PUT(dict, \"base_arg\", INTEGER_OBJ(fn->base_arg));\n+    PUT(dict, \"fast\", BOOLEAN_OBJ(fn->fast));\n+\n+    // Argument names\n+    if (fn->argnames != NULL) {\n+      Array overloads = ARRAY_DICT_INIT;\n+      Array names = ARRAY_DICT_INIT;\n+      char buf[64] = { 0 };\n+      size_t pos = 0;\n+\n+      // Argument are separated with unit separator (ascii \\x1F),\n+      // overloads with record separator (ascii \\x1E).\n+      for (const char *p = fn->argnames;; p++) {\n+        if (*p == NUL || *p == '\\x1F' || *p == '\\x1E') {\n+          assert(pos < 64);\n+          buf[pos++] = NUL;\n+          String str = {\n+            .data = xmemdupz(buf, pos),\n+            .size = pos - 1,\n+          };\n+          pos = 0;\n+\n+          if (*p == '\\x1F') {  // unit separator: argument separator\n+            kv_push(names, STRING_OBJ(str));\n+          } else if (*p == '\\x1E') {  // record separator: overload separator\n+            kv_push(names, STRING_OBJ(str));\n+            kv_push(overloads, ARRAY_OBJ(names));\n+            names = (Array)ARRAY_DICT_INIT;\n+          } else {  // NUL\n+            kv_push(names, STRING_OBJ(str));\n+            kv_push(overloads, ARRAY_OBJ(names));\n+            break;\n+          }\n+        } else {\n+          buf[pos++] = *p;\n+        }\n+      }\n+\n+      PUT(dict, \"argnames\", ARRAY_OBJ(overloads));\n+    }\n+  }\n+\n+  return dict;\n+}\n+\n+/// Lists Vimscript functions.\n+///\n+/// @param query    When string gets information about the function under this name.\n+///                 When dictionary lists functions. The following keys are accepted:\n+///                 - builtin (boolean, default false) Include builtin functions.\n+///                 - user    (boolean, default true) Include user functions.\n+/// @param opts     Options dictionary:\n+///                 - details (boolean) Include function details.\n+///                 - lines   (boolean) Include user function lines. Ignored for builtin\n+///                           functions.\n+/// @param[out] err Error details, if any\n+/// @return A dictionary describing a function when {query} is a string, or a map of\n+///         function names to dictionaries describing them when {query} is a dictionary.\n+Dictionary nvim_get_functions(Object query, Dictionary opts, Error *err)\n+  FUNC_API_SINCE(10)\n+{\n+  Dictionary rv = ARRAY_DICT_INIT;\n+\n+  if (query.type != kObjectTypeString && query.type != kObjectTypeDictionary\n+      && (query.type == kObjectTypeArray && query.data.array.size != 0)) {\n+    api_set_error(err, kErrorTypeValidation, \"query is not a dictionary or string %d\", query.type);\n+    return rv;\n+  }\n+\n+  bool details = false;\n+  bool lines = false;\n+  for (size_t i = 0; i < opts.size; i++) {\n+    String k = opts.items[i].key;\n+    Object *v = &opts.items[i].value;\n+    if (strequal(\"details\", k.data)) {\n+      if (v->type != kObjectTypeBoolean) {\n+        api_set_error(err, kErrorTypeValidation, \"details is not a boolean\");\n+        return rv;\n+      }\n+      details = v->data.boolean;\n+    } else if (strequal(\"lines\", k.data)) {\n+      if (v->type != kObjectTypeBoolean) {\n+        api_set_error(err, kErrorTypeValidation, \"lines is not a boolean\");\n+        return rv;\n+      }\n+      lines = v->data.boolean;\n+    } else {\n+      api_set_error(err, kErrorTypeValidation, \"unexpected key: %s\", k.data);\n+      return rv;\n+    }\n+  }\n+\n+  // Find function\n+  if (query.type == kObjectTypeString) {\n+    String name = query.data.string;\n+\n+    // Translate \"<SNR>\"\n+    char_u *func_name;\n+    if (name.size > 7 && memcmp(name.data, \"<SNR>\", 5) == 0) {  // Size of at least \"<SNR>1_\"\n+      func_name = xmalloc(name.size - 1);  // For translated \"<SNR>\" + 1 null byte\n+      func_name[0] = K_SPECIAL;\n+      func_name[1] = KS_EXTRA;\n+      func_name[2] = KE_SNR;\n+      memcpy(func_name + 3, name.data + 5, name.size - 5);\n+      func_name[name.size - 2] = '\\0';\n+    } else {\n+      func_name = (char_u *)string_to_cstr(name);\n+      // Find builtin function. Name can't start with <SNR>\n+      const EvalFuncDef *fn = find_internal_func((char *)func_name);\n+      if (fn != NULL) {\n+        rv = builtin_function_dict(fn, copy_string(name), details);\n+        goto theend;\n+      }\n+    }\n+\n+    // Find user function\n+    ufunc_T *fp = find_func(func_name);\n+    if (fp != NULL) {\n+      rv = user_function_dict(fp, user_function_name(fp), details, lines);\n+      goto theend;\n+    }\n+\n+    api_set_error(err, kErrorTypeException, \"No function with this name\");\n+theend:\n+    xfree(func_name);\n+    return rv;\n+  }\n+\n+  // Parse list options\n+  bool builtin = false;\n+  bool user = true;\n+  if (query.type == kObjectTypeDictionary) {\n+    Dictionary list = query.data.dictionary;\n+    for (size_t i = 0; i < list.size; i++) {",
            "html_url": "https://github.com/neovim/neovim/pull/19667#discussion_r953203225",
            "id": 953203225,
            "line": 974,
            "node_id": "PRRC_kwDOAPphoM440LoZ",
            "original_commit_id": "6a038b724925f20febe1be7f5f0661acceaa6478",
            "original_line": 974,
            "original_position": 237,
            "original_start_line": null,
            "path": "src/nvim/api/vimscript.c",
            "position": 237,
            "pull_request_review_id": 1082963475,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/19667",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/953203225/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-01T10:27:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/953203225",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/19667#discussion_r953204014"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/19667"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/953204014"
                }
            },
            "author_association": "MEMBER",
            "body": "can probably drop this option. If callers are performance-sensitive, being able to\r\nquery by the function name is most of the gain. ",
            "commit_id": "6a038b724925f20febe1be7f5f0661acceaa6478",
            "created_at": "2022-08-24T00:11:07Z",
            "diff_hunk": "@@ -745,3 +746,294 @@ Dictionary nvim_parse_expression(String expr, String flags, Boolean highlight, E\n   viml_parser_destroy(&pstate);\n   return ret;\n }\n+\n+/// Translates and returns allocated user function name.\n+static String user_function_name(ufunc_T *fp)\n+{\n+  String name;\n+  const size_t name_len = STRLEN(fp->uf_name);\n+  if (fp->uf_name[0] == K_SPECIAL) {\n+    // Replace [ K_SPECIAL KS_EXTRA KE_SNR ] with \"<SNR>\"\n+    name.size = name_len + 2;\n+    name.data = xmalloc(name.size + 1);\n+    name.data[0] = '<';\n+    name.data[1] = 'S';\n+    name.data[2] = 'N';\n+    name.data[3] = 'R';\n+    name.data[4] = '>';\n+    memcpy(name.data + 5, fp->uf_name + 3, name_len - 3);\n+    name.data[name.size] = '\\0';\n+  } else {\n+    name.size = name_len;\n+    name.data = xmalloc(name.size + 1);\n+    memcpy(name.data, fp->uf_name, name_len);\n+    name.data[name.size] = '\\0';\n+  }\n+  return name;\n+}\n+\n+/// Takes ownership of name.\n+static Dictionary user_function_dict(ufunc_T *fp, String name, bool details, bool lines)\n+{\n+  Dictionary dict = ARRAY_DICT_INIT;\n+  size_t dict_size = 2U + (details ? 8 : 0) + (lines ? 1 : 0);\n+  kv_resize(dict, dict_size);\n+\n+  // Function name\n+  PUT(dict, \"name\", STRING_OBJ(name));\n+  PUT(dict, \"type\", CSTR_TO_OBJ(\"user\"));\n+\n+  if (details) {\n+    // Arguments\n+    Array args = ARRAY_DICT_INIT;\n+    if (fp->uf_args.ga_len > 0) {\n+      kv_resize(args, (size_t)fp->uf_args.ga_len);\n+      for (int j = 0; j < fp->uf_args.ga_len; j++) {\n+        Dictionary arg = ARRAY_DICT_INIT;\n+        PUT(arg, \"name\", CSTR_TO_OBJ((const char *)FUNCARG(fp, j)));\n+        if (j >= fp->uf_args.ga_len - fp->uf_def_args.ga_len) {\n+          PUT(arg, \"default\",\n+              CSTR_TO_OBJ(((char **)(fp->uf_def_args.ga_data))\n+                          [j - fp->uf_args.ga_len + fp->uf_def_args.ga_len]));\n+        }\n+        kv_push(args, DICTIONARY_OBJ(arg));\n+      }\n+    }\n+    PUT(dict, \"args\", ARRAY_OBJ(args));\n+    PUT(dict, \"varargs\", BOOLEAN_OBJ(fp->uf_varargs));\n+    // Attributes\n+    PUT(dict, \"abort\", BOOLEAN_OBJ(fp->uf_flags & FC_ABORT));\n+    PUT(dict, \"range\", BOOLEAN_OBJ(fp->uf_flags & FC_RANGE));\n+    PUT(dict, \"dict\", BOOLEAN_OBJ(fp->uf_flags & FC_DICT));\n+    PUT(dict, \"closure\", BOOLEAN_OBJ(fp->uf_flags & FC_CLOSURE));\n+    // Script\n+    PUT(dict, \"sid\", INTEGER_OBJ(fp->uf_script_ctx.sc_sid));\n+    PUT(dict, \"lnum\", INTEGER_OBJ(fp->uf_script_ctx.sc_lnum));\n+  }\n+\n+  // Source lines\n+  if (lines) {\n+    Array array = ARRAY_DICT_INIT;\n+    if (fp->uf_lines.ga_len > 0) {\n+      kv_resize(array, (size_t)fp->uf_lines.ga_len);\n+      for (int j = 0; j < fp->uf_lines.ga_len; j++) {\n+        kv_push(array, CSTR_TO_OBJ((const char *)FUNCLINE(fp, j)));\n+      }\n+    }\n+    PUT(dict, \"lines\", ARRAY_OBJ(array));\n+  }\n+\n+  return dict;\n+}\n+\n+/// Takes ownership of name.\n+static Dictionary builtin_function_dict(const EvalFuncDef *fn, String name, bool details)\n+{\n+  Dictionary dict = ARRAY_DICT_INIT;\n+  kv_resize(dict, details ? 7 : 2);\n+\n+  PUT(dict, \"name\", STRING_OBJ(name));\n+  PUT(dict, \"type\", CSTR_TO_OBJ(\"builtin\"));\n+\n+  if (details) {\n+    PUT(dict, \"min_argc\", INTEGER_OBJ(fn->min_argc));\n+    PUT(dict, \"max_argc\", INTEGER_OBJ(fn->max_argc));\n+    PUT(dict, \"base_arg\", INTEGER_OBJ(fn->base_arg));\n+    PUT(dict, \"fast\", BOOLEAN_OBJ(fn->fast));\n+\n+    // Argument names\n+    if (fn->argnames != NULL) {\n+      Array overloads = ARRAY_DICT_INIT;\n+      Array names = ARRAY_DICT_INIT;\n+      char buf[64] = { 0 };\n+      size_t pos = 0;\n+\n+      // Argument are separated with unit separator (ascii \\x1F),\n+      // overloads with record separator (ascii \\x1E).\n+      for (const char *p = fn->argnames;; p++) {\n+        if (*p == NUL || *p == '\\x1F' || *p == '\\x1E') {\n+          assert(pos < 64);\n+          buf[pos++] = NUL;\n+          String str = {\n+            .data = xmemdupz(buf, pos),\n+            .size = pos - 1,\n+          };\n+          pos = 0;\n+\n+          if (*p == '\\x1F') {  // unit separator: argument separator\n+            kv_push(names, STRING_OBJ(str));\n+          } else if (*p == '\\x1E') {  // record separator: overload separator\n+            kv_push(names, STRING_OBJ(str));\n+            kv_push(overloads, ARRAY_OBJ(names));\n+            names = (Array)ARRAY_DICT_INIT;\n+          } else {  // NUL\n+            kv_push(names, STRING_OBJ(str));\n+            kv_push(overloads, ARRAY_OBJ(names));\n+            break;\n+          }\n+        } else {\n+          buf[pos++] = *p;\n+        }\n+      }\n+\n+      PUT(dict, \"argnames\", ARRAY_OBJ(overloads));\n+    }\n+  }\n+\n+  return dict;\n+}\n+\n+/// Lists Vimscript functions.\n+///\n+/// @param query    When string gets information about the function under this name.\n+///                 When dictionary lists functions. The following keys are accepted:\n+///                 - builtin (boolean, default false) Include builtin functions.\n+///                 - user    (boolean, default true) Include user functions.\n+/// @param opts     Options dictionary:\n+///                 - details (boolean) Include function details.",
            "html_url": "https://github.com/neovim/neovim/pull/19667#discussion_r953204014",
            "id": 953204014,
            "line": 893,
            "node_id": "PRRC_kwDOAPphoM440L0u",
            "original_commit_id": "6a038b724925f20febe1be7f5f0661acceaa6478",
            "original_line": 893,
            "original_position": 156,
            "original_start_line": null,
            "path": "src/nvim/api/vimscript.c",
            "position": 156,
            "pull_request_review_id": 1082963475,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/19667",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/953204014/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-08-24T00:14:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/953204014",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/19667#discussion_r953205326"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/19667"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/953205326"
                }
            },
            "author_association": "MEMBER",
            "body": "This info comes from `funcs.generated.h` generated by `gen_eval.lua`, which reads `eval.lua`.\r\n\r\n## Proposal\r\n\r\nSimilar to https://github.com/neovim/neovim/issues/8029#issuecomment-1175146743 : \r\n\r\n1. move `eval.lua` to ~~`runtime/lua/core/eval.lua`~~ `runtime/lua/inspect/eval.lua`\r\n2. we could make the field names a bit nicer like you've done here, e.g.\r\n    - `assert_equal={args_min=2, args_max=3, base=2},`\r\n    - instead of: `assert_equal={args={2, 3}, base=2},`\r\n3. users can then can use both `require('vim.inspect.eval')` and `nvim_get_functions(builtin)`, and they return the same form.\r\n\r\n## Benefits\r\n\r\n- eliminates `builtin_function_dict()` ; becomes a Lua call in `nvim_get_functions()`.\r\n- single source of truth: `eval.lua` is both the source and the final form. Helps with discovery.\r\n- helps establish a pattern we've wanted for similar future work",
            "commit_id": "6a038b724925f20febe1be7f5f0661acceaa6478",
            "created_at": "2022-08-24T00:14:39Z",
            "diff_hunk": "@@ -745,3 +746,294 @@ Dictionary nvim_parse_expression(String expr, String flags, Boolean highlight, E\n   viml_parser_destroy(&pstate);\n   return ret;\n }\n+\n+/// Translates and returns allocated user function name.\n+static String user_function_name(ufunc_T *fp)\n+{\n+  String name;\n+  const size_t name_len = STRLEN(fp->uf_name);\n+  if (fp->uf_name[0] == K_SPECIAL) {\n+    // Replace [ K_SPECIAL KS_EXTRA KE_SNR ] with \"<SNR>\"\n+    name.size = name_len + 2;\n+    name.data = xmalloc(name.size + 1);\n+    name.data[0] = '<';\n+    name.data[1] = 'S';\n+    name.data[2] = 'N';\n+    name.data[3] = 'R';\n+    name.data[4] = '>';\n+    memcpy(name.data + 5, fp->uf_name + 3, name_len - 3);\n+    name.data[name.size] = '\\0';\n+  } else {\n+    name.size = name_len;\n+    name.data = xmalloc(name.size + 1);\n+    memcpy(name.data, fp->uf_name, name_len);\n+    name.data[name.size] = '\\0';\n+  }\n+  return name;\n+}\n+\n+/// Takes ownership of name.\n+static Dictionary user_function_dict(ufunc_T *fp, String name, bool details, bool lines)\n+{\n+  Dictionary dict = ARRAY_DICT_INIT;\n+  size_t dict_size = 2U + (details ? 8 : 0) + (lines ? 1 : 0);\n+  kv_resize(dict, dict_size);\n+\n+  // Function name\n+  PUT(dict, \"name\", STRING_OBJ(name));\n+  PUT(dict, \"type\", CSTR_TO_OBJ(\"user\"));\n+\n+  if (details) {\n+    // Arguments\n+    Array args = ARRAY_DICT_INIT;\n+    if (fp->uf_args.ga_len > 0) {\n+      kv_resize(args, (size_t)fp->uf_args.ga_len);\n+      for (int j = 0; j < fp->uf_args.ga_len; j++) {\n+        Dictionary arg = ARRAY_DICT_INIT;\n+        PUT(arg, \"name\", CSTR_TO_OBJ((const char *)FUNCARG(fp, j)));\n+        if (j >= fp->uf_args.ga_len - fp->uf_def_args.ga_len) {\n+          PUT(arg, \"default\",\n+              CSTR_TO_OBJ(((char **)(fp->uf_def_args.ga_data))\n+                          [j - fp->uf_args.ga_len + fp->uf_def_args.ga_len]));\n+        }\n+        kv_push(args, DICTIONARY_OBJ(arg));\n+      }\n+    }\n+    PUT(dict, \"args\", ARRAY_OBJ(args));\n+    PUT(dict, \"varargs\", BOOLEAN_OBJ(fp->uf_varargs));\n+    // Attributes\n+    PUT(dict, \"abort\", BOOLEAN_OBJ(fp->uf_flags & FC_ABORT));\n+    PUT(dict, \"range\", BOOLEAN_OBJ(fp->uf_flags & FC_RANGE));\n+    PUT(dict, \"dict\", BOOLEAN_OBJ(fp->uf_flags & FC_DICT));\n+    PUT(dict, \"closure\", BOOLEAN_OBJ(fp->uf_flags & FC_CLOSURE));\n+    // Script\n+    PUT(dict, \"sid\", INTEGER_OBJ(fp->uf_script_ctx.sc_sid));\n+    PUT(dict, \"lnum\", INTEGER_OBJ(fp->uf_script_ctx.sc_lnum));\n+  }\n+\n+  // Source lines\n+  if (lines) {\n+    Array array = ARRAY_DICT_INIT;\n+    if (fp->uf_lines.ga_len > 0) {\n+      kv_resize(array, (size_t)fp->uf_lines.ga_len);\n+      for (int j = 0; j < fp->uf_lines.ga_len; j++) {\n+        kv_push(array, CSTR_TO_OBJ((const char *)FUNCLINE(fp, j)));\n+      }\n+    }\n+    PUT(dict, \"lines\", ARRAY_OBJ(array));\n+  }\n+\n+  return dict;\n+}\n+\n+/// Takes ownership of name.\n+static Dictionary builtin_function_dict(const EvalFuncDef *fn, String name, bool details)\n+{\n+  Dictionary dict = ARRAY_DICT_INIT;\n+  kv_resize(dict, details ? 7 : 2);\n+\n+  PUT(dict, \"name\", STRING_OBJ(name));\n+  PUT(dict, \"type\", CSTR_TO_OBJ(\"builtin\"));\n+\n+  if (details) {\n+    PUT(dict, \"min_argc\", INTEGER_OBJ(fn->min_argc));\n+    PUT(dict, \"max_argc\", INTEGER_OBJ(fn->max_argc));\n+    PUT(dict, \"base_arg\", INTEGER_OBJ(fn->base_arg));\n+    PUT(dict, \"fast\", BOOLEAN_OBJ(fn->fast));",
            "html_url": "https://github.com/neovim/neovim/pull/19667#discussion_r953205326",
            "id": 953205326,
            "line": 842,
            "node_id": "PRRC_kwDOAPphoM440MJO",
            "original_commit_id": "6a038b724925f20febe1be7f5f0661acceaa6478",
            "original_line": 842,
            "original_position": 105,
            "original_start_line": null,
            "path": "src/nvim/api/vimscript.c",
            "position": 105,
            "pull_request_review_id": 1082963475,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/19667",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/953205326/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-09-20T14:49:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/953205326",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/19667#discussion_r953644235"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/19667"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/953644235"
                }
            },
            "author_association": "MEMBER",
            "body": "Dictionary is `{ builtin = true/false, user = true/false }`, and it returns a list of functions of requested types (builtin/user).\r\n\r\nI'm also not 100% sure if switching the behavior between \"get one function\" and \"list all functions\" based on the argument type is a right thing to do here. I wonder if it wouldn't be better to take a single dictionary argument and make it consistent with `nvim_get_commands`. Both API functions could act like this:\r\n- `nvim_get_*({ name = 'foo' })` -> returns a single function/command \"foo\"\r\n- `nvim_get_*({ user = true })` -> lists all user functions/commands\r\n- `nvim_get_*({ builtin = true })` -> lists all builtin functions/commands\r\n- `nvim_get_*({ user = true, builtin = true })` -> lists all functions/commands, both builtin and user\r\n- `nvim_get_*({ name = 'foo', user = true })` -> error, can't use both at the same time",
            "commit_id": "6a038b724925f20febe1be7f5f0661acceaa6478",
            "created_at": "2022-08-24T10:50:03Z",
            "diff_hunk": "@@ -745,3 +746,294 @@ Dictionary nvim_parse_expression(String expr, String flags, Boolean highlight, E\n   viml_parser_destroy(&pstate);\n   return ret;\n }\n+\n+/// Translates and returns allocated user function name.\n+static String user_function_name(ufunc_T *fp)\n+{\n+  String name;\n+  const size_t name_len = STRLEN(fp->uf_name);\n+  if (fp->uf_name[0] == K_SPECIAL) {\n+    // Replace [ K_SPECIAL KS_EXTRA KE_SNR ] with \"<SNR>\"\n+    name.size = name_len + 2;\n+    name.data = xmalloc(name.size + 1);\n+    name.data[0] = '<';\n+    name.data[1] = 'S';\n+    name.data[2] = 'N';\n+    name.data[3] = 'R';\n+    name.data[4] = '>';\n+    memcpy(name.data + 5, fp->uf_name + 3, name_len - 3);\n+    name.data[name.size] = '\\0';\n+  } else {\n+    name.size = name_len;\n+    name.data = xmalloc(name.size + 1);\n+    memcpy(name.data, fp->uf_name, name_len);\n+    name.data[name.size] = '\\0';\n+  }\n+  return name;\n+}\n+\n+/// Takes ownership of name.\n+static Dictionary user_function_dict(ufunc_T *fp, String name, bool details, bool lines)\n+{\n+  Dictionary dict = ARRAY_DICT_INIT;\n+  size_t dict_size = 2U + (details ? 8 : 0) + (lines ? 1 : 0);\n+  kv_resize(dict, dict_size);\n+\n+  // Function name\n+  PUT(dict, \"name\", STRING_OBJ(name));\n+  PUT(dict, \"type\", CSTR_TO_OBJ(\"user\"));\n+\n+  if (details) {\n+    // Arguments\n+    Array args = ARRAY_DICT_INIT;\n+    if (fp->uf_args.ga_len > 0) {\n+      kv_resize(args, (size_t)fp->uf_args.ga_len);\n+      for (int j = 0; j < fp->uf_args.ga_len; j++) {\n+        Dictionary arg = ARRAY_DICT_INIT;\n+        PUT(arg, \"name\", CSTR_TO_OBJ((const char *)FUNCARG(fp, j)));\n+        if (j >= fp->uf_args.ga_len - fp->uf_def_args.ga_len) {\n+          PUT(arg, \"default\",\n+              CSTR_TO_OBJ(((char **)(fp->uf_def_args.ga_data))\n+                          [j - fp->uf_args.ga_len + fp->uf_def_args.ga_len]));\n+        }\n+        kv_push(args, DICTIONARY_OBJ(arg));\n+      }\n+    }\n+    PUT(dict, \"args\", ARRAY_OBJ(args));\n+    PUT(dict, \"varargs\", BOOLEAN_OBJ(fp->uf_varargs));\n+    // Attributes\n+    PUT(dict, \"abort\", BOOLEAN_OBJ(fp->uf_flags & FC_ABORT));\n+    PUT(dict, \"range\", BOOLEAN_OBJ(fp->uf_flags & FC_RANGE));\n+    PUT(dict, \"dict\", BOOLEAN_OBJ(fp->uf_flags & FC_DICT));\n+    PUT(dict, \"closure\", BOOLEAN_OBJ(fp->uf_flags & FC_CLOSURE));\n+    // Script\n+    PUT(dict, \"sid\", INTEGER_OBJ(fp->uf_script_ctx.sc_sid));\n+    PUT(dict, \"lnum\", INTEGER_OBJ(fp->uf_script_ctx.sc_lnum));\n+  }\n+\n+  // Source lines\n+  if (lines) {\n+    Array array = ARRAY_DICT_INIT;\n+    if (fp->uf_lines.ga_len > 0) {\n+      kv_resize(array, (size_t)fp->uf_lines.ga_len);\n+      for (int j = 0; j < fp->uf_lines.ga_len; j++) {\n+        kv_push(array, CSTR_TO_OBJ((const char *)FUNCLINE(fp, j)));\n+      }\n+    }\n+    PUT(dict, \"lines\", ARRAY_OBJ(array));\n+  }\n+\n+  return dict;\n+}\n+\n+/// Takes ownership of name.\n+static Dictionary builtin_function_dict(const EvalFuncDef *fn, String name, bool details)\n+{\n+  Dictionary dict = ARRAY_DICT_INIT;\n+  kv_resize(dict, details ? 7 : 2);\n+\n+  PUT(dict, \"name\", STRING_OBJ(name));\n+  PUT(dict, \"type\", CSTR_TO_OBJ(\"builtin\"));\n+\n+  if (details) {\n+    PUT(dict, \"min_argc\", INTEGER_OBJ(fn->min_argc));\n+    PUT(dict, \"max_argc\", INTEGER_OBJ(fn->max_argc));\n+    PUT(dict, \"base_arg\", INTEGER_OBJ(fn->base_arg));\n+    PUT(dict, \"fast\", BOOLEAN_OBJ(fn->fast));\n+\n+    // Argument names\n+    if (fn->argnames != NULL) {\n+      Array overloads = ARRAY_DICT_INIT;\n+      Array names = ARRAY_DICT_INIT;\n+      char buf[64] = { 0 };\n+      size_t pos = 0;\n+\n+      // Argument are separated with unit separator (ascii \\x1F),\n+      // overloads with record separator (ascii \\x1E).\n+      for (const char *p = fn->argnames;; p++) {\n+        if (*p == NUL || *p == '\\x1F' || *p == '\\x1E') {\n+          assert(pos < 64);\n+          buf[pos++] = NUL;\n+          String str = {\n+            .data = xmemdupz(buf, pos),\n+            .size = pos - 1,\n+          };\n+          pos = 0;\n+\n+          if (*p == '\\x1F') {  // unit separator: argument separator\n+            kv_push(names, STRING_OBJ(str));\n+          } else if (*p == '\\x1E') {  // record separator: overload separator\n+            kv_push(names, STRING_OBJ(str));\n+            kv_push(overloads, ARRAY_OBJ(names));\n+            names = (Array)ARRAY_DICT_INIT;\n+          } else {  // NUL\n+            kv_push(names, STRING_OBJ(str));\n+            kv_push(overloads, ARRAY_OBJ(names));\n+            break;\n+          }\n+        } else {\n+          buf[pos++] = *p;\n+        }\n+      }\n+\n+      PUT(dict, \"argnames\", ARRAY_OBJ(overloads));\n+    }\n+  }\n+\n+  return dict;\n+}\n+\n+/// Lists Vimscript functions.\n+///\n+/// @param query    When string gets information about the function under this name.\n+///                 When dictionary lists functions. The following keys are accepted:",
            "html_url": "https://github.com/neovim/neovim/pull/19667#discussion_r953644235",
            "id": 953644235,
            "in_reply_to_id": 953200696,
            "line": 889,
            "node_id": "PRRC_kwDOAPphoM4413TL",
            "original_commit_id": "6a038b724925f20febe1be7f5f0661acceaa6478",
            "original_line": 889,
            "original_position": 152,
            "original_start_line": 888,
            "path": "src/nvim/api/vimscript.c",
            "position": 152,
            "pull_request_review_id": 1083573371,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/19667",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/953644235/reactions"
            },
            "side": "RIGHT",
            "start_line": 888,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-08-24T10:50:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/953644235",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/19667#discussion_r953647009"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/19667"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/953647009"
                }
            },
            "author_association": "MEMBER",
            "body": "I think that'd be useful. For me `[owned]` and `[freed]` isn't instantly obvious what it means, but I don't have any better idea at the moment.",
            "commit_id": "6a038b724925f20febe1be7f5f0661acceaa6478",
            "created_at": "2022-08-24T10:53:19Z",
            "diff_hunk": "@@ -745,3 +746,294 @@ Dictionary nvim_parse_expression(String expr, String flags, Boolean highlight, E\n   viml_parser_destroy(&pstate);\n   return ret;\n }\n+\n+/// Translates and returns allocated user function name.\n+static String user_function_name(ufunc_T *fp)\n+{\n+  String name;\n+  const size_t name_len = STRLEN(fp->uf_name);\n+  if (fp->uf_name[0] == K_SPECIAL) {\n+    // Replace [ K_SPECIAL KS_EXTRA KE_SNR ] with \"<SNR>\"\n+    name.size = name_len + 2;\n+    name.data = xmalloc(name.size + 1);\n+    name.data[0] = '<';\n+    name.data[1] = 'S';\n+    name.data[2] = 'N';\n+    name.data[3] = 'R';\n+    name.data[4] = '>';\n+    memcpy(name.data + 5, fp->uf_name + 3, name_len - 3);\n+    name.data[name.size] = '\\0';\n+  } else {\n+    name.size = name_len;\n+    name.data = xmalloc(name.size + 1);\n+    memcpy(name.data, fp->uf_name, name_len);\n+    name.data[name.size] = '\\0';\n+  }\n+  return name;\n+}\n+\n+/// Takes ownership of name.\n+static Dictionary user_function_dict(ufunc_T *fp, String name, bool details, bool lines)\n+{\n+  Dictionary dict = ARRAY_DICT_INIT;\n+  size_t dict_size = 2U + (details ? 8 : 0) + (lines ? 1 : 0);\n+  kv_resize(dict, dict_size);\n+\n+  // Function name\n+  PUT(dict, \"name\", STRING_OBJ(name));\n+  PUT(dict, \"type\", CSTR_TO_OBJ(\"user\"));\n+\n+  if (details) {\n+    // Arguments\n+    Array args = ARRAY_DICT_INIT;\n+    if (fp->uf_args.ga_len > 0) {\n+      kv_resize(args, (size_t)fp->uf_args.ga_len);\n+      for (int j = 0; j < fp->uf_args.ga_len; j++) {\n+        Dictionary arg = ARRAY_DICT_INIT;\n+        PUT(arg, \"name\", CSTR_TO_OBJ((const char *)FUNCARG(fp, j)));\n+        if (j >= fp->uf_args.ga_len - fp->uf_def_args.ga_len) {\n+          PUT(arg, \"default\",\n+              CSTR_TO_OBJ(((char **)(fp->uf_def_args.ga_data))\n+                          [j - fp->uf_args.ga_len + fp->uf_def_args.ga_len]));\n+        }\n+        kv_push(args, DICTIONARY_OBJ(arg));\n+      }\n+    }\n+    PUT(dict, \"args\", ARRAY_OBJ(args));\n+    PUT(dict, \"varargs\", BOOLEAN_OBJ(fp->uf_varargs));\n+    // Attributes\n+    PUT(dict, \"abort\", BOOLEAN_OBJ(fp->uf_flags & FC_ABORT));\n+    PUT(dict, \"range\", BOOLEAN_OBJ(fp->uf_flags & FC_RANGE));\n+    PUT(dict, \"dict\", BOOLEAN_OBJ(fp->uf_flags & FC_DICT));\n+    PUT(dict, \"closure\", BOOLEAN_OBJ(fp->uf_flags & FC_CLOSURE));\n+    // Script\n+    PUT(dict, \"sid\", INTEGER_OBJ(fp->uf_script_ctx.sc_sid));\n+    PUT(dict, \"lnum\", INTEGER_OBJ(fp->uf_script_ctx.sc_lnum));\n+  }\n+\n+  // Source lines\n+  if (lines) {\n+    Array array = ARRAY_DICT_INIT;\n+    if (fp->uf_lines.ga_len > 0) {\n+      kv_resize(array, (size_t)fp->uf_lines.ga_len);\n+      for (int j = 0; j < fp->uf_lines.ga_len; j++) {\n+        kv_push(array, CSTR_TO_OBJ((const char *)FUNCLINE(fp, j)));\n+      }\n+    }\n+    PUT(dict, \"lines\", ARRAY_OBJ(array));\n+  }\n+\n+  return dict;\n+}\n+\n+/// Takes ownership of name.",
            "html_url": "https://github.com/neovim/neovim/pull/19667#discussion_r953647009",
            "id": 953647009,
            "in_reply_to_id": 953191906,
            "line": 829,
            "node_id": "PRRC_kwDOAPphoM4413-h",
            "original_commit_id": "6a038b724925f20febe1be7f5f0661acceaa6478",
            "original_line": 829,
            "original_position": 92,
            "original_start_line": null,
            "path": "src/nvim/api/vimscript.c",
            "position": 92,
            "pull_request_review_id": 1083577352,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/19667",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/953647009/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-08-24T10:53:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/953647009",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "Out of interest, how do completion plugins currently do this? Do they just have a static index or something?",
            "created_at": "2022-08-06T21:22:24Z",
            "html_url": "https://github.com/neovim/neovim/pull/19667#issuecomment-1207284586",
            "id": 1207284586,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19667",
            "node_id": "IC_kwDOAPphoM5H9bNq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1207284586/reactions"
            },
            "updated_at": "2022-08-06T21:22:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1207284586",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "For builtin functions yes. For user functions you can parse the output of `:function`, but it won't work if you're in command line mode.",
            "created_at": "2022-08-06T21:28:51Z",
            "html_url": "https://github.com/neovim/neovim/pull/19667#issuecomment-1207285313",
            "id": 1207285313,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19667",
            "node_id": "IC_kwDOAPphoM5H9bZB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1207285313/reactions"
            },
            "updated_at": "2022-08-06T21:31:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1207285313",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> For builtin functions yes. For user functions you can parse the output of `:function`, but it won't work if you're in command line mode.\r\n\r\nDid you forget `getcompletion()`?",
            "created_at": "2022-08-06T22:00:17Z",
            "html_url": "https://github.com/neovim/neovim/pull/19667#issuecomment-1207288867",
            "id": 1207288867,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19667",
            "node_id": "IC_kwDOAPphoM5H9cQj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1207288867/reactions"
            },
            "updated_at": "2022-08-06T22:00:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1207288867",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Related #8029",
            "created_at": "2022-08-06T22:17:55Z",
            "html_url": "https://github.com/neovim/neovim/pull/19667#issuecomment-1207290955",
            "id": 1207290955,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19667",
            "node_id": "IC_kwDOAPphoM5H9cxL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1207290955/reactions"
            },
            "updated_at": "2022-08-06T22:17:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1207290955",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Did you forget `getcompletion()`?\r\n\r\nAh you're right, I did forgot that :) For the command line I was reusing a completion that uses `:function` to also display function signatures.",
            "created_at": "2022-08-06T22:37:42Z",
            "html_url": "https://github.com/neovim/neovim/pull/19667#issuecomment-1207292851",
            "id": 1207292851,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19667",
            "node_id": "IC_kwDOAPphoM5H9dOz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1207292851/reactions"
            },
            "updated_at": "2022-08-06T22:37:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1207292851",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "edit: moved questions to the op",
            "created_at": "2022-08-06T23:08:39Z",
            "html_url": "https://github.com/neovim/neovim/pull/19667#issuecomment-1207295810",
            "id": 1207295810,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19667",
            "node_id": "IC_kwDOAPphoM5H9d9C",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1207295810/reactions"
            },
            "updated_at": "2022-08-07T13:54:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1207295810",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Honestly, given we have `getcompletions()`, I'm not sure about the value in adding this. Is there something you plan to use this for which `getcompletions()` doesn't work for?",
            "created_at": "2022-08-07T06:26:23Z",
            "html_url": "https://github.com/neovim/neovim/pull/19667#issuecomment-1207340725",
            "id": 1207340725,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19667",
            "node_id": "IC_kwDOAPphoM5H9o61",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1207340725/reactions"
            },
            "updated_at": "2022-08-07T06:26:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1207340725",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "`getcompletion()` doesn't work at all for me, it doesn't include function signatures. `getcompletion()` would be just a workaround for the command line mode. It's to avoid having to parse `:verbose function` output. And still, though it's not what I'm doing at the moment, but if I was to reimplement the command line completion (like wilder.nvim or nvim-cmp) where `nvim_exec('verbose function', true)` doesn't work, I'd like to display a signature for the completed function. Though the implementation might not use the builtin completion mechanism, so I don't know. I'd like to also include argument names for builtin functions, so parsing the documentation is no longer necessary.",
            "created_at": "2022-08-07T10:23:16Z",
            "html_url": "https://github.com/neovim/neovim/pull/19667#issuecomment-1207376210",
            "id": 1207376210,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19667",
            "node_id": "IC_kwDOAPphoM5H9xlS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1207376210/reactions"
            },
            "updated_at": "2022-08-07T10:36:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1207376210",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Okay, I added argument names for builtin functions. Other than using it to inspect function signatures, EmmyLua annotations could be generated based on that.\r\n\r\nBecause vim script functions can have overloads, they're stored as `string[][]`. For example this is a dictionary describing `get` function:\r\n```\r\n  get = {\r\n    argnames = { { \"list\", \"idx\", \"def\" }, { \"dict\", \"key\", \"def\" }, { \"func\", \"what\" } },\r\n    base_arg = 1,\r\n    fast = false,\r\n    max_argc = 3,\r\n    min_argc = 2,\r\n    name = \"get\",\r\n    type = \"builtin\"\r\n  },\r\n```",
            "created_at": "2022-08-07T11:32:02Z",
            "html_url": "https://github.com/neovim/neovim/pull/19667#issuecomment-1207387645",
            "id": 1207387645,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19667",
            "node_id": "IC_kwDOAPphoM5H90X9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1207387645/reactions"
            },
            "updated_at": "2022-08-07T11:32:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1207387645",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "As far as I understand this is mostly useful for user vimscript functions, which given how everything is moving to Lua, doesn't offer a huge amount of value.\r\n\r\nThe usecase for this still isn't clear. Before endeavouring on a non-trivial piece of work, you should raise an issue describing what you actually want to achieve, so a plan can be agreed. For more trivial things, a PR is an acceptable starting point (IMO).\r\n\r\nFor builtin functions, we have already [talked about](https://github.com/neovim/neovim/pull/19235#issuecomment-1175092848) using Lua+Emmy to annotate builtin commands, the same idea would naturally apply to functions. Though one argument (as you've mentioned) is we could use something like this to generate Lua+Emmy. I'm just not convinced (right now) this is worth adding to the API level without a more persuasive argument.\r\n\r\nI would like to know if other core members have a different take on this?",
            "created_at": "2022-08-08T08:20:27Z",
            "html_url": "https://github.com/neovim/neovim/pull/19667#issuecomment-1207814717",
            "id": 1207814717,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19667",
            "node_id": "IC_kwDOAPphoM5H_co9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1207814717/reactions"
            },
            "updated_at": "2022-08-08T08:21:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1207814717",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "My use case is implementing completion and printing stack traces inside a REPL, I would find use for every piece of functionality here, not just user vimscript functions. To give a better idea, here is how I have it working right now for lua:\r\n\r\n![screenshot-220808-111325](https://user-images.githubusercontent.com/59243201/183383576-50ebcdc9-0dd4-4cf8-83cf-df4096eb260a.png)\r\n\r\nI could work around most of this, but having an API function like `nvim_get_commands` (that I'd like to implement the missing `builtin` option for too) would be way nicer. The value I'd get from this is:\r\n1. Builtin function signatures. (alternative: parsing documentation, with deprecated functions parsed from a separate help page)\r\n2. Less strict than `:function` about what function do you want to print out. `:function` can't print a lambda function for example.\r\n3. Works everywhere, I don't have to implement two different mechanisms of doing the same thing depending on the context.",
            "created_at": "2022-08-08T10:26:11Z",
            "html_url": "https://github.com/neovim/neovim/pull/19667#issuecomment-1207942680",
            "id": 1207942680,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19667",
            "node_id": "IC_kwDOAPphoM5H_74Y",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1207942680/reactions"
            },
            "updated_at": "2022-08-08T10:54:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1207942680",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Any reason this wouldn't be part of `nvim_get_api` ? See also https://github.com/neovim/neovim/pull/12040",
            "created_at": "2022-08-22T14:35:39Z",
            "html_url": "https://github.com/neovim/neovim/pull/19667#issuecomment-1222450748",
            "id": 1222450748,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19667",
            "node_id": "IC_kwDOAPphoM5I3R48",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1222450748/reactions"
            },
            "updated_at": "2022-08-22T14:35:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1222450748",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> For builtin functions, we have already [talked about](https://github.com/neovim/neovim/pull/19235#issuecomment-1175092848) using Lua+Emmy to annotate builtin commands, the same idea would naturally apply to functions. Though one argument (as you've mentioned) is we could use something like this to generate Lua+Emmy. I'm just not convinced (right now) this is worth adding to the API level without a more persuasive argument\r\n\r\nDefinitely agree on maintainability. Does my suggestion in at https://github.com/neovim/neovim/pull/19667#discussion_r953205326 address that?\r\n\r\n> I'm just not convinced (right now) this is worth adding to the API level without a more persuasive argument\r\n\r\nIf this were only for builtin functions, I'd say just ship `eval.lua` and let users `require('vim.inspect.eval')`. But we need a way to iterate user-defined commands and functions, right? We have `nvim_get_commands`, so there's some discoverability gain in adding `nvim_get_functions`. OTOH, if there is a better pattern in mind, please say so! Created https://github.com/neovim/neovim/issues/19918 to write down thoughts about where \"core introspection\" stuff should live.",
            "created_at": "2022-08-24T00:22:59Z",
            "html_url": "https://github.com/neovim/neovim/pull/19667#issuecomment-1225019100",
            "id": 1225019100,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19667",
            "node_id": "IC_kwDOAPphoM5JBE7c",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1225019100/reactions"
            },
            "updated_at": "2022-09-20T14:49:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1225019100",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> But we need a way to iterate user-defined commands and functions, right?\r\n\r\nuser-defined **Vimscript** functions? I'm not sure if there is a need at all for this longer term (or even short term). Vimscript is slowly being phased out and becoming more irellevant. And we don't need this for Lua functions.",
            "created_at": "2022-08-24T08:56:12Z",
            "html_url": "https://github.com/neovim/neovim/pull/19667#issuecomment-1225428481",
            "id": 1225428481,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19667",
            "node_id": "IC_kwDOAPphoM5JCo4B",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 1,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1225428481/reactions"
            },
            "updated_at": "2022-08-24T08:56:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1225428481",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> user-defined **Vimscript** functions? I'm not sure if there is a need at all for this longer term (or even short term). Vimscript is slowly being phased out and becoming more irellevant. And we don't need this for Lua functions.\r\n\r\nHere's my cost-benefit analysis:\r\n\r\n- Goals: This PR serves a core goal of Nvim (extensibility / introspection). \r\n- Benefit: API completeness (ergonomics).\r\n    - We _definitely_ want introspection of normal commands and user :commands (those are the \"ad hoc editing\" DSL), so omitting user-defined functions would be an interface quirk.\r\n- Cost: In terms of code, the cost related to user-defined funcs is ~50 lines (+ tests).\r\n- Serving a \"Vimscript swiss-army-knife\" role may help with \"transition to Lua\" efforts :) \r\n",
            "created_at": "2022-08-24T10:52:47Z",
            "html_url": "https://github.com/neovim/neovim/pull/19667#issuecomment-1225556122",
            "id": 1225556122,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19667",
            "node_id": "IC_kwDOAPphoM5JDICa",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1225556122/reactions"
            },
            "updated_at": "2022-08-24T10:54:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1225556122",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "My original point is that doing this at the API level is only necessary for user-defined viml functions, which I don't think we really care about. If we do care about them, then skip the rest of this comment and go with this PR.\r\n\r\nIf we restrict the scope to just builtin functions, then we don't need to (and shouldn't) do this at the API level. We should just ship some static file in runtime, format TBD but probably emmy+lua.\r\n\r\nSo even though the user-define part is only ~50 LOC, the whole function is around ~300 LOC which can be completely avoided if we go a different route.\r\n\r\nIn a real context, in Lua which is our preferred domain for plugin code, an application will want to introspect the entire environment, not just builtin functions. LSP's already do this by inspecting the runtime, and they **WILL NOT** use something like `nvim_get_functions`. So from my POV the potential use cases for this is really limited, especially given the [motivating application for this PR is a Lua repl](https://github.com/neovim/neovim/pull/19667#issuecomment-1207942680).\r\n\r\nThe situation for commands is very different but the solution for that already exists.",
            "created_at": "2022-08-24T11:10:56Z",
            "html_url": "https://github.com/neovim/neovim/pull/19667#issuecomment-1225575295",
            "id": 1225575295,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19667",
            "node_id": "IC_kwDOAPphoM5JDMt_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1225575295/reactions"
            },
            "updated_at": "2022-08-24T11:15:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1225575295",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> In a real context, in Lua which is our preferred domain for plugin code, an application will want to introspect the entire environment, not just builtin functions.\r\n\r\nAnd this would be one part of that.\r\n\r\n> LSP's already do this by inspecting the runtime, and they WILL NOT use something like nvim_get_functions.\r\n\r\nOf course, because language server is a static code analysis tool. They don't and should not use live introspection. Live introspection of the environment is for debuggers, REPLs/command line and meta-programming.\r\n\r\n> especially given the motivating application for this PR is a Lua repl.\r\n\r\nTechnically it's a lua *and* vim script REPL :)",
            "created_at": "2022-08-24T11:31:33Z",
            "html_url": "https://github.com/neovim/neovim/pull/19667#issuecomment-1225593950",
            "id": 1225593950,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19667",
            "node_id": "IC_kwDOAPphoM5JDRRe",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1225593950/reactions"
            },
            "updated_at": "2022-08-24T11:31:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1225593950",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "A language server can (and is) much more than just a static analysis tool. Many of them do implement debuggers and repls.",
            "created_at": "2022-08-25T11:40:38Z",
            "html_url": "https://github.com/neovim/neovim/pull/19667#issuecomment-1227145286",
            "id": 1227145286,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19667",
            "node_id": "IC_kwDOAPphoM5JJMBG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1227145286/reactions"
            },
            "updated_at": "2022-08-25T11:40:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1227145286",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Any example that does that without extending the LSP?",
            "created_at": "2022-08-25T11:51:32Z",
            "html_url": "https://github.com/neovim/neovim/pull/19667#issuecomment-1227155571",
            "id": 1227155571,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19667",
            "node_id": "IC_kwDOAPphoM5JJOhz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1227155571/reactions"
            },
            "updated_at": "2022-08-25T11:51:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1227155571",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "https://www.scala-sbt.org/ . It simply has an LSP plugin which you add on to it.",
            "created_at": "2022-08-25T11:53:44Z",
            "html_url": "https://github.com/neovim/neovim/pull/19667#issuecomment-1227157652",
            "id": 1227157652,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19667",
            "node_id": "IC_kwDOAPphoM5JJPCU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1227157652/reactions"
            },
            "updated_at": "2022-08-25T11:53:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1227157652",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I'm not familiar with Scala. And what, is it mixing up static code analysis with the stuff that happens at runtime? Is all the potential garbage you might add through the REPL at runtime somehow reflected on the statically analyzed files?\r\n\r\nTo be fair, for some languages where that line is blurred it might make sense to do that, but for the majority of languages I don't think it does. And if a hypothetical lua/viml/neovim language server would like to implement a REPL or a debugger, something like `nvim_get_functions` and `nvim_get_commands` is exactly what they would use (assuming no technical problems, like nvim API not being available for some reason).",
            "created_at": "2022-08-25T12:21:12Z",
            "html_url": "https://github.com/neovim/neovim/pull/19667#issuecomment-1227184359",
            "id": 1227184359,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19667",
            "node_id": "IC_kwDOAPphoM5JJVjn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1227184359/reactions"
            },
            "updated_at": "2022-08-25T12:21:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1227184359",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I've found a use-case for this where I want to replace the expression:\r\n\r\n```lua\r\n      if vim.fn.exists('*repeat#set') == 1 then\r\n        ...\r\n      end\r\n```\r\n\r\nSo I've now got some skin in the game.\r\n\r\n>   1. Is the name okay, or should it maybe be something that hints at vim script?\r\n\r\nName is good.\r\n\r\n>   2. Function has two \"modes\", getting a function under some name, and listing all functions. Maybe it should be split into two API functions?\r\n\r\nKeep it as one function to reduce surface area.\r\n \r\n>   3. To keep it consistent with `nvim_get_commands`, should it take only one one `opts` argument? `{ name = '...' }` gets a single function/command, `{ builtin = true, user = true }` lists builtin/user functions/commands.\r\n\r\nYes, there is no need for 2 opt arguments.\r\n",
            "created_at": "2022-09-20T08:56:48Z",
            "html_url": "https://github.com/neovim/neovim/pull/19667#issuecomment-1252047461",
            "id": 1252047461,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19667",
            "node_id": "IC_kwDOAPphoM5KoLpl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1252047461/reactions"
            },
            "updated_at": "2022-09-20T08:57:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1252047461",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "# Status\r\n\r\n- ready to move forward with this after addressing open comments.\r\n- especially the `eval.lua` changes in https://github.com/neovim/neovim/pull/19667#discussion_r953205326\r\n    - Note: renamed `runtime/lua/core/eval.lua` to `runtime/lua/_meta/eval.lua`. ~~I think `vim.inspect` is a good namespace for introspection stuff to live in because we already have `vim.inspect()` concept.~~",
            "created_at": "2022-09-20T14:43:01Z",
            "html_url": "https://github.com/neovim/neovim/pull/19667#issuecomment-1252460476",
            "id": 1252460476,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19667",
            "node_id": "IC_kwDOAPphoM5Kpwe8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1252460476/reactions"
            },
            "updated_at": "2023-08-01T10:22:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1252460476",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@ii14 This is still needed for user functions, but let's drop the builtin functions part for now (it doesn't include docs anyway, which is an important component for completion / fuzzy finders). That avoids the changes to `gen_eval.lua`. \r\n\r\nOur general answer for \"introspection\" of builtin vimscript things is our luals annotations/docstrings. https://github.com/neovim/neovim/pull/24493\r\n\r\n",
            "created_at": "2023-08-01T10:31:27Z",
            "html_url": "https://github.com/neovim/neovim/pull/19667#issuecomment-1660036010",
            "id": 1660036010,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19667",
            "node_id": "IC_kwDOAPphoM5i8iOq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1660036010/reactions"
            },
            "updated_at": "2023-08-01T10:33:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1660036010",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/19667/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/19667/commits",
    "created_at": "2022-08-06T18:42:17Z",
    "diff_url": "https://github.com/neovim/neovim/pull/19667.diff",
    "draft": false,
    "head": {
        "label": "ii14:nvim_get_functions",
        "ref": "nvim_get_functions",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/ii14/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/ii14/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/ii14/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/ii14/neovim/branches{/branch}",
            "clone_url": "https://github.com/ii14/neovim.git",
            "collaborators_url": "https://api.github.com/repos/ii14/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/ii14/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/ii14/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/ii14/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/ii14/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/ii14/neovim/contributors",
            "created_at": "2021-08-23T00:19:06Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/ii14/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/ii14/neovim/downloads",
            "events_url": "https://api.github.com/repos/ii14/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/ii14/neovim/forks",
            "full_name": "ii14/neovim",
            "git_commits_url": "https://api.github.com/repos/ii14/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/ii14/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/ii14/neovim/git/tags{/sha}",
            "git_url": "git://github.com/ii14/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": false,
            "has_wiki": false,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/ii14/neovim/hooks",
            "html_url": "https://github.com/ii14/neovim",
            "id": 398928867,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/ii14/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/ii14/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/ii14/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/ii14/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/ii14/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/ii14/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/ii14/neovim/merges",
            "milestones_url": "https://api.github.com/repos/ii14/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkzOTg5Mjg4Njc=",
            "notifications_url": "https://api.github.com/repos/ii14/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/ii14/neovim/pulls{/number}",
            "pushed_at": "2023-07-25T12:10:34Z",
            "releases_url": "https://api.github.com/repos/ii14/neovim/releases{/id}",
            "size": 243929,
            "ssh_url": "git@github.com:ii14/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/ii14/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/ii14/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/ii14/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/ii14/neovim/subscription",
            "svn_url": "https://github.com/ii14/neovim",
            "tags_url": "https://api.github.com/repos/ii14/neovim/tags",
            "teams_url": "https://api.github.com/repos/ii14/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/ii14/neovim/git/trees{/sha}",
            "updated_at": "2022-08-27T13:57:03Z",
            "url": "https://api.github.com/repos/ii14/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "6a038b724925f20febe1be7f5f0661acceaa6478",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
            "events_url": "https://api.github.com/users/ii14/events{/privacy}",
            "followers_url": "https://api.github.com/users/ii14/followers",
            "following_url": "https://api.github.com/users/ii14/following{/other_user}",
            "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/ii14",
            "id": 59243201,
            "login": "ii14",
            "node_id": "MDQ6VXNlcjU5MjQzMjAx",
            "organizations_url": "https://api.github.com/users/ii14/orgs",
            "received_events_url": "https://api.github.com/users/ii14/received_events",
            "repos_url": "https://api.github.com/users/ii14/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/ii14"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/19667",
    "id": 1019394916,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19667",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        },
        {
            "color": "c7def8",
            "default": false,
            "description": "",
            "id": 109899557,
            "name": "vimscript",
            "node_id": "MDU6TGFiZWwxMDk4OTk1NTc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/vimscript"
        }
    ],
    "locked": false,
    "merge_commit_sha": "1a06a10a841160d71b27f1c377c5a98e69803a5d",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM48wrtk",
    "number": 19667,
    "patch_url": "https://github.com/neovim/neovim/pull/19667.patch",
    "requested_reviewers": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
            "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
            "followers_url": "https://api.github.com/users/bfredl/followers",
            "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
            "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bfredl",
            "id": 1363104,
            "login": "bfredl",
            "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
            "organizations_url": "https://api.github.com/users/bfredl/orgs",
            "received_events_url": "https://api.github.com/users/bfredl/received_events",
            "repos_url": "https://api.github.com/users/bfredl/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bfredl"
        },
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
            "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
            "followers_url": "https://api.github.com/users/gpanders/followers",
            "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
            "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/gpanders",
            "id": 8965202,
            "login": "gpanders",
            "node_id": "MDQ6VXNlcjg5NjUyMDI=",
            "organizations_url": "https://api.github.com/users/gpanders/orgs",
            "received_events_url": "https://api.github.com/users/gpanders/received_events",
            "repos_url": "https://api.github.com/users/gpanders/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/gpanders"
        },
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/9699804?v=4",
            "events_url": "https://api.github.com/users/muniter/events{/privacy}",
            "followers_url": "https://api.github.com/users/muniter/followers",
            "following_url": "https://api.github.com/users/muniter/following{/other_user}",
            "gists_url": "https://api.github.com/users/muniter/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/muniter",
            "id": 9699804,
            "login": "muniter",
            "node_id": "MDQ6VXNlcjk2OTk4MDQ=",
            "organizations_url": "https://api.github.com/users/muniter/orgs",
            "received_events_url": "https://api.github.com/users/muniter/received_events",
            "repos_url": "https://api.github.com/users/muniter/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/muniter/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/muniter/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/muniter"
        }
    ],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/19667/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/6a038b724925f20febe1be7f5f0661acceaa6478",
    "title": "feat(api): nvim_get_functions",
    "updated_at": "2023-08-01T10:33:12Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/19667",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
        "events_url": "https://api.github.com/users/ii14/events{/privacy}",
        "followers_url": "https://api.github.com/users/ii14/followers",
        "following_url": "https://api.github.com/users/ii14/following{/other_user}",
        "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ii14",
        "id": 59243201,
        "login": "ii14",
        "node_id": "MDQ6VXNlcjU5MjQzMjAx",
        "organizations_url": "https://api.github.com/users/ii14/orgs",
        "received_events_url": "https://api.github.com/users/ii14/received_events",
        "repos_url": "https://api.github.com/users/ii14/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ii14"
    }
}