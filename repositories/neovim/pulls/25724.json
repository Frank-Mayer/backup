{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/25724/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/25724/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/25724"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/25724"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/25724/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 4986,
            "forks_count": 4986,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1687,
            "open_issues_count": 1687,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2023-11-19T00:24:12Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 233879,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 71000,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2023-11-19T01:29:35Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 71000,
            "watchers_count": 71000,
            "web_commit_signoff_required": false
        },
        "sha": "677be4bdd224f25519d9072a923d2c707842c6ad",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "**Problem**:  The legacy signlist data structures and associated functions are\r\n          redundant since the introduction of extmark signs.\r\n\r\n**Solution**: Store signs defined through the legacy commands in a hashmap, placed\r\n          signs in the extmark tree. Replace signlist associated functions.\r\n\r\n---\r\n\r\nUsage of the legacy sign commands should yield no change in behavior with the\r\nexception of:\r\n  - \"orphaned signs\" are now always removed when the line it is placed on is\r\n    deleted. This used to depend on the value of 'signcolumn'.\r\n  - It is no longer possible to place multiple signs with the same identifier\r\n    in a single group on multiple lines. This will now move the sign instead.\r\n\r\nMoreover, both signs placed through the legacy sign commands and through\r\n|nvim_buf_set_extmark()|:\r\n  - Will show up in both |sign-place| and |nvim_buf_get_extmarks()|.\r\n  - Are displayed by increasing sign identifier, left to right.\r\n    Extmark signs used to be ordered decreasingly as opposed to legacy signs.",
    "closed_at": "2023-11-18T14:04:14Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1368366026"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1368366026"
                }
            },
            "author_association": "MEMBER",
            "body": "How much stuff would break if this was reduced to a single id (which would be incremented regardless if the sign is newly added or modified)? ",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-10-23T09:16:53Z",
            "diff_hunk": "@@ -156,12 +159,16 @@ void extmark_set(buf_T *buf, uint32_t ns_id, uint32_t *idp, int row, colnr_T col\n       buf->b_virt_line_blocks++;\n     }\n     if (decor_has_sign(decor)) {\n+      if (revised) {\n+        decor->sign_mod_id = sign_add_id;\n+      }\n+      decor->sign_add_id = sign_add_id++;",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1368366026",
            "id": 1368366026,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Rj5vK",
            "original_commit_id": "33b91acbd1621ba64a6e7fa24ea17da8e6731f07",
            "original_line": 169,
            "original_position": 31,
            "original_start_line": 162,
            "path": "src/nvim/extmark.c",
            "position": null,
            "pull_request_review_id": 1692073345,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1368366026/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-10-23T09:16:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1368366026",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1368493804"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1368493804"
                }
            },
            "author_association": "MEMBER",
            "body": "Arguably not that much. When signs are first placed in the signlist, currently they are sorted by `lnum` -> `priority` -> `sign_id`. Then when modified, signs take precedence over other signs with the same `sign_id`, even if the priority didn't change. I.e. this function does not consider `sign_id`:\r\nhttps://github.com/neovim/neovim/blob/5e5f5174e3faa862a9bc353aa7da41487911140b/src/nvim/sign.c#L309-L312\r\n\r\nSeems rather arbitrary to me actually, but it is explicitly tested for here:\r\nhttps://github.com/neovim/neovim/blob/5e5f5174e3faa862a9bc353aa7da41487911140b/test/old/testdir/test_signs.vim#L1512-L1515",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-10-23T11:06:41Z",
            "diff_hunk": "@@ -156,12 +159,16 @@ void extmark_set(buf_T *buf, uint32_t ns_id, uint32_t *idp, int row, colnr_T col\n       buf->b_virt_line_blocks++;\n     }\n     if (decor_has_sign(decor)) {\n+      if (revised) {\n+        decor->sign_mod_id = sign_add_id;\n+      }\n+      decor->sign_add_id = sign_add_id++;",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1368493804",
            "id": 1368493804,
            "in_reply_to_id": 1368366026,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5RkY7s",
            "original_commit_id": "33b91acbd1621ba64a6e7fa24ea17da8e6731f07",
            "original_line": 169,
            "original_position": 31,
            "original_start_line": 162,
            "path": "src/nvim/extmark.c",
            "position": null,
            "pull_request_review_id": 1692267924,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1368493804/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-10-23T15:24:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1368493804",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1377996476"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1377996476"
                }
            },
            "author_association": "MEMBER",
            "body": "IMO we should change this and just keep track of the last modified time. This is the kind of bug-for-bug compatibility which we don't aim at supporting.",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-10-31T18:09:31Z",
            "diff_hunk": "@@ -156,12 +159,16 @@ void extmark_set(buf_T *buf, uint32_t ns_id, uint32_t *idp, int row, colnr_T col\n       buf->b_virt_line_blocks++;\n     }\n     if (decor_has_sign(decor)) {\n+      if (revised) {\n+        decor->sign_mod_id = sign_add_id;\n+      }\n+      decor->sign_add_id = sign_add_id++;",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1377996476",
            "id": 1377996476,
            "in_reply_to_id": 1368366026,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5SIo68",
            "original_commit_id": "33b91acbd1621ba64a6e7fa24ea17da8e6731f07",
            "original_line": 169,
            "original_position": 31,
            "original_start_line": 162,
            "path": "src/nvim/extmark.c",
            "position": null,
            "pull_request_review_id": 1706969521,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1377996476/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-10-31T18:09:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1377996476",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1378047465"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1378047465"
                }
            },
            "author_association": "MEMBER",
            "body": "To be clear, we then want signs to be sorted by `lnum`->`priority`->`sign_id`->`last_modifed`?",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-10-31T18:58:07Z",
            "diff_hunk": "@@ -156,12 +159,16 @@ void extmark_set(buf_T *buf, uint32_t ns_id, uint32_t *idp, int row, colnr_T col\n       buf->b_virt_line_blocks++;\n     }\n     if (decor_has_sign(decor)) {\n+      if (revised) {\n+        decor->sign_mod_id = sign_add_id;\n+      }\n+      decor->sign_add_id = sign_add_id++;",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1378047465",
            "id": 1378047465,
            "in_reply_to_id": 1368366026,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5SI1Xp",
            "original_commit_id": "33b91acbd1621ba64a6e7fa24ea17da8e6731f07",
            "original_line": 169,
            "original_position": 31,
            "original_start_line": 162,
            "path": "src/nvim/extmark.c",
            "position": null,
            "pull_request_review_id": 1707048901,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1378047465/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-10-31T18:58:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1378047465",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1378203097"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1378203097"
                }
            },
            "author_association": "MEMBER",
            "body": "Do these changes warrant a news item and/or should this PR be a `refactor()` commit in spite of these changes?",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-10-31T21:58:21Z",
            "diff_hunk": "@@ -77,9 +75,9 @@ When two signs with the same priority are present, and one has an icon or text\n in the signcolumn while the other has line highlighting, then both are\n displayed.\n \n-When the line on which the sign is placed is deleted, the sign is moved to the\n-next line (or the last line of the buffer, if there is no next line).  When\n-the delete is undone the sign does not move back.\n+When the line on which the sign is placed is deleted, the sign is removed along\n+with it. This is in contrast to the default Vim behavior of keeping and grouping\n+them. Undoing the line deletion also restores the removed signs.",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1378203097",
            "id": 1378203097,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5SJbXZ",
            "original_commit_id": "b37e22c59af594c1491ef4093660c6d62e126cdc",
            "original_line": 80,
            "original_position": 22,
            "original_start_line": null,
            "path": "runtime/doc/sign.txt",
            "position": null,
            "pull_request_review_id": 1707297864,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1378203097/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-31T22:32:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1378203097",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1378205087"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1378205087"
                }
            },
            "author_association": "MEMBER",
            "body": "This was flip-flopping `b_signcols.valid` in a buffer without any signs. Causing unnecessarily looping over all marks in `decor_signcols()` each time any extmark was added. (Could try adding a regression test for this, maybe through FFI?)",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-10-31T22:01:32Z",
            "diff_hunk": "@@ -4149,42 +4092,32 @@ void buf_signcols_add_check(buf_T *buf, sign_entry_T *added)\n     return;\n   }\n \n-  sign_entry_T *s;\n-\n-  // Get first sign for added lnum\n-  for (s = added; s->se_prev && s->se_lnum == s->se_prev->se_lnum; s = s->se_prev) {}\n-\n-  // Count signs for lnum\n-  int linesum = 1;\n-  for (; s->se_next && s->se_lnum == s->se_next->se_lnum; s = s->se_next) {\n-    linesum++;\n-  }\n-  linesum += decor_signcols(buf, &decor_state, (int)s->se_lnum - 1, (int)s->se_lnum - 1,\n-                            SIGN_SHOW_MAX - linesum);\n+  int signcols = decor_signcols(buf, lnum - 1, lnum - 1, SIGN_SHOW_MAX);\n \n-  if (linesum > buf->b_signcols.size) {\n-    buf->b_signcols.size = linesum;\n-    buf->b_signcols.max = linesum;\n-    buf->b_signcols.sentinel = added->se_lnum;\n+  if (signcols > buf->b_signcols.size) {\n+    buf->b_signcols.size = signcols;\n+    buf->b_signcols.max = signcols;\n+    buf->b_signcols.sentinel = lnum;\n     redraw_buf_later(buf, UPD_NOT_VALID);\n   }\n }\n \n-int buf_signcols(buf_T *buf, int maximum)\n+int buf_signcols(buf_T *buf, int max)\n {\n   // The maximum can be determined from 'signcolumn' which is window scoped so\n   // need to invalidate signcols if the maximum is greater than the previous\n-  // maximum.\n-  if (maximum > buf->b_signcols.max) {\n+  // (valid) maximum.\n+  if (buf->b_signcols.max && max > buf->b_signcols.max) {",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1378205087",
            "id": 1378205087,
            "line": 4087,
            "node_id": "PRRC_kwDOAPphoM5SJb2f",
            "original_commit_id": "b37e22c59af594c1491ef4093660c6d62e126cdc",
            "original_line": 4087,
            "original_position": 131,
            "original_start_line": null,
            "path": "src/nvim/buffer.c",
            "position": 131,
            "pull_request_review_id": 1707297864,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1378205087/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-31T22:32:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1378205087",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1378215145"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1378215145"
                }
            },
            "author_association": "MEMBER",
            "body": "I wonder if an elaborate `FOR_ALL_MARKS` macro or function with function pointer argument would be useful for reducing boilerplate. Or would it only obfuscate unnecessarily?",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-10-31T22:18:17Z",
            "diff_hunk": "@@ -476,10 +476,6 @@ EXTERN buf_T *curbuf INIT( = NULL);    // currently active buffer\n #define FOR_ALL_BUF_WININFO(buf, wip) \\\n   for ((wip) = (buf)->b_wininfo; (wip) != NULL; (wip) = (wip)->wi_next)   // NOLINT\n \n-// Iterate through all the signs placed in a buffer\n-#define FOR_ALL_SIGNS_IN_BUF(buf, sign) \\",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1378215145",
            "id": 1378215145,
            "line": 478,
            "node_id": "PRRC_kwDOAPphoM5SJeTp",
            "original_commit_id": "b37e22c59af594c1491ef4093660c6d62e126cdc",
            "original_line": 478,
            "original_position": 5,
            "original_start_line": null,
            "path": "src/nvim/globals.h",
            "position": 5,
            "pull_request_review_id": 1707297864,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1378215145/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-31T22:32:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1378215145",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1378225160"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1378225160"
                }
            },
            "author_association": "MEMBER",
            "body": "Is this `extmark_del()` refactor alright and if so is there any reason why it shouldn't be used in `extmark_clear()`? I noticed that adds all marks/decors to a vector instead of deleting during iteration. \r\n\r\nTested it out and it seems to result in some paired marks not being deleted so I guess not. Restoring the iter after deleting the paired mark with `marktree_itr_get()` seems to work(as in all tests pass), but I'm not sure if the refactor makes sense at that point: https://github.com/neovim/neovim/pull/25859.",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-10-31T22:35:42Z",
            "diff_hunk": "@@ -612,206 +193,139 @@ static linenr_T buf_delsign(buf_T *buf, linenr_T atlnum, int id, char *group)\n /// @param group  sign group\n static int buf_findsign(buf_T *buf, int id, char *group)\n {\n-  sign_entry_T *sign;  // a sign in the signlist\n-\n-  FOR_ALL_SIGNS_IN_BUF(buf, sign) {\n-    if (sign->se_id == id && sign_in_group(sign, group)) {\n-      return (int)sign->se_lnum;\n-    }\n-  }\n-\n-  return 0;\n+  uint32_t ns_id = (uint32_t)map_get(String, int)(&namespace_ids, cstr_as_string(group));\n+  return (id < 0 || (ns_id == 0 && group != NULL)) ? 0\n+         : marktree_lookup_ns(buf->b_marktree, ns_id, (uint32_t)id, false, NULL).pos.row + 1;\n }\n \n-/// Return the sign at line 'lnum' in buffer 'buf'. Returns NULL if a sign is\n-/// not found at the line. If 'groupname' is NULL, searches in the global group.\n+/// Delete the specified signs\n ///\n-/// @param buf  buffer whose sign we are searching for\n-/// @param lnum  line number of sign\n-/// @param groupname  sign group name\n-static sign_entry_T *buf_getsign_at_line(buf_T *buf, linenr_T lnum, char *groupname)\n+/// @param buf  buffer sign is stored in or NULL for all buffers\n+/// @param group  sign group\n+/// @param id  sign id\n+/// @param atlnum  sign at this line, -1 at any line\n+static int buf_delete_signs(buf_T *buf, char *group, int id, linenr_T atlnum)\n {\n-  sign_entry_T *sign;    // a sign in the signlist\n+  int64_t ns_id = group_get_ns(group);\n+  if (ns_id < 0) {\n+    return FAIL;\n+  }\n \n-  FOR_ALL_SIGNS_IN_BUF(buf, sign) {\n-    if (sign->se_lnum > lnum) {\n-      // Signs are sorted by line number in the buffer. No need to check\n-      // for signs after the specified line number 'lnum'.\n-      break;\n+  MarkTreeIter itr[1];\n+  int row = atlnum > 0 ? atlnum - 1 : 0;\n+  kvec_t(MTKey) signs = KV_INITIAL_VALUE;\n+\n+  if (atlnum > 0) {\n+    if (!marktree_itr_get_overlap(buf->b_marktree, row, 0, itr)) {\n+      return FAIL;\n     }\n \n-    if (sign->se_lnum == lnum && sign_in_group(sign, groupname)) {\n-      return sign;\n+    MTPair pair;\n+    while (marktree_itr_step_overlap(buf->b_marktree, itr, &pair)) {\n+      if ((ns_id == UINT32_MAX || ns_id == pair.start.ns)\n+          && pair.start.decor_full && decor_has_sign(pair.start.decor_full)) {\n+        kv_push(signs, pair.start);\n+      }\n     }\n+  } else {\n+    marktree_itr_get(buf->b_marktree, 0, 0, itr);\n   }\n \n-  return NULL;\n-}\n-\n-/// Return the identifier of the sign at line number 'lnum' in buffer 'buf'.\n-///\n-/// @param buf  buffer whose sign we are searching for\n-/// @param lnum  line number of sign\n-/// @param groupname  sign group name\n-static int buf_findsign_id(buf_T *buf, linenr_T lnum, char *groupname)\n-{\n-  sign_entry_T *sign;   // a sign in the signlist\n-\n-  sign = buf_getsign_at_line(buf, lnum, groupname);\n-  if (sign != NULL) {\n-    return sign->se_id;\n+  while (itr->x) {\n+    MTKey mark = marktree_itr_current(itr);\n+    if (row && mark.pos.row > row) {\n+      break;\n+    }\n+    if ((id == 0 || (int)mark.id == id)\n+        && (ns_id == UINT32_MAX || ns_id == mark.ns)\n+        && !mt_end(mark) && mark.decor_full && decor_has_sign(mark.decor_full)) {\n+      if (atlnum > 0) {\n+        kv_push(signs, mark);\n+        marktree_itr_next(buf->b_marktree, itr);\n+      } else {\n+        extmark_del(buf, itr, mark, 0, 0);",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1378225160",
            "id": 1378225160,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5SJgwI",
            "original_commit_id": "b37e22c59af594c1491ef4093660c6d62e126cdc",
            "original_line": 246,
            "original_position": 724,
            "original_start_line": null,
            "path": "src/nvim/sign.c",
            "position": null,
            "pull_request_review_id": 1707329804,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1378225160/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-01T00:49:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1378225160",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1378613006"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1378613006"
                }
            },
            "author_association": "MEMBER",
            "body": "It is fine to label the commit as `refactor()` but would still be good with a brief news.txt item acknowledging that the behavior of legacy signs has changed.",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-11-01T10:12:49Z",
            "diff_hunk": "@@ -77,9 +75,9 @@ When two signs with the same priority are present, and one has an icon or text\n in the signcolumn while the other has line highlighting, then both are\n displayed.\n \n-When the line on which the sign is placed is deleted, the sign is moved to the\n-next line (or the last line of the buffer, if there is no next line).  When\n-the delete is undone the sign does not move back.\n+When the line on which the sign is placed is deleted, the sign is removed along\n+with it. This is in contrast to the default Vim behavior of keeping and grouping\n+them. Undoing the line deletion also restores the removed signs.",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1378613006",
            "id": 1378613006,
            "in_reply_to_id": 1378203097,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5SK_cO",
            "original_commit_id": "b37e22c59af594c1491ef4093660c6d62e126cdc",
            "original_line": 80,
            "original_position": 22,
            "original_start_line": null,
            "path": "runtime/doc/sign.txt",
            "position": null,
            "pull_request_review_id": 1707917433,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1378613006/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-01T10:12:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1378613006",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1378615048"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1378615048"
                }
            },
            "author_association": "MEMBER",
            "body": "good catch. Doesn't need a specific test.",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-11-01T10:15:02Z",
            "diff_hunk": "@@ -4149,42 +4092,32 @@ void buf_signcols_add_check(buf_T *buf, sign_entry_T *added)\n     return;\n   }\n \n-  sign_entry_T *s;\n-\n-  // Get first sign for added lnum\n-  for (s = added; s->se_prev && s->se_lnum == s->se_prev->se_lnum; s = s->se_prev) {}\n-\n-  // Count signs for lnum\n-  int linesum = 1;\n-  for (; s->se_next && s->se_lnum == s->se_next->se_lnum; s = s->se_next) {\n-    linesum++;\n-  }\n-  linesum += decor_signcols(buf, &decor_state, (int)s->se_lnum - 1, (int)s->se_lnum - 1,\n-                            SIGN_SHOW_MAX - linesum);\n+  int signcols = decor_signcols(buf, lnum - 1, lnum - 1, SIGN_SHOW_MAX);\n \n-  if (linesum > buf->b_signcols.size) {\n-    buf->b_signcols.size = linesum;\n-    buf->b_signcols.max = linesum;\n-    buf->b_signcols.sentinel = added->se_lnum;\n+  if (signcols > buf->b_signcols.size) {\n+    buf->b_signcols.size = signcols;\n+    buf->b_signcols.max = signcols;\n+    buf->b_signcols.sentinel = lnum;\n     redraw_buf_later(buf, UPD_NOT_VALID);\n   }\n }\n \n-int buf_signcols(buf_T *buf, int maximum)\n+int buf_signcols(buf_T *buf, int max)\n {\n   // The maximum can be determined from 'signcolumn' which is window scoped so\n   // need to invalidate signcols if the maximum is greater than the previous\n-  // maximum.\n-  if (maximum > buf->b_signcols.max) {\n+  // (valid) maximum.\n+  if (buf->b_signcols.max && max > buf->b_signcols.max) {",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1378615048",
            "id": 1378615048,
            "in_reply_to_id": 1378205087,
            "line": 4087,
            "node_id": "PRRC_kwDOAPphoM5SK_8I",
            "original_commit_id": "b37e22c59af594c1491ef4093660c6d62e126cdc",
            "original_line": 4087,
            "original_position": 131,
            "original_start_line": null,
            "path": "src/nvim/buffer.c",
            "position": 131,
            "pull_request_review_id": 1707920567,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1378615048/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-01T10:15:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1378615048",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1378617667"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1378617667"
                }
            },
            "author_association": "MEMBER",
            "body": "Shouldn't be a need, direct control of the iterator is better and is not much boiler plate in the simple case.",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-11-01T10:17:50Z",
            "diff_hunk": "@@ -476,10 +476,6 @@ EXTERN buf_T *curbuf INIT( = NULL);    // currently active buffer\n #define FOR_ALL_BUF_WININFO(buf, wip) \\\n   for ((wip) = (buf)->b_wininfo; (wip) != NULL; (wip) = (wip)->wi_next)   // NOLINT\n \n-// Iterate through all the signs placed in a buffer\n-#define FOR_ALL_SIGNS_IN_BUF(buf, sign) \\",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1378617667",
            "id": 1378617667,
            "in_reply_to_id": 1378215145,
            "line": 478,
            "node_id": "PRRC_kwDOAPphoM5SLAlD",
            "original_commit_id": "b37e22c59af594c1491ef4093660c6d62e126cdc",
            "original_line": 478,
            "original_position": 5,
            "original_start_line": null,
            "path": "src/nvim/globals.h",
            "position": 5,
            "pull_request_review_id": 1707924584,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1378617667/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-01T10:17:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1378617667",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1378618660"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1378618660"
                }
            },
            "author_association": "MEMBER",
            "body": ">  then want signs to be sorted by lnum->priority->sign_id->last_modifed?\r\n\r\nSounds reasonable",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-11-01T10:18:54Z",
            "diff_hunk": "@@ -156,12 +159,16 @@ void extmark_set(buf_T *buf, uint32_t ns_id, uint32_t *idp, int row, colnr_T col\n       buf->b_virt_line_blocks++;\n     }\n     if (decor_has_sign(decor)) {\n+      if (revised) {\n+        decor->sign_mod_id = sign_add_id;\n+      }\n+      decor->sign_add_id = sign_add_id++;",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1378618660",
            "id": 1378618660,
            "in_reply_to_id": 1368366026,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5SLA0k",
            "original_commit_id": "33b91acbd1621ba64a6e7fa24ea17da8e6731f07",
            "original_line": 169,
            "original_position": 31,
            "original_start_line": 162,
            "path": "src/nvim/extmark.c",
            "position": null,
            "pull_request_review_id": 1707926059,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1378618660/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-11-01T10:18:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1378618660",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1381442426"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1381442426"
                }
            },
            "author_association": "MEMBER",
            "body": " I think this should be considered a breaking change (and not one I think I'm in favour of) and may require me to make changes to several of my plugins.",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-11-03T10:18:08Z",
            "diff_hunk": "@@ -80,6 +80,14 @@ The following changes may require adaptations in user config or plugins.\n   the option is set (e.g. using |:set| or |nvim_set_option_value()|) without a\n   scope, which means they now behave the same way as string options.\n \n+• Signs placed through the legacy |sign-commands| are now stored and displayed\n+  as |extmarks| internally. Along with the following changes:\n+  • Lines deleted and restored with |undo| have their signs removed and restored.",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1381442426",
            "id": 1381442426,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5SVyN6",
            "original_commit_id": "e1db8d64c2539447b2bf5080b1b55fe0389a9a16",
            "original_line": 85,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": null,
            "pull_request_review_id": 1712275052,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1381442426/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-03T10:30:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1381442426",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1381537470"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1381537470"
                }
            },
            "author_association": "MEMBER",
            "body": "yea, if we add the \"ignore undo\" mode (I'll put up a PR), it would make sense to use that for legacy signs.",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-11-03T11:28:48Z",
            "diff_hunk": "@@ -80,6 +80,14 @@ The following changes may require adaptations in user config or plugins.\n   the option is set (e.g. using |:set| or |nvim_set_option_value()|) without a\n   scope, which means they now behave the same way as string options.\n \n+• Signs placed through the legacy |sign-commands| are now stored and displayed\n+  as |extmarks| internally. Along with the following changes:\n+  • Lines deleted and restored with |undo| have their signs removed and restored.",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1381537470",
            "id": 1381537470,
            "in_reply_to_id": 1381442426,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5SWJa-",
            "original_commit_id": "e1db8d64c2539447b2bf5080b1b55fe0389a9a16",
            "original_line": 85,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": null,
            "pull_request_review_id": 1712427694,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1381537470/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-03T11:28:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1381537470",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1381561813"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1381561813"
                }
            },
            "author_association": "MEMBER",
            "body": "Ok so what do we want to happen in this PR upon line deletion?\r\n\r\n1. Both legacy and extmark signs will be deleted from the buffer (regardless of 'signcolumn', \"breaking\" for extmark signs).\r\n2. We make a superficial distinction between extmark and legacy signs and have extmark signs adjusted and legacy signs deleted, just to stay backwards compatible.\r\n3. Both legacy and extmark signs will be adjusted instead of deleted (\"breaking\" for legacy signs).",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-11-03T11:51:12Z",
            "diff_hunk": "@@ -80,6 +80,14 @@ The following changes may require adaptations in user config or plugins.\n   the option is set (e.g. using |:set| or |nvim_set_option_value()|) without a\n   scope, which means they now behave the same way as string options.\n \n+• Signs placed through the legacy |sign-commands| are now stored and displayed\n+  as |extmarks| internally. Along with the following changes:\n+  • Lines deleted and restored with |undo| have their signs removed and restored.",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1381561813",
            "id": 1381561813,
            "in_reply_to_id": 1381442426,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5SWPXV",
            "original_commit_id": "e1db8d64c2539447b2bf5080b1b55fe0389a9a16",
            "original_line": 85,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": null,
            "pull_request_review_id": 1712467833,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1381561813/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-03T11:51:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1381561813",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1381584652"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1381584652"
                }
            },
            "author_association": "MEMBER",
            "body": "The distinction will rather be that extmark signs _explicitly_ can choose either mode, just like any other extmark.\r\n\r\n\"legacy\" behavior becomes a strict subset of the configurable extmark behavior in either case.",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-11-03T12:12:43Z",
            "diff_hunk": "@@ -80,6 +80,14 @@ The following changes may require adaptations in user config or plugins.\n   the option is set (e.g. using |:set| or |nvim_set_option_value()|) without a\n   scope, which means they now behave the same way as string options.\n \n+• Signs placed through the legacy |sign-commands| are now stored and displayed\n+  as |extmarks| internally. Along with the following changes:\n+  • Lines deleted and restored with |undo| have their signs removed and restored.",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1381584652",
            "id": 1381584652,
            "in_reply_to_id": 1381442426,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5SWU8M",
            "original_commit_id": "e1db8d64c2539447b2bf5080b1b55fe0389a9a16",
            "original_line": 85,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": null,
            "pull_request_review_id": 1712506323,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1381584652/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-03T12:12:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1381584652",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1381588790"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1381588790"
                }
            },
            "author_association": "MEMBER",
            "body": "Yeah fair, I guess we're set then once I rebase this on top of #25882. Legacy signs will have both `invalidate` and `no_undo_restore` set and will be deleted, only [breaking](https://github.com/neovim/neovim/pull/25724#issuecomment-1775840754) the current `'signcolumn' == yes/auto:1` behavior.",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-11-03T12:17:09Z",
            "diff_hunk": "@@ -80,6 +80,14 @@ The following changes may require adaptations in user config or plugins.\n   the option is set (e.g. using |:set| or |nvim_set_option_value()|) without a\n   scope, which means they now behave the same way as string options.\n \n+• Signs placed through the legacy |sign-commands| are now stored and displayed\n+  as |extmarks| internally. Along with the following changes:\n+  • Lines deleted and restored with |undo| have their signs removed and restored.",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1381588790",
            "id": 1381588790,
            "in_reply_to_id": 1381442426,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5SWV82",
            "original_commit_id": "e1db8d64c2539447b2bf5080b1b55fe0389a9a16",
            "original_line": 85,
            "original_position": 6,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": null,
            "pull_request_review_id": 1712513675,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1381588790/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-03T12:17:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1381588790",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1388050099"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1388050099"
                }
            },
            "author_association": "MEMBER",
            "body": "Can this TODO be removed now that the sentinel line is being checked for extmark signs in `buf_signcols_add_check()`, or did you plan something else @lewis6991?",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-11-09T14:03:03Z",
            "diff_hunk": "@@ -105,12 +107,13 @@ void decor_add(buf_T *buf, int row, int row2, Decoration *decor, bool hl_id)\n       buf->b_virt_line_blocks++;\n     }\n     if (decor_has_sign(decor)) {\n+      decor->sign_add_id = sign_add_id++;\n       buf->b_signs++;\n     }\n     if (decor->sign_text) {\n       buf->b_signs_with_text++;\n       // TODO(lewis6991): smarter invalidation",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1388050099",
            "id": 1388050099,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Su_az",
            "original_commit_id": "e3edc09b79871448f827c3e1a3ec9cae03fa4d73",
            "original_line": 115,
            "original_position": 25,
            "original_start_line": null,
            "path": "src/nvim/decoration.c",
            "position": null,
            "pull_request_review_id": 1722615445,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1388050099/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-09T14:03:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1388050099",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1388496138"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1388496138"
                }
            },
            "author_association": "MEMBER",
            "body": "Maybe? I can't really remember without deep diving. If you think it's optimal (...enough) then feel free to remove.",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-11-09T19:32:51Z",
            "diff_hunk": "@@ -105,12 +107,13 @@ void decor_add(buf_T *buf, int row, int row2, Decoration *decor, bool hl_id)\n       buf->b_virt_line_blocks++;\n     }\n     if (decor_has_sign(decor)) {\n+      decor->sign_add_id = sign_add_id++;\n       buf->b_signs++;\n     }\n     if (decor->sign_text) {\n       buf->b_signs_with_text++;\n       // TODO(lewis6991): smarter invalidation",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1388496138",
            "id": 1388496138,
            "in_reply_to_id": 1388050099,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5SwsUK",
            "original_commit_id": "e3edc09b79871448f827c3e1a3ec9cae03fa4d73",
            "original_line": 115,
            "original_position": 25,
            "original_start_line": null,
            "path": "src/nvim/decoration.c",
            "position": null,
            "pull_request_review_id": 1723350854,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1388496138/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-09T19:32:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1388496138",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1392411813"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1392411813"
                }
            },
            "author_association": "MEMBER",
            "body": "Can the tests simply be updated (or removed) instead of commenting it?",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-11-14T11:03:33Z",
            "diff_hunk": "@@ -1670,34 +1674,33 @@ func Test_sign_lnum_adjust()\n   \" changes made by this function.\n   let &g:undolevels=&g:undolevels\n \n-  \" Nvim: make sign adjustment when deleting lines match Vim\n-  set signcolumn=yes:1\n+  \" Nvim: deleting a line removes the signs along with it.\n \n-  \" Delete the line with the sign\n-  call deletebufline('', 4)\n-  let l = sign_getplaced(bufnr(''))\n-  call assert_equal(4, l[0].signs[0].lnum)\n+  \" \" Delete the line with the sign\n+  \" call deletebufline('', 4)\n+  \" let l = sign_getplaced(bufnr(''))\n+  \" call assert_equal(4, l[0].signs[0].lnum)",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1392411813",
            "id": 1392411813,
            "line": 1661,
            "node_id": "PRRC_kwDOAPphoM5S_oSl",
            "original_commit_id": "38bc8e49cc16f1277dfbe0865ef011401f95168f",
            "original_line": 1661,
            "original_position": 97,
            "original_start_line": null,
            "path": "test/old/testdir/test_signs.vim",
            "position": 76,
            "pull_request_review_id": 1729491085,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1392411813/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-14T11:03:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1392411813",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1392467692"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1392467692"
                }
            },
            "author_association": "MEMBER",
            "body": "No.",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-11-14T11:49:25Z",
            "diff_hunk": "@@ -1670,34 +1674,33 @@ func Test_sign_lnum_adjust()\n   \" changes made by this function.\n   let &g:undolevels=&g:undolevels\n \n-  \" Nvim: make sign adjustment when deleting lines match Vim\n-  set signcolumn=yes:1\n+  \" Nvim: deleting a line removes the signs along with it.\n \n-  \" Delete the line with the sign\n-  call deletebufline('', 4)\n-  let l = sign_getplaced(bufnr(''))\n-  call assert_equal(4, l[0].signs[0].lnum)\n+  \" \" Delete the line with the sign\n+  \" call deletebufline('', 4)\n+  \" let l = sign_getplaced(bufnr(''))\n+  \" call assert_equal(4, l[0].signs[0].lnum)",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1392467692",
            "id": 1392467692,
            "in_reply_to_id": 1392411813,
            "line": 1661,
            "node_id": "PRRC_kwDOAPphoM5S_17s",
            "original_commit_id": "38bc8e49cc16f1277dfbe0865ef011401f95168f",
            "original_line": 1661,
            "original_position": 97,
            "original_start_line": null,
            "path": "test/old/testdir/test_signs.vim",
            "position": 76,
            "pull_request_review_id": 1729561950,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1392467692/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-14T11:49:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1392467692",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1392760854"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1392760854"
                }
            },
            "author_association": "MEMBER",
            "body": "If I understand correctly, the commented out test here isn't even vim behaviour which moves the signs instead.",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-11-14T15:14:23Z",
            "diff_hunk": "@@ -1670,34 +1674,33 @@ func Test_sign_lnum_adjust()\n   \" changes made by this function.\n   let &g:undolevels=&g:undolevels\n \n-  \" Nvim: make sign adjustment when deleting lines match Vim\n-  set signcolumn=yes:1\n+  \" Nvim: deleting a line removes the signs along with it.\n \n-  \" Delete the line with the sign\n-  call deletebufline('', 4)\n-  let l = sign_getplaced(bufnr(''))\n-  call assert_equal(4, l[0].signs[0].lnum)\n+  \" \" Delete the line with the sign\n+  \" call deletebufline('', 4)\n+  \" let l = sign_getplaced(bufnr(''))\n+  \" call assert_equal(4, l[0].signs[0].lnum)",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1392760854",
            "id": 1392760854,
            "in_reply_to_id": 1392411813,
            "line": 1661,
            "node_id": "PRRC_kwDOAPphoM5TA9gW",
            "original_commit_id": "38bc8e49cc16f1277dfbe0865ef011401f95168f",
            "original_line": 1661,
            "original_position": 97,
            "original_start_line": null,
            "path": "test/old/testdir/test_signs.vim",
            "position": 76,
            "pull_request_review_id": 1729990558,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1392760854/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-14T15:14:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1392760854",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1392809903"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1392809903"
                }
            },
            "author_association": "MEMBER",
            "body": "This test tests vim behavior, which we matched by setting `'signcolumn'` to `\"yes:1\"`. Since we decided we no longer want conditional sign removal, we can no longer use this test. Adapting it seems unnecessary, as signs now just match extmark behavior which is well tested. Apparently commenting it out is preferred to removing?",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-11-14T15:43:49Z",
            "diff_hunk": "@@ -1670,34 +1674,33 @@ func Test_sign_lnum_adjust()\n   \" changes made by this function.\n   let &g:undolevels=&g:undolevels\n \n-  \" Nvim: make sign adjustment when deleting lines match Vim\n-  set signcolumn=yes:1\n+  \" Nvim: deleting a line removes the signs along with it.\n \n-  \" Delete the line with the sign\n-  call deletebufline('', 4)\n-  let l = sign_getplaced(bufnr(''))\n-  call assert_equal(4, l[0].signs[0].lnum)\n+  \" \" Delete the line with the sign\n+  \" call deletebufline('', 4)\n+  \" let l = sign_getplaced(bufnr(''))\n+  \" call assert_equal(4, l[0].signs[0].lnum)",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1392809903",
            "id": 1392809903,
            "in_reply_to_id": 1392411813,
            "line": 1661,
            "node_id": "PRRC_kwDOAPphoM5TBJev",
            "original_commit_id": "38bc8e49cc16f1277dfbe0865ef011401f95168f",
            "original_line": 1661,
            "original_position": 97,
            "original_start_line": null,
            "path": "test/old/testdir/test_signs.vim",
            "position": 76,
            "pull_request_review_id": 1730061637,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1392809903/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-14T15:44:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1392809903",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1392812587"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1392812587"
                }
            },
            "author_association": "MEMBER",
            "body": "The other test could be adapted to verify the order doesn't change I guess. Would that be preferred @zeertzjq?",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-11-14T15:45:41Z",
            "diff_hunk": "@@ -1670,34 +1674,33 @@ func Test_sign_lnum_adjust()\n   \" changes made by this function.\n   let &g:undolevels=&g:undolevels\n \n-  \" Nvim: make sign adjustment when deleting lines match Vim\n-  set signcolumn=yes:1\n+  \" Nvim: deleting a line removes the signs along with it.\n \n-  \" Delete the line with the sign\n-  call deletebufline('', 4)\n-  let l = sign_getplaced(bufnr(''))\n-  call assert_equal(4, l[0].signs[0].lnum)\n+  \" \" Delete the line with the sign\n+  \" call deletebufline('', 4)\n+  \" let l = sign_getplaced(bufnr(''))\n+  \" call assert_equal(4, l[0].signs[0].lnum)",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1392812587",
            "id": 1392812587,
            "in_reply_to_id": 1392411813,
            "line": 1661,
            "node_id": "PRRC_kwDOAPphoM5TBKIr",
            "original_commit_id": "38bc8e49cc16f1277dfbe0865ef011401f95168f",
            "original_line": 1661,
            "original_position": 97,
            "original_start_line": null,
            "path": "test/old/testdir/test_signs.vim",
            "position": 76,
            "pull_request_review_id": 1730065960,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1392812587/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-14T15:53:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1392812587",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1393405293"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1393405293"
                }
            },
            "author_association": "MEMBER",
            "body": "Hmm, if this order is followed, then `test_termdebug.vim` should need the following change:\r\n```diff\r\ndiff --git a/test/old/testdir/test_termdebug.vim b/test/old/testdir/test_termdebug.vim\r\nindex 98a4bd321..7fa162c3c 100644\r\n--- a/test/old/testdir/test_termdebug.vim\r\n+++ b/test/old/testdir/test_termdebug.vim\r\n@@ -69,8 +69,7 @@ func Test_termdebug_basic()\r\n         \\  'group': 'TermDebug'},\r\n         \\ {'lnum': 9, 'id': 1014, 'name': 'debugBreakpoint1.0',\r\n         \\  'priority': 110, 'group': 'TermDebug'}],\r\n-        \"\\ sign_getplaced('', #{group: 'TermDebug'})[0].signs)})\r\n-        \\ sign_getplaced('', #{group: 'TermDebug'})[0].signs->reverse())})\r\n+        \\ sign_getplaced('', #{group: 'TermDebug'})[0].signs)})\r\n   Finish\r\n   call Nterm_wait(gdb_buf)\r\n   redraw!\r\n```\r\n\r\nBut currently it doesn't.",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-11-14T22:48:02Z",
            "diff_hunk": "@@ -1509,42 +1509,46 @@ func Test_sign_priority()\n               \\ {'id' : 1, 'name' : 'sign1', 'lnum' : 4, 'group' : '',\n               \\ 'priority' : 20}],\n               \\ s[0].signs)\n+\n+  \" Nvim: signs are always sorted lnum->priority->sign_id->last_modified",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1393405293",
            "id": 1393405293,
            "line": 1513,
            "node_id": "PRRC_kwDOAPphoM5TDa1t",
            "original_commit_id": "d06604cc09b0091846b3503d1676d5d7e571631c",
            "original_line": 1513,
            "original_position": 5,
            "original_start_line": null,
            "path": "test/old/testdir/test_signs.vim",
            "position": 16,
            "pull_request_review_id": 1730955643,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1393405293/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-14T22:48:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1393405293",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1393409080"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1393409080"
                }
            },
            "author_association": "MEMBER",
            "body": "I think yes. Commenting out two lines and adding two lines is a smaller change than commenting out all assertions. Note that there cannot be spaces between `\"` and `\\` though.",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-11-14T22:52:39Z",
            "diff_hunk": "@@ -1670,34 +1674,33 @@ func Test_sign_lnum_adjust()\n   \" changes made by this function.\n   let &g:undolevels=&g:undolevels\n \n-  \" Nvim: make sign adjustment when deleting lines match Vim\n-  set signcolumn=yes:1\n+  \" Nvim: deleting a line removes the signs along with it.\n \n-  \" Delete the line with the sign\n-  call deletebufline('', 4)\n-  let l = sign_getplaced(bufnr(''))\n-  call assert_equal(4, l[0].signs[0].lnum)\n+  \" \" Delete the line with the sign\n+  \" call deletebufline('', 4)\n+  \" let l = sign_getplaced(bufnr(''))\n+  \" call assert_equal(4, l[0].signs[0].lnum)",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1393409080",
            "id": 1393409080,
            "in_reply_to_id": 1392411813,
            "line": 1661,
            "node_id": "PRRC_kwDOAPphoM5TDbw4",
            "original_commit_id": "38bc8e49cc16f1277dfbe0865ef011401f95168f",
            "original_line": 1661,
            "original_position": 97,
            "original_start_line": null,
            "path": "test/old/testdir/test_signs.vim",
            "position": 76,
            "pull_request_review_id": 1730960202,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1393409080/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-14T22:53:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1393409080",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1393414473"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1393414473"
                }
            },
            "author_association": "MEMBER",
            "body": "Not sure what you mean, what I had in mind was asserting that replacing those signs doesn't change the order:\r\n```diff\r\ndiff --git a/test/old/testdir/test_signs.vim b/test/old/testdir/test_signs.vim\r\nindex 507efcefe..1beace7d3 100644\r\n--- a/test/old/testdir/test_signs.vim\r\n+++ b/test/old/testdir/test_signs.vim\r\n@@ -1501,54 +1501,33 @@ func Test_sign_priority()\r\n   call sign_place(3, '', 'sign3', 'Xsign',\r\n               \\ {'lnum' : 4, 'priority' : 20})\r\n   let s = sign_getplaced('Xsign', {'group' : '*'})\r\n-  call assert_equal([\r\n+  let se = [\r\n               \\ {'id' : 3, 'name' : 'sign3', 'lnum' : 4, 'group' : '',\r\n               \\ 'priority' : 20},\r\n               \\ {'id' : 2, 'name' : 'sign2', 'lnum' : 4, 'group' : '',\r\n               \\ 'priority' : 20},\r\n               \\ {'id' : 1, 'name' : 'sign1', 'lnum' : 4, 'group' : '',\r\n-              \\ 'priority' : 20}],\r\n-              \\ s[0].signs)\r\n+              \\ 'priority' : 20}]\r\n+  call assert_equal(es, s[0].signs)\r\n \r\n   \" Nvim: signs are always sorted lnum->priority->sign_id->last_modified\r\n   \" Last modified does not take precedence over sign_id here.\r\n \r\n   \" Place the last sign again with the same priority\r\n-  \" call sign_place(1, '', 'sign1', 'Xsign',\r\n-  \"             \\ {'lnum' : 4, 'priority' : 20})\r\n-  \" let s = sign_getplaced('Xsign', {'group' : '*'})\r\n-  \" call assert_equal([\r\n-  \"             \\ {'id' : 1, 'name' : 'sign1', 'lnum' : 4, 'group' : '',\r\n-  \"             \\ 'priority' : 20},\r\n-  \"             \\ {'id' : 3, 'name' : 'sign3', 'lnum' : 4, 'group' : '',\r\n-  \"             \\ 'priority' : 20},\r\n-  \"             \\ {'id' : 2, 'name' : 'sign2', 'lnum' : 4, 'group' : '',\r\n-  \"             \\ 'priority' : 20}],\r\n-  \"             \\ s[0].signs)\r\n-  \" \" Place the first sign again with the same priority\r\n-  \" call sign_place(1, '', 'sign1', 'Xsign',\r\n-  \"             \\ {'lnum' : 4, 'priority' : 20})\r\n-  \" let s = sign_getplaced('Xsign', {'group' : '*'})\r\n-  \" call assert_equal([\r\n-  \"             \\ {'id' : 1, 'name' : 'sign1', 'lnum' : 4, 'group' : '',\r\n-  \"             \\ 'priority' : 20},\r\n-  \"             \\ {'id' : 3, 'name' : 'sign3', 'lnum' : 4, 'group' : '',\r\n-  \"             \\ 'priority' : 20},\r\n-  \"             \\ {'id' : 2, 'name' : 'sign2', 'lnum' : 4, 'group' : '',\r\n-  \"             \\ 'priority' : 20}],\r\n-  \"             \\ s[0].signs)\r\n-  \" \" Place the middle sign again with the same priority\r\n-  \" call sign_place(3, '', 'sign3', 'Xsign',\r\n-  \"             \\ {'lnum' : 4, 'priority' : 20})\r\n-  \" let s = sign_getplaced('Xsign', {'group' : '*'})\r\n-  \" call assert_equal([\r\n-  \"             \\ {'id' : 3, 'name' : 'sign3', 'lnum' : 4, 'group' : '',\r\n-  \"             \\ 'priority' : 20},\r\n-  \"             \\ {'id' : 1, 'name' : 'sign1', 'lnum' : 4, 'group' : '',\r\n-  \"             \\ 'priority' : 20},\r\n-  \"             \\ {'id' : 2, 'name' : 'sign2', 'lnum' : 4, 'group' : '',\r\n-  \"             \\ 'priority' : 20}],\r\n-  \"             \\ s[0].signs)\r\n+  call sign_place(1, '', 'sign1', 'Xsign',\r\n+              \\ {'lnum' : 4, 'priority' : 20})\r\n+  let s = sign_getplaced('Xsign', {'group' : '*'})\r\n+  call assert_equal(se, s[0].signs)\r\n+  \" Place the first sign again with the same priority\r\n+  call sign_place(1, '', 'sign1', 'Xsign',\r\n+              \\ {'lnum' : 4, 'priority' : 20})\r\n+  let s = sign_getplaced('Xsign', {'group' : '*'})\r\n+  call assert_equal(se, s[0].signs)\r\n+  \" Place the middle sign again with the same priority\r\n+  call sign_place(3, '', 'sign3', 'Xsign',\r\n+              \\ {'lnum' : 4, 'priority' : 20})\r\n+  let s = sign_getplaced('Xsign', {'group' : '*'})\r\n+  call assert_equal(se, s[0].signs)\r\n \r\n   call sign_unplace('*')\r\n```",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-11-14T22:58:39Z",
            "diff_hunk": "@@ -1670,34 +1674,33 @@ func Test_sign_lnum_adjust()\n   \" changes made by this function.\n   let &g:undolevels=&g:undolevels\n \n-  \" Nvim: make sign adjustment when deleting lines match Vim\n-  set signcolumn=yes:1\n+  \" Nvim: deleting a line removes the signs along with it.\n \n-  \" Delete the line with the sign\n-  call deletebufline('', 4)\n-  let l = sign_getplaced(bufnr(''))\n-  call assert_equal(4, l[0].signs[0].lnum)\n+  \" \" Delete the line with the sign\n+  \" call deletebufline('', 4)\n+  \" let l = sign_getplaced(bufnr(''))\n+  \" call assert_equal(4, l[0].signs[0].lnum)",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1393414473",
            "id": 1393414473,
            "in_reply_to_id": 1392411813,
            "line": 1661,
            "node_id": "PRRC_kwDOAPphoM5TDdFJ",
            "original_commit_id": "38bc8e49cc16f1277dfbe0865ef011401f95168f",
            "original_line": 1661,
            "original_position": 97,
            "original_start_line": null,
            "path": "test/old/testdir/test_signs.vim",
            "position": 76,
            "pull_request_review_id": 1730966562,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1393414473/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-14T22:58:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1393414473",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1393421539"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1393421539"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n\t\tfurther manipulation.  {id} must be a number.  Placing the\r\n\t\tsame {id} multiple times will move the sign.\r\n```",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-11-14T23:07:41Z",
            "diff_hunk": "@@ -177,11 +175,8 @@ See |sign_place()| for the equivalent Vim script function.\n \t\tspace is ignored.\n \n \t\tThe sign is remembered under {id}, this can be used for\n-\t\tfurther manipulation.  {id} must be a number.\n-\t\tIt's up to the user to make sure the {id} is used only once in\n-\t\teach file (if it's used several times unplacing will also have\n-\t\tto be done several times and making changes may not work as\n-\t\texpected).\n+\t\tfurther manipulation.  {id} must be a number. Placing the same\n+\t\t{id} multiple times will move the sign.",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1393421539",
            "id": 1393421539,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5TDezj",
            "original_commit_id": "d06604cc09b0091846b3503d1676d5d7e571631c",
            "original_line": 179,
            "original_position": 38,
            "original_start_line": 178,
            "path": "runtime/doc/sign.txt",
            "position": null,
            "pull_request_review_id": 1730975396,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1393421539/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-11-14T23:07:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1393421539",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1393429960"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1393429960"
                }
            },
            "author_association": "MEMBER",
            "body": "The pointer cast below looks a bit risky. I think it's better to cast at caller instead.\r\n```suggestion\r\nstatic void buf_addsign(buf_T *buf, uint32_t id, char *group, int prio, linenr_T lnum,\r\n                        const sign_T *sp)\r\n```",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-11-14T23:18:57Z",
            "diff_hunk": "@@ -77,736 +59,245 @@ static char *cmds[] = {\n #define SIGNCMD_LAST    6\n };\n \n-static hashtab_T sg_table;  // sign group (signgroup_T) hashtable\n-static int next_sign_id = 1;  // next sign id in the global group\n-\n-/// Initialize data needed for managing signs\n-void init_signs(void)\n-{\n-  hash_init(&sg_table);  // sign group hash table\n-}\n-\n-/// A new sign in group 'groupname' is added. If the group is not present,\n-/// create it. Otherwise reference the group.\n-static signgroup_T *sign_group_ref(const char *groupname)\n+// Convert the supplied \"group\" to a namespace filter\n+static int64_t group_get_ns(const char *group)\n {\n-  hash_T hash;\n-  hashitem_T *hi;\n-  signgroup_T *group;\n-\n-  hash = hash_hash(groupname);\n-  hi = hash_lookup(&sg_table, groupname, strlen(groupname), hash);\n-  if (HASHITEM_EMPTY(hi)) {\n-    // new group\n-    group = xmalloc(offsetof(signgroup_T, sg_name) + strlen(groupname) + 1);\n-\n-    STRCPY(group->sg_name, groupname);\n-    group->sg_refcount = 1;\n-    group->sg_next_sign_id = 1;\n-    hash_add_item(&sg_table, hi, group->sg_name, hash);\n-  } else {\n-    // existing group\n-    group = HI2SG(hi);\n-    group->sg_refcount++;\n+  if (group == NULL) {\n+    return 0;           // Global namespace\n+  } else if (strcmp(group, \"*\") == 0) {\n+    return UINT32_MAX;  // All namespaces\n   }\n-\n-  return group;\n-}\n-\n-/// A sign in group 'groupname' is removed. If all the signs in this group are\n-/// removed, then remove the group.\n-static void sign_group_unref(char *groupname)\n-{\n-  hashitem_T *hi = hash_find(&sg_table, groupname);\n-  if (HASHITEM_EMPTY(hi)) {\n-    return;\n-  }\n-\n-  signgroup_T *group = HI2SG(hi);\n-  group->sg_refcount--;\n-  if (group->sg_refcount == 0) {\n-    // All the signs in this group are removed\n-    hash_remove(&sg_table, hi);\n-    xfree(group);\n-  }\n-}\n-\n-/// @return true if 'sign' is in 'group'.\n-/// A sign can either be in the global group (sign->group == NULL)\n-/// or in a named group. If 'group' is '*', then the sign is part of the group.\n-static bool sign_in_group(sign_entry_T *sign, const char *group)\n-{\n-  return ((group != NULL && strcmp(group, \"*\") == 0)\n-          || (group == NULL && sign->se_group == NULL)\n-          || (group != NULL && sign->se_group != NULL\n-              && strcmp(group, sign->se_group->sg_name) == 0));\n+  // Specific or non-existing namespace\n+  int ns = map_get(String, int)(&namespace_ids, cstr_as_string((char *)group));\n+  return ns ? ns : -1;\n }\n \n /// Get the next free sign identifier in the specified group\n-static int sign_group_get_next_signid(buf_T *buf, const char *groupname)\n+static int sign_group_get_next_signid(buf_T *buf, const char *group)\n {\n-  int id = 1;\n-  signgroup_T *group = NULL;\n-  sign_entry_T *sign;\n-  int found = false;\n-\n-  if (groupname != NULL) {\n-    hashitem_T *hi = hash_find(&sg_table, groupname);\n-    if (HASHITEM_EMPTY(hi)) {\n-      return id;\n-    }\n-    group = HI2SG(hi);\n+  uint32_t ns = group ? (uint32_t)nvim_create_namespace(cstr_as_string((char *)group)) : 0;\n+\n+  if (group && marktree_lookup_ns(buf->b_marktree, ns, 1, false, NULL).pos.row < 0) {\n+    return 1;\n   }\n \n+  int id = group ? map_get(int, int)(&namespace_sign_ids, (int)ns) : next_sign_id++;\n   // Search for the next usable sign identifier\n-  while (!found) {\n-    if (group == NULL) {\n-      id = next_sign_id++;    // global group\n-    } else {\n-      id = group->sg_next_sign_id++;\n-    }\n-\n-    // Check whether this sign is already placed in the buffer\n-    found = true;\n-    FOR_ALL_SIGNS_IN_BUF(buf, sign) {\n-      if (id == sign->se_id && sign_in_group(sign, groupname)) {\n-        found = false;    // sign identifier is in use\n-        break;\n-      }\n-    }\n+  while (marktree_lookup_ns(buf->b_marktree, ns, (uint32_t)id, false, NULL).pos.row >= 0) {\n+    id = group ? id + 1 : next_sign_id++;\n   }\n \n   return id;\n }\n \n-/// Insert a new sign into the signlist for buffer 'buf' between the 'prev' and\n-/// 'next' signs.\n-///\n-/// @param buf  buffer to store sign in\n-/// @param prev  previous sign entry\n-/// @param next  next sign entry\n-/// @param id  sign ID\n-/// @param group  sign group; NULL for global group\n-/// @param prio  sign priority\n-/// @param lnum  line number which gets the mark\n-/// @param typenr  typenr of sign we are adding\n-/// @param has_text_or_icon  sign has text or icon\n-static void insert_sign(buf_T *buf, sign_entry_T *prev, sign_entry_T *next, int id,\n-                        const char *group, int prio, linenr_T lnum, int typenr,\n-                        bool has_text_or_icon)\n+static const char *sign_get_name(MTKey mark)\n {\n-  sign_entry_T *newsign = xmalloc(sizeof(sign_entry_T));\n-  newsign->se_id = id;\n-  newsign->se_lnum = lnum;\n-  newsign->se_typenr = typenr;\n-  newsign->se_has_text_or_icon = has_text_or_icon;\n-  if (group != NULL) {\n-    newsign->se_group = sign_group_ref(group);\n-  } else {\n-    newsign->se_group = NULL;\n-  }\n-  newsign->se_priority = prio;\n-  newsign->se_next = next;\n-  newsign->se_prev = prev;\n-  if (next != NULL) {\n-    next->se_prev = newsign;\n-  }\n-\n-  buf_signcols_add_check(buf, newsign);\n-\n-  if (prev == NULL) {\n-    // When adding first sign need to redraw the windows to create the\n-    // column for signs.\n-    if (buf->b_signlist == NULL) {\n-      redraw_buf_later(buf, UPD_NOT_VALID);\n-      changed_line_abv_curs();\n-    }\n-\n-    // first sign in signlist\n-    buf->b_signlist = newsign;\n-  } else {\n-    prev->se_next = newsign;\n-  }\n+  char *name = mark.decor_full->sign_name;\n+  return !name ? \"\" : map_has(cstr_t, &sign_map, name) ? name : \"[Deleted]\";\n }\n \n-/// Insert a new sign sorted by line number and sign priority.\n+/// Create or update a sign mark.\n ///\n /// @param buf  buffer to store sign in\n-/// @param prev  previous sign entry\n /// @param id  sign ID\n-/// @param group  sign group; NULL for global group\n+/// @param group  sign group\n /// @param prio  sign priority\n /// @param lnum  line number which gets the mark\n-/// @param typenr  typenr of sign we are adding\n-/// @param has_text_or_icon  sign has text or icon\n-static void insert_sign_by_lnum_prio(buf_T *buf, sign_entry_T *prev, int id, const char *group,\n-                                     int prio, linenr_T lnum, int typenr, bool has_text_or_icon)\n-{\n-  sign_entry_T *sign;\n-\n-  // keep signs sorted by lnum, priority and id: insert new sign at\n-  // the proper position in the list for this lnum.\n-  while (prev != NULL && prev->se_lnum == lnum\n-         && (prev->se_priority < prio\n-             || (prev->se_priority == prio && prev->se_id <= id))) {\n-    prev = prev->se_prev;\n-  }\n-  if (prev == NULL) {\n-    sign = buf->b_signlist;\n-  } else {\n-    sign = prev->se_next;\n-  }\n-\n-  insert_sign(buf, prev, sign, id, group, prio, lnum, typenr, has_text_or_icon);\n-}\n-\n-/// Lookup a sign by typenr. Returns NULL if sign is not found.\n-static sign_T *find_sign_by_typenr(int typenr)\n-{\n-  sign_T *sp;\n-\n-  for (sp = first_sign; sp != NULL; sp = sp->sn_next) {\n-    if (sp->sn_typenr == typenr) {\n-      return sp;\n-    }\n-  }\n-  return NULL;\n-}\n-\n-/// Get the name of a sign by its typenr.\n-static char *sign_typenr2name(int typenr)\n-{\n-  sign_T *sp;\n-\n-  for (sp = first_sign; sp != NULL; sp = sp->sn_next) {\n-    if (sp->sn_typenr == typenr) {\n-      return sp->sn_name;\n-    }\n-  }\n-  return _(\"[Deleted]\");\n-}\n-\n-/// Return information about a sign in a Dict\n-static dict_T *sign_get_info(sign_entry_T *sign)\n-{\n-  dict_T *d = tv_dict_alloc();\n-  tv_dict_add_nr(d,  S_LEN(\"id\"), sign->se_id);\n-  tv_dict_add_str(d, S_LEN(\"group\"), ((sign->se_group == NULL)\n-                                      ? \"\"\n-                                      : sign->se_group->sg_name));\n-  tv_dict_add_nr(d,  S_LEN(\"lnum\"), sign->se_lnum);\n-  tv_dict_add_str(d, S_LEN(\"name\"), sign_typenr2name(sign->se_typenr));\n-  tv_dict_add_nr(d,  S_LEN(\"priority\"), sign->se_priority);\n-\n-  return d;\n-}\n-\n-// Sort the signs placed on the same line as \"sign\" by priority.  Invoked after\n-// changing the priority of an already placed sign.  Assumes the signs in the\n-// buffer are sorted by line number and priority.\n-static void sign_sort_by_prio_on_line(buf_T *buf, sign_entry_T *sign)\n-  FUNC_ATTR_NONNULL_ALL\n-{\n-  // If there is only one sign in the buffer or only one sign on the line or\n-  // the sign is already sorted by priority, then return.\n-  if ((sign->se_prev == NULL\n-       || sign->se_prev->se_lnum != sign->se_lnum\n-       || sign->se_prev->se_priority > sign->se_priority)\n-      && (sign->se_next == NULL\n-          || sign->se_next->se_lnum != sign->se_lnum\n-          || sign->se_next->se_priority < sign->se_priority)) {\n-    return;\n-  }\n-\n-  // One or more signs on the same line as 'sign'\n-  // Find a sign after which 'sign' should be inserted\n-\n-  // First search backward for a sign with higher priority on the same line\n-  sign_entry_T *p = sign;\n-  while (p->se_prev != NULL\n-         && p->se_prev->se_lnum == sign->se_lnum\n-         && p->se_prev->se_priority <= sign->se_priority) {\n-    p = p->se_prev;\n-  }\n-  if (p == sign) {\n-    // Sign not found. Search forward for a sign with priority just before\n-    // 'sign'.\n-    p = sign->se_next;\n-    while (p->se_next != NULL\n-           && p->se_next->se_lnum == sign->se_lnum\n-           && p->se_next->se_priority > sign->se_priority) {\n-      p = p->se_next;\n-    }\n-  }\n-\n-  // Remove 'sign' from the list\n-  if (buf->b_signlist == sign) {\n-    buf->b_signlist = sign->se_next;\n-  }\n-  if (sign->se_prev != NULL) {\n-    sign->se_prev->se_next = sign->se_next;\n-  }\n-  if (sign->se_next != NULL) {\n-    sign->se_next->se_prev = sign->se_prev;\n-  }\n-  sign->se_prev = NULL;\n-  sign->se_next = NULL;\n-\n-  // Re-insert 'sign' at the right place\n-  if (p->se_priority <= sign->se_priority) {\n-    // 'sign' has a higher priority and should be inserted before 'p'\n-    sign->se_prev = p->se_prev;\n-    sign->se_next = p;\n-    p->se_prev = sign;\n-    if (sign->se_prev != NULL) {\n-      sign->se_prev->se_next = sign;\n-    }\n-    if (buf->b_signlist == p) {\n-      buf->b_signlist = sign;\n-    }\n-  } else {\n-    // 'sign' has a lower priority and should be inserted after 'p'\n-    sign->se_prev = p;\n-    sign->se_next = p->se_next;\n-    p->se_next = sign;\n-    if (sign->se_next != NULL) {\n-      sign->se_next->se_prev = sign;\n-    }\n-  }\n-}\n-\n-/// Add the sign into the signlist. Find the right spot to do it though.\n+/// @param sp  sign properties\n+static void buf_addsign(buf_T *buf, int id, char *group, int prio, linenr_T lnum, sign_T *sp)",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1393429960",
            "id": 1393429960,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5TDg3I",
            "original_commit_id": "d06604cc09b0091846b3503d1676d5d7e571631c",
            "original_line": 107,
            "original_position": 389,
            "original_start_line": null,
            "path": "src/nvim/sign.c",
            "position": null,
            "pull_request_review_id": 1730985115,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1393429960/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-14T23:19:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1393429960",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1393436984"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1393436984"
                }
            },
            "author_association": "MEMBER",
            "body": "Not familiar with this test and I have no idea how it bypasses the qsort order. Why was it reversed in the first place? I can't reproduce it either with:\r\n```vim\r\ncall setline(1, ['a', 'b', 'c']->repeat(3))\r\ncall sign_define([{'name':'debugPC', 'text':'>>'}, {'name':'debugBreakpoint1.0', 'text':'xx'}])\r\ncall sign_place(12, 'TermDebug', 'debugPC', bufnr(''), {'lnum':9, 'priority':110})\r\ncall sign_place(1014, 'TermDebug', 'debugBreakpoint1.0', bufnr(''), {'lnum':9, 'priority':110})\r\necho sign_getplaced(bufnr(''), {'group':'*'})\r\n```",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-11-14T23:28:06Z",
            "diff_hunk": "@@ -1509,42 +1509,46 @@ func Test_sign_priority()\n               \\ {'id' : 1, 'name' : 'sign1', 'lnum' : 4, 'group' : '',\n               \\ 'priority' : 20}],\n               \\ s[0].signs)\n+\n+  \" Nvim: signs are always sorted lnum->priority->sign_id->last_modified",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1393436984",
            "id": 1393436984,
            "in_reply_to_id": 1393405293,
            "line": 1513,
            "node_id": "PRRC_kwDOAPphoM5TDik4",
            "original_commit_id": "d06604cc09b0091846b3503d1676d5d7e571631c",
            "original_line": 1513,
            "original_position": 5,
            "original_start_line": null,
            "path": "test/old/testdir/test_signs.vim",
            "position": 16,
            "pull_request_review_id": 1730993079,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1393436984/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-14T23:28:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1393436984",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1393494315"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1393494315"
                }
            },
            "author_association": "MEMBER",
            "body": "Even if I run\r\n\r\n    gdb --args <build/bin/nvim> -u unix.vim -U NONE -i NONE --noplugin --headless -u NONE --cmd 'set shortmess-=F' -S runtest.vim test_termdebug.vim\r\n\r\nand break in `sign_list_append_info()` I see the expected sign order.\r\n",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-11-15T00:51:48Z",
            "diff_hunk": "@@ -1509,42 +1509,46 @@ func Test_sign_priority()\n               \\ {'id' : 1, 'name' : 'sign1', 'lnum' : 4, 'group' : '',\n               \\ 'priority' : 20}],\n               \\ s[0].signs)\n+\n+  \" Nvim: signs are always sorted lnum->priority->sign_id->last_modified",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1393494315",
            "id": 1393494315,
            "in_reply_to_id": 1393405293,
            "line": 1513,
            "node_id": "PRRC_kwDOAPphoM5TDwkr",
            "original_commit_id": "d06604cc09b0091846b3503d1676d5d7e571631c",
            "original_line": 1513,
            "original_position": 5,
            "original_start_line": null,
            "path": "test/old/testdir/test_signs.vim",
            "position": 16,
            "pull_request_review_id": 1731058471,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1393494315/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-15T01:15:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1393494315",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1393509648"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1393509648"
                }
            },
            "author_association": "MEMBER",
            "body": "> Hmm, if this order is followed, then test_termdebug.vim should need the following change:\r\n\r\nWait no isn't this just false? The expected results lists them in reverse order so reversing `sign_getplaced()` will make them equal...",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-11-15T01:14:51Z",
            "diff_hunk": "@@ -1509,42 +1509,46 @@ func Test_sign_priority()\n               \\ {'id' : 1, 'name' : 'sign1', 'lnum' : 4, 'group' : '',\n               \\ 'priority' : 20}],\n               \\ s[0].signs)\n+\n+  \" Nvim: signs are always sorted lnum->priority->sign_id->last_modified",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1393509648",
            "id": 1393509648,
            "in_reply_to_id": 1393405293,
            "line": 1513,
            "node_id": "PRRC_kwDOAPphoM5TD0UQ",
            "original_commit_id": "d06604cc09b0091846b3503d1676d5d7e571631c",
            "original_line": 1513,
            "original_position": 5,
            "original_start_line": null,
            "path": "test/old/testdir/test_signs.vim",
            "position": 16,
            "pull_request_review_id": 1731075322,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1393509648/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-15T01:14:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1393509648",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1393518497"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1393518497"
                }
            },
            "author_association": "MEMBER",
            "body": "Ah, it's descending order? Hard to notice.",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-11-15T01:28:11Z",
            "diff_hunk": "@@ -1509,42 +1509,46 @@ func Test_sign_priority()\n               \\ {'id' : 1, 'name' : 'sign1', 'lnum' : 4, 'group' : '',\n               \\ 'priority' : 20}],\n               \\ s[0].signs)\n+\n+  \" Nvim: signs are always sorted lnum->priority->sign_id->last_modified",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1393518497",
            "id": 1393518497,
            "in_reply_to_id": 1393405293,
            "line": 1513,
            "node_id": "PRRC_kwDOAPphoM5TD2eh",
            "original_commit_id": "d06604cc09b0091846b3503d1676d5d7e571631c",
            "original_line": 1513,
            "original_position": 5,
            "original_start_line": null,
            "path": "test/old/testdir/test_signs.vim",
            "position": 16,
            "pull_request_review_id": 1731085147,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1393518497/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-15T01:28:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1393518497",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1393524162"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1393524162"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes, ascending line number, descending priority and ID. That doesn't change in this PR. Only thing that changes is that modifying an already placed sign no longer gives it a higher priority in the sign list (see https://github.com/neovim/neovim/pull/25724#discussion_r1368366026).",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-11-15T01:36:57Z",
            "diff_hunk": "@@ -1509,42 +1509,46 @@ func Test_sign_priority()\n               \\ {'id' : 1, 'name' : 'sign1', 'lnum' : 4, 'group' : '',\n               \\ 'priority' : 20}],\n               \\ s[0].signs)\n+\n+  \" Nvim: signs are always sorted lnum->priority->sign_id->last_modified",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1393524162",
            "id": 1393524162,
            "in_reply_to_id": 1393405293,
            "line": 1513,
            "node_id": "PRRC_kwDOAPphoM5TD33C",
            "original_commit_id": "d06604cc09b0091846b3503d1676d5d7e571631c",
            "original_line": 1513,
            "original_position": 5,
            "original_start_line": null,
            "path": "test/old/testdir/test_signs.vim",
            "position": 16,
            "pull_request_review_id": 1731091223,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1393524162/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-15T01:36:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1393524162",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1397367642"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1397367642"
                }
            },
            "author_association": "MEMBER",
            "body": "this can just be a check that `idx` is in bounds `idx < kv_size(sign_ns)` and then use `kv_A(sign_ns, idx)`",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-11-17T14:07:33Z",
            "diff_hunk": "@@ -1758,34 +993,26 @@ static char *get_nth_sign_group_name(int idx)\n {\n   // Complete with name of sign groups already defined\n   int current_idx = 0;\n-  int todo = (int)sg_table.ht_used;\n-  for (hashitem_T *hi = sg_table.ht_array; todo > 0; hi++) {\n-    if (!HASHITEM_EMPTY(hi)) {\n-      todo--;\n-      if (current_idx++ == idx) {\n-        signgroup_T *const group = HI2SG(hi);\n-        return group->sg_name;\n-      }\n+  for (size_t i = 0; i < kv_size(sign_ns); i++) {",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1397367642",
            "id": 1397367642,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5TSiNa",
            "original_commit_id": "b8a0a24b06c664a816d6f16fb71bab9842081a70",
            "original_line": 996,
            "original_position": 2025,
            "original_start_line": null,
            "path": "src/nvim/sign.c",
            "position": null,
            "pull_request_review_id": 1737081525,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1397367642/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-17T14:07:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1397367642",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1397691383"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1397691383"
                }
            },
            "author_association": "MEMBER",
            "body": "Can we add this to `ExtmarkInfo`? It's helpful for `'statuscolumn'` consumers to know the name attached to a sign mark. So I think `nvim_buf_get_extmarks()` should return the sign name for legacy signs but perhaps we even want to make this a public extmark property?",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-11-17T18:01:23Z",
            "diff_hunk": "@@ -60,7 +60,9 @@ struct Decoration {\n   int col;  // fixed col value, like win_col\n   int virt_text_width;  // width of virt_text\n   char *sign_text;\n+  char *sign_name;",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1397691383",
            "id": 1397691383,
            "line": 63,
            "node_id": "PRRC_kwDOAPphoM5TTxP3",
            "original_commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "original_line": 63,
            "original_position": 4,
            "original_start_line": null,
            "path": "src/nvim/decoration.h",
            "position": 4,
            "pull_request_review_id": 1737602626,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1397691383/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-17T18:01:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1397691383",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1398179343"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1398179343"
                }
            },
            "author_association": "MEMBER",
            "body": "`ExtmarkInfo` is going a way anyway. for now can just access it via the `Decoration *` field, no?",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-11-18T09:46:20Z",
            "diff_hunk": "@@ -60,7 +60,9 @@ struct Decoration {\n   int col;  // fixed col value, like win_col\n   int virt_text_width;  // width of virt_text\n   char *sign_text;\n+  char *sign_name;",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1398179343",
            "id": 1398179343,
            "in_reply_to_id": 1397691383,
            "line": 63,
            "node_id": "PRRC_kwDOAPphoM5TVoYP",
            "original_commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "original_line": 63,
            "original_position": 4,
            "original_start_line": null,
            "path": "src/nvim/decoration.h",
            "position": 4,
            "pull_request_review_id": 1738370848,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1398179343/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-18T09:46:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1398179343",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1398181029"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1398181029"
                }
            },
            "author_association": "MEMBER",
            "body": "What is going on here? The docstring sounds like deleting all signs which matches some specification. If this is intentional, maybe write a small comment why the first item is picked and deleted?",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-11-18T09:55:50Z",
            "diff_hunk": "@@ -77,736 +58,229 @@ static char *cmds[] = {\n #define SIGNCMD_LAST    6\n };\n \n-static hashtab_T sg_table;  // sign group (signgroup_T) hashtable\n-static int next_sign_id = 1;  // next sign id in the global group\n-\n-/// Initialize data needed for managing signs\n-void init_signs(void)\n-{\n-  hash_init(&sg_table);  // sign group hash table\n-}\n-\n-/// A new sign in group 'groupname' is added. If the group is not present,\n-/// create it. Otherwise reference the group.\n-static signgroup_T *sign_group_ref(const char *groupname)\n-{\n-  hash_T hash;\n-  hashitem_T *hi;\n-  signgroup_T *group;\n-\n-  hash = hash_hash(groupname);\n-  hi = hash_lookup(&sg_table, groupname, strlen(groupname), hash);\n-  if (HASHITEM_EMPTY(hi)) {\n-    // new group\n-    group = xmalloc(offsetof(signgroup_T, sg_name) + strlen(groupname) + 1);\n-\n-    STRCPY(group->sg_name, groupname);\n-    group->sg_refcount = 1;\n-    group->sg_next_sign_id = 1;\n-    hash_add_item(&sg_table, hi, group->sg_name, hash);\n-  } else {\n-    // existing group\n-    group = HI2SG(hi);\n-    group->sg_refcount++;\n-  }\n-\n-  return group;\n-}\n-\n-/// A sign in group 'groupname' is removed. If all the signs in this group are\n-/// removed, then remove the group.\n-static void sign_group_unref(char *groupname)\n+// Convert the supplied \"group\" to a namespace filter\n+static int64_t group_get_ns(const char *group)\n {\n-  hashitem_T *hi = hash_find(&sg_table, groupname);\n-  if (HASHITEM_EMPTY(hi)) {\n-    return;\n-  }\n-\n-  signgroup_T *group = HI2SG(hi);\n-  group->sg_refcount--;\n-  if (group->sg_refcount == 0) {\n-    // All the signs in this group are removed\n-    hash_remove(&sg_table, hi);\n-    xfree(group);\n+  if (group == NULL) {\n+    return 0;           // Global namespace\n+  } else if (strcmp(group, \"*\") == 0) {\n+    return UINT32_MAX;  // All namespaces\n   }\n+  // Specific or non-existing namespace\n+  int ns = map_get(String, int)(&namespace_ids, cstr_as_string((char *)group));\n+  return ns ? ns : -1;\n }\n \n-/// @return true if 'sign' is in 'group'.\n-/// A sign can either be in the global group (sign->group == NULL)\n-/// or in a named group. If 'group' is '*', then the sign is part of the group.\n-static bool sign_in_group(sign_entry_T *sign, const char *group)\n+static const char *sign_get_name(MTKey mark)\n {\n-  return ((group != NULL && strcmp(group, \"*\") == 0)\n-          || (group == NULL && sign->se_group == NULL)\n-          || (group != NULL && sign->se_group != NULL\n-              && strcmp(group, sign->se_group->sg_name) == 0));\n+  char *name = mark.decor_full->sign_name;\n+  return !name ? \"\" : map_has(cstr_t, &sign_map, name) ? name : \"[Deleted]\";\n }\n \n-/// Get the next free sign identifier in the specified group\n-static int sign_group_get_next_signid(buf_T *buf, const char *groupname)\n-{\n-  int id = 1;\n-  signgroup_T *group = NULL;\n-  sign_entry_T *sign;\n-  int found = false;\n-\n-  if (groupname != NULL) {\n-    hashitem_T *hi = hash_find(&sg_table, groupname);\n-    if (HASHITEM_EMPTY(hi)) {\n-      return id;\n-    }\n-    group = HI2SG(hi);\n-  }\n-\n-  // Search for the next usable sign identifier\n-  while (!found) {\n-    if (group == NULL) {\n-      id = next_sign_id++;    // global group\n-    } else {\n-      id = group->sg_next_sign_id++;\n-    }\n-\n-    // Check whether this sign is already placed in the buffer\n-    found = true;\n-    FOR_ALL_SIGNS_IN_BUF(buf, sign) {\n-      if (id == sign->se_id && sign_in_group(sign, groupname)) {\n-        found = false;    // sign identifier is in use\n-        break;\n-      }\n-    }\n-  }\n-\n-  return id;\n-}\n-\n-/// Insert a new sign into the signlist for buffer 'buf' between the 'prev' and\n-/// 'next' signs.\n+/// Create or update a sign extmark.\n ///\n /// @param buf  buffer to store sign in\n-/// @param prev  previous sign entry\n-/// @param next  next sign entry\n /// @param id  sign ID\n-/// @param group  sign group; NULL for global group\n+/// @param group  sign group\n /// @param prio  sign priority\n /// @param lnum  line number which gets the mark\n-/// @param typenr  typenr of sign we are adding\n-/// @param has_text_or_icon  sign has text or icon\n-static void insert_sign(buf_T *buf, sign_entry_T *prev, sign_entry_T *next, int id,\n-                        const char *group, int prio, linenr_T lnum, int typenr,\n-                        bool has_text_or_icon)\n+/// @param sp  sign properties\n+static void buf_set_sign(buf_T *buf, uint32_t *id, char *group, int prio, linenr_T lnum, sign_T *sp)\n {\n-  sign_entry_T *newsign = xmalloc(sizeof(sign_entry_T));\n-  newsign->se_id = id;\n-  newsign->se_lnum = lnum;\n-  newsign->se_typenr = typenr;\n-  newsign->se_has_text_or_icon = has_text_or_icon;\n-  if (group != NULL) {\n-    newsign->se_group = sign_group_ref(group);\n-  } else {\n-    newsign->se_group = NULL;\n+  if (group && !map_get(String, int)(&namespace_ids, cstr_as_string(group))) {\n+    kv_push(sign_ns, nvim_create_namespace(cstr_as_string(group)));\n   }\n-  newsign->se_priority = prio;\n-  newsign->se_next = next;\n-  newsign->se_prev = prev;\n-  if (next != NULL) {\n-    next->se_prev = newsign;\n-  }\n-\n-  buf_signcols_add_check(buf, newsign);\n-\n-  if (prev == NULL) {\n-    // When adding first sign need to redraw the windows to create the\n-    // column for signs.\n-    if (buf->b_signlist == NULL) {\n-      redraw_buf_later(buf, UPD_NOT_VALID);\n-      changed_line_abv_curs();\n-    }\n \n-    // first sign in signlist\n-    buf->b_signlist = newsign;\n-  } else {\n-    prev->se_next = newsign;\n-  }\n+  uint32_t ns = group ? (uint32_t)nvim_create_namespace(cstr_as_string(group)) : 0;\n+  Decoration decor = DECORATION_INIT;\n+  decor.sign_text = sp->sn_text ? xstrdup(sp->sn_text) : NULL;\n+  decor.sign_name = xstrdup(sp->sn_name);\n+  decor.sign_hl_id = sp->sn_text_hl;\n+  decor.line_hl_id = sp->sn_line_hl;\n+  decor.number_hl_id = sp->sn_num_hl;\n+  decor.cursorline_hl_id = sp->sn_cul_hl;\n+  decor.priority = (DecorPriority)prio;\n+  extmark_set(buf, ns, id, lnum - 1, 0, -1, -1, &decor, true, false, true, true, NULL);\n }\n \n-/// Insert a new sign sorted by line number and sign priority.\n+/// For an existing, placed sign with \"id\", modify the sign, group or priority.\n+/// Returns the line number of the sign, or zero if the sign is not found.\n ///\n /// @param buf  buffer to store sign in\n-/// @param prev  previous sign entry\n /// @param id  sign ID\n-/// @param group  sign group; NULL for global group\n+/// @param group  sign group\n /// @param prio  sign priority\n-/// @param lnum  line number which gets the mark\n-/// @param typenr  typenr of sign we are adding\n-/// @param has_text_or_icon  sign has text or icon\n-static void insert_sign_by_lnum_prio(buf_T *buf, sign_entry_T *prev, int id, const char *group,\n-                                     int prio, linenr_T lnum, int typenr, bool has_text_or_icon)\n-{\n-  sign_entry_T *sign;\n-\n-  // keep signs sorted by lnum, priority and id: insert new sign at\n-  // the proper position in the list for this lnum.\n-  while (prev != NULL && prev->se_lnum == lnum\n-         && (prev->se_priority < prio\n-             || (prev->se_priority == prio && prev->se_id <= id))) {\n-    prev = prev->se_prev;\n-  }\n-  if (prev == NULL) {\n-    sign = buf->b_signlist;\n-  } else {\n-    sign = prev->se_next;\n-  }\n-\n-  insert_sign(buf, prev, sign, id, group, prio, lnum, typenr, has_text_or_icon);\n-}\n-\n-/// Lookup a sign by typenr. Returns NULL if sign is not found.\n-static sign_T *find_sign_by_typenr(int typenr)\n-{\n-  sign_T *sp;\n-\n-  for (sp = first_sign; sp != NULL; sp = sp->sn_next) {\n-    if (sp->sn_typenr == typenr) {\n-      return sp;\n-    }\n-  }\n-  return NULL;\n-}\n-\n-/// Get the name of a sign by its typenr.\n-static char *sign_typenr2name(int typenr)\n-{\n-  sign_T *sp;\n-\n-  for (sp = first_sign; sp != NULL; sp = sp->sn_next) {\n-    if (sp->sn_typenr == typenr) {\n-      return sp->sn_name;\n-    }\n-  }\n-  return _(\"[Deleted]\");\n-}\n-\n-/// Return information about a sign in a Dict\n-static dict_T *sign_get_info(sign_entry_T *sign)\n-{\n-  dict_T *d = tv_dict_alloc();\n-  tv_dict_add_nr(d,  S_LEN(\"id\"), sign->se_id);\n-  tv_dict_add_str(d, S_LEN(\"group\"), ((sign->se_group == NULL)\n-                                      ? \"\"\n-                                      : sign->se_group->sg_name));\n-  tv_dict_add_nr(d,  S_LEN(\"lnum\"), sign->se_lnum);\n-  tv_dict_add_str(d, S_LEN(\"name\"), sign_typenr2name(sign->se_typenr));\n-  tv_dict_add_nr(d,  S_LEN(\"priority\"), sign->se_priority);\n-\n-  return d;\n-}\n-\n-// Sort the signs placed on the same line as \"sign\" by priority.  Invoked after\n-// changing the priority of an already placed sign.  Assumes the signs in the\n-// buffer are sorted by line number and priority.\n-static void sign_sort_by_prio_on_line(buf_T *buf, sign_entry_T *sign)\n-  FUNC_ATTR_NONNULL_ALL\n+/// @param sp  sign pointer\n+static linenr_T buf_mod_sign(buf_T *buf, uint32_t *id, char *group, int prio, sign_T *sp)\n {\n-  // If there is only one sign in the buffer or only one sign on the line or\n-  // the sign is already sorted by priority, then return.\n-  if ((sign->se_prev == NULL\n-       || sign->se_prev->se_lnum != sign->se_lnum\n-       || sign->se_prev->se_priority > sign->se_priority)\n-      && (sign->se_next == NULL\n-          || sign->se_next->se_lnum != sign->se_lnum\n-          || sign->se_next->se_priority < sign->se_priority)) {\n-    return;\n-  }\n-\n-  // One or more signs on the same line as 'sign'\n-  // Find a sign after which 'sign' should be inserted\n-\n-  // First search backward for a sign with higher priority on the same line\n-  sign_entry_T *p = sign;\n-  while (p->se_prev != NULL\n-         && p->se_prev->se_lnum == sign->se_lnum\n-         && p->se_prev->se_priority <= sign->se_priority) {\n-    p = p->se_prev;\n-  }\n-  if (p == sign) {\n-    // Sign not found. Search forward for a sign with priority just before\n-    // 'sign'.\n-    p = sign->se_next;\n-    while (p->se_next != NULL\n-           && p->se_next->se_lnum == sign->se_lnum\n-           && p->se_next->se_priority > sign->se_priority) {\n-      p = p->se_next;\n-    }\n-  }\n-\n-  // Remove 'sign' from the list\n-  if (buf->b_signlist == sign) {\n-    buf->b_signlist = sign->se_next;\n-  }\n-  if (sign->se_prev != NULL) {\n-    sign->se_prev->se_next = sign->se_next;\n-  }\n-  if (sign->se_next != NULL) {\n-    sign->se_next->se_prev = sign->se_prev;\n+  int64_t ns = group_get_ns(group);\n+  if (ns < 0 || (group && ns == 0)) {\n+    return 0;\n   }\n-  sign->se_prev = NULL;\n-  sign->se_next = NULL;\n \n-  // Re-insert 'sign' at the right place\n-  if (p->se_priority <= sign->se_priority) {\n-    // 'sign' has a higher priority and should be inserted before 'p'\n-    sign->se_prev = p->se_prev;\n-    sign->se_next = p;\n-    p->se_prev = sign;\n-    if (sign->se_prev != NULL) {\n-      sign->se_prev->se_next = sign;\n-    }\n-    if (buf->b_signlist == p) {\n-      buf->b_signlist = sign;\n-    }\n-  } else {\n-    // 'sign' has a lower priority and should be inserted after 'p'\n-    sign->se_prev = p;\n-    sign->se_next = p->se_next;\n-    p->se_next = sign;\n-    if (sign->se_next != NULL) {\n-      sign->se_next->se_prev = sign;\n-    }\n+  MTKey mark = marktree_lookup_ns(buf->b_marktree, (uint32_t)ns, *id, false, NULL);\n+  if (mark.pos.row >= 0) {\n+    buf_set_sign(buf, id, group, prio, mark.pos.row + 1, sp);\n   }\n+  return mark.pos.row + 1;\n }\n \n-/// Add the sign into the signlist. Find the right spot to do it though.\n+/// Find the line number of the sign with the requested id in group 'group'. If\n+/// the sign does not exist, return 0 as the line number. This will still let\n+/// the correct file get loaded.\n ///\n /// @param buf  buffer to store sign in\n /// @param id  sign ID\n-/// @param groupname  sign group\n-/// @param prio  sign priority\n-/// @param lnum  line number which gets the mark\n-/// @param typenr  typenr of sign we are adding\n-/// @param has_text_or_icon  sign has text or icon\n-static void buf_addsign(buf_T *buf, int id, const char *groupname, int prio, linenr_T lnum,\n-                        int typenr, bool has_text_or_icon)\n-{\n-  sign_entry_T *sign;    // a sign in the signlist\n-  sign_entry_T *prev;    // the previous sign\n-\n-  prev = NULL;\n-  FOR_ALL_SIGNS_IN_BUF(buf, sign) {\n-    if (lnum == sign->se_lnum && id == sign->se_id\n-        && sign_in_group(sign, groupname)) {\n-      // Update an existing sign\n-      sign->se_typenr = typenr;\n-      sign->se_priority = prio;\n-      sign_sort_by_prio_on_line(buf, sign);\n-      return;\n-    } else if (lnum < sign->se_lnum) {\n-      insert_sign_by_lnum_prio(buf,\n-                               prev,\n-                               id,\n-                               groupname,\n-                               prio,\n-                               lnum,\n-                               typenr,\n-                               has_text_or_icon);\n-      return;\n-    }\n-    prev = sign;\n-  }\n-\n-  insert_sign_by_lnum_prio(buf,\n-                           prev,\n-                           id,\n-                           groupname,\n-                           prio,\n-                           lnum,\n-                           typenr,\n-                           has_text_or_icon);\n-}\n-\n-/// For an existing, placed sign \"markId\" change the type to \"typenr\".\n-/// Returns the line number of the sign, or zero if the sign is not found.\n-///\n-/// @param buf  buffer to store sign in\n-/// @param markId  sign ID\n /// @param group  sign group\n-/// @param typenr  typenr of sign we are adding\n-/// @param prio  sign priority\n-static linenr_T buf_change_sign_type(buf_T *buf, int markId, const char *group, int typenr,\n-                                     int prio)\n+static int buf_findsign(buf_T *buf, int id, char *group)\n {\n-  sign_entry_T *sign;  // a sign in the signlist\n-\n-  FOR_ALL_SIGNS_IN_BUF(buf, sign) {\n-    if (sign->se_id == markId && sign_in_group(sign, group)) {\n-      sign->se_typenr = typenr;\n-      sign->se_priority = prio;\n-      sign_sort_by_prio_on_line(buf, sign);\n-      return sign->se_lnum;\n-    }\n+  int64_t ns = group_get_ns(group);\n+  if (ns < 0 || (group && ns == 0)) {\n+    return 0;\n   }\n-\n-  return 0;\n+  return marktree_lookup_ns(buf->b_marktree, (uint32_t)ns, (uint32_t)id, false, NULL).pos.row + 1;\n }\n \n-/// Return the sign attrs which has the attribute specified by 'type'. Returns\n-/// NULL if a sign is not found with the specified attribute.\n-/// @param type Type of sign to look for\n-/// @param sattrs Sign attrs to search through\n-/// @param idx if there multiple signs, this index will pick the n-th\n-///        out of the most `max_signs` sorted ascending by Id.\n-/// @param max_signs the number of signs, with priority for the ones\n-///        with the highest Ids.\n-/// @return Attrs of the matching sign, or NULL\n-SignTextAttrs *sign_get_attr(int idx, SignTextAttrs sattrs[], int max_signs)\n+/// qsort() function to sort signs by line number, priority, id and recency.\n+int sign_cmp(const void *p1, const void *p2)\n {\n-  SignTextAttrs *matches[SIGN_SHOW_MAX];\n-  int sattr_matches = 0;\n-\n-  for (int i = 0; i < SIGN_SHOW_MAX; i++) {\n-    if (sattrs[i].text != NULL) {\n-      matches[sattr_matches++] = &sattrs[i];\n-      // attr list is sorted with most important (priority, id), thus we\n-      // may stop as soon as we have max_signs matches\n-      if (sattr_matches >= max_signs) {\n-        break;\n-      }\n-    }\n-  }\n-\n-  if (sattr_matches > idx) {\n-    return matches[sattr_matches - idx - 1];\n-  }\n+  const MTKey *s1 = (MTKey *)p1;\n+  const MTKey *s2 = (MTKey *)p2;\n+  int n = s1->pos.row - s2->pos.row;\n \n-  return NULL;\n+  return n ? n : (n = s2->decor_full->priority - s1->decor_full->priority)\n+           ? n : (n = (int)(s2->id - s1->id))\n+           ? n : (s2->decor_full->sign_add_id - s1->decor_full->sign_add_id);\n }\n \n-/// Return the attributes of all the signs placed on line 'lnum' in buffer\n-/// 'buf'. Used when refreshing the screen. Returns the number of signs.\n-/// @param buf Buffer in which to search\n-/// @param lnum Line in which to search\n-/// @param sattrs Output array for attrs\n-/// @return Number of signs of which attrs were found\n-int buf_get_signattrs(buf_T *buf, linenr_T lnum, SignTextAttrs sattrs[], HlPriId *num_id,\n-                      HlPriId *line_id, HlPriId *cul_id)\n-{\n-  sign_entry_T *sign;\n-\n-  int sattr_matches = 0;\n-\n-  FOR_ALL_SIGNS_IN_BUF(buf, sign) {\n-    if (sign->se_lnum > lnum) {\n-      // Signs are sorted by line number in the buffer. No need to check\n-      // for signs after the specified line number 'lnum'.\n-      break;\n-    }\n-\n-    if (sign->se_lnum < lnum) {\n-      continue;\n-    }\n-\n-    sign_T *sp = find_sign_by_typenr(sign->se_typenr);\n-    if (sp == NULL) {\n-      continue;\n-    }\n-\n-    if (sp->sn_text != NULL && sattr_matches < SIGN_SHOW_MAX) {\n-      sattrs[sattr_matches++] = (SignTextAttrs) {\n-        .text = sp->sn_text,\n-        .hl_id = sp->sn_text_hl,\n-        .priority = sign->se_priority\n-      };\n-    }\n-\n-    struct { HlPriId *dest; int hl; } cattrs[] = {\n-      { line_id, sp->sn_line_hl },\n-      { num_id,  sp->sn_num_hl  },\n-      { cul_id,  sp->sn_cul_hl  },\n-      { NULL, -1 },\n-    };\n-    for (int i = 0; cattrs[i].dest; i++) {\n-      if (cattrs[i].hl != 0 && sign->se_priority >= cattrs[i].dest->priority) {\n-        *cattrs[i].dest = (HlPriId) {\n-          .hl_id = cattrs[i].hl,\n-          .priority = sign->se_priority\n-        };\n-      }\n-    }\n-  }\n-  return sattr_matches;\n-}\n-\n-/// Delete sign 'id' in group 'group' from buffer 'buf'.\n-/// If 'id' is zero, then delete all the signs in group 'group'. Otherwise\n-/// delete only the specified sign.\n-/// If 'group' is '*', then delete the sign in all the groups. If 'group' is\n-/// NULL, then delete the sign in the global group. Otherwise delete the sign in\n-/// the specified group.\n+/// Delete the specified signs\n ///\n-/// @param buf  buffer sign is stored in\n-/// @param atlnum  sign at this line, 0 - at any line\n-/// @param id  sign id\n+/// @param buf  buffer sign is stored in or NULL for all buffers\n /// @param group  sign group\n-///\n-/// @return  the line number of the deleted sign. If multiple signs are deleted,\n-/// then returns the line number of the last sign deleted.\n-static linenr_T buf_delsign(buf_T *buf, linenr_T atlnum, int id, char *group)\n+/// @param id  sign id\n+/// @param atlnum  sign at this line, -1 at any line\n+static int buf_delete_signs(buf_T *buf, char *group, int id, linenr_T atlnum)\n {\n-  sign_entry_T **lastp;  // pointer to pointer to current sign\n-  sign_entry_T *sign;    // a sign in a b_signlist\n-  sign_entry_T *next;    // the next sign in a b_signlist\n-  linenr_T lnum;       // line number whose sign was deleted\n-\n-  lastp = &buf->b_signlist;\n-  lnum = 0;\n-  for (sign = buf->b_signlist; sign != NULL; sign = next) {\n-    next = sign->se_next;\n-    if ((id == 0 || sign->se_id == id)\n-        && (atlnum == 0 || sign->se_lnum == atlnum)\n-        && sign_in_group(sign, group)) {\n-      *lastp = next;\n-      if (next != NULL) {\n-        next->se_prev = sign->se_prev;\n-      }\n-      lnum = sign->se_lnum;\n-      buf_signcols_del_check(buf, lnum, lnum);\n-      if (sign->se_group != NULL) {\n-        sign_group_unref(sign->se_group->sg_name);\n-      }\n-      xfree(sign);\n-      redraw_buf_line_later(buf, lnum, false);\n-      // Check whether only one sign needs to be deleted\n-      // If deleting a sign with a specific identifier in a particular\n-      // group or deleting any sign at a particular line number, delete\n-      // only one sign.\n-      if (group == NULL\n-          || (*group != '*' && id != 0)\n-          || (*group == '*' && atlnum != 0)) {\n-        break;\n-      }\n-    } else {\n-      lastp = &sign->se_next;\n-    }\n-  }\n-\n-  // When deleting the last sign the cursor position may change, because the\n-  // sign columns no longer shows.  And the 'signcolumn' may be hidden.\n-  if (buf->b_signlist == NULL) {\n-    redraw_buf_later(buf, UPD_NOT_VALID);\n-    changed_line_abv_curs();\n+  int64_t ns = group_get_ns(group);\n+  if (ns < 0) {\n+    return FAIL;\n   }\n \n-  return lnum;\n-}\n-\n-/// Find the line number of the sign with the requested id in group 'group'. If\n-/// the sign does not exist, return 0 as the line number. This will still let\n-/// the correct file get loaded.\n-///\n-/// @param buf  buffer to store sign in\n-/// @param id  sign ID\n-/// @param group  sign group\n-static int buf_findsign(buf_T *buf, int id, char *group)\n-{\n-  sign_entry_T *sign;  // a sign in the signlist\n+  MarkTreeIter itr[1];\n+  int row = atlnum > 0 ? atlnum - 1 : 0;\n+  kvec_t(MTKey) signs = KV_INITIAL_VALUE;\n+  // Store and sort when removing a single sign at a specific line number.\n+  if (atlnum > 0) {\n+    if (!marktree_itr_get_overlap(buf->b_marktree, row, 0, itr)) {\n+      return FAIL;\n+    }\n \n-  FOR_ALL_SIGNS_IN_BUF(buf, sign) {\n-    if (sign->se_id == id && sign_in_group(sign, group)) {\n-      return (int)sign->se_lnum;\n+    MTPair pair;\n+    while (marktree_itr_step_overlap(buf->b_marktree, itr, &pair)) {\n+      if ((ns == UINT32_MAX || ns == pair.start.ns)\n+          && pair.start.decor_full && decor_has_sign(pair.start.decor_full)) {\n+        kv_push(signs, pair.start);\n+      }\n     }\n+  } else {\n+    marktree_itr_get(buf->b_marktree, 0, 0, itr);\n   }\n \n-  return 0;\n-}\n-\n-/// Return the sign at line 'lnum' in buffer 'buf'. Returns NULL if a sign is\n-/// not found at the line. If 'groupname' is NULL, searches in the global group.\n-///\n-/// @param buf  buffer whose sign we are searching for\n-/// @param lnum  line number of sign\n-/// @param groupname  sign group name\n-static sign_entry_T *buf_getsign_at_line(buf_T *buf, linenr_T lnum, char *groupname)\n-{\n-  sign_entry_T *sign;    // a sign in the signlist\n-\n-  FOR_ALL_SIGNS_IN_BUF(buf, sign) {\n-    if (sign->se_lnum > lnum) {\n-      // Signs are sorted by line number in the buffer. No need to check\n-      // for signs after the specified line number 'lnum'.\n+  while (itr->x) {\n+    MTKey mark = marktree_itr_current(itr);\n+    if (row && mark.pos.row > row) {\n       break;\n     }\n-\n-    if (sign->se_lnum == lnum && sign_in_group(sign, groupname)) {\n-      return sign;\n+    if (!mt_end(mark) && mark.decor_full && decor_has_sign(mark.decor_full)\n+        && (id == 0 || (int)mark.id == id)\n+        && (ns == UINT32_MAX || ns == mark.ns)) {\n+      if (atlnum > 0) {\n+        kv_push(signs, mark);\n+        marktree_itr_next(buf->b_marktree, itr);\n+      } else {\n+        extmark_del(buf, itr, mark, true);\n+      }\n+    } else {\n+      marktree_itr_next(buf->b_marktree, itr);\n     }\n   }\n \n-  return NULL;\n-}\n-\n-/// Return the identifier of the sign at line number 'lnum' in buffer 'buf'.\n-///\n-/// @param buf  buffer whose sign we are searching for\n-/// @param lnum  line number of sign\n-/// @param groupname  sign group name\n-static int buf_findsign_id(buf_T *buf, linenr_T lnum, char *groupname)\n-{\n-  sign_entry_T *sign;   // a sign in the signlist\n-\n-  sign = buf_getsign_at_line(buf, lnum, groupname);\n-  if (sign != NULL) {\n-    return sign->se_id;\n+  if (kv_size(signs)) {\n+    qsort((void *)&kv_A(signs, 0), kv_size(signs), sizeof(MTKey), sign_cmp);\n+    extmark_del_id(buf, kv_A(signs, 0).ns, kv_A(signs, 0).id);\n+    kv_destroy(signs);",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1398181029",
            "id": 1398181029,
            "line": 211,
            "node_id": "PRRC_kwDOAPphoM5TVoyl",
            "original_commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "original_line": 211,
            "original_position": 741,
            "original_start_line": 209,
            "path": "src/nvim/sign.c",
            "position": 741,
            "pull_request_review_id": 1738372475,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1398181029/reactions"
            },
            "side": "RIGHT",
            "start_line": 209,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-11-18T09:55:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1398181029",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1398186016"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1398186016"
                }
            },
            "author_association": "MEMBER",
            "body": "Yeah intentional. When `atlnum` is specified, only a single (sorted) sign is deleted. There is a comment some lines above:\r\n\r\n`  // Store and sort when removing a single sign at a specific line number.`\r\n\r\nI can add another here.\r\n",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-11-18T10:40:30Z",
            "diff_hunk": "@@ -77,736 +58,229 @@ static char *cmds[] = {\n #define SIGNCMD_LAST    6\n };\n \n-static hashtab_T sg_table;  // sign group (signgroup_T) hashtable\n-static int next_sign_id = 1;  // next sign id in the global group\n-\n-/// Initialize data needed for managing signs\n-void init_signs(void)\n-{\n-  hash_init(&sg_table);  // sign group hash table\n-}\n-\n-/// A new sign in group 'groupname' is added. If the group is not present,\n-/// create it. Otherwise reference the group.\n-static signgroup_T *sign_group_ref(const char *groupname)\n-{\n-  hash_T hash;\n-  hashitem_T *hi;\n-  signgroup_T *group;\n-\n-  hash = hash_hash(groupname);\n-  hi = hash_lookup(&sg_table, groupname, strlen(groupname), hash);\n-  if (HASHITEM_EMPTY(hi)) {\n-    // new group\n-    group = xmalloc(offsetof(signgroup_T, sg_name) + strlen(groupname) + 1);\n-\n-    STRCPY(group->sg_name, groupname);\n-    group->sg_refcount = 1;\n-    group->sg_next_sign_id = 1;\n-    hash_add_item(&sg_table, hi, group->sg_name, hash);\n-  } else {\n-    // existing group\n-    group = HI2SG(hi);\n-    group->sg_refcount++;\n-  }\n-\n-  return group;\n-}\n-\n-/// A sign in group 'groupname' is removed. If all the signs in this group are\n-/// removed, then remove the group.\n-static void sign_group_unref(char *groupname)\n+// Convert the supplied \"group\" to a namespace filter\n+static int64_t group_get_ns(const char *group)\n {\n-  hashitem_T *hi = hash_find(&sg_table, groupname);\n-  if (HASHITEM_EMPTY(hi)) {\n-    return;\n-  }\n-\n-  signgroup_T *group = HI2SG(hi);\n-  group->sg_refcount--;\n-  if (group->sg_refcount == 0) {\n-    // All the signs in this group are removed\n-    hash_remove(&sg_table, hi);\n-    xfree(group);\n+  if (group == NULL) {\n+    return 0;           // Global namespace\n+  } else if (strcmp(group, \"*\") == 0) {\n+    return UINT32_MAX;  // All namespaces\n   }\n+  // Specific or non-existing namespace\n+  int ns = map_get(String, int)(&namespace_ids, cstr_as_string((char *)group));\n+  return ns ? ns : -1;\n }\n \n-/// @return true if 'sign' is in 'group'.\n-/// A sign can either be in the global group (sign->group == NULL)\n-/// or in a named group. If 'group' is '*', then the sign is part of the group.\n-static bool sign_in_group(sign_entry_T *sign, const char *group)\n+static const char *sign_get_name(MTKey mark)\n {\n-  return ((group != NULL && strcmp(group, \"*\") == 0)\n-          || (group == NULL && sign->se_group == NULL)\n-          || (group != NULL && sign->se_group != NULL\n-              && strcmp(group, sign->se_group->sg_name) == 0));\n+  char *name = mark.decor_full->sign_name;\n+  return !name ? \"\" : map_has(cstr_t, &sign_map, name) ? name : \"[Deleted]\";\n }\n \n-/// Get the next free sign identifier in the specified group\n-static int sign_group_get_next_signid(buf_T *buf, const char *groupname)\n-{\n-  int id = 1;\n-  signgroup_T *group = NULL;\n-  sign_entry_T *sign;\n-  int found = false;\n-\n-  if (groupname != NULL) {\n-    hashitem_T *hi = hash_find(&sg_table, groupname);\n-    if (HASHITEM_EMPTY(hi)) {\n-      return id;\n-    }\n-    group = HI2SG(hi);\n-  }\n-\n-  // Search for the next usable sign identifier\n-  while (!found) {\n-    if (group == NULL) {\n-      id = next_sign_id++;    // global group\n-    } else {\n-      id = group->sg_next_sign_id++;\n-    }\n-\n-    // Check whether this sign is already placed in the buffer\n-    found = true;\n-    FOR_ALL_SIGNS_IN_BUF(buf, sign) {\n-      if (id == sign->se_id && sign_in_group(sign, groupname)) {\n-        found = false;    // sign identifier is in use\n-        break;\n-      }\n-    }\n-  }\n-\n-  return id;\n-}\n-\n-/// Insert a new sign into the signlist for buffer 'buf' between the 'prev' and\n-/// 'next' signs.\n+/// Create or update a sign extmark.\n ///\n /// @param buf  buffer to store sign in\n-/// @param prev  previous sign entry\n-/// @param next  next sign entry\n /// @param id  sign ID\n-/// @param group  sign group; NULL for global group\n+/// @param group  sign group\n /// @param prio  sign priority\n /// @param lnum  line number which gets the mark\n-/// @param typenr  typenr of sign we are adding\n-/// @param has_text_or_icon  sign has text or icon\n-static void insert_sign(buf_T *buf, sign_entry_T *prev, sign_entry_T *next, int id,\n-                        const char *group, int prio, linenr_T lnum, int typenr,\n-                        bool has_text_or_icon)\n+/// @param sp  sign properties\n+static void buf_set_sign(buf_T *buf, uint32_t *id, char *group, int prio, linenr_T lnum, sign_T *sp)\n {\n-  sign_entry_T *newsign = xmalloc(sizeof(sign_entry_T));\n-  newsign->se_id = id;\n-  newsign->se_lnum = lnum;\n-  newsign->se_typenr = typenr;\n-  newsign->se_has_text_or_icon = has_text_or_icon;\n-  if (group != NULL) {\n-    newsign->se_group = sign_group_ref(group);\n-  } else {\n-    newsign->se_group = NULL;\n+  if (group && !map_get(String, int)(&namespace_ids, cstr_as_string(group))) {\n+    kv_push(sign_ns, nvim_create_namespace(cstr_as_string(group)));\n   }\n-  newsign->se_priority = prio;\n-  newsign->se_next = next;\n-  newsign->se_prev = prev;\n-  if (next != NULL) {\n-    next->se_prev = newsign;\n-  }\n-\n-  buf_signcols_add_check(buf, newsign);\n-\n-  if (prev == NULL) {\n-    // When adding first sign need to redraw the windows to create the\n-    // column for signs.\n-    if (buf->b_signlist == NULL) {\n-      redraw_buf_later(buf, UPD_NOT_VALID);\n-      changed_line_abv_curs();\n-    }\n \n-    // first sign in signlist\n-    buf->b_signlist = newsign;\n-  } else {\n-    prev->se_next = newsign;\n-  }\n+  uint32_t ns = group ? (uint32_t)nvim_create_namespace(cstr_as_string(group)) : 0;\n+  Decoration decor = DECORATION_INIT;\n+  decor.sign_text = sp->sn_text ? xstrdup(sp->sn_text) : NULL;\n+  decor.sign_name = xstrdup(sp->sn_name);\n+  decor.sign_hl_id = sp->sn_text_hl;\n+  decor.line_hl_id = sp->sn_line_hl;\n+  decor.number_hl_id = sp->sn_num_hl;\n+  decor.cursorline_hl_id = sp->sn_cul_hl;\n+  decor.priority = (DecorPriority)prio;\n+  extmark_set(buf, ns, id, lnum - 1, 0, -1, -1, &decor, true, false, true, true, NULL);\n }\n \n-/// Insert a new sign sorted by line number and sign priority.\n+/// For an existing, placed sign with \"id\", modify the sign, group or priority.\n+/// Returns the line number of the sign, or zero if the sign is not found.\n ///\n /// @param buf  buffer to store sign in\n-/// @param prev  previous sign entry\n /// @param id  sign ID\n-/// @param group  sign group; NULL for global group\n+/// @param group  sign group\n /// @param prio  sign priority\n-/// @param lnum  line number which gets the mark\n-/// @param typenr  typenr of sign we are adding\n-/// @param has_text_or_icon  sign has text or icon\n-static void insert_sign_by_lnum_prio(buf_T *buf, sign_entry_T *prev, int id, const char *group,\n-                                     int prio, linenr_T lnum, int typenr, bool has_text_or_icon)\n-{\n-  sign_entry_T *sign;\n-\n-  // keep signs sorted by lnum, priority and id: insert new sign at\n-  // the proper position in the list for this lnum.\n-  while (prev != NULL && prev->se_lnum == lnum\n-         && (prev->se_priority < prio\n-             || (prev->se_priority == prio && prev->se_id <= id))) {\n-    prev = prev->se_prev;\n-  }\n-  if (prev == NULL) {\n-    sign = buf->b_signlist;\n-  } else {\n-    sign = prev->se_next;\n-  }\n-\n-  insert_sign(buf, prev, sign, id, group, prio, lnum, typenr, has_text_or_icon);\n-}\n-\n-/// Lookup a sign by typenr. Returns NULL if sign is not found.\n-static sign_T *find_sign_by_typenr(int typenr)\n-{\n-  sign_T *sp;\n-\n-  for (sp = first_sign; sp != NULL; sp = sp->sn_next) {\n-    if (sp->sn_typenr == typenr) {\n-      return sp;\n-    }\n-  }\n-  return NULL;\n-}\n-\n-/// Get the name of a sign by its typenr.\n-static char *sign_typenr2name(int typenr)\n-{\n-  sign_T *sp;\n-\n-  for (sp = first_sign; sp != NULL; sp = sp->sn_next) {\n-    if (sp->sn_typenr == typenr) {\n-      return sp->sn_name;\n-    }\n-  }\n-  return _(\"[Deleted]\");\n-}\n-\n-/// Return information about a sign in a Dict\n-static dict_T *sign_get_info(sign_entry_T *sign)\n-{\n-  dict_T *d = tv_dict_alloc();\n-  tv_dict_add_nr(d,  S_LEN(\"id\"), sign->se_id);\n-  tv_dict_add_str(d, S_LEN(\"group\"), ((sign->se_group == NULL)\n-                                      ? \"\"\n-                                      : sign->se_group->sg_name));\n-  tv_dict_add_nr(d,  S_LEN(\"lnum\"), sign->se_lnum);\n-  tv_dict_add_str(d, S_LEN(\"name\"), sign_typenr2name(sign->se_typenr));\n-  tv_dict_add_nr(d,  S_LEN(\"priority\"), sign->se_priority);\n-\n-  return d;\n-}\n-\n-// Sort the signs placed on the same line as \"sign\" by priority.  Invoked after\n-// changing the priority of an already placed sign.  Assumes the signs in the\n-// buffer are sorted by line number and priority.\n-static void sign_sort_by_prio_on_line(buf_T *buf, sign_entry_T *sign)\n-  FUNC_ATTR_NONNULL_ALL\n+/// @param sp  sign pointer\n+static linenr_T buf_mod_sign(buf_T *buf, uint32_t *id, char *group, int prio, sign_T *sp)\n {\n-  // If there is only one sign in the buffer or only one sign on the line or\n-  // the sign is already sorted by priority, then return.\n-  if ((sign->se_prev == NULL\n-       || sign->se_prev->se_lnum != sign->se_lnum\n-       || sign->se_prev->se_priority > sign->se_priority)\n-      && (sign->se_next == NULL\n-          || sign->se_next->se_lnum != sign->se_lnum\n-          || sign->se_next->se_priority < sign->se_priority)) {\n-    return;\n-  }\n-\n-  // One or more signs on the same line as 'sign'\n-  // Find a sign after which 'sign' should be inserted\n-\n-  // First search backward for a sign with higher priority on the same line\n-  sign_entry_T *p = sign;\n-  while (p->se_prev != NULL\n-         && p->se_prev->se_lnum == sign->se_lnum\n-         && p->se_prev->se_priority <= sign->se_priority) {\n-    p = p->se_prev;\n-  }\n-  if (p == sign) {\n-    // Sign not found. Search forward for a sign with priority just before\n-    // 'sign'.\n-    p = sign->se_next;\n-    while (p->se_next != NULL\n-           && p->se_next->se_lnum == sign->se_lnum\n-           && p->se_next->se_priority > sign->se_priority) {\n-      p = p->se_next;\n-    }\n-  }\n-\n-  // Remove 'sign' from the list\n-  if (buf->b_signlist == sign) {\n-    buf->b_signlist = sign->se_next;\n-  }\n-  if (sign->se_prev != NULL) {\n-    sign->se_prev->se_next = sign->se_next;\n-  }\n-  if (sign->se_next != NULL) {\n-    sign->se_next->se_prev = sign->se_prev;\n+  int64_t ns = group_get_ns(group);\n+  if (ns < 0 || (group && ns == 0)) {\n+    return 0;\n   }\n-  sign->se_prev = NULL;\n-  sign->se_next = NULL;\n \n-  // Re-insert 'sign' at the right place\n-  if (p->se_priority <= sign->se_priority) {\n-    // 'sign' has a higher priority and should be inserted before 'p'\n-    sign->se_prev = p->se_prev;\n-    sign->se_next = p;\n-    p->se_prev = sign;\n-    if (sign->se_prev != NULL) {\n-      sign->se_prev->se_next = sign;\n-    }\n-    if (buf->b_signlist == p) {\n-      buf->b_signlist = sign;\n-    }\n-  } else {\n-    // 'sign' has a lower priority and should be inserted after 'p'\n-    sign->se_prev = p;\n-    sign->se_next = p->se_next;\n-    p->se_next = sign;\n-    if (sign->se_next != NULL) {\n-      sign->se_next->se_prev = sign;\n-    }\n+  MTKey mark = marktree_lookup_ns(buf->b_marktree, (uint32_t)ns, *id, false, NULL);\n+  if (mark.pos.row >= 0) {\n+    buf_set_sign(buf, id, group, prio, mark.pos.row + 1, sp);\n   }\n+  return mark.pos.row + 1;\n }\n \n-/// Add the sign into the signlist. Find the right spot to do it though.\n+/// Find the line number of the sign with the requested id in group 'group'. If\n+/// the sign does not exist, return 0 as the line number. This will still let\n+/// the correct file get loaded.\n ///\n /// @param buf  buffer to store sign in\n /// @param id  sign ID\n-/// @param groupname  sign group\n-/// @param prio  sign priority\n-/// @param lnum  line number which gets the mark\n-/// @param typenr  typenr of sign we are adding\n-/// @param has_text_or_icon  sign has text or icon\n-static void buf_addsign(buf_T *buf, int id, const char *groupname, int prio, linenr_T lnum,\n-                        int typenr, bool has_text_or_icon)\n-{\n-  sign_entry_T *sign;    // a sign in the signlist\n-  sign_entry_T *prev;    // the previous sign\n-\n-  prev = NULL;\n-  FOR_ALL_SIGNS_IN_BUF(buf, sign) {\n-    if (lnum == sign->se_lnum && id == sign->se_id\n-        && sign_in_group(sign, groupname)) {\n-      // Update an existing sign\n-      sign->se_typenr = typenr;\n-      sign->se_priority = prio;\n-      sign_sort_by_prio_on_line(buf, sign);\n-      return;\n-    } else if (lnum < sign->se_lnum) {\n-      insert_sign_by_lnum_prio(buf,\n-                               prev,\n-                               id,\n-                               groupname,\n-                               prio,\n-                               lnum,\n-                               typenr,\n-                               has_text_or_icon);\n-      return;\n-    }\n-    prev = sign;\n-  }\n-\n-  insert_sign_by_lnum_prio(buf,\n-                           prev,\n-                           id,\n-                           groupname,\n-                           prio,\n-                           lnum,\n-                           typenr,\n-                           has_text_or_icon);\n-}\n-\n-/// For an existing, placed sign \"markId\" change the type to \"typenr\".\n-/// Returns the line number of the sign, or zero if the sign is not found.\n-///\n-/// @param buf  buffer to store sign in\n-/// @param markId  sign ID\n /// @param group  sign group\n-/// @param typenr  typenr of sign we are adding\n-/// @param prio  sign priority\n-static linenr_T buf_change_sign_type(buf_T *buf, int markId, const char *group, int typenr,\n-                                     int prio)\n+static int buf_findsign(buf_T *buf, int id, char *group)\n {\n-  sign_entry_T *sign;  // a sign in the signlist\n-\n-  FOR_ALL_SIGNS_IN_BUF(buf, sign) {\n-    if (sign->se_id == markId && sign_in_group(sign, group)) {\n-      sign->se_typenr = typenr;\n-      sign->se_priority = prio;\n-      sign_sort_by_prio_on_line(buf, sign);\n-      return sign->se_lnum;\n-    }\n+  int64_t ns = group_get_ns(group);\n+  if (ns < 0 || (group && ns == 0)) {\n+    return 0;\n   }\n-\n-  return 0;\n+  return marktree_lookup_ns(buf->b_marktree, (uint32_t)ns, (uint32_t)id, false, NULL).pos.row + 1;\n }\n \n-/// Return the sign attrs which has the attribute specified by 'type'. Returns\n-/// NULL if a sign is not found with the specified attribute.\n-/// @param type Type of sign to look for\n-/// @param sattrs Sign attrs to search through\n-/// @param idx if there multiple signs, this index will pick the n-th\n-///        out of the most `max_signs` sorted ascending by Id.\n-/// @param max_signs the number of signs, with priority for the ones\n-///        with the highest Ids.\n-/// @return Attrs of the matching sign, or NULL\n-SignTextAttrs *sign_get_attr(int idx, SignTextAttrs sattrs[], int max_signs)\n+/// qsort() function to sort signs by line number, priority, id and recency.\n+int sign_cmp(const void *p1, const void *p2)\n {\n-  SignTextAttrs *matches[SIGN_SHOW_MAX];\n-  int sattr_matches = 0;\n-\n-  for (int i = 0; i < SIGN_SHOW_MAX; i++) {\n-    if (sattrs[i].text != NULL) {\n-      matches[sattr_matches++] = &sattrs[i];\n-      // attr list is sorted with most important (priority, id), thus we\n-      // may stop as soon as we have max_signs matches\n-      if (sattr_matches >= max_signs) {\n-        break;\n-      }\n-    }\n-  }\n-\n-  if (sattr_matches > idx) {\n-    return matches[sattr_matches - idx - 1];\n-  }\n+  const MTKey *s1 = (MTKey *)p1;\n+  const MTKey *s2 = (MTKey *)p2;\n+  int n = s1->pos.row - s2->pos.row;\n \n-  return NULL;\n+  return n ? n : (n = s2->decor_full->priority - s1->decor_full->priority)\n+           ? n : (n = (int)(s2->id - s1->id))\n+           ? n : (s2->decor_full->sign_add_id - s1->decor_full->sign_add_id);\n }\n \n-/// Return the attributes of all the signs placed on line 'lnum' in buffer\n-/// 'buf'. Used when refreshing the screen. Returns the number of signs.\n-/// @param buf Buffer in which to search\n-/// @param lnum Line in which to search\n-/// @param sattrs Output array for attrs\n-/// @return Number of signs of which attrs were found\n-int buf_get_signattrs(buf_T *buf, linenr_T lnum, SignTextAttrs sattrs[], HlPriId *num_id,\n-                      HlPriId *line_id, HlPriId *cul_id)\n-{\n-  sign_entry_T *sign;\n-\n-  int sattr_matches = 0;\n-\n-  FOR_ALL_SIGNS_IN_BUF(buf, sign) {\n-    if (sign->se_lnum > lnum) {\n-      // Signs are sorted by line number in the buffer. No need to check\n-      // for signs after the specified line number 'lnum'.\n-      break;\n-    }\n-\n-    if (sign->se_lnum < lnum) {\n-      continue;\n-    }\n-\n-    sign_T *sp = find_sign_by_typenr(sign->se_typenr);\n-    if (sp == NULL) {\n-      continue;\n-    }\n-\n-    if (sp->sn_text != NULL && sattr_matches < SIGN_SHOW_MAX) {\n-      sattrs[sattr_matches++] = (SignTextAttrs) {\n-        .text = sp->sn_text,\n-        .hl_id = sp->sn_text_hl,\n-        .priority = sign->se_priority\n-      };\n-    }\n-\n-    struct { HlPriId *dest; int hl; } cattrs[] = {\n-      { line_id, sp->sn_line_hl },\n-      { num_id,  sp->sn_num_hl  },\n-      { cul_id,  sp->sn_cul_hl  },\n-      { NULL, -1 },\n-    };\n-    for (int i = 0; cattrs[i].dest; i++) {\n-      if (cattrs[i].hl != 0 && sign->se_priority >= cattrs[i].dest->priority) {\n-        *cattrs[i].dest = (HlPriId) {\n-          .hl_id = cattrs[i].hl,\n-          .priority = sign->se_priority\n-        };\n-      }\n-    }\n-  }\n-  return sattr_matches;\n-}\n-\n-/// Delete sign 'id' in group 'group' from buffer 'buf'.\n-/// If 'id' is zero, then delete all the signs in group 'group'. Otherwise\n-/// delete only the specified sign.\n-/// If 'group' is '*', then delete the sign in all the groups. If 'group' is\n-/// NULL, then delete the sign in the global group. Otherwise delete the sign in\n-/// the specified group.\n+/// Delete the specified signs\n ///\n-/// @param buf  buffer sign is stored in\n-/// @param atlnum  sign at this line, 0 - at any line\n-/// @param id  sign id\n+/// @param buf  buffer sign is stored in or NULL for all buffers\n /// @param group  sign group\n-///\n-/// @return  the line number of the deleted sign. If multiple signs are deleted,\n-/// then returns the line number of the last sign deleted.\n-static linenr_T buf_delsign(buf_T *buf, linenr_T atlnum, int id, char *group)\n+/// @param id  sign id\n+/// @param atlnum  sign at this line, -1 at any line\n+static int buf_delete_signs(buf_T *buf, char *group, int id, linenr_T atlnum)\n {\n-  sign_entry_T **lastp;  // pointer to pointer to current sign\n-  sign_entry_T *sign;    // a sign in a b_signlist\n-  sign_entry_T *next;    // the next sign in a b_signlist\n-  linenr_T lnum;       // line number whose sign was deleted\n-\n-  lastp = &buf->b_signlist;\n-  lnum = 0;\n-  for (sign = buf->b_signlist; sign != NULL; sign = next) {\n-    next = sign->se_next;\n-    if ((id == 0 || sign->se_id == id)\n-        && (atlnum == 0 || sign->se_lnum == atlnum)\n-        && sign_in_group(sign, group)) {\n-      *lastp = next;\n-      if (next != NULL) {\n-        next->se_prev = sign->se_prev;\n-      }\n-      lnum = sign->se_lnum;\n-      buf_signcols_del_check(buf, lnum, lnum);\n-      if (sign->se_group != NULL) {\n-        sign_group_unref(sign->se_group->sg_name);\n-      }\n-      xfree(sign);\n-      redraw_buf_line_later(buf, lnum, false);\n-      // Check whether only one sign needs to be deleted\n-      // If deleting a sign with a specific identifier in a particular\n-      // group or deleting any sign at a particular line number, delete\n-      // only one sign.\n-      if (group == NULL\n-          || (*group != '*' && id != 0)\n-          || (*group == '*' && atlnum != 0)) {\n-        break;\n-      }\n-    } else {\n-      lastp = &sign->se_next;\n-    }\n-  }\n-\n-  // When deleting the last sign the cursor position may change, because the\n-  // sign columns no longer shows.  And the 'signcolumn' may be hidden.\n-  if (buf->b_signlist == NULL) {\n-    redraw_buf_later(buf, UPD_NOT_VALID);\n-    changed_line_abv_curs();\n+  int64_t ns = group_get_ns(group);\n+  if (ns < 0) {\n+    return FAIL;\n   }\n \n-  return lnum;\n-}\n-\n-/// Find the line number of the sign with the requested id in group 'group'. If\n-/// the sign does not exist, return 0 as the line number. This will still let\n-/// the correct file get loaded.\n-///\n-/// @param buf  buffer to store sign in\n-/// @param id  sign ID\n-/// @param group  sign group\n-static int buf_findsign(buf_T *buf, int id, char *group)\n-{\n-  sign_entry_T *sign;  // a sign in the signlist\n+  MarkTreeIter itr[1];\n+  int row = atlnum > 0 ? atlnum - 1 : 0;\n+  kvec_t(MTKey) signs = KV_INITIAL_VALUE;\n+  // Store and sort when removing a single sign at a specific line number.\n+  if (atlnum > 0) {\n+    if (!marktree_itr_get_overlap(buf->b_marktree, row, 0, itr)) {\n+      return FAIL;\n+    }\n \n-  FOR_ALL_SIGNS_IN_BUF(buf, sign) {\n-    if (sign->se_id == id && sign_in_group(sign, group)) {\n-      return (int)sign->se_lnum;\n+    MTPair pair;\n+    while (marktree_itr_step_overlap(buf->b_marktree, itr, &pair)) {\n+      if ((ns == UINT32_MAX || ns == pair.start.ns)\n+          && pair.start.decor_full && decor_has_sign(pair.start.decor_full)) {\n+        kv_push(signs, pair.start);\n+      }\n     }\n+  } else {\n+    marktree_itr_get(buf->b_marktree, 0, 0, itr);\n   }\n \n-  return 0;\n-}\n-\n-/// Return the sign at line 'lnum' in buffer 'buf'. Returns NULL if a sign is\n-/// not found at the line. If 'groupname' is NULL, searches in the global group.\n-///\n-/// @param buf  buffer whose sign we are searching for\n-/// @param lnum  line number of sign\n-/// @param groupname  sign group name\n-static sign_entry_T *buf_getsign_at_line(buf_T *buf, linenr_T lnum, char *groupname)\n-{\n-  sign_entry_T *sign;    // a sign in the signlist\n-\n-  FOR_ALL_SIGNS_IN_BUF(buf, sign) {\n-    if (sign->se_lnum > lnum) {\n-      // Signs are sorted by line number in the buffer. No need to check\n-      // for signs after the specified line number 'lnum'.\n+  while (itr->x) {\n+    MTKey mark = marktree_itr_current(itr);\n+    if (row && mark.pos.row > row) {\n       break;\n     }\n-\n-    if (sign->se_lnum == lnum && sign_in_group(sign, groupname)) {\n-      return sign;\n+    if (!mt_end(mark) && mark.decor_full && decor_has_sign(mark.decor_full)\n+        && (id == 0 || (int)mark.id == id)\n+        && (ns == UINT32_MAX || ns == mark.ns)) {\n+      if (atlnum > 0) {\n+        kv_push(signs, mark);\n+        marktree_itr_next(buf->b_marktree, itr);\n+      } else {\n+        extmark_del(buf, itr, mark, true);\n+      }\n+    } else {\n+      marktree_itr_next(buf->b_marktree, itr);\n     }\n   }\n \n-  return NULL;\n-}\n-\n-/// Return the identifier of the sign at line number 'lnum' in buffer 'buf'.\n-///\n-/// @param buf  buffer whose sign we are searching for\n-/// @param lnum  line number of sign\n-/// @param groupname  sign group name\n-static int buf_findsign_id(buf_T *buf, linenr_T lnum, char *groupname)\n-{\n-  sign_entry_T *sign;   // a sign in the signlist\n-\n-  sign = buf_getsign_at_line(buf, lnum, groupname);\n-  if (sign != NULL) {\n-    return sign->se_id;\n+  if (kv_size(signs)) {\n+    qsort((void *)&kv_A(signs, 0), kv_size(signs), sizeof(MTKey), sign_cmp);\n+    extmark_del_id(buf, kv_A(signs, 0).ns, kv_A(signs, 0).id);\n+    kv_destroy(signs);",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1398186016",
            "id": 1398186016,
            "in_reply_to_id": 1398181029,
            "line": 211,
            "node_id": "PRRC_kwDOAPphoM5TVqAg",
            "original_commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "original_line": 211,
            "original_position": 741,
            "original_start_line": 209,
            "path": "src/nvim/sign.c",
            "position": 741,
            "pull_request_review_id": 1738377424,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1398186016/reactions"
            },
            "side": "RIGHT",
            "start_line": 209,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-11-18T10:40:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1398186016",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25724#discussion_r1398186104"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25724"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1398186104"
                }
            },
            "author_association": "MEMBER",
            "body": "Yeah adding to `ExtmarkInfo` implies adding it to to the `nvim_buf_get_exmarks()` info array, which is what I meant.",
            "commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "created_at": "2023-11-18T10:41:16Z",
            "diff_hunk": "@@ -60,7 +60,9 @@ struct Decoration {\n   int col;  // fixed col value, like win_col\n   int virt_text_width;  // width of virt_text\n   char *sign_text;\n+  char *sign_name;",
            "html_url": "https://github.com/neovim/neovim/pull/25724#discussion_r1398186104",
            "id": 1398186104,
            "in_reply_to_id": 1397691383,
            "line": 63,
            "node_id": "PRRC_kwDOAPphoM5TVqB4",
            "original_commit_id": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
            "original_line": 63,
            "original_position": 4,
            "original_start_line": null,
            "path": "src/nvim/decoration.h",
            "position": 4,
            "pull_request_review_id": 1738377519,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1398186104/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-18T11:36:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1398186104",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "Good work. This looks awesome!",
            "created_at": "2023-10-20T19:40:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/25724#issuecomment-1773303073",
            "id": 1773303073,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25724",
            "node_id": "IC_kwDOAPphoM5psnUh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 2,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1773303073/reactions"
            },
            "updated_at": "2023-10-20T19:40:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1773303073",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I believe all issues related to sign ordering are now resolved. The few display tests of which I changed the expected result were modified to match the extmark sign order to legacy sign order when it is not determined by `priority` but by `sign id` (as discussed and suggested by @bfredl on matrix).\r\n\r\nThe remaining failing tests require a solution for extmark signs to match legacy behavior where deleted lines have their associated signs removed from the buffer.",
            "created_at": "2023-10-23T03:33:47Z",
            "html_url": "https://github.com/neovim/neovim/pull/25724#issuecomment-1774377618",
            "id": 1774377618,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25724",
            "node_id": "IC_kwDOAPphoM5pwtqS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1774377618/reactions"
            },
            "updated_at": "2023-10-23T03:33:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1774377618",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Extmark signs will currently show up in `sign place group=*` and signs placed through the legacy commands will show up in `nvim_buf_get_extmarks()`. IMO it's not really a problem, more so a useful (unintended) consequence of this refactor. If anyone disagrees let me know and we can keep them segregated.",
            "created_at": "2023-10-23T03:44:40Z",
            "html_url": "https://github.com/neovim/neovim/pull/25724#issuecomment-1774384429",
            "id": 1774384429,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25724",
            "node_id": "IC_kwDOAPphoM5pwvUt",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1774384429/reactions"
            },
            "updated_at": "2023-10-23T03:44:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1774384429",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Add a new (public?) extmark property to have the mark removed when the line it is placed on is deleted to match the legacy sign behavior. Should fix the last remaining failing tests?\r\n\r\nI'm kind of stuck on this. First of all, do we want to keep sign deletion conditional on the value of [`'signcolumn'`](https://github.com/neovim/neovim/blob/94127cb5df0a513e66777d18a2c7fa6219404280/runtime/doc/options.txt#L5620-L5624)?\r\n\r\nDo we want it to be a publicly configurable property for all extmarks? Or can it simply be done implicitly for marks containing sign properties? And would looping over all marks in the deleted range and simply deleting when the flag is set/is a sign be fine? I think if done properly it would be handled somewhere in `marktree_splice()` but I'm not sure I would manage that.\r\n\r\nCan this note about undoing sign deletion be removed, or does this need to be maintained along with the behavior somehow? Signs (being extmarks) now move back upon undo'ing.\r\nhttps://github.com/neovim/neovim/blob/94127cb5df0a513e66777d18a2c7fa6219404280/runtime/doc/sign.txt#L80-L82",
            "created_at": "2023-10-23T17:45:12Z",
            "html_url": "https://github.com/neovim/neovim/pull/25724#issuecomment-1775705749",
            "id": 1775705749,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25724",
            "node_id": "IC_kwDOAPphoM5p1x6V",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1775705749/reactions"
            },
            "updated_at": "2023-10-23T17:58:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1775705749",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> First of all, do we want to keep sign deletion conditional on the value of 'signcolumn'?\n\nNo. I wasn't even aware it was conditional on the sign column until recently.\n\n> Do we want it to be a publicly configurable property for all extmarks?\n\nIdeally all marks. But if it makes it easier, you can add the logic internally and defer adding this to the public extmark API. I was thinking this could be added as `lifetime = 'buffer' | 'redraw'` and deprecate `ephemeral`.\n\n> And would looping over all marks in the deleted range and simply deleting when the flag is set/is a sign be fine? I think if done properly it would be handled somewhere in marktree_splice() but I'm not sure I would manage that.\n\nYes I believe so. Can't you just mimic the code for what we do for signs?\n\n> Can this note about undoing sign deletion be removed, or does this need to be maintained along with the behavior somehow? Signs (being extmarks) now move back upon undo'ing.\n\nIsn't that note superseded by the fact that signs are deleted when lines are removed?",
            "created_at": "2023-10-23T19:00:09Z",
            "html_url": "https://github.com/neovim/neovim/pull/25724#issuecomment-1775840754",
            "id": 1775840754,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25724",
            "node_id": "IC_kwDOAPphoM5p2S3y",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1775840754/reactions"
            },
            "updated_at": "2023-10-23T19:03:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1775840754",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Ideally all marks. But if it makes it easier, you can add the logic internally and defer adding this to the public extmark API. I was thinking this could be added as `lifetime = 'buffer' | 'redraw'` and deprecate `ephemeral`.\r\n\r\nAlright, I think I'll defer it for now then. Just need to keep in mind that whatever code I add now might become redundant whenever it is handled properly for all marks.\r\n\r\n> > And would looping over all marks in the deleted range and simply deleting when the flag is set/is a sign be fine? I think if done properly it would be handled somewhere in marktree_splice() but I'm not sure I would manage that.\r\n> \r\n> Yes I believe so. Can't you just mimic the code for what we do for signs?\r\n\r\nYeah this is no problem, and is what I had already implemented locally. I just believe its not idiomatic with the rest of the extmark adjusting code.\r\n\r\n> > Can this note about undoing sign deletion be removed, or does this need to be maintained along with the behavior somehow? Signs (being extmarks) now move back upon undo'ing.\r\n> \r\n> Isn't that note superseded by the fact that signs are deleted when lines are removed?\r\n\r\nCorrect. If we get rid of the conditional removal of signs and instead always remove them, this note is redundant all together.",
            "created_at": "2023-10-23T20:06:32Z",
            "html_url": "https://github.com/neovim/neovim/pull/25724#issuecomment-1775938231",
            "id": 1775938231,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25724",
            "node_id": "IC_kwDOAPphoM5p2qq3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1775938231/reactions"
            },
            "updated_at": "2023-10-23T20:06:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1775938231",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > > And would looping over all marks in the deleted range and simply deleting when the flag is set/is a sign be fine? I think if done properly it would be handled somewhere in marktree_splice() but I'm not sure I would manage that.\r\n> > \r\n> > \r\n> > Yes I believe so. Can't you just mimic the code for what we do for signs?\r\n> \r\n> Yeah this is no problem, and is what I had already implemented locally. I just believe its not idiomatic with the rest of the extmark adjusting code.\r\n\r\nHmm it does result in problems when joining lines. In `do_join()`, [`del_lines()`](https://github.com/neovim/neovim/blob/94127cb5df0a513e66777d18a2c7fa6219404280/src/nvim/ops.c#L4172C7-L4172C7) is called after extmarks have already been adjusted by [`extmark_splice()`](https://github.com/neovim/neovim/blob/94127cb5df0a513e66777d18a2c7fa6219404280/src/nvim/ops.c#L4172C7-L4172C7). This results in marks being deleted in lines succeeding the joined lines with my current implementation.\r\n\r\nI get the feeling deleting flagged marks should be handled while iterating in the splice routine. But TBH I haven't wrapped my head around what really happens in `extmark_splice()`. So IDK if I can manage that, or if my intuition is even correct.",
            "created_at": "2023-10-23T22:03:11Z",
            "html_url": "https://github.com/neovim/neovim/pull/25724#issuecomment-1776092794",
            "id": 1776092794,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25724",
            "node_id": "IC_kwDOAPphoM5p3QZ6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1776092794/reactions"
            },
            "updated_at": "2023-10-24T11:46:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1776092794",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "OK found something that appears to work properly, also for joining lines. I guess I can take a stab at making a separate PR for the API change. @lewis6991 I didn't quite get how you wanted `lifetime` to work, `buffer|redraw` seem to me to be the current default mark lifetime and the lifetime for `ephemeral` marks. Were you suggesting we add those in addition to a third `lifetime` e.g. `line`, or am I missing something? Does https://github.com/neovim/neovim/pull/25767 look alright?",
            "created_at": "2023-10-24T01:54:43Z",
            "html_url": "https://github.com/neovim/neovim/pull/25724#issuecomment-1776361236",
            "id": 1776361236,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25724",
            "node_id": "IC_kwDOAPphoM5p4R8U",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1776361236/reactions"
            },
            "updated_at": "2023-10-24T13:13:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1776361236",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I have included the invalidation flags from #25767 here (and made it to work with undo), and set them implicitly for sign extmarks. Marks that were placed on deleted lines are not drawn, and are restored when the deletion is undone.\r\n\r\nIf that behavior is desireable as an API flag I'd be glad to revive #25767 but after the discussion there I'm not so sure anymore.",
            "created_at": "2023-10-31T15:12:38Z",
            "html_url": "https://github.com/neovim/neovim/pull/25724#issuecomment-1787421478",
            "id": 1787421478,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25724",
            "node_id": "IC_kwDOAPphoM5qieMm",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1787421478/reactions"
            },
            "updated_at": "2023-10-31T15:12:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1787421478",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "There might be room for some more cleanup, and this will surely conflict with #25826 (IDK if that will merge before this). However, I don't think the general shape of this PR will change anymore so accepting reviews (no pressure, I know it's a big refactor).",
            "created_at": "2023-10-31T15:31:35Z",
            "html_url": "https://github.com/neovim/neovim/pull/25724#issuecomment-1787460075",
            "id": 1787460075,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25724",
            "node_id": "IC_kwDOAPphoM5qinnr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1787460075/reactions"
            },
            "updated_at": "2023-10-31T16:40:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1787460075",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> IDK if that will merge before this\r\n\r\nI haven't strictly decided on that yet. But if this is is close to ready maybe we should get this in first, and I can do the rebase fixes (shouldn't be a big deal, just shuffle things around).",
            "created_at": "2023-10-31T18:05:23Z",
            "html_url": "https://github.com/neovim/neovim/pull/25724#issuecomment-1787725731",
            "id": 1787725731,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25724",
            "node_id": "IC_kwDOAPphoM5qjoej",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1787725731/reactions"
            },
            "updated_at": "2023-10-31T18:05:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1787725731",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "This is wonderful!\r\n\r\n> will show up in both |sign-place| and |nvim_buf_get_extmarks()|.\r\n\r\nworth adding a hint to the nvim_buf_get_extmarks docstring:\r\n\r\n```diff\r\ndiff --git a/src/nvim/api/extmark.c b/src/nvim/api/extmark.c\r\nindex 84b89a7428cb..36b273eda2ae 100644\r\n--- a/src/nvim/api/extmark.c\r\n+++ b/src/nvim/api/extmark.c\r\n@@ -314,7 +314,7 @@ ArrayOf(Integer) nvim_buf_get_extmark_by_id(Buffer buffer, Integer ns_id,\r\n   return extmark_to_array(&extmark, false, details, hl_name);\r\n }\r\n \r\n-/// Gets |extmarks| in \"traversal order\" from a |charwise| region defined by\r\n+/// Gets |extmarks| (including |signs|) in \"traversal order\" from a |charwise| region defined by\r\n /// buffer positions (inclusive, 0-indexed |api-indexing|).\r\n ///\r\n /// Region can be given as (row,col) tuples, or valid extmark ids (whose\r\n```",
            "created_at": "2023-11-13T10:00:15Z",
            "html_url": "https://github.com/neovim/neovim/pull/25724#issuecomment-1807830158",
            "id": 1807830158,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25724",
            "node_id": "IC_kwDOAPphoM5rwUyO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1807830158/reactions"
            },
            "updated_at": "2023-11-13T10:00:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1807830158",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/25724/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/25724/commits",
    "created_at": "2023-10-20T09:24:53Z",
    "diff_url": "https://github.com/neovim/neovim/pull/25724.diff",
    "draft": false,
    "head": {
        "label": "luukvbaal:signmerge",
        "ref": "signmerge",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/luukvbaal/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/luukvbaal/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/luukvbaal/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/luukvbaal/neovim/branches{/branch}",
            "clone_url": "https://github.com/luukvbaal/neovim.git",
            "collaborators_url": "https://api.github.com/repos/luukvbaal/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/luukvbaal/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/luukvbaal/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/luukvbaal/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/luukvbaal/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/luukvbaal/neovim/contributors",
            "created_at": "2022-07-05T23:21:47Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/luukvbaal/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/luukvbaal/neovim/downloads",
            "events_url": "https://api.github.com/repos/luukvbaal/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/luukvbaal/neovim/forks",
            "full_name": "luukvbaal/neovim",
            "git_commits_url": "https://api.github.com/repos/luukvbaal/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/luukvbaal/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/luukvbaal/neovim/git/tags{/sha}",
            "git_url": "git://github.com/luukvbaal/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/luukvbaal/neovim/hooks",
            "html_url": "https://github.com/luukvbaal/neovim",
            "id": 510922471,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/luukvbaal/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/luukvbaal/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/luukvbaal/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/luukvbaal/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/luukvbaal/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/luukvbaal/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/luukvbaal/neovim/merges",
            "milestones_url": "https://api.github.com/repos/luukvbaal/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOHnQO5w",
            "notifications_url": "https://api.github.com/repos/luukvbaal/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/luukvbaal/neovim/pulls{/number}",
            "pushed_at": "2023-11-18T23:23:08Z",
            "releases_url": "https://api.github.com/repos/luukvbaal/neovim/releases{/id}",
            "size": 230922,
            "ssh_url": "git@github.com:luukvbaal/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/luukvbaal/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/luukvbaal/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/luukvbaal/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/luukvbaal/neovim/subscription",
            "svn_url": "https://github.com/luukvbaal/neovim",
            "tags_url": "https://api.github.com/repos/luukvbaal/neovim/tags",
            "teams_url": "https://api.github.com/repos/luukvbaal/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/luukvbaal/neovim/git/trees{/sha}",
            "updated_at": "2022-09-14T02:39:38Z",
            "url": "https://api.github.com/repos/luukvbaal/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
            "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
            "followers_url": "https://api.github.com/users/luukvbaal/followers",
            "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
            "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/luukvbaal",
            "id": 31730729,
            "login": "luukvbaal",
            "node_id": "MDQ6VXNlcjMxNzMwNzI5",
            "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
            "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
            "repos_url": "https://api.github.com/users/luukvbaal/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/luukvbaal"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/25724",
    "id": 1566338565,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25724",
    "labels": [
        {
            "color": "C5DEF5",
            "default": false,
            "description": "changes that are not features or bugfixes",
            "id": 106949155,
            "name": "refactor",
            "node_id": "MDU6TGFiZWwxMDY5NDkxNTU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/refactor"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "sign/number column",
            "id": 2962322085,
            "name": "column",
            "node_id": "MDU6TGFiZWwyOTYyMzIyMDg1",
            "url": "https://api.github.com/repos/neovim/neovim/labels/column"
        }
    ],
    "locked": false,
    "merge_commit_sha": "df87266b23b32b96d1e3d4d26eb721a9dd63c2a4",
    "merged_at": "2023-11-18T14:04:14Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5dXG4F",
    "number": 25724,
    "patch_url": "https://github.com/neovim/neovim/pull/25724.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/25724/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/c4afb9788c4f139eb2e3b7aa4d6a6a20b67ba156",
    "title": "refactor(sign): move legacy signs to extmarks",
    "updated_at": "2023-11-18T20:31:25Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/25724",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
        "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
        "followers_url": "https://api.github.com/users/luukvbaal/followers",
        "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
        "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/luukvbaal",
        "id": 31730729,
        "login": "luukvbaal",
        "node_id": "MDQ6VXNlcjMxNzMwNzI5",
        "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
        "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
        "repos_url": "https://api.github.com/users/luukvbaal/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/luukvbaal"
    }
}