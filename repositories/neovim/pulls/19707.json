{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/19707/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/19707/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/19707"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/19707"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/19707/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/19707"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/cb1d7c9a2d61c107ff29a2b1a1a1ae766bc84a62"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5622,
            "forks_count": 5622,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1788,
            "open_issues_count": 1788,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-10-08T00:43:44Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 289510,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 82327,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-10-08T00:49:29Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 82327,
            "watchers_count": 82327,
            "web_commit_signoff_required": false
        },
        "sha": "09c6ce8c4e4c6415cca9b834539ed0df461373f6",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "The idea is to clear the extmarks only when necessary, while also removing some intermediate steps which may cause the line to flicker (incrementally render the whole line, not just the resolved lens). The effect is more perceptible with multiple lenses.\r\n\r\nThe change hopefully enables users to refresh on `CursorHold` and/or `InsertLeave` and us to optionally insert the virtual text above the line (which is currently unfeasible, because the buffer bounces up and down a lot).\r\n\r\nThere's still some issues, but I think the experience is better than the current behavior.\r\n\r\nThe second commit is not part of the PR.\r\n\r\nTODO: upload gifs showing the behavior\r\n\r\nCurrent behavior\r\n\r\ninline https://user-images.githubusercontent.com/109605931/186282647-123ba5c2-a4dc-459f-86d9-2c8bc31d1dc9.mp4\r\nabove https://user-images.githubusercontent.com/109605931/186282660-3349d73c-1e76-41d3-a6e4-918fe04a26a8.mp4\r\n\r\nMinimal init:\r\n<details>\r\n\r\n```lua\r\n\r\nlocal on_windows = vim.loop.os_uname().version:match(\"Windows\")\r\n\r\nlocal function join_paths(...)\r\n\tlocal path_sep = on_windows and \"\\\\\" or \"/\"\r\n\tlocal result = table.concat({ ... }, path_sep)\r\n\treturn result\r\nend\r\n\r\nvim.cmd([[set runtimepath=$VIMRUNTIME]])\r\n\r\nlocal temp_dir = vim.loop.os_getenv(\"TEMP\") or \"/tmp\"\r\n\r\nvim.cmd(\"set packpath=\" .. join_paths(temp_dir, \"nvim\", \"site\"))\r\n\r\nlocal package_root = join_paths(temp_dir, \"nvim\", \"site\", \"pack\")\r\nlocal install_path = join_paths(package_root, \"packer\", \"start\", \"packer.nvim\")\r\nlocal compile_path = join_paths(install_path, \"plugin\", \"packer_compiled.lua\")\r\n\r\nlocal function load_plugins()\r\n\trequire(\"packer\").startup({\r\n\t\t{\r\n\t\t\t\"wbthomason/packer.nvim\",\r\n\t\t\t\"neovim/nvim-lspconfig\",\r\n\t\t},\r\n\t\tconfig = {\r\n\t\t\tpackage_root = package_root,\r\n\t\t\tcompile_path = compile_path,\r\n\t\t},\r\n\t})\r\nend\r\n\r\nlocal load_config = function()\r\n\tvim.lsp.set_log_level(\"trace\")\r\n\trequire(\"vim.lsp.log\").set_format_func(vim.inspect)\r\n\tlocal nvim_lsp = require(\"lspconfig\")\r\n\tlocal on_attach = function(_, bufnr)\r\n\t\tlocal function buf_set_option(...)\r\n\t\t\tvim.api.nvim_buf_set_option(bufnr, ...)\r\n\t\tend\r\n\r\n\t\tvim.cmd(\"hi! LspCodeLens ctermfg=blue\")\r\n\r\n\t\tvim.api.nvim_create_augroup(\"lsp_code_lens_refresh\", {})\r\n\t\tvim.api.nvim_create_autocmd({ \"CursorHold\", \"InsertLeave\", \"BufWritePost\" }, {\r\n\t\t\tgroup = \"lsp_code_lens_refresh\",\r\n\t\t\tbuffer = bufnr,\r\n\t\t\tcallback = vim.lsp.codelens.refresh,\r\n\t\t})\r\n\r\n\t\tvim.defer_fn(vim.lsp.codelens.refresh, 3000)\r\n\tend\r\n\r\n\t-- Add the server that troubles you here\r\n\tlocal name = \"fsautocomplete\"\r\n\tif not name then\r\n\t\tprint(\"You have not defined a server name, please edit minimal_init.lua\")\r\n\tend\r\n\tif not nvim_lsp[name].document_config.default_config.cmd then\r\n\t\tprint([[You have not defined a server default cmd for a server\r\n      that requires it please edit minimal_init.lua]])\r\n\tend\r\n\r\n\tnvim_lsp[name].setup({\r\n\t\ton_attach = on_attach,\r\n\t})\r\n\r\n\tprint(\r\n\t\t[[You can find your log at $HOME/.cache/nvim/lsp.log. Please paste in a github issue under a details tag as described in the issue template.]]\r\n\t)\r\nend\r\n\r\nif vim.fn.isdirectory(install_path) == 0 then\r\n\tvim.fn.system({ \"git\", \"clone\", \"https://github.com/wbthomason/packer.nvim\", install_path })\r\n\tload_plugins()\r\n\trequire(\"packer\").sync()\r\n\tlocal packer_group = vim.api.nvim_create_augroup(\"Packer\", { clear = true })\r\n\tvim.api.nvim_create_autocmd(\r\n\t\t\"User\",\r\n\t\t{ pattern = \"PackerComplete\", callback = load_config, group = packer_group, once = true }\r\n\t)\r\nelse\r\n\tload_plugins()\r\n\trequire(\"packer\").sync()\r\n\tload_config()\r\nend\r\n\r\nvim.opt.updatetime = 250\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>Patch lines above (on master, for testing)</summary>\r\n\r\n```patch\r\ndiff --git a/runtime/lua/vim/lsp/codelens.lua b/runtime/lua/vim/lsp/codelens.lua\r\nindex 4fa02c8db..ca06782a0 100644\r\n--- a/runtime/lua/vim/lsp/codelens.lua\r\n+++ b/runtime/lua/vim/lsp/codelens.lua\r\n@@ -7,6 +7,15 @@ local M = {}\r\n --- to throttle refreshes to at most one at a time\r\n local active_refreshes = {}\r\n\r\n+--- bufnr -> lnum -> padding\r\n+local padding_cache_by_buf = setmetatable({}, {\r\n+  __index = function(t, b)\r\n+    local key = b > 0 and b or api.nvim_get_current_buf()\r\n+    t[key] = {}\r\n+    return rawget(t, key)\r\n+  end,\r\n+})\r\n+\r\n --- bufnr -> client_id -> lenses\r\n local lens_cache_by_buf = setmetatable({}, {\r\n   __index = function(t, b)\r\n@@ -26,6 +35,21 @@ local namespaces = setmetatable({}, {\r\n ---@private\r\n M.__namespaces = namespaces\r\n\r\n+---@private\r\n+local function get_padding_lnum(bufnr, lnum)\r\n+  if not padding_cache_by_buf[bufnr][lnum] then\r\n+    local line = vim.api.nvim_buf_get_lines(bufnr, lnum, lnum + 1, true)[1]\r\n+\r\n+    local _, first = line:find('^%s*.')\r\n+    first = first and first - 1 or 0\r\n+\r\n+    local padding = string.rep(' ', first)\r\n+    padding_cache_by_buf[bufnr][lnum] = padding\r\n+  end\r\n+\r\n+  return padding_cache_by_buf[bufnr][lnum]\r\n+end\r\n+\r\n ---@private\r\n local function execute_lens(lens, bufnr, client_id)\r\n   local line = lens.range.start.line\r\n@@ -137,7 +161,12 @@ function M.display(lenses, bufnr, client_id)\r\n       return a.range.start.character < b.range.start.character\r\n     end)\r\n     for j, lens in ipairs(line_lenses) do\r\n-      local text = lens.command and lens.command.title or 'Unresolved lens ...'\r\n+      local padding = ''\r\n+      if j == 1 then\r\n+        padding = get_padding_lnum(bufnr, i)\r\n+      end\r\n+\r\n+      local text = padding .. (lens.command and lens.command.title or 'Unresolved lens ...')\r\n       table.insert(chunks, { text, 'LspCodeLens' })\r\n       if j < num_line_lenses then\r\n         table.insert(chunks, { ' | ', 'LspCodeLensSeparator' })\r\n@@ -145,7 +174,8 @@ function M.display(lenses, bufnr, client_id)\r\n     end\r\n     if #chunks > 0 then\r\n       api.nvim_buf_set_extmark(bufnr, ns, i, 0, {\r\n-        virt_text = chunks,\r\n+        virt_lines = { chunks },\r\n+        virt_lines_above = true,\r\n         hl_mode = 'combine',\r\n       })\r\n     end\r\n@@ -203,13 +233,18 @@ local function resolve_lenses(lenses, bufnr, client_id, callback)\r\n           -- Eager display to have some sort of incremental feedback\r\n           -- Once all lenses got resolved there will be a full redraw for all lenses\r\n           -- So that multiple lens per line are properly displayed\r\n-          api.nvim_buf_set_extmark(\r\n-            bufnr,\r\n-            ns,\r\n-            lens.range.start.line,\r\n-            0,\r\n-            { virt_text = { { lens.command.title, 'LspCodeLens' } }, hl_mode = 'combine' }\r\n-          )\r\n+          api.nvim_buf_set_extmark(bufnr, ns, lens.range.start.line, 0, {\r\n+            virt_lines = {\r\n+              {\r\n+                {\r\n+                  get_padding_lnum(bufnr, lens.range.start.line) .. lens.command.title,\r\n+                  'LspCodeLens',\r\n+                },\r\n+              },\r\n+            },\r\n+            hl_mode = 'combine',\r\n+            virt_lines_above = true,\r\n+          })\r\n         end\r\n         countdown()\r\n       end, bufnr)\r\n```\r\n\r\n</details>",
    "closed_at": "2024-10-06T16:16:07Z",
    "comment_data": [],
    "comment_regular_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "From the spec: \r\n> if a client sends a request to the server and the client state changes in a way that it invalidates the response it should do the following:\r\n> - cancel the server request and ignore the result if the result is not useful for the client anymore. If necessary the client should resend the request.\r\n> - keep the request running if the client can still make use of the result by for example transforming it to a new result by applying the state change to the result.\r\n\r\nI guess we could transform it instead of making another request, but we don't have that information (from `on_lines`). Thoughts?",
            "created_at": "2022-08-15T22:37:33Z",
            "html_url": "https://github.com/neovim/neovim/pull/19707#issuecomment-1215942648",
            "id": 1215942648,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19707",
            "node_id": "IC_kwDOAPphoM5Iec_4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1215942648/reactions"
            },
            "updated_at": "2022-08-15T22:37:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1215942648",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/109605931?v=4",
                "events_url": "https://api.github.com/users/lvimuser/events{/privacy}",
                "followers_url": "https://api.github.com/users/lvimuser/followers",
                "following_url": "https://api.github.com/users/lvimuser/following{/other_user}",
                "gists_url": "https://api.github.com/users/lvimuser/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lvimuser",
                "id": 109605931,
                "login": "lvimuser",
                "node_id": "U_kgDOBoh0Kw",
                "organizations_url": "https://api.github.com/users/lvimuser/orgs",
                "received_events_url": "https://api.github.com/users/lvimuser/received_events",
                "repos_url": "https://api.github.com/users/lvimuser/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lvimuser/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lvimuser/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lvimuser"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "It turned out a bit more complicated than I thought, and I'm not happy with the code, but it works...\r\n\r\n--------\r\n\r\nThe current behavior for codelens is equivalent to a leading debounce:  we don't allow new requests to come in before we resolve the old one¹. By the time this happens, the buffer may be in a different state, for which the request is invalid, and we'll have to wait until whatever triggered it to request again, and so on...\r\n\r\nIt be nice if we could cancel callbacks, since the buffer may change after we've received the response, but before we've done processing it. For some things, we might get away with a clear followed by `setextmark`, as long as you happen to be fast enough between the calls, it'll not degrade user experience.\r\n\r\nBut we can't do the same here. This becomes evident once we try to render above the line, because that'll lead to the buffer jumping like crazy. Even if we render it inline, it's just not a nice experience to have it go { a | b} -> empty then a bunch of unresolved or changed positions and back to { a | b } again. \r\n\r\n¹ An `InsertLeave` may effectively waste a request. The current implementation shifts the burden to the users to know when/if it's acceptable to call an endpoint.\r\n\r\nFor some handlers (e.g. `documentColor/semanticTokens/codelens/inlayHints`), should we consider making the request on `on_lines`?\r\n\r\nCould we not, then, emit events from the didChange handler, after sending the notification to the server? (same idea, but coupled with the provided debounce configuration; I think this matches emacs' lsp-mode and vscode). The handlers would then subscribe to these events, instead of waiting for some autocommand (functionality would still be optional ofc, with no cost if not enabled).",
            "created_at": "2022-08-15T22:39:06Z",
            "html_url": "https://github.com/neovim/neovim/pull/19707#issuecomment-1215944771",
            "id": 1215944771,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19707",
            "node_id": "IC_kwDOAPphoM5IedhD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1215944771/reactions"
            },
            "updated_at": "2022-08-16T22:09:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1215944771",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/109605931?v=4",
                "events_url": "https://api.github.com/users/lvimuser/events{/privacy}",
                "followers_url": "https://api.github.com/users/lvimuser/followers",
                "following_url": "https://api.github.com/users/lvimuser/following{/other_user}",
                "gists_url": "https://api.github.com/users/lvimuser/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lvimuser",
                "id": 109605931,
                "login": "lvimuser",
                "node_id": "U_kgDOBoh0Kw",
                "organizations_url": "https://api.github.com/users/lvimuser/orgs",
                "received_events_url": "https://api.github.com/users/lvimuser/received_events",
                "repos_url": "https://api.github.com/users/lvimuser/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lvimuser/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lvimuser/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lvimuser"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Related: https://github.com/neovim/neovim/pull/17016\r\n\r\nLooking around I see we have debounce logic in lsp.lua. Can we somehow hook into the [debounce](https://github.com/neovim/neovim/blob/2379699b1e7cd944ad3d8169d9c9d4072d0fb771/runtime/lua/vim/lsp.lua#L626-L653) \"tick\" in [send_changes()](https://github.com/neovim/neovim/blob/2379699b1e7cd944ad3d8169d9c9d4072d0fb771/runtime/lua/vim/lsp.lua#L606) ?\r\n\r\n> Could we not, then, emit events from the didChange handler, after sending the notification to the server? (same idea, but coupled with the provided debounce configuration; I think this matches emacs' lsp-mode and vscode).\r\n\r\nSure, maybe. \r\n\r\n> TODO: upload gifs showing the behavior\r\n\r\nA small screenshot showing the UI would help to understand what this is about.\r\n\r\nThis PR as-is looks like too much code. Why is `extmarks_cache_by_buf` needed? Hope we can avoid more caches.",
            "created_at": "2022-08-22T03:30:36Z",
            "html_url": "https://github.com/neovim/neovim/pull/19707#issuecomment-1221755704",
            "id": 1221755704,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19707",
            "node_id": "IC_kwDOAPphoM5I0oM4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1221755704/reactions"
            },
            "updated_at": "2022-08-22T03:30:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1221755704",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Looking around I see we have debounce logic in lsp.lua. Can we somehow hook into the [debounce](https://github.com/neovim/neovim/blob/2379699b1e7cd944ad3d8169d9c9d4072d0fb771/runtime/lua/vim/lsp.lua#L626-L653) \"tick\" in [send_changes()](https://github.com/neovim/neovim/blob/2379699b1e7cd944ad3d8169d9c9d4072d0fb771/runtime/lua/vim/lsp.lua#L606) ?\r\n\r\nThat's what I thought, but I have no idea on the implementation. Autocommands, libuv ([1](https://github.com/luvit/luvit/blob/master/deps/core.lua), [2](https://github.com/luvit/luvit/blob/master/deps/core.lua))? It'd be nice to have something like `LspAfterChange` perhaps.\r\n\r\n>\r\n> A small screenshot showing the UI would help to understand what this is about.\r\n\r\nI've update the first comment with a screen capture of the current behavior (imo, it's really bad). Note that it only affects lenses which are required to be resolved. If the server sends a resolved lens on the first call (see ocamllsp), then the current implementation works fine.\r\n \r\n> \r\n> This PR as-is looks like too much code. Why is `extmarks_cache_by_buf` needed? Hope we can avoid more caches.\r\n\r\nYea, I don't like it either. Hopefully it showcases why something similar is necessary (this PR or not).\r\n\r\nIt's necessary because the approach is to manually track the extmarks (again, maybe there's a better way), so that we don't have to clear everything on each call (which causes part of the flickers). \r\n\r\n---------\r\n\r\nAnother change is to not redraw each resolved lens unconditionally. If there's multiple lenses per line, we should wait until all those lenses are resolved, because we can't keep track of its position (and I think should be made regardless of the PR). See \r\n[3](https://github.com/neovim/neovim/pull/19707/files#diff-1c5e2d595510f83d2e6b841d3a9e6024835af51e5a6557be4e6f7b62d84a27d8R206-R224), [4](https://github.com/neovim/neovim/pull/19707/files#diff-1c5e2d595510f83d2e6b841d3a9e6024835af51e5a6557be4e6f7b62d84a27d8R316-R348).\r\n\r\nAs an example, the current behavior for 2 lenses on the same line is\r\n```\r\nUnresolved ...        | Unresolved ...  (1)\r\na                                       (2)\r\na                     | Unresolved ...  (3)\r\nb                                       (4)\r\na                     | b               (5)\r\n```\r\n(could also be `b` on 3, then `a` on 4, depends on which gets resolved first)\r\n\r\nAnd by doing so we can skip those intermediate states/transitions (less redraws), going 1 -> 3 -> 5 instead (if we known which lenses are unresolved, otherwise 1 -> 5).\r\n\r\n----\r\n\r\nAlso, some thoughts on [5](https://github.com/neovim/neovim/pull/19707/files#diff-1c5e2d595510f83d2e6b841d3a9e6024835af51e5a6557be4e6f7b62d84a27d8R128-R131) and [6](https://github.com/neovim/neovim/pull/19707/files#diff-1c5e2d595510f83d2e6b841d3a9e6024835af51e5a6557be4e6f7b62d84a27d8R440-R473)?\r\n\r\nIt would be nice if we could delete an extmark when deleting the corresponding line. `on_lines` is not sufficient because on, e.g. a delete, will be triggered **after** the change, so we might end up deleting more than necessary.\r\n\r\n----\r\n\r\nNote that VSCode's implementation waits for an additional `400ms` without document/buffer changes before triggering the request (and I think something similar might be necessary, still playing with it). And Emacs' lsp mode triggers on `Idle` (for which there's a timer (defaulting to 500ms) that restarts on any(?) LSP request).",
            "created_at": "2022-08-24T00:10:38Z",
            "html_url": "https://github.com/neovim/neovim/pull/19707#issuecomment-1225011483",
            "id": 1225011483,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19707",
            "node_id": "IC_kwDOAPphoM5JBDEb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1225011483/reactions"
            },
            "updated_at": "2022-08-24T00:14:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1225011483",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/109605931?v=4",
                "events_url": "https://api.github.com/users/lvimuser/events{/privacy}",
                "followers_url": "https://api.github.com/users/lvimuser/followers",
                "following_url": "https://api.github.com/users/lvimuser/following{/other_user}",
                "gists_url": "https://api.github.com/users/lvimuser/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lvimuser",
                "id": 109605931,
                "login": "lvimuser",
                "node_id": "U_kgDOBoh0Kw",
                "organizations_url": "https://api.github.com/users/lvimuser/orgs",
                "received_events_url": "https://api.github.com/users/lvimuser/received_events",
                "repos_url": "https://api.github.com/users/lvimuser/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lvimuser/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lvimuser/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lvimuser"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think it would be good to first get proper multi-client support in place before addressing flickering as this seems to introduce quite some additional complexity.\r\n\r\n> For some handlers (e.g. documentColor/semanticTokens/codelens/inlayHints), should we consider making the request on on_lines?\r\n\r\nIf we do something like that it would still have to be opt-in. Not everyone agrees with having code lens enabled\r\n\r\n> Another change is to not redraw each resolved lens unconditionally. If there's multiple lenses per line, we should wait until all those lenses are resolved\r\n\r\nI think that sounds good. It probably already goes a long way in reducing the flickering while being simpler to implement\r\n\r\n\r\n",
            "created_at": "2022-08-24T12:17:23Z",
            "html_url": "https://github.com/neovim/neovim/pull/19707#issuecomment-1225643184",
            "id": 1225643184,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19707",
            "node_id": "IC_kwDOAPphoM5JDdSw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1225643184/reactions"
            },
            "updated_at": "2022-08-24T12:17:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1225643184",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Turns out we didn't need the cache thing. I think this is acceptable now?\r\nI'll upload a video showing the new behavior later.\r\n\r\n---------\r\n\r\n> I think it would be good to first get proper multi-client support in place before addressing flickering as this seems to introduce quite some additional complexity.\r\n\r\nHopefully the current changes are somewhat straightforward?\r\n> > For some handlers (e.g. documentColor/semanticTokens/codelens/inlayHints), should we consider making the request on on_lines?\r\n> \r\n> If we do something like that it would still have to be opt-in. Not everyone agrees with having code lens enabled\r\n\r\nYes, ofc.\r\n\r\n> > Another change is to not redraw each resolved lens unconditionally. If there's multiple lenses per line, we should wait until all those lenses are resolved\r\n> \r\n> I think that sounds good. It probably already goes a long way in reducing the flickering while being simpler to implement\r\n\r\nI've tried it, but it didn't solve the main problem: clearing the entire buffer. Anyway, should be better now.",
            "created_at": "2022-08-25T22:52:29Z",
            "html_url": "https://github.com/neovim/neovim/pull/19707#issuecomment-1227833543",
            "id": 1227833543,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19707",
            "node_id": "IC_kwDOAPphoM5JL0DH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1227833543/reactions"
            },
            "updated_at": "2022-08-25T22:57:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1227833543",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/109605931?v=4",
                "events_url": "https://api.github.com/users/lvimuser/events{/privacy}",
                "followers_url": "https://api.github.com/users/lvimuser/followers",
                "following_url": "https://api.github.com/users/lvimuser/following{/other_user}",
                "gists_url": "https://api.github.com/users/lvimuser/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lvimuser",
                "id": 109605931,
                "login": "lvimuser",
                "node_id": "U_kgDOBoh0Kw",
                "organizations_url": "https://api.github.com/users/lvimuser/orgs",
                "received_events_url": "https://api.github.com/users/lvimuser/received_events",
                "repos_url": "https://api.github.com/users/lvimuser/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lvimuser/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lvimuser/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lvimuser"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/19707/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/19707/commits",
    "created_at": "2022-08-11T00:40:10Z",
    "diff_url": "https://github.com/neovim/neovim/pull/19707.diff",
    "draft": true,
    "head": {
        "label": "lvimuser:codelens-flicker",
        "ref": "codelens-flicker",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/lvimuser/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/lvimuser/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/lvimuser/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/lvimuser/neovim/branches{/branch}",
            "clone_url": "https://github.com/lvimuser/neovim.git",
            "collaborators_url": "https://api.github.com/repos/lvimuser/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/lvimuser/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/lvimuser/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/lvimuser/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/lvimuser/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/lvimuser/neovim/contributors",
            "created_at": "2022-08-08T21:57:57Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/lvimuser/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/lvimuser/neovim/downloads",
            "events_url": "https://api.github.com/repos/lvimuser/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/lvimuser/neovim/forks",
            "full_name": "lvimuser/neovim",
            "git_commits_url": "https://api.github.com/repos/lvimuser/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/lvimuser/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/lvimuser/neovim/git/tags{/sha}",
            "git_url": "git://github.com/lvimuser/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/lvimuser/neovim/hooks",
            "html_url": "https://github.com/lvimuser/neovim",
            "id": 522719110,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/lvimuser/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/lvimuser/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/lvimuser/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/lvimuser/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/lvimuser/neovim/labels{/name}",
            "language": "Vim script",
            "languages_url": "https://api.github.com/repos/lvimuser/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/lvimuser/neovim/merges",
            "milestones_url": "https://api.github.com/repos/lvimuser/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOHygPhg",
            "notifications_url": "https://api.github.com/repos/lvimuser/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/109605931?v=4",
                "events_url": "https://api.github.com/users/lvimuser/events{/privacy}",
                "followers_url": "https://api.github.com/users/lvimuser/followers",
                "following_url": "https://api.github.com/users/lvimuser/following{/other_user}",
                "gists_url": "https://api.github.com/users/lvimuser/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lvimuser",
                "id": 109605931,
                "login": "lvimuser",
                "node_id": "U_kgDOBoh0Kw",
                "organizations_url": "https://api.github.com/users/lvimuser/orgs",
                "received_events_url": "https://api.github.com/users/lvimuser/received_events",
                "repos_url": "https://api.github.com/users/lvimuser/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lvimuser/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lvimuser/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lvimuser"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/lvimuser/neovim/pulls{/number}",
            "pushed_at": "2022-10-29T20:56:14Z",
            "releases_url": "https://api.github.com/repos/lvimuser/neovim/releases{/id}",
            "size": 204389,
            "ssh_url": "git@github.com:lvimuser/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/lvimuser/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/lvimuser/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/lvimuser/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/lvimuser/neovim/subscription",
            "svn_url": "https://github.com/lvimuser/neovim",
            "tags_url": "https://api.github.com/repos/lvimuser/neovim/tags",
            "teams_url": "https://api.github.com/repos/lvimuser/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/lvimuser/neovim/git/trees{/sha}",
            "updated_at": "2022-08-10T21:42:12Z",
            "url": "https://api.github.com/repos/lvimuser/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "cb1d7c9a2d61c107ff29a2b1a1a1ae766bc84a62",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/109605931?v=4",
            "events_url": "https://api.github.com/users/lvimuser/events{/privacy}",
            "followers_url": "https://api.github.com/users/lvimuser/followers",
            "following_url": "https://api.github.com/users/lvimuser/following{/other_user}",
            "gists_url": "https://api.github.com/users/lvimuser/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/lvimuser",
            "id": 109605931,
            "login": "lvimuser",
            "node_id": "U_kgDOBoh0Kw",
            "organizations_url": "https://api.github.com/users/lvimuser/orgs",
            "received_events_url": "https://api.github.com/users/lvimuser/received_events",
            "repos_url": "https://api.github.com/users/lvimuser/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/lvimuser/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lvimuser/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/lvimuser"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/19707",
    "id": 1023329335,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/19707",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "locked": false,
    "merge_commit_sha": "36a4476ca9764dafd6de896663e195a0ee18003b",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM48_sQ3",
    "number": 19707,
    "patch_url": "https://github.com/neovim/neovim/pull/19707.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/19707/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/cb1d7c9a2d61c107ff29a2b1a1a1ae766bc84a62",
    "title": "fix(lsp/codelens): remove unnecessary redraws to reduce flicker",
    "updated_at": "2024-10-06T16:16:07Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/19707",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/109605931?v=4",
        "events_url": "https://api.github.com/users/lvimuser/events{/privacy}",
        "followers_url": "https://api.github.com/users/lvimuser/followers",
        "following_url": "https://api.github.com/users/lvimuser/following{/other_user}",
        "gists_url": "https://api.github.com/users/lvimuser/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/lvimuser",
        "id": 109605931,
        "login": "lvimuser",
        "node_id": "U_kgDOBoh0Kw",
        "organizations_url": "https://api.github.com/users/lvimuser/orgs",
        "received_events_url": "https://api.github.com/users/lvimuser/received_events",
        "repos_url": "https://api.github.com/users/lvimuser/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/lvimuser/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lvimuser/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/lvimuser"
    }
}