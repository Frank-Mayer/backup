{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/26813/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/26813/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/26813"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/26813"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/26813/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/fd08de4b85ae42fe3ad5b480b58df9f7fff76269"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5156,
            "forks_count": 5156,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1738,
            "open_issues_count": 1738,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-01-23T01:27:16Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 251208,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 72998,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-01-23T01:05:36Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 72998,
            "watchers_count": 72998,
            "web_commit_signoff_required": false
        },
        "sha": "a25aeee856e2fb02f93ffa5c2e5d43fd75ead2cf",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "NOTE: all referenced commits have been shifted by one, first commit now contains benchmarks.\r\n\r\n### 1. Breakindent and strcmp()\r\n`win_lbr_chartabsize()` recomputes `breakindent` of a line up to 2 times in order to determine the size of the character. [The function for computing breakindent](https://github.com/neovim/neovim/blob/0a598c13b1863ba1aff378027c4376e3ab7048ee/src/nvim/indent.c#L785) caches the last result, but as part of checking if the cached value could be used it strcmp's the given line to the cached (copied) line. Since `win_lbr_chartabsize()` is often called in a loop and none of the parameters that affect `breakindent` change, this results in strcmp being called for 2 identical lines (worst case for strcmp) for every character in the line starting from the first wrapped row (even though the value is almost never affects the final size of that character).\r\n\r\nThe first commit fixes the ussue of repeatedly comparing the lines by caching the indentation value in the `chartabsize_T` struct. I also decided to preserve the size of the structure by removing `cts_has_virt_text` and changing `cts_row` to `virt_row` since it is used only for virtual text and can be set to negative value if the line does not contain virtual text.\r\n\r\n### 2. Unnecessary loop\r\n`getvcol()` computes virtual column until the last position by iterating until the current position reaches the first byte of the character containing the last position. To compute the first byte of the character, it uses an extra loop at the start to find if the position is past the end of the line and sets it to the end of the line before computing the index of its first byte.\r\n\r\nThe second commit substitutes comparison with the first byte of the last position with checking if next position is greater than the last position, which allows removing the loop at the start.\r\n\r\n### 3. Non-ascii characters are decoded multiple times.\r\nIn `getvcol()`, when the size of a Unicode character is computed, the character is decoded and validated (all bytes are read again) once in [`utf_ptr2cells()`](https://github.com/neovim/neovim/blob/0a598c13b1863ba1aff378027c4376e3ab7048ee/src/nvim/mbyte.c#L512). Then, when the pointer is advanced to the next character, its length is computed again (by reading all its bytes) in [`utfc_ptr2len()`](https://github.com/neovim/neovim/blob/0a598c13b1863ba1aff378027c4376e3ab7048ee/src/nvim/mbyte.c#L848), and then it is (possibly) decoded again in [`utf_composinglike()`](https://github.com/neovim/neovim/blob/0a598c13b1863ba1aff378027c4376e3ab7048ee/src/nvim/mbyte.c#L712). The next character is decoded once in `utf_composinglike()`, then its length is computed in `utfc_ptr2len()`, then it is (possibly) decoded a second time if it is a composing character, or it goes though all the steps the first character went. Typically a single Unicode character will be decoded twice and its length will be computed twice per one iteration.\r\nAdditionally, the function for decoding a character ([`utf_ptr2char()`](https://github.com/neovim/neovim/blob/0a598c13b1863ba1aff378027c4376e3ab7048ee/src/nvim/mbyte.c#L598)) is and'ing all bytes with masks like `0x3f` to remove the utf8 `10` and `11` bits, but since we know their values, we can subtract these bits instead of and'ing them with masks, which makes it possible to combine all the subtracted bits into one constant.\r\n\r\nThe issue of duplicate decoding and checking is fixed by adding 3 new functions: `utf_ptr2CharInfo()`, `ptr2CharInfo()` and `utfc_next()`, and modifying `getvcol()`. The first function decodes a character like `utf_ptr2char()`, but this new function returns more information about the decoded character (like its length and whether it is valid). The second function uses the first function to decode a multibyte character, but does a quick return if the character is single byte. The third function works like `utfc_ptr2len()`, but reuses previously decoded characters and also returns the last decoded character which is used on the next iteration of 'getvcol()` loop. The second and third functions are always inline because majority of the time they will be used on ascii characters and not inlining them would add overhead of a function call for the most common usecase.\r\n\r\nI verified that `ptr2CharInfo()` and the new version of `utf_ptr2char()` return correct code points for all characters 1-4 bytes long (and some 5 and 6 byte characters) and return a negative value/first byte otherwise.\r\n\r\n### 4. Optimizing other places that compute text size.\r\nIf wrapping is enabled, `screenpos()` will compute the screen size of all lines above the current line (in [`plines_win_nofold()`](https://github.com/neovim/neovim/blob/bbd5c6363c25e8fbbfb962f8f6c5ea1800d431ca/src/nvim/plines.c#L796)), but only `getvcol()` has the optimized loop for computing character sizes. This function and many other have to use either `win_lbr_chartabsize()` or `lbr_chartabsize()` to compute text size or position. Although both functions have a fast path and check for the same\\* conditions as `getvcol()`, all of the checks have to be performed on each iteration. Additionally, Unicode characters are decoded multiple times, like in `getvcol()`.\r\n\r\nThe fourth commit splits the character size functions into 'regular' and 'fast' versions (`win_lbr_chartabsize()` -> `charsize_regular()`, `win_nolbr_chartabsize()` ~> `charsize_fast()`, `win_linetabsize_cts()` -> `linesize_regular()`, `linesize_fast()`). Checks for which version to use are computed when 'charsize' argument is initialized.\r\nOther functions inside plines.c also have access to the `int_charsize_fast()` which is always inlined.\r\nBoth versions of 'charsize' functions now also take decoded characters as arguments instead of decoding them from the pointer, which allows to reuse decoded characters in all other places.\r\n\r\n### Other changes\r\n\r\n1. [Condition in `getvcol()`](https://github.com/neovim/neovim/blob/ec7453804421f738955a5f4460f44172318d42ff/src/nvim/plines.c#L517) originally checked for tab behavior and used `win_lbr_chartabsize()` if tabs were drawn as '^I'. But `win_lbr_chartabsize()` didn't explicitly check for that and called either `win_chartabsize()` or `win_nolbr_chartabsize()`, both of which checked the same tab behavior as `getvcol()`, but in [`== TAB` condition](https://github.com/neovim/neovim/blob/ec7453804421f738955a5f4460f44172318d42ff/src/nvim/plines.c#L46). My version makes `getvcol()` use fast path regardless of whether tabs have variable width or are displayed as '^I'.\r\n2. [Docs](https://github.com/neovim/neovim/blob/ec7453804421f738955a5f4460f44172318d42ff/runtime/doc/mbyte.txt#L664) say that 'overlong sequences are not handled specially and displayed like a valid character'. I don't know how relevant this is since many places that I modified didn't originally handle overlong ascii characters as ascii (e.g. [`== TAB` in getvcol](https://github.com/neovim/neovim/blob/ec7453804421f738955a5f4460f44172318d42ff/src/nvim/plines.c#L534) and other places, [BYTE2LEN](https://github.com/neovim/neovim/blob/ec7453804421f738955a5f4460f44172318d42ff/src/nvim/plines.c#L550) which would handle overlong '^A' as a double-width character, [`ascii_iswhite(*ptr)`](https://github.com/neovim/neovim/blob/ec7453804421f738955a5f4460f44172318d42ff/src/nvim/edit.c#L4353)). My version handles them correctly only in some places.\r\n3. Potential bug in [`coladvance2()`](https://github.com/neovim/neovim/blob/ec7453804421f738955a5f4460f44172318d42ff/src/nvim/cursor.c#L147): the `head` variable should probably be reset on every iteration of the loop, like in [`win_line()`](https://github.com/neovim/neovim/blob/ec7453804421f738955a5f4460f44172318d42ff/src/nvim/drawline.c#L1355). `win_lbr_chartabsize()` might not reset `*headp` if it calls `win_chartabsize()` or `win_nolbr_chartbasize()`, so `*headp` might contain 'head' value of one of the previous characters. This would be the case if wrapping is enabled and a double-width character intersect window edge. Then it would set `head` to 1 and it would stay 1 for all characters after it. \r\n4. 'win_lbr_chartbasize()` recomputed the same width for tab if was displayed like ^I and was moved by virtual text. I changed the condition to check for special tab behavior.\r\n\r\n### Benchmarks\r\n\r\nTo verify that my changes actually improve performance, I wrote a Lua script that runs `screenpos()` 10'000 times in a loop and measures the difference in time returned by os.clock(). I don't know how GC and JIT affect the measurements, but most results are within 1% of the average for the test. Both the original and modified versions were compiled in release mode with Clang 14 and GCC 11.4 on Ubuntu x86-64 (WSL). Screen size is 224x57, wrapping is enabled.\r\nThere are 12 different tests in total: 4 with 10'000 characters in one line (long wrapped line), 4 with 100 lines with 220 characters each (long lines, none are wrapped), and 4 with 100 lines with 440 characters each (each line takes 2 screen rows). The results are measured for ascii 'i', and for 2 byte 'À', with and without `breakindent`. Time is in microseconds.\r\n`screenpos()` was computed for the end of the last line, the file was scrolled to the end. \r\nI also did 4 additional test that measured the time it takes to insert 10'000 characters (with `vim.cmd\"normal! 10000ix\"`) for the same 2 characters with and without `breakindent`. Time is in **milliseconds**.\r\n\r\nGCC. Results with `nobreakindent`:\r\n||insert 10000 i|insert 10000 À|10'000 i|10'000 À|220 i| 220 À|440 i| 440 À|\r\n|-|-|-|-|-|-|-|-|-|\r\n|original|1292|6165|54|384|189|555|184|541|\r\n|this|640|2385|41|160|58|204|55|198|\r\n\r\nGCC. Results with `breakindent`:\r\n||insert 10000 i|insert 10000 À|10'000 i|10'000 À|220 i| 220 À|440 i| 440 À|\r\n|-|-|-|-|-|-|-|-|-|\r\n|original|44673|99308|4314|10039|343|767|679|1149|\r\n|this|4129|7604|276|559|341|608|344|600|\r\n\r\nClang, `nobreakindent`:\r\n||insert 10000 i|insert 10000 À|10'000 i|10'000 À|220 i| 220 À|440 i| 440 À|\r\n|-|-|-|-|-|-|-|-|-|\r\n|original|1371|4145|58|264|203|453|195|373|\r\n|this|630|2068|37|137|62|180|63|175|\r\n\r\nClang, `breakindent`:\r\n||insert 10000 i|insert 10000 À|10'000 i|10'000 À|220 i| 220 À|440 i| 440 À|\r\n|-|-|-|-|-|-|-|-|-|\r\n|original|46048|94520|4324|10467|464|705|761|1181|\r\n|this|4059|5666|264|383|330|448|360|494|\r\n\r\n\r\n",
    "closed_at": "2024-01-22T02:00:11Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1438872335"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1438872335"
                }
            },
            "author_association": "MEMBER",
            "body": "this publicly visible function should be called `utf_ptr2CharInfo`. The internal helper function should be named something which indicated that (`utf_ptr2CharInfo_impl` is a pattern we have used elsewhere for implementation functions which are not meant to be called directly ). ",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2023-12-31T12:00:17Z",
            "diff_hunk": "@@ -59,3 +62,62 @@ static inline int mb_strcmp_ic(bool ic, const char *s1, const char *s2)\n // multi-byte characters if needed. Only use with \"p\" > \"s\" !\n #define MB_PTR_BACK(s, p) \\\n   (p -= utf_head_off((char *)(s), (char *)(p) - 1) + 1)\n+\n+static inline CharInfo ptr2CharInfo(char const *p_in)\n+  REAL_FATTR_NONNULL_ALL REAL_FATTR_PURE REAL_FATTR_WARN_UNUSED_RESULT REAL_FATTR_ALWAYS_INLINE;\n+\n+/// Convert a UTF-8 byte sequence to a Unicode code point.\n+/// Handles ascii, multibyte sequiences and illegal sequences.\n+///\n+/// @param[in]  p_in  String to convert.\n+///\n+/// @return information abouth the character. When the sequence is illegal,\n+/// 'value' is negative, 'len' is 1.\n+static inline CharInfo ptr2CharInfo(char const *const p_in)",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1438872335",
            "id": 1438872335,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Vw3MP",
            "original_commit_id": "7358fd36af6fa5864d5e1232a0d28069749ee415",
            "original_line": 76,
            "original_position": 32,
            "original_start_line": null,
            "path": "src/nvim/mbyte.h",
            "position": null,
            "pull_request_review_id": 1799645908,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1438872335/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-31T12:00:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1438872335",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1438872700"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1438872700"
                }
            },
            "author_association": "MEMBER",
            "body": "normally we don't require typed ints for these, but as there is a constraint this struct has to be equal in representation to a `uint64_t`, maybe we should use two `u/int32_t` in this case. And/or perhaps write some comment about this.",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2023-12-31T12:02:38Z",
            "diff_hunk": "@@ -55,3 +55,13 @@ typedef struct {\n   bool vc_fail;   ///< What to do with invalid characters: if true, fail,\n                   ///< otherwise use '?'.\n } vimconv_T;\n+\n+typedef struct {\n+  int value;  /// code point\n+  int len;  /// length in bytes",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1438872700",
            "id": 1438872700,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Vw3R8",
            "original_commit_id": "7358fd36af6fa5864d5e1232a0d28069749ee415",
            "original_line": 62,
            "original_position": 7,
            "original_start_line": 60,
            "path": "src/nvim/mbyte_defs.h",
            "position": null,
            "pull_request_review_id": 1799646165,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1438872700/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-12-31T12:02:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1438872700",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1451675252"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1451675252"
                }
            },
            "author_association": "MEMBER",
            "body": "This name is strange without a `utf_` prefix. Maybe name it `utf_char_composinglike()`?",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-14T07:45:29Z",
            "diff_hunk": "@@ -722,6 +788,15 @@ bool utf_composinglike(const char *p1, const char *p2)\n   return arabic_combine(utf_ptr2char(p1), c2);\n }\n \n+/// Check if the next character is a composing character when it\n+/// comes after the first. For Arabic sometimes \"ab\" is replaced with \"c\", which\n+/// behaves like a composing character.\n+bool composinglike(int32_t const first, int32_t const next)",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1451675252",
            "id": 1451675252,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Whs50",
            "original_commit_id": "96da97ab7ecb4ce93f68e2c38fc4978c2e6cc8a6",
            "original_line": 794,
            "original_position": 160,
            "original_start_line": null,
            "path": "src/nvim/mbyte.c",
            "position": null,
            "pull_request_review_id": 1820167616,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1451675252/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-14T07:45:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1451675252",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1453073556"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1453073556"
                }
            },
            "author_association": "MEMBER",
            "body": "`kCharsizeRegular` and `kCharsizeFast` and no need for initializers.",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-16T08:24:56Z",
            "diff_hunk": "@@ -4,25 +4,88 @@\n #include <stdint.h>  // IWYU pragma: keep\n \n #include \"nvim/marktree_defs.h\"\n+#include \"nvim/mbyte_defs.h\"\n #include \"nvim/pos_defs.h\"  // IWYU pragma: keep\n #include \"nvim/types_defs.h\"\n \n-/// Argument for lbr_chartabsize().\n+typedef bool CSType;\n+\n+enum {\n+  CHARSIZE_REGULAR = false,",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1453073556",
            "id": 1453073556,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5WnCSU",
            "original_commit_id": "3b13ed8c7ffd6d22328fbd3f0ac378694761d4a9",
            "original_line": 14,
            "original_position": 12,
            "original_start_line": null,
            "path": "src/nvim/plines.h",
            "position": null,
            "pull_request_review_id": 1822753183,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1453073556/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-16T08:24:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1453073556",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1453785004"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1453785004"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I added explicit initializers to show that these constants are used as booleans and not integers. Should I still remove them?",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-16T18:01:20Z",
            "diff_hunk": "@@ -4,25 +4,88 @@\n #include <stdint.h>  // IWYU pragma: keep\n \n #include \"nvim/marktree_defs.h\"\n+#include \"nvim/mbyte_defs.h\"\n #include \"nvim/pos_defs.h\"  // IWYU pragma: keep\n #include \"nvim/types_defs.h\"\n \n-/// Argument for lbr_chartabsize().\n+typedef bool CSType;\n+\n+enum {\n+  CHARSIZE_REGULAR = false,",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1453785004",
            "id": 1453785004,
            "in_reply_to_id": 1453073556,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Wpv-s",
            "original_commit_id": "3b13ed8c7ffd6d22328fbd3f0ac378694761d4a9",
            "original_line": 14,
            "original_position": 12,
            "original_start_line": null,
            "path": "src/nvim/plines.h",
            "position": null,
            "pull_request_review_id": 1824472821,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1453785004/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-16T18:01:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1453785004",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/VanaIgr/events{/privacy}",
                "followers_url": "https://api.github.com/users/VanaIgr/followers",
                "following_url": "https://api.github.com/users/VanaIgr/following{/other_user}",
                "gists_url": "https://api.github.com/users/VanaIgr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/VanaIgr",
                "id": 65824523,
                "login": "VanaIgr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/VanaIgr/orgs",
                "received_events_url": "https://api.github.com/users/VanaIgr/received_events",
                "repos_url": "https://api.github.com/users/VanaIgr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/VanaIgr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/VanaIgr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/VanaIgr"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1453880620"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1453880620"
                }
            },
            "author_association": "MEMBER",
            "body": "They are used as enum values, where the exact representation doesn't matter. these just get co-erced to 0/1 anyway. So yes, they should be removed.",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-16T19:05:15Z",
            "diff_hunk": "@@ -4,25 +4,88 @@\n #include <stdint.h>  // IWYU pragma: keep\n \n #include \"nvim/marktree_defs.h\"\n+#include \"nvim/mbyte_defs.h\"\n #include \"nvim/pos_defs.h\"  // IWYU pragma: keep\n #include \"nvim/types_defs.h\"\n \n-/// Argument for lbr_chartabsize().\n+typedef bool CSType;\n+\n+enum {\n+  CHARSIZE_REGULAR = false,",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1453880620",
            "id": 1453880620,
            "in_reply_to_id": 1453073556,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5WqHUs",
            "original_commit_id": "3b13ed8c7ffd6d22328fbd3f0ac378694761d4a9",
            "original_line": 14,
            "original_position": 12,
            "original_start_line": null,
            "path": "src/nvim/plines.h",
            "position": null,
            "pull_request_review_id": 1824674914,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1453880620/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-16T19:05:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1453880620",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1454787741"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1454787741"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n```",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-17T07:18:48Z",
            "diff_hunk": "@@ -482,115 +478,56 @@ static int virt_text_cursor_off(chartabsize_T *cts, bool on_NUL)\n /// @param end\n void getvcol(win_T *wp, pos_T *pos, colnr_T *start, colnr_T *cursor, colnr_T *end)\n {\n-  char *ptr;     // points to current char\n-  char *posptr;  // points to char at pos->col\n-  int incr;\n-  int head;\n-  colnr_T *vts = wp->w_buffer->b_p_vts_array;\n-  int ts = (int)wp->w_buffer->b_p_ts;\n+  char *line = ml_get_buf(wp->w_buffer, pos->lnum);  // start of the line\n \n-  colnr_T vcol = 0;\n-  char *line = ptr = ml_get_buf(wp->w_buffer, pos->lnum);  // start of the line\n-\n-  if (pos->col == MAXCOL) {\n-    // continue until the NUL\n-    posptr = NULL;\n-  } else {\n-    // In a few cases the position can be beyond the end of the line.\n-    for (colnr_T i = 0; i < pos->col; i++) {\n-      if (ptr[i] == NUL) {\n-        pos->col = i;\n-        break;\n-      }\n-    }\n-    posptr = ptr + pos->col;\n-    posptr -= utf_head_off(line, posptr);\n+  uintptr_t last_pos = (uintptr_t)(line + pos->col);\n+  if (last_pos < (uintptr_t)line) {\n+    last_pos = UINTPTR_MAX;  // unsigned overflow\n   }",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1454787741",
            "id": 1454787741,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Wtkyd",
            "original_commit_id": "3b13ed8c7ffd6d22328fbd3f0ac378694761d4a9",
            "original_line": 486,
            "original_position": 543,
            "original_start_line": 483,
            "path": "src/nvim/plines.c",
            "position": null,
            "pull_request_review_id": 1826628444,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1454787741/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-01-17T07:21:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1454787741",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1454788988"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1454788988"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n      if (next.ptr - line > pos->col) {\r\n        break;\r\n      }\r\n```",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-17T07:19:31Z",
            "diff_hunk": "@@ -482,115 +478,56 @@ static int virt_text_cursor_off(chartabsize_T *cts, bool on_NUL)\n /// @param end\n void getvcol(win_T *wp, pos_T *pos, colnr_T *start, colnr_T *cursor, colnr_T *end)\n {\n-  char *ptr;     // points to current char\n-  char *posptr;  // points to char at pos->col\n-  int incr;\n-  int head;\n-  colnr_T *vts = wp->w_buffer->b_p_vts_array;\n-  int ts = (int)wp->w_buffer->b_p_ts;\n+  char *line = ml_get_buf(wp->w_buffer, pos->lnum);  // start of the line\n \n-  colnr_T vcol = 0;\n-  char *line = ptr = ml_get_buf(wp->w_buffer, pos->lnum);  // start of the line\n-\n-  if (pos->col == MAXCOL) {\n-    // continue until the NUL\n-    posptr = NULL;\n-  } else {\n-    // In a few cases the position can be beyond the end of the line.\n-    for (colnr_T i = 0; i < pos->col; i++) {\n-      if (ptr[i] == NUL) {\n-        pos->col = i;\n-        break;\n-      }\n-    }\n-    posptr = ptr + pos->col;\n-    posptr -= utf_head_off(line, posptr);\n+  uintptr_t last_pos = (uintptr_t)(line + pos->col);\n+  if (last_pos < (uintptr_t)line) {\n+    last_pos = UINTPTR_MAX;  // unsigned overflow\n   }\n-\n-  chartabsize_T cts;\n+  CharsizeArg arg;\n   bool on_NUL = false;\n-  init_chartabsize_arg(&cts, wp, pos->lnum, 0, line, line);\n-  cts.cts_max_head_vcol = -1;\n-\n-  // This function is used very often, do some speed optimizations.\n-  // When 'list', 'linebreak', 'showbreak' and 'breakindent' are not set\n-  // and there are no virtual text use a simple loop.\n-  // Also use this when 'list' is set but tabs take their normal size.\n-  if ((!wp->w_p_list || (wp->w_p_lcs_chars.tab1 != NUL))\n-      && !wp->w_p_lbr\n-      && *get_showbreak_value(wp) == NUL\n-      && !wp->w_p_bri\n-      && !cts.cts_has_virt_text) {\n-    while (true) {\n-      head = 0;\n-      int c = (uint8_t)(*ptr);\n+  CSType const type = init_charsize_arg(&arg, wp, pos->lnum, line);\n+  arg.max_head_vcol = -1;\n \n-      // make sure we don't go past the end of the line\n-      if (c == NUL) {\n-        // NUL at end of line only takes one column\n-        incr = 1;\n+  colnr_T vcol = 0;\n+  CharSize char_size;\n+  StrCharInfo ci = utf_ptr2StrCharInfo(line);\n+  if (type == CHARSIZE_FAST) {\n+    bool const special_tab = arg.special_tab;\n+    while (true) {\n+      if (*ci.ptr == NUL) {\n+        // if cursor is at NUL, it is treated like 1 cell char\n+        char_size = (CharSize){ .width = 1 };\n         break;\n       }\n-\n-      // A tab gets expanded, depending on the current column\n-      if (c == TAB) {\n-        incr = tabstop_padding(vcol, ts, vts);\n-      } else {\n-        // For utf-8, if the byte is >= 0x80, need to look at\n-        // further bytes to find the cell width.\n-        if (c >= 0x80) {\n-          incr = utf_ptr2cells(ptr);\n-        } else {\n-          incr = byte2cells(c);\n-        }\n-\n-        // If a double-cell char doesn't fit at the end of a line\n-        // it wraps to the next line, it's like this char is three\n-        // cells wide.\n-        if ((incr == 2)\n-            && wp->w_p_wrap\n-            && (MB_BYTE2LEN((uint8_t)(*ptr)) > 1)\n-            && in_win_border(wp, vcol)) {\n-          incr++;\n-          head = 1;\n-        }\n-      }\n-\n-      if ((posptr != NULL) && (ptr >= posptr)) {\n-        // character at pos->col\n+      char_size = int_charsize_fast(wp, special_tab, vcol, ci.chr.value);\n+      StrCharInfo const next = utfc_next(ci);\n+      if ((uintptr_t)next.ptr > last_pos) {\n         break;\n       }",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1454788988",
            "id": 1454788988,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5WtlF8",
            "original_commit_id": "3b13ed8c7ffd6d22328fbd3f0ac378694761d4a9",
            "original_line": 496,
            "original_position": 612,
            "original_start_line": 505,
            "path": "src/nvim/plines.c",
            "position": null,
            "pull_request_review_id": 1826628444,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1454788988/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-01-17T07:21:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1454788988",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1454789789"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1454789789"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n      if (next.ptr - line > pos->col) {\r\n        break;\r\n      }\r\n```",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-17T07:20:00Z",
            "diff_hunk": "@@ -482,115 +478,56 @@ static int virt_text_cursor_off(chartabsize_T *cts, bool on_NUL)\n /// @param end\n void getvcol(win_T *wp, pos_T *pos, colnr_T *start, colnr_T *cursor, colnr_T *end)\n {\n-  char *ptr;     // points to current char\n-  char *posptr;  // points to char at pos->col\n-  int incr;\n-  int head;\n-  colnr_T *vts = wp->w_buffer->b_p_vts_array;\n-  int ts = (int)wp->w_buffer->b_p_ts;\n+  char *line = ml_get_buf(wp->w_buffer, pos->lnum);  // start of the line\n \n-  colnr_T vcol = 0;\n-  char *line = ptr = ml_get_buf(wp->w_buffer, pos->lnum);  // start of the line\n-\n-  if (pos->col == MAXCOL) {\n-    // continue until the NUL\n-    posptr = NULL;\n-  } else {\n-    // In a few cases the position can be beyond the end of the line.\n-    for (colnr_T i = 0; i < pos->col; i++) {\n-      if (ptr[i] == NUL) {\n-        pos->col = i;\n-        break;\n-      }\n-    }\n-    posptr = ptr + pos->col;\n-    posptr -= utf_head_off(line, posptr);\n+  uintptr_t last_pos = (uintptr_t)(line + pos->col);\n+  if (last_pos < (uintptr_t)line) {\n+    last_pos = UINTPTR_MAX;  // unsigned overflow\n   }\n-\n-  chartabsize_T cts;\n+  CharsizeArg arg;\n   bool on_NUL = false;\n-  init_chartabsize_arg(&cts, wp, pos->lnum, 0, line, line);\n-  cts.cts_max_head_vcol = -1;\n-\n-  // This function is used very often, do some speed optimizations.\n-  // When 'list', 'linebreak', 'showbreak' and 'breakindent' are not set\n-  // and there are no virtual text use a simple loop.\n-  // Also use this when 'list' is set but tabs take their normal size.\n-  if ((!wp->w_p_list || (wp->w_p_lcs_chars.tab1 != NUL))\n-      && !wp->w_p_lbr\n-      && *get_showbreak_value(wp) == NUL\n-      && !wp->w_p_bri\n-      && !cts.cts_has_virt_text) {\n-    while (true) {\n-      head = 0;\n-      int c = (uint8_t)(*ptr);\n+  CSType const type = init_charsize_arg(&arg, wp, pos->lnum, line);\n+  arg.max_head_vcol = -1;\n \n-      // make sure we don't go past the end of the line\n-      if (c == NUL) {\n-        // NUL at end of line only takes one column\n-        incr = 1;\n+  colnr_T vcol = 0;\n+  CharSize char_size;\n+  StrCharInfo ci = utf_ptr2StrCharInfo(line);\n+  if (type == CHARSIZE_FAST) {\n+    bool const special_tab = arg.special_tab;\n+    while (true) {\n+      if (*ci.ptr == NUL) {\n+        // if cursor is at NUL, it is treated like 1 cell char\n+        char_size = (CharSize){ .width = 1 };\n         break;\n       }\n-\n-      // A tab gets expanded, depending on the current column\n-      if (c == TAB) {\n-        incr = tabstop_padding(vcol, ts, vts);\n-      } else {\n-        // For utf-8, if the byte is >= 0x80, need to look at\n-        // further bytes to find the cell width.\n-        if (c >= 0x80) {\n-          incr = utf_ptr2cells(ptr);\n-        } else {\n-          incr = byte2cells(c);\n-        }\n-\n-        // If a double-cell char doesn't fit at the end of a line\n-        // it wraps to the next line, it's like this char is three\n-        // cells wide.\n-        if ((incr == 2)\n-            && wp->w_p_wrap\n-            && (MB_BYTE2LEN((uint8_t)(*ptr)) > 1)\n-            && in_win_border(wp, vcol)) {\n-          incr++;\n-          head = 1;\n-        }\n-      }\n-\n-      if ((posptr != NULL) && (ptr >= posptr)) {\n-        // character at pos->col\n+      char_size = int_charsize_fast(wp, special_tab, vcol, ci.chr.value);\n+      StrCharInfo const next = utfc_next(ci);\n+      if ((uintptr_t)next.ptr > last_pos) {\n         break;\n       }\n-\n-      vcol += incr;\n-      MB_PTR_ADV(ptr);\n+      ci = next;\n+      vcol += char_size.width;\n     }\n   } else {\n     while (true) {\n-      // A tab gets expanded, depending on the current column\n-      // Other things also take up space.\n-      head = 0;\n-      incr = win_lbr_chartabsize(&cts, &head);\n-\n-      // make sure we don't go past the end of the line\n-      if (*cts.cts_ptr == NUL) {\n-        // NUL at end of line only takes one column, unless there is virtual text\n-        incr = MAX(1, cts.cts_cur_text_width_left + cts.cts_cur_text_width_right);\n+      char_size = charsize_regular(&arg, ci.ptr, vcol, ci.chr.value);\n+      if (*ci.ptr == NUL) {\n+        // if cursor is at NUL, it is treated like 1 cell char unless there is virtual text\n+        char_size.width = MAX(1, arg.cur_text_width_left + arg.cur_text_width_right);\n         on_NUL = true;\n         break;\n       }\n-\n-      if ((posptr != NULL) && (cts.cts_ptr >= posptr)) {\n-        // character at pos->col\n+      StrCharInfo const next = utfc_next(ci);\n+      if ((uintptr_t)next.ptr > last_pos) {\n         break;\n       }",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1454789789",
            "id": 1454789789,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5WtlSd",
            "original_commit_id": "3b13ed8c7ffd6d22328fbd3f0ac378694761d4a9",
            "original_line": 512,
            "original_position": 643,
            "original_start_line": 521,
            "path": "src/nvim/plines.c",
            "position": null,
            "pull_request_review_id": 1826628444,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1454789789/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-01-17T07:21:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1454789789",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1456689943"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1456689943"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    -(0x80U + (0xC0U << 6)),  // multibyte - subtract added UTF8 bits (1..10xxx and 10xxx)\r\n```",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-18T01:01:26Z",
            "diff_hunk": "@@ -528,6 +528,76 @@ int utf_ptr2cells(const char *p)\n   return 1;\n }\n \n+/// Convert a UTF-8 byte sequence to a character number.\n+/// Doesn't hanlde ascii! only multibyte and illegal sequences.\n+///\n+/// @param[in]  p      String to convert.\n+/// @param[in]  len    Length of the character in bytes, 0 or 1 if illegal.\n+///\n+/// @return Unicode codepoint. A negative value When the sequence is illegal.\n+int32_t utf_ptr2CharInfo_impl(uint8_t const *p, uintptr_t const len)\n+  FUNC_ATTR_PURE FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT\n+{\n+// uint8_t is a reminder for clang\n+#define CHECK if (EXPECT((uint8_t)(cur & 0xC0U) != 0x80U, false)) goto errorret\n+\n+  static uint32_t const corrections[] = {\n+    (1U << 31) + 0x80U,  // invalid - set invalid bits (safe to add as first 2 bytes\n+    (1U << 31) + 0x80U,  // won't affect highest bit in normal ret). 0x80U for errorret\n+    -(0x80U + (0xC0U << 6)),  // multybyte - subtract added UTF8 bits (1..10xxx and 10xxx)",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1456689943",
            "id": 1456689943,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5W01MX",
            "original_commit_id": "864e7d38a87c77ec027d7a968bc893d86b00f6bb",
            "original_line": 547,
            "original_position": 20,
            "original_start_line": null,
            "path": "src/nvim/mbyte.c",
            "position": null,
            "pull_request_review_id": 1828511140,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1456689943/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-18T01:01:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1456689943",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1456691046"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1456691046"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n/// Doesn't handle ascii! only multibyte and illegal sequences.\r\n```",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-18T01:03:28Z",
            "diff_hunk": "@@ -528,6 +528,76 @@ int utf_ptr2cells(const char *p)\n   return 1;\n }\n \n+/// Convert a UTF-8 byte sequence to a character number.\n+/// Doesn't hanlde ascii! only multibyte and illegal sequences.",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1456691046",
            "id": 1456691046,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5W01dm",
            "original_commit_id": "864e7d38a87c77ec027d7a968bc893d86b00f6bb",
            "original_line": 532,
            "original_position": 5,
            "original_start_line": null,
            "path": "src/nvim/mbyte.c",
            "position": null,
            "pull_request_review_id": 1828512680,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1456691046/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-18T01:03:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1456691046",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1456706413"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1456706413"
                }
            },
            "author_association": "MEMBER",
            "body": "`special_tab` doesn't seem an accurate name for this. `use_tabstop` seems better.",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-18T01:29:32Z",
            "diff_hunk": "@@ -102,127 +75,80 @@ int linetabsize(win_T *wp, linenr_T lnum)\n   return win_linetabsize(wp, lnum, ml_get_buf(wp->w_buffer, lnum), (colnr_T)MAXCOL);\n }\n \n-void win_linetabsize_cts(chartabsize_T *cts, colnr_T len)\n-{\n-  for (; *cts->cts_ptr != NUL && (len == MAXCOL || cts->cts_ptr < cts->cts_line + len);\n-       MB_PTR_ADV(cts->cts_ptr)) {\n-    cts->cts_vcol += win_lbr_chartabsize(cts, NULL);\n-  }\n-  // check for inline virtual text after the end of the line\n-  if (len == MAXCOL && cts->cts_has_virt_text && *cts->cts_ptr == NUL) {\n-    win_lbr_chartabsize(cts, NULL);\n-    cts->cts_vcol += cts->cts_cur_text_width_left + cts->cts_cur_text_width_right;\n-  }\n-}\n-\n /// Prepare the structure passed to chartabsize functions.\n ///\n /// \"line\" is the start of the line, \"ptr\" is the first relevant character.\n /// When \"lnum\" is zero do not use inline virtual text.\n-void init_chartabsize_arg(chartabsize_T *cts, win_T *wp, linenr_T lnum, colnr_T col, char *line,\n-                          char *ptr)\n+CSType init_charsize_arg(CharsizeArg *cts, win_T *wp, linenr_T lnum, char *line)\n {\n-  cts->cts_win = wp;\n-  cts->cts_vcol = col;\n-  cts->cts_line = line;\n-  cts->cts_ptr = ptr;\n-  cts->cts_max_head_vcol = 0;\n-  cts->cts_cur_text_width_left = 0;\n-  cts->cts_cur_text_width_right = 0;\n-  cts->cts_has_virt_text = false;\n-  cts->cts_row = lnum - 1;\n-\n-  if (cts->cts_row >= 0 && wp->w_buffer->b_virt_text_inline > 0) {\n-    marktree_itr_get(wp->w_buffer->b_marktree, cts->cts_row, 0, cts->cts_iter);\n-    MTKey mark = marktree_itr_current(cts->cts_iter);\n-    if (mark.pos.row == cts->cts_row) {\n-      cts->cts_has_virt_text = true;\n+  cts->win = wp;\n+  cts->line = line;\n+  cts->max_head_vcol = 0;\n+  cts->cur_text_width_left = 0;\n+  cts->cur_text_width_right = 0;\n+  cts->virt_row = -1;\n+  cts->indent_width = INT_MIN;\n+  cts->special_tab = !wp->w_p_list || wp->w_p_lcs_chars.tab1;",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1456706413",
            "id": 1456706413,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5W05Nt",
            "original_commit_id": "864e7d38a87c77ec027d7a968bc893d86b00f6bb",
            "original_line": 91,
            "original_position": 104,
            "original_start_line": null,
            "path": "src/nvim/plines.c",
            "position": null,
            "pull_request_review_id": 1828536859,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1456706413/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-18T01:29:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1456706413",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1456725953"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1456725953"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n/// Like charsize_regular(), except it doesn't handle virtual text,\r\n```",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-18T01:58:24Z",
            "diff_hunk": "@@ -388,39 +321,49 @@ int win_lbr_chartabsize(chartabsize_T *cts, int *headp)\n     }\n   }\n \n-  return size;\n+  return (CharSize){ .width = size, .head = head };\n }\n \n-/// Like win_lbr_chartabsize(), except that we know 'linebreak' is off and\n-/// 'wrap' is on.  This means we need to check for a double-byte character that\n-/// doesn't fit at the end of the screen line.\n-///\n-/// @param cts\n-/// @param headp\n+/// Like cts_charsize_regular, except it doesn't handle virtual text,",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1456725953",
            "id": 1456725953,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5W09_B",
            "original_commit_id": "864e7d38a87c77ec027d7a968bc893d86b00f6bb",
            "original_line": 327,
            "original_position": 373,
            "original_start_line": null,
            "path": "src/nvim/plines.c",
            "position": null,
            "pull_request_review_id": 1828566822,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1456725953/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-18T02:01:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1456725953",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1456726509"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1456726509"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n/// \"cts->cur_text_width_left\" and \"cts->cur_text_width_right\" are set\r\n```",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-18T01:59:41Z",
            "diff_hunk": "@@ -4,25 +4,88 @@\n #include <stdint.h>  // IWYU pragma: keep\n \n #include \"nvim/marktree_defs.h\"\n+#include \"nvim/mbyte_defs.h\"\n #include \"nvim/pos_defs.h\"  // IWYU pragma: keep\n #include \"nvim/types_defs.h\"\n \n-/// Argument for lbr_chartabsize().\n+typedef bool CSType;\n+\n+enum {\n+  kCharsizeRegular,\n+  kCharsizeFast,\n+};\n+\n+/// Argument for char size functions.\n typedef struct {\n-  win_T *cts_win;\n-  char *cts_line;                ///< start of the line\n-  char *cts_ptr;                 ///< current position in line\n-  int cts_row;\n+  win_T *win;\n+  char *line;                ///< start of the line\n+\n+  bool special_tab;\n+  int indent_width;          ///< width of showbreak and breakindent on wrapped lines\n+                             ///  INT_MIN if not yet calculated\n \n-  bool cts_has_virt_text;        ///< true if if there is inline virtual text\n-  int cts_cur_text_width_left;   ///< width of virtual text left of cursor\n-  int cts_cur_text_width_right;  ///< width of virtual text right of cursor\n-  MarkTreeIter cts_iter[1];\n+  int virt_row;              ///< line number, -1 if no virtual text\n+  int cur_text_width_left;   ///< width of virtual text left of cursor\n+  int cur_text_width_right;  ///< width of virtual text right of cursor\n \n-  int cts_vcol;                  ///< virtual column at current position\n-  int cts_max_head_vcol;         ///< see win_lbr_chartabsize()\n-} chartabsize_T;\n+  int max_head_vcol;         ///< see charsize_regular()\n+  MarkTreeIter iter[1];\n+} CharsizeArg;\n+\n+typedef struct {\n+  int width;\n+  int head;  // size of breakindent etc. before the character (included in width)\n+} CharSize;\n \n #ifdef INCLUDE_GENERATED_DECLARATIONS\n # include \"plines.h.generated.h\"\n #endif\n+\n+static inline CharSize cts_charsize(CSType type, int vcol, char *ptr, int32_t chr, CharsizeArg *arg)\n+  REAL_FATTR_NONNULL_ALL REAL_FATTR_WARN_UNUSED_RESULT REAL_FATTR_ALWAYS_INLINE;\n+\n+/// Get the number of characters taken up on the screen for the given cts.\n+/// \"cts->cts_cur_text_width_left\" and \"cts->cts_cur_text_width_right\" are set",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1456726509",
            "id": 1456726509,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5W0-Ht",
            "original_commit_id": "864e7d38a87c77ec027d7a968bc893d86b00f6bb",
            "original_line": 48,
            "original_position": 57,
            "original_start_line": null,
            "path": "src/nvim/plines.h",
            "position": null,
            "pull_request_review_id": 1828566822,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1456726509/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-18T02:01:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1456726509",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1456726903"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1456726903"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n/// \"cts->cur_text_width_left\" and \"cts->cur_text_width_right\" are set\r\n```",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-18T02:00:33Z",
            "diff_hunk": "@@ -102,127 +75,80 @@ int linetabsize(win_T *wp, linenr_T lnum)\n   return win_linetabsize(wp, lnum, ml_get_buf(wp->w_buffer, lnum), (colnr_T)MAXCOL);\n }\n \n-void win_linetabsize_cts(chartabsize_T *cts, colnr_T len)\n-{\n-  for (; *cts->cts_ptr != NUL && (len == MAXCOL || cts->cts_ptr < cts->cts_line + len);\n-       MB_PTR_ADV(cts->cts_ptr)) {\n-    cts->cts_vcol += win_lbr_chartabsize(cts, NULL);\n-  }\n-  // check for inline virtual text after the end of the line\n-  if (len == MAXCOL && cts->cts_has_virt_text && *cts->cts_ptr == NUL) {\n-    win_lbr_chartabsize(cts, NULL);\n-    cts->cts_vcol += cts->cts_cur_text_width_left + cts->cts_cur_text_width_right;\n-  }\n-}\n-\n /// Prepare the structure passed to chartabsize functions.\n ///\n /// \"line\" is the start of the line, \"ptr\" is the first relevant character.\n /// When \"lnum\" is zero do not use inline virtual text.\n-void init_chartabsize_arg(chartabsize_T *cts, win_T *wp, linenr_T lnum, colnr_T col, char *line,\n-                          char *ptr)\n+CSType init_charsize_arg(CharsizeArg *cts, win_T *wp, linenr_T lnum, char *line)\n {\n-  cts->cts_win = wp;\n-  cts->cts_vcol = col;\n-  cts->cts_line = line;\n-  cts->cts_ptr = ptr;\n-  cts->cts_max_head_vcol = 0;\n-  cts->cts_cur_text_width_left = 0;\n-  cts->cts_cur_text_width_right = 0;\n-  cts->cts_has_virt_text = false;\n-  cts->cts_row = lnum - 1;\n-\n-  if (cts->cts_row >= 0 && wp->w_buffer->b_virt_text_inline > 0) {\n-    marktree_itr_get(wp->w_buffer->b_marktree, cts->cts_row, 0, cts->cts_iter);\n-    MTKey mark = marktree_itr_current(cts->cts_iter);\n-    if (mark.pos.row == cts->cts_row) {\n-      cts->cts_has_virt_text = true;\n+  cts->win = wp;\n+  cts->line = line;\n+  cts->max_head_vcol = 0;\n+  cts->cur_text_width_left = 0;\n+  cts->cur_text_width_right = 0;\n+  cts->virt_row = -1;\n+  cts->indent_width = INT_MIN;\n+  cts->special_tab = !wp->w_p_list || wp->w_p_lcs_chars.tab1;\n+\n+  if (lnum > 0 && wp->w_buffer->b_virt_text_inline > 0) {\n+    marktree_itr_get(wp->w_buffer->b_marktree, lnum - 1, 0, cts->iter);\n+    MTKey mark = marktree_itr_current(cts->iter);\n+    if (mark.pos.row == lnum - 1) {\n+      cts->virt_row = lnum - 1;\n     }\n   }\n-}\n-\n-/// Free any allocated item in \"cts\".\n-void clear_chartabsize_arg(chartabsize_T *cts)\n-{\n-}\n \n-/// like win_chartabsize(), but also check for line breaks on the screen\n-///\n-/// @param cts\n-///\n-/// @return The number of characters taken up on the screen.\n-int lbr_chartabsize(chartabsize_T *cts)\n-{\n-  if (!curwin->w_p_lbr && *get_showbreak_value(curwin) == NUL\n-      && !curwin->w_p_bri && !cts->cts_has_virt_text) {\n-    if (curwin->w_p_wrap) {\n-      return win_nolbr_chartabsize(cts, NULL);\n-    }\n-    return win_chartabsize(curwin, cts->cts_ptr, cts->cts_vcol);\n+  if (cts->virt_row >= 0\n+      || (wp->w_p_wrap && (wp->w_p_lbr || wp->w_p_bri || *get_showbreak_value(wp) != NUL))) {\n+    return kCharsizeRegular;\n+  } else {\n+    return kCharsizeFast;\n   }\n-  return win_lbr_chartabsize(cts, NULL);\n }\n \n-/// Call lbr_chartabsize() and advance the pointer.\n-///\n-/// @param cts\n-///\n-/// @return The number of characters take up on the screen.\n-int lbr_chartabsize_adv(chartabsize_T *cts)\n-{\n-  int retval = lbr_chartabsize(cts);\n-  MB_PTR_ADV(cts->cts_ptr);\n-  return retval;\n-}\n-\n-/// Get the number of characters taken up on the screen indicated by \"cts\".\n+/// Get the number of characters taken up on the screen for the given cts and position.\n /// \"cts->cts_cur_text_width_left\" and \"cts->cts_cur_text_width_right\" are set",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1456726903",
            "id": 1456726903,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5W0-N3",
            "original_commit_id": "864e7d38a87c77ec027d7a968bc893d86b00f6bb",
            "original_line": 110,
            "original_position": 156,
            "original_start_line": null,
            "path": "src/nvim/plines.c",
            "position": null,
            "pull_request_review_id": 1828566822,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1456726903/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-18T02:01:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1456726903",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1456727158"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1456727158"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n/// Like charsize_regular(), except it doesn't handle virtual text,\r\n```",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-18T02:01:01Z",
            "diff_hunk": "@@ -388,39 +321,49 @@ int win_lbr_chartabsize(chartabsize_T *cts, int *headp)\n     }\n   }\n \n-  return size;\n+  return (CharSize){ .width = size, .head = head };\n }\n \n-/// Like win_lbr_chartabsize(), except that we know 'linebreak' is off and\n-/// 'wrap' is on.  This means we need to check for a double-byte character that\n-/// doesn't fit at the end of the screen line.\n-///\n-/// @param cts\n-/// @param headp\n+/// Like cts_charsize_regular, except it doesn't handle virtual text,\n+/// linebreak, breakindent and showbreak. Handles normal characters, tabs and wrapping.\n+/// This function is always inlined.\n ///\n-/// @return The number of characters take up on the screen.\n-static int win_nolbr_chartabsize(chartabsize_T *cts, int *headp)\n+/// @see charsize_regular\n+/// @see charsize_fast\n+static inline CharSize int_charsize_fast(win_T *const wp, bool special_tab, colnr_T const vcol,\n+                                         int32_t const cur_char)\n+  FUNC_ATTR_PURE FUNC_ATTR_ALWAYS_INLINE\n {\n-  win_T *wp = cts->cts_win;\n-  char *s = cts->cts_ptr;\n-  colnr_T col = cts->cts_vcol;\n-\n-  if ((*s == TAB) && (!wp->w_p_list || wp->w_p_lcs_chars.tab1)) {\n-    return tabstop_padding(col,\n-                           wp->w_buffer->b_p_ts,\n-                           wp->w_buffer->b_p_vts_array);\n-  }\n-  int n = ptr2cells(s);\n-\n-  // Add one cell for a double-width character in the last column of the\n-  // window, displayed with a \">\".\n-  if ((n == 2) && (MB_BYTE2LEN((uint8_t)(*s)) > 1) && in_win_border(wp, col)) {\n-    if (headp != NULL) {\n-      *headp = 1;\n+  // A tab gets expanded, depending on the current column\n+  if (cur_char == TAB && special_tab) {\n+    return (CharSize){\n+      .width = tabstop_padding(vcol, wp->w_buffer->b_p_ts,\n+                               wp->w_buffer->b_p_vts_array)\n+    };\n+  } else {\n+    int width;\n+    if (cur_char < 0) {\n+      width = kInvalidByteCells;\n+    } else {\n+      width = char2cells(cur_char);\n+    }\n+\n+    // If a double-width char doesn't fit at the end of a line, it wraps to the next line,\n+    // and the last column displays a '>'.\n+    if (width == 2 && cur_char >= 0x80 && wp->w_p_wrap && in_win_border(wp, vcol)) {\n+      return (CharSize){ .width = 3, .head = 1 };\n+    } else {\n+      return (CharSize){ .width = width };\n     }\n-    return 3;\n   }\n-  return n;\n+}\n+\n+/// Like cts_charsize_regular, except it doesn't handle virtual text,",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1456727158",
            "id": 1456727158,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5W0-R2",
            "original_commit_id": "864e7d38a87c77ec027d7a968bc893d86b00f6bb",
            "original_line": 361,
            "original_position": 427,
            "original_start_line": null,
            "path": "src/nvim/plines.c",
            "position": null,
            "pull_request_review_id": 1828566822,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1456727158/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-18T02:01:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1456727158",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1456781544"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1456781544"
                }
            },
            "author_association": "MEMBER",
            "body": "Using `goto` with this label looks ugly. How much is this faster than using `return (int)v0` directly?",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-18T03:23:56Z",
            "diff_hunk": "@@ -597,45 +667,41 @@ size_t mb_string2cells_len(const char *str, size_t size)\n ///\n /// @return Unicode codepoint or byte value.\n int utf_ptr2char(const char *const p_in)\n-  FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT\n+  FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL\n {\n   uint8_t *p = (uint8_t *)p_in;\n-  if (p[0] < 0x80) {  // Be quick for ASCII.\n-    return p[0];\n+  uint32_t v0 = p[0];\n+  if (EXPECT(v0 < 0x80U, true)) {  // Be quick for ASCII.\n+fret:",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1456781544",
            "id": 1456781544,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5W1Ljo",
            "original_commit_id": "1d35144678c1ee07e21dcbb11a97055b5f67e19a",
            "original_line": 675,
            "original_position": 89,
            "original_start_line": null,
            "path": "src/nvim/mbyte.c",
            "position": null,
            "pull_request_review_id": 1828651470,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1456781544/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-18T03:23:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1456781544",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1458232085"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458232085"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Generated code is the same in release mode",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-19T03:04:23Z",
            "diff_hunk": "@@ -597,45 +667,41 @@ size_t mb_string2cells_len(const char *str, size_t size)\n ///\n /// @return Unicode codepoint or byte value.\n int utf_ptr2char(const char *const p_in)\n-  FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT\n+  FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL\n {\n   uint8_t *p = (uint8_t *)p_in;\n-  if (p[0] < 0x80) {  // Be quick for ASCII.\n-    return p[0];\n+  uint32_t v0 = p[0];\n+  if (EXPECT(v0 < 0x80U, true)) {  // Be quick for ASCII.\n+fret:",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1458232085",
            "id": 1458232085,
            "in_reply_to_id": 1456781544,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5W6tsV",
            "original_commit_id": "1d35144678c1ee07e21dcbb11a97055b5f67e19a",
            "original_line": 675,
            "original_position": 89,
            "original_start_line": null,
            "path": "src/nvim/mbyte.c",
            "position": null,
            "pull_request_review_id": 1831202187,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458232085/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-19T03:04:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458232085",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/VanaIgr/events{/privacy}",
                "followers_url": "https://api.github.com/users/VanaIgr/followers",
                "following_url": "https://api.github.com/users/VanaIgr/following{/other_user}",
                "gists_url": "https://api.github.com/users/VanaIgr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/VanaIgr",
                "id": 65824523,
                "login": "VanaIgr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/VanaIgr/orgs",
                "received_events_url": "https://api.github.com/users/VanaIgr/received_events",
                "repos_url": "https://api.github.com/users/VanaIgr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/VanaIgr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/VanaIgr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/VanaIgr"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1458232794"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458232794"
                }
            },
            "author_association": "MEMBER",
            "body": "Hmm, then I think it's better to remove this label and use `return (int)v0` directly.",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-19T03:06:01Z",
            "diff_hunk": "@@ -597,45 +667,41 @@ size_t mb_string2cells_len(const char *str, size_t size)\n ///\n /// @return Unicode codepoint or byte value.\n int utf_ptr2char(const char *const p_in)\n-  FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT\n+  FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL\n {\n   uint8_t *p = (uint8_t *)p_in;\n-  if (p[0] < 0x80) {  // Be quick for ASCII.\n-    return p[0];\n+  uint32_t v0 = p[0];\n+  if (EXPECT(v0 < 0x80U, true)) {  // Be quick for ASCII.\n+fret:",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1458232794",
            "id": 1458232794,
            "in_reply_to_id": 1456781544,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5W6t3a",
            "original_commit_id": "1d35144678c1ee07e21dcbb11a97055b5f67e19a",
            "original_line": 675,
            "original_position": 89,
            "original_start_line": null,
            "path": "src/nvim/mbyte.c",
            "position": null,
            "pull_request_review_id": 1831205787,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458232794/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-19T03:06:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458232794",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1458314234"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458314234"
                }
            },
            "author_association": "MEMBER",
            "body": "Lint failure\r\n```suggestion\r\n    arg.max_head_vcol = start_col;\r\n```",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-19T04:12:59Z",
            "diff_hunk": "@@ -1336,30 +1336,30 @@ int win_line(win_T *wp, linenr_T lnum, int startrow, int endrow, int col_rows, s\n \n   if (start_col > 0 && col_rows == 0) {\n     char *prev_ptr = ptr;\n-    chartabsize_T cts;\n-    int charsize = 0;\n-    int head = 0;\n-\n-    init_chartabsize_arg(&cts, wp, lnum, wlv.vcol, line, ptr);\n-    cts.cts_max_head_vcol = start_col;\n-    while (cts.cts_vcol < start_col && *cts.cts_ptr != NUL) {\n-      head = 0;\n-      charsize = win_lbr_chartabsize(&cts, &head);\n-      cts.cts_vcol += charsize;\n-      prev_ptr = cts.cts_ptr;\n-      MB_PTR_ADV(cts.cts_ptr);\n+    CharSize cs = { 0 };\n+\n+    CharsizeArg arg;\n+    CSType type = init_charsize_arg(&arg, wp, lnum, line);\n+    arg.max_head_vcol = (int)start_col;",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1458314234",
            "id": 1458314234,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5W7Bv6",
            "original_commit_id": "13bc01f6db8849097296726fc2da3036239139ac",
            "original_line": 1343,
            "original_position": 20,
            "original_start_line": null,
            "path": "src/nvim/drawline.c",
            "position": null,
            "pull_request_review_id": 1831423078,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458314234/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-19T04:12:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458314234",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1458399496"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458399496"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  if (EXPECT((uint8_t)(v5 & 0xC0U) != 0x80U, false)) {\r\n```",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-19T06:13:59Z",
            "diff_hunk": "@@ -597,45 +667,40 @@ size_t mb_string2cells_len(const char *str, size_t size)\n ///\n /// @return Unicode codepoint or byte value.\n int utf_ptr2char(const char *const p_in)\n-  FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT\n+  FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL\n {\n   uint8_t *p = (uint8_t *)p_in;\n-  if (p[0] < 0x80) {  // Be quick for ASCII.\n-    return p[0];\n+  uint32_t v0 = p[0];\n+  if (EXPECT(v0 < 0x80U, true)) {  // Be quick for ASCII.\n+    return (int)v0;\n   }\n \n-  const uint8_t len = utf8len_tab_zero[p[0]];\n-  if (len > 1 && (p[1] & 0xc0) == 0x80) {\n-    if (len == 2) {\n-      return ((p[0] & 0x1f) << 6) + (p[1] & 0x3f);\n-    }\n-    if ((p[2] & 0xc0) == 0x80) {\n-      if (len == 3) {\n-        return (((p[0] & 0x0f) << 12) + ((p[1] & 0x3f) << 6)\n-                + (p[2] & 0x3f));\n-      }\n-      if ((p[3] & 0xc0) == 0x80) {\n-        if (len == 4) {\n-          return (((p[0] & 0x07) << 18) + ((p[1] & 0x3f) << 12)\n-                  + ((p[2] & 0x3f) << 6) + (p[3] & 0x3f));\n-        }\n-        if ((p[4] & 0xc0) == 0x80) {\n-          if (len == 5) {\n-            return (((p[0] & 0x03) << 24) + ((p[1] & 0x3f) << 18)\n-                    + ((p[2] & 0x3f) << 12) + ((p[3] & 0x3f) << 6)\n-                    + (p[4] & 0x3f));\n-          }\n-          if ((p[5] & 0xc0) == 0x80 && len == 6) {\n-            return (((p[0] & 0x01) << 30) + ((p[1] & 0x3f) << 24)\n-                    + ((p[2] & 0x3f) << 18) + ((p[3] & 0x3f) << 12)\n-                    + ((p[4] & 0x3f) << 6) + (p[5] & 0x3f));\n-          }\n-        }\n-      }\n-    }\n+  const uint8_t len = utf8len_tab[v0];\n+  if (EXPECT(len < 2, false)) {\n+    return (int)v0;\n   }\n-  // Illegal value: just return the first byte.\n-  return p[0];\n+\n+#define STEP(i, ret) uint32_t const v##i = p[i]; \\\n+  if (EXPECT((uint8_t)(v##i & 0xC0U) != 0x80U, false)) return (int)v0; \\\n+  if (EXPECT(len == i + 1, false)) return (int)(ret)\n+#define S(s) ((uint32_t)0x80U << s)\n+\n+  STEP(1, (v0 << 6) + v1 - ((0xC0U << 6) + S(0)));\n+  STEP(2, (v0 << 12) + (v1 << 6) + v2 - ((0xE0U << 12) + S(6) + S(0)));\n+  STEP(3, (v0 << 18) + (v1 << 12) + (v2 << 6) + v3\n+       - ((0xF0U << 18) + S(12) + S(6) + S(0)));\n+  STEP(4, (v0 << 24) + (v1 << 18) + (v2 << 12) + (v3 << 6) + v4\n+       - ((0xF8U << 24) + S(18) + S(12) + S(6) + S(0)));\n+  // len == 6\n+  uint32_t const v5 = p[5];\n+  if (EXPECT((uint8_t)(v5 & 0xc0U) != 0x80U, false)) {",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1458399496",
            "id": 1458399496,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5W7WkI",
            "original_commit_id": "13bc01f6db8849097296726fc2da3036239139ac",
            "original_line": 696,
            "original_position": 141,
            "original_start_line": null,
            "path": "src/nvim/mbyte.c",
            "position": null,
            "pull_request_review_id": 1831640356,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458399496/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-19T06:23:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458399496",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1458400626"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458400626"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  REAL_FATTR_NONNULL_ALL REAL_FATTR_WARN_UNUSED_RESULT REAL_FATTR_ALWAYS_INLINE;\r\n\r\n```",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-19T06:15:32Z",
            "diff_hunk": "@@ -4,25 +4,93 @@\n #include <stdint.h>  // IWYU pragma: keep\n \n #include \"nvim/marktree_defs.h\"\n+#include \"nvim/mbyte_defs.h\"\n #include \"nvim/pos_defs.h\"  // IWYU pragma: keep\n #include \"nvim/types_defs.h\"\n \n-/// Argument for lbr_chartabsize().\n+typedef bool CSType;\n+\n+enum {\n+  kCharsizeRegular,\n+  kCharsizeFast,\n+};\n+\n+/// Argument for char size functions.\n typedef struct {\n-  win_T *cts_win;\n-  char *cts_line;                ///< start of the line\n-  char *cts_ptr;                 ///< current position in line\n-  int cts_row;\n+  win_T *win;\n+  char *line;                ///< start of the line\n+\n+  bool use_tabstop;          ///< use tabstop for tab insted of counting it as ^I\n+  int indent_width;          ///< width of showbreak and breakindent on wrapped lines\n+                             ///  INT_MIN if not yet calculated\n \n-  bool cts_has_virt_text;        ///< true if if there is inline virtual text\n-  int cts_cur_text_width_left;   ///< width of virtual text left of cursor\n-  int cts_cur_text_width_right;  ///< width of virtual text right of cursor\n-  MarkTreeIter cts_iter[1];\n+  int virt_row;              ///< line number, -1 if no virtual text\n+  int cur_text_width_left;   ///< width of virtual text left of cursor\n+  int cur_text_width_right;  ///< width of virtual text right of cursor\n \n-  int cts_vcol;                  ///< virtual column at current position\n-  int cts_max_head_vcol;         ///< see win_lbr_chartabsize()\n-} chartabsize_T;\n+  int max_head_vcol;         ///< see charsize_regular()\n+  MarkTreeIter iter[1];\n+} CharsizeArg;\n+\n+typedef struct {\n+  int width;\n+  int head;  // size of breakindent etc. before the character (included in width)\n+} CharSize;\n \n #ifdef INCLUDE_GENERATED_DECLARATIONS\n # include \"plines.h.generated.h\"\n #endif\n+\n+static inline CharSize cts_charsize(CSType type, int vcol, char *ptr, int32_t chr, CharsizeArg *arg)\n+  REAL_FATTR_NONNULL_ALL REAL_FATTR_WARN_UNUSED_RESULT REAL_FATTR_ALWAYS_INLINE;\n+\n+/// Get the number of characters taken up on the screen for the given cts.\n+/// \"arg->cur_text_width_left\" and \"arg->cur_text_width_right\" are set\n+/// to the extra size for inline virtual text.\n+///\n+/// When \"arg->max_head_vcol\" is positive, only count in \"head\" the size\n+/// of 'showbreak'/'breakindent' before \"arg->max_head_vcol\".\n+/// When \"arg->max_head_vcol\" is negative, only count in \"head\" the size\n+/// of 'showbreak'/'breakindent' before where cursor should be placed.\n+static inline CharSize cts_charsize(CSType type, int vcol, char *ptr, int32_t chr, CharsizeArg *arg)\n+{\n+  if (type == kCharsizeFast) {\n+    return charsize_fast(arg, vcol, chr);\n+  } else {\n+    return charsize_regular(arg, ptr, vcol, chr);\n+  }\n+}\n+\n+static inline int linetabsize_str(char *s)\n+  REAL_FATTR_NONNULL_ALL REAL_FATTR_WARN_UNUSED_RESULT REAL_FATTR_ALWAYS_INLINE;",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1458400626",
            "id": 1458400626,
            "line": 67,
            "node_id": "PRRC_kwDOAPphoM5W7W1y",
            "original_commit_id": "13bc01f6db8849097296726fc2da3036239139ac",
            "original_line": 67,
            "original_position": 74,
            "original_start_line": null,
            "path": "src/nvim/plines.h",
            "position": 76,
            "pull_request_review_id": 1831640356,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458400626/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-19T06:23:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458400626",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1458457367"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458457367"
                }
            },
            "author_association": "MEMBER",
            "body": "If I understand correctly, when this function returns a negative value, the actual value doesn't really matter, so I think it's less confusing if it just returns `-1`.\r\n```suggestion\r\n    return -1;\r\n```\r\n\r\nThe `ASSUME` macro can also be removed from `macros_defs.h` in this case.",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-19T06:47:32Z",
            "diff_hunk": "@@ -528,6 +528,76 @@ int utf_ptr2cells(const char *p)\n   return 1;\n }\n \n+/// Convert a UTF-8 byte sequence to a character number.\n+/// Doesn't handle ascii! only multibyte and illegal sequences.\n+///\n+/// @param[in]  p      String to convert.\n+/// @param[in]  len    Length of the character in bytes, 0 or 1 if illegal.\n+///\n+/// @return Unicode codepoint. A negative value When the sequence is illegal.\n+int32_t utf_ptr2CharInfo_impl(uint8_t const *p, uintptr_t const len)\n+  FUNC_ATTR_PURE FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT\n+{\n+// uint8_t is a reminder for clang to use smaller cmp\n+#define CHECK if (EXPECT((uint8_t)(cur & 0xC0U) != 0x80U, false)) goto errorret\n+\n+  static uint32_t const corrections[] = {\n+    (1U << 31) + 0x80U,  // invalid - set invalid bits (safe to add as first 2 bytes\n+    (1U << 31) + 0x80U,  // won't affect highest bit in normal ret). 0x80U for errorret\n+    -(0x80U + (0xC0U << 6)),  // multibyte - subtract added UTF8 bits (1..10xxx and 10xxx)\n+    -(0x80U + (0x80U << 6) + (0xE0U << 12)),\n+    -(0x80U + (0x80U << 6) + (0x80U << 12) + (0xF0U << 18)),\n+    -(0x80U + (0x80U << 6) + (0x80U << 12) + (0x80U << 18) + (0xF8U << 24)),\n+    -(0x80U + (0x80U << 6) + (0x80U << 12) + (0x80U << 18) + (0x80U << 24) + (0xF4U << 30)),\n+  };\n+\n+  // len is 0-6, but declared uintptr_t to avoid zeroing out upper bits\n+  uint32_t const corr = corrections[len];\n+  uint8_t cur;\n+\n+  // reading second byte unconditionally, safe for invalid\n+  // as it cannot be the last byte, not safe for ascii\n+  uint32_t code_point = ((uint32_t)p[0] << 6) + (cur = p[1]);\n+  CHECK;\n+  if ((uint32_t)len < 3) {\n+    goto ret;  // len == 0, 1, 2\n+  }\n+\n+  code_point = (code_point << 6) + (cur = p[2]);\n+  CHECK;\n+  if ((uint32_t)len == 3) {\n+    goto ret;\n+  }\n+\n+  code_point = (code_point << 6) + (cur = p[3]);\n+  CHECK;\n+  if ((uint32_t)len == 4) {\n+    goto ret;\n+  }\n+\n+  code_point = (code_point << 6) + (cur = p[4]);\n+  CHECK;\n+  if ((uint32_t)len == 5) {\n+    goto ret;\n+  }\n+\n+  code_point = (code_point << 6) + (cur = p[5]);\n+  if ((uint8_t)(cur & 0xC0U) != 0x80U) {\n+errorret:;\n+    // 8th bit of corr is always 1, int32_t guerantees\n+    // 2's complement. Value is negative\n+    int32_t const result = (int32_t)(corr << 24);\n+    ASSUME(result < 0);\n+    return result;",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1458457367",
            "id": 1458457367,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5W7ksX",
            "original_commit_id": "13bc01f6db8849097296726fc2da3036239139ac",
            "original_line": 591,
            "original_position": 64,
            "original_start_line": 586,
            "path": "src/nvim/mbyte.c",
            "position": null,
            "pull_request_review_id": 1831709805,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458457367/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-01-19T07:11:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458457367",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1458457599"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458457599"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n#define CHECK if (EXPECT((uint8_t)(cur & 0xC0U) != 0x80U, false)) return -1\r\n```",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-19T06:47:48Z",
            "diff_hunk": "@@ -528,6 +528,76 @@ int utf_ptr2cells(const char *p)\n   return 1;\n }\n \n+/// Convert a UTF-8 byte sequence to a character number.\n+/// Doesn't handle ascii! only multibyte and illegal sequences.\n+///\n+/// @param[in]  p      String to convert.\n+/// @param[in]  len    Length of the character in bytes, 0 or 1 if illegal.\n+///\n+/// @return Unicode codepoint. A negative value When the sequence is illegal.\n+int32_t utf_ptr2CharInfo_impl(uint8_t const *p, uintptr_t const len)\n+  FUNC_ATTR_PURE FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT\n+{\n+// uint8_t is a reminder for clang to use smaller cmp\n+#define CHECK if (EXPECT((uint8_t)(cur & 0xC0U) != 0x80U, false)) goto errorret",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1458457599",
            "id": 1458457599,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5W7kv_",
            "original_commit_id": "13bc01f6db8849097296726fc2da3036239139ac",
            "original_line": 542,
            "original_position": 15,
            "original_start_line": null,
            "path": "src/nvim/mbyte.c",
            "position": null,
            "pull_request_review_id": 1831709805,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458457599/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-19T06:49:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458457599",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1458462905"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458462905"
                }
            },
            "author_association": "MEMBER",
            "body": "Also consider surrounding this with `do {` and `} while (0)`",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-19T06:53:59Z",
            "diff_hunk": "@@ -528,6 +528,76 @@ int utf_ptr2cells(const char *p)\n   return 1;\n }\n \n+/// Convert a UTF-8 byte sequence to a character number.\n+/// Doesn't handle ascii! only multibyte and illegal sequences.\n+///\n+/// @param[in]  p      String to convert.\n+/// @param[in]  len    Length of the character in bytes, 0 or 1 if illegal.\n+///\n+/// @return Unicode codepoint. A negative value When the sequence is illegal.\n+int32_t utf_ptr2CharInfo_impl(uint8_t const *p, uintptr_t const len)\n+  FUNC_ATTR_PURE FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT\n+{\n+// uint8_t is a reminder for clang to use smaller cmp\n+#define CHECK if (EXPECT((uint8_t)(cur & 0xC0U) != 0x80U, false)) goto errorret",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1458462905",
            "id": 1458462905,
            "in_reply_to_id": 1458457599,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5W7mC5",
            "original_commit_id": "13bc01f6db8849097296726fc2da3036239139ac",
            "original_line": 542,
            "original_position": 15,
            "original_start_line": null,
            "path": "src/nvim/mbyte.c",
            "position": null,
            "pull_request_review_id": 1831717472,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458462905/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-19T06:57:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458462905",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1458463276"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458463276"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n#define S(s) ((uint32_t)0x80U << (s))\r\n```",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-19T06:54:23Z",
            "diff_hunk": "@@ -597,45 +667,40 @@ size_t mb_string2cells_len(const char *str, size_t size)\n ///\n /// @return Unicode codepoint or byte value.\n int utf_ptr2char(const char *const p_in)\n-  FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT\n+  FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL\n {\n   uint8_t *p = (uint8_t *)p_in;\n-  if (p[0] < 0x80) {  // Be quick for ASCII.\n-    return p[0];\n+  uint32_t v0 = p[0];\n+  if (EXPECT(v0 < 0x80U, true)) {  // Be quick for ASCII.\n+    return (int)v0;\n   }\n \n-  const uint8_t len = utf8len_tab_zero[p[0]];\n-  if (len > 1 && (p[1] & 0xc0) == 0x80) {\n-    if (len == 2) {\n-      return ((p[0] & 0x1f) << 6) + (p[1] & 0x3f);\n-    }\n-    if ((p[2] & 0xc0) == 0x80) {\n-      if (len == 3) {\n-        return (((p[0] & 0x0f) << 12) + ((p[1] & 0x3f) << 6)\n-                + (p[2] & 0x3f));\n-      }\n-      if ((p[3] & 0xc0) == 0x80) {\n-        if (len == 4) {\n-          return (((p[0] & 0x07) << 18) + ((p[1] & 0x3f) << 12)\n-                  + ((p[2] & 0x3f) << 6) + (p[3] & 0x3f));\n-        }\n-        if ((p[4] & 0xc0) == 0x80) {\n-          if (len == 5) {\n-            return (((p[0] & 0x03) << 24) + ((p[1] & 0x3f) << 18)\n-                    + ((p[2] & 0x3f) << 12) + ((p[3] & 0x3f) << 6)\n-                    + (p[4] & 0x3f));\n-          }\n-          if ((p[5] & 0xc0) == 0x80 && len == 6) {\n-            return (((p[0] & 0x01) << 30) + ((p[1] & 0x3f) << 24)\n-                    + ((p[2] & 0x3f) << 18) + ((p[3] & 0x3f) << 12)\n-                    + ((p[4] & 0x3f) << 6) + (p[5] & 0x3f));\n-          }\n-        }\n-      }\n-    }\n+  const uint8_t len = utf8len_tab[v0];\n+  if (EXPECT(len < 2, false)) {\n+    return (int)v0;\n   }\n-  // Illegal value: just return the first byte.\n-  return p[0];\n+\n+#define STEP(i, ret) uint32_t const v##i = p[i]; \\\n+  if (EXPECT((uint8_t)(v##i & 0xC0U) != 0x80U, false)) return (int)v0; \\\n+  if (EXPECT(len == i + 1, false)) return (int)(ret)\n+#define S(s) ((uint32_t)0x80U << s)",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1458463276",
            "id": 1458463276,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5W7mIs",
            "original_commit_id": "13bc01f6db8849097296726fc2da3036239139ac",
            "original_line": 686,
            "original_position": 131,
            "original_start_line": null,
            "path": "src/nvim/mbyte.c",
            "position": null,
            "pull_request_review_id": 1831717472,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458463276/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-19T06:57:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458463276",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1458464848"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458464848"
                }
            },
            "author_association": "MEMBER",
            "body": "It's a bit confusing to have the second macro argument reference a variable declared inside the macro. I think it's better to move the declaration out of the macro and put the two `if` statements between `do {` and `} while (0)`.",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-19T06:56:07Z",
            "diff_hunk": "@@ -597,45 +667,40 @@ size_t mb_string2cells_len(const char *str, size_t size)\n ///\n /// @return Unicode codepoint or byte value.\n int utf_ptr2char(const char *const p_in)\n-  FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT\n+  FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL\n {\n   uint8_t *p = (uint8_t *)p_in;\n-  if (p[0] < 0x80) {  // Be quick for ASCII.\n-    return p[0];\n+  uint32_t v0 = p[0];\n+  if (EXPECT(v0 < 0x80U, true)) {  // Be quick for ASCII.\n+    return (int)v0;\n   }\n \n-  const uint8_t len = utf8len_tab_zero[p[0]];\n-  if (len > 1 && (p[1] & 0xc0) == 0x80) {\n-    if (len == 2) {\n-      return ((p[0] & 0x1f) << 6) + (p[1] & 0x3f);\n-    }\n-    if ((p[2] & 0xc0) == 0x80) {\n-      if (len == 3) {\n-        return (((p[0] & 0x0f) << 12) + ((p[1] & 0x3f) << 6)\n-                + (p[2] & 0x3f));\n-      }\n-      if ((p[3] & 0xc0) == 0x80) {\n-        if (len == 4) {\n-          return (((p[0] & 0x07) << 18) + ((p[1] & 0x3f) << 12)\n-                  + ((p[2] & 0x3f) << 6) + (p[3] & 0x3f));\n-        }\n-        if ((p[4] & 0xc0) == 0x80) {\n-          if (len == 5) {\n-            return (((p[0] & 0x03) << 24) + ((p[1] & 0x3f) << 18)\n-                    + ((p[2] & 0x3f) << 12) + ((p[3] & 0x3f) << 6)\n-                    + (p[4] & 0x3f));\n-          }\n-          if ((p[5] & 0xc0) == 0x80 && len == 6) {\n-            return (((p[0] & 0x01) << 30) + ((p[1] & 0x3f) << 24)\n-                    + ((p[2] & 0x3f) << 18) + ((p[3] & 0x3f) << 12)\n-                    + ((p[4] & 0x3f) << 6) + (p[5] & 0x3f));\n-          }\n-        }\n-      }\n-    }\n+  const uint8_t len = utf8len_tab[v0];\n+  if (EXPECT(len < 2, false)) {\n+    return (int)v0;\n   }\n-  // Illegal value: just return the first byte.\n-  return p[0];\n+\n+#define STEP(i, ret) uint32_t const v##i = p[i]; \\\n+  if (EXPECT((uint8_t)(v##i & 0xC0U) != 0x80U, false)) return (int)v0; \\\n+  if (EXPECT(len == i + 1, false)) return (int)(ret)",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1458464848",
            "id": 1458464848,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5W7mhQ",
            "original_commit_id": "13bc01f6db8849097296726fc2da3036239139ac",
            "original_line": 685,
            "original_position": 130,
            "original_start_line": 683,
            "path": "src/nvim/mbyte.c",
            "position": null,
            "pull_request_review_id": 1831717472,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458464848/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-01-19T06:57:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458464848",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1458479283"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458479283"
                }
            },
            "author_association": "MEMBER",
            "body": "If not then at least fix the typo \"guerantee\"\r\n```suggestion\r\nerrorret:;\r\n    // 8th bit of corr is always 1, int32_t guarantees\r\n    // 2's complement. Value is negative\r\n    int32_t const result = (int32_t)(corr << 24);\r\n    ASSUME(result < 0);\r\n    return result;\r\n```",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-19T07:10:48Z",
            "diff_hunk": "@@ -528,6 +528,76 @@ int utf_ptr2cells(const char *p)\n   return 1;\n }\n \n+/// Convert a UTF-8 byte sequence to a character number.\n+/// Doesn't handle ascii! only multibyte and illegal sequences.\n+///\n+/// @param[in]  p      String to convert.\n+/// @param[in]  len    Length of the character in bytes, 0 or 1 if illegal.\n+///\n+/// @return Unicode codepoint. A negative value When the sequence is illegal.\n+int32_t utf_ptr2CharInfo_impl(uint8_t const *p, uintptr_t const len)\n+  FUNC_ATTR_PURE FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT\n+{\n+// uint8_t is a reminder for clang to use smaller cmp\n+#define CHECK if (EXPECT((uint8_t)(cur & 0xC0U) != 0x80U, false)) goto errorret\n+\n+  static uint32_t const corrections[] = {\n+    (1U << 31) + 0x80U,  // invalid - set invalid bits (safe to add as first 2 bytes\n+    (1U << 31) + 0x80U,  // won't affect highest bit in normal ret). 0x80U for errorret\n+    -(0x80U + (0xC0U << 6)),  // multibyte - subtract added UTF8 bits (1..10xxx and 10xxx)\n+    -(0x80U + (0x80U << 6) + (0xE0U << 12)),\n+    -(0x80U + (0x80U << 6) + (0x80U << 12) + (0xF0U << 18)),\n+    -(0x80U + (0x80U << 6) + (0x80U << 12) + (0x80U << 18) + (0xF8U << 24)),\n+    -(0x80U + (0x80U << 6) + (0x80U << 12) + (0x80U << 18) + (0x80U << 24) + (0xF4U << 30)),\n+  };\n+\n+  // len is 0-6, but declared uintptr_t to avoid zeroing out upper bits\n+  uint32_t const corr = corrections[len];\n+  uint8_t cur;\n+\n+  // reading second byte unconditionally, safe for invalid\n+  // as it cannot be the last byte, not safe for ascii\n+  uint32_t code_point = ((uint32_t)p[0] << 6) + (cur = p[1]);\n+  CHECK;\n+  if ((uint32_t)len < 3) {\n+    goto ret;  // len == 0, 1, 2\n+  }\n+\n+  code_point = (code_point << 6) + (cur = p[2]);\n+  CHECK;\n+  if ((uint32_t)len == 3) {\n+    goto ret;\n+  }\n+\n+  code_point = (code_point << 6) + (cur = p[3]);\n+  CHECK;\n+  if ((uint32_t)len == 4) {\n+    goto ret;\n+  }\n+\n+  code_point = (code_point << 6) + (cur = p[4]);\n+  CHECK;\n+  if ((uint32_t)len == 5) {\n+    goto ret;\n+  }\n+\n+  code_point = (code_point << 6) + (cur = p[5]);\n+  if ((uint8_t)(cur & 0xC0U) != 0x80U) {\n+errorret:;\n+    // 8th bit of corr is always 1, int32_t guerantees\n+    // 2's complement. Value is negative\n+    int32_t const result = (int32_t)(corr << 24);\n+    ASSUME(result < 0);\n+    return result;",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1458479283",
            "id": 1458479283,
            "in_reply_to_id": 1458457367,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5W7qCz",
            "original_commit_id": "13bc01f6db8849097296726fc2da3036239139ac",
            "original_line": 591,
            "original_position": 64,
            "original_start_line": 586,
            "path": "src/nvim/mbyte.c",
            "position": null,
            "pull_request_review_id": 1831740315,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458479283/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-01-19T07:10:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458479283",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1458503259"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458503259"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  return (StrCharInfo){ .ptr = ptr, .chr = utf_ptr2CharInfo(ptr) };\r\n```",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-19T07:36:26Z",
            "diff_hunk": "@@ -44,3 +49,73 @@ extern const uint8_t utf8len_tab[256];\n // multi-byte characters if needed. Only use with \"p\" > \"s\" !\n #define MB_PTR_BACK(s, p) \\\n   (p -= utf_head_off((char *)(s), (char *)(p) - 1) + 1)\n+\n+static inline CharInfo utf_ptr2CharInfo(char const *p_in)\n+  REAL_FATTR_NONNULL_ALL REAL_FATTR_PURE REAL_FATTR_WARN_UNUSED_RESULT REAL_FATTR_ALWAYS_INLINE;\n+\n+/// Convert a UTF-8 byte sequence to a Unicode code point.\n+/// Handles ascii, multibyte sequiences and illegal sequences.\n+///\n+/// @param[in]  p_in  String to convert.\n+///\n+/// @return information abouth the character. When the sequence is illegal,\n+/// 'value' is negative, 'len' is 1.\n+static inline CharInfo utf_ptr2CharInfo(char const *const p_in)\n+{\n+  uint8_t const *const p = (uint8_t const *)p_in;\n+  uint8_t const first = *p;\n+  if (first < 0x80) {\n+    return (CharInfo){ .value = first, .len = 1 };\n+  } else {\n+    int len = utf8len_tab[first];\n+    int32_t const code_point = utf_ptr2CharInfo_impl(p, (uintptr_t)len);\n+    if (code_point < 0) {\n+      len = 1;\n+    }\n+    return (CharInfo){ .value = code_point, .len = len };\n+  }\n+}\n+\n+static inline StrCharInfo utfc_next(StrCharInfo cur)\n+  REAL_FATTR_NONNULL_ALL REAL_FATTR_ALWAYS_INLINE REAL_FATTR_PURE;\n+\n+/// Return information about the next character.\n+/// Composing and combining characters are\n+/// considered a part of the current character.\n+///\n+/// @param[in] cur  Pointer to the current character. Must not point to NUL\n+/// @param[in] cur_char Decoded charater at 'cur'.\n+static inline StrCharInfo utfc_next(StrCharInfo cur)\n+{\n+  int32_t prev_code = cur.chr.value;\n+  uint8_t *next = (uint8_t *)(cur.ptr + cur.chr.len);\n+\n+  while (true) {\n+    if (EXPECT(*next < 0x80U, true)) {\n+      return (StrCharInfo){\n+        .ptr = (char *)next,\n+        .chr = (CharInfo){ .value = *next, .len = 1 },\n+      };\n+    }\n+    uint8_t const next_len = utf8len_tab[*next];\n+    int32_t const next_code = utf_ptr2CharInfo_impl(next, (uintptr_t)next_len);\n+    // can use next_code < 128. Checking both < 0 is faster. next_code 0..127 is rare (overlong)\n+    if (next_code < 0 || prev_code < 0 || !utf_char_composinglike(prev_code, next_code)) {\n+      return (StrCharInfo){\n+        .ptr = (char *)next,\n+        .chr = (CharInfo){ .value = next_code, .len = (next_code < 0 ? 1 : next_len) },\n+      };\n+    }\n+\n+    prev_code = next_code;\n+    next += next_len;\n+  }\n+}\n+\n+static inline StrCharInfo utf_ptr2StrCharInfo(char *ptr)\n+  REAL_FATTR_NONNULL_ALL REAL_FATTR_ALWAYS_INLINE REAL_FATTR_PURE;\n+\n+static inline StrCharInfo utf_ptr2StrCharInfo(char *ptr)\n+{\n+  return (StrCharInfo){ ptr, utf_ptr2CharInfo(ptr) };",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1458503259",
            "id": 1458503259,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5W7v5b",
            "original_commit_id": "13bc01f6db8849097296726fc2da3036239139ac",
            "original_line": 120,
            "original_position": 91,
            "original_start_line": null,
            "path": "src/nvim/mbyte.h",
            "position": null,
            "pull_request_review_id": 1831771252,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458503259/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-19T07:36:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458503259",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1458508500"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458508500"
                }
            },
            "author_association": "MEMBER",
            "body": "`type` as a variable name is too general. I think it better to use `cstype` for all these variables named `type`.",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-19T07:41:50Z",
            "diff_hunk": "@@ -4347,14 +4351,16 @@ static bool ins_tab(void)\n     getvcol(curwin, cursor, &want_vcol, NULL, NULL);\n \n     char *tab = \"\\t\";\n-    chartabsize_T cts;\n-    init_chartabsize_arg(&cts, curwin, 0, vcol, tab, tab);\n+    int32_t tab_v = (uint8_t)(*tab);\n+\n+    CharsizeArg arg;\n+    CSType type = init_charsize_arg(&arg, curwin, 0, tab);",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1458508500",
            "id": 1458508500,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5W7xLU",
            "original_commit_id": "18495761022988549e55c5eb3f04613e0ddf7b00",
            "original_line": 4357,
            "original_position": 64,
            "original_start_line": null,
            "path": "src/nvim/edit.c",
            "position": null,
            "pull_request_review_id": 1831778908,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458508500/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-19T07:42:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458508500",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1458517859"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458517859"
                }
            },
            "author_association": "MEMBER",
            "body": "Hmm, shouldn't `utfc_next()` be used here?",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-19T07:51:16Z",
            "diff_hunk": "@@ -1292,37 +1288,33 @@ int get_lisp_indent(void)\n \n           parencount = 0;\n \n-          init_chartabsize_arg(&cts, curwin,\n-                               (colnr_T)(that - line), amount, line, that);\n           if (((*that != '\"') && (*that != '\\'') && (*that != '#')\n                && (((uint8_t)(*that) < '0') || ((uint8_t)(*that) > '9')))) {\n             int quotecount = 0;\n-            while (*cts.cts_ptr\n-                   && (!ascii_iswhite(*cts.cts_ptr) || quotecount || parencount)) {\n-              if (*cts.cts_ptr == '\"') {\n+            while (*that && (!ascii_iswhite(*that) || quotecount || parencount)) {\n+              if (*that == '\"') {\n                 quotecount = !quotecount;\n               }\n-              if (((*cts.cts_ptr == '(') || (*cts.cts_ptr == '[')) && !quotecount) {\n+              if (((*that == '(') || (*that == '[')) && !quotecount) {\n                 parencount++;\n               }\n-              if (((*cts.cts_ptr == ')') || (*cts.cts_ptr == ']')) && !quotecount) {\n+              if (((*that == ')') || (*that == ']')) && !quotecount) {\n                 parencount--;\n               }\n-              if ((*cts.cts_ptr == '\\\\') && (*(cts.cts_ptr + 1) != NUL)) {\n-                cts.cts_vcol += lbr_chartabsize_adv(&cts);\n+              if ((*that == '\\\\') && (*(that + 1) != NUL)) {\n+                amount += cts_charsize(type, amount, that, (uint8_t)(*that), &arg).width;\n+                that++;\n               }\n \n-              cts.cts_vcol += lbr_chartabsize_adv(&cts);\n+              amount += cts_charsize(type, amount, that, (uint8_t)(*that), &arg).width;\n+              that++;",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1458517859",
            "id": 1458517859,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5W7zdj",
            "original_commit_id": "18495761022988549e55c5eb3f04613e0ddf7b00",
            "original_line": 1310,
            "original_position": 81,
            "original_start_line": null,
            "path": "src/nvim/indent.c",
            "position": null,
            "pull_request_review_id": 1831791815,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458517859/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-19T07:51:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458517859",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1458533138"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458533138"
                }
            },
            "author_association": "MEMBER",
            "body": "This declaration can be moved to its first assignment below.",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-19T08:01:24Z",
            "diff_hunk": "@@ -3250,19 +3246,20 @@ void do_put(int regname, yankreg_T *reg, int dir, int count, int flags)\n       }\n       // get the old line and advance to the position to insert at\n       char *oldp = get_cursor_line_ptr();\n-      size_t oldlen = strlen(oldp);\n-      chartabsize_T cts;\n-      init_chartabsize_arg(&cts, curwin, curwin->w_cursor.lnum, 0, oldp, oldp);\n+      size_t oldlen;",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1458533138",
            "id": 1458533138,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5W73MS",
            "original_commit_id": "18495761022988549e55c5eb3f04613e0ddf7b00",
            "original_line": 3249,
            "original_position": 86,
            "original_start_line": null,
            "path": "src/nvim/ops.c",
            "position": null,
            "pull_request_review_id": 1831813104,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458533138/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-19T08:01:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458533138",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1458542360"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458542360"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n/// Like linetabsize_str(), but \"s\" starts at virtual column \"startvcol\".\r\n```",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-19T08:05:51Z",
            "diff_hunk": "@@ -51,48 +51,21 @@ int win_chartabsize(win_T *wp, char *p, colnr_T col)\n   return ptr2cells(p);\n }\n \n-/// Return the number of characters the string 's' will take on the screen,\n-/// taking into account the size of a tab.\n-///\n-/// @param s\n-///\n-/// @return Number of characters the string will take on the screen.\n-int linetabsize_str(char *s)\n-{\n-  return linetabsize_col(0, s);\n-}\n-\n-/// Like linetabsize_str(), but \"s\" starts at column \"startcol\".\n+/// Like linetabsize_str(), but \"s\" starts at virtual column \"starvtcol\".",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1458542360",
            "id": 1458542360,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5W75cY",
            "original_commit_id": "13bc01f6db8849097296726fc2da3036239139ac",
            "original_line": 54,
            "original_position": 16,
            "original_start_line": null,
            "path": "src/nvim/plines.c",
            "position": null,
            "pull_request_review_id": 1831828952,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458542360/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-19T08:05:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458542360",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1458551772"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458551772"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n\r\n  // Check for inline virtual text after the end of the line.\r\n```",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-19T08:14:28Z",
            "diff_hunk": "@@ -451,19 +395,70 @@ static bool in_win_border(win_T *wp, colnr_T vcol)\n   return (vcol - width1) % width2 == width2 - 1;\n }\n \n+/// Calculate virtual column until the given 'len'.\n+///\n+/// @param arg  Argument to charsize functions.\n+/// @param vcol Starting virtual column.\n+/// @param len  First byte of the end character, or MAXCOL.\n+///\n+/// @return virtual column before the character at 'len',\n+/// or full size of the line if 'len' is MAXCOL.\n+int linesize_regular(CharsizeArg *const arg, int vcol, colnr_T const len)\n+{\n+  char *const line = arg->line;\n+  uintptr_t end_pos = (uintptr_t)(line + len);\n+  if (end_pos < (uintptr_t)line) {\n+    end_pos = UINTPTR_MAX;  // unsigned overflow\n+  }\n+\n+  StrCharInfo ci = utf_ptr2StrCharInfo(line);\n+  while ((uintptr_t)ci.ptr < end_pos && *ci.ptr != NUL) {\n+    vcol += charsize_regular(arg, ci.ptr, vcol, ci.chr.value).width;\n+    ci = utfc_next(ci);\n+  }\n+",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1458551772",
            "id": 1458551772,
            "line": 415,
            "node_id": "PRRC_kwDOAPphoM5W77vc",
            "original_commit_id": "13bc01f6db8849097296726fc2da3036239139ac",
            "original_line": 415,
            "original_position": 464,
            "original_start_line": null,
            "path": "src/nvim/plines.c",
            "position": 461,
            "pull_request_review_id": 1831841616,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458551772/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-19T08:14:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458551772",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1458559823"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458559823"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  StrCharInfo ci = utf_ptr2StrCharInfo(line);\r\n  while (ci.ptr - line < len && *ci.ptr != NUL) {\r\n```",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-19T08:21:14Z",
            "diff_hunk": "@@ -451,19 +395,70 @@ static bool in_win_border(win_T *wp, colnr_T vcol)\n   return (vcol - width1) % width2 == width2 - 1;\n }\n \n+/// Calculate virtual column until the given 'len'.\n+///\n+/// @param arg  Argument to charsize functions.\n+/// @param vcol Starting virtual column.\n+/// @param len  First byte of the end character, or MAXCOL.\n+///\n+/// @return virtual column before the character at 'len',\n+/// or full size of the line if 'len' is MAXCOL.\n+int linesize_regular(CharsizeArg *const arg, int vcol, colnr_T const len)\n+{\n+  char *const line = arg->line;\n+  uintptr_t end_pos = (uintptr_t)(line + len);\n+  if (end_pos < (uintptr_t)line) {\n+    end_pos = UINTPTR_MAX;  // unsigned overflow\n+  }\n+\n+  StrCharInfo ci = utf_ptr2StrCharInfo(line);\n+  while ((uintptr_t)ci.ptr < end_pos && *ci.ptr != NUL) {",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1458559823",
            "id": 1458559823,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5W79tP",
            "original_commit_id": "13bc01f6db8849097296726fc2da3036239139ac",
            "original_line": 415,
            "original_position": 460,
            "original_start_line": 409,
            "path": "src/nvim/plines.c",
            "position": null,
            "pull_request_review_id": 1831852366,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458559823/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-01-19T08:22:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458559823",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1458560527"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458560527"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  StrCharInfo ci = utf_ptr2StrCharInfo(line);\r\n  while (ci.ptr - line < len && *ci.ptr != NUL) {\r\n```",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-19T08:21:55Z",
            "diff_hunk": "@@ -451,19 +395,70 @@ static bool in_win_border(win_T *wp, colnr_T vcol)\n   return (vcol - width1) % width2 == width2 - 1;\n }\n \n+/// Calculate virtual column until the given 'len'.\n+///\n+/// @param arg  Argument to charsize functions.\n+/// @param vcol Starting virtual column.\n+/// @param len  First byte of the end character, or MAXCOL.\n+///\n+/// @return virtual column before the character at 'len',\n+/// or full size of the line if 'len' is MAXCOL.\n+int linesize_regular(CharsizeArg *const arg, int vcol, colnr_T const len)\n+{\n+  char *const line = arg->line;\n+  uintptr_t end_pos = (uintptr_t)(line + len);\n+  if (end_pos < (uintptr_t)line) {\n+    end_pos = UINTPTR_MAX;  // unsigned overflow\n+  }\n+\n+  StrCharInfo ci = utf_ptr2StrCharInfo(line);\n+  while ((uintptr_t)ci.ptr < end_pos && *ci.ptr != NUL) {\n+    vcol += charsize_regular(arg, ci.ptr, vcol, ci.chr.value).width;\n+    ci = utfc_next(ci);\n+  }\n+\n+  if (len == MAXCOL && arg->virt_row >= 0) {\n+    (void)charsize_regular(arg, ci.ptr, vcol, ci.chr.value);\n+    vcol += arg->cur_text_width_left + arg->cur_text_width_right;\n+  }\n+\n+  return vcol;\n+}\n+\n+/// Like win_linesize_regular, but can be used when CStype is kCharsizeFast.\n+///\n+/// @see win_linesize_regular\n+int linesize_fast(CharsizeArg const *const arg, int vcol, colnr_T const len)\n+{\n+  win_T *const wp = arg->win;\n+  bool const use_tabstop = arg->use_tabstop;\n+\n+  char *const line = arg->line;\n+  uintptr_t end_pos = (uintptr_t)(line + len);\n+  if (end_pos < (uintptr_t)line) {\n+    end_pos = UINTPTR_MAX;  // unsigned overflow\n+  }\n+\n+  StrCharInfo ci = utf_ptr2StrCharInfo(line);\n+  while ((uintptr_t)ci.ptr < end_pos && *ci.ptr != NUL) {",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1458560527",
            "id": 1458560527,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5W794P",
            "original_commit_id": "13bc01f6db8849097296726fc2da3036239139ac",
            "original_line": 443,
            "original_position": 488,
            "original_start_line": 437,
            "path": "src/nvim/plines.c",
            "position": null,
            "pull_request_review_id": 1831852366,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458560527/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-01-19T08:22:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458560527",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1459392620"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1459392620"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Yes, I should've used `utfc_next()` in this case",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-19T17:23:16Z",
            "diff_hunk": "@@ -1292,37 +1288,33 @@ int get_lisp_indent(void)\n \n           parencount = 0;\n \n-          init_chartabsize_arg(&cts, curwin,\n-                               (colnr_T)(that - line), amount, line, that);\n           if (((*that != '\"') && (*that != '\\'') && (*that != '#')\n                && (((uint8_t)(*that) < '0') || ((uint8_t)(*that) > '9')))) {\n             int quotecount = 0;\n-            while (*cts.cts_ptr\n-                   && (!ascii_iswhite(*cts.cts_ptr) || quotecount || parencount)) {\n-              if (*cts.cts_ptr == '\"') {\n+            while (*that && (!ascii_iswhite(*that) || quotecount || parencount)) {\n+              if (*that == '\"') {\n                 quotecount = !quotecount;\n               }\n-              if (((*cts.cts_ptr == '(') || (*cts.cts_ptr == '[')) && !quotecount) {\n+              if (((*that == '(') || (*that == '[')) && !quotecount) {\n                 parencount++;\n               }\n-              if (((*cts.cts_ptr == ')') || (*cts.cts_ptr == ']')) && !quotecount) {\n+              if (((*that == ')') || (*that == ']')) && !quotecount) {\n                 parencount--;\n               }\n-              if ((*cts.cts_ptr == '\\\\') && (*(cts.cts_ptr + 1) != NUL)) {\n-                cts.cts_vcol += lbr_chartabsize_adv(&cts);\n+              if ((*that == '\\\\') && (*(that + 1) != NUL)) {\n+                amount += cts_charsize(type, amount, that, (uint8_t)(*that), &arg).width;\n+                that++;\n               }\n \n-              cts.cts_vcol += lbr_chartabsize_adv(&cts);\n+              amount += cts_charsize(type, amount, that, (uint8_t)(*that), &arg).width;\n+              that++;",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1459392620",
            "id": 1459392620,
            "in_reply_to_id": 1458517859,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5W_JBs",
            "original_commit_id": "18495761022988549e55c5eb3f04613e0ddf7b00",
            "original_line": 1310,
            "original_position": 81,
            "original_start_line": null,
            "path": "src/nvim/indent.c",
            "position": null,
            "pull_request_review_id": 1833311081,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1459392620/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-19T17:23:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1459392620",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/VanaIgr/events{/privacy}",
                "followers_url": "https://api.github.com/users/VanaIgr/followers",
                "following_url": "https://api.github.com/users/VanaIgr/following{/other_user}",
                "gists_url": "https://api.github.com/users/VanaIgr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/VanaIgr",
                "id": 65824523,
                "login": "VanaIgr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/VanaIgr/orgs",
                "received_events_url": "https://api.github.com/users/VanaIgr/received_events",
                "repos_url": "https://api.github.com/users/VanaIgr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/VanaIgr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/VanaIgr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/VanaIgr"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1460690161"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460690161"
                }
            },
            "author_association": "MEMBER",
            "body": "Why is the last one here `0xF4U`, not `0xFCU`?",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-20T23:26:40Z",
            "diff_hunk": "@@ -528,6 +528,69 @@ int utf_ptr2cells(const char *p)\n   return 1;\n }\n \n+/// Convert a UTF-8 byte sequence to a character number.\n+/// Doesn't handle ascii! only multibyte and illegal sequences.\n+///\n+/// @param[in]  p      String to convert.\n+/// @param[in]  len    Length of the character in bytes, 0 or 1 if illegal.\n+///\n+/// @return Unicode codepoint. A negative value When the sequence is illegal.\n+int32_t utf_ptr2CharInfo_impl(uint8_t const *p, uintptr_t const len)\n+  FUNC_ATTR_PURE FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT\n+{\n+// uint8_t is a reminder for clang to use smaller cmp\n+#define CHECK do { if (EXPECT((uint8_t)(cur & 0xC0U) != 0x80U, false)) return -1; } while (0)\n+\n+  static uint32_t const corrections[] = {\n+    (1U << 31),  // invalid - set invalid bits (safe to add as first 2 bytes\n+    (1U << 31),  // won't affect highest bit in normal ret)\n+    -(0x80U + (0xC0U << 6)),  // multibyte - subtract added UTF8 bits (1..10xxx and 10xxx)\n+    -(0x80U + (0x80U << 6) + (0xE0U << 12)),\n+    -(0x80U + (0x80U << 6) + (0x80U << 12) + (0xF0U << 18)),\n+    -(0x80U + (0x80U << 6) + (0x80U << 12) + (0x80U << 18) + (0xF8U << 24)),\n+    -(0x80U + (0x80U << 6) + (0x80U << 12) + (0x80U << 18) + (0x80U << 24) + (0xF4U << 30)),",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1460690161",
            "id": 1460690161,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5XEFzx",
            "original_commit_id": "b2fcd521cca2e0d0fdd6538b19c38e78810e6787",
            "original_line": 551,
            "original_position": 24,
            "original_start_line": null,
            "path": "src/nvim/mbyte.c",
            "position": null,
            "pull_request_review_id": 1834742199,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460690161/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-20T23:26:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460690161",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1460691396"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460691396"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "`0xF4U` It is not correct, but `0xF4U << 30` and  `0xFCU << 30` are both 0, so my tests didn't catch this",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-20T23:40:17Z",
            "diff_hunk": "@@ -528,6 +528,69 @@ int utf_ptr2cells(const char *p)\n   return 1;\n }\n \n+/// Convert a UTF-8 byte sequence to a character number.\n+/// Doesn't handle ascii! only multibyte and illegal sequences.\n+///\n+/// @param[in]  p      String to convert.\n+/// @param[in]  len    Length of the character in bytes, 0 or 1 if illegal.\n+///\n+/// @return Unicode codepoint. A negative value When the sequence is illegal.\n+int32_t utf_ptr2CharInfo_impl(uint8_t const *p, uintptr_t const len)\n+  FUNC_ATTR_PURE FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT\n+{\n+// uint8_t is a reminder for clang to use smaller cmp\n+#define CHECK do { if (EXPECT((uint8_t)(cur & 0xC0U) != 0x80U, false)) return -1; } while (0)\n+\n+  static uint32_t const corrections[] = {\n+    (1U << 31),  // invalid - set invalid bits (safe to add as first 2 bytes\n+    (1U << 31),  // won't affect highest bit in normal ret)\n+    -(0x80U + (0xC0U << 6)),  // multibyte - subtract added UTF8 bits (1..10xxx and 10xxx)\n+    -(0x80U + (0x80U << 6) + (0xE0U << 12)),\n+    -(0x80U + (0x80U << 6) + (0x80U << 12) + (0xF0U << 18)),\n+    -(0x80U + (0x80U << 6) + (0x80U << 12) + (0x80U << 18) + (0xF8U << 24)),\n+    -(0x80U + (0x80U << 6) + (0x80U << 12) + (0x80U << 18) + (0x80U << 24) + (0xF4U << 30)),",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1460691396",
            "id": 1460691396,
            "in_reply_to_id": 1460690161,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5XEGHE",
            "original_commit_id": "b2fcd521cca2e0d0fdd6538b19c38e78810e6787",
            "original_line": 551,
            "original_position": 24,
            "original_start_line": null,
            "path": "src/nvim/mbyte.c",
            "position": null,
            "pull_request_review_id": 1834743088,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460691396/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-21T01:04:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460691396",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/VanaIgr/events{/privacy}",
                "followers_url": "https://api.github.com/users/VanaIgr/followers",
                "following_url": "https://api.github.com/users/VanaIgr/following{/other_user}",
                "gists_url": "https://api.github.com/users/VanaIgr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/VanaIgr",
                "id": 65824523,
                "login": "VanaIgr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/VanaIgr/orgs",
                "received_events_url": "https://api.github.com/users/VanaIgr/received_events",
                "repos_url": "https://api.github.com/users/VanaIgr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/VanaIgr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/VanaIgr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/VanaIgr"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1460691882"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460691882"
                }
            },
            "author_association": "MEMBER",
            "body": "Hmm, then it should still be changed to `0xFCU` to avoid future mistakes.",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-20T23:45:58Z",
            "diff_hunk": "@@ -528,6 +528,69 @@ int utf_ptr2cells(const char *p)\n   return 1;\n }\n \n+/// Convert a UTF-8 byte sequence to a character number.\n+/// Doesn't handle ascii! only multibyte and illegal sequences.\n+///\n+/// @param[in]  p      String to convert.\n+/// @param[in]  len    Length of the character in bytes, 0 or 1 if illegal.\n+///\n+/// @return Unicode codepoint. A negative value When the sequence is illegal.\n+int32_t utf_ptr2CharInfo_impl(uint8_t const *p, uintptr_t const len)\n+  FUNC_ATTR_PURE FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT\n+{\n+// uint8_t is a reminder for clang to use smaller cmp\n+#define CHECK do { if (EXPECT((uint8_t)(cur & 0xC0U) != 0x80U, false)) return -1; } while (0)\n+\n+  static uint32_t const corrections[] = {\n+    (1U << 31),  // invalid - set invalid bits (safe to add as first 2 bytes\n+    (1U << 31),  // won't affect highest bit in normal ret)\n+    -(0x80U + (0xC0U << 6)),  // multibyte - subtract added UTF8 bits (1..10xxx and 10xxx)\n+    -(0x80U + (0x80U << 6) + (0xE0U << 12)),\n+    -(0x80U + (0x80U << 6) + (0x80U << 12) + (0xF0U << 18)),\n+    -(0x80U + (0x80U << 6) + (0x80U << 12) + (0x80U << 18) + (0xF8U << 24)),\n+    -(0x80U + (0x80U << 6) + (0x80U << 12) + (0x80U << 18) + (0x80U << 24) + (0xF4U << 30)),",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1460691882",
            "id": 1460691882,
            "in_reply_to_id": 1460690161,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5XEGOq",
            "original_commit_id": "b2fcd521cca2e0d0fdd6538b19c38e78810e6787",
            "original_line": 551,
            "original_position": 24,
            "original_start_line": null,
            "path": "src/nvim/mbyte.c",
            "position": null,
            "pull_request_review_id": 1834743459,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460691882/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-20T23:45:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460691882",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1460698893"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460698893"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I think it would be better to remove it and add a comment with a description of why there is no need to subtract the bits of the leading byte",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-21T01:05:25Z",
            "diff_hunk": "@@ -528,6 +528,69 @@ int utf_ptr2cells(const char *p)\n   return 1;\n }\n \n+/// Convert a UTF-8 byte sequence to a character number.\n+/// Doesn't handle ascii! only multibyte and illegal sequences.\n+///\n+/// @param[in]  p      String to convert.\n+/// @param[in]  len    Length of the character in bytes, 0 or 1 if illegal.\n+///\n+/// @return Unicode codepoint. A negative value When the sequence is illegal.\n+int32_t utf_ptr2CharInfo_impl(uint8_t const *p, uintptr_t const len)\n+  FUNC_ATTR_PURE FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT\n+{\n+// uint8_t is a reminder for clang to use smaller cmp\n+#define CHECK do { if (EXPECT((uint8_t)(cur & 0xC0U) != 0x80U, false)) return -1; } while (0)\n+\n+  static uint32_t const corrections[] = {\n+    (1U << 31),  // invalid - set invalid bits (safe to add as first 2 bytes\n+    (1U << 31),  // won't affect highest bit in normal ret)\n+    -(0x80U + (0xC0U << 6)),  // multibyte - subtract added UTF8 bits (1..10xxx and 10xxx)\n+    -(0x80U + (0x80U << 6) + (0xE0U << 12)),\n+    -(0x80U + (0x80U << 6) + (0x80U << 12) + (0xF0U << 18)),\n+    -(0x80U + (0x80U << 6) + (0x80U << 12) + (0x80U << 18) + (0xF8U << 24)),\n+    -(0x80U + (0x80U << 6) + (0x80U << 12) + (0x80U << 18) + (0x80U << 24) + (0xF4U << 30)),",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1460698893",
            "id": 1460698893,
            "in_reply_to_id": 1460690161,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5XEH8N",
            "original_commit_id": "b2fcd521cca2e0d0fdd6538b19c38e78810e6787",
            "original_line": 551,
            "original_position": 24,
            "original_start_line": null,
            "path": "src/nvim/mbyte.c",
            "position": null,
            "pull_request_review_id": 1834748876,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460698893/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-21T01:05:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460698893",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/VanaIgr/events{/privacy}",
                "followers_url": "https://api.github.com/users/VanaIgr/followers",
                "following_url": "https://api.github.com/users/VanaIgr/following{/other_user}",
                "gists_url": "https://api.github.com/users/VanaIgr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/VanaIgr",
                "id": 65824523,
                "login": "VanaIgr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/VanaIgr/orgs",
                "received_events_url": "https://api.github.com/users/VanaIgr/received_events",
                "repos_url": "https://api.github.com/users/VanaIgr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/VanaIgr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/VanaIgr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/VanaIgr"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26813#discussion_r1460708889"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26813"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460708889"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes that make sense as well.",
            "commit_id": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
            "created_at": "2024-01-21T03:08:08Z",
            "diff_hunk": "@@ -528,6 +528,69 @@ int utf_ptr2cells(const char *p)\n   return 1;\n }\n \n+/// Convert a UTF-8 byte sequence to a character number.\n+/// Doesn't handle ascii! only multibyte and illegal sequences.\n+///\n+/// @param[in]  p      String to convert.\n+/// @param[in]  len    Length of the character in bytes, 0 or 1 if illegal.\n+///\n+/// @return Unicode codepoint. A negative value When the sequence is illegal.\n+int32_t utf_ptr2CharInfo_impl(uint8_t const *p, uintptr_t const len)\n+  FUNC_ATTR_PURE FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT\n+{\n+// uint8_t is a reminder for clang to use smaller cmp\n+#define CHECK do { if (EXPECT((uint8_t)(cur & 0xC0U) != 0x80U, false)) return -1; } while (0)\n+\n+  static uint32_t const corrections[] = {\n+    (1U << 31),  // invalid - set invalid bits (safe to add as first 2 bytes\n+    (1U << 31),  // won't affect highest bit in normal ret)\n+    -(0x80U + (0xC0U << 6)),  // multibyte - subtract added UTF8 bits (1..10xxx and 10xxx)\n+    -(0x80U + (0x80U << 6) + (0xE0U << 12)),\n+    -(0x80U + (0x80U << 6) + (0x80U << 12) + (0xF0U << 18)),\n+    -(0x80U + (0x80U << 6) + (0x80U << 12) + (0x80U << 18) + (0xF8U << 24)),\n+    -(0x80U + (0x80U << 6) + (0x80U << 12) + (0x80U << 18) + (0x80U << 24) + (0xF4U << 30)),",
            "html_url": "https://github.com/neovim/neovim/pull/26813#discussion_r1460708889",
            "id": 1460708889,
            "in_reply_to_id": 1460690161,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5XEKYZ",
            "original_commit_id": "b2fcd521cca2e0d0fdd6538b19c38e78810e6787",
            "original_line": 551,
            "original_position": 24,
            "original_start_line": null,
            "path": "src/nvim/mbyte.c",
            "position": null,
            "pull_request_review_id": 1834756749,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460708889/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-21T03:08:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1460708889",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "I was looking at how to further optimize `win_lbr_chartabsize()` and it looks like some combinations of virtual text, double-width charaters and breakindent don't work as expected. For example, these 4 lines should probably end at the same virtual column:\r\n![image](https://github.com/neovim/neovim/assets/65824523/9ef26c0a-179c-4920-8001-efd78604a8a3)\r\n(white is regular text, red is virtual text. '?' is a double-width character. Virtual text in the third line contains the double-width char even though it is not displayed as red).\r\n\r\nI assume that this is what's happening:\r\nThe first line's end column is different because ['>' character is counted](https://github.com/neovim/neovim/blob/6f6abd8c02f66a71f1ad46c4596cadd5709898f4/src/nvim/plines.c#L252) before applying breakindent, and the double-width character is not yet considered to be in the last column.\r\nThe third line's end column is different because the width of virtual text is [calculated without considering wrapping](https://github.com/neovim/neovim/blob/6f6abd8c02f66a71f1ad46c4596cadd5709898f4/src/nvim/api/extmark.c#L1160), and width of '>' for a double-width character in the last column is not added.\r\n\r\n",
            "created_at": "2023-12-31T06:24:52Z",
            "html_url": "https://github.com/neovim/neovim/pull/26813#issuecomment-1872688940",
            "id": 1872688940,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26813",
            "node_id": "IC_kwDOAPphoM5vnvcs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1872688940/reactions"
            },
            "updated_at": "2023-12-31T06:24:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1872688940",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/VanaIgr/events{/privacy}",
                "followers_url": "https://api.github.com/users/VanaIgr/followers",
                "following_url": "https://api.github.com/users/VanaIgr/following{/other_user}",
                "gists_url": "https://api.github.com/users/VanaIgr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/VanaIgr",
                "id": 65824523,
                "login": "VanaIgr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/VanaIgr/orgs",
                "received_events_url": "https://api.github.com/users/VanaIgr/received_events",
                "repos_url": "https://api.github.com/users/VanaIgr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/VanaIgr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/VanaIgr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/VanaIgr"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The first line's end column is different because ['>' character is counted](https://github.com/neovim/neovim/blob/6f6abd8c02f66a71f1ad46c4596cadd5709898f4/src/nvim/plines.c#L252) before applying breakindent\r\n\r\nAre you referring to the 'breakindent' on the second screen line, or the third?",
            "created_at": "2023-12-31T07:18:55Z",
            "html_url": "https://github.com/neovim/neovim/pull/26813#issuecomment-1872760106",
            "id": 1872760106,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26813",
            "node_id": "IC_kwDOAPphoM5voA0q",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1872760106/reactions"
            },
            "updated_at": "2023-12-31T07:18:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1872760106",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "First line in the file, second screen row.\r\n\r\nWindow width is 100. `breakindentopt=shift:2`, so it would add 2 cells to the next row of a line.\r\n\r\nVirtual text will have a width of 197 cells. The first real character after virtual text is 2 cells. Total size is 199.\r\n\r\nAfter computing total size, the function checks if `vcol + size - 2` is in last of its row. 0 + 199 - 2 is 197. Virtual column 197 is column 97 of a second row. Last column is 99, so head and size are not incremented.",
            "created_at": "2023-12-31T09:10:10Z",
            "html_url": "https://github.com/neovim/neovim/pull/26813#issuecomment-1872888782",
            "id": 1872888782,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26813",
            "node_id": "IC_kwDOAPphoM5vogPO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1872888782/reactions"
            },
            "updated_at": "2023-12-31T09:10:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1872888782",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/VanaIgr/events{/privacy}",
                "followers_url": "https://api.github.com/users/VanaIgr/followers",
                "following_url": "https://api.github.com/users/VanaIgr/following{/other_user}",
                "gists_url": "https://api.github.com/users/VanaIgr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/VanaIgr",
                "id": 65824523,
                "login": "VanaIgr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/VanaIgr/orgs",
                "received_events_url": "https://api.github.com/users/VanaIgr/received_events",
                "repos_url": "https://api.github.com/users/VanaIgr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/VanaIgr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/VanaIgr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/VanaIgr"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Impressive work! One small comment:\r\n\r\n>  measures the difference in time returned by os.clock(). \r\n\r\nThat function is not safe for (fast) benchmarking; prefer `vim.uv.hrtime()`, which has a higher resolution.\r\n\r\nAnd maybe consider adding these tests to `test/benchmark`, if possible?",
            "created_at": "2023-12-31T11:11:06Z",
            "html_url": "https://github.com/neovim/neovim/pull/26813#issuecomment-1872922707",
            "id": 1872922707,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26813",
            "node_id": "IC_kwDOAPphoM5voohT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1872922707/reactions"
            },
            "updated_at": "2023-12-31T11:11:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1872922707",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> That function is not safe for (fast) benchmarking; prefer `vim.uv.hrtime()`, which has a higher resolution.\r\n\r\nI had noticed that the scripts in 'test/benchmarks' used libuv's `hrtime()` instead of 'os.clock()' and ran some of my benchmarks with it to see if there was any significant difference, but the results were largely the same (average with `hrtime()` had around 10 decimal digits while `os.clock()` only had 1-4, but the results were within 1us of each other). \r\n\r\nSince I ran my benchmarks manually and couldn't find a way to copy anything from within neovim to the Windows clipboard, I used `os.clock()` to save some time on typing the results.\r\n\r\n> And maybe consider adding these tests to `test/benchmark`, if possible?\r\n\r\nI will write proper benchmarks and make them the new first commit.",
            "created_at": "2024-01-01T23:55:41Z",
            "html_url": "https://github.com/neovim/neovim/pull/26813#issuecomment-1873531564",
            "id": 1873531564,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26813",
            "node_id": "IC_kwDOAPphoM5vq9Ks",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1873531564/reactions"
            },
            "updated_at": "2024-01-01T23:55:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1873531564",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/VanaIgr/events{/privacy}",
                "followers_url": "https://api.github.com/users/VanaIgr/followers",
                "following_url": "https://api.github.com/users/VanaIgr/following{/other_user}",
                "gists_url": "https://api.github.com/users/VanaIgr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/VanaIgr",
                "id": 65824523,
                "login": "VanaIgr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/VanaIgr/orgs",
                "received_events_url": "https://api.github.com/users/VanaIgr/received_events",
                "repos_url": "https://api.github.com/users/VanaIgr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/VanaIgr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/VanaIgr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/VanaIgr"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Do the optional s390x checks test if Neovim works on a big endian architecture?\r\nIf yes, than they are failing probably because `utf_ptr2CharInfo()` assumes the system is little-endian. ",
            "created_at": "2024-01-02T00:08:15Z",
            "html_url": "https://github.com/neovim/neovim/pull/26813#issuecomment-1873536258",
            "id": 1873536258,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26813",
            "node_id": "IC_kwDOAPphoM5vq-UC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1873536258/reactions"
            },
            "updated_at": "2024-01-02T00:08:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1873536258",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/VanaIgr/events{/privacy}",
                "followers_url": "https://api.github.com/users/VanaIgr/followers",
                "following_url": "https://api.github.com/users/VanaIgr/following{/other_user}",
                "gists_url": "https://api.github.com/users/VanaIgr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/VanaIgr",
                "id": 65824523,
                "login": "VanaIgr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/VanaIgr/orgs",
                "received_events_url": "https://api.github.com/users/VanaIgr/received_events",
                "repos_url": "https://api.github.com/users/VanaIgr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/VanaIgr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/VanaIgr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/VanaIgr"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Do the optional s390x checks test if Neovim works on a big endian architecture?\r\n\r\nYes.",
            "created_at": "2024-01-02T00:11:36Z",
            "html_url": "https://github.com/neovim/neovim/pull/26813#issuecomment-1873537242",
            "id": 1873537242,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26813",
            "node_id": "IC_kwDOAPphoM5vq-ja",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1873537242/reactions"
            },
            "updated_at": "2024-01-02T00:11:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1873537242",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> If yes, than they are failing probably because utf_ptr2CharInfo() assumes the system is little-endian.\r\n\r\nAnd yes. All failures are indeed relevant.",
            "created_at": "2024-01-02T10:44:29Z",
            "html_url": "https://github.com/neovim/neovim/pull/26813#issuecomment-1873865344",
            "id": 1873865344,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26813",
            "node_id": "IC_kwDOAPphoM5vsOqA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1873865344/reactions"
            },
            "updated_at": "2024-01-02T10:44:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1873865344",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I rewrote the benchmarks and put them in [test/benchmark/screenpos_spec.lua](https://github.com/VanaIgr/neovim/blob/bffa5d952036e96044a4d99aa85a855cf93e263e/test/benchmark/screenpos_spec.lua), but when I ran them, I noticed that they were much slower that the ones I ran manually.\r\n\r\nClang, nobreakindent:\r\n||10'000i|10'000À|220i|220À|440i|440À|\r\n|-|-|-|-|-|-|-|\r\n|manual| 37 | 137 | 62 | 180 | 63 | 175|\r\n|new|180|310|190|320|190|310|\r\n\r\nI thought this might be because each call to `helpers.funcs.screenpos()` is a RPC, so I modified the benchmarks to instead send a Vimscript function that executes a Lua chunk that runs the loop and does the measurements. This does produce the results similar to the ones I measured manually. \r\n\r\nIs there a simpler way to execute Lua code inside Neovim and return the results to the benchmarks?\r\n\r\nThe benchmarks I pushed still measure the time outside the loop to make them similar to my original benchmarks. ",
            "created_at": "2024-01-03T21:02:27Z",
            "html_url": "https://github.com/neovim/neovim/pull/26813#issuecomment-1875967961",
            "id": 1875967961,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26813",
            "node_id": "IC_kwDOAPphoM5v0P_Z",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1875967961/reactions"
            },
            "updated_at": "2024-01-14T02:10:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1875967961",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/VanaIgr/events{/privacy}",
                "followers_url": "https://api.github.com/users/VanaIgr/followers",
                "following_url": "https://api.github.com/users/VanaIgr/following{/other_user}",
                "gists_url": "https://api.github.com/users/VanaIgr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/VanaIgr",
                "id": 65824523,
                "login": "VanaIgr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/VanaIgr/orgs",
                "received_events_url": "https://api.github.com/users/VanaIgr/received_events",
                "repos_url": "https://api.github.com/users/VanaIgr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/VanaIgr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/VanaIgr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/VanaIgr"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Is there a simpler way to execute Lua code inside Neovim and return the results to the benchmarks?\r\n\r\nYes, use `exec_lua` from helpers module. ",
            "created_at": "2024-01-05T09:24:18Z",
            "html_url": "https://github.com/neovim/neovim/pull/26813#issuecomment-1878365060",
            "id": 1878365060,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26813",
            "node_id": "IC_kwDOAPphoM5v9ZOE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1878365060/reactions"
            },
            "updated_at": "2024-01-05T09:24:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1878365060",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I added the benchmarks.\r\n\r\n\r\n",
            "created_at": "2024-01-07T23:18:55Z",
            "html_url": "https://github.com/neovim/neovim/pull/26813#issuecomment-1880211269",
            "id": 1880211269,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26813",
            "node_id": "IC_kwDOAPphoM5wEb9F",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 3,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1880211269/reactions"
            },
            "updated_at": "2024-01-07T23:18:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1880211269",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/VanaIgr/events{/privacy}",
                "followers_url": "https://api.github.com/users/VanaIgr/followers",
                "following_url": "https://api.github.com/users/VanaIgr/following{/other_user}",
                "gists_url": "https://api.github.com/users/VanaIgr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/VanaIgr",
                "id": 65824523,
                "login": "VanaIgr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/VanaIgr/orgs",
                "received_events_url": "https://api.github.com/users/VanaIgr/received_events",
                "repos_url": "https://api.github.com/users/VanaIgr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/VanaIgr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/VanaIgr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/VanaIgr"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I also added `plines.h` to clint.py `check_includes_ignore` list, since it uses functions from `mbyte.h` to define `init_chartabsize()` and `adv_chartabsize()`. \r\nSince both are convenience functions, I can also inline them and remove the dependency on `mbyte.h`.\r\n\r\n\r\n\r\n",
            "created_at": "2024-01-08T00:08:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/26813#issuecomment-1880235975",
            "id": 1880235975,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26813",
            "node_id": "IC_kwDOAPphoM5wEh_H",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1880235975/reactions"
            },
            "updated_at": "2024-01-08T00:08:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1880235975",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/VanaIgr/events{/privacy}",
                "followers_url": "https://api.github.com/users/VanaIgr/followers",
                "following_url": "https://api.github.com/users/VanaIgr/following{/other_user}",
                "gists_url": "https://api.github.com/users/VanaIgr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/VanaIgr",
                "id": 65824523,
                "login": "VanaIgr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/VanaIgr/orgs",
                "received_events_url": "https://api.github.com/users/VanaIgr/received_events",
                "repos_url": "https://api.github.com/users/VanaIgr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/VanaIgr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/VanaIgr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/VanaIgr"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I removed both functions. Now `plines.h` only includes mbyte_defs.",
            "created_at": "2024-01-13T02:57:22Z",
            "html_url": "https://github.com/neovim/neovim/pull/26813#issuecomment-1890270756",
            "id": 1890270756,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26813",
            "node_id": "IC_kwDOAPphoM5wqz4k",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1890270756/reactions"
            },
            "updated_at": "2024-01-13T02:57:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1890270756",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/VanaIgr/events{/privacy}",
                "followers_url": "https://api.github.com/users/VanaIgr/followers",
                "following_url": "https://api.github.com/users/VanaIgr/following{/other_user}",
                "gists_url": "https://api.github.com/users/VanaIgr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/VanaIgr",
                "id": 65824523,
                "login": "VanaIgr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/VanaIgr/orgs",
                "received_events_url": "https://api.github.com/users/VanaIgr/received_events",
                "repos_url": "https://api.github.com/users/VanaIgr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/VanaIgr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/VanaIgr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/VanaIgr"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I also found a couple of issues:\r\n\r\n1. Blockwise put doesn't add correct number of spaces for multibyte characters.\r\n\r\nThe loop that determines the number of spaces to add to the pasted text to align it ([link](https://github.com/neovim/neovim/blob/786089013d33666a2acb5ba86fb34c716a9cab26/src/nvim/ops.c#L3293)) advances the pointer by a single byte. This is not correct for multibyte characters, since all trailing bytes would be counted separately as 4 cell wide '\\<xx\\>'. This issue is also present in vim.\r\nFor example, copying the text at the top (blockwise, without virtualedit) and pasting it before the b's at the bottom while in blockwise visual mode would result in this:\r\n![image](https://github.com/neovim/neovim/assets/65824523/2da78925-6bfc-4a1a-90c1-00a516d3aaa6) ![image](https://github.com/neovim/neovim/assets/65824523/d698bc2a-3bc8-4f60-aa77-6d7f0d22c3de)\r\nThis can be fixed by using `MB_PTR_ADV(cts.cts_ptr)` instead of `cts.cts_ptr++`, and changing the loop to iterate until the end of the string.\r\n\r\nThis still wouldn't work correctly for tabs, since all widths are computed at virtual column 0, but tab width changes depending on its position. I thought there also may be some issues if the tab's width is greater than window width and breakindent in enabled (since the size of breakindent in this case would be added to the total width of the pasted line) but for some reason this doesn't happen.\r\n\r\n2. Lisp indenting doesn't use correct line number.\r\n\r\nIn [2 places](https://github.com/neovim/neovim/blob/786089013d33666a2acb5ba86fb34c716a9cab26/src/nvim/indent.c#L1275) in `get_lisp_indent()` , the 'lnum' argument for `init_chartabsize_arg()` is `(colnr_T)(that - line)` (which computes the index of the current byte, not the line number).\r\nThis can affect the results if the line at that position contains virtual text:\r\n![image](https://github.com/neovim/neovim/assets/65824523/c819000f-3696-483c-a12a-7ca7e699e8bb)\r\n![image](https://github.com/neovim/neovim/assets/65824523/f179859e-eb29-46f4-aa22-92dac898ecdb) ![image](https://github.com/neovim/neovim/assets/65824523/fbfef993-7ec7-40b3-81d7-45c0b0d4a5df)\r\n\r\nThere is also [one place](https://github.com/neovim/neovim/blob/786089013d33666a2acb5ba86fb34c716a9cab26/src/nvim/indent.c#L1270) in this function in which character is assumed to be 1 byte long and 1 cell wide. I don't know if this can cause any issues.",
            "created_at": "2024-01-13T04:01:27Z",
            "html_url": "https://github.com/neovim/neovim/pull/26813#issuecomment-1890293346",
            "id": 1890293346,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26813",
            "node_id": "IC_kwDOAPphoM5wq5Zi",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1890293346/reactions"
            },
            "updated_at": "2024-01-13T04:03:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1890293346",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/VanaIgr/events{/privacy}",
                "followers_url": "https://api.github.com/users/VanaIgr/followers",
                "following_url": "https://api.github.com/users/VanaIgr/following{/other_user}",
                "gists_url": "https://api.github.com/users/VanaIgr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/VanaIgr",
                "id": 65824523,
                "login": "VanaIgr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/VanaIgr/orgs",
                "received_events_url": "https://api.github.com/users/VanaIgr/received_events",
                "repos_url": "https://api.github.com/users/VanaIgr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/VanaIgr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/VanaIgr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/VanaIgr"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Can you mention the user-facing consequences in `:help news` (e.g. \"performance of 'breakindent', foo, bar, etc., is now 3x faster for long lines, etc, etc\"\r\n\r\nhttps://github.com/neovim/neovim/blob/2dc439c672facaeb8e51ef6aa20efc0e7092eee2/runtime/doc/news.txt#L129 \r\n\r\nAlso would be ideal if the commit message contains the explanation from the PR description, especially the list of problems addressed.",
            "created_at": "2024-01-13T17:28:41Z",
            "html_url": "https://github.com/neovim/neovim/pull/26813#issuecomment-1890601210",
            "id": 1890601210,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26813",
            "node_id": "IC_kwDOAPphoM5wsEj6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1890601210/reactions"
            },
            "updated_at": "2024-01-13T17:29:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1890601210",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Is there anything else I should do?",
            "created_at": "2024-01-16T01:28:39Z",
            "html_url": "https://github.com/neovim/neovim/pull/26813#issuecomment-1892941356",
            "id": 1892941356,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26813",
            "node_id": "IC_kwDOAPphoM5w0_4s",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1892941356/reactions"
            },
            "updated_at": "2024-01-16T01:28:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1892941356",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/VanaIgr/events{/privacy}",
                "followers_url": "https://api.github.com/users/VanaIgr/followers",
                "following_url": "https://api.github.com/users/VanaIgr/following{/other_user}",
                "gists_url": "https://api.github.com/users/VanaIgr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/VanaIgr",
                "id": 65824523,
                "login": "VanaIgr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/VanaIgr/orgs",
                "received_events_url": "https://api.github.com/users/VanaIgr/received_events",
                "repos_url": "https://api.github.com/users/VanaIgr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/VanaIgr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/VanaIgr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/VanaIgr"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yes, fixing the endian issue that makes the test fail (see @bfredl's comment above). ",
            "created_at": "2024-01-16T07:04:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/26813#issuecomment-1893173371",
            "id": 1893173371,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26813",
            "node_id": "IC_kwDOAPphoM5w14h7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1893173371/reactions"
            },
            "updated_at": "2024-01-16T07:46:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1893173371",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Hmm, there might be no more s3900 failures than those known to exist on master, which is also 8+3, see https://github.com/neovim/neovim/pull/26950",
            "created_at": "2024-01-16T07:43:30Z",
            "html_url": "https://github.com/neovim/neovim/pull/26813#issuecomment-1893213251",
            "id": 1893213251,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26813",
            "node_id": "IC_kwDOAPphoM5w2CRD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1893213251/reactions"
            },
            "updated_at": "2024-01-16T08:12:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1893213251",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Oh, right, I should have looked at the details first. Yes, the original (relevant) s390x failures seem to be gone. 🚀 ",
            "created_at": "2024-01-16T07:45:56Z",
            "html_url": "https://github.com/neovim/neovim/pull/26813#issuecomment-1893215895",
            "id": 1893215895,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26813",
            "node_id": "IC_kwDOAPphoM5w2C6X",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1893215895/reactions"
            },
            "updated_at": "2024-01-16T08:12:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1893215895",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The fourth commit splits the character size functions into 'regular' and 'fast' versions (win_lbr_chartabsize() -> charsize_regular(), win_nolbr_chartabsize() ~> charsize_fast(), win_linetabsize_cts() -> linesize_regular(), linesize_fast()). Checks for which version to use are computed when 'charsize' argument is initialized.\r\n\r\nWould it be possible to benchmark how much faster things become by this last step (compared to do the rest of the improvements but not this)? It looks this change is more or less isolated to a separate commit (thus the rest of step 4 is in an earlier commit). Is there a reason 'linebreak', 'showbreak' and 'breakindent' cannot be done in the \"fast\" variant of the algorithm? (or maybe this doesn't make sense, because it is just the same algorithm but with deletion of branches, etc?).\r\n\r\nThe use of these options are quite popular, and it would be great if these cases are fully optimized as well, also avoiding duplicate code would be nice. OTOH, if the `charsize_fast()` branch is significantly faster and its hard do to this with these options, and we thus keep this branching as is for a long time, it would be good to document that perhaps (\"when dealing with text with really long lines, turn off 'linebreak', 'showbreak' and 'breakindent' for best performance\")",
            "created_at": "2024-01-16T08:41:08Z",
            "html_url": "https://github.com/neovim/neovim/pull/26813#issuecomment-1893287984",
            "id": 1893287984,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26813",
            "node_id": "IC_kwDOAPphoM5w2Ugw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1893287984/reactions"
            },
            "updated_at": "2024-01-16T08:41:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1893287984",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "There is a typo \"myltibyte\" in the third commit message.",
            "created_at": "2024-01-17T07:08:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/26813#issuecomment-1895188576",
            "id": 1895188576,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26813",
            "node_id": "IC_kwDOAPphoM5w9khg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1895188576/reactions"
            },
            "updated_at": "2024-01-17T07:08:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1895188576",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Would it be possible to benchmark how much faster things become by this last step (compared to do the rest of the improvements but not this)?\r\n\r\nYes, here are the benchmarks:\r\n||5'000 i|5'000 À|50*100 i|50*100 À|25*200 i|25*200 À|\r\n|-|-|-|-|-|-|-|\r\n|original|26|179|75|209|73|207|\r\n|3rd commit|13|84|74|180|72|177|\r\n|4th commit w/o splitting/inlining|11|79|63|136|60|133|\r\n|4th commit|12|79|16|85|14|82|\r\n\r\n('4th commit w/o splitting/inlining' adds unicode functions from the third commit to other places)\r\n\r\n\r\n> Is there a reason 'linebreak', 'showbreak' and 'breakindent' cannot be done in the \"fast\" variant of the algorithm? (or maybe this doesn't make sense, because it is just the same algorithm but with deletion of branches, etc?).\r\n\r\nFrom my early measurements, splitting and inlining was the fastest option. I also experimented with only having one version and trying to make it as fast as possible, but it was still slow ('fast combined, inlined' in the table below).\r\nSince now I don't have to run all benchmarks manually, I benchmarked the code where only the regular version is used and where the two versions are split. I used '50*100 i' benchmark since it makes use of `linesize_` functions, and I can just change which function is called.\r\n\r\n|version|time, us|\r\n|-|-|\r\n|combined, not inlined|63|\r\n|combined, inlined|38|\r\n|fast combined, inlined|33|\r\n|split, fast not inlined|28|\r\n|split, fast inlined (current)|16|\r\n\r\n(Inlined here refers to the `charsize_` function, not `linesize_`)\r\n\r\n> The use of these options are quite popular, and it would be great if these cases are fully optimized as well\r\n\r\nI think it is possible to use `charsize_fast()` even if `breakindent` or `showbreak` are enabled. We can compute the size of the line and then add something like `(total_size - win_width) / (win_width - indent_size) * indent_size` to it. This wouldn't work if a doublewidth character is present or we need an intermediate virtual column for some other computation. We can compute and add the appropriate amount of breakindent each time we encounter either of these issues.\r\n\r\nI have some other ideas on how `showbreak` and `breakindent` could be optimized in `charsize_regular()`, but I don't understand what `max_head_vcol` does. \r\n`linebreak` would be very hard to optimize, since it must know if the **following** word should be wrapped, which requires computing its size (also, it currently doesn't consider inline virtual text).\r\n![image](https://github.com/neovim/neovim/assets/65824523/9ec0aa60-84cf-46ac-9d3f-be6f697d72a1)\r\n\r\n\r\n",
            "created_at": "2024-01-17T09:22:37Z",
            "html_url": "https://github.com/neovim/neovim/pull/26813#issuecomment-1895408121",
            "id": 1895408121,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26813",
            "node_id": "IC_kwDOAPphoM5w-aH5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1895408121/reactions"
            },
            "updated_at": "2024-01-17T14:46:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1895408121",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/VanaIgr/events{/privacy}",
                "followers_url": "https://api.github.com/users/VanaIgr/followers",
                "following_url": "https://api.github.com/users/VanaIgr/following{/other_user}",
                "gists_url": "https://api.github.com/users/VanaIgr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/VanaIgr",
                "id": 65824523,
                "login": "VanaIgr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/VanaIgr/orgs",
                "received_events_url": "https://api.github.com/users/VanaIgr/received_events",
                "repos_url": "https://api.github.com/users/VanaIgr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/VanaIgr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/VanaIgr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/VanaIgr"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "`max_head_vcol` is used to differentiate the following three situations:\r\n- `= 0`: Getting the full size or starting virtcol of characters\r\n- `< 0`: Getting the virtcol of where cursor should be placed\r\n- `> 0`: Getting how many cells of inline virtual text to skip because of 'smoothscroll'",
            "created_at": "2024-01-17T09:29:08Z",
            "html_url": "https://github.com/neovim/neovim/pull/26813#issuecomment-1895419931",
            "id": 1895419931,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26813",
            "node_id": "IC_kwDOAPphoM5w-dAb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1895419931/reactions"
            },
            "updated_at": "2024-01-17T09:33:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1895419931",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I was trying to rewrite the `'linebreak'` algorithm after noticing that #25276 can still happen when tabs are used\r\n![image](https://github.com/neovim/neovim/assets/65824523/49169428-e835-4f52-8b4b-55f5b60a260b)\r\nAnd kept running into failing tests.\r\n\r\n[This test](https://github.com/neovim/neovim/blob/fa9a85ae468b9df30ae9e5c05a08c0f124e267df/test/old/testdir/test_listlbr.vim#L62) and [this test](https://github.com/neovim/neovim/blob/8df7978fe31635ede12f6dae224e6a6c8f1ba882/test/old/testdir/test_breakindent.vim#L792) both have a word followed by a line breaking character that stops at the end of the line, but the first word causes a line break, while the second one doesn't.\r\n\r\nIn case of the first test, the `hijklmn` part is followed by a tab, tabstop=4, window width=20. Tab stops at the end of the line.\r\nFor the second test, the word is `no`, and it is followed by a space that also ends at the end of the line.\r\n\r\nI think the issue is that `'linebreak'` algorithm probably uses previous character's virtual column to calculate size of the current character, and that results in inconsistent behavior in the tests. Tab would increase its width to end up at the same column, while space would just take 1 cell and end up 1 cell away from the window's edge.",
            "created_at": "2024-01-21T10:43:53Z",
            "html_url": "https://github.com/neovim/neovim/pull/26813#issuecomment-1902589370",
            "id": 1902589370,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26813",
            "node_id": "IC_kwDOAPphoM5xZzW6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 2,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902589370/reactions"
            },
            "updated_at": "2024-01-21T10:44:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1902589370",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/VanaIgr/events{/privacy}",
                "followers_url": "https://api.github.com/users/VanaIgr/followers",
                "following_url": "https://api.github.com/users/VanaIgr/following{/other_user}",
                "gists_url": "https://api.github.com/users/VanaIgr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/VanaIgr",
                "id": 65824523,
                "login": "VanaIgr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/VanaIgr/orgs",
                "received_events_url": "https://api.github.com/users/VanaIgr/received_events",
                "repos_url": "https://api.github.com/users/VanaIgr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/VanaIgr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/VanaIgr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/VanaIgr"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/26813/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/26813/commits",
    "created_at": "2023-12-31T00:53:57Z",
    "diff_url": "https://github.com/neovim/neovim/pull/26813.diff",
    "draft": false,
    "head": {
        "label": "VanaIgr:screen-pos-speedup",
        "ref": "screen-pos-speedup",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/VanaIgr/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/VanaIgr/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/VanaIgr/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/VanaIgr/neovim/branches{/branch}",
            "clone_url": "https://github.com/VanaIgr/neovim.git",
            "collaborators_url": "https://api.github.com/repos/VanaIgr/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/VanaIgr/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/VanaIgr/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/VanaIgr/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/VanaIgr/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/VanaIgr/neovim/contributors",
            "created_at": "2023-12-05T22:08:59Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/VanaIgr/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/VanaIgr/neovim/downloads",
            "events_url": "https://api.github.com/repos/VanaIgr/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/VanaIgr/neovim/forks",
            "full_name": "VanaIgr/neovim",
            "git_commits_url": "https://api.github.com/repos/VanaIgr/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/VanaIgr/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/VanaIgr/neovim/git/tags{/sha}",
            "git_url": "git://github.com/VanaIgr/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/VanaIgr/neovim/hooks",
            "html_url": "https://github.com/VanaIgr/neovim",
            "id": 727936921,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/VanaIgr/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/VanaIgr/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/VanaIgr/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/VanaIgr/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/VanaIgr/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/VanaIgr/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/VanaIgr/neovim/merges",
            "milestones_url": "https://api.github.com/repos/VanaIgr/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOK2NvmQ",
            "notifications_url": "https://api.github.com/repos/VanaIgr/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
                "events_url": "https://api.github.com/users/VanaIgr/events{/privacy}",
                "followers_url": "https://api.github.com/users/VanaIgr/followers",
                "following_url": "https://api.github.com/users/VanaIgr/following{/other_user}",
                "gists_url": "https://api.github.com/users/VanaIgr/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/VanaIgr",
                "id": 65824523,
                "login": "VanaIgr",
                "node_id": "MDQ6VXNlcjY1ODI0NTIz",
                "organizations_url": "https://api.github.com/users/VanaIgr/orgs",
                "received_events_url": "https://api.github.com/users/VanaIgr/received_events",
                "repos_url": "https://api.github.com/users/VanaIgr/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/VanaIgr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/VanaIgr/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/VanaIgr"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/VanaIgr/neovim/pulls{/number}",
            "pushed_at": "2024-01-22T20:57:41Z",
            "releases_url": "https://api.github.com/repos/VanaIgr/neovim/releases{/id}",
            "size": 244808,
            "ssh_url": "git@github.com:VanaIgr/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/VanaIgr/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/VanaIgr/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/VanaIgr/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/VanaIgr/neovim/subscription",
            "svn_url": "https://github.com/VanaIgr/neovim",
            "tags_url": "https://api.github.com/repos/VanaIgr/neovim/tags",
            "teams_url": "https://api.github.com/repos/VanaIgr/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/VanaIgr/neovim/git/trees{/sha}",
            "updated_at": "2023-12-13T20:00:37Z",
            "url": "https://api.github.com/repos/VanaIgr/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
            "events_url": "https://api.github.com/users/VanaIgr/events{/privacy}",
            "followers_url": "https://api.github.com/users/VanaIgr/followers",
            "following_url": "https://api.github.com/users/VanaIgr/following{/other_user}",
            "gists_url": "https://api.github.com/users/VanaIgr/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/VanaIgr",
            "id": 65824523,
            "login": "VanaIgr",
            "node_id": "MDQ6VXNlcjY1ODI0NTIz",
            "organizations_url": "https://api.github.com/users/VanaIgr/orgs",
            "received_events_url": "https://api.github.com/users/VanaIgr/received_events",
            "repos_url": "https://api.github.com/users/VanaIgr/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/VanaIgr/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/VanaIgr/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/VanaIgr"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/26813",
    "id": 1660535726,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26813",
    "labels": [
        {
            "color": "FEF2C0",
            "default": false,
            "description": "issues reporting performance problems",
            "id": 101930601,
            "name": "performance",
            "node_id": "MDU6TGFiZWwxMDE5MzA2MDE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/performance"
        },
        {
            "color": "0052CC",
            "default": false,
            "description": "Enable CI for s390x",
            "id": 6154834276,
            "name": "ci-s390x",
            "node_id": "LA_kwDOAPphoM8AAAABbttRZA",
            "url": "https://api.github.com/repos/neovim/neovim/labels/ci-s390x"
        }
    ],
    "locked": false,
    "merge_commit_sha": "8c6de9147cabbf99d18afbdbed2f11f30c1d0dfc",
    "merged_at": "2024-01-22T02:00:11Z",
    "milestone": {
        "closed_at": null,
        "closed_issues": 252,
        "created_at": "2023-02-02T14:11:43Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
            "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
            "followers_url": "https://api.github.com/users/bfredl/followers",
            "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
            "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bfredl",
            "id": 1363104,
            "login": "bfredl",
            "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
            "organizations_url": "https://api.github.com/users/bfredl/orgs",
            "received_events_url": "https://api.github.com/users/bfredl/received_events",
            "repos_url": "https://api.github.com/users/bfredl/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bfredl"
        },
        "description": "",
        "due_on": "2024-03-01T08:00:00Z",
        "html_url": "https://github.com/neovim/neovim/milestone/36",
        "id": 8997654,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/36/labels",
        "node_id": "MI_kwDOAPphoM4AiUsW",
        "number": 36,
        "open_issues": 134,
        "state": "open",
        "title": "0.10",
        "updated_at": "2024-01-22T22:15:07Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/36"
    },
    "node_id": "PR_kwDOAPphoM5i-cOu",
    "number": 26813,
    "patch_url": "https://github.com/neovim/neovim/pull/26813.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/26813/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/fd08de4b85ae42fe3ad5b480b58df9f7fff76269",
    "title": "perf: make screen size and position calculations more efficient",
    "updated_at": "2024-01-22T20:27:41Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/26813",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/65824523?v=4",
        "events_url": "https://api.github.com/users/VanaIgr/events{/privacy}",
        "followers_url": "https://api.github.com/users/VanaIgr/followers",
        "following_url": "https://api.github.com/users/VanaIgr/following{/other_user}",
        "gists_url": "https://api.github.com/users/VanaIgr/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/VanaIgr",
        "id": 65824523,
        "login": "VanaIgr",
        "node_id": "MDQ6VXNlcjY1ODI0NTIz",
        "organizations_url": "https://api.github.com/users/VanaIgr/orgs",
        "received_events_url": "https://api.github.com/users/VanaIgr/received_events",
        "repos_url": "https://api.github.com/users/VanaIgr/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/VanaIgr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/VanaIgr/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/VanaIgr"
    }
}