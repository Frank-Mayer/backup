{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/29026/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/29026/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/29026"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/29026"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/29026/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/29026"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/0af67f35ecd411e37b914aae7cebc3b9bba03f21"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5414,
            "forks_count": 5414,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1725,
            "open_issues_count": 1725,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-05-27T22:51:37Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 271477,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 78533,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-05-28T01:40:20Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 78533,
            "watchers_count": 78533,
            "web_commit_signoff_required": false
        },
        "sha": "4f24e1b1d743a13f5a7b536f8acce9552143794d",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "Problem: there is no built-in tutorial on how to write Lua plugin from\r\n  scratch.\r\n\r\nSolution: write the tutorial.\r\n\r\n------\r\n\r\nThis is a (currently draft) suggestion for built-in tutorial on how to write Lua plugin. The general idea is to list some basic practices in an encouraging tone accompanied by small digestible examples and lots of links.\r\n\r\nMost of necessary Lua Neovim background is already there in a very informative 'lua-guide.txt'. So I think that making a guide for writing a Lua plugin in the form of hands-on tutorial while *suggesting* some common approaches provides a nice balance to 'lua-guide.txt'.\r\n\r\nAlthough a draft with only some sections written, I'd like to ask the whole @neovim/core for the feedback on whether this is worth pursuing along the lines outlined near the TODOs.",
    "closed_at": "2024-05-26T17:50:13Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29026#discussion_r1615261526"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29026"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1615261526"
                }
            },
            "author_association": "MEMBER",
            "body": "this is all just way too verbose and conversational.",
            "commit_id": "0af67f35ecd411e37b914aae7cebc3b9bba03f21",
            "created_at": "2024-05-26T16:32:48Z",
            "diff_hunk": "@@ -0,0 +1,290 @@\n+*lua-plugin.txt*                       Nvim\n+\n+                            NVIM REFERENCE MANUAL\n+\n+                    Tutorial on how to write a Lua plugin\n+\n+\n+                                       Type |gO| to see the table of contents.\n+\n+==============================================================================\n+Introduction                                                        *lua-plugin*\n+\n+Writing a Lua plugin from scratch can be overwhelming. This tutorial is aimed",
            "html_url": "https://github.com/neovim/neovim/pull/29026#discussion_r1615261526",
            "id": 1615261526,
            "line": 13,
            "node_id": "PRRC_kwDOAPphoM5gRu9W",
            "original_commit_id": "0af67f35ecd411e37b914aae7cebc3b9bba03f21",
            "original_line": 13,
            "original_position": 13,
            "original_start_line": null,
            "path": "runtime/doc/lua-plugin.txt",
            "position": 13,
            "pull_request_review_id": 2079700215,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29026",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1615261526/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-26T16:32:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1615261526",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29026#discussion_r1615265217"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29026"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1615265217"
                }
            },
            "author_association": "MEMBER",
            "body": "This feels overkill. You're already specifying later that `no-trailing` should be put in runtimepath.",
            "commit_id": "0af67f35ecd411e37b914aae7cebc3b9bba03f21",
            "created_at": "2024-05-26T16:59:29Z",
            "diff_hunk": "@@ -0,0 +1,290 @@\n+*lua-plugin.txt*                       Nvim\n+\n+                            NVIM REFERENCE MANUAL\n+\n+                    Tutorial on how to write a Lua plugin\n+\n+\n+                                       Type |gO| to see the table of contents.\n+\n+==============================================================================\n+Introduction                                                        *lua-plugin*\n+\n+Writing a Lua plugin from scratch can be overwhelming. This tutorial is aimed\n+to provide basic guidance for it in the form of hands-on example. We will be\n+building a plugin called \"no-trailing\" with scope to provide functionality\n+to remove last (i.e. trailing) blank lines (i.e. containing only whitespace)\n+in the buffer.\n+\n+An important disclaimer: Nvim allows flexible approaches to creating Lua\n+plugins and is constantly evolving. This tutorial intentionally omits\n+providing hard guidelines preferring instead to list some common approaches\n+with their pros and cons.\n+\n+It is a good idea to understand at least basics of the following topics:\n+\n+• Lua language. See |luaref| and |lua-concepts|.\n+• Lua in Nvim. See |lua-guide|.\n+• Reading and searching help. See |help.txt| and |:helpgrep|.\n+• File system operations, like creating file and directories.\n+\n+==============================================================================\n+Lua code                                                        *lua-plugin-lua*\n+\n+The core functionality of any Lua plugin is its code. It is located in `lua/`\n+subdirectory of the plugin.\n+\n+First start by creating a directory `no-trailing/` inside your 'runtimepath'.\n+In this tutorial let's use the following path:\n+`$XDG_DATA_HOME/nvim/site/pack/tutorial/start/no-trailing` (see |$XDG_DATA_HOME\n+for its value on your system). The reason to choose this complicated path is\n+because it utilizes built-in |packages| functionality to make this plugin\n+installed in your config.",
            "html_url": "https://github.com/neovim/neovim/pull/29026#discussion_r1615265217",
            "id": 1615265217,
            "line": 42,
            "node_id": "PRRC_kwDOAPphoM5gRv3B",
            "original_commit_id": "0af67f35ecd411e37b914aae7cebc3b9bba03f21",
            "original_line": 42,
            "original_position": 42,
            "original_start_line": 37,
            "path": "runtime/doc/lua-plugin.txt",
            "position": 42,
            "pull_request_review_id": 2079740682,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29026",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1615265217/reactions"
            },
            "side": "RIGHT",
            "start_line": 37,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-05-26T16:59:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1615265217",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29026#discussion_r1615266826"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29026"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1615266826"
                }
            },
            "author_association": "MEMBER",
            "body": "There's lotta \"up to you\"s here. Obviously people are free to go with their gut, don't think specifying this is necessary.",
            "commit_id": "0af67f35ecd411e37b914aae7cebc3b9bba03f21",
            "created_at": "2024-05-26T17:09:56Z",
            "diff_hunk": "@@ -0,0 +1,290 @@\n+*lua-plugin.txt*                       Nvim\n+\n+                            NVIM REFERENCE MANUAL\n+\n+                    Tutorial on how to write a Lua plugin\n+\n+\n+                                       Type |gO| to see the table of contents.\n+\n+==============================================================================\n+Introduction                                                        *lua-plugin*\n+\n+Writing a Lua plugin from scratch can be overwhelming. This tutorial is aimed\n+to provide basic guidance for it in the form of hands-on example. We will be\n+building a plugin called \"no-trailing\" with scope to provide functionality\n+to remove last (i.e. trailing) blank lines (i.e. containing only whitespace)\n+in the buffer.\n+\n+An important disclaimer: Nvim allows flexible approaches to creating Lua\n+plugins and is constantly evolving. This tutorial intentionally omits\n+providing hard guidelines preferring instead to list some common approaches\n+with their pros and cons.\n+\n+It is a good idea to understand at least basics of the following topics:\n+\n+• Lua language. See |luaref| and |lua-concepts|.\n+• Lua in Nvim. See |lua-guide|.\n+• Reading and searching help. See |help.txt| and |:helpgrep|.\n+• File system operations, like creating file and directories.\n+\n+==============================================================================\n+Lua code                                                        *lua-plugin-lua*\n+\n+The core functionality of any Lua plugin is its code. It is located in `lua/`\n+subdirectory of the plugin.\n+\n+First start by creating a directory `no-trailing/` inside your 'runtimepath'.\n+In this tutorial let's use the following path:\n+`$XDG_DATA_HOME/nvim/site/pack/tutorial/start/no-trailing` (see |$XDG_DATA_HOME\n+for its value on your system). The reason to choose this complicated path is\n+because it utilizes built-in |packages| functionality to make this plugin\n+installed in your config.\n+\n+The newly created `no-trailing/` directory will be treated as root for all\n+relative paths used here. In particular as a first commented line in code\n+blocks to describe where it should be placed.\n+\n+Now let's create a `lua/no-trailing/init.lua` file. It will contain the Lua\n+code implementing core functionality. For plugin that removes trailing lines\n+it can be something like this:\n+>lua\n+    -- lua/no-trailing/init.lua\n+\n+    -- Create a table to store and later return module's user facing functions\n+    -- Using `M` is a popular convention, but any name is possible\n+    local M = {}\n+\n+    -- Create user facing function\n+    M.trim = function(buf_id, opts)\n+      -- Validate required arguments\n+      local ok, is_buf_valid = pcall(vim.api.nvim_buf_is_valid, buf_id)\n+      assert(ok and is_buf_valid, '`buf_id` is not a valid buffer identifier')\n+\n+      -- Infer and validate optional arguments\n+      opts = vim.tbl_deep_extend('force', { empty = false }, opts or {})\n+      assert(type(opts.empty) == 'boolean', '`opts.empty` is not boolean')\n+\n+      -- Compute number of the first line to be removed: iterate from the end\n+      -- backwards and stop when line is not target depending on `empty`\n+      local target_pattern = opts.empty and '^$' or '^%s*$'\n+      local lines = vim.api.nvim_buf_get_lines(buf_id, 0, -1, false)\n+      local start_line\n+      for i = #lines, 1, -1 do\n+        if lines[i]:find(target_pattern) == nil then\n+          start_line = i\n+          break\n+        end\n+      end\n+      start_line = start_line or 0\n+\n+      -- Remove trailing lines\n+      vim.api.nvim_buf_set_lines(buf_id, start_line, -1, false, {})\n+    end\n+\n+    -- Return the module. This must be the last of the file.\n+    return M\n+<\n+And this is it. You have create a Lua plugin. Users now can install it\n+(i.e. put the whole `no-trailing/` directory in their 'runtimepath' manually\n+or via plugin manager) and use it directly with `require()`:\n+\n+• Any of `require('no-trailing').trim(0)`, `require('no-trailing').trim(0, {})`,\n+  or `require('no-trailing').trim(0, { empty = false })` removes all\n+  blank trailing lines.\n+\n+• `require('no-trailing').trim(0, { empty = true })` removes only empty\n+  trailing lines.\n+\n+• Any of `require('no-trailing').trim()`, `require('no-trailing').setup('a')`,\n+  `require('no-trailing').trim(0, { empty = 'a' })` will throw an error.\n+\n+Notes:\n+\n+• Choosing function scope (i.e. what it does) is up to you. Usually preferring\n+  the functionality just enough for it to be useful for target audience is\n+  a good approach. You can see what Nvim does in |dev-lua|.\n+\n+• Choosing names for plugin/function/arguments/options is up to you. Usually\n+  choosing a short \"to the point\" yet descriptive name is a good approach.\n+  You can see what Nvim does in |dev-naming|.\n+\n+• Choosing function signature (i.e its arguments) is up to you. Preferring\n+  first mandatory arguments followed by a single optional table `opts` with\n+  optional arguments is a common convention.\n+  You can see what Nvim uses in |dev-patterns| and |dev-api|.",
            "html_url": "https://github.com/neovim/neovim/pull/29026#discussion_r1615266826",
            "id": 1615266826,
            "line": 115,
            "node_id": "PRRC_kwDOAPphoM5gRwQK",
            "original_commit_id": "0af67f35ecd411e37b914aae7cebc3b9bba03f21",
            "original_line": 115,
            "original_position": 115,
            "original_start_line": 104,
            "path": "runtime/doc/lua-plugin.txt",
            "position": 115,
            "pull_request_review_id": 2079757791,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29026",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1615266826/reactions"
            },
            "side": "RIGHT",
            "start_line": 104,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-05-26T17:09:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1615266826",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29026#discussion_r1615267324"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29026"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1615267324"
                }
            },
            "author_association": "MEMBER",
            "body": "This isn't that helpful, ngl. I'd just yeet it.",
            "commit_id": "0af67f35ecd411e37b914aae7cebc3b9bba03f21",
            "created_at": "2024-05-26T17:10:45Z",
            "diff_hunk": "@@ -0,0 +1,290 @@\n+*lua-plugin.txt*                       Nvim\n+\n+                            NVIM REFERENCE MANUAL\n+\n+                    Tutorial on how to write a Lua plugin\n+\n+\n+                                       Type |gO| to see the table of contents.\n+\n+==============================================================================\n+Introduction                                                        *lua-plugin*\n+\n+Writing a Lua plugin from scratch can be overwhelming. This tutorial is aimed\n+to provide basic guidance for it in the form of hands-on example. We will be\n+building a plugin called \"no-trailing\" with scope to provide functionality\n+to remove last (i.e. trailing) blank lines (i.e. containing only whitespace)\n+in the buffer.\n+\n+An important disclaimer: Nvim allows flexible approaches to creating Lua\n+plugins and is constantly evolving. This tutorial intentionally omits\n+providing hard guidelines preferring instead to list some common approaches\n+with their pros and cons.\n+\n+It is a good idea to understand at least basics of the following topics:\n+\n+• Lua language. See |luaref| and |lua-concepts|.\n+• Lua in Nvim. See |lua-guide|.\n+• Reading and searching help. See |help.txt| and |:helpgrep|.\n+• File system operations, like creating file and directories.\n+\n+==============================================================================\n+Lua code                                                        *lua-plugin-lua*\n+\n+The core functionality of any Lua plugin is its code. It is located in `lua/`\n+subdirectory of the plugin.\n+\n+First start by creating a directory `no-trailing/` inside your 'runtimepath'.\n+In this tutorial let's use the following path:\n+`$XDG_DATA_HOME/nvim/site/pack/tutorial/start/no-trailing` (see |$XDG_DATA_HOME\n+for its value on your system). The reason to choose this complicated path is\n+because it utilizes built-in |packages| functionality to make this plugin\n+installed in your config.\n+\n+The newly created `no-trailing/` directory will be treated as root for all\n+relative paths used here. In particular as a first commented line in code\n+blocks to describe where it should be placed.\n+\n+Now let's create a `lua/no-trailing/init.lua` file. It will contain the Lua\n+code implementing core functionality. For plugin that removes trailing lines\n+it can be something like this:\n+>lua\n+    -- lua/no-trailing/init.lua\n+\n+    -- Create a table to store and later return module's user facing functions\n+    -- Using `M` is a popular convention, but any name is possible\n+    local M = {}\n+\n+    -- Create user facing function\n+    M.trim = function(buf_id, opts)\n+      -- Validate required arguments\n+      local ok, is_buf_valid = pcall(vim.api.nvim_buf_is_valid, buf_id)\n+      assert(ok and is_buf_valid, '`buf_id` is not a valid buffer identifier')\n+\n+      -- Infer and validate optional arguments\n+      opts = vim.tbl_deep_extend('force', { empty = false }, opts or {})\n+      assert(type(opts.empty) == 'boolean', '`opts.empty` is not boolean')\n+\n+      -- Compute number of the first line to be removed: iterate from the end\n+      -- backwards and stop when line is not target depending on `empty`\n+      local target_pattern = opts.empty and '^$' or '^%s*$'\n+      local lines = vim.api.nvim_buf_get_lines(buf_id, 0, -1, false)\n+      local start_line\n+      for i = #lines, 1, -1 do\n+        if lines[i]:find(target_pattern) == nil then\n+          start_line = i\n+          break\n+        end\n+      end\n+      start_line = start_line or 0\n+\n+      -- Remove trailing lines\n+      vim.api.nvim_buf_set_lines(buf_id, start_line, -1, false, {})\n+    end\n+\n+    -- Return the module. This must be the last of the file.\n+    return M\n+<\n+And this is it. You have create a Lua plugin. Users now can install it\n+(i.e. put the whole `no-trailing/` directory in their 'runtimepath' manually\n+or via plugin manager) and use it directly with `require()`:\n+\n+• Any of `require('no-trailing').trim(0)`, `require('no-trailing').trim(0, {})`,\n+  or `require('no-trailing').trim(0, { empty = false })` removes all\n+  blank trailing lines.\n+\n+• `require('no-trailing').trim(0, { empty = true })` removes only empty\n+  trailing lines.\n+\n+• Any of `require('no-trailing').trim()`, `require('no-trailing').setup('a')`,\n+  `require('no-trailing').trim(0, { empty = 'a' })` will throw an error.\n+\n+Notes:\n+\n+• Choosing function scope (i.e. what it does) is up to you. Usually preferring\n+  the functionality just enough for it to be useful for target audience is\n+  a good approach. You can see what Nvim does in |dev-lua|.\n+\n+• Choosing names for plugin/function/arguments/options is up to you. Usually\n+  choosing a short \"to the point\" yet descriptive name is a good approach.\n+  You can see what Nvim does in |dev-naming|.\n+\n+• Choosing function signature (i.e its arguments) is up to you. Preferring\n+  first mandatory arguments followed by a single optional table `opts` with\n+  optional arguments is a common convention.\n+  You can see what Nvim uses in |dev-patterns| and |dev-api|.\n+\n+• To interactively test latest plugin functionality, open separate fresh Nvim\n+  instance with plugin loaded and interact with it.",
            "html_url": "https://github.com/neovim/neovim/pull/29026#discussion_r1615267324",
            "id": 1615267324,
            "line": 118,
            "node_id": "PRRC_kwDOAPphoM5gRwX8",
            "original_commit_id": "0af67f35ecd411e37b914aae7cebc3b9bba03f21",
            "original_line": 118,
            "original_position": 118,
            "original_start_line": 117,
            "path": "runtime/doc/lua-plugin.txt",
            "position": 118,
            "pull_request_review_id": 2079757886,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29026",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1615267324/reactions"
            },
            "side": "RIGHT",
            "start_line": 117,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-05-26T17:10:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1615267324",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29026#discussion_r1615269404"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29026"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1615269404"
                }
            },
            "author_association": "MEMBER",
            "body": "I'd honestly yeet all validation and error checking for the time being, I usually find it annoying when guides go \"best practices\" on me when I just want the thing to work first.",
            "commit_id": "0af67f35ecd411e37b914aae7cebc3b9bba03f21",
            "created_at": "2024-05-26T17:15:06Z",
            "diff_hunk": "@@ -0,0 +1,290 @@\n+*lua-plugin.txt*                       Nvim\n+\n+                            NVIM REFERENCE MANUAL\n+\n+                    Tutorial on how to write a Lua plugin\n+\n+\n+                                       Type |gO| to see the table of contents.\n+\n+==============================================================================\n+Introduction                                                        *lua-plugin*\n+\n+Writing a Lua plugin from scratch can be overwhelming. This tutorial is aimed\n+to provide basic guidance for it in the form of hands-on example. We will be\n+building a plugin called \"no-trailing\" with scope to provide functionality\n+to remove last (i.e. trailing) blank lines (i.e. containing only whitespace)\n+in the buffer.\n+\n+An important disclaimer: Nvim allows flexible approaches to creating Lua\n+plugins and is constantly evolving. This tutorial intentionally omits\n+providing hard guidelines preferring instead to list some common approaches\n+with their pros and cons.\n+\n+It is a good idea to understand at least basics of the following topics:\n+\n+• Lua language. See |luaref| and |lua-concepts|.\n+• Lua in Nvim. See |lua-guide|.\n+• Reading and searching help. See |help.txt| and |:helpgrep|.\n+• File system operations, like creating file and directories.\n+\n+==============================================================================\n+Lua code                                                        *lua-plugin-lua*\n+\n+The core functionality of any Lua plugin is its code. It is located in `lua/`\n+subdirectory of the plugin.\n+\n+First start by creating a directory `no-trailing/` inside your 'runtimepath'.\n+In this tutorial let's use the following path:\n+`$XDG_DATA_HOME/nvim/site/pack/tutorial/start/no-trailing` (see |$XDG_DATA_HOME\n+for its value on your system). The reason to choose this complicated path is\n+because it utilizes built-in |packages| functionality to make this plugin\n+installed in your config.\n+\n+The newly created `no-trailing/` directory will be treated as root for all\n+relative paths used here. In particular as a first commented line in code\n+blocks to describe where it should be placed.\n+\n+Now let's create a `lua/no-trailing/init.lua` file. It will contain the Lua\n+code implementing core functionality. For plugin that removes trailing lines\n+it can be something like this:\n+>lua\n+    -- lua/no-trailing/init.lua\n+\n+    -- Create a table to store and later return module's user facing functions\n+    -- Using `M` is a popular convention, but any name is possible\n+    local M = {}\n+\n+    -- Create user facing function\n+    M.trim = function(buf_id, opts)\n+      -- Validate required arguments\n+      local ok, is_buf_valid = pcall(vim.api.nvim_buf_is_valid, buf_id)\n+      assert(ok and is_buf_valid, '`buf_id` is not a valid buffer identifier')\n+\n+      -- Infer and validate optional arguments\n+      opts = vim.tbl_deep_extend('force', { empty = false }, opts or {})\n+      assert(type(opts.empty) == 'boolean', '`opts.empty` is not boolean')",
            "html_url": "https://github.com/neovim/neovim/pull/29026#discussion_r1615269404",
            "id": 1615269404,
            "line": 66,
            "node_id": "PRRC_kwDOAPphoM5gRw4c",
            "original_commit_id": "0af67f35ecd411e37b914aae7cebc3b9bba03f21",
            "original_line": 66,
            "original_position": 66,
            "original_start_line": null,
            "path": "runtime/doc/lua-plugin.txt",
            "position": 66,
            "pull_request_review_id": 2079758409,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29026",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1615269404/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-26T17:15:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1615269404",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29026#discussion_r1615272639"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29026"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1615272639"
                }
            },
            "author_association": "MEMBER",
            "body": "There's a LOT of code to wade through here even though the relevant part is only like 3 lines. I doubt whether the \"build plugins from scratch\" approach is the way to go here, it leads to *lot* of code reading.",
            "commit_id": "0af67f35ecd411e37b914aae7cebc3b9bba03f21",
            "created_at": "2024-05-26T17:21:23Z",
            "diff_hunk": "@@ -0,0 +1,290 @@\n+*lua-plugin.txt*                       Nvim\n+\n+                            NVIM REFERENCE MANUAL\n+\n+                    Tutorial on how to write a Lua plugin\n+\n+\n+                                       Type |gO| to see the table of contents.\n+\n+==============================================================================\n+Introduction                                                        *lua-plugin*\n+\n+Writing a Lua plugin from scratch can be overwhelming. This tutorial is aimed\n+to provide basic guidance for it in the form of hands-on example. We will be\n+building a plugin called \"no-trailing\" with scope to provide functionality\n+to remove last (i.e. trailing) blank lines (i.e. containing only whitespace)\n+in the buffer.\n+\n+An important disclaimer: Nvim allows flexible approaches to creating Lua\n+plugins and is constantly evolving. This tutorial intentionally omits\n+providing hard guidelines preferring instead to list some common approaches\n+with their pros and cons.\n+\n+It is a good idea to understand at least basics of the following topics:\n+\n+• Lua language. See |luaref| and |lua-concepts|.\n+• Lua in Nvim. See |lua-guide|.\n+• Reading and searching help. See |help.txt| and |:helpgrep|.\n+• File system operations, like creating file and directories.\n+\n+==============================================================================\n+Lua code                                                        *lua-plugin-lua*\n+\n+The core functionality of any Lua plugin is its code. It is located in `lua/`\n+subdirectory of the plugin.\n+\n+First start by creating a directory `no-trailing/` inside your 'runtimepath'.\n+In this tutorial let's use the following path:\n+`$XDG_DATA_HOME/nvim/site/pack/tutorial/start/no-trailing` (see |$XDG_DATA_HOME\n+for its value on your system). The reason to choose this complicated path is\n+because it utilizes built-in |packages| functionality to make this plugin\n+installed in your config.\n+\n+The newly created `no-trailing/` directory will be treated as root for all\n+relative paths used here. In particular as a first commented line in code\n+blocks to describe where it should be placed.\n+\n+Now let's create a `lua/no-trailing/init.lua` file. It will contain the Lua\n+code implementing core functionality. For plugin that removes trailing lines\n+it can be something like this:\n+>lua\n+    -- lua/no-trailing/init.lua\n+\n+    -- Create a table to store and later return module's user facing functions\n+    -- Using `M` is a popular convention, but any name is possible\n+    local M = {}\n+\n+    -- Create user facing function\n+    M.trim = function(buf_id, opts)\n+      -- Validate required arguments\n+      local ok, is_buf_valid = pcall(vim.api.nvim_buf_is_valid, buf_id)\n+      assert(ok and is_buf_valid, '`buf_id` is not a valid buffer identifier')\n+\n+      -- Infer and validate optional arguments\n+      opts = vim.tbl_deep_extend('force', { empty = false }, opts or {})\n+      assert(type(opts.empty) == 'boolean', '`opts.empty` is not boolean')\n+\n+      -- Compute number of the first line to be removed: iterate from the end\n+      -- backwards and stop when line is not target depending on `empty`\n+      local target_pattern = opts.empty and '^$' or '^%s*$'\n+      local lines = vim.api.nvim_buf_get_lines(buf_id, 0, -1, false)\n+      local start_line\n+      for i = #lines, 1, -1 do\n+        if lines[i]:find(target_pattern) == nil then\n+          start_line = i\n+          break\n+        end\n+      end\n+      start_line = start_line or 0\n+\n+      -- Remove trailing lines\n+      vim.api.nvim_buf_set_lines(buf_id, start_line, -1, false, {})\n+    end\n+\n+    -- Return the module. This must be the last of the file.\n+    return M\n+<\n+And this is it. You have create a Lua plugin. Users now can install it\n+(i.e. put the whole `no-trailing/` directory in their 'runtimepath' manually\n+or via plugin manager) and use it directly with `require()`:\n+\n+• Any of `require('no-trailing').trim(0)`, `require('no-trailing').trim(0, {})`,\n+  or `require('no-trailing').trim(0, { empty = false })` removes all\n+  blank trailing lines.\n+\n+• `require('no-trailing').trim(0, { empty = true })` removes only empty\n+  trailing lines.\n+\n+• Any of `require('no-trailing').trim()`, `require('no-trailing').setup('a')`,\n+  `require('no-trailing').trim(0, { empty = 'a' })` will throw an error.\n+\n+Notes:\n+\n+• Choosing function scope (i.e. what it does) is up to you. Usually preferring\n+  the functionality just enough for it to be useful for target audience is\n+  a good approach. You can see what Nvim does in |dev-lua|.\n+\n+• Choosing names for plugin/function/arguments/options is up to you. Usually\n+  choosing a short \"to the point\" yet descriptive name is a good approach.\n+  You can see what Nvim does in |dev-naming|.\n+\n+• Choosing function signature (i.e its arguments) is up to you. Preferring\n+  first mandatory arguments followed by a single optional table `opts` with\n+  optional arguments is a common convention.\n+  You can see what Nvim uses in |dev-patterns| and |dev-api|.\n+\n+• To interactively test latest plugin functionality, open separate fresh Nvim\n+  instance with plugin loaded and interact with it.\n+\n+------------------------------------------------------------------------------\n+Restructuring Lua code                                  *lua-plugin-restructure*\n+\n+Using single Lua file in plugin is possible, yet may become not easy to manage\n+if it becomes too big. To overcome this, code can be split into separate\n+modules and used inside each other with |require()|.\n+\n+In our 'no-trailing' plugin computation of the first trailing line can be\n+moved into a separate `lua/no-trailing/utils.lua` file:\n+>lua\n+    -- lua/no-trailing/utils.lua\n+\n+    local M = {}\n+\n+    M.get_last_trailing = function(buf_id, empty)\n+      local target_pattern = empty and '^$' or '^%s*$'\n+      local lines = vim.api.nvim_buf_get_lines(buf_id, 0, -1, false)\n+      for i = #lines, 1, -1 do\n+        if lines[i]:find(target_pattern) == nil then\n+          -- Moving computation into a separate function allows using the\n+          -- \"early return\" pattern\n+          return i\n+        end\n+      end\n+      return 0\n+    end\n+\n+    return M\n+<\n+\n+Now there are two main approaches on how this can be used in main module:\n+eager loading and lazy loading.\n+",
            "html_url": "https://github.com/neovim/neovim/pull/29026#discussion_r1615272639",
            "id": 1615272639,
            "line": 152,
            "node_id": "PRRC_kwDOAPphoM5gRxq_",
            "original_commit_id": "0af67f35ecd411e37b914aae7cebc3b9bba03f21",
            "original_line": 152,
            "original_position": 152,
            "original_start_line": null,
            "path": "runtime/doc/lua-plugin.txt",
            "position": 152,
            "pull_request_review_id": 2079759147,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29026",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1615272639/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-26T17:26:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1615272639",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29026#discussion_r1615274790"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29026"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1615274790"
                }
            },
            "author_association": "MEMBER",
            "body": "+100. See also https://github.com/neovim/neovim/issues/22366#issuecomment-1445501976",
            "commit_id": "0af67f35ecd411e37b914aae7cebc3b9bba03f21",
            "created_at": "2024-05-26T17:25:11Z",
            "diff_hunk": "@@ -0,0 +1,290 @@\n+*lua-plugin.txt*                       Nvim\n+\n+                            NVIM REFERENCE MANUAL\n+\n+                    Tutorial on how to write a Lua plugin\n+\n+\n+                                       Type |gO| to see the table of contents.\n+\n+==============================================================================\n+Introduction                                                        *lua-plugin*\n+\n+Writing a Lua plugin from scratch can be overwhelming. This tutorial is aimed\n+to provide basic guidance for it in the form of hands-on example. We will be\n+building a plugin called \"no-trailing\" with scope to provide functionality\n+to remove last (i.e. trailing) blank lines (i.e. containing only whitespace)\n+in the buffer.\n+\n+An important disclaimer: Nvim allows flexible approaches to creating Lua\n+plugins and is constantly evolving. This tutorial intentionally omits\n+providing hard guidelines preferring instead to list some common approaches\n+with their pros and cons.\n+\n+It is a good idea to understand at least basics of the following topics:\n+\n+• Lua language. See |luaref| and |lua-concepts|.\n+• Lua in Nvim. See |lua-guide|.\n+• Reading and searching help. See |help.txt| and |:helpgrep|.\n+• File system operations, like creating file and directories.\n+\n+==============================================================================\n+Lua code                                                        *lua-plugin-lua*\n+\n+The core functionality of any Lua plugin is its code. It is located in `lua/`\n+subdirectory of the plugin.\n+\n+First start by creating a directory `no-trailing/` inside your 'runtimepath'.\n+In this tutorial let's use the following path:\n+`$XDG_DATA_HOME/nvim/site/pack/tutorial/start/no-trailing` (see |$XDG_DATA_HOME\n+for its value on your system). The reason to choose this complicated path is\n+because it utilizes built-in |packages| functionality to make this plugin\n+installed in your config.\n+\n+The newly created `no-trailing/` directory will be treated as root for all\n+relative paths used here. In particular as a first commented line in code\n+blocks to describe where it should be placed.\n+\n+Now let's create a `lua/no-trailing/init.lua` file. It will contain the Lua\n+code implementing core functionality. For plugin that removes trailing lines\n+it can be something like this:\n+>lua\n+    -- lua/no-trailing/init.lua\n+\n+    -- Create a table to store and later return module's user facing functions\n+    -- Using `M` is a popular convention, but any name is possible\n+    local M = {}\n+\n+    -- Create user facing function\n+    M.trim = function(buf_id, opts)\n+      -- Validate required arguments\n+      local ok, is_buf_valid = pcall(vim.api.nvim_buf_is_valid, buf_id)\n+      assert(ok and is_buf_valid, '`buf_id` is not a valid buffer identifier')\n+\n+      -- Infer and validate optional arguments\n+      opts = vim.tbl_deep_extend('force', { empty = false }, opts or {})\n+      assert(type(opts.empty) == 'boolean', '`opts.empty` is not boolean')\n+\n+      -- Compute number of the first line to be removed: iterate from the end\n+      -- backwards and stop when line is not target depending on `empty`\n+      local target_pattern = opts.empty and '^$' or '^%s*$'\n+      local lines = vim.api.nvim_buf_get_lines(buf_id, 0, -1, false)\n+      local start_line\n+      for i = #lines, 1, -1 do\n+        if lines[i]:find(target_pattern) == nil then\n+          start_line = i\n+          break\n+        end\n+      end\n+      start_line = start_line or 0\n+\n+      -- Remove trailing lines\n+      vim.api.nvim_buf_set_lines(buf_id, start_line, -1, false, {})\n+    end\n+\n+    -- Return the module. This must be the last of the file.\n+    return M\n+<\n+And this is it. You have create a Lua plugin. Users now can install it\n+(i.e. put the whole `no-trailing/` directory in their 'runtimepath' manually\n+or via plugin manager) and use it directly with `require()`:\n+\n+• Any of `require('no-trailing').trim(0)`, `require('no-trailing').trim(0, {})`,\n+  or `require('no-trailing').trim(0, { empty = false })` removes all\n+  blank trailing lines.\n+\n+• `require('no-trailing').trim(0, { empty = true })` removes only empty\n+  trailing lines.\n+\n+• Any of `require('no-trailing').trim()`, `require('no-trailing').setup('a')`,\n+  `require('no-trailing').trim(0, { empty = 'a' })` will throw an error.\n+\n+Notes:\n+\n+• Choosing function scope (i.e. what it does) is up to you. Usually preferring\n+  the functionality just enough for it to be useful for target audience is\n+  a good approach. You can see what Nvim does in |dev-lua|.\n+\n+• Choosing names for plugin/function/arguments/options is up to you. Usually\n+  choosing a short \"to the point\" yet descriptive name is a good approach.\n+  You can see what Nvim does in |dev-naming|.\n+\n+• Choosing function signature (i.e its arguments) is up to you. Preferring\n+  first mandatory arguments followed by a single optional table `opts` with\n+  optional arguments is a common convention.\n+  You can see what Nvim uses in |dev-patterns| and |dev-api|.\n+\n+• To interactively test latest plugin functionality, open separate fresh Nvim\n+  instance with plugin loaded and interact with it.\n+\n+------------------------------------------------------------------------------\n+Restructuring Lua code                                  *lua-plugin-restructure*\n+\n+Using single Lua file in plugin is possible, yet may become not easy to manage\n+if it becomes too big. To overcome this, code can be split into separate\n+modules and used inside each other with |require()|.\n+\n+In our 'no-trailing' plugin computation of the first trailing line can be\n+moved into a separate `lua/no-trailing/utils.lua` file:\n+>lua\n+    -- lua/no-trailing/utils.lua\n+\n+    local M = {}\n+\n+    M.get_last_trailing = function(buf_id, empty)\n+      local target_pattern = empty and '^$' or '^%s*$'\n+      local lines = vim.api.nvim_buf_get_lines(buf_id, 0, -1, false)\n+      for i = #lines, 1, -1 do\n+        if lines[i]:find(target_pattern) == nil then\n+          -- Moving computation into a separate function allows using the\n+          -- \"early return\" pattern\n+          return i\n+        end\n+      end\n+      return 0\n+    end\n+\n+    return M\n+<\n+\n+Now there are two main approaches on how this can be used in main module:\n+eager loading and lazy loading.\n+",
            "html_url": "https://github.com/neovim/neovim/pull/29026#discussion_r1615274790",
            "id": 1615274790,
            "in_reply_to_id": 1615272639,
            "line": 152,
            "node_id": "PRRC_kwDOAPphoM5gRyMm",
            "original_commit_id": "0af67f35ecd411e37b914aae7cebc3b9bba03f21",
            "original_line": 152,
            "original_position": 152,
            "original_start_line": null,
            "path": "runtime/doc/lua-plugin.txt",
            "position": 152,
            "pull_request_review_id": 2079759546,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29026",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1615274790/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-26T17:25:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1615274790",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29026#discussion_r1615275347"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29026"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1615275347"
                }
            },
            "author_association": "MEMBER",
            "body": "Like, I don't think this is wrong but this is just too much. I just want something quick and easy to get started, not a deepdive into everything I might possible use. If both approaches are *usually* fine then we could just pick one and call it a day. More information is not better.",
            "commit_id": "0af67f35ecd411e37b914aae7cebc3b9bba03f21",
            "created_at": "2024-05-26T17:25:58Z",
            "diff_hunk": "@@ -0,0 +1,290 @@\n+*lua-plugin.txt*                       Nvim\n+\n+                            NVIM REFERENCE MANUAL\n+\n+                    Tutorial on how to write a Lua plugin\n+\n+\n+                                       Type |gO| to see the table of contents.\n+\n+==============================================================================\n+Introduction                                                        *lua-plugin*\n+\n+Writing a Lua plugin from scratch can be overwhelming. This tutorial is aimed\n+to provide basic guidance for it in the form of hands-on example. We will be\n+building a plugin called \"no-trailing\" with scope to provide functionality\n+to remove last (i.e. trailing) blank lines (i.e. containing only whitespace)\n+in the buffer.\n+\n+An important disclaimer: Nvim allows flexible approaches to creating Lua\n+plugins and is constantly evolving. This tutorial intentionally omits\n+providing hard guidelines preferring instead to list some common approaches\n+with their pros and cons.\n+\n+It is a good idea to understand at least basics of the following topics:\n+\n+• Lua language. See |luaref| and |lua-concepts|.\n+• Lua in Nvim. See |lua-guide|.\n+• Reading and searching help. See |help.txt| and |:helpgrep|.\n+• File system operations, like creating file and directories.\n+\n+==============================================================================\n+Lua code                                                        *lua-plugin-lua*\n+\n+The core functionality of any Lua plugin is its code. It is located in `lua/`\n+subdirectory of the plugin.\n+\n+First start by creating a directory `no-trailing/` inside your 'runtimepath'.\n+In this tutorial let's use the following path:\n+`$XDG_DATA_HOME/nvim/site/pack/tutorial/start/no-trailing` (see |$XDG_DATA_HOME\n+for its value on your system). The reason to choose this complicated path is\n+because it utilizes built-in |packages| functionality to make this plugin\n+installed in your config.\n+\n+The newly created `no-trailing/` directory will be treated as root for all\n+relative paths used here. In particular as a first commented line in code\n+blocks to describe where it should be placed.\n+\n+Now let's create a `lua/no-trailing/init.lua` file. It will contain the Lua\n+code implementing core functionality. For plugin that removes trailing lines\n+it can be something like this:\n+>lua\n+    -- lua/no-trailing/init.lua\n+\n+    -- Create a table to store and later return module's user facing functions\n+    -- Using `M` is a popular convention, but any name is possible\n+    local M = {}\n+\n+    -- Create user facing function\n+    M.trim = function(buf_id, opts)\n+      -- Validate required arguments\n+      local ok, is_buf_valid = pcall(vim.api.nvim_buf_is_valid, buf_id)\n+      assert(ok and is_buf_valid, '`buf_id` is not a valid buffer identifier')\n+\n+      -- Infer and validate optional arguments\n+      opts = vim.tbl_deep_extend('force', { empty = false }, opts or {})\n+      assert(type(opts.empty) == 'boolean', '`opts.empty` is not boolean')\n+\n+      -- Compute number of the first line to be removed: iterate from the end\n+      -- backwards and stop when line is not target depending on `empty`\n+      local target_pattern = opts.empty and '^$' or '^%s*$'\n+      local lines = vim.api.nvim_buf_get_lines(buf_id, 0, -1, false)\n+      local start_line\n+      for i = #lines, 1, -1 do\n+        if lines[i]:find(target_pattern) == nil then\n+          start_line = i\n+          break\n+        end\n+      end\n+      start_line = start_line or 0\n+\n+      -- Remove trailing lines\n+      vim.api.nvim_buf_set_lines(buf_id, start_line, -1, false, {})\n+    end\n+\n+    -- Return the module. This must be the last of the file.\n+    return M\n+<\n+And this is it. You have create a Lua plugin. Users now can install it\n+(i.e. put the whole `no-trailing/` directory in their 'runtimepath' manually\n+or via plugin manager) and use it directly with `require()`:\n+\n+• Any of `require('no-trailing').trim(0)`, `require('no-trailing').trim(0, {})`,\n+  or `require('no-trailing').trim(0, { empty = false })` removes all\n+  blank trailing lines.\n+\n+• `require('no-trailing').trim(0, { empty = true })` removes only empty\n+  trailing lines.\n+\n+• Any of `require('no-trailing').trim()`, `require('no-trailing').setup('a')`,\n+  `require('no-trailing').trim(0, { empty = 'a' })` will throw an error.\n+\n+Notes:\n+\n+• Choosing function scope (i.e. what it does) is up to you. Usually preferring\n+  the functionality just enough for it to be useful for target audience is\n+  a good approach. You can see what Nvim does in |dev-lua|.\n+\n+• Choosing names for plugin/function/arguments/options is up to you. Usually\n+  choosing a short \"to the point\" yet descriptive name is a good approach.\n+  You can see what Nvim does in |dev-naming|.\n+\n+• Choosing function signature (i.e its arguments) is up to you. Preferring\n+  first mandatory arguments followed by a single optional table `opts` with\n+  optional arguments is a common convention.\n+  You can see what Nvim uses in |dev-patterns| and |dev-api|.\n+\n+• To interactively test latest plugin functionality, open separate fresh Nvim\n+  instance with plugin loaded and interact with it.\n+\n+------------------------------------------------------------------------------\n+Restructuring Lua code                                  *lua-plugin-restructure*\n+\n+Using single Lua file in plugin is possible, yet may become not easy to manage\n+if it becomes too big. To overcome this, code can be split into separate\n+modules and used inside each other with |require()|.\n+\n+In our 'no-trailing' plugin computation of the first trailing line can be\n+moved into a separate `lua/no-trailing/utils.lua` file:\n+>lua\n+    -- lua/no-trailing/utils.lua\n+\n+    local M = {}\n+\n+    M.get_last_trailing = function(buf_id, empty)\n+      local target_pattern = empty and '^$' or '^%s*$'\n+      local lines = vim.api.nvim_buf_get_lines(buf_id, 0, -1, false)\n+      for i = #lines, 1, -1 do\n+        if lines[i]:find(target_pattern) == nil then\n+          -- Moving computation into a separate function allows using the\n+          -- \"early return\" pattern\n+          return i\n+        end\n+      end\n+      return 0\n+    end\n+\n+    return M\n+<\n+\n+Now there are two main approaches on how this can be used in main module:\n+eager loading and lazy loading.\n+\n+Eager approach is about sourcing \"helper\" module during source \"main\" module:\n+>lua\n+    -- lua/no-trailing/init.lua\n+\n+    local M = {}\n+\n+    -- This will make initial source of 'no-trailing.utils' module\n+    -- during initial source of this module\n+    local utils = require('no-trailing.utils')\n+\n+    M.trim = function(buf_id, opts)\n+      local ok, is_buf_valid = pcall(vim.api.nvim_buf_is_valid, buf_id)\n+      assert(ok and is_buf_valid, '`buf_id` is not a valid buffer identifier')\n+\n+      opts = vim.tbl_deep_extend('force', { empty = false }, opts or {})\n+      assert(type(opts.empty) == 'boolean', '`opts.empty` is not boolean')\n+\n+      local start_line = utils.get_last_trailing(buf_id, opts.empty)\n+      vim.api.nvim_buf_set_lines(buf_id, start_line, -1, false, {})\n+    end\n+\n+    return M\n+<\n+Lazy approach is about sourcing \"helper\" module during function execution:\n+>lua\n+    -- lua/no-trailing/init.lua\n+\n+    local M = {}\n+\n+    M.trim = function(buf_id, opts)\n+      local ok, is_buf_valid = pcall(vim.api.nvim_buf_is_valid, buf_id)\n+      assert(ok and is_buf_valid, '`buf_id` is not a valid buffer identifier')\n+\n+      opts = vim.tbl_deep_extend('force', { empty = false }, opts or {})\n+      assert(type(opts.empty) == 'boolean', '`opts.empty` is not boolean')\n+\n+      -- This will make initial source of 'no-trailing.utils' module\n+      -- during first function execution\n+      local utils = require('no-trailing.utils')\n+      local start_line = utils.get_last_trailing(buf_id, opts.empty)\n+      vim.api.nvim_buf_set_lines(buf_id, start_line, -1, false, {})\n+    end\n+\n+    return M\n+<\n+Both eager and lazy loading Lua modules have pros and cons:\n+\n+• Eager loading leads to spending more time during initial source of main\n+  module, which is often during startup.\n+  Lazy loading spends that extra time only when it is needed.\n+  This rarely matters for small modules which only consists from function\n+  definitions, but can be significant for modules which do something time\n+  consuming during their initial source or in case of large amount of modules.\n+\n+• Eager loading results in a more structured code with less lines.\n+\n+• Lazy loading results in a constant calls of `require()` during each function\n+  execution. Although it caches its results, the time it spends to search the\n+  cache is not strictly zero, which leads to a very small overhead (usually\n+  order of fractions of a microsecond). This might matter for frequently\n+  called functions.\n+\n+Usually both approaches are fine. Using eager loading and preferring lazy\n+loading for expensive to source modules is usually a good idea.",
            "html_url": "https://github.com/neovim/neovim/pull/29026#discussion_r1615275347",
            "id": 1615275347,
            "line": 216,
            "node_id": "PRRC_kwDOAPphoM5gRyVT",
            "original_commit_id": "0af67f35ecd411e37b914aae7cebc3b9bba03f21",
            "original_line": 216,
            "original_position": 216,
            "original_start_line": 200,
            "path": "runtime/doc/lua-plugin.txt",
            "position": 216,
            "pull_request_review_id": 2079759630,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29026",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1615275347/reactions"
            },
            "side": "RIGHT",
            "start_line": 200,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-05-26T17:25:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1615275347",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "This looks pretty different from https://github.com/nvim-neorocks/nvim-best-practices . I intentionally requested that https://github.com/nvim-neorocks/nvim-best-practices be upstreamed because it's a collection of easy to follow advice that is reasonable. I don't want to have a big discussion or debate about alternatives. We should start with what I outlined in https://github.com/nvim-neorocks/nvim-best-practices/issues/5 . Not something else.",
            "created_at": "2024-05-26T16:31:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/29026#issuecomment-2132278776",
            "id": 2132278776,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29026",
            "node_id": "IC_kwDOAPphoM5_F_34",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 4,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2132278776/reactions"
            },
            "updated_at": "2024-05-26T16:31:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2132278776",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/29026/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/29026/commits",
    "created_at": "2024-05-26T16:19:48Z",
    "diff_url": "https://github.com/neovim/neovim/pull/29026.diff",
    "draft": false,
    "head": {
        "label": "echasnovski:docs-lua-plugin",
        "ref": "docs-lua-plugin",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/echasnovski/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/echasnovski/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/echasnovski/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/echasnovski/neovim/branches{/branch}",
            "clone_url": "https://github.com/echasnovski/neovim.git",
            "collaborators_url": "https://api.github.com/repos/echasnovski/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/echasnovski/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/echasnovski/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/echasnovski/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/echasnovski/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/echasnovski/neovim/contributors",
            "created_at": "2021-12-02T09:43:59Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/echasnovski/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/echasnovski/neovim/downloads",
            "events_url": "https://api.github.com/repos/echasnovski/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/echasnovski/neovim/forks",
            "full_name": "echasnovski/neovim",
            "git_commits_url": "https://api.github.com/repos/echasnovski/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/echasnovski/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/echasnovski/neovim/git/tags{/sha}",
            "git_url": "git://github.com/echasnovski/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/echasnovski/neovim/hooks",
            "html_url": "https://github.com/echasnovski/neovim",
            "id": 434162461,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/echasnovski/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/echasnovski/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/echasnovski/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/echasnovski/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/echasnovski/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/echasnovski/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/echasnovski/neovim/merges",
            "milestones_url": "https://api.github.com/repos/echasnovski/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOGeDLHQ",
            "notifications_url": "https://api.github.com/repos/echasnovski/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/echasnovski/neovim/pulls{/number}",
            "pushed_at": "2024-05-26T16:13:50Z",
            "releases_url": "https://api.github.com/repos/echasnovski/neovim/releases{/id}",
            "size": 265458,
            "ssh_url": "git@github.com:echasnovski/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/echasnovski/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/echasnovski/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/echasnovski/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/echasnovski/neovim/subscription",
            "svn_url": "https://github.com/echasnovski/neovim",
            "tags_url": "https://api.github.com/repos/echasnovski/neovim/tags",
            "teams_url": "https://api.github.com/repos/echasnovski/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/echasnovski/neovim/git/trees{/sha}",
            "updated_at": "2024-05-26T11:53:41Z",
            "url": "https://api.github.com/repos/echasnovski/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "0af67f35ecd411e37b914aae7cebc3b9bba03f21",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
            "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
            "followers_url": "https://api.github.com/users/echasnovski/followers",
            "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
            "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/echasnovski",
            "id": 24854248,
            "login": "echasnovski",
            "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
            "organizations_url": "https://api.github.com/users/echasnovski/orgs",
            "received_events_url": "https://api.github.com/users/echasnovski/received_events",
            "repos_url": "https://api.github.com/users/echasnovski/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/echasnovski"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/29026",
    "id": 1889017247,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29026",
    "labels": [
        {
            "color": "FBCA04",
            "default": false,
            "description": "A discussion has run its course and a decision has to be made how to proceed",
            "id": 83851236,
            "name": "needs:decision",
            "node_id": "MDU6TGFiZWw4Mzg1MTIzNg==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/needs:decision"
        },
        {
            "color": "c5def5",
            "default": true,
            "description": "",
            "id": 84744038,
            "name": "documentation",
            "node_id": "MDU6TGFiZWw4NDc0NDAzOA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/documentation"
        },
        {
            "color": "FBCA04",
            "default": false,
            "description": "For PRs that propose significant changes to some part of the architecture or API",
            "id": 212680983,
            "name": "needs:discussion",
            "node_id": "MDU6TGFiZWwyMTI2ODA5ODM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/needs:discussion"
        }
    ],
    "locked": false,
    "merge_commit_sha": "0f9c7a4d2760bc8bc78299f2fb6565edb0d1f823",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5wmB2f",
    "number": 29026,
    "patch_url": "https://github.com/neovim/neovim/pull/29026.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/29026/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/0af67f35ecd411e37b914aae7cebc3b9bba03f21",
    "title": "docs: add tutorial for writing Lua plugin",
    "updated_at": "2024-05-26T17:50:28Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/29026",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
        "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
        "followers_url": "https://api.github.com/users/echasnovski/followers",
        "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
        "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/echasnovski",
        "id": 24854248,
        "login": "echasnovski",
        "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
        "organizations_url": "https://api.github.com/users/echasnovski/orgs",
        "received_events_url": "https://api.github.com/users/echasnovski/received_events",
        "repos_url": "https://api.github.com/users/echasnovski/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/echasnovski"
    }
}