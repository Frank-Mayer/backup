{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/27361/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/27361/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/27361"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/27361"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/27361/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/27361"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/1c032ad703a19cd5c8498ee95f9352df87a91139"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5099,
            "forks_count": 5099,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1723,
            "open_issues_count": 1723,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-02-27T00:47:43Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 257650,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 74318,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-02-27T01:34:35Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 74318,
            "watchers_count": 74318,
            "web_commit_signoff_required": false
        },
        "sha": "6d8bbfe19df2175637a1e47ac1aafb0e96e35b38",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "By @bfredl suggestion https://github.com/neovim/neovim/pull/27361#issuecomment-1929373396:\r\nMake namespaces have the possibility of being window-local (only show the namespaces's extmarks in specific windows).\r\nCurrently, one needs to set a flag on the extmark (called `scoped`) to make this take effect (may be changed).\r\n\r\nCloses https://github.com/neovim/neovim/issues/19654",
    "closed_at": "2024-02-21T18:21:14Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27361#discussion_r1480889774"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27361"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1480889774"
                }
            },
            "author_association": "MEMBER",
            "body": "Is tabpage or other scopes a possible need in the future? If so, should this be a string `'win'|'tab'|...` or int instead of bool?",
            "commit_id": "1c032ad703a19cd5c8498ee95f9352df87a91139",
            "created_at": "2024-02-07T04:44:11Z",
            "diff_hunk": "@@ -68,6 +68,7 @@ typedef struct {\n   uint32_t id;\n   uint16_t flags;\n   DecorInlineData decor_data;  // \"ext\" tag in flags\n+  bool scoped;",
            "html_url": "https://github.com/neovim/neovim/pull/27361#discussion_r1480889774",
            "id": 1480889774,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5YRJWu",
            "original_commit_id": "f58c8b9fe618a039187c4ab7a1040e9d67c6273e",
            "original_line": 71,
            "original_position": 4,
            "original_start_line": null,
            "path": "src/nvim/marktree_defs.h",
            "position": null,
            "pull_request_review_id": 1866896003,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27361",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1480889774/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-07T04:44:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1480889774",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27361#discussion_r1480914248"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27361"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1480914248"
                }
            },
            "author_association": "MEMBER",
            "body": "I think a boolean is enough for that as well.",
            "commit_id": "1c032ad703a19cd5c8498ee95f9352df87a91139",
            "created_at": "2024-02-07T05:26:43Z",
            "diff_hunk": "@@ -68,6 +68,7 @@ typedef struct {\n   uint32_t id;\n   uint16_t flags;\n   DecorInlineData decor_data;  // \"ext\" tag in flags\n+  bool scoped;",
            "html_url": "https://github.com/neovim/neovim/pull/27361#discussion_r1480914248",
            "id": 1480914248,
            "in_reply_to_id": 1480889774,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5YRPVI",
            "original_commit_id": "f58c8b9fe618a039187c4ab7a1040e9d67c6273e",
            "original_line": 71,
            "original_position": 4,
            "original_start_line": null,
            "path": "src/nvim/marktree_defs.h",
            "position": null,
            "pull_request_review_id": 1866931840,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27361",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1480914248/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-07T05:26:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1480914248",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27361#discussion_r1484986597"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27361"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1484986597"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  set_destroy(uint32_t, &wp->w_ns_set);\r\n```",
            "commit_id": "1c032ad703a19cd5c8498ee95f9352df87a91139",
            "created_at": "2024-02-10T05:41:03Z",
            "diff_hunk": "@@ -5027,6 +5030,8 @@ void win_free(win_T *wp, tabpage_T *tp)\n   // Don't execute autocommands while the window is halfway being deleted.\n   block_autocmds();\n \n+  set_clear(uint32_t, &wp->w_ns_set);",
            "html_url": "https://github.com/neovim/neovim/pull/27361#discussion_r1484986597",
            "id": 1484986597,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Ygxjl",
            "original_commit_id": "d201517b3bebad4dce3e97bea1eb4452dc6f118f",
            "original_line": 5033,
            "original_position": 14,
            "original_start_line": null,
            "path": "src/nvim/window.c",
            "position": null,
            "pull_request_review_id": 1873478367,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27361",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1484986597/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-10T05:41:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1484986597",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27361#discussion_r1484986845"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27361"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1484986845"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    -- TODO(altermo): The window signcolumn width is calculation wrongly (when `signcolumn=auto`)\r\n```",
            "commit_id": "1c032ad703a19cd5c8498ee95f9352df87a91139",
            "created_at": "2024-02-10T05:43:34Z",
            "diff_hunk": "@@ -5241,3 +5241,333 @@ describe('decorations: virt_text', function()\n     ]]}\n   end)\n end)\n+\n+describe('decorations: window scoped', function()\n+  local screen, ns\n+  before_each(function()\n+    clear()\n+    screen = Screen.new(20, 10)\n+    screen:attach()\n+    screen:set_default_attr_ids {\n+      [1] = { foreground = Screen.colors.Blue1 },\n+      [2] = { foreground = Screen.colors.Blue1, bold = true },\n+    }\n+\n+    ns = api.nvim_create_namespace 'test'\n+\n+    insert('12345')\n+  end)\n+\n+  local noextmarks = {\n+    grid = [[\n+      1234^5               |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+  local function set_scoped_extmark(line, col, opts)\n+    return api.nvim_buf_set_extmark(0, ns, line, col, vim.tbl_extend('error', { scoped = true }, opts))\n+  end\n+\n+  it('hl_group', function()\n+    set_scoped_extmark(0, 0, {\n+      hl_group = 'Comment',\n+      end_col = 3,\n+    })\n+\n+    screen:expect(noextmarks)\n+\n+    api.nvim_win_add_ns(0, ns)\n+\n+    screen:expect {\n+      grid = [[\n+      {1:123}4^5               |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    command 'split'\n+    command 'only'\n+\n+    screen:expect(noextmarks)\n+  end)\n+\n+  it('virt_text', function()\n+    set_scoped_extmark(0, 0, {\n+      virt_text = { { 'a', 'Comment' } },\n+      virt_text_pos = 'eol',\n+    })\n+    set_scoped_extmark(0, 5, {\n+      virt_text = { { 'b', 'Comment' } },\n+      virt_text_pos = 'inline',\n+    })\n+    set_scoped_extmark(0, 1, {\n+      virt_text = { { 'c', 'Comment' } },\n+      virt_text_pos = 'overlay',\n+    })\n+    set_scoped_extmark(0, 1, {\n+      virt_text = { { 'd', 'Comment' } },\n+      virt_text_pos = 'right_align',\n+    })\n+\n+    screen:expect(noextmarks)\n+\n+    api.nvim_win_add_ns(0, ns)\n+\n+    screen:expect {\n+      grid = [[\n+      1{1:c}34^5{1:b} {1:a}           {1:d}|\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    command 'split'\n+    command 'only'\n+\n+    screen:expect(noextmarks)\n+  end)\n+\n+  it('virt_lines', function()\n+    set_scoped_extmark(0, 0, {\n+      virt_lines = { { { 'a', 'Comment' } } },\n+    })\n+\n+    screen:expect(noextmarks)\n+\n+    api.nvim_win_add_ns(0, ns)\n+\n+    screen:expect {\n+      grid = [[\n+      1234^5               |\n+      {1:a}                   |\n+      {2:~                   }|*7\n+                          |\n+    ]]}\n+\n+    command 'split'\n+    command 'only'\n+\n+    screen:expect(noextmarks)\n+  end)\n+\n+  pending('sign_text', function()\n+    -- TODO(altermo): The window signcolumn width is calculation wrongly (when `singcolumn=auto`)",
            "html_url": "https://github.com/neovim/neovim/pull/27361#discussion_r1484986845",
            "id": 1484986845,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Ygxnd",
            "original_commit_id": "d201517b3bebad4dce3e97bea1eb4452dc6f118f",
            "original_line": 5354,
            "original_position": 114,
            "original_start_line": null,
            "path": "test/functional/ui/decorations_spec.lua",
            "position": null,
            "pull_request_review_id": 1873478589,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27361",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1484986845/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-10T05:43:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1484986845",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27361#discussion_r1484986870"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27361"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1484986870"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  it('url', function()\r\n```",
            "commit_id": "1c032ad703a19cd5c8498ee95f9352df87a91139",
            "created_at": "2024-02-10T05:44:17Z",
            "diff_hunk": "@@ -5241,3 +5241,333 @@ describe('decorations: virt_text', function()\n     ]]}\n   end)\n end)\n+\n+describe('decorations: window scoped', function()\n+  local screen, ns\n+  before_each(function()\n+    clear()\n+    screen = Screen.new(20, 10)\n+    screen:attach()\n+    screen:set_default_attr_ids {\n+      [1] = { foreground = Screen.colors.Blue1 },\n+      [2] = { foreground = Screen.colors.Blue1, bold = true },\n+    }\n+\n+    ns = api.nvim_create_namespace 'test'\n+\n+    insert('12345')\n+  end)\n+\n+  local noextmarks = {\n+    grid = [[\n+      1234^5               |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+  local function set_scoped_extmark(line, col, opts)\n+    return api.nvim_buf_set_extmark(0, ns, line, col, vim.tbl_extend('error', { scoped = true }, opts))\n+  end\n+\n+  it('hl_group', function()\n+    set_scoped_extmark(0, 0, {\n+      hl_group = 'Comment',\n+      end_col = 3,\n+    })\n+\n+    screen:expect(noextmarks)\n+\n+    api.nvim_win_add_ns(0, ns)\n+\n+    screen:expect {\n+      grid = [[\n+      {1:123}4^5               |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    command 'split'\n+    command 'only'\n+\n+    screen:expect(noextmarks)\n+  end)\n+\n+  it('virt_text', function()\n+    set_scoped_extmark(0, 0, {\n+      virt_text = { { 'a', 'Comment' } },\n+      virt_text_pos = 'eol',\n+    })\n+    set_scoped_extmark(0, 5, {\n+      virt_text = { { 'b', 'Comment' } },\n+      virt_text_pos = 'inline',\n+    })\n+    set_scoped_extmark(0, 1, {\n+      virt_text = { { 'c', 'Comment' } },\n+      virt_text_pos = 'overlay',\n+    })\n+    set_scoped_extmark(0, 1, {\n+      virt_text = { { 'd', 'Comment' } },\n+      virt_text_pos = 'right_align',\n+    })\n+\n+    screen:expect(noextmarks)\n+\n+    api.nvim_win_add_ns(0, ns)\n+\n+    screen:expect {\n+      grid = [[\n+      1{1:c}34^5{1:b} {1:a}           {1:d}|\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    command 'split'\n+    command 'only'\n+\n+    screen:expect(noextmarks)\n+  end)\n+\n+  it('virt_lines', function()\n+    set_scoped_extmark(0, 0, {\n+      virt_lines = { { { 'a', 'Comment' } } },\n+    })\n+\n+    screen:expect(noextmarks)\n+\n+    api.nvim_win_add_ns(0, ns)\n+\n+    screen:expect {\n+      grid = [[\n+      1234^5               |\n+      {1:a}                   |\n+      {2:~                   }|*7\n+                          |\n+    ]]}\n+\n+    command 'split'\n+    command 'only'\n+\n+    screen:expect(noextmarks)\n+  end)\n+\n+  pending('sign_text', function()\n+    -- TODO(altermo): The window signcolumn width is calculation wrongly (when `singcolumn=auto`)\n+    -- This happens in function `win_redraw_signcols` on line containing `buf_meta_total(buf, kMTMetaSignText) > 0`\n+    set_scoped_extmark(0, 0, {\n+      sign_text = 'a',\n+      sign_hl_group = 'Comment',\n+    })\n+\n+    screen:expect(noextmarks)\n+\n+    api.nvim_win_add_ns(0, ns)\n+\n+    screen:expect {\n+      grid = [[\n+      a 1234^5             |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    command 'split'\n+    command 'only'\n+\n+    screen:expect(noextmarks)\n+  end)\n+\n+  it('statuscolumn hl group', function()\n+    local attrs = screen:get_default_attr_ids()\n+    table.insert(attrs, {\n+      foreground = Screen.colors.Brown,\n+    })\n+    screen:set_default_attr_ids(attrs)\n+\n+    set_scoped_extmark(0, 0, {\n+      number_hl_group='comment',\n+    })\n+    set_scoped_extmark(0, 0, {\n+      line_hl_group='comment',\n+    })\n+\n+    command 'set number'\n+\n+    screen:expect {\n+      grid = [[\n+      {3:  1 }1234^5           |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    api.nvim_win_add_ns(0, ns)\n+\n+    screen:expect {\n+      grid = [[\n+      {1:  1 1234^5           }|\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    command 'split'\n+    command 'only'\n+\n+    screen:expect {\n+      grid = [[\n+      {3:  1 }1234^5           |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+  end)\n+\n+  it('spell', function()\n+    local attrs = screen:get_default_attr_ids()\n+    table.insert(attrs, {\n+      special = Screen.colors.Red, undercurl = true\n+    })\n+    screen:set_default_attr_ids(attrs)\n+    api.nvim_buf_set_lines(0,0,-1,true,{'aa'})\n+\n+    set_scoped_extmark(0, 0, {\n+      spell=true,\n+      end_col=2,\n+    })\n+\n+    command 'set spelloptions=noplainbuffer'\n+    command 'set spell'\n+    command 'syntax off'\n+\n+    screen:expect {\n+      grid = [[\n+      a^a                  |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    api.nvim_win_add_ns(0, ns)\n+\n+    screen:expect {\n+      grid = [[\n+      {3:a^a}                  |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    command 'split'\n+    command 'only'\n+\n+    screen:expect {\n+      grid = [[\n+      a^a                  |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+  end)\n+\n+it('url', function()",
            "html_url": "https://github.com/neovim/neovim/pull/27361#discussion_r1484986870",
            "id": 1484986870,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Ygxn2",
            "original_commit_id": "d201517b3bebad4dce3e97bea1eb4452dc6f118f",
            "original_line": 5465,
            "original_position": 225,
            "original_start_line": null,
            "path": "test/functional/ui/decorations_spec.lua",
            "position": null,
            "pull_request_review_id": 1873478718,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27361",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1484986870/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-10T05:44:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1484986870",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27361#discussion_r1484986908"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27361"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1484986908"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  it('change extmarks scoped option', function()\r\n```",
            "commit_id": "1c032ad703a19cd5c8498ee95f9352df87a91139",
            "created_at": "2024-02-10T05:44:42Z",
            "diff_hunk": "@@ -5241,3 +5241,333 @@ describe('decorations: virt_text', function()\n     ]]}\n   end)\n end)\n+\n+describe('decorations: window scoped', function()\n+  local screen, ns\n+  before_each(function()\n+    clear()\n+    screen = Screen.new(20, 10)\n+    screen:attach()\n+    screen:set_default_attr_ids {\n+      [1] = { foreground = Screen.colors.Blue1 },\n+      [2] = { foreground = Screen.colors.Blue1, bold = true },\n+    }\n+\n+    ns = api.nvim_create_namespace 'test'\n+\n+    insert('12345')\n+  end)\n+\n+  local noextmarks = {\n+    grid = [[\n+      1234^5               |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+  local function set_scoped_extmark(line, col, opts)\n+    return api.nvim_buf_set_extmark(0, ns, line, col, vim.tbl_extend('error', { scoped = true }, opts))\n+  end\n+\n+  it('hl_group', function()\n+    set_scoped_extmark(0, 0, {\n+      hl_group = 'Comment',\n+      end_col = 3,\n+    })\n+\n+    screen:expect(noextmarks)\n+\n+    api.nvim_win_add_ns(0, ns)\n+\n+    screen:expect {\n+      grid = [[\n+      {1:123}4^5               |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    command 'split'\n+    command 'only'\n+\n+    screen:expect(noextmarks)\n+  end)\n+\n+  it('virt_text', function()\n+    set_scoped_extmark(0, 0, {\n+      virt_text = { { 'a', 'Comment' } },\n+      virt_text_pos = 'eol',\n+    })\n+    set_scoped_extmark(0, 5, {\n+      virt_text = { { 'b', 'Comment' } },\n+      virt_text_pos = 'inline',\n+    })\n+    set_scoped_extmark(0, 1, {\n+      virt_text = { { 'c', 'Comment' } },\n+      virt_text_pos = 'overlay',\n+    })\n+    set_scoped_extmark(0, 1, {\n+      virt_text = { { 'd', 'Comment' } },\n+      virt_text_pos = 'right_align',\n+    })\n+\n+    screen:expect(noextmarks)\n+\n+    api.nvim_win_add_ns(0, ns)\n+\n+    screen:expect {\n+      grid = [[\n+      1{1:c}34^5{1:b} {1:a}           {1:d}|\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    command 'split'\n+    command 'only'\n+\n+    screen:expect(noextmarks)\n+  end)\n+\n+  it('virt_lines', function()\n+    set_scoped_extmark(0, 0, {\n+      virt_lines = { { { 'a', 'Comment' } } },\n+    })\n+\n+    screen:expect(noextmarks)\n+\n+    api.nvim_win_add_ns(0, ns)\n+\n+    screen:expect {\n+      grid = [[\n+      1234^5               |\n+      {1:a}                   |\n+      {2:~                   }|*7\n+                          |\n+    ]]}\n+\n+    command 'split'\n+    command 'only'\n+\n+    screen:expect(noextmarks)\n+  end)\n+\n+  pending('sign_text', function()\n+    -- TODO(altermo): The window signcolumn width is calculation wrongly (when `singcolumn=auto`)\n+    -- This happens in function `win_redraw_signcols` on line containing `buf_meta_total(buf, kMTMetaSignText) > 0`\n+    set_scoped_extmark(0, 0, {\n+      sign_text = 'a',\n+      sign_hl_group = 'Comment',\n+    })\n+\n+    screen:expect(noextmarks)\n+\n+    api.nvim_win_add_ns(0, ns)\n+\n+    screen:expect {\n+      grid = [[\n+      a 1234^5             |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    command 'split'\n+    command 'only'\n+\n+    screen:expect(noextmarks)\n+  end)\n+\n+  it('statuscolumn hl group', function()\n+    local attrs = screen:get_default_attr_ids()\n+    table.insert(attrs, {\n+      foreground = Screen.colors.Brown,\n+    })\n+    screen:set_default_attr_ids(attrs)\n+\n+    set_scoped_extmark(0, 0, {\n+      number_hl_group='comment',\n+    })\n+    set_scoped_extmark(0, 0, {\n+      line_hl_group='comment',\n+    })\n+\n+    command 'set number'\n+\n+    screen:expect {\n+      grid = [[\n+      {3:  1 }1234^5           |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    api.nvim_win_add_ns(0, ns)\n+\n+    screen:expect {\n+      grid = [[\n+      {1:  1 1234^5           }|\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    command 'split'\n+    command 'only'\n+\n+    screen:expect {\n+      grid = [[\n+      {3:  1 }1234^5           |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+  end)\n+\n+  it('spell', function()\n+    local attrs = screen:get_default_attr_ids()\n+    table.insert(attrs, {\n+      special = Screen.colors.Red, undercurl = true\n+    })\n+    screen:set_default_attr_ids(attrs)\n+    api.nvim_buf_set_lines(0,0,-1,true,{'aa'})\n+\n+    set_scoped_extmark(0, 0, {\n+      spell=true,\n+      end_col=2,\n+    })\n+\n+    command 'set spelloptions=noplainbuffer'\n+    command 'set spell'\n+    command 'syntax off'\n+\n+    screen:expect {\n+      grid = [[\n+      a^a                  |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    api.nvim_win_add_ns(0, ns)\n+\n+    screen:expect {\n+      grid = [[\n+      {3:a^a}                  |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    command 'split'\n+    command 'only'\n+\n+    screen:expect {\n+      grid = [[\n+      a^a                  |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+  end)\n+\n+it('url', function()\n+    local url = 'https://example.com'\n+    local attrs = screen:get_default_attr_ids()\n+    table.insert(attrs, {\n+      url = url,\n+    })\n+    screen:set_default_attr_ids(attrs)\n+\n+    set_scoped_extmark(0, 0, {\n+      end_col=3,\n+      url=url,\n+    })\n+\n+    screen:expect(noextmarks)\n+\n+    api.nvim_win_add_ns(0, ns)\n+\n+    screen:expect {\n+      grid = [[\n+      {3:123}4^5               |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    command 'split'\n+    command 'only'\n+\n+    screen:expect(noextmarks)\n+  end)\n+\n+  it('change extmarks scoped option',function ()",
            "html_url": "https://github.com/neovim/neovim/pull/27361#discussion_r1484986908",
            "id": 1484986908,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Ygxoc",
            "original_commit_id": "d201517b3bebad4dce3e97bea1eb4452dc6f118f",
            "original_line": 5495,
            "original_position": 255,
            "original_start_line": null,
            "path": "test/functional/ui/decorations_spec.lua",
            "position": null,
            "pull_request_review_id": 1873478856,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27361",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1484986908/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-10T05:45:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1484986908",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27361#discussion_r1484986920"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27361"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1484986920"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  it('change namespace scope', function()\r\n```",
            "commit_id": "1c032ad703a19cd5c8498ee95f9352df87a91139",
            "created_at": "2024-02-10T05:44:55Z",
            "diff_hunk": "@@ -5241,3 +5241,333 @@ describe('decorations: virt_text', function()\n     ]]}\n   end)\n end)\n+\n+describe('decorations: window scoped', function()\n+  local screen, ns\n+  before_each(function()\n+    clear()\n+    screen = Screen.new(20, 10)\n+    screen:attach()\n+    screen:set_default_attr_ids {\n+      [1] = { foreground = Screen.colors.Blue1 },\n+      [2] = { foreground = Screen.colors.Blue1, bold = true },\n+    }\n+\n+    ns = api.nvim_create_namespace 'test'\n+\n+    insert('12345')\n+  end)\n+\n+  local noextmarks = {\n+    grid = [[\n+      1234^5               |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+  local function set_scoped_extmark(line, col, opts)\n+    return api.nvim_buf_set_extmark(0, ns, line, col, vim.tbl_extend('error', { scoped = true }, opts))\n+  end\n+\n+  it('hl_group', function()\n+    set_scoped_extmark(0, 0, {\n+      hl_group = 'Comment',\n+      end_col = 3,\n+    })\n+\n+    screen:expect(noextmarks)\n+\n+    api.nvim_win_add_ns(0, ns)\n+\n+    screen:expect {\n+      grid = [[\n+      {1:123}4^5               |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    command 'split'\n+    command 'only'\n+\n+    screen:expect(noextmarks)\n+  end)\n+\n+  it('virt_text', function()\n+    set_scoped_extmark(0, 0, {\n+      virt_text = { { 'a', 'Comment' } },\n+      virt_text_pos = 'eol',\n+    })\n+    set_scoped_extmark(0, 5, {\n+      virt_text = { { 'b', 'Comment' } },\n+      virt_text_pos = 'inline',\n+    })\n+    set_scoped_extmark(0, 1, {\n+      virt_text = { { 'c', 'Comment' } },\n+      virt_text_pos = 'overlay',\n+    })\n+    set_scoped_extmark(0, 1, {\n+      virt_text = { { 'd', 'Comment' } },\n+      virt_text_pos = 'right_align',\n+    })\n+\n+    screen:expect(noextmarks)\n+\n+    api.nvim_win_add_ns(0, ns)\n+\n+    screen:expect {\n+      grid = [[\n+      1{1:c}34^5{1:b} {1:a}           {1:d}|\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    command 'split'\n+    command 'only'\n+\n+    screen:expect(noextmarks)\n+  end)\n+\n+  it('virt_lines', function()\n+    set_scoped_extmark(0, 0, {\n+      virt_lines = { { { 'a', 'Comment' } } },\n+    })\n+\n+    screen:expect(noextmarks)\n+\n+    api.nvim_win_add_ns(0, ns)\n+\n+    screen:expect {\n+      grid = [[\n+      1234^5               |\n+      {1:a}                   |\n+      {2:~                   }|*7\n+                          |\n+    ]]}\n+\n+    command 'split'\n+    command 'only'\n+\n+    screen:expect(noextmarks)\n+  end)\n+\n+  pending('sign_text', function()\n+    -- TODO(altermo): The window signcolumn width is calculation wrongly (when `singcolumn=auto`)\n+    -- This happens in function `win_redraw_signcols` on line containing `buf_meta_total(buf, kMTMetaSignText) > 0`\n+    set_scoped_extmark(0, 0, {\n+      sign_text = 'a',\n+      sign_hl_group = 'Comment',\n+    })\n+\n+    screen:expect(noextmarks)\n+\n+    api.nvim_win_add_ns(0, ns)\n+\n+    screen:expect {\n+      grid = [[\n+      a 1234^5             |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    command 'split'\n+    command 'only'\n+\n+    screen:expect(noextmarks)\n+  end)\n+\n+  it('statuscolumn hl group', function()\n+    local attrs = screen:get_default_attr_ids()\n+    table.insert(attrs, {\n+      foreground = Screen.colors.Brown,\n+    })\n+    screen:set_default_attr_ids(attrs)\n+\n+    set_scoped_extmark(0, 0, {\n+      number_hl_group='comment',\n+    })\n+    set_scoped_extmark(0, 0, {\n+      line_hl_group='comment',\n+    })\n+\n+    command 'set number'\n+\n+    screen:expect {\n+      grid = [[\n+      {3:  1 }1234^5           |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    api.nvim_win_add_ns(0, ns)\n+\n+    screen:expect {\n+      grid = [[\n+      {1:  1 1234^5           }|\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    command 'split'\n+    command 'only'\n+\n+    screen:expect {\n+      grid = [[\n+      {3:  1 }1234^5           |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+  end)\n+\n+  it('spell', function()\n+    local attrs = screen:get_default_attr_ids()\n+    table.insert(attrs, {\n+      special = Screen.colors.Red, undercurl = true\n+    })\n+    screen:set_default_attr_ids(attrs)\n+    api.nvim_buf_set_lines(0,0,-1,true,{'aa'})\n+\n+    set_scoped_extmark(0, 0, {\n+      spell=true,\n+      end_col=2,\n+    })\n+\n+    command 'set spelloptions=noplainbuffer'\n+    command 'set spell'\n+    command 'syntax off'\n+\n+    screen:expect {\n+      grid = [[\n+      a^a                  |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    api.nvim_win_add_ns(0, ns)\n+\n+    screen:expect {\n+      grid = [[\n+      {3:a^a}                  |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    command 'split'\n+    command 'only'\n+\n+    screen:expect {\n+      grid = [[\n+      a^a                  |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+  end)\n+\n+it('url', function()\n+    local url = 'https://example.com'\n+    local attrs = screen:get_default_attr_ids()\n+    table.insert(attrs, {\n+      url = url,\n+    })\n+    screen:set_default_attr_ids(attrs)\n+\n+    set_scoped_extmark(0, 0, {\n+      end_col=3,\n+      url=url,\n+    })\n+\n+    screen:expect(noextmarks)\n+\n+    api.nvim_win_add_ns(0, ns)\n+\n+    screen:expect {\n+      grid = [[\n+      {3:123}4^5               |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    command 'split'\n+    command 'only'\n+\n+    screen:expect(noextmarks)\n+  end)\n+\n+  it('change extmarks scoped option',function ()\n+    local id = set_scoped_extmark(0, 0, {\n+      hl_group = 'Comment',\n+      end_col = 3,\n+    })\n+\n+    api.nvim_win_add_ns(0, ns)\n+\n+    screen:expect {\n+      grid = [[\n+      {1:123}4^5               |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    command 'split'\n+    command 'only'\n+\n+    screen:expect(noextmarks)\n+\n+    api.nvim_buf_set_extmark(0, ns, 0, 0, {\n+      id = id,\n+      hl_group = 'Comment',\n+      end_col = 3,\n+      scoped = false,\n+    })\n+\n+    screen:expect {\n+      grid = [[\n+      {1:123}4^5               |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    api.nvim_buf_set_extmark(0, ns, 0, 0, {\n+      id = id,\n+      hl_group = 'Comment',\n+      end_col = 3,\n+      scoped = true,\n+    })\n+\n+    screen:expect(noextmarks)\n+  end)\n+\n+  it('change namespace scope',function ()",
            "html_url": "https://github.com/neovim/neovim/pull/27361#discussion_r1484986920",
            "id": 1484986920,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Ygxoo",
            "original_commit_id": "d201517b3bebad4dce3e97bea1eb4452dc6f118f",
            "original_line": 5539,
            "original_position": 299,
            "original_start_line": null,
            "path": "test/functional/ui/decorations_spec.lua",
            "position": null,
            "pull_request_review_id": 1873478856,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27361",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1484986920/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-10T05:45:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1484986920",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27361#discussion_r1484986996"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27361"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1484986996"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    eq(true, api.nvim_win_remove_ns(0, ns))\r\n    eq({}, api.nvim_win_get_ns(0))\r\n```",
            "commit_id": "1c032ad703a19cd5c8498ee95f9352df87a91139",
            "created_at": "2024-02-10T05:45:45Z",
            "diff_hunk": "@@ -5241,3 +5241,333 @@ describe('decorations: virt_text', function()\n     ]]}\n   end)\n end)\n+\n+describe('decorations: window scoped', function()\n+  local screen, ns\n+  before_each(function()\n+    clear()\n+    screen = Screen.new(20, 10)\n+    screen:attach()\n+    screen:set_default_attr_ids {\n+      [1] = { foreground = Screen.colors.Blue1 },\n+      [2] = { foreground = Screen.colors.Blue1, bold = true },\n+    }\n+\n+    ns = api.nvim_create_namespace 'test'\n+\n+    insert('12345')\n+  end)\n+\n+  local noextmarks = {\n+    grid = [[\n+      1234^5               |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+  local function set_scoped_extmark(line, col, opts)\n+    return api.nvim_buf_set_extmark(0, ns, line, col, vim.tbl_extend('error', { scoped = true }, opts))\n+  end\n+\n+  it('hl_group', function()\n+    set_scoped_extmark(0, 0, {\n+      hl_group = 'Comment',\n+      end_col = 3,\n+    })\n+\n+    screen:expect(noextmarks)\n+\n+    api.nvim_win_add_ns(0, ns)\n+\n+    screen:expect {\n+      grid = [[\n+      {1:123}4^5               |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    command 'split'\n+    command 'only'\n+\n+    screen:expect(noextmarks)\n+  end)\n+\n+  it('virt_text', function()\n+    set_scoped_extmark(0, 0, {\n+      virt_text = { { 'a', 'Comment' } },\n+      virt_text_pos = 'eol',\n+    })\n+    set_scoped_extmark(0, 5, {\n+      virt_text = { { 'b', 'Comment' } },\n+      virt_text_pos = 'inline',\n+    })\n+    set_scoped_extmark(0, 1, {\n+      virt_text = { { 'c', 'Comment' } },\n+      virt_text_pos = 'overlay',\n+    })\n+    set_scoped_extmark(0, 1, {\n+      virt_text = { { 'd', 'Comment' } },\n+      virt_text_pos = 'right_align',\n+    })\n+\n+    screen:expect(noextmarks)\n+\n+    api.nvim_win_add_ns(0, ns)\n+\n+    screen:expect {\n+      grid = [[\n+      1{1:c}34^5{1:b} {1:a}           {1:d}|\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    command 'split'\n+    command 'only'\n+\n+    screen:expect(noextmarks)\n+  end)\n+\n+  it('virt_lines', function()\n+    set_scoped_extmark(0, 0, {\n+      virt_lines = { { { 'a', 'Comment' } } },\n+    })\n+\n+    screen:expect(noextmarks)\n+\n+    api.nvim_win_add_ns(0, ns)\n+\n+    screen:expect {\n+      grid = [[\n+      1234^5               |\n+      {1:a}                   |\n+      {2:~                   }|*7\n+                          |\n+    ]]}\n+\n+    command 'split'\n+    command 'only'\n+\n+    screen:expect(noextmarks)\n+  end)\n+\n+  pending('sign_text', function()\n+    -- TODO(altermo): The window signcolumn width is calculation wrongly (when `singcolumn=auto`)\n+    -- This happens in function `win_redraw_signcols` on line containing `buf_meta_total(buf, kMTMetaSignText) > 0`\n+    set_scoped_extmark(0, 0, {\n+      sign_text = 'a',\n+      sign_hl_group = 'Comment',\n+    })\n+\n+    screen:expect(noextmarks)\n+\n+    api.nvim_win_add_ns(0, ns)\n+\n+    screen:expect {\n+      grid = [[\n+      a 1234^5             |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    command 'split'\n+    command 'only'\n+\n+    screen:expect(noextmarks)\n+  end)\n+\n+  it('statuscolumn hl group', function()\n+    local attrs = screen:get_default_attr_ids()\n+    table.insert(attrs, {\n+      foreground = Screen.colors.Brown,\n+    })\n+    screen:set_default_attr_ids(attrs)\n+\n+    set_scoped_extmark(0, 0, {\n+      number_hl_group='comment',\n+    })\n+    set_scoped_extmark(0, 0, {\n+      line_hl_group='comment',\n+    })\n+\n+    command 'set number'\n+\n+    screen:expect {\n+      grid = [[\n+      {3:  1 }1234^5           |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    api.nvim_win_add_ns(0, ns)\n+\n+    screen:expect {\n+      grid = [[\n+      {1:  1 1234^5           }|\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    command 'split'\n+    command 'only'\n+\n+    screen:expect {\n+      grid = [[\n+      {3:  1 }1234^5           |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+  end)\n+\n+  it('spell', function()\n+    local attrs = screen:get_default_attr_ids()\n+    table.insert(attrs, {\n+      special = Screen.colors.Red, undercurl = true\n+    })\n+    screen:set_default_attr_ids(attrs)\n+    api.nvim_buf_set_lines(0,0,-1,true,{'aa'})\n+\n+    set_scoped_extmark(0, 0, {\n+      spell=true,\n+      end_col=2,\n+    })\n+\n+    command 'set spelloptions=noplainbuffer'\n+    command 'set spell'\n+    command 'syntax off'\n+\n+    screen:expect {\n+      grid = [[\n+      a^a                  |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    api.nvim_win_add_ns(0, ns)\n+\n+    screen:expect {\n+      grid = [[\n+      {3:a^a}                  |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    command 'split'\n+    command 'only'\n+\n+    screen:expect {\n+      grid = [[\n+      a^a                  |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+  end)\n+\n+it('url', function()\n+    local url = 'https://example.com'\n+    local attrs = screen:get_default_attr_ids()\n+    table.insert(attrs, {\n+      url = url,\n+    })\n+    screen:set_default_attr_ids(attrs)\n+\n+    set_scoped_extmark(0, 0, {\n+      end_col=3,\n+      url=url,\n+    })\n+\n+    screen:expect(noextmarks)\n+\n+    api.nvim_win_add_ns(0, ns)\n+\n+    screen:expect {\n+      grid = [[\n+      {3:123}4^5               |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    command 'split'\n+    command 'only'\n+\n+    screen:expect(noextmarks)\n+  end)\n+\n+  it('change extmarks scoped option',function ()\n+    local id = set_scoped_extmark(0, 0, {\n+      hl_group = 'Comment',\n+      end_col = 3,\n+    })\n+\n+    api.nvim_win_add_ns(0, ns)\n+\n+    screen:expect {\n+      grid = [[\n+      {1:123}4^5               |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    command 'split'\n+    command 'only'\n+\n+    screen:expect(noextmarks)\n+\n+    api.nvim_buf_set_extmark(0, ns, 0, 0, {\n+      id = id,\n+      hl_group = 'Comment',\n+      end_col = 3,\n+      scoped = false,\n+    })\n+\n+    screen:expect {\n+      grid = [[\n+      {1:123}4^5               |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    api.nvim_buf_set_extmark(0, ns, 0, 0, {\n+      id = id,\n+      hl_group = 'Comment',\n+      end_col = 3,\n+      scoped = true,\n+    })\n+\n+    screen:expect(noextmarks)\n+  end)\n+\n+  it('change namespace scope',function ()\n+    set_scoped_extmark(0, 0, {\n+      hl_group = 'Comment',\n+      end_col = 3,\n+    })\n+\n+    api.nvim_win_add_ns(0, ns)\n+\n+    screen:expect {\n+      grid = [[\n+      {1:123}4^5               |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    command 'split'\n+    command 'only'\n+\n+    screen:expect(noextmarks)\n+\n+    api.nvim_win_add_ns(0, ns)\n+\n+    screen:expect {\n+      grid = [[\n+      {1:123}4^5               |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    assert(api.nvim_win_remove_ns(0, ns))\n+    eq(api.nvim_win_get_ns(0), {})",
            "html_url": "https://github.com/neovim/neovim/pull/27361#discussion_r1484986996",
            "id": 1484986996,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Ygxp0",
            "original_commit_id": "d201517b3bebad4dce3e97bea1eb4452dc6f118f",
            "original_line": 5569,
            "original_position": 329,
            "original_start_line": 5568,
            "path": "test/functional/ui/decorations_spec.lua",
            "position": null,
            "pull_request_review_id": 1873478856,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27361",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1484986996/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-02-10T05:45:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1484986996",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27361#discussion_r1490696280"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27361"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490696280"
                }
            },
            "author_association": "MEMBER",
            "body": "copy-pasta error",
            "commit_id": "1c032ad703a19cd5c8498ee95f9352df87a91139",
            "created_at": "2024-02-15T09:27:01Z",
            "diff_hunk": "@@ -1211,3 +1222,73 @@ String nvim__buf_debug_extmarks(Buffer buffer, Boolean keys, Boolean dot, Error\n \n   return mt_inspect(buf->b_marktree, keys, dot);\n }\n+\n+/// Adds the namespace scope to the window.\n+///\n+/// @param window Window handle, or 0 for current window\n+/// @param ns_id the namespace to add\n+/// @return true if the namespace was added, else false\n+Boolean nvim_win_add_ns(Window window, Integer ns_id, Error *err)\n+  FUNC_API_SINCE(12)\n+{\n+  win_T *win = find_window_by_handle(window, err);\n+  if (!win) {\n+    return false;\n+  }\n+\n+  VALIDATE_INT(ns_initialized((uint32_t)ns_id), \"ns_id\", ns_id, {\n+    return false;\n+  });\n+\n+  set_put_uint32_t(&win->w_ns_set, (uint32_t)ns_id, NULL);\n+\n+  redraw_all_later(UPD_NOT_VALID);  // TODO(altermo): only need to redraw the window\n+\n+  return true;\n+}\n+\n+/// Gets all the namespaces scopes associated with a window.\n+///\n+/// @param window Window handle, or 0 for current window\n+/// @param ns_id the namespace to remove\n+/// @return true if the namespace was removed, else false",
            "html_url": "https://github.com/neovim/neovim/pull/27361#discussion_r1490696280",
            "id": 1490696280,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Y2jhY",
            "original_commit_id": "0451e89313a9f4cb272f753700a1eed01cfaec0d",
            "original_line": 1254,
            "original_position": 83,
            "original_start_line": null,
            "path": "src/nvim/api/extmark.c",
            "position": null,
            "pull_request_review_id": 1882214267,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27361",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490696280/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-15T09:27:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490696280",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27361#discussion_r1490697861"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27361"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490697861"
                }
            },
            "author_association": "MEMBER",
            "body": "`redraw_later(win, UPD_NOT_VALID)` ",
            "commit_id": "1c032ad703a19cd5c8498ee95f9352df87a91139",
            "created_at": "2024-02-15T09:28:09Z",
            "diff_hunk": "@@ -1211,3 +1222,73 @@ String nvim__buf_debug_extmarks(Buffer buffer, Boolean keys, Boolean dot, Error\n \n   return mt_inspect(buf->b_marktree, keys, dot);\n }\n+\n+/// Adds the namespace scope to the window.\n+///\n+/// @param window Window handle, or 0 for current window\n+/// @param ns_id the namespace to add\n+/// @return true if the namespace was added, else false\n+Boolean nvim_win_add_ns(Window window, Integer ns_id, Error *err)\n+  FUNC_API_SINCE(12)\n+{\n+  win_T *win = find_window_by_handle(window, err);\n+  if (!win) {\n+    return false;\n+  }\n+\n+  VALIDATE_INT(ns_initialized((uint32_t)ns_id), \"ns_id\", ns_id, {\n+    return false;\n+  });\n+\n+  set_put_uint32_t(&win->w_ns_set, (uint32_t)ns_id, NULL);\n+\n+  redraw_all_later(UPD_NOT_VALID);  // TODO(altermo): only need to redraw the window\n+\n+  return true;\n+}\n+\n+/// Gets all the namespaces scopes associated with a window.\n+///\n+/// @param window Window handle, or 0 for current window\n+/// @param ns_id the namespace to remove\n+/// @return true if the namespace was removed, else false\n+ArrayOf(Integer) nvim_win_get_ns(Window window, Error *err)\n+  FUNC_API_SINCE(12)\n+{\n+  Array rv = ARRAY_DICT_INIT;\n+\n+  win_T *win = find_window_by_handle(window, err);\n+  if (!win) {\n+    return rv;\n+  }\n+  uint32_t i;\n+  set_foreach(&win->w_ns_set, i, {\n+    ADD(rv, INTEGER_OBJ((Integer)(i)));\n+  });\n+\n+  return rv;\n+}\n+\n+/// Removes the namespace scope from the window.\n+///\n+/// @param window Window handle, or 0 for current window\n+/// @param ns_id the namespace to remove\n+/// @return true if the namespace was removed, else false\n+Boolean nvim_win_remove_ns(Window window, Integer ns_id, Error *err)\n+  FUNC_API_SINCE(12)\n+{\n+  win_T *win = find_window_by_handle(window, err);\n+  if (!win) {\n+    return false;\n+  }\n+\n+  if (!set_has_uint32_t(&win->w_ns_set, (uint32_t)ns_id)) {\n+    return false;\n+  }\n+\n+  set_del_uint32_t(&win->w_ns_set, (uint32_t)ns_id);\n+\n+  redraw_all_later(UPD_NOT_VALID);  // TODO(altermo): only need to redraw the window",
            "html_url": "https://github.com/neovim/neovim/pull/27361#discussion_r1490697861",
            "id": 1490697861,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Y2j6F",
            "original_commit_id": "0451e89313a9f4cb272f753700a1eed01cfaec0d",
            "original_line": 1290,
            "original_position": 120,
            "original_start_line": null,
            "path": "src/nvim/api/extmark.c",
            "position": null,
            "pull_request_review_id": 1882218246,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27361",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490697861/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-15T09:28:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490697861",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27361#discussion_r1490701730"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27361"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490701730"
                }
            },
            "author_association": "MEMBER",
            "body": "I'd call this `mt_scoped_in_win()` and give it the reverse return value (true = positive = visible)",
            "commit_id": "1c032ad703a19cd5c8498ee95f9352df87a91139",
            "created_at": "2024-02-15T09:31:06Z",
            "diff_hunk": "@@ -107,12 +110,24 @@ static inline bool mt_decor_sign(MTKey key)\n   return key.flags & (MT_FLAG_DECOR_SIGNTEXT | MT_FLAG_DECOR_SIGNHL);\n }\n \n-static inline uint16_t mt_flags(bool right_gravity, bool no_undo, bool invalidate, bool decor_ext)\n+static inline bool mt_scoped(MTKey key)\n+{\n+  return key.flags & MT_FLAG_SCOPED;\n+}\n+\n+static inline bool mt_scoped_ns_check(MTKey key, win_T *wp)",
            "html_url": "https://github.com/neovim/neovim/pull/27361#discussion_r1490701730",
            "id": 1490701730,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Y2k2i",
            "original_commit_id": "0451e89313a9f4cb272f753700a1eed01cfaec0d",
            "original_line": 118,
            "original_position": 36,
            "original_start_line": null,
            "path": "src/nvim/marktree.h",
            "position": null,
            "pull_request_review_id": 1882228586,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27361",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490701730/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-15T09:31:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490701730",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27361#discussion_r1490713639"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27361"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490713639"
                }
            },
            "author_association": "MEMBER",
            "body": "`set_put(uint32_t, &win->w_ns_set, (uint32_t)ns_id, NULL)` (and similar for set_put/set_has)",
            "commit_id": "1c032ad703a19cd5c8498ee95f9352df87a91139",
            "created_at": "2024-02-15T09:40:21Z",
            "diff_hunk": "@@ -1211,3 +1222,73 @@ String nvim__buf_debug_extmarks(Buffer buffer, Boolean keys, Boolean dot, Error\n \n   return mt_inspect(buf->b_marktree, keys, dot);\n }\n+\n+/// Adds the namespace scope to the window.\n+///\n+/// @param window Window handle, or 0 for current window\n+/// @param ns_id the namespace to add\n+/// @return true if the namespace was added, else false\n+Boolean nvim_win_add_ns(Window window, Integer ns_id, Error *err)\n+  FUNC_API_SINCE(12)\n+{\n+  win_T *win = find_window_by_handle(window, err);\n+  if (!win) {\n+    return false;\n+  }\n+\n+  VALIDATE_INT(ns_initialized((uint32_t)ns_id), \"ns_id\", ns_id, {\n+    return false;\n+  });\n+\n+  set_put_uint32_t(&win->w_ns_set, (uint32_t)ns_id, NULL);",
            "html_url": "https://github.com/neovim/neovim/pull/27361#discussion_r1490713639",
            "id": 1490713639,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Y2nwn",
            "original_commit_id": "0451e89313a9f4cb272f753700a1eed01cfaec0d",
            "original_line": 1243,
            "original_position": 72,
            "original_start_line": null,
            "path": "src/nvim/api/extmark.c",
            "position": null,
            "pull_request_review_id": 1882260366,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27361",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490713639/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-15T09:40:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490713639",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27361#discussion_r1491907306"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27361"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1491907306"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    -- TODO(altermo): The window signcolumn width is calculated wrongly (when `signcolumn=auto`)\r\n```",
            "commit_id": "1c032ad703a19cd5c8498ee95f9352df87a91139",
            "created_at": "2024-02-16T03:03:08Z",
            "diff_hunk": "@@ -5241,3 +5241,333 @@ describe('decorations: virt_text', function()\n     ]]}\n   end)\n end)\n+\n+describe('decorations: window scoped', function()\n+  local screen, ns\n+  before_each(function()\n+    clear()\n+    screen = Screen.new(20, 10)\n+    screen:attach()\n+    screen:set_default_attr_ids {\n+      [1] = { foreground = Screen.colors.Blue1 },\n+      [2] = { foreground = Screen.colors.Blue1, bold = true },\n+    }\n+\n+    ns = api.nvim_create_namespace 'test'\n+\n+    insert('12345')\n+  end)\n+\n+  local noextmarks = {\n+    grid = [[\n+      1234^5               |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+  local function set_scoped_extmark(line, col, opts)\n+    return api.nvim_buf_set_extmark(0, ns, line, col, vim.tbl_extend('error', { scoped = true }, opts))\n+  end\n+\n+  it('hl_group', function()\n+    set_scoped_extmark(0, 0, {\n+      hl_group = 'Comment',\n+      end_col = 3,\n+    })\n+\n+    screen:expect(noextmarks)\n+\n+    api.nvim_win_add_ns(0, ns)\n+\n+    screen:expect {\n+      grid = [[\n+      {1:123}4^5               |\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    command 'split'\n+    command 'only'\n+\n+    screen:expect(noextmarks)\n+  end)\n+\n+  it('virt_text', function()\n+    set_scoped_extmark(0, 0, {\n+      virt_text = { { 'a', 'Comment' } },\n+      virt_text_pos = 'eol',\n+    })\n+    set_scoped_extmark(0, 5, {\n+      virt_text = { { 'b', 'Comment' } },\n+      virt_text_pos = 'inline',\n+    })\n+    set_scoped_extmark(0, 1, {\n+      virt_text = { { 'c', 'Comment' } },\n+      virt_text_pos = 'overlay',\n+    })\n+    set_scoped_extmark(0, 1, {\n+      virt_text = { { 'd', 'Comment' } },\n+      virt_text_pos = 'right_align',\n+    })\n+\n+    screen:expect(noextmarks)\n+\n+    api.nvim_win_add_ns(0, ns)\n+\n+    screen:expect {\n+      grid = [[\n+      1{1:c}34^5{1:b} {1:a}           {1:d}|\n+      {2:~                   }|*8\n+                          |\n+    ]]}\n+\n+    command 'split'\n+    command 'only'\n+\n+    screen:expect(noextmarks)\n+  end)\n+\n+  it('virt_lines', function()\n+    set_scoped_extmark(0, 0, {\n+      virt_lines = { { { 'a', 'Comment' } } },\n+    })\n+\n+    screen:expect(noextmarks)\n+\n+    api.nvim_win_add_ns(0, ns)\n+\n+    screen:expect {\n+      grid = [[\n+      1234^5               |\n+      {1:a}                   |\n+      {2:~                   }|*7\n+                          |\n+    ]]}\n+\n+    command 'split'\n+    command 'only'\n+\n+    screen:expect(noextmarks)\n+  end)\n+\n+  pending('sign_text', function()\n+    -- TODO(altermo): The window signcolumn width is calculation wrongly (when `signcolumn=auto`)",
            "html_url": "https://github.com/neovim/neovim/pull/27361#discussion_r1491907306",
            "id": 1491907306,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Y7LLq",
            "original_commit_id": "0451e89313a9f4cb272f753700a1eed01cfaec0d",
            "original_line": 5354,
            "original_position": 114,
            "original_start_line": null,
            "path": "test/functional/ui/decorations_spec.lua",
            "position": null,
            "pull_request_review_id": 1884240582,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27361",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1491907306/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-16T03:03:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1491907306",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27361#discussion_r1497602708"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27361"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1497602708"
                }
            },
            "author_association": "MEMBER",
            "body": "The line breaking here is a bit strange.",
            "commit_id": "1c032ad703a19cd5c8498ee95f9352df87a91139",
            "created_at": "2024-02-21T13:54:35Z",
            "diff_hunk": "@@ -716,7 +720,8 @@ void decor_redraw_signs(win_T *wp, buf_T *buf, int row, SignTextAttrs sattrs[],\n     if (mark.pos.row != row) {\n       break;\n     }\n-    if (!mt_end(mark) && !mt_invalid(mark) && mt_decor_sign(mark)) {\n+    if (!mt_end(mark) && !mt_invalid(mark) && mt_decor_sign(mark) && mt_scoped_in_win(mark,\n+                                                                                      wp)) {",
            "html_url": "https://github.com/neovim/neovim/pull/27361#discussion_r1497602708",
            "id": 1497602708,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ZQ5qU",
            "original_commit_id": "ce88b4419ae461e47086452971160e89e51cf067",
            "original_line": 724,
            "original_position": 26,
            "original_start_line": 723,
            "path": "src/nvim/decoration.c",
            "position": null,
            "pull_request_review_id": 1893272379,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27361",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1497602708/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-02-21T13:54:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1497602708",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "Alternative representation: for each decoration, just store a single bit (in the flags field for the extmark) whether this is a \"scoped\" extmark. then for each window, store a set of all the active _namespaces_ from which scoped extmarks are considered.  \r\n\r\nIt is less granular in one way (either all or nothing of scoped marks in a namespace is visible) but a lot more flexible in another (a given extmark category can be displayed in a _subset_ of windows, not just one). ",
            "created_at": "2024-02-06T12:01:53Z",
            "html_url": "https://github.com/neovim/neovim/pull/27361#issuecomment-1929373396",
            "id": 1929373396,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27361",
            "node_id": "IC_kwDOAPphoM5y_-bU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1929373396/reactions"
            },
            "updated_at": "2024-02-06T12:02:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1929373396",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I thought about instead of having a scoped option for the extmark; have a scoped option for the namespace, as I don't see many people creating a namespace with a combination of scoped and unscoped extmarks.\r\nBut as namespaces don't have any struct and are just numbers, I don't know where to store this information.",
            "created_at": "2024-02-06T12:29:58Z",
            "html_url": "https://github.com/neovim/neovim/pull/27361#issuecomment-1929427329",
            "id": 1929427329,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27361",
            "node_id": "IC_kwDOAPphoM5zALmB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1929427329/reactions"
            },
            "updated_at": "2024-02-06T21:08:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1929427329",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/107814000?v=4",
                "events_url": "https://api.github.com/users/altermo/events{/privacy}",
                "followers_url": "https://api.github.com/users/altermo/followers",
                "following_url": "https://api.github.com/users/altermo/following{/other_user}",
                "gists_url": "https://api.github.com/users/altermo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/altermo",
                "id": 107814000,
                "login": "altermo",
                "node_id": "U_kgDOBm0ccA",
                "organizations_url": "https://api.github.com/users/altermo/orgs",
                "received_events_url": "https://api.github.com/users/altermo/received_events",
                "repos_url": "https://api.github.com/users/altermo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/altermo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/altermo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/altermo"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "That might be an option as well. \r\n\r\n>  But as namespaces don't have any struct and are just numbers, I don't know where to store this information.\r\n\r\nThat's mostly a consequence of just a single item of info being used currently. changing that to a struct would be fine if we go that path.",
            "created_at": "2024-02-06T22:31:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/27361#issuecomment-1930880703",
            "id": 1930880703,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27361",
            "node_id": "IC_kwDOAPphoM5zFua_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1930880703/reactions"
            },
            "updated_at": "2024-02-06T22:31:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1930880703",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I don't really favor the current PR so I thought a bit more about whether it would be better to have the namespaces themselves be scoped and this is what I came up with (only a proposal):\r\n\r\nEach namespace would have some scopes. By default(if there are no scopes set) the namespace would fallback to the default behavior (which is that namespace-highlight won't be displayed anywhere and extmarks would be displayed everywhere).\r\n\r\nIf multiple scopes are set then they are a union instead of an intersection.\r\n\r\nThese are the scopes:\r\n+ Window-scoped: Only display in specific window.\r\n+ Buffer-scoped: Only display in specific buffer.\r\n+ Tab-scoped: Only display in specific tabpage.\r\n+ UI-scoped: Only display in specific UI.\r\n+ Global-scoped: Display everywhere.\r\n\r\nThe affected namespace elements would be: buffer-local-extmark(and any other future extmark) and namespace-highlight.\r\n\r\nSome api for this (not final design):\r\n+ `nvim_ns_add_{win,buf,tab,global}_scope`: Adds the scope to namespace. Takes one (or zero for global) argument of bufnr/winid/tabpage.\r\n+ `nvim_ns_get_scopes`: Get the scopes.\r\n+ `nvim_ns_del_{win,buf,tab,global}_scope`: Deletes a scope of namespace. Takes one (or zero for global) argument of bufnr/winid/tabpage.\r\n+ `nvim_get_ns_scoped`: Gets all namespaces with specific scope. Takes some arguments.\r\n\r\nDepreciated api functions and their replacements:\r\n+ `nvim_get_hl_ns`: Use `nvim_get_ns_scoped` to get global scoped namespaces and check if the namespace has higlight with `nvim_get_hl`.\r\n+ `nvim_set_hl_ns`: Use `nvim_ns_add_global_scope`.\r\n+ `nvim_set_hl_ns_fast`: I don't know a good replacement.\r\n+ `nvim_win_set_hl_ns`: Use `nvim_ns_add_win_scope`.\r\n---\r\n**NOTE:** I won't implement namespace-highlight in this PR (if the proposal is good to go).\r\n\r\nIf you're okay with this proposal then signal so that I can start working on it.",
            "created_at": "2024-02-21T08:12:06Z",
            "html_url": "https://github.com/neovim/neovim/pull/27361#issuecomment-1956098916",
            "id": 1956098916,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27361",
            "node_id": "IC_kwDOAPphoM50l7Nk",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1956098916/reactions"
            },
            "updated_at": "2024-02-21T08:12:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1956098916",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/107814000?v=4",
                "events_url": "https://api.github.com/users/altermo/events{/privacy}",
                "followers_url": "https://api.github.com/users/altermo/followers",
                "following_url": "https://api.github.com/users/altermo/following{/other_user}",
                "gists_url": "https://api.github.com/users/altermo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/altermo",
                "id": 107814000,
                "login": "altermo",
                "node_id": "U_kgDOBm0ccA",
                "organizations_url": "https://api.github.com/users/altermo/orgs",
                "received_events_url": "https://api.github.com/users/altermo/received_events",
                "repos_url": "https://api.github.com/users/altermo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/altermo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/altermo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/altermo"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Hmm, I'd still like to just get window-scoped extmarks merged _first_ and then extend upon it as needed.\r\n\r\nAs far as I can tell this PR by itself is mostly forward-compatible with this extended proposal. The only difference I think is if we want to \"mark\" each individual extmark as scoped, or as you say, mark the entire namespace as scoped and then need to opt-in to it in specific windows.\r\n\r\n`nvim_ns_add_tabpage_scope` would be a convenient short-hand for marking each individual window in that tab. convenient, but can be done as an addon. buffer-scoped would be mostly relevant for highlight namespaces, which we can consider but is separate work from this (and needs design discussion on its own. I have some other ideas how to rework those)\r\n\r\nIMO I would first merge this pr pretty much as-is so that plugin authors can play with it. From there one we can gather feedback of what add-on features are mostly desired.\r\n",
            "created_at": "2024-02-21T11:52:43Z",
            "html_url": "https://github.com/neovim/neovim/pull/27361#issuecomment-1956487066",
            "id": 1956487066,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27361",
            "node_id": "IC_kwDOAPphoM50nZ-a",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1956487066/reactions"
            },
            "updated_at": "2024-02-21T11:52:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1956487066",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Then this PR is ready to merge.",
            "created_at": "2024-02-21T12:23:42Z",
            "html_url": "https://github.com/neovim/neovim/pull/27361#issuecomment-1956537265",
            "id": 1956537265,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27361",
            "node_id": "IC_kwDOAPphoM50nmOx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1956537265/reactions"
            },
            "updated_at": "2024-02-21T12:23:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1956537265",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/107814000?v=4",
                "events_url": "https://api.github.com/users/altermo/events{/privacy}",
                "followers_url": "https://api.github.com/users/altermo/followers",
                "following_url": "https://api.github.com/users/altermo/following{/other_user}",
                "gists_url": "https://api.github.com/users/altermo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/altermo",
                "id": 107814000,
                "login": "altermo",
                "node_id": "U_kgDOBm0ccA",
                "organizations_url": "https://api.github.com/users/altermo/orgs",
                "received_events_url": "https://api.github.com/users/altermo/received_events",
                "repos_url": "https://api.github.com/users/altermo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/altermo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/altermo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/altermo"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/27361/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/27361/commits",
    "created_at": "2024-02-06T11:19:18Z",
    "diff_url": "https://github.com/neovim/neovim/pull/27361.diff",
    "draft": false,
    "head": {
        "label": "altermo:buf-win-local-extmarks",
        "ref": "buf-win-local-extmarks",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/altermo/neovim-fork/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/altermo/neovim-fork/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/altermo/neovim-fork/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/altermo/neovim-fork/branches{/branch}",
            "clone_url": "https://github.com/altermo/neovim-fork.git",
            "collaborators_url": "https://api.github.com/repos/altermo/neovim-fork/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/altermo/neovim-fork/comments{/number}",
            "commits_url": "https://api.github.com/repos/altermo/neovim-fork/commits{/sha}",
            "compare_url": "https://api.github.com/repos/altermo/neovim-fork/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/altermo/neovim-fork/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/altermo/neovim-fork/contributors",
            "created_at": "2023-09-13T06:55:17Z",
            "default_branch": "DONT-USE-THIS-AS-SOURCE-WHEN-CREATING-NEW-BRANCH",
            "deployments_url": "https://api.github.com/repos/altermo/neovim-fork/deployments",
            "description": null,
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/altermo/neovim-fork/downloads",
            "events_url": "https://api.github.com/repos/altermo/neovim-fork/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/altermo/neovim-fork/forks",
            "full_name": "altermo/neovim-fork",
            "git_commits_url": "https://api.github.com/repos/altermo/neovim-fork/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/altermo/neovim-fork/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/altermo/neovim-fork/git/tags{/sha}",
            "git_url": "git://github.com/altermo/neovim-fork.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/altermo/neovim-fork/hooks",
            "html_url": "https://github.com/altermo/neovim-fork",
            "id": 690927347,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/altermo/neovim-fork/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/altermo/neovim-fork/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/altermo/neovim-fork/issues{/number}",
            "keys_url": "https://api.github.com/repos/altermo/neovim-fork/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/altermo/neovim-fork/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/altermo/neovim-fork/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/altermo/neovim-fork/merges",
            "milestones_url": "https://api.github.com/repos/altermo/neovim-fork/milestones{/number}",
            "mirror_url": null,
            "name": "neovim-fork",
            "node_id": "R_kgDOKS628w",
            "notifications_url": "https://api.github.com/repos/altermo/neovim-fork/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/107814000?v=4",
                "events_url": "https://api.github.com/users/altermo/events{/privacy}",
                "followers_url": "https://api.github.com/users/altermo/followers",
                "following_url": "https://api.github.com/users/altermo/following{/other_user}",
                "gists_url": "https://api.github.com/users/altermo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/altermo",
                "id": 107814000,
                "login": "altermo",
                "node_id": "U_kgDOBm0ccA",
                "organizations_url": "https://api.github.com/users/altermo/orgs",
                "received_events_url": "https://api.github.com/users/altermo/received_events",
                "repos_url": "https://api.github.com/users/altermo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/altermo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/altermo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/altermo"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/altermo/neovim-fork/pulls{/number}",
            "pushed_at": "2024-02-22T07:31:06Z",
            "releases_url": "https://api.github.com/repos/altermo/neovim-fork/releases{/id}",
            "size": 248392,
            "ssh_url": "git@github.com:altermo/neovim-fork.git",
            "stargazers_count": 1,
            "stargazers_url": "https://api.github.com/repos/altermo/neovim-fork/stargazers",
            "statuses_url": "https://api.github.com/repos/altermo/neovim-fork/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/altermo/neovim-fork/subscribers",
            "subscription_url": "https://api.github.com/repos/altermo/neovim-fork/subscription",
            "svn_url": "https://github.com/altermo/neovim-fork",
            "tags_url": "https://api.github.com/repos/altermo/neovim-fork/tags",
            "teams_url": "https://api.github.com/repos/altermo/neovim-fork/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/altermo/neovim-fork/git/trees{/sha}",
            "updated_at": "2024-02-08T06:40:48Z",
            "url": "https://api.github.com/repos/altermo/neovim-fork",
            "visibility": "public",
            "watchers": 1,
            "watchers_count": 1,
            "web_commit_signoff_required": false
        },
        "sha": "1c032ad703a19cd5c8498ee95f9352df87a91139",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/107814000?v=4",
            "events_url": "https://api.github.com/users/altermo/events{/privacy}",
            "followers_url": "https://api.github.com/users/altermo/followers",
            "following_url": "https://api.github.com/users/altermo/following{/other_user}",
            "gists_url": "https://api.github.com/users/altermo/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/altermo",
            "id": 107814000,
            "login": "altermo",
            "node_id": "U_kgDOBm0ccA",
            "organizations_url": "https://api.github.com/users/altermo/orgs",
            "received_events_url": "https://api.github.com/users/altermo/received_events",
            "repos_url": "https://api.github.com/users/altermo/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/altermo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/altermo/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/altermo"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/27361",
    "id": 1713462679,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27361",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "extmarks, decorations, virtual text, namespaces",
            "id": 1680119719,
            "name": "extmarks",
            "node_id": "MDU6TGFiZWwxNjgwMTE5NzE5",
            "url": "https://api.github.com/repos/neovim/neovim/labels/extmarks"
        }
    ],
    "locked": false,
    "merge_commit_sha": "ba0370b1d718d473d0ef51c35d88b98ba220082b",
    "merged_at": "2024-02-21T18:21:14Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5mIV2X",
    "number": 27361,
    "patch_url": "https://github.com/neovim/neovim/pull/27361.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/27361/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/1c032ad703a19cd5c8498ee95f9352df87a91139",
    "title": "feat(extmark): window scoped namespace",
    "updated_at": "2024-02-21T18:21:14Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/27361",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/107814000?v=4",
        "events_url": "https://api.github.com/users/altermo/events{/privacy}",
        "followers_url": "https://api.github.com/users/altermo/followers",
        "following_url": "https://api.github.com/users/altermo/following{/other_user}",
        "gists_url": "https://api.github.com/users/altermo/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/altermo",
        "id": 107814000,
        "login": "altermo",
        "node_id": "U_kgDOBm0ccA",
        "organizations_url": "https://api.github.com/users/altermo/orgs",
        "received_events_url": "https://api.github.com/users/altermo/received_events",
        "repos_url": "https://api.github.com/users/altermo/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/altermo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/altermo/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/altermo"
    }
}