{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/28176/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/28176/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/28176"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/28176"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/28176/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/ef93981ae37486af5d9219636436fb2fe4ccaa69"
        }
    },
    "active_lock_reason": "resolved",
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5262,
            "forks_count": 5262,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1704,
            "open_issues_count": 1704,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-04-16T01:36:31Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 265230,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 76221,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-04-16T01:13:32Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 76221,
            "watchers_count": 76221,
            "web_commit_signoff_required": false
        },
        "sha": "2b9d8dc87e84ea9c03eb8852af8fd9fe00a6033a",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "This PR adds built-in support for commenting.\r\n\r\n### Design\r\n\r\n- Enable commenting support only through `gc` mappings for simplicity. No ability to configure, no Lua module, no user commands. Yet.\r\n\r\n- Overall implementation is a simplified version of [mini.comment](https://github.com/echasnovski/mini.nvim/blob/main/readmes/mini-comment.md) adapted to be a better suit for core. It basically means reducing code paths which use only specific fixed set of plugin config.\r\n\r\n  All used options are default except `pad_comment_parts = false`. This means that 'commentstring' option is used as is without forcing single space inner padding. This choice is deliberate because without user configuration this is the only approach which allows users to have any comment format. The downside of this is that some (usually \"older\") values of 'commentstring' currently have no padding in them (like Vimscript's `\"%s\"` and C's `/*%s*/`). I think (more like, hope) those can be changed without breaking much.\r\n\r\n  The best approach for users to customize 'commentstring' is to create a filetype plugin (see `:h ftplugin`) or `FileType` autocommand inside which set the option locally (with `:setlocal` or `lua vim.bo`). Changing it interactively will not always work (for example, in presence of active tree-sitter parser).\r\n\r\n### Comparison with 'tpope/vim-commentary'\r\n\r\nAs [tpope/vim-commentary](https://github.com/tpope/vim-commentary) was considered for inclusion in #27999, here is a quick summary of how this PR differs from it:\r\n\r\n- **User-facing features**. Both implement similar user-facing mappings. This PR does not include `gcu` which is essentially a `gcgc`. There are no commands, events, or configuration in this PR.\r\n\r\n- **Size**. Both have reasonably comparable number of lines of code, while this PR has more comments in tricky areas. Here is a summary table (both are compared without code which makes mappings):\r\n\r\n    | File            | Lines  | Code | Comments | Blanks |\r\n    |-----------------|--------|------|----------|--------|\r\n    | This PR         |  252   | 140  |    69    |   43   |\r\n    | vim-commentary  |  113   | 104  |     2    |    7   |\r\n\r\n- **Maintainability**. This PR has (purely subjectively) better readability, tests, and Lua types.\r\n\r\n- **Configurability**. This PR has no user configuration, while 'vim-commentary' has some (partially as a counter-measure to possibly modifying 'commentstring' option).\r\n\r\n- **Extra features**:\r\n    - This PR supports tree-sitter by computing `'commentstring'` option under cursor, which can matter in presence of tree-sitter injected languages. **Note**: presence of tree-sitter parser in buffer is enough for this to take effect; running `vim.treesitter.start()`/`vim.treesitter.stop()` affects only highlighting.\r\n\r\n    - This PR comments blank lines while 'tpope/vim-commentary' does not.\r\n      It is a carefully thought through decision for a more intuitive experience at a cost of extra rules for how blank lines should be commented and later uncommented.\r\n      **Edit**: after a feedback and discussion, blank lines are *not* taken into account when deciding whether a text range should be commented or uncommented. This allows uncommenting commented blocks which are separated only by blank lines. See [this comment](https://github.com/neovim/neovim/pull/28176#issuecomment-2039299762) for an example.\r\n\r\n    - This PR has much better speed on larger chunks of lines (like >1000). This is thanks to using `nvim_buf_set_lines()` to set all new lines at once, and not with `vim.fn.setline()`. This comes at a price of some `lockmarks` hackery and affecting extmarks inside a range. See more details above single `nvim_buf_set_lines()` call in this PR or a [full PhD thesis in 'mini.comment'](https://github.com/echasnovski/mini.nvim/blob/f3092db48dd2dfd3d32df5a5be4d56ed0c0b1ef9/lua/mini/comment.lua#L251-L278).",
    "closed_at": "2024-04-05T16:07:43Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552043879"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552043879"
                }
            },
            "author_association": "MEMBER",
            "body": "I think `type(cur_cs) == 'string'` is redundant since get_option is guaranteed to return a string.",
            "commit_id": "ef93981ae37486af5d9219636436fb2fe4ccaa69",
            "created_at": "2024-04-04T16:30:06Z",
            "diff_hunk": "@@ -0,0 +1,252 @@\n+---@nodoc\n+---@class vim._comment.Parts\n+---@field left string Left part of comment\n+---@field right string Right part of comment\n+\n+---@param ref_position integer[]\n+---@return string\n+local function get_commentstring(ref_position)\n+  local buf_cs = vim.bo.commentstring\n+\n+  local has_ts_parser, ts_parser = pcall(vim.treesitter.get_parser)\n+  if not has_ts_parser then\n+    return buf_cs\n+  end\n+\n+  -- Try to get 'commentstring' associated with local tree-sitter language.\n+  -- This is useful for injected languages (like markdown with code blocks).\n+  local row, col = ref_position[1] - 1, ref_position[2]\n+  local ref_range = { row, col, row, col + 1 }\n+\n+  -- - Get 'commentstring' from the deepest LanguageTree which both contains\n+  --   reference range and has valid 'commentstring' (meaning it has at least\n+  --   one associated 'filetype' with valid 'commentstring').\n+  --   In simple cases using `parser:language_for_range()` would be enough, but\n+  --   it fails for languages without valid 'commentstring' (like 'comment').\n+  local ts_cs, res_level = nil, 0\n+\n+  ---@param lang_tree vim.treesitter.LanguageTree\n+  local function traverse(lang_tree, level)\n+    if not lang_tree:contains(ref_range) then\n+      return\n+    end\n+\n+    local lang = lang_tree:lang()\n+    local filetypes = vim.treesitter.language.get_filetypes(lang)\n+    for _, ft in ipairs(filetypes) do\n+      local cur_cs = vim.filetype.get_option(ft, 'commentstring')\n+      if type(cur_cs) == 'string' and cur_cs ~= '' and level > res_level then",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552043879",
            "id": 1552043879,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5cgk9n",
            "original_commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "original_line": 38,
            "original_position": 38,
            "original_start_line": null,
            "path": "runtime/lua/vim/_comment.lua",
            "position": null,
            "pull_request_review_id": 1980498316,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552043879/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-04T16:41:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552043879",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552049080"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552049080"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    local _, indent_width_cur, indent_cur = l:find('^(%s*)')\r\n```",
            "commit_id": "ef93981ae37486af5d9219636436fb2fe4ccaa69",
            "created_at": "2024-04-04T16:34:20Z",
            "diff_hunk": "@@ -0,0 +1,252 @@\n+---@nodoc\n+---@class vim._comment.Parts\n+---@field left string Left part of comment\n+---@field right string Right part of comment\n+\n+---@param ref_position integer[]\n+---@return string\n+local function get_commentstring(ref_position)\n+  local buf_cs = vim.bo.commentstring\n+\n+  local has_ts_parser, ts_parser = pcall(vim.treesitter.get_parser)\n+  if not has_ts_parser then\n+    return buf_cs\n+  end\n+\n+  -- Try to get 'commentstring' associated with local tree-sitter language.\n+  -- This is useful for injected languages (like markdown with code blocks).\n+  local row, col = ref_position[1] - 1, ref_position[2]\n+  local ref_range = { row, col, row, col + 1 }\n+\n+  -- - Get 'commentstring' from the deepest LanguageTree which both contains\n+  --   reference range and has valid 'commentstring' (meaning it has at least\n+  --   one associated 'filetype' with valid 'commentstring').\n+  --   In simple cases using `parser:language_for_range()` would be enough, but\n+  --   it fails for languages without valid 'commentstring' (like 'comment').\n+  local ts_cs, res_level = nil, 0\n+\n+  ---@param lang_tree vim.treesitter.LanguageTree\n+  local function traverse(lang_tree, level)\n+    if not lang_tree:contains(ref_range) then\n+      return\n+    end\n+\n+    local lang = lang_tree:lang()\n+    local filetypes = vim.treesitter.language.get_filetypes(lang)\n+    for _, ft in ipairs(filetypes) do\n+      local cur_cs = vim.filetype.get_option(ft, 'commentstring')\n+      if type(cur_cs) == 'string' and cur_cs ~= '' and level > res_level then\n+        ts_cs = cur_cs\n+      end\n+    end\n+\n+    for _, child_lang_tree in pairs(lang_tree:children()) do\n+      traverse(child_lang_tree, level + 1)\n+    end\n+  end\n+  traverse(ts_parser, 1)\n+\n+  return ts_cs or buf_cs\n+end\n+\n+---@param ref_position integer[]\n+---@return vim._comment.Parts\n+local function make_comment_parts(ref_position)\n+  local cs = get_commentstring(ref_position)\n+\n+  if cs == nil or cs == '' then\n+    vim.api.nvim_echo({ { \"Option 'commentstring' is empty.\", 'WarningMsg' } }, true, {})\n+    return { left = '', right = '' }\n+  end\n+\n+  if not (type(cs) == 'string' and string.find(cs, '%%s') ~= nil) then\n+    error(vim.inspect(cs) .. \" is not a valid 'commentstring'.\")\n+  end\n+\n+  -- Structure of 'commentstring': <left part> <%s> <right part>\n+  local left, right = string.match(cs, '^(.-)%%s(.-)$')\n+  return { left = left, right = right }\n+end\n+\n+---@param parts vim._comment.Parts\n+---@return fun(line: string): boolean\n+local function make_comment_check(parts)\n+  local l_esc, r_esc = vim.pesc(parts.left), vim.pesc(parts.right)\n+\n+  -- Commented line has the following structure:\n+  -- <possible whitespace> <left> <anything> <right> <possible whitespace>\n+  local nonblank_regex = '^%s-' .. l_esc .. '.*' .. r_esc .. '%s-$'\n+\n+  -- Commented blank line can have any amoung of whitespace around parts\n+  local blank_regex = '^%s-' .. vim.trim(l_esc) .. '%s*' .. vim.trim(r_esc) .. '%s-$'\n+\n+  return function(line)\n+    return string.find(line, nonblank_regex) ~= nil or string.find(line, blank_regex) ~= nil\n+  end\n+end\n+\n+---@param lines string[]\n+---@param parts vim._comment.Parts\n+---@return string indent\n+---@return boolean is_commented\n+local function get_lines_info(lines, parts)\n+  local comment_check = make_comment_check(parts)\n+\n+  local is_commented = true\n+  local indent_width, indent_width_cur = math.huge, math.huge\n+  ---@type integer\n+  local indent\n+  ---@type integer\n+  local indent_cur\n+\n+  for _, l in ipairs(lines) do\n+    -- Update lines indent: minimum of all indents except blank lines\n+    ---@diagnostic disable-next-line:cast-local-type\n+    _, indent_width_cur, indent_cur = string.find(l, '^(%s*)')",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552049080",
            "id": 1552049080,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5cgmO4",
            "original_commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "original_line": 105,
            "original_position": 105,
            "original_start_line": null,
            "path": "runtime/lua/vim/_comment.lua",
            "position": null,
            "pull_request_review_id": 1980498316,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552049080/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-04T16:41:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552049080",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552049794"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552049794"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n```",
            "commit_id": "ef93981ae37486af5d9219636436fb2fe4ccaa69",
            "created_at": "2024-04-04T16:34:56Z",
            "diff_hunk": "@@ -0,0 +1,252 @@\n+---@nodoc\n+---@class vim._comment.Parts\n+---@field left string Left part of comment\n+---@field right string Right part of comment\n+\n+---@param ref_position integer[]\n+---@return string\n+local function get_commentstring(ref_position)\n+  local buf_cs = vim.bo.commentstring\n+\n+  local has_ts_parser, ts_parser = pcall(vim.treesitter.get_parser)\n+  if not has_ts_parser then\n+    return buf_cs\n+  end\n+\n+  -- Try to get 'commentstring' associated with local tree-sitter language.\n+  -- This is useful for injected languages (like markdown with code blocks).\n+  local row, col = ref_position[1] - 1, ref_position[2]\n+  local ref_range = { row, col, row, col + 1 }\n+\n+  -- - Get 'commentstring' from the deepest LanguageTree which both contains\n+  --   reference range and has valid 'commentstring' (meaning it has at least\n+  --   one associated 'filetype' with valid 'commentstring').\n+  --   In simple cases using `parser:language_for_range()` would be enough, but\n+  --   it fails for languages without valid 'commentstring' (like 'comment').\n+  local ts_cs, res_level = nil, 0\n+\n+  ---@param lang_tree vim.treesitter.LanguageTree\n+  local function traverse(lang_tree, level)\n+    if not lang_tree:contains(ref_range) then\n+      return\n+    end\n+\n+    local lang = lang_tree:lang()\n+    local filetypes = vim.treesitter.language.get_filetypes(lang)\n+    for _, ft in ipairs(filetypes) do\n+      local cur_cs = vim.filetype.get_option(ft, 'commentstring')\n+      if type(cur_cs) == 'string' and cur_cs ~= '' and level > res_level then\n+        ts_cs = cur_cs\n+      end\n+    end\n+\n+    for _, child_lang_tree in pairs(lang_tree:children()) do\n+      traverse(child_lang_tree, level + 1)\n+    end\n+  end\n+  traverse(ts_parser, 1)\n+\n+  return ts_cs or buf_cs\n+end\n+\n+---@param ref_position integer[]\n+---@return vim._comment.Parts\n+local function make_comment_parts(ref_position)\n+  local cs = get_commentstring(ref_position)\n+\n+  if cs == nil or cs == '' then\n+    vim.api.nvim_echo({ { \"Option 'commentstring' is empty.\", 'WarningMsg' } }, true, {})\n+    return { left = '', right = '' }\n+  end\n+\n+  if not (type(cs) == 'string' and string.find(cs, '%%s') ~= nil) then\n+    error(vim.inspect(cs) .. \" is not a valid 'commentstring'.\")\n+  end\n+\n+  -- Structure of 'commentstring': <left part> <%s> <right part>\n+  local left, right = string.match(cs, '^(.-)%%s(.-)$')\n+  return { left = left, right = right }\n+end\n+\n+---@param parts vim._comment.Parts\n+---@return fun(line: string): boolean\n+local function make_comment_check(parts)\n+  local l_esc, r_esc = vim.pesc(parts.left), vim.pesc(parts.right)\n+\n+  -- Commented line has the following structure:\n+  -- <possible whitespace> <left> <anything> <right> <possible whitespace>\n+  local nonblank_regex = '^%s-' .. l_esc .. '.*' .. r_esc .. '%s-$'\n+\n+  -- Commented blank line can have any amoung of whitespace around parts\n+  local blank_regex = '^%s-' .. vim.trim(l_esc) .. '%s*' .. vim.trim(r_esc) .. '%s-$'\n+\n+  return function(line)\n+    return string.find(line, nonblank_regex) ~= nil or string.find(line, blank_regex) ~= nil\n+  end\n+end\n+\n+---@param lines string[]\n+---@param parts vim._comment.Parts\n+---@return string indent\n+---@return boolean is_commented\n+local function get_lines_info(lines, parts)\n+  local comment_check = make_comment_check(parts)\n+\n+  local is_commented = true\n+  local indent_width, indent_width_cur = math.huge, math.huge\n+  ---@type integer\n+  local indent\n+  ---@type integer\n+  local indent_cur",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552049794",
            "id": 1552049794,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5cgmaC",
            "original_commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "original_line": 100,
            "original_position": 100,
            "original_start_line": 99,
            "path": "runtime/lua/vim/_comment.lua",
            "position": null,
            "pull_request_review_id": 1980498316,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552049794/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-04-04T16:41:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552049794",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552050208"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552050208"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  local indent_width = math.huge\r\n```",
            "commit_id": "ef93981ae37486af5d9219636436fb2fe4ccaa69",
            "created_at": "2024-04-04T16:35:19Z",
            "diff_hunk": "@@ -0,0 +1,252 @@\n+---@nodoc\n+---@class vim._comment.Parts\n+---@field left string Left part of comment\n+---@field right string Right part of comment\n+\n+---@param ref_position integer[]\n+---@return string\n+local function get_commentstring(ref_position)\n+  local buf_cs = vim.bo.commentstring\n+\n+  local has_ts_parser, ts_parser = pcall(vim.treesitter.get_parser)\n+  if not has_ts_parser then\n+    return buf_cs\n+  end\n+\n+  -- Try to get 'commentstring' associated with local tree-sitter language.\n+  -- This is useful for injected languages (like markdown with code blocks).\n+  local row, col = ref_position[1] - 1, ref_position[2]\n+  local ref_range = { row, col, row, col + 1 }\n+\n+  -- - Get 'commentstring' from the deepest LanguageTree which both contains\n+  --   reference range and has valid 'commentstring' (meaning it has at least\n+  --   one associated 'filetype' with valid 'commentstring').\n+  --   In simple cases using `parser:language_for_range()` would be enough, but\n+  --   it fails for languages without valid 'commentstring' (like 'comment').\n+  local ts_cs, res_level = nil, 0\n+\n+  ---@param lang_tree vim.treesitter.LanguageTree\n+  local function traverse(lang_tree, level)\n+    if not lang_tree:contains(ref_range) then\n+      return\n+    end\n+\n+    local lang = lang_tree:lang()\n+    local filetypes = vim.treesitter.language.get_filetypes(lang)\n+    for _, ft in ipairs(filetypes) do\n+      local cur_cs = vim.filetype.get_option(ft, 'commentstring')\n+      if type(cur_cs) == 'string' and cur_cs ~= '' and level > res_level then\n+        ts_cs = cur_cs\n+      end\n+    end\n+\n+    for _, child_lang_tree in pairs(lang_tree:children()) do\n+      traverse(child_lang_tree, level + 1)\n+    end\n+  end\n+  traverse(ts_parser, 1)\n+\n+  return ts_cs or buf_cs\n+end\n+\n+---@param ref_position integer[]\n+---@return vim._comment.Parts\n+local function make_comment_parts(ref_position)\n+  local cs = get_commentstring(ref_position)\n+\n+  if cs == nil or cs == '' then\n+    vim.api.nvim_echo({ { \"Option 'commentstring' is empty.\", 'WarningMsg' } }, true, {})\n+    return { left = '', right = '' }\n+  end\n+\n+  if not (type(cs) == 'string' and string.find(cs, '%%s') ~= nil) then\n+    error(vim.inspect(cs) .. \" is not a valid 'commentstring'.\")\n+  end\n+\n+  -- Structure of 'commentstring': <left part> <%s> <right part>\n+  local left, right = string.match(cs, '^(.-)%%s(.-)$')\n+  return { left = left, right = right }\n+end\n+\n+---@param parts vim._comment.Parts\n+---@return fun(line: string): boolean\n+local function make_comment_check(parts)\n+  local l_esc, r_esc = vim.pesc(parts.left), vim.pesc(parts.right)\n+\n+  -- Commented line has the following structure:\n+  -- <possible whitespace> <left> <anything> <right> <possible whitespace>\n+  local nonblank_regex = '^%s-' .. l_esc .. '.*' .. r_esc .. '%s-$'\n+\n+  -- Commented blank line can have any amoung of whitespace around parts\n+  local blank_regex = '^%s-' .. vim.trim(l_esc) .. '%s*' .. vim.trim(r_esc) .. '%s-$'\n+\n+  return function(line)\n+    return string.find(line, nonblank_regex) ~= nil or string.find(line, blank_regex) ~= nil\n+  end\n+end\n+\n+---@param lines string[]\n+---@param parts vim._comment.Parts\n+---@return string indent\n+---@return boolean is_commented\n+local function get_lines_info(lines, parts)\n+  local comment_check = make_comment_check(parts)\n+\n+  local is_commented = true\n+  local indent_width, indent_width_cur = math.huge, math.huge",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552050208",
            "id": 1552050208,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5cgmgg",
            "original_commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "original_line": 96,
            "original_position": 96,
            "original_start_line": null,
            "path": "runtime/lua/vim/_comment.lua",
            "position": null,
            "pull_request_review_id": 1980498316,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552050208/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-04T16:41:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552050208",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552051487"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552051487"
                }
            },
            "author_association": "MEMBER",
            "body": "nit: most of the codebase generally uses `x:find(...)` as opposed to `string.find(x, ...)`",
            "commit_id": "ef93981ae37486af5d9219636436fb2fe4ccaa69",
            "created_at": "2024-04-04T16:36:21Z",
            "diff_hunk": "@@ -0,0 +1,252 @@\n+---@nodoc\n+---@class vim._comment.Parts\n+---@field left string Left part of comment\n+---@field right string Right part of comment\n+\n+---@param ref_position integer[]\n+---@return string\n+local function get_commentstring(ref_position)\n+  local buf_cs = vim.bo.commentstring\n+\n+  local has_ts_parser, ts_parser = pcall(vim.treesitter.get_parser)\n+  if not has_ts_parser then\n+    return buf_cs\n+  end\n+\n+  -- Try to get 'commentstring' associated with local tree-sitter language.\n+  -- This is useful for injected languages (like markdown with code blocks).\n+  local row, col = ref_position[1] - 1, ref_position[2]\n+  local ref_range = { row, col, row, col + 1 }\n+\n+  -- - Get 'commentstring' from the deepest LanguageTree which both contains\n+  --   reference range and has valid 'commentstring' (meaning it has at least\n+  --   one associated 'filetype' with valid 'commentstring').\n+  --   In simple cases using `parser:language_for_range()` would be enough, but\n+  --   it fails for languages without valid 'commentstring' (like 'comment').\n+  local ts_cs, res_level = nil, 0\n+\n+  ---@param lang_tree vim.treesitter.LanguageTree\n+  local function traverse(lang_tree, level)\n+    if not lang_tree:contains(ref_range) then\n+      return\n+    end\n+\n+    local lang = lang_tree:lang()\n+    local filetypes = vim.treesitter.language.get_filetypes(lang)\n+    for _, ft in ipairs(filetypes) do\n+      local cur_cs = vim.filetype.get_option(ft, 'commentstring')\n+      if type(cur_cs) == 'string' and cur_cs ~= '' and level > res_level then\n+        ts_cs = cur_cs\n+      end\n+    end\n+\n+    for _, child_lang_tree in pairs(lang_tree:children()) do\n+      traverse(child_lang_tree, level + 1)\n+    end\n+  end\n+  traverse(ts_parser, 1)\n+\n+  return ts_cs or buf_cs\n+end\n+\n+---@param ref_position integer[]\n+---@return vim._comment.Parts\n+local function make_comment_parts(ref_position)\n+  local cs = get_commentstring(ref_position)\n+\n+  if cs == nil or cs == '' then\n+    vim.api.nvim_echo({ { \"Option 'commentstring' is empty.\", 'WarningMsg' } }, true, {})\n+    return { left = '', right = '' }\n+  end\n+\n+  if not (type(cs) == 'string' and string.find(cs, '%%s') ~= nil) then\n+    error(vim.inspect(cs) .. \" is not a valid 'commentstring'.\")\n+  end\n+\n+  -- Structure of 'commentstring': <left part> <%s> <right part>\n+  local left, right = string.match(cs, '^(.-)%%s(.-)$')\n+  return { left = left, right = right }\n+end\n+\n+---@param parts vim._comment.Parts\n+---@return fun(line: string): boolean\n+local function make_comment_check(parts)\n+  local l_esc, r_esc = vim.pesc(parts.left), vim.pesc(parts.right)\n+\n+  -- Commented line has the following structure:\n+  -- <possible whitespace> <left> <anything> <right> <possible whitespace>\n+  local nonblank_regex = '^%s-' .. l_esc .. '.*' .. r_esc .. '%s-$'\n+\n+  -- Commented blank line can have any amoung of whitespace around parts\n+  local blank_regex = '^%s-' .. vim.trim(l_esc) .. '%s*' .. vim.trim(r_esc) .. '%s-$'\n+\n+  return function(line)\n+    return string.find(line, nonblank_regex) ~= nil or string.find(line, blank_regex) ~= nil\n+  end\n+end\n+\n+---@param lines string[]\n+---@param parts vim._comment.Parts\n+---@return string indent\n+---@return boolean is_commented\n+local function get_lines_info(lines, parts)\n+  local comment_check = make_comment_check(parts)\n+\n+  local is_commented = true\n+  local indent_width, indent_width_cur = math.huge, math.huge\n+  ---@type integer\n+  local indent\n+  ---@type integer\n+  local indent_cur\n+\n+  for _, l in ipairs(lines) do\n+    -- Update lines indent: minimum of all indents except blank lines\n+    ---@diagnostic disable-next-line:cast-local-type\n+    _, indent_width_cur, indent_cur = string.find(l, '^(%s*)')\n+    local is_blank = indent_width_cur == string.len(l)\n+\n+    -- NOTE: Copying actual indent instead of recreating it with `indent_width`\n+    -- allows to handle both tabs and spaces\n+    if indent_width_cur < indent_width and not is_blank then\n+      ---@diagnostic disable-next-line:cast-local-type\n+      indent_width, indent = indent_width_cur, indent_cur\n+    end\n+\n+    -- Update comment info: lines are commented if every line is commented\n+    if is_commented then\n+      is_commented = comment_check(l)\n+    end\n+  end\n+\n+  -- `indent` can still be `nil` in case all `lines` are empty\n+  return indent or '', is_commented\n+end\n+\n+---@param x string\n+---@return boolean is_blank\n+local function is_blank(x)\n+  return string.find(x, '^%s*$') ~= nil",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552051487",
            "id": 1552051487,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5cgm0f",
            "original_commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "original_line": 128,
            "original_position": 128,
            "original_start_line": null,
            "path": "runtime/lua/vim/_comment.lua",
            "position": null,
            "pull_request_review_id": 1980498316,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552051487/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-04T16:41:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552051487",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552054513"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552054513"
                }
            },
            "author_association": "MEMBER",
            "body": "Can this just go inside the returned closure?",
            "commit_id": "ef93981ae37486af5d9219636436fb2fe4ccaa69",
            "created_at": "2024-04-04T16:38:20Z",
            "diff_hunk": "@@ -0,0 +1,252 @@\n+---@nodoc\n+---@class vim._comment.Parts\n+---@field left string Left part of comment\n+---@field right string Right part of comment\n+\n+---@param ref_position integer[]\n+---@return string\n+local function get_commentstring(ref_position)\n+  local buf_cs = vim.bo.commentstring\n+\n+  local has_ts_parser, ts_parser = pcall(vim.treesitter.get_parser)\n+  if not has_ts_parser then\n+    return buf_cs\n+  end\n+\n+  -- Try to get 'commentstring' associated with local tree-sitter language.\n+  -- This is useful for injected languages (like markdown with code blocks).\n+  local row, col = ref_position[1] - 1, ref_position[2]\n+  local ref_range = { row, col, row, col + 1 }\n+\n+  -- - Get 'commentstring' from the deepest LanguageTree which both contains\n+  --   reference range and has valid 'commentstring' (meaning it has at least\n+  --   one associated 'filetype' with valid 'commentstring').\n+  --   In simple cases using `parser:language_for_range()` would be enough, but\n+  --   it fails for languages without valid 'commentstring' (like 'comment').\n+  local ts_cs, res_level = nil, 0\n+\n+  ---@param lang_tree vim.treesitter.LanguageTree\n+  local function traverse(lang_tree, level)\n+    if not lang_tree:contains(ref_range) then\n+      return\n+    end\n+\n+    local lang = lang_tree:lang()\n+    local filetypes = vim.treesitter.language.get_filetypes(lang)\n+    for _, ft in ipairs(filetypes) do\n+      local cur_cs = vim.filetype.get_option(ft, 'commentstring')\n+      if type(cur_cs) == 'string' and cur_cs ~= '' and level > res_level then\n+        ts_cs = cur_cs\n+      end\n+    end\n+\n+    for _, child_lang_tree in pairs(lang_tree:children()) do\n+      traverse(child_lang_tree, level + 1)\n+    end\n+  end\n+  traverse(ts_parser, 1)\n+\n+  return ts_cs or buf_cs\n+end\n+\n+---@param ref_position integer[]\n+---@return vim._comment.Parts\n+local function make_comment_parts(ref_position)\n+  local cs = get_commentstring(ref_position)\n+\n+  if cs == nil or cs == '' then\n+    vim.api.nvim_echo({ { \"Option 'commentstring' is empty.\", 'WarningMsg' } }, true, {})\n+    return { left = '', right = '' }\n+  end\n+\n+  if not (type(cs) == 'string' and string.find(cs, '%%s') ~= nil) then\n+    error(vim.inspect(cs) .. \" is not a valid 'commentstring'.\")\n+  end\n+\n+  -- Structure of 'commentstring': <left part> <%s> <right part>\n+  local left, right = string.match(cs, '^(.-)%%s(.-)$')\n+  return { left = left, right = right }\n+end\n+\n+---@param parts vim._comment.Parts\n+---@return fun(line: string): boolean\n+local function make_comment_check(parts)\n+  local l_esc, r_esc = vim.pesc(parts.left), vim.pesc(parts.right)\n+\n+  -- Commented line has the following structure:\n+  -- <possible whitespace> <left> <anything> <right> <possible whitespace>\n+  local nonblank_regex = '^%s-' .. l_esc .. '.*' .. r_esc .. '%s-$'\n+\n+  -- Commented blank line can have any amoung of whitespace around parts\n+  local blank_regex = '^%s-' .. vim.trim(l_esc) .. '%s*' .. vim.trim(r_esc) .. '%s-$'\n+\n+  return function(line)\n+    return string.find(line, nonblank_regex) ~= nil or string.find(line, blank_regex) ~= nil\n+  end\n+end\n+\n+---@param lines string[]\n+---@param parts vim._comment.Parts\n+---@return string indent\n+---@return boolean is_commented\n+local function get_lines_info(lines, parts)\n+  local comment_check = make_comment_check(parts)\n+\n+  local is_commented = true\n+  local indent_width, indent_width_cur = math.huge, math.huge\n+  ---@type integer\n+  local indent\n+  ---@type integer\n+  local indent_cur\n+\n+  for _, l in ipairs(lines) do\n+    -- Update lines indent: minimum of all indents except blank lines\n+    ---@diagnostic disable-next-line:cast-local-type\n+    _, indent_width_cur, indent_cur = string.find(l, '^(%s*)')\n+    local is_blank = indent_width_cur == string.len(l)\n+\n+    -- NOTE: Copying actual indent instead of recreating it with `indent_width`\n+    -- allows to handle both tabs and spaces\n+    if indent_width_cur < indent_width and not is_blank then\n+      ---@diagnostic disable-next-line:cast-local-type\n+      indent_width, indent = indent_width_cur, indent_cur\n+    end\n+\n+    -- Update comment info: lines are commented if every line is commented\n+    if is_commented then\n+      is_commented = comment_check(l)\n+    end\n+  end\n+\n+  -- `indent` can still be `nil` in case all `lines` are empty\n+  return indent or '', is_commented\n+end\n+\n+---@param x string\n+---@return boolean is_blank\n+local function is_blank(x)\n+  return string.find(x, '^%s*$') ~= nil\n+end\n+\n+---@param parts vim._comment.Parts\n+---@param indent string\n+---@return fun(line: string): string\n+local function make_comment_function(parts, indent)\n+  local prefix, nonindent_start, suffix = indent .. parts.left, string.len(indent) + 1, parts.right\n+  local blank_comment = indent .. vim.trim(parts.left) .. vim.trim(parts.right)",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552054513",
            "id": 1552054513,
            "line": 141,
            "node_id": "PRRC_kwDOAPphoM5cgnjx",
            "original_commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "original_line": 141,
            "original_position": 136,
            "original_start_line": null,
            "path": "runtime/lua/vim/_comment.lua",
            "position": 141,
            "pull_request_review_id": 1980498316,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552054513/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-04T16:41:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552054513",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552057291"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552057291"
                }
            },
            "author_association": "MEMBER",
            "body": "Can we use an exported module variable instead? e.g. `package.loaded['vim._comment']._from`?",
            "commit_id": "ef93981ae37486af5d9219636436fb2fe4ccaa69",
            "created_at": "2024-04-04T16:40:42Z",
            "diff_hunk": "@@ -0,0 +1,252 @@\n+---@nodoc\n+---@class vim._comment.Parts\n+---@field left string Left part of comment\n+---@field right string Right part of comment\n+\n+---@param ref_position integer[]\n+---@return string\n+local function get_commentstring(ref_position)\n+  local buf_cs = vim.bo.commentstring\n+\n+  local has_ts_parser, ts_parser = pcall(vim.treesitter.get_parser)\n+  if not has_ts_parser then\n+    return buf_cs\n+  end\n+\n+  -- Try to get 'commentstring' associated with local tree-sitter language.\n+  -- This is useful for injected languages (like markdown with code blocks).\n+  local row, col = ref_position[1] - 1, ref_position[2]\n+  local ref_range = { row, col, row, col + 1 }\n+\n+  -- - Get 'commentstring' from the deepest LanguageTree which both contains\n+  --   reference range and has valid 'commentstring' (meaning it has at least\n+  --   one associated 'filetype' with valid 'commentstring').\n+  --   In simple cases using `parser:language_for_range()` would be enough, but\n+  --   it fails for languages without valid 'commentstring' (like 'comment').\n+  local ts_cs, res_level = nil, 0\n+\n+  ---@param lang_tree vim.treesitter.LanguageTree\n+  local function traverse(lang_tree, level)\n+    if not lang_tree:contains(ref_range) then\n+      return\n+    end\n+\n+    local lang = lang_tree:lang()\n+    local filetypes = vim.treesitter.language.get_filetypes(lang)\n+    for _, ft in ipairs(filetypes) do\n+      local cur_cs = vim.filetype.get_option(ft, 'commentstring')\n+      if type(cur_cs) == 'string' and cur_cs ~= '' and level > res_level then\n+        ts_cs = cur_cs\n+      end\n+    end\n+\n+    for _, child_lang_tree in pairs(lang_tree:children()) do\n+      traverse(child_lang_tree, level + 1)\n+    end\n+  end\n+  traverse(ts_parser, 1)\n+\n+  return ts_cs or buf_cs\n+end\n+\n+---@param ref_position integer[]\n+---@return vim._comment.Parts\n+local function make_comment_parts(ref_position)\n+  local cs = get_commentstring(ref_position)\n+\n+  if cs == nil or cs == '' then\n+    vim.api.nvim_echo({ { \"Option 'commentstring' is empty.\", 'WarningMsg' } }, true, {})\n+    return { left = '', right = '' }\n+  end\n+\n+  if not (type(cs) == 'string' and string.find(cs, '%%s') ~= nil) then\n+    error(vim.inspect(cs) .. \" is not a valid 'commentstring'.\")\n+  end\n+\n+  -- Structure of 'commentstring': <left part> <%s> <right part>\n+  local left, right = string.match(cs, '^(.-)%%s(.-)$')\n+  return { left = left, right = right }\n+end\n+\n+---@param parts vim._comment.Parts\n+---@return fun(line: string): boolean\n+local function make_comment_check(parts)\n+  local l_esc, r_esc = vim.pesc(parts.left), vim.pesc(parts.right)\n+\n+  -- Commented line has the following structure:\n+  -- <possible whitespace> <left> <anything> <right> <possible whitespace>\n+  local nonblank_regex = '^%s-' .. l_esc .. '.*' .. r_esc .. '%s-$'\n+\n+  -- Commented blank line can have any amoung of whitespace around parts\n+  local blank_regex = '^%s-' .. vim.trim(l_esc) .. '%s*' .. vim.trim(r_esc) .. '%s-$'\n+\n+  return function(line)\n+    return string.find(line, nonblank_regex) ~= nil or string.find(line, blank_regex) ~= nil\n+  end\n+end\n+\n+---@param lines string[]\n+---@param parts vim._comment.Parts\n+---@return string indent\n+---@return boolean is_commented\n+local function get_lines_info(lines, parts)\n+  local comment_check = make_comment_check(parts)\n+\n+  local is_commented = true\n+  local indent_width, indent_width_cur = math.huge, math.huge\n+  ---@type integer\n+  local indent\n+  ---@type integer\n+  local indent_cur\n+\n+  for _, l in ipairs(lines) do\n+    -- Update lines indent: minimum of all indents except blank lines\n+    ---@diagnostic disable-next-line:cast-local-type\n+    _, indent_width_cur, indent_cur = string.find(l, '^(%s*)')\n+    local is_blank = indent_width_cur == string.len(l)\n+\n+    -- NOTE: Copying actual indent instead of recreating it with `indent_width`\n+    -- allows to handle both tabs and spaces\n+    if indent_width_cur < indent_width and not is_blank then\n+      ---@diagnostic disable-next-line:cast-local-type\n+      indent_width, indent = indent_width_cur, indent_cur\n+    end\n+\n+    -- Update comment info: lines are commented if every line is commented\n+    if is_commented then\n+      is_commented = comment_check(l)\n+    end\n+  end\n+\n+  -- `indent` can still be `nil` in case all `lines` are empty\n+  return indent or '', is_commented\n+end\n+\n+---@param x string\n+---@return boolean is_blank\n+local function is_blank(x)\n+  return string.find(x, '^%s*$') ~= nil\n+end\n+\n+---@param parts vim._comment.Parts\n+---@param indent string\n+---@return fun(line: string): string\n+local function make_comment_function(parts, indent)\n+  local prefix, nonindent_start, suffix = indent .. parts.left, string.len(indent) + 1, parts.right\n+  local blank_comment = indent .. vim.trim(parts.left) .. vim.trim(parts.right)\n+\n+  return function(line)\n+    if is_blank(line) then\n+      return blank_comment\n+    end\n+    return prefix .. string.sub(line, nonindent_start) .. suffix\n+  end\n+end\n+\n+---@param parts vim._comment.Parts\n+---@return fun(line: string): string\n+local function make_uncomment_function(parts)\n+  local l_esc, r_esc = vim.pesc(parts.left), vim.pesc(parts.right)\n+  local nonblank_regex = '^(%s*)' .. l_esc .. '(.*)' .. r_esc .. '(%s-)$'\n+  local blank_regex = '^(%s*)' .. vim.trim(l_esc) .. '(%s*)' .. vim.trim(r_esc) .. '(%s-)$'\n+\n+  return function(line)\n+    -- Try both non-blank and blank regexes\n+    local indent, new_line, trail = string.match(line, nonblank_regex)\n+    if new_line == nil then\n+      indent, new_line, trail = string.match(line, blank_regex)\n+    end\n+\n+    -- Return original if line is not commented\n+    if new_line == nil then\n+      return line\n+    end\n+\n+    -- Prevent trailing whitespace\n+    if is_blank(new_line) then\n+      indent, trail = '', ''\n+    end\n+\n+    return indent .. new_line .. trail\n+  end\n+end\n+\n+---@param line_start integer\n+---@param line_end integer\n+---@param ref_position? integer[]\n+local function toggle_lines(line_start, line_end, ref_position)\n+  ref_position = ref_position or { line_start, 0 }\n+  local parts = make_comment_parts(ref_position)\n+  local lines = vim.api.nvim_buf_get_lines(0, line_start - 1, line_end, false)\n+  local indent, is_comment = get_lines_info(lines, parts)\n+\n+  local f = is_comment and make_uncomment_function(parts) or make_comment_function(parts, indent)\n+\n+  -- Direct `nvim_buf_set_lines()` essentially removes both regular and\n+  -- extended marks  (squashes to empty range at either side of the region)\n+  -- inside region. Use 'lockmarks' to preserve regular marks.\n+  -- Preserving extmarks is not a universally good thing to do:\n+  -- - Good for non-highlighting in text area extmarks (like showing signs).\n+  -- - Debatable for highlighting in text area (like LSP semantic tokens).\n+  --   Mostly because it causes flicker as highlighting is preserved during\n+  --   comment toggling.\n+  _G._from, _G._to, _G._lines = line_start - 1, line_end, vim.tbl_map(f, lines)",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552057291",
            "id": 1552057291,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5cgoPL",
            "original_commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "original_line": 193,
            "original_position": 193,
            "original_start_line": null,
            "path": "runtime/lua/vim/_comment.lua",
            "position": null,
            "pull_request_review_id": 1980498316,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552057291/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-04T16:41:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552057291",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552064153"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552064153"
                }
            },
            "author_association": "MEMBER",
            "body": "This seems to boil down to whether `vim.api.nvim_get_option_value('commentstring', { filetype = ft })` always returns a string. I *think* it is safe to assume, but not sure. I'll remove this check.",
            "commit_id": "ef93981ae37486af5d9219636436fb2fe4ccaa69",
            "created_at": "2024-04-04T16:46:01Z",
            "diff_hunk": "@@ -0,0 +1,252 @@\n+---@nodoc\n+---@class vim._comment.Parts\n+---@field left string Left part of comment\n+---@field right string Right part of comment\n+\n+---@param ref_position integer[]\n+---@return string\n+local function get_commentstring(ref_position)\n+  local buf_cs = vim.bo.commentstring\n+\n+  local has_ts_parser, ts_parser = pcall(vim.treesitter.get_parser)\n+  if not has_ts_parser then\n+    return buf_cs\n+  end\n+\n+  -- Try to get 'commentstring' associated with local tree-sitter language.\n+  -- This is useful for injected languages (like markdown with code blocks).\n+  local row, col = ref_position[1] - 1, ref_position[2]\n+  local ref_range = { row, col, row, col + 1 }\n+\n+  -- - Get 'commentstring' from the deepest LanguageTree which both contains\n+  --   reference range and has valid 'commentstring' (meaning it has at least\n+  --   one associated 'filetype' with valid 'commentstring').\n+  --   In simple cases using `parser:language_for_range()` would be enough, but\n+  --   it fails for languages without valid 'commentstring' (like 'comment').\n+  local ts_cs, res_level = nil, 0\n+\n+  ---@param lang_tree vim.treesitter.LanguageTree\n+  local function traverse(lang_tree, level)\n+    if not lang_tree:contains(ref_range) then\n+      return\n+    end\n+\n+    local lang = lang_tree:lang()\n+    local filetypes = vim.treesitter.language.get_filetypes(lang)\n+    for _, ft in ipairs(filetypes) do\n+      local cur_cs = vim.filetype.get_option(ft, 'commentstring')\n+      if type(cur_cs) == 'string' and cur_cs ~= '' and level > res_level then",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552064153",
            "id": 1552064153,
            "in_reply_to_id": 1552043879,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5cgp6Z",
            "original_commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "original_line": 38,
            "original_position": 38,
            "original_start_line": null,
            "path": "runtime/lua/vim/_comment.lua",
            "position": null,
            "pull_request_review_id": 1980550139,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552064153/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-04T16:46:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552064153",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552067254"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552067254"
                }
            },
            "author_association": "MEMBER",
            "body": "Sure. Just a bit more hackery needed. As those are guaranteed to be removed later, I thought there is no harm in doing this.",
            "commit_id": "ef93981ae37486af5d9219636436fb2fe4ccaa69",
            "created_at": "2024-04-04T16:48:48Z",
            "diff_hunk": "@@ -0,0 +1,252 @@\n+---@nodoc\n+---@class vim._comment.Parts\n+---@field left string Left part of comment\n+---@field right string Right part of comment\n+\n+---@param ref_position integer[]\n+---@return string\n+local function get_commentstring(ref_position)\n+  local buf_cs = vim.bo.commentstring\n+\n+  local has_ts_parser, ts_parser = pcall(vim.treesitter.get_parser)\n+  if not has_ts_parser then\n+    return buf_cs\n+  end\n+\n+  -- Try to get 'commentstring' associated with local tree-sitter language.\n+  -- This is useful for injected languages (like markdown with code blocks).\n+  local row, col = ref_position[1] - 1, ref_position[2]\n+  local ref_range = { row, col, row, col + 1 }\n+\n+  -- - Get 'commentstring' from the deepest LanguageTree which both contains\n+  --   reference range and has valid 'commentstring' (meaning it has at least\n+  --   one associated 'filetype' with valid 'commentstring').\n+  --   In simple cases using `parser:language_for_range()` would be enough, but\n+  --   it fails for languages without valid 'commentstring' (like 'comment').\n+  local ts_cs, res_level = nil, 0\n+\n+  ---@param lang_tree vim.treesitter.LanguageTree\n+  local function traverse(lang_tree, level)\n+    if not lang_tree:contains(ref_range) then\n+      return\n+    end\n+\n+    local lang = lang_tree:lang()\n+    local filetypes = vim.treesitter.language.get_filetypes(lang)\n+    for _, ft in ipairs(filetypes) do\n+      local cur_cs = vim.filetype.get_option(ft, 'commentstring')\n+      if type(cur_cs) == 'string' and cur_cs ~= '' and level > res_level then\n+        ts_cs = cur_cs\n+      end\n+    end\n+\n+    for _, child_lang_tree in pairs(lang_tree:children()) do\n+      traverse(child_lang_tree, level + 1)\n+    end\n+  end\n+  traverse(ts_parser, 1)\n+\n+  return ts_cs or buf_cs\n+end\n+\n+---@param ref_position integer[]\n+---@return vim._comment.Parts\n+local function make_comment_parts(ref_position)\n+  local cs = get_commentstring(ref_position)\n+\n+  if cs == nil or cs == '' then\n+    vim.api.nvim_echo({ { \"Option 'commentstring' is empty.\", 'WarningMsg' } }, true, {})\n+    return { left = '', right = '' }\n+  end\n+\n+  if not (type(cs) == 'string' and string.find(cs, '%%s') ~= nil) then\n+    error(vim.inspect(cs) .. \" is not a valid 'commentstring'.\")\n+  end\n+\n+  -- Structure of 'commentstring': <left part> <%s> <right part>\n+  local left, right = string.match(cs, '^(.-)%%s(.-)$')\n+  return { left = left, right = right }\n+end\n+\n+---@param parts vim._comment.Parts\n+---@return fun(line: string): boolean\n+local function make_comment_check(parts)\n+  local l_esc, r_esc = vim.pesc(parts.left), vim.pesc(parts.right)\n+\n+  -- Commented line has the following structure:\n+  -- <possible whitespace> <left> <anything> <right> <possible whitespace>\n+  local nonblank_regex = '^%s-' .. l_esc .. '.*' .. r_esc .. '%s-$'\n+\n+  -- Commented blank line can have any amoung of whitespace around parts\n+  local blank_regex = '^%s-' .. vim.trim(l_esc) .. '%s*' .. vim.trim(r_esc) .. '%s-$'\n+\n+  return function(line)\n+    return string.find(line, nonblank_regex) ~= nil or string.find(line, blank_regex) ~= nil\n+  end\n+end\n+\n+---@param lines string[]\n+---@param parts vim._comment.Parts\n+---@return string indent\n+---@return boolean is_commented\n+local function get_lines_info(lines, parts)\n+  local comment_check = make_comment_check(parts)\n+\n+  local is_commented = true\n+  local indent_width, indent_width_cur = math.huge, math.huge\n+  ---@type integer\n+  local indent\n+  ---@type integer\n+  local indent_cur\n+\n+  for _, l in ipairs(lines) do\n+    -- Update lines indent: minimum of all indents except blank lines\n+    ---@diagnostic disable-next-line:cast-local-type\n+    _, indent_width_cur, indent_cur = string.find(l, '^(%s*)')\n+    local is_blank = indent_width_cur == string.len(l)\n+\n+    -- NOTE: Copying actual indent instead of recreating it with `indent_width`\n+    -- allows to handle both tabs and spaces\n+    if indent_width_cur < indent_width and not is_blank then\n+      ---@diagnostic disable-next-line:cast-local-type\n+      indent_width, indent = indent_width_cur, indent_cur\n+    end\n+\n+    -- Update comment info: lines are commented if every line is commented\n+    if is_commented then\n+      is_commented = comment_check(l)\n+    end\n+  end\n+\n+  -- `indent` can still be `nil` in case all `lines` are empty\n+  return indent or '', is_commented\n+end\n+\n+---@param x string\n+---@return boolean is_blank\n+local function is_blank(x)\n+  return string.find(x, '^%s*$') ~= nil\n+end\n+\n+---@param parts vim._comment.Parts\n+---@param indent string\n+---@return fun(line: string): string\n+local function make_comment_function(parts, indent)\n+  local prefix, nonindent_start, suffix = indent .. parts.left, string.len(indent) + 1, parts.right\n+  local blank_comment = indent .. vim.trim(parts.left) .. vim.trim(parts.right)\n+\n+  return function(line)\n+    if is_blank(line) then\n+      return blank_comment\n+    end\n+    return prefix .. string.sub(line, nonindent_start) .. suffix\n+  end\n+end\n+\n+---@param parts vim._comment.Parts\n+---@return fun(line: string): string\n+local function make_uncomment_function(parts)\n+  local l_esc, r_esc = vim.pesc(parts.left), vim.pesc(parts.right)\n+  local nonblank_regex = '^(%s*)' .. l_esc .. '(.*)' .. r_esc .. '(%s-)$'\n+  local blank_regex = '^(%s*)' .. vim.trim(l_esc) .. '(%s*)' .. vim.trim(r_esc) .. '(%s-)$'\n+\n+  return function(line)\n+    -- Try both non-blank and blank regexes\n+    local indent, new_line, trail = string.match(line, nonblank_regex)\n+    if new_line == nil then\n+      indent, new_line, trail = string.match(line, blank_regex)\n+    end\n+\n+    -- Return original if line is not commented\n+    if new_line == nil then\n+      return line\n+    end\n+\n+    -- Prevent trailing whitespace\n+    if is_blank(new_line) then\n+      indent, trail = '', ''\n+    end\n+\n+    return indent .. new_line .. trail\n+  end\n+end\n+\n+---@param line_start integer\n+---@param line_end integer\n+---@param ref_position? integer[]\n+local function toggle_lines(line_start, line_end, ref_position)\n+  ref_position = ref_position or { line_start, 0 }\n+  local parts = make_comment_parts(ref_position)\n+  local lines = vim.api.nvim_buf_get_lines(0, line_start - 1, line_end, false)\n+  local indent, is_comment = get_lines_info(lines, parts)\n+\n+  local f = is_comment and make_uncomment_function(parts) or make_comment_function(parts, indent)\n+\n+  -- Direct `nvim_buf_set_lines()` essentially removes both regular and\n+  -- extended marks  (squashes to empty range at either side of the region)\n+  -- inside region. Use 'lockmarks' to preserve regular marks.\n+  -- Preserving extmarks is not a universally good thing to do:\n+  -- - Good for non-highlighting in text area extmarks (like showing signs).\n+  -- - Debatable for highlighting in text area (like LSP semantic tokens).\n+  --   Mostly because it causes flicker as highlighting is preserved during\n+  --   comment toggling.\n+  _G._from, _G._to, _G._lines = line_start - 1, line_end, vim.tbl_map(f, lines)",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552067254",
            "id": 1552067254,
            "in_reply_to_id": 1552057291,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5cgqq2",
            "original_commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "original_line": 193,
            "original_position": 193,
            "original_start_line": null,
            "path": "runtime/lua/vim/_comment.lua",
            "position": null,
            "pull_request_review_id": 1980559120,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552067254/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-04T16:48:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552067254",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552070568"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552070568"
                }
            },
            "author_association": "MEMBER",
            "body": "Got it.",
            "commit_id": "ef93981ae37486af5d9219636436fb2fe4ccaa69",
            "created_at": "2024-04-04T16:51:07Z",
            "diff_hunk": "@@ -0,0 +1,252 @@\n+---@nodoc\n+---@class vim._comment.Parts\n+---@field left string Left part of comment\n+---@field right string Right part of comment\n+\n+---@param ref_position integer[]\n+---@return string\n+local function get_commentstring(ref_position)\n+  local buf_cs = vim.bo.commentstring\n+\n+  local has_ts_parser, ts_parser = pcall(vim.treesitter.get_parser)\n+  if not has_ts_parser then\n+    return buf_cs\n+  end\n+\n+  -- Try to get 'commentstring' associated with local tree-sitter language.\n+  -- This is useful for injected languages (like markdown with code blocks).\n+  local row, col = ref_position[1] - 1, ref_position[2]\n+  local ref_range = { row, col, row, col + 1 }\n+\n+  -- - Get 'commentstring' from the deepest LanguageTree which both contains\n+  --   reference range and has valid 'commentstring' (meaning it has at least\n+  --   one associated 'filetype' with valid 'commentstring').\n+  --   In simple cases using `parser:language_for_range()` would be enough, but\n+  --   it fails for languages without valid 'commentstring' (like 'comment').\n+  local ts_cs, res_level = nil, 0\n+\n+  ---@param lang_tree vim.treesitter.LanguageTree\n+  local function traverse(lang_tree, level)\n+    if not lang_tree:contains(ref_range) then\n+      return\n+    end\n+\n+    local lang = lang_tree:lang()\n+    local filetypes = vim.treesitter.language.get_filetypes(lang)\n+    for _, ft in ipairs(filetypes) do\n+      local cur_cs = vim.filetype.get_option(ft, 'commentstring')\n+      if type(cur_cs) == 'string' and cur_cs ~= '' and level > res_level then\n+        ts_cs = cur_cs\n+      end\n+    end\n+\n+    for _, child_lang_tree in pairs(lang_tree:children()) do\n+      traverse(child_lang_tree, level + 1)\n+    end\n+  end\n+  traverse(ts_parser, 1)\n+\n+  return ts_cs or buf_cs\n+end\n+\n+---@param ref_position integer[]\n+---@return vim._comment.Parts\n+local function make_comment_parts(ref_position)\n+  local cs = get_commentstring(ref_position)\n+\n+  if cs == nil or cs == '' then\n+    vim.api.nvim_echo({ { \"Option 'commentstring' is empty.\", 'WarningMsg' } }, true, {})\n+    return { left = '', right = '' }\n+  end\n+\n+  if not (type(cs) == 'string' and string.find(cs, '%%s') ~= nil) then\n+    error(vim.inspect(cs) .. \" is not a valid 'commentstring'.\")\n+  end\n+\n+  -- Structure of 'commentstring': <left part> <%s> <right part>\n+  local left, right = string.match(cs, '^(.-)%%s(.-)$')\n+  return { left = left, right = right }\n+end\n+\n+---@param parts vim._comment.Parts\n+---@return fun(line: string): boolean\n+local function make_comment_check(parts)\n+  local l_esc, r_esc = vim.pesc(parts.left), vim.pesc(parts.right)\n+\n+  -- Commented line has the following structure:\n+  -- <possible whitespace> <left> <anything> <right> <possible whitespace>\n+  local nonblank_regex = '^%s-' .. l_esc .. '.*' .. r_esc .. '%s-$'\n+\n+  -- Commented blank line can have any amoung of whitespace around parts\n+  local blank_regex = '^%s-' .. vim.trim(l_esc) .. '%s*' .. vim.trim(r_esc) .. '%s-$'\n+\n+  return function(line)\n+    return string.find(line, nonblank_regex) ~= nil or string.find(line, blank_regex) ~= nil\n+  end\n+end\n+\n+---@param lines string[]\n+---@param parts vim._comment.Parts\n+---@return string indent\n+---@return boolean is_commented\n+local function get_lines_info(lines, parts)\n+  local comment_check = make_comment_check(parts)\n+\n+  local is_commented = true\n+  local indent_width, indent_width_cur = math.huge, math.huge\n+  ---@type integer\n+  local indent\n+  ---@type integer\n+  local indent_cur\n+\n+  for _, l in ipairs(lines) do\n+    -- Update lines indent: minimum of all indents except blank lines\n+    ---@diagnostic disable-next-line:cast-local-type\n+    _, indent_width_cur, indent_cur = string.find(l, '^(%s*)')\n+    local is_blank = indent_width_cur == string.len(l)\n+\n+    -- NOTE: Copying actual indent instead of recreating it with `indent_width`\n+    -- allows to handle both tabs and spaces\n+    if indent_width_cur < indent_width and not is_blank then\n+      ---@diagnostic disable-next-line:cast-local-type\n+      indent_width, indent = indent_width_cur, indent_cur\n+    end\n+\n+    -- Update comment info: lines are commented if every line is commented\n+    if is_commented then\n+      is_commented = comment_check(l)\n+    end\n+  end\n+\n+  -- `indent` can still be `nil` in case all `lines` are empty\n+  return indent or '', is_commented\n+end\n+\n+---@param x string\n+---@return boolean is_blank\n+local function is_blank(x)\n+  return string.find(x, '^%s*$') ~= nil",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552070568",
            "id": 1552070568,
            "in_reply_to_id": 1552051487,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5cgreo",
            "original_commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "original_line": 128,
            "original_position": 128,
            "original_start_line": null,
            "path": "runtime/lua/vim/_comment.lua",
            "position": null,
            "pull_request_review_id": 1980567149,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552070568/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-04T16:51:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552070568",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552075797"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552075797"
                }
            },
            "author_association": "MEMBER",
            "body": "One of the points to returning closure is so that those values are not evaluated on every call to comment or (later) uncomment function. I think having them outside is better here.",
            "commit_id": "ef93981ae37486af5d9219636436fb2fe4ccaa69",
            "created_at": "2024-04-04T16:52:58Z",
            "diff_hunk": "@@ -0,0 +1,252 @@\n+---@nodoc\n+---@class vim._comment.Parts\n+---@field left string Left part of comment\n+---@field right string Right part of comment\n+\n+---@param ref_position integer[]\n+---@return string\n+local function get_commentstring(ref_position)\n+  local buf_cs = vim.bo.commentstring\n+\n+  local has_ts_parser, ts_parser = pcall(vim.treesitter.get_parser)\n+  if not has_ts_parser then\n+    return buf_cs\n+  end\n+\n+  -- Try to get 'commentstring' associated with local tree-sitter language.\n+  -- This is useful for injected languages (like markdown with code blocks).\n+  local row, col = ref_position[1] - 1, ref_position[2]\n+  local ref_range = { row, col, row, col + 1 }\n+\n+  -- - Get 'commentstring' from the deepest LanguageTree which both contains\n+  --   reference range and has valid 'commentstring' (meaning it has at least\n+  --   one associated 'filetype' with valid 'commentstring').\n+  --   In simple cases using `parser:language_for_range()` would be enough, but\n+  --   it fails for languages without valid 'commentstring' (like 'comment').\n+  local ts_cs, res_level = nil, 0\n+\n+  ---@param lang_tree vim.treesitter.LanguageTree\n+  local function traverse(lang_tree, level)\n+    if not lang_tree:contains(ref_range) then\n+      return\n+    end\n+\n+    local lang = lang_tree:lang()\n+    local filetypes = vim.treesitter.language.get_filetypes(lang)\n+    for _, ft in ipairs(filetypes) do\n+      local cur_cs = vim.filetype.get_option(ft, 'commentstring')\n+      if type(cur_cs) == 'string' and cur_cs ~= '' and level > res_level then\n+        ts_cs = cur_cs\n+      end\n+    end\n+\n+    for _, child_lang_tree in pairs(lang_tree:children()) do\n+      traverse(child_lang_tree, level + 1)\n+    end\n+  end\n+  traverse(ts_parser, 1)\n+\n+  return ts_cs or buf_cs\n+end\n+\n+---@param ref_position integer[]\n+---@return vim._comment.Parts\n+local function make_comment_parts(ref_position)\n+  local cs = get_commentstring(ref_position)\n+\n+  if cs == nil or cs == '' then\n+    vim.api.nvim_echo({ { \"Option 'commentstring' is empty.\", 'WarningMsg' } }, true, {})\n+    return { left = '', right = '' }\n+  end\n+\n+  if not (type(cs) == 'string' and string.find(cs, '%%s') ~= nil) then\n+    error(vim.inspect(cs) .. \" is not a valid 'commentstring'.\")\n+  end\n+\n+  -- Structure of 'commentstring': <left part> <%s> <right part>\n+  local left, right = string.match(cs, '^(.-)%%s(.-)$')\n+  return { left = left, right = right }\n+end\n+\n+---@param parts vim._comment.Parts\n+---@return fun(line: string): boolean\n+local function make_comment_check(parts)\n+  local l_esc, r_esc = vim.pesc(parts.left), vim.pesc(parts.right)\n+\n+  -- Commented line has the following structure:\n+  -- <possible whitespace> <left> <anything> <right> <possible whitespace>\n+  local nonblank_regex = '^%s-' .. l_esc .. '.*' .. r_esc .. '%s-$'\n+\n+  -- Commented blank line can have any amoung of whitespace around parts\n+  local blank_regex = '^%s-' .. vim.trim(l_esc) .. '%s*' .. vim.trim(r_esc) .. '%s-$'\n+\n+  return function(line)\n+    return string.find(line, nonblank_regex) ~= nil or string.find(line, blank_regex) ~= nil\n+  end\n+end\n+\n+---@param lines string[]\n+---@param parts vim._comment.Parts\n+---@return string indent\n+---@return boolean is_commented\n+local function get_lines_info(lines, parts)\n+  local comment_check = make_comment_check(parts)\n+\n+  local is_commented = true\n+  local indent_width, indent_width_cur = math.huge, math.huge\n+  ---@type integer\n+  local indent\n+  ---@type integer\n+  local indent_cur\n+\n+  for _, l in ipairs(lines) do\n+    -- Update lines indent: minimum of all indents except blank lines\n+    ---@diagnostic disable-next-line:cast-local-type\n+    _, indent_width_cur, indent_cur = string.find(l, '^(%s*)')\n+    local is_blank = indent_width_cur == string.len(l)\n+\n+    -- NOTE: Copying actual indent instead of recreating it with `indent_width`\n+    -- allows to handle both tabs and spaces\n+    if indent_width_cur < indent_width and not is_blank then\n+      ---@diagnostic disable-next-line:cast-local-type\n+      indent_width, indent = indent_width_cur, indent_cur\n+    end\n+\n+    -- Update comment info: lines are commented if every line is commented\n+    if is_commented then\n+      is_commented = comment_check(l)\n+    end\n+  end\n+\n+  -- `indent` can still be `nil` in case all `lines` are empty\n+  return indent or '', is_commented\n+end\n+\n+---@param x string\n+---@return boolean is_blank\n+local function is_blank(x)\n+  return string.find(x, '^%s*$') ~= nil\n+end\n+\n+---@param parts vim._comment.Parts\n+---@param indent string\n+---@return fun(line: string): string\n+local function make_comment_function(parts, indent)\n+  local prefix, nonindent_start, suffix = indent .. parts.left, string.len(indent) + 1, parts.right\n+  local blank_comment = indent .. vim.trim(parts.left) .. vim.trim(parts.right)",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552075797",
            "id": 1552075797,
            "in_reply_to_id": 1552054513,
            "line": 141,
            "node_id": "PRRC_kwDOAPphoM5cgswV",
            "original_commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "original_line": 141,
            "original_position": 136,
            "original_start_line": null,
            "path": "runtime/lua/vim/_comment.lua",
            "position": 141,
            "pull_request_review_id": 1980575739,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552075797/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-04T16:52:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552075797",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552078266"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552078266"
                }
            },
            "author_association": "MEMBER",
            "body": "shoulds this be in `test/functional/plugin/` like our other tests for builtin plugins?",
            "commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "created_at": "2024-04-04T16:53:51Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552078266",
            "id": 1552078266,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM5cgtW6",
            "original_commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "test/functional/lua/comment_spec.lua",
            "position": 1,
            "pull_request_review_id": 1980580121,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552078266/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2024-04-04T16:53:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552078266",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552081483"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552081483"
                }
            },
            "author_association": "MEMBER",
            "body": "I went the route of `vim.fs`. Can move to 'plugin', but this is not *entirely* a bundled plugin. So my guess is that 'test/functional/lua/' is a better fit here.",
            "commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "created_at": "2024-04-04T16:55:44Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552081483",
            "id": 1552081483,
            "in_reply_to_id": 1552078266,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM5cguJL",
            "original_commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "test/functional/lua/comment_spec.lua",
            "position": 1,
            "pull_request_review_id": 1980587521,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552081483/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2024-04-04T16:55:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552081483",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552083225"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552083225"
                }
            },
            "author_association": "MEMBER",
            "body": "docstring could use a brief explanation of what this does. also for `make_comment_function`.",
            "commit_id": "ef93981ae37486af5d9219636436fb2fe4ccaa69",
            "created_at": "2024-04-04T16:57:14Z",
            "diff_hunk": "@@ -0,0 +1,252 @@\n+---@nodoc\n+---@class vim._comment.Parts\n+---@field left string Left part of comment\n+---@field right string Right part of comment\n+\n+---@param ref_position integer[]\n+---@return string\n+local function get_commentstring(ref_position)\n+  local buf_cs = vim.bo.commentstring\n+\n+  local has_ts_parser, ts_parser = pcall(vim.treesitter.get_parser)\n+  if not has_ts_parser then\n+    return buf_cs\n+  end\n+\n+  -- Try to get 'commentstring' associated with local tree-sitter language.\n+  -- This is useful for injected languages (like markdown with code blocks).\n+  local row, col = ref_position[1] - 1, ref_position[2]\n+  local ref_range = { row, col, row, col + 1 }\n+\n+  -- - Get 'commentstring' from the deepest LanguageTree which both contains\n+  --   reference range and has valid 'commentstring' (meaning it has at least\n+  --   one associated 'filetype' with valid 'commentstring').\n+  --   In simple cases using `parser:language_for_range()` would be enough, but\n+  --   it fails for languages without valid 'commentstring' (like 'comment').\n+  local ts_cs, res_level = nil, 0\n+\n+  ---@param lang_tree vim.treesitter.LanguageTree\n+  local function traverse(lang_tree, level)\n+    if not lang_tree:contains(ref_range) then\n+      return\n+    end\n+\n+    local lang = lang_tree:lang()\n+    local filetypes = vim.treesitter.language.get_filetypes(lang)\n+    for _, ft in ipairs(filetypes) do\n+      local cur_cs = vim.filetype.get_option(ft, 'commentstring')\n+      if type(cur_cs) == 'string' and cur_cs ~= '' and level > res_level then\n+        ts_cs = cur_cs\n+      end\n+    end\n+\n+    for _, child_lang_tree in pairs(lang_tree:children()) do\n+      traverse(child_lang_tree, level + 1)\n+    end\n+  end\n+  traverse(ts_parser, 1)\n+\n+  return ts_cs or buf_cs\n+end\n+\n+---@param ref_position integer[]\n+---@return vim._comment.Parts\n+local function make_comment_parts(ref_position)\n+  local cs = get_commentstring(ref_position)\n+\n+  if cs == nil or cs == '' then\n+    vim.api.nvim_echo({ { \"Option 'commentstring' is empty.\", 'WarningMsg' } }, true, {})\n+    return { left = '', right = '' }\n+  end\n+\n+  if not (type(cs) == 'string' and string.find(cs, '%%s') ~= nil) then\n+    error(vim.inspect(cs) .. \" is not a valid 'commentstring'.\")\n+  end\n+\n+  -- Structure of 'commentstring': <left part> <%s> <right part>\n+  local left, right = string.match(cs, '^(.-)%%s(.-)$')\n+  return { left = left, right = right }\n+end\n+\n+---@param parts vim._comment.Parts\n+---@return fun(line: string): boolean\n+local function make_comment_check(parts)\n+  local l_esc, r_esc = vim.pesc(parts.left), vim.pesc(parts.right)\n+\n+  -- Commented line has the following structure:\n+  -- <possible whitespace> <left> <anything> <right> <possible whitespace>\n+  local nonblank_regex = '^%s-' .. l_esc .. '.*' .. r_esc .. '%s-$'\n+\n+  -- Commented blank line can have any amoung of whitespace around parts\n+  local blank_regex = '^%s-' .. vim.trim(l_esc) .. '%s*' .. vim.trim(r_esc) .. '%s-$'\n+\n+  return function(line)\n+    return string.find(line, nonblank_regex) ~= nil or string.find(line, blank_regex) ~= nil\n+  end\n+end\n+\n+---@param lines string[]\n+---@param parts vim._comment.Parts\n+---@return string indent\n+---@return boolean is_commented\n+local function get_lines_info(lines, parts)\n+  local comment_check = make_comment_check(parts)\n+\n+  local is_commented = true\n+  local indent_width, indent_width_cur = math.huge, math.huge\n+  ---@type integer\n+  local indent\n+  ---@type integer\n+  local indent_cur\n+\n+  for _, l in ipairs(lines) do\n+    -- Update lines indent: minimum of all indents except blank lines\n+    ---@diagnostic disable-next-line:cast-local-type\n+    _, indent_width_cur, indent_cur = string.find(l, '^(%s*)')\n+    local is_blank = indent_width_cur == string.len(l)\n+\n+    -- NOTE: Copying actual indent instead of recreating it with `indent_width`\n+    -- allows to handle both tabs and spaces\n+    if indent_width_cur < indent_width and not is_blank then\n+      ---@diagnostic disable-next-line:cast-local-type\n+      indent_width, indent = indent_width_cur, indent_cur\n+    end\n+\n+    -- Update comment info: lines are commented if every line is commented\n+    if is_commented then\n+      is_commented = comment_check(l)\n+    end\n+  end\n+\n+  -- `indent` can still be `nil` in case all `lines` are empty\n+  return indent or '', is_commented\n+end\n+\n+---@param x string\n+---@return boolean is_blank\n+local function is_blank(x)\n+  return string.find(x, '^%s*$') ~= nil\n+end\n+\n+---@param parts vim._comment.Parts\n+---@param indent string\n+---@return fun(line: string): string\n+local function make_comment_function(parts, indent)\n+  local prefix, nonindent_start, suffix = indent .. parts.left, string.len(indent) + 1, parts.right\n+  local blank_comment = indent .. vim.trim(parts.left) .. vim.trim(parts.right)\n+\n+  return function(line)\n+    if is_blank(line) then\n+      return blank_comment\n+    end\n+    return prefix .. string.sub(line, nonindent_start) .. suffix\n+  end\n+end\n+\n+---@param parts vim._comment.Parts\n+---@return fun(line: string): string\n+local function make_uncomment_function(parts)",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552083225",
            "id": 1552083225,
            "line": 154,
            "node_id": "PRRC_kwDOAPphoM5cgukZ",
            "original_commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "original_line": 154,
            "original_position": 148,
            "original_start_line": null,
            "path": "runtime/lua/vim/_comment.lua",
            "position": 154,
            "pull_request_review_id": 1980592289,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552083225/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-04T16:57:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552083225",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552087677"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552087677"
                }
            },
            "author_association": "MEMBER",
            "body": "Traditionally, builtin plugin help files were named `pi_foo.txt` (see e.g. `pi_health.txt`). No strong opinion on whether this convention is still useful.",
            "commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "created_at": "2024-04-04T17:00:00Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552087677",
            "id": 1552087677,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM5cgvp9",
            "original_commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/doc/commenting.txt",
            "position": 1,
            "pull_request_review_id": 1980603725,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552087677/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2024-04-04T17:00:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552087677",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552088536"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552088536"
                }
            },
            "author_association": "MEMBER",
            "body": "Ew, pls no. What even does `pi` stand for?",
            "commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "created_at": "2024-04-04T17:00:25Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552088536",
            "id": 1552088536,
            "in_reply_to_id": 1552087677,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM5cgv3Y",
            "original_commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/doc/commenting.txt",
            "position": 1,
            "pull_request_review_id": 1980605754,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552088536/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2024-04-04T17:00:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552088536",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552091579"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552091579"
                }
            },
            "author_association": "MEMBER",
            "body": "My other approach was to put it directly at the ['various.txt'](https://github.com/neovim/neovim/blob/master/runtime/doc/various.txt) at the end as separate section.\r\n\r\nI am completely open as to where to put this.",
            "commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "created_at": "2024-04-04T17:01:37Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552091579",
            "id": 1552091579,
            "in_reply_to_id": 1552087677,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM5cgwm7",
            "original_commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/doc/commenting.txt",
            "position": 1,
            "pull_request_review_id": 1980612135,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552091579/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2024-04-04T17:01:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552091579",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552092321"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552092321"
                }
            },
            "author_association": "MEMBER",
            "body": "how does it work if some lines in the range are commented, but others not? is there a test for that?",
            "commit_id": "ef93981ae37486af5d9219636436fb2fe4ccaa69",
            "created_at": "2024-04-04T17:01:53Z",
            "diff_hunk": "@@ -0,0 +1,644 @@\n+local helpers = require('test.functional.helpers')(after_each)\n+\n+local api = helpers.api\n+local clear = helpers.clear\n+local command = helpers.command\n+local eq = helpers.eq\n+local exec_capture = helpers.exec_capture\n+local exec_lua = helpers.exec_lua\n+local feed = helpers.feed\n+\n+-- Reference text\n+-- aa\n+--  aa\n+--   aa\n+--\n+--   aa\n+--  aa\n+-- aa\n+local example_lines = { 'aa', ' aa', '  aa', '', '  aa', ' aa', 'aa' }\n+\n+local set_commentstring = function(commentstring)\n+  api.nvim_set_option_value('commentstring', commentstring, { buf = 0 })\n+end\n+\n+local get_lines = function(from, to)\n+  from, to = from or 0, to or -1\n+  return api.nvim_buf_get_lines(0, from, to, false)\n+end\n+\n+local set_lines = function(lines, from, to)\n+  from, to = from or 0, to or -1\n+  api.nvim_buf_set_lines(0, from, to, false, lines)\n+end\n+\n+local set_cursor = function(row, col)\n+  api.nvim_win_set_cursor(0, { row, col })\n+end\n+\n+local get_cursor = function()\n+  return api.nvim_win_get_cursor(0)\n+end\n+\n+local setup_treesitter = function()\n+  command('filetype plugin on')\n+  -- NOTE: This leverages bundled Vimscript and Lua tree-sitter parsers\n+  api.nvim_set_option_value('filetype', 'vim', { buf = 0 })\n+  exec_lua('vim.treesitter.start()')\n+end\n+\n+before_each(clear)\n+\n+describe('commenting', function()\n+  before_each(function()\n+    set_lines(example_lines)\n+    set_commentstring('# %s')\n+    command('source $VIMRUNTIME/lua/vim/_defaults.lua')\n+  end)\n+\n+  describe('toggle_lines()', function()\n+    local toggle_lines = function(...)\n+      exec_lua('require(\"vim._comment\").toggle_lines(...)', ...)\n+    end\n+\n+    it('works', function()\n+      toggle_lines(3, 5)\n+      eq(get_lines(2, 5), { '  # aa', '  #', '  # aa' })\n+\n+      toggle_lines(3, 5)\n+      eq(get_lines(2, 5), { '  aa', '', '  aa' })\n+    end)\n+\n+    it(\"works with different 'commentstring' options\", function()\n+      local validate = function(lines_before, lines_after, lines_again)\n+        set_lines(lines_before)\n+        toggle_lines(1, #lines_before)\n+        eq(get_lines(), lines_after)\n+        toggle_lines(1, #lines_before)\n+        eq(get_lines(), lines_again or lines_before)\n+      end\n+\n+      -- Single whitespace inside comment parts (main case)\n+      set_commentstring('# %s #')\n+      -- - General case\n+      validate(\n+        { 'aa', '  aa', 'aa  ', '  aa  ' },\n+        { '# aa #', '#   aa #', '# aa   #', '#   aa   #' }\n+      )\n+      -- - Tabs\n+      validate(\n+        { 'aa', '\\taa', 'aa\\t', '\\taa\\t' },\n+        { '# aa #', '# \\taa #', '# aa\\t #', '# \\taa\\t #' }\n+      )\n+      -- - With indent\n+      validate({ ' aa', '  aa' }, { ' # aa #', ' #  aa #' })\n+      -- - With blank/empty lines\n+      validate(\n+        { '  aa', '', '  ', '\\t' },\n+        { '  # aa #', '  ##', '  ##', '  ##' },\n+        { '  aa', '', '', '' }\n+      )\n+\n+      set_commentstring('# %s')\n+      validate({ 'aa', '  aa', 'aa  ', '  aa  ' }, { '# aa', '#   aa', '# aa  ', '#   aa  ' })\n+      validate({ 'aa', '\\taa', 'aa\\t', '\\taa\\t' }, { '# aa', '# \\taa', '# aa\\t', '# \\taa\\t' })\n+      validate({ ' aa', '  aa' }, { ' # aa', ' #  aa' })\n+      validate(\n+        { '  aa', '', '  ', '\\t' },\n+        { '  # aa', '  #', '  #', '  #' },\n+        { '  aa', '', '', '' }\n+      )\n+\n+      set_commentstring('%s #')\n+      validate({ 'aa', '  aa', 'aa  ', '  aa  ' }, { 'aa #', '  aa #', 'aa   #', '  aa   #' })\n+      validate({ 'aa', '\\taa', 'aa\\t', '\\taa\\t' }, { 'aa #', '\\taa #', 'aa\\t #', '\\taa\\t #' })\n+      validate({ ' aa', '  aa' }, { ' aa #', '  aa #' })\n+      validate(\n+        { '  aa', '', '  ', '\\t' },\n+        { '  aa #', '  #', '  #', '  #' },\n+        { '  aa', '', '', '' }\n+      )\n+\n+      -- No whitespace in parts\n+      set_commentstring('#%s#')\n+      validate({ 'aa', '  aa', 'aa  ', '  aa  ' }, { '#aa#', '#  aa#', '#aa  #', '#  aa  #' })\n+      validate({ 'aa', '\\taa', 'aa\\t', '\\taa\\t' }, { '#aa#', '#\\taa#', '#aa\\t#', '#\\taa\\t#' })\n+      validate({ ' aa', '  aa' }, { ' #aa#', ' # aa#' })\n+      validate(\n+        { '  aa', '', '  ', '\\t' },\n+        { '  #aa#', '  ##', '  ##', '  ##' },\n+        { '  aa', '', '', '' }\n+      )\n+\n+      set_commentstring('#%s')\n+      validate({ 'aa', '  aa', 'aa  ', '  aa  ' }, { '#aa', '#  aa', '#aa  ', '#  aa  ' })\n+      validate({ 'aa', '\\taa', 'aa\\t', '\\taa\\t' }, { '#aa', '#\\taa', '#aa\\t', '#\\taa\\t' })\n+      validate({ ' aa', '  aa' }, { ' #aa', ' # aa' })\n+      validate({ '  aa', '', '  ', '\\t' }, { '  #aa', '  #', '  #', '  #' }, { '  aa', '', '', '' })\n+\n+      set_commentstring('%s#')\n+      validate({ 'aa', '  aa', 'aa  ', '  aa  ' }, { 'aa#', '  aa#', 'aa  #', '  aa  #' })\n+      validate({ 'aa', '\\taa', 'aa\\t', '\\taa\\t' }, { 'aa#', '\\taa#', 'aa\\t#', '\\taa\\t#' })\n+      validate({ ' aa', '  aa' }, { ' aa#', '  aa#' })\n+      validate({ '  aa', '', '  ', '\\t' }, { '  aa#', '  #', '  #', '  #' }, { '  aa', '', '', '' })\n+\n+      -- Extra whitespace inside comment parts\n+      set_commentstring('#  %s  #')\n+      validate(\n+        { 'aa', '  aa', 'aa  ', '  aa  ' },\n+        { '#  aa  #', '#    aa  #', '#  aa    #', '#    aa    #' }\n+      )\n+      validate(\n+        { 'aa', '\\taa', 'aa\\t', '\\taa\\t' },\n+        { '#  aa  #', '#  \\taa  #', '#  aa\\t  #', '#  \\taa\\t  #' }\n+      )\n+      validate({ ' aa', '  aa' }, { ' #  aa  #', ' #   aa  #' })\n+      validate(\n+        { '  aa', '', '  ', '\\t' },\n+        { '  #  aa  #', '  ##', '  ##', '  ##' },\n+        { '  aa', '', '', '' }\n+      )\n+\n+      set_commentstring('#  %s')\n+      validate({ 'aa', '  aa', 'aa  ', '  aa  ' }, { '#  aa', '#    aa', '#  aa  ', '#    aa  ' })\n+      validate({ 'aa', '\\taa', 'aa\\t', '\\taa\\t' }, { '#  aa', '#  \\taa', '#  aa\\t', '#  \\taa\\t' })\n+      validate({ ' aa', '  aa' }, { ' #  aa', ' #   aa' })\n+      validate(\n+        { '  aa', '', '  ', '\\t' },\n+        { '  #  aa', '  #', '  #', '  #' },\n+        { '  aa', '', '', '' }\n+      )\n+\n+      set_commentstring('%s  #')\n+      validate({ 'aa', '  aa', 'aa  ', '  aa  ' }, { 'aa  #', '  aa  #', 'aa    #', '  aa    #' })\n+      validate({ 'aa', '\\taa', 'aa\\t', '\\taa\\t' }, { 'aa  #', '\\taa  #', 'aa\\t  #', '\\taa\\t  #' })\n+      validate({ ' aa', '  aa' }, { ' aa  #', '  aa  #' })\n+      validate(\n+        { '  aa', '', '  ', '\\t' },\n+        { '  aa  #', '  #', '  #', '  #' },\n+        { '  aa', '', '', '' }\n+      )\n+\n+      -- Whitespace outside of comment parts\n+      set_commentstring(' # %s # ')\n+      validate(\n+        { 'aa', '  aa', 'aa  ', '  aa  ' },\n+        { ' # aa # ', ' #   aa # ', ' # aa   # ', ' #   aa   # ' }\n+      )\n+      validate(\n+        { 'aa', '\\taa', 'aa\\t', '\\taa\\t' },\n+        { ' # aa # ', ' # \\taa # ', ' # aa\\t # ', ' # \\taa\\t # ' }\n+      )\n+      validate({ ' aa', '  aa' }, { '  # aa # ', '  #  aa # ' })\n+      validate(\n+        { '  aa', '', '  ', '\\t' },\n+        { '   # aa # ', '  ##', '  ##', '  ##' },\n+        { '  aa', '', '', '' }\n+      )\n+\n+      set_commentstring(' # %s ')\n+      validate(\n+        { 'aa', '  aa', 'aa  ', '  aa  ' },\n+        { ' # aa ', ' #   aa ', ' # aa   ', ' #   aa   ' }\n+      )\n+      validate(\n+        { 'aa', '\\taa', 'aa\\t', '\\taa\\t' },\n+        { ' # aa ', ' # \\taa ', ' # aa\\t ', ' # \\taa\\t ' }\n+      )\n+      validate({ ' aa', '  aa' }, { '  # aa ', '  #  aa ' })\n+      validate(\n+        { '  aa', '', '  ', '\\t' },\n+        { '   # aa ', '  #', '  #', '  #' },\n+        { '  aa', '', '', '' }\n+      )\n+\n+      set_commentstring(' %s # ')\n+      validate(\n+        { 'aa', '  aa', 'aa  ', '  aa  ' },\n+        { ' aa # ', '   aa # ', ' aa   # ', '   aa   # ' }\n+      )\n+      validate(\n+        { 'aa', '\\taa', 'aa\\t', '\\taa\\t' },\n+        { ' aa # ', ' \\taa # ', ' aa\\t # ', ' \\taa\\t # ' }\n+      )\n+      validate({ ' aa', '  aa' }, { '  aa # ', '   aa # ' })\n+      validate(\n+        { '  aa', '', '  ', '\\t' },\n+        { '   aa # ', '  #', '  #', '  #' },\n+        { '  aa', '', '', '' }\n+      )\n+\n+      -- LaTeX\n+      set_commentstring('% %s')\n+      validate({ 'aa', '  aa', 'aa  ', '  aa  ' }, { '% aa', '%   aa', '% aa  ', '%   aa  ' })\n+      validate({ 'aa', '\\taa', 'aa\\t', '\\taa\\t' }, { '% aa', '% \\taa', '% aa\\t', '% \\taa\\t' })\n+      validate({ ' aa', '  aa' }, { ' % aa', ' %  aa' })\n+      validate(\n+        { '  aa', '', '  ', '\\t' },\n+        { '  % aa', '  %', '  %', '  %' },\n+        { '  aa', '', '', '' }\n+      )\n+    end)\n+\n+    it('respects tree-sitter injections', function()\n+      setup_treesitter()\n+\n+      local lines = {\n+        'set background=dark',\n+        'lua << EOF',\n+        'print(1)',\n+        'vim.api.nvim_exec2([[',\n+        '    set background=light',\n+        ']])',\n+        'EOF',\n+      }\n+\n+      -- Single line comments\n+      local validate = function(line, ref_output)\n+        set_lines(lines)\n+        toggle_lines(line, line)\n+        eq(get_lines(line - 1, line)[1], ref_output)\n+      end\n+\n+      validate(1, '\"set background=dark')\n+      validate(2, '\"lua << EOF')\n+      validate(3, '-- print(1)')\n+      validate(4, '-- vim.api.nvim_exec2([[')\n+      validate(5, '    \"set background=light')\n+      validate(6, '-- ]])')\n+      validate(7, '\"EOF')\n+\n+      -- Multiline comments should be computed based on first line 'commentstring'\n+      set_lines(lines)\n+      toggle_lines(1, 3)\n+      local out_lines = get_lines()\n+      eq(out_lines[1], '\"set background=dark')\n+      eq(out_lines[2], '\"lua << EOF')\n+      eq(out_lines[3], '\"print(1)')\n+    end)\n+\n+    it('correctly computes indent', function()\n+      toggle_lines(2, 4)\n+      eq(get_lines(1, 4), { ' # aa', ' #  aa', ' #' })\n+\n+      set_lines(example_lines)\n+      toggle_lines(4, 4)\n+      eq(get_lines(3, 4), { '#' })\n+    end)\n+\n+    it('correctly detects comment/uncomment', function()\n+      local validate = function(from, to, ref_lines)\n+        set_lines({ '', 'aa', '# aa', '# aa', 'aa', '' })\n+        toggle_lines(from, to)\n+        eq(get_lines(), ref_lines)\n+      end\n+\n+      -- It should uncomment only if all lines are comments\n+      validate(3, 4, { '', 'aa', 'aa', 'aa', 'aa', '' })\n+      validate(2, 4, { '', '# aa', '# # aa', '# # aa', 'aa', '' })\n+      validate(3, 5, { '', 'aa', '# # aa', '# # aa', '# aa', '' })\n+      validate(1, 6, { '#', '# aa', '# # aa', '# # aa', '# aa', '#' })\n+    end)\n+\n+    it('matches comment parts strictly when detecting comment/uncomment', function()\n+      local validate = function(from, to, ref_lines)\n+        set_lines({ '#aa', '# aa', '#  aa' })\n+        toggle_lines(from, to)\n+        eq(get_lines(), ref_lines)\n+      end\n+\n+      set_commentstring('#%s')\n+      validate(1, 3, { 'aa', ' aa', '  aa' })\n+      validate(2, 3, { '#aa', ' aa', '  aa' })\n+      validate(3, 3, { '#aa', '# aa', '  aa' })\n+\n+      set_commentstring('# %s')\n+      validate(1, 3, { '# #aa', '# # aa', '# #  aa' })\n+      validate(2, 3, { '#aa', 'aa', ' aa' })\n+      validate(3, 3, { '#aa', '# aa', ' aa' })\n+\n+      set_commentstring('#  %s')\n+      validate(1, 3, { '#  #aa', '#  # aa', '#  #  aa' })\n+      validate(2, 3, { '#aa', '#  # aa', '#  #  aa' })\n+      validate(3, 3, { '#aa', '# aa', 'aa' })\n+    end)\n+\n+    it('uncomments on inconsistent indent levels', function()\n+      set_lines({ '# aa', ' # aa', '  # aa' })\n+      toggle_lines(1, 3)\n+      eq(get_lines(), { 'aa', ' aa', '  aa' })\n+    end)\n+\n+    it('respects tabs', function()\n+      api.nvim_set_option_value('expandtab', false, { buf = 0 })\n+      set_lines({ '\\t\\taa', '\\t\\taa' })\n+\n+      toggle_lines(1, 2)\n+      eq(get_lines(), { '\\t\\t# aa', '\\t\\t# aa' })\n+\n+      toggle_lines(1, 2)\n+      eq(get_lines(), { '\\t\\taa', '\\t\\taa' })\n+    end)\n+\n+    it('works with trailing whitespace', function()\n+      -- Without right-hand side\n+      set_commentstring('# %s')\n+      set_lines({ ' aa', ' aa  ', '  ' })\n+      toggle_lines(1, 3)\n+      eq(get_lines(), { ' # aa', ' # aa  ', ' #' })\n+      toggle_lines(1, 3)\n+      eq(get_lines(), { ' aa', ' aa  ', '' })\n+\n+      -- With right-hand side\n+      set_commentstring('%s #')\n+      set_lines({ ' aa', ' aa  ', '  ' })\n+      toggle_lines(1, 3)\n+      eq(get_lines(), { ' aa #', ' aa   #', ' #' })",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552092321",
            "id": 1552092321,
            "line": 356,
            "node_id": "PRRC_kwDOAPphoM5cgwyh",
            "original_commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "original_line": 356,
            "original_position": 356,
            "original_start_line": null,
            "path": "test/functional/lua/comment_spec.lua",
            "position": 356,
            "pull_request_review_id": 1980613784,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552092321/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-04T17:01:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552092321",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552094671"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552094671"
                }
            },
            "author_association": "MEMBER",
            "body": "I would recommend departing from this convention:\r\n1. it's not quite a bundled plugin (same as `editorconfig` support)\r\n2. keeps `pi_foo` reserved for plugins inherited from Vim\r\n3. what does `pi` even stand for? I was expecting something close to 22/7...",
            "commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "created_at": "2024-04-04T17:03:35Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552094671",
            "id": 1552094671,
            "in_reply_to_id": 1552087677,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM5cgxXP",
            "original_commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/doc/commenting.txt",
            "position": 1,
            "pull_request_review_id": 1980620168,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552094671/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2024-04-04T17:03:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552094671",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552094773"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552094773"
                }
            },
            "author_association": "MEMBER",
            "body": "If at least on line is not commented (blank lines are not taken into account when deciding that), then the whole range is commented. Yes, there are tests for that. It is a \"correctly detects comment/uncomment\" test.",
            "commit_id": "ef93981ae37486af5d9219636436fb2fe4ccaa69",
            "created_at": "2024-04-04T17:03:41Z",
            "diff_hunk": "@@ -0,0 +1,644 @@\n+local helpers = require('test.functional.helpers')(after_each)\n+\n+local api = helpers.api\n+local clear = helpers.clear\n+local command = helpers.command\n+local eq = helpers.eq\n+local exec_capture = helpers.exec_capture\n+local exec_lua = helpers.exec_lua\n+local feed = helpers.feed\n+\n+-- Reference text\n+-- aa\n+--  aa\n+--   aa\n+--\n+--   aa\n+--  aa\n+-- aa\n+local example_lines = { 'aa', ' aa', '  aa', '', '  aa', ' aa', 'aa' }\n+\n+local set_commentstring = function(commentstring)\n+  api.nvim_set_option_value('commentstring', commentstring, { buf = 0 })\n+end\n+\n+local get_lines = function(from, to)\n+  from, to = from or 0, to or -1\n+  return api.nvim_buf_get_lines(0, from, to, false)\n+end\n+\n+local set_lines = function(lines, from, to)\n+  from, to = from or 0, to or -1\n+  api.nvim_buf_set_lines(0, from, to, false, lines)\n+end\n+\n+local set_cursor = function(row, col)\n+  api.nvim_win_set_cursor(0, { row, col })\n+end\n+\n+local get_cursor = function()\n+  return api.nvim_win_get_cursor(0)\n+end\n+\n+local setup_treesitter = function()\n+  command('filetype plugin on')\n+  -- NOTE: This leverages bundled Vimscript and Lua tree-sitter parsers\n+  api.nvim_set_option_value('filetype', 'vim', { buf = 0 })\n+  exec_lua('vim.treesitter.start()')\n+end\n+\n+before_each(clear)\n+\n+describe('commenting', function()\n+  before_each(function()\n+    set_lines(example_lines)\n+    set_commentstring('# %s')\n+    command('source $VIMRUNTIME/lua/vim/_defaults.lua')\n+  end)\n+\n+  describe('toggle_lines()', function()\n+    local toggle_lines = function(...)\n+      exec_lua('require(\"vim._comment\").toggle_lines(...)', ...)\n+    end\n+\n+    it('works', function()\n+      toggle_lines(3, 5)\n+      eq(get_lines(2, 5), { '  # aa', '  #', '  # aa' })\n+\n+      toggle_lines(3, 5)\n+      eq(get_lines(2, 5), { '  aa', '', '  aa' })\n+    end)\n+\n+    it(\"works with different 'commentstring' options\", function()\n+      local validate = function(lines_before, lines_after, lines_again)\n+        set_lines(lines_before)\n+        toggle_lines(1, #lines_before)\n+        eq(get_lines(), lines_after)\n+        toggle_lines(1, #lines_before)\n+        eq(get_lines(), lines_again or lines_before)\n+      end\n+\n+      -- Single whitespace inside comment parts (main case)\n+      set_commentstring('# %s #')\n+      -- - General case\n+      validate(\n+        { 'aa', '  aa', 'aa  ', '  aa  ' },\n+        { '# aa #', '#   aa #', '# aa   #', '#   aa   #' }\n+      )\n+      -- - Tabs\n+      validate(\n+        { 'aa', '\\taa', 'aa\\t', '\\taa\\t' },\n+        { '# aa #', '# \\taa #', '# aa\\t #', '# \\taa\\t #' }\n+      )\n+      -- - With indent\n+      validate({ ' aa', '  aa' }, { ' # aa #', ' #  aa #' })\n+      -- - With blank/empty lines\n+      validate(\n+        { '  aa', '', '  ', '\\t' },\n+        { '  # aa #', '  ##', '  ##', '  ##' },\n+        { '  aa', '', '', '' }\n+      )\n+\n+      set_commentstring('# %s')\n+      validate({ 'aa', '  aa', 'aa  ', '  aa  ' }, { '# aa', '#   aa', '# aa  ', '#   aa  ' })\n+      validate({ 'aa', '\\taa', 'aa\\t', '\\taa\\t' }, { '# aa', '# \\taa', '# aa\\t', '# \\taa\\t' })\n+      validate({ ' aa', '  aa' }, { ' # aa', ' #  aa' })\n+      validate(\n+        { '  aa', '', '  ', '\\t' },\n+        { '  # aa', '  #', '  #', '  #' },\n+        { '  aa', '', '', '' }\n+      )\n+\n+      set_commentstring('%s #')\n+      validate({ 'aa', '  aa', 'aa  ', '  aa  ' }, { 'aa #', '  aa #', 'aa   #', '  aa   #' })\n+      validate({ 'aa', '\\taa', 'aa\\t', '\\taa\\t' }, { 'aa #', '\\taa #', 'aa\\t #', '\\taa\\t #' })\n+      validate({ ' aa', '  aa' }, { ' aa #', '  aa #' })\n+      validate(\n+        { '  aa', '', '  ', '\\t' },\n+        { '  aa #', '  #', '  #', '  #' },\n+        { '  aa', '', '', '' }\n+      )\n+\n+      -- No whitespace in parts\n+      set_commentstring('#%s#')\n+      validate({ 'aa', '  aa', 'aa  ', '  aa  ' }, { '#aa#', '#  aa#', '#aa  #', '#  aa  #' })\n+      validate({ 'aa', '\\taa', 'aa\\t', '\\taa\\t' }, { '#aa#', '#\\taa#', '#aa\\t#', '#\\taa\\t#' })\n+      validate({ ' aa', '  aa' }, { ' #aa#', ' # aa#' })\n+      validate(\n+        { '  aa', '', '  ', '\\t' },\n+        { '  #aa#', '  ##', '  ##', '  ##' },\n+        { '  aa', '', '', '' }\n+      )\n+\n+      set_commentstring('#%s')\n+      validate({ 'aa', '  aa', 'aa  ', '  aa  ' }, { '#aa', '#  aa', '#aa  ', '#  aa  ' })\n+      validate({ 'aa', '\\taa', 'aa\\t', '\\taa\\t' }, { '#aa', '#\\taa', '#aa\\t', '#\\taa\\t' })\n+      validate({ ' aa', '  aa' }, { ' #aa', ' # aa' })\n+      validate({ '  aa', '', '  ', '\\t' }, { '  #aa', '  #', '  #', '  #' }, { '  aa', '', '', '' })\n+\n+      set_commentstring('%s#')\n+      validate({ 'aa', '  aa', 'aa  ', '  aa  ' }, { 'aa#', '  aa#', 'aa  #', '  aa  #' })\n+      validate({ 'aa', '\\taa', 'aa\\t', '\\taa\\t' }, { 'aa#', '\\taa#', 'aa\\t#', '\\taa\\t#' })\n+      validate({ ' aa', '  aa' }, { ' aa#', '  aa#' })\n+      validate({ '  aa', '', '  ', '\\t' }, { '  aa#', '  #', '  #', '  #' }, { '  aa', '', '', '' })\n+\n+      -- Extra whitespace inside comment parts\n+      set_commentstring('#  %s  #')\n+      validate(\n+        { 'aa', '  aa', 'aa  ', '  aa  ' },\n+        { '#  aa  #', '#    aa  #', '#  aa    #', '#    aa    #' }\n+      )\n+      validate(\n+        { 'aa', '\\taa', 'aa\\t', '\\taa\\t' },\n+        { '#  aa  #', '#  \\taa  #', '#  aa\\t  #', '#  \\taa\\t  #' }\n+      )\n+      validate({ ' aa', '  aa' }, { ' #  aa  #', ' #   aa  #' })\n+      validate(\n+        { '  aa', '', '  ', '\\t' },\n+        { '  #  aa  #', '  ##', '  ##', '  ##' },\n+        { '  aa', '', '', '' }\n+      )\n+\n+      set_commentstring('#  %s')\n+      validate({ 'aa', '  aa', 'aa  ', '  aa  ' }, { '#  aa', '#    aa', '#  aa  ', '#    aa  ' })\n+      validate({ 'aa', '\\taa', 'aa\\t', '\\taa\\t' }, { '#  aa', '#  \\taa', '#  aa\\t', '#  \\taa\\t' })\n+      validate({ ' aa', '  aa' }, { ' #  aa', ' #   aa' })\n+      validate(\n+        { '  aa', '', '  ', '\\t' },\n+        { '  #  aa', '  #', '  #', '  #' },\n+        { '  aa', '', '', '' }\n+      )\n+\n+      set_commentstring('%s  #')\n+      validate({ 'aa', '  aa', 'aa  ', '  aa  ' }, { 'aa  #', '  aa  #', 'aa    #', '  aa    #' })\n+      validate({ 'aa', '\\taa', 'aa\\t', '\\taa\\t' }, { 'aa  #', '\\taa  #', 'aa\\t  #', '\\taa\\t  #' })\n+      validate({ ' aa', '  aa' }, { ' aa  #', '  aa  #' })\n+      validate(\n+        { '  aa', '', '  ', '\\t' },\n+        { '  aa  #', '  #', '  #', '  #' },\n+        { '  aa', '', '', '' }\n+      )\n+\n+      -- Whitespace outside of comment parts\n+      set_commentstring(' # %s # ')\n+      validate(\n+        { 'aa', '  aa', 'aa  ', '  aa  ' },\n+        { ' # aa # ', ' #   aa # ', ' # aa   # ', ' #   aa   # ' }\n+      )\n+      validate(\n+        { 'aa', '\\taa', 'aa\\t', '\\taa\\t' },\n+        { ' # aa # ', ' # \\taa # ', ' # aa\\t # ', ' # \\taa\\t # ' }\n+      )\n+      validate({ ' aa', '  aa' }, { '  # aa # ', '  #  aa # ' })\n+      validate(\n+        { '  aa', '', '  ', '\\t' },\n+        { '   # aa # ', '  ##', '  ##', '  ##' },\n+        { '  aa', '', '', '' }\n+      )\n+\n+      set_commentstring(' # %s ')\n+      validate(\n+        { 'aa', '  aa', 'aa  ', '  aa  ' },\n+        { ' # aa ', ' #   aa ', ' # aa   ', ' #   aa   ' }\n+      )\n+      validate(\n+        { 'aa', '\\taa', 'aa\\t', '\\taa\\t' },\n+        { ' # aa ', ' # \\taa ', ' # aa\\t ', ' # \\taa\\t ' }\n+      )\n+      validate({ ' aa', '  aa' }, { '  # aa ', '  #  aa ' })\n+      validate(\n+        { '  aa', '', '  ', '\\t' },\n+        { '   # aa ', '  #', '  #', '  #' },\n+        { '  aa', '', '', '' }\n+      )\n+\n+      set_commentstring(' %s # ')\n+      validate(\n+        { 'aa', '  aa', 'aa  ', '  aa  ' },\n+        { ' aa # ', '   aa # ', ' aa   # ', '   aa   # ' }\n+      )\n+      validate(\n+        { 'aa', '\\taa', 'aa\\t', '\\taa\\t' },\n+        { ' aa # ', ' \\taa # ', ' aa\\t # ', ' \\taa\\t # ' }\n+      )\n+      validate({ ' aa', '  aa' }, { '  aa # ', '   aa # ' })\n+      validate(\n+        { '  aa', '', '  ', '\\t' },\n+        { '   aa # ', '  #', '  #', '  #' },\n+        { '  aa', '', '', '' }\n+      )\n+\n+      -- LaTeX\n+      set_commentstring('% %s')\n+      validate({ 'aa', '  aa', 'aa  ', '  aa  ' }, { '% aa', '%   aa', '% aa  ', '%   aa  ' })\n+      validate({ 'aa', '\\taa', 'aa\\t', '\\taa\\t' }, { '% aa', '% \\taa', '% aa\\t', '% \\taa\\t' })\n+      validate({ ' aa', '  aa' }, { ' % aa', ' %  aa' })\n+      validate(\n+        { '  aa', '', '  ', '\\t' },\n+        { '  % aa', '  %', '  %', '  %' },\n+        { '  aa', '', '', '' }\n+      )\n+    end)\n+\n+    it('respects tree-sitter injections', function()\n+      setup_treesitter()\n+\n+      local lines = {\n+        'set background=dark',\n+        'lua << EOF',\n+        'print(1)',\n+        'vim.api.nvim_exec2([[',\n+        '    set background=light',\n+        ']])',\n+        'EOF',\n+      }\n+\n+      -- Single line comments\n+      local validate = function(line, ref_output)\n+        set_lines(lines)\n+        toggle_lines(line, line)\n+        eq(get_lines(line - 1, line)[1], ref_output)\n+      end\n+\n+      validate(1, '\"set background=dark')\n+      validate(2, '\"lua << EOF')\n+      validate(3, '-- print(1)')\n+      validate(4, '-- vim.api.nvim_exec2([[')\n+      validate(5, '    \"set background=light')\n+      validate(6, '-- ]])')\n+      validate(7, '\"EOF')\n+\n+      -- Multiline comments should be computed based on first line 'commentstring'\n+      set_lines(lines)\n+      toggle_lines(1, 3)\n+      local out_lines = get_lines()\n+      eq(out_lines[1], '\"set background=dark')\n+      eq(out_lines[2], '\"lua << EOF')\n+      eq(out_lines[3], '\"print(1)')\n+    end)\n+\n+    it('correctly computes indent', function()\n+      toggle_lines(2, 4)\n+      eq(get_lines(1, 4), { ' # aa', ' #  aa', ' #' })\n+\n+      set_lines(example_lines)\n+      toggle_lines(4, 4)\n+      eq(get_lines(3, 4), { '#' })\n+    end)\n+\n+    it('correctly detects comment/uncomment', function()\n+      local validate = function(from, to, ref_lines)\n+        set_lines({ '', 'aa', '# aa', '# aa', 'aa', '' })\n+        toggle_lines(from, to)\n+        eq(get_lines(), ref_lines)\n+      end\n+\n+      -- It should uncomment only if all lines are comments\n+      validate(3, 4, { '', 'aa', 'aa', 'aa', 'aa', '' })\n+      validate(2, 4, { '', '# aa', '# # aa', '# # aa', 'aa', '' })\n+      validate(3, 5, { '', 'aa', '# # aa', '# # aa', '# aa', '' })\n+      validate(1, 6, { '#', '# aa', '# # aa', '# # aa', '# aa', '#' })\n+    end)\n+\n+    it('matches comment parts strictly when detecting comment/uncomment', function()\n+      local validate = function(from, to, ref_lines)\n+        set_lines({ '#aa', '# aa', '#  aa' })\n+        toggle_lines(from, to)\n+        eq(get_lines(), ref_lines)\n+      end\n+\n+      set_commentstring('#%s')\n+      validate(1, 3, { 'aa', ' aa', '  aa' })\n+      validate(2, 3, { '#aa', ' aa', '  aa' })\n+      validate(3, 3, { '#aa', '# aa', '  aa' })\n+\n+      set_commentstring('# %s')\n+      validate(1, 3, { '# #aa', '# # aa', '# #  aa' })\n+      validate(2, 3, { '#aa', 'aa', ' aa' })\n+      validate(3, 3, { '#aa', '# aa', ' aa' })\n+\n+      set_commentstring('#  %s')\n+      validate(1, 3, { '#  #aa', '#  # aa', '#  #  aa' })\n+      validate(2, 3, { '#aa', '#  # aa', '#  #  aa' })\n+      validate(3, 3, { '#aa', '# aa', 'aa' })\n+    end)\n+\n+    it('uncomments on inconsistent indent levels', function()\n+      set_lines({ '# aa', ' # aa', '  # aa' })\n+      toggle_lines(1, 3)\n+      eq(get_lines(), { 'aa', ' aa', '  aa' })\n+    end)\n+\n+    it('respects tabs', function()\n+      api.nvim_set_option_value('expandtab', false, { buf = 0 })\n+      set_lines({ '\\t\\taa', '\\t\\taa' })\n+\n+      toggle_lines(1, 2)\n+      eq(get_lines(), { '\\t\\t# aa', '\\t\\t# aa' })\n+\n+      toggle_lines(1, 2)\n+      eq(get_lines(), { '\\t\\taa', '\\t\\taa' })\n+    end)\n+\n+    it('works with trailing whitespace', function()\n+      -- Without right-hand side\n+      set_commentstring('# %s')\n+      set_lines({ ' aa', ' aa  ', '  ' })\n+      toggle_lines(1, 3)\n+      eq(get_lines(), { ' # aa', ' # aa  ', ' #' })\n+      toggle_lines(1, 3)\n+      eq(get_lines(), { ' aa', ' aa  ', '' })\n+\n+      -- With right-hand side\n+      set_commentstring('%s #')\n+      set_lines({ ' aa', ' aa  ', '  ' })\n+      toggle_lines(1, 3)\n+      eq(get_lines(), { ' aa #', ' aa   #', ' #' })",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552094773",
            "id": 1552094773,
            "in_reply_to_id": 1552092321,
            "line": 356,
            "node_id": "PRRC_kwDOAPphoM5cgxY1",
            "original_commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "original_line": 356,
            "original_position": 356,
            "original_start_line": null,
            "path": "test/functional/lua/comment_spec.lua",
            "position": 356,
            "pull_request_review_id": 1980620497,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552094773/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-04T17:03:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552094773",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552096946"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552096946"
                }
            },
            "author_association": "MEMBER",
            "body": "Alternative would be to fold this into `various.txt`, since it basically only documents some builtin mappings.\r\n\r\n(Related: Should we add the new `gc` default mappings to `vim_diff.txt`?)",
            "commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "created_at": "2024-04-04T17:04:53Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552096946",
            "id": 1552096946,
            "in_reply_to_id": 1552087677,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM5cgx6y",
            "original_commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/doc/commenting.txt",
            "position": 1,
            "pull_request_review_id": 1980625119,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552096946/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2024-04-04T17:04:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552096946",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552097475"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552097475"
                }
            },
            "author_association": "MEMBER",
            "body": "IMO `various.txt` fits here. From the user perspective there should be no real difference (nor should they care) that this part was written in lua. This is not an optional feature either; for all intents and purposes this will become a part of core.",
            "commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "created_at": "2024-04-04T17:05:21Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552097475",
            "id": 1552097475,
            "in_reply_to_id": 1552087677,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM5cgyDD",
            "original_commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/doc/commenting.txt",
            "position": 1,
            "pull_request_review_id": 1980626606,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552097475/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2024-04-04T17:05:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552097475",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552097788"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552097788"
                }
            },
            "author_association": "MEMBER",
            "body": "I still would prefer us not littering the global scope, just on principle.",
            "commit_id": "ef93981ae37486af5d9219636436fb2fe4ccaa69",
            "created_at": "2024-04-04T17:05:39Z",
            "diff_hunk": "@@ -0,0 +1,252 @@\n+---@nodoc\n+---@class vim._comment.Parts\n+---@field left string Left part of comment\n+---@field right string Right part of comment\n+\n+---@param ref_position integer[]\n+---@return string\n+local function get_commentstring(ref_position)\n+  local buf_cs = vim.bo.commentstring\n+\n+  local has_ts_parser, ts_parser = pcall(vim.treesitter.get_parser)\n+  if not has_ts_parser then\n+    return buf_cs\n+  end\n+\n+  -- Try to get 'commentstring' associated with local tree-sitter language.\n+  -- This is useful for injected languages (like markdown with code blocks).\n+  local row, col = ref_position[1] - 1, ref_position[2]\n+  local ref_range = { row, col, row, col + 1 }\n+\n+  -- - Get 'commentstring' from the deepest LanguageTree which both contains\n+  --   reference range and has valid 'commentstring' (meaning it has at least\n+  --   one associated 'filetype' with valid 'commentstring').\n+  --   In simple cases using `parser:language_for_range()` would be enough, but\n+  --   it fails for languages without valid 'commentstring' (like 'comment').\n+  local ts_cs, res_level = nil, 0\n+\n+  ---@param lang_tree vim.treesitter.LanguageTree\n+  local function traverse(lang_tree, level)\n+    if not lang_tree:contains(ref_range) then\n+      return\n+    end\n+\n+    local lang = lang_tree:lang()\n+    local filetypes = vim.treesitter.language.get_filetypes(lang)\n+    for _, ft in ipairs(filetypes) do\n+      local cur_cs = vim.filetype.get_option(ft, 'commentstring')\n+      if type(cur_cs) == 'string' and cur_cs ~= '' and level > res_level then\n+        ts_cs = cur_cs\n+      end\n+    end\n+\n+    for _, child_lang_tree in pairs(lang_tree:children()) do\n+      traverse(child_lang_tree, level + 1)\n+    end\n+  end\n+  traverse(ts_parser, 1)\n+\n+  return ts_cs or buf_cs\n+end\n+\n+---@param ref_position integer[]\n+---@return vim._comment.Parts\n+local function make_comment_parts(ref_position)\n+  local cs = get_commentstring(ref_position)\n+\n+  if cs == nil or cs == '' then\n+    vim.api.nvim_echo({ { \"Option 'commentstring' is empty.\", 'WarningMsg' } }, true, {})\n+    return { left = '', right = '' }\n+  end\n+\n+  if not (type(cs) == 'string' and string.find(cs, '%%s') ~= nil) then\n+    error(vim.inspect(cs) .. \" is not a valid 'commentstring'.\")\n+  end\n+\n+  -- Structure of 'commentstring': <left part> <%s> <right part>\n+  local left, right = string.match(cs, '^(.-)%%s(.-)$')\n+  return { left = left, right = right }\n+end\n+\n+---@param parts vim._comment.Parts\n+---@return fun(line: string): boolean\n+local function make_comment_check(parts)\n+  local l_esc, r_esc = vim.pesc(parts.left), vim.pesc(parts.right)\n+\n+  -- Commented line has the following structure:\n+  -- <possible whitespace> <left> <anything> <right> <possible whitespace>\n+  local nonblank_regex = '^%s-' .. l_esc .. '.*' .. r_esc .. '%s-$'\n+\n+  -- Commented blank line can have any amoung of whitespace around parts\n+  local blank_regex = '^%s-' .. vim.trim(l_esc) .. '%s*' .. vim.trim(r_esc) .. '%s-$'\n+\n+  return function(line)\n+    return string.find(line, nonblank_regex) ~= nil or string.find(line, blank_regex) ~= nil\n+  end\n+end\n+\n+---@param lines string[]\n+---@param parts vim._comment.Parts\n+---@return string indent\n+---@return boolean is_commented\n+local function get_lines_info(lines, parts)\n+  local comment_check = make_comment_check(parts)\n+\n+  local is_commented = true\n+  local indent_width, indent_width_cur = math.huge, math.huge\n+  ---@type integer\n+  local indent\n+  ---@type integer\n+  local indent_cur\n+\n+  for _, l in ipairs(lines) do\n+    -- Update lines indent: minimum of all indents except blank lines\n+    ---@diagnostic disable-next-line:cast-local-type\n+    _, indent_width_cur, indent_cur = string.find(l, '^(%s*)')\n+    local is_blank = indent_width_cur == string.len(l)\n+\n+    -- NOTE: Copying actual indent instead of recreating it with `indent_width`\n+    -- allows to handle both tabs and spaces\n+    if indent_width_cur < indent_width and not is_blank then\n+      ---@diagnostic disable-next-line:cast-local-type\n+      indent_width, indent = indent_width_cur, indent_cur\n+    end\n+\n+    -- Update comment info: lines are commented if every line is commented\n+    if is_commented then\n+      is_commented = comment_check(l)\n+    end\n+  end\n+\n+  -- `indent` can still be `nil` in case all `lines` are empty\n+  return indent or '', is_commented\n+end\n+\n+---@param x string\n+---@return boolean is_blank\n+local function is_blank(x)\n+  return string.find(x, '^%s*$') ~= nil\n+end\n+\n+---@param parts vim._comment.Parts\n+---@param indent string\n+---@return fun(line: string): string\n+local function make_comment_function(parts, indent)\n+  local prefix, nonindent_start, suffix = indent .. parts.left, string.len(indent) + 1, parts.right\n+  local blank_comment = indent .. vim.trim(parts.left) .. vim.trim(parts.right)\n+\n+  return function(line)\n+    if is_blank(line) then\n+      return blank_comment\n+    end\n+    return prefix .. string.sub(line, nonindent_start) .. suffix\n+  end\n+end\n+\n+---@param parts vim._comment.Parts\n+---@return fun(line: string): string\n+local function make_uncomment_function(parts)\n+  local l_esc, r_esc = vim.pesc(parts.left), vim.pesc(parts.right)\n+  local nonblank_regex = '^(%s*)' .. l_esc .. '(.*)' .. r_esc .. '(%s-)$'\n+  local blank_regex = '^(%s*)' .. vim.trim(l_esc) .. '(%s*)' .. vim.trim(r_esc) .. '(%s-)$'\n+\n+  return function(line)\n+    -- Try both non-blank and blank regexes\n+    local indent, new_line, trail = string.match(line, nonblank_regex)\n+    if new_line == nil then\n+      indent, new_line, trail = string.match(line, blank_regex)\n+    end\n+\n+    -- Return original if line is not commented\n+    if new_line == nil then\n+      return line\n+    end\n+\n+    -- Prevent trailing whitespace\n+    if is_blank(new_line) then\n+      indent, trail = '', ''\n+    end\n+\n+    return indent .. new_line .. trail\n+  end\n+end\n+\n+---@param line_start integer\n+---@param line_end integer\n+---@param ref_position? integer[]\n+local function toggle_lines(line_start, line_end, ref_position)\n+  ref_position = ref_position or { line_start, 0 }\n+  local parts = make_comment_parts(ref_position)\n+  local lines = vim.api.nvim_buf_get_lines(0, line_start - 1, line_end, false)\n+  local indent, is_comment = get_lines_info(lines, parts)\n+\n+  local f = is_comment and make_uncomment_function(parts) or make_comment_function(parts, indent)\n+\n+  -- Direct `nvim_buf_set_lines()` essentially removes both regular and\n+  -- extended marks  (squashes to empty range at either side of the region)\n+  -- inside region. Use 'lockmarks' to preserve regular marks.\n+  -- Preserving extmarks is not a universally good thing to do:\n+  -- - Good for non-highlighting in text area extmarks (like showing signs).\n+  -- - Debatable for highlighting in text area (like LSP semantic tokens).\n+  --   Mostly because it causes flicker as highlighting is preserved during\n+  --   comment toggling.\n+  _G._from, _G._to, _G._lines = line_start - 1, line_end, vim.tbl_map(f, lines)",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552097788",
            "id": 1552097788,
            "in_reply_to_id": 1552057291,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5cgyH8",
            "original_commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "original_line": 193,
            "original_position": 193,
            "original_start_line": null,
            "path": "runtime/lua/vim/_comment.lua",
            "position": null,
            "pull_request_review_id": 1980627531,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552097788/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-04T17:05:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552097788",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552135349"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552135349"
                }
            },
            "author_association": "MEMBER",
            "body": "In a follow-up I'll make an internal binding to lockmarks so we can avoid this entirely.",
            "commit_id": "ef93981ae37486af5d9219636436fb2fe4ccaa69",
            "created_at": "2024-04-04T17:33:49Z",
            "diff_hunk": "@@ -0,0 +1,252 @@\n+---@nodoc\n+---@class vim._comment.Parts\n+---@field left string Left part of comment\n+---@field right string Right part of comment\n+\n+---@param ref_position integer[]\n+---@return string\n+local function get_commentstring(ref_position)\n+  local buf_cs = vim.bo.commentstring\n+\n+  local has_ts_parser, ts_parser = pcall(vim.treesitter.get_parser)\n+  if not has_ts_parser then\n+    return buf_cs\n+  end\n+\n+  -- Try to get 'commentstring' associated with local tree-sitter language.\n+  -- This is useful for injected languages (like markdown with code blocks).\n+  local row, col = ref_position[1] - 1, ref_position[2]\n+  local ref_range = { row, col, row, col + 1 }\n+\n+  -- - Get 'commentstring' from the deepest LanguageTree which both contains\n+  --   reference range and has valid 'commentstring' (meaning it has at least\n+  --   one associated 'filetype' with valid 'commentstring').\n+  --   In simple cases using `parser:language_for_range()` would be enough, but\n+  --   it fails for languages without valid 'commentstring' (like 'comment').\n+  local ts_cs, res_level = nil, 0\n+\n+  ---@param lang_tree vim.treesitter.LanguageTree\n+  local function traverse(lang_tree, level)\n+    if not lang_tree:contains(ref_range) then\n+      return\n+    end\n+\n+    local lang = lang_tree:lang()\n+    local filetypes = vim.treesitter.language.get_filetypes(lang)\n+    for _, ft in ipairs(filetypes) do\n+      local cur_cs = vim.filetype.get_option(ft, 'commentstring')\n+      if type(cur_cs) == 'string' and cur_cs ~= '' and level > res_level then\n+        ts_cs = cur_cs\n+      end\n+    end\n+\n+    for _, child_lang_tree in pairs(lang_tree:children()) do\n+      traverse(child_lang_tree, level + 1)\n+    end\n+  end\n+  traverse(ts_parser, 1)\n+\n+  return ts_cs or buf_cs\n+end\n+\n+---@param ref_position integer[]\n+---@return vim._comment.Parts\n+local function make_comment_parts(ref_position)\n+  local cs = get_commentstring(ref_position)\n+\n+  if cs == nil or cs == '' then\n+    vim.api.nvim_echo({ { \"Option 'commentstring' is empty.\", 'WarningMsg' } }, true, {})\n+    return { left = '', right = '' }\n+  end\n+\n+  if not (type(cs) == 'string' and string.find(cs, '%%s') ~= nil) then\n+    error(vim.inspect(cs) .. \" is not a valid 'commentstring'.\")\n+  end\n+\n+  -- Structure of 'commentstring': <left part> <%s> <right part>\n+  local left, right = string.match(cs, '^(.-)%%s(.-)$')\n+  return { left = left, right = right }\n+end\n+\n+---@param parts vim._comment.Parts\n+---@return fun(line: string): boolean\n+local function make_comment_check(parts)\n+  local l_esc, r_esc = vim.pesc(parts.left), vim.pesc(parts.right)\n+\n+  -- Commented line has the following structure:\n+  -- <possible whitespace> <left> <anything> <right> <possible whitespace>\n+  local nonblank_regex = '^%s-' .. l_esc .. '.*' .. r_esc .. '%s-$'\n+\n+  -- Commented blank line can have any amoung of whitespace around parts\n+  local blank_regex = '^%s-' .. vim.trim(l_esc) .. '%s*' .. vim.trim(r_esc) .. '%s-$'\n+\n+  return function(line)\n+    return string.find(line, nonblank_regex) ~= nil or string.find(line, blank_regex) ~= nil\n+  end\n+end\n+\n+---@param lines string[]\n+---@param parts vim._comment.Parts\n+---@return string indent\n+---@return boolean is_commented\n+local function get_lines_info(lines, parts)\n+  local comment_check = make_comment_check(parts)\n+\n+  local is_commented = true\n+  local indent_width, indent_width_cur = math.huge, math.huge\n+  ---@type integer\n+  local indent\n+  ---@type integer\n+  local indent_cur\n+\n+  for _, l in ipairs(lines) do\n+    -- Update lines indent: minimum of all indents except blank lines\n+    ---@diagnostic disable-next-line:cast-local-type\n+    _, indent_width_cur, indent_cur = string.find(l, '^(%s*)')\n+    local is_blank = indent_width_cur == string.len(l)\n+\n+    -- NOTE: Copying actual indent instead of recreating it with `indent_width`\n+    -- allows to handle both tabs and spaces\n+    if indent_width_cur < indent_width and not is_blank then\n+      ---@diagnostic disable-next-line:cast-local-type\n+      indent_width, indent = indent_width_cur, indent_cur\n+    end\n+\n+    -- Update comment info: lines are commented if every line is commented\n+    if is_commented then\n+      is_commented = comment_check(l)\n+    end\n+  end\n+\n+  -- `indent` can still be `nil` in case all `lines` are empty\n+  return indent or '', is_commented\n+end\n+\n+---@param x string\n+---@return boolean is_blank\n+local function is_blank(x)\n+  return string.find(x, '^%s*$') ~= nil\n+end\n+\n+---@param parts vim._comment.Parts\n+---@param indent string\n+---@return fun(line: string): string\n+local function make_comment_function(parts, indent)\n+  local prefix, nonindent_start, suffix = indent .. parts.left, string.len(indent) + 1, parts.right\n+  local blank_comment = indent .. vim.trim(parts.left) .. vim.trim(parts.right)\n+\n+  return function(line)\n+    if is_blank(line) then\n+      return blank_comment\n+    end\n+    return prefix .. string.sub(line, nonindent_start) .. suffix\n+  end\n+end\n+\n+---@param parts vim._comment.Parts\n+---@return fun(line: string): string\n+local function make_uncomment_function(parts)\n+  local l_esc, r_esc = vim.pesc(parts.left), vim.pesc(parts.right)\n+  local nonblank_regex = '^(%s*)' .. l_esc .. '(.*)' .. r_esc .. '(%s-)$'\n+  local blank_regex = '^(%s*)' .. vim.trim(l_esc) .. '(%s*)' .. vim.trim(r_esc) .. '(%s-)$'\n+\n+  return function(line)\n+    -- Try both non-blank and blank regexes\n+    local indent, new_line, trail = string.match(line, nonblank_regex)\n+    if new_line == nil then\n+      indent, new_line, trail = string.match(line, blank_regex)\n+    end\n+\n+    -- Return original if line is not commented\n+    if new_line == nil then\n+      return line\n+    end\n+\n+    -- Prevent trailing whitespace\n+    if is_blank(new_line) then\n+      indent, trail = '', ''\n+    end\n+\n+    return indent .. new_line .. trail\n+  end\n+end\n+\n+---@param line_start integer\n+---@param line_end integer\n+---@param ref_position? integer[]\n+local function toggle_lines(line_start, line_end, ref_position)\n+  ref_position = ref_position or { line_start, 0 }\n+  local parts = make_comment_parts(ref_position)\n+  local lines = vim.api.nvim_buf_get_lines(0, line_start - 1, line_end, false)\n+  local indent, is_comment = get_lines_info(lines, parts)\n+\n+  local f = is_comment and make_uncomment_function(parts) or make_comment_function(parts, indent)\n+\n+  -- Direct `nvim_buf_set_lines()` essentially removes both regular and\n+  -- extended marks  (squashes to empty range at either side of the region)\n+  -- inside region. Use 'lockmarks' to preserve regular marks.\n+  -- Preserving extmarks is not a universally good thing to do:\n+  -- - Good for non-highlighting in text area extmarks (like showing signs).\n+  -- - Debatable for highlighting in text area (like LSP semantic tokens).\n+  --   Mostly because it causes flicker as highlighting is preserved during\n+  --   comment toggling.\n+  _G._from, _G._to, _G._lines = line_start - 1, line_end, vim.tbl_map(f, lines)",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552135349",
            "id": 1552135349,
            "in_reply_to_id": 1552057291,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5cg7S1",
            "original_commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "original_line": 193,
            "original_position": 193,
            "original_start_line": null,
            "path": "runtime/lua/vim/_comment.lua",
            "position": null,
            "pull_request_review_id": 1980697244,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552135349/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-04T17:34:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552135349",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552147674"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552147674"
                }
            },
            "author_association": "MEMBER",
            "body": "> What even does `pi` stand for?\r\n\r\nplug-in\r\n\r\n> My other approach was to put it directly at the ['various.txt'](https://github.com/neovim/neovim/blob/master/runtime/doc/various.txt) at the end as separate section.\r\n\r\nIt's probably fine as a dedicated file. Will need to think about a convention eventually, as we accumulate more of these. various.txt is also fine, for now.",
            "commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "created_at": "2024-04-04T17:42:20Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552147674",
            "id": 1552147674,
            "in_reply_to_id": 1552087677,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM5cg-Ta",
            "original_commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/doc/commenting.txt",
            "position": 1,
            "pull_request_review_id": 1980714739,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552147674/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2024-04-04T17:47:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552147674",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552154541"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552154541"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n\t\t\t\t\t\t\t*ov_gc*\r\n```",
            "commit_id": "ef93981ae37486af5d9219636436fb2fe4ccaa69",
            "created_at": "2024-04-04T17:45:32Z",
            "diff_hunk": "@@ -557,5 +557,32 @@ LessInitFunc in your vimrc, for example: >\n \t  set nocursorcolumn nocursorline\n \tendfunc\n <\n+==============================================================================\n+3. Commenting\t\t\t\t\t\t\t*commenting*\n+\n+Nvim supports commenting and uncommenting per line. It is done by toggling\n+the status of consecutive lines: if all lines are commented - uncomment them,\n+comment otherwise.\n+\n+Comment structure is directly inferred from 'commentstring' at cursor: text\n+before and after `%s` is taken as left and right part of comment.\n+\n+Commenting line is done by inserting left comment part at appropriate indent\n+and right part at line's end.\n+Uncommenting is done by removing left and right parts from start and end of\n+line (ignoring whitespace).\n+\n+\t\t\t\t\t\t\t*gc*\n+gc{motion}\t\tToggle lines over {motion}.\n+\n+\t\t\t\t\t\t\t*gcc*\n+gcc\t\t\tToggle [count] lines starting with current.\n+\n+\t\t\t\t\t\t\t*v_gc*\n+{Visual}gc\t\tToggle selected lines.\n+\n+\t\t\t\t\t\t\tov_gc*",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552154541",
            "id": 1552154541,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5cg_-t",
            "original_commit_id": "f5c93307327c69d4edb24663435d6e68d2bef598",
            "original_line": 584,
            "original_position": 28,
            "original_start_line": null,
            "path": "runtime/doc/various.txt",
            "position": null,
            "pull_request_review_id": 1980723582,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552154541/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-04T17:45:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552154541",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552154779"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552154779"
                }
            },
            "author_association": "MEMBER",
            "body": "I replaced all `string.xxx(y)` calls with `y:xxx()` calls. Except one `string.format()` which is much better in this form",
            "commit_id": "ef93981ae37486af5d9219636436fb2fe4ccaa69",
            "created_at": "2024-04-04T17:45:39Z",
            "diff_hunk": "@@ -0,0 +1,252 @@\n+---@nodoc\n+---@class vim._comment.Parts\n+---@field left string Left part of comment\n+---@field right string Right part of comment\n+\n+---@param ref_position integer[]\n+---@return string\n+local function get_commentstring(ref_position)\n+  local buf_cs = vim.bo.commentstring\n+\n+  local has_ts_parser, ts_parser = pcall(vim.treesitter.get_parser)\n+  if not has_ts_parser then\n+    return buf_cs\n+  end\n+\n+  -- Try to get 'commentstring' associated with local tree-sitter language.\n+  -- This is useful for injected languages (like markdown with code blocks).\n+  local row, col = ref_position[1] - 1, ref_position[2]\n+  local ref_range = { row, col, row, col + 1 }\n+\n+  -- - Get 'commentstring' from the deepest LanguageTree which both contains\n+  --   reference range and has valid 'commentstring' (meaning it has at least\n+  --   one associated 'filetype' with valid 'commentstring').\n+  --   In simple cases using `parser:language_for_range()` would be enough, but\n+  --   it fails for languages without valid 'commentstring' (like 'comment').\n+  local ts_cs, res_level = nil, 0\n+\n+  ---@param lang_tree vim.treesitter.LanguageTree\n+  local function traverse(lang_tree, level)\n+    if not lang_tree:contains(ref_range) then\n+      return\n+    end\n+\n+    local lang = lang_tree:lang()\n+    local filetypes = vim.treesitter.language.get_filetypes(lang)\n+    for _, ft in ipairs(filetypes) do\n+      local cur_cs = vim.filetype.get_option(ft, 'commentstring')\n+      if type(cur_cs) == 'string' and cur_cs ~= '' and level > res_level then\n+        ts_cs = cur_cs\n+      end\n+    end\n+\n+    for _, child_lang_tree in pairs(lang_tree:children()) do\n+      traverse(child_lang_tree, level + 1)\n+    end\n+  end\n+  traverse(ts_parser, 1)\n+\n+  return ts_cs or buf_cs\n+end\n+\n+---@param ref_position integer[]\n+---@return vim._comment.Parts\n+local function make_comment_parts(ref_position)\n+  local cs = get_commentstring(ref_position)\n+\n+  if cs == nil or cs == '' then\n+    vim.api.nvim_echo({ { \"Option 'commentstring' is empty.\", 'WarningMsg' } }, true, {})\n+    return { left = '', right = '' }\n+  end\n+\n+  if not (type(cs) == 'string' and string.find(cs, '%%s') ~= nil) then\n+    error(vim.inspect(cs) .. \" is not a valid 'commentstring'.\")\n+  end\n+\n+  -- Structure of 'commentstring': <left part> <%s> <right part>\n+  local left, right = string.match(cs, '^(.-)%%s(.-)$')\n+  return { left = left, right = right }\n+end\n+\n+---@param parts vim._comment.Parts\n+---@return fun(line: string): boolean\n+local function make_comment_check(parts)\n+  local l_esc, r_esc = vim.pesc(parts.left), vim.pesc(parts.right)\n+\n+  -- Commented line has the following structure:\n+  -- <possible whitespace> <left> <anything> <right> <possible whitespace>\n+  local nonblank_regex = '^%s-' .. l_esc .. '.*' .. r_esc .. '%s-$'\n+\n+  -- Commented blank line can have any amoung of whitespace around parts\n+  local blank_regex = '^%s-' .. vim.trim(l_esc) .. '%s*' .. vim.trim(r_esc) .. '%s-$'\n+\n+  return function(line)\n+    return string.find(line, nonblank_regex) ~= nil or string.find(line, blank_regex) ~= nil\n+  end\n+end\n+\n+---@param lines string[]\n+---@param parts vim._comment.Parts\n+---@return string indent\n+---@return boolean is_commented\n+local function get_lines_info(lines, parts)\n+  local comment_check = make_comment_check(parts)\n+\n+  local is_commented = true\n+  local indent_width, indent_width_cur = math.huge, math.huge\n+  ---@type integer\n+  local indent\n+  ---@type integer\n+  local indent_cur\n+\n+  for _, l in ipairs(lines) do\n+    -- Update lines indent: minimum of all indents except blank lines\n+    ---@diagnostic disable-next-line:cast-local-type\n+    _, indent_width_cur, indent_cur = string.find(l, '^(%s*)')\n+    local is_blank = indent_width_cur == string.len(l)\n+\n+    -- NOTE: Copying actual indent instead of recreating it with `indent_width`\n+    -- allows to handle both tabs and spaces\n+    if indent_width_cur < indent_width and not is_blank then\n+      ---@diagnostic disable-next-line:cast-local-type\n+      indent_width, indent = indent_width_cur, indent_cur\n+    end\n+\n+    -- Update comment info: lines are commented if every line is commented\n+    if is_commented then\n+      is_commented = comment_check(l)\n+    end\n+  end\n+\n+  -- `indent` can still be `nil` in case all `lines` are empty\n+  return indent or '', is_commented\n+end\n+\n+---@param x string\n+---@return boolean is_blank\n+local function is_blank(x)\n+  return string.find(x, '^%s*$') ~= nil",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552154779",
            "id": 1552154779,
            "in_reply_to_id": 1552051487,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5chACb",
            "original_commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "original_line": 128,
            "original_position": 128,
            "original_start_line": null,
            "path": "runtime/lua/vim/_comment.lua",
            "position": null,
            "pull_request_review_id": 1980723943,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552154779/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-04T17:45:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552154779",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552156704"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552156704"
                }
            },
            "author_association": "MEMBER",
            "body": "`vim.cmd` takes a table for structured commands; no need for string munging (which LuaJIT is not great at); this could at least restrict the scope of the `format`.",
            "commit_id": "ef93981ae37486af5d9219636436fb2fe4ccaa69",
            "created_at": "2024-04-04T17:47:00Z",
            "diff_hunk": "@@ -190,11 +195,17 @@ local function toggle_lines(line_start, line_end, ref_position)\n   -- - Debatable for highlighting in text area (like LSP semantic tokens).\n   --   Mostly because it causes flicker as highlighting is preserved during\n   --   comment toggling.\n-  _G._from, _G._to, _G._lines = line_start - 1, line_end, vim.tbl_map(f, lines)\n-  vim.cmd('lockmarks lua pcall(vim.api.nvim_buf_set_lines, 0, _G._from, _G._to, false, _G._lines)')\n-  _G._from, _G._to, _G._lines = nil, nil, nil\n+  package.loaded['vim._comment']._lines = vim.tbl_map(f, lines)\n+  local cmd = string.format(\n+    'lockmarks lua vim.api.nvim_buf_set_lines(0, %d, %d, false, package.loaded[\"vim._comment\"]._lines)',\n+    line_start - 1,\n+    line_end\n+  )\n+  vim.cmd(cmd)",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552156704",
            "id": 1552156704,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5chAgg",
            "original_commit_id": "f5c93307327c69d4edb24663435d6e68d2bef598",
            "original_line": 204,
            "original_position": 157,
            "original_start_line": null,
            "path": "runtime/lua/vim/_comment.lua",
            "position": null,
            "pull_request_review_id": 1980726986,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552156704/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-04T17:48:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552156704",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552157113"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552157113"
                }
            },
            "author_association": "MEMBER",
            "body": "I opted for a mix of precomputing command (for numeric values) and using `package.loaded['vim._comment']._lines` for string array. In theory, even `new_lines` can be used inside `string.format()` with `vim.inspect()`, but this is costly and not really reliable.",
            "commit_id": "ef93981ae37486af5d9219636436fb2fe4ccaa69",
            "created_at": "2024-04-04T17:47:23Z",
            "diff_hunk": "@@ -0,0 +1,252 @@\n+---@nodoc\n+---@class vim._comment.Parts\n+---@field left string Left part of comment\n+---@field right string Right part of comment\n+\n+---@param ref_position integer[]\n+---@return string\n+local function get_commentstring(ref_position)\n+  local buf_cs = vim.bo.commentstring\n+\n+  local has_ts_parser, ts_parser = pcall(vim.treesitter.get_parser)\n+  if not has_ts_parser then\n+    return buf_cs\n+  end\n+\n+  -- Try to get 'commentstring' associated with local tree-sitter language.\n+  -- This is useful for injected languages (like markdown with code blocks).\n+  local row, col = ref_position[1] - 1, ref_position[2]\n+  local ref_range = { row, col, row, col + 1 }\n+\n+  -- - Get 'commentstring' from the deepest LanguageTree which both contains\n+  --   reference range and has valid 'commentstring' (meaning it has at least\n+  --   one associated 'filetype' with valid 'commentstring').\n+  --   In simple cases using `parser:language_for_range()` would be enough, but\n+  --   it fails for languages without valid 'commentstring' (like 'comment').\n+  local ts_cs, res_level = nil, 0\n+\n+  ---@param lang_tree vim.treesitter.LanguageTree\n+  local function traverse(lang_tree, level)\n+    if not lang_tree:contains(ref_range) then\n+      return\n+    end\n+\n+    local lang = lang_tree:lang()\n+    local filetypes = vim.treesitter.language.get_filetypes(lang)\n+    for _, ft in ipairs(filetypes) do\n+      local cur_cs = vim.filetype.get_option(ft, 'commentstring')\n+      if type(cur_cs) == 'string' and cur_cs ~= '' and level > res_level then\n+        ts_cs = cur_cs\n+      end\n+    end\n+\n+    for _, child_lang_tree in pairs(lang_tree:children()) do\n+      traverse(child_lang_tree, level + 1)\n+    end\n+  end\n+  traverse(ts_parser, 1)\n+\n+  return ts_cs or buf_cs\n+end\n+\n+---@param ref_position integer[]\n+---@return vim._comment.Parts\n+local function make_comment_parts(ref_position)\n+  local cs = get_commentstring(ref_position)\n+\n+  if cs == nil or cs == '' then\n+    vim.api.nvim_echo({ { \"Option 'commentstring' is empty.\", 'WarningMsg' } }, true, {})\n+    return { left = '', right = '' }\n+  end\n+\n+  if not (type(cs) == 'string' and string.find(cs, '%%s') ~= nil) then\n+    error(vim.inspect(cs) .. \" is not a valid 'commentstring'.\")\n+  end\n+\n+  -- Structure of 'commentstring': <left part> <%s> <right part>\n+  local left, right = string.match(cs, '^(.-)%%s(.-)$')\n+  return { left = left, right = right }\n+end\n+\n+---@param parts vim._comment.Parts\n+---@return fun(line: string): boolean\n+local function make_comment_check(parts)\n+  local l_esc, r_esc = vim.pesc(parts.left), vim.pesc(parts.right)\n+\n+  -- Commented line has the following structure:\n+  -- <possible whitespace> <left> <anything> <right> <possible whitespace>\n+  local nonblank_regex = '^%s-' .. l_esc .. '.*' .. r_esc .. '%s-$'\n+\n+  -- Commented blank line can have any amoung of whitespace around parts\n+  local blank_regex = '^%s-' .. vim.trim(l_esc) .. '%s*' .. vim.trim(r_esc) .. '%s-$'\n+\n+  return function(line)\n+    return string.find(line, nonblank_regex) ~= nil or string.find(line, blank_regex) ~= nil\n+  end\n+end\n+\n+---@param lines string[]\n+---@param parts vim._comment.Parts\n+---@return string indent\n+---@return boolean is_commented\n+local function get_lines_info(lines, parts)\n+  local comment_check = make_comment_check(parts)\n+\n+  local is_commented = true\n+  local indent_width, indent_width_cur = math.huge, math.huge\n+  ---@type integer\n+  local indent\n+  ---@type integer\n+  local indent_cur\n+\n+  for _, l in ipairs(lines) do\n+    -- Update lines indent: minimum of all indents except blank lines\n+    ---@diagnostic disable-next-line:cast-local-type\n+    _, indent_width_cur, indent_cur = string.find(l, '^(%s*)')\n+    local is_blank = indent_width_cur == string.len(l)\n+\n+    -- NOTE: Copying actual indent instead of recreating it with `indent_width`\n+    -- allows to handle both tabs and spaces\n+    if indent_width_cur < indent_width and not is_blank then\n+      ---@diagnostic disable-next-line:cast-local-type\n+      indent_width, indent = indent_width_cur, indent_cur\n+    end\n+\n+    -- Update comment info: lines are commented if every line is commented\n+    if is_commented then\n+      is_commented = comment_check(l)\n+    end\n+  end\n+\n+  -- `indent` can still be `nil` in case all `lines` are empty\n+  return indent or '', is_commented\n+end\n+\n+---@param x string\n+---@return boolean is_blank\n+local function is_blank(x)\n+  return string.find(x, '^%s*$') ~= nil\n+end\n+\n+---@param parts vim._comment.Parts\n+---@param indent string\n+---@return fun(line: string): string\n+local function make_comment_function(parts, indent)\n+  local prefix, nonindent_start, suffix = indent .. parts.left, string.len(indent) + 1, parts.right\n+  local blank_comment = indent .. vim.trim(parts.left) .. vim.trim(parts.right)\n+\n+  return function(line)\n+    if is_blank(line) then\n+      return blank_comment\n+    end\n+    return prefix .. string.sub(line, nonindent_start) .. suffix\n+  end\n+end\n+\n+---@param parts vim._comment.Parts\n+---@return fun(line: string): string\n+local function make_uncomment_function(parts)\n+  local l_esc, r_esc = vim.pesc(parts.left), vim.pesc(parts.right)\n+  local nonblank_regex = '^(%s*)' .. l_esc .. '(.*)' .. r_esc .. '(%s-)$'\n+  local blank_regex = '^(%s*)' .. vim.trim(l_esc) .. '(%s*)' .. vim.trim(r_esc) .. '(%s-)$'\n+\n+  return function(line)\n+    -- Try both non-blank and blank regexes\n+    local indent, new_line, trail = string.match(line, nonblank_regex)\n+    if new_line == nil then\n+      indent, new_line, trail = string.match(line, blank_regex)\n+    end\n+\n+    -- Return original if line is not commented\n+    if new_line == nil then\n+      return line\n+    end\n+\n+    -- Prevent trailing whitespace\n+    if is_blank(new_line) then\n+      indent, trail = '', ''\n+    end\n+\n+    return indent .. new_line .. trail\n+  end\n+end\n+\n+---@param line_start integer\n+---@param line_end integer\n+---@param ref_position? integer[]\n+local function toggle_lines(line_start, line_end, ref_position)\n+  ref_position = ref_position or { line_start, 0 }\n+  local parts = make_comment_parts(ref_position)\n+  local lines = vim.api.nvim_buf_get_lines(0, line_start - 1, line_end, false)\n+  local indent, is_comment = get_lines_info(lines, parts)\n+\n+  local f = is_comment and make_uncomment_function(parts) or make_comment_function(parts, indent)\n+\n+  -- Direct `nvim_buf_set_lines()` essentially removes both regular and\n+  -- extended marks  (squashes to empty range at either side of the region)\n+  -- inside region. Use 'lockmarks' to preserve regular marks.\n+  -- Preserving extmarks is not a universally good thing to do:\n+  -- - Good for non-highlighting in text area extmarks (like showing signs).\n+  -- - Debatable for highlighting in text area (like LSP semantic tokens).\n+  --   Mostly because it causes flicker as highlighting is preserved during\n+  --   comment toggling.\n+  _G._from, _G._to, _G._lines = line_start - 1, line_end, vim.tbl_map(f, lines)",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552157113",
            "id": 1552157113,
            "in_reply_to_id": 1552057291,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5chAm5",
            "original_commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "original_line": 193,
            "original_position": 193,
            "original_start_line": null,
            "path": "runtime/lua/vim/_comment.lua",
            "position": null,
            "pull_request_review_id": 1980727672,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552157113/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-04T17:47:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552157113",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552157484"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552157484"
                }
            },
            "author_association": "MEMBER",
            "body": "Added short descriptions to all functions (just in case).",
            "commit_id": "ef93981ae37486af5d9219636436fb2fe4ccaa69",
            "created_at": "2024-04-04T17:47:44Z",
            "diff_hunk": "@@ -0,0 +1,252 @@\n+---@nodoc\n+---@class vim._comment.Parts\n+---@field left string Left part of comment\n+---@field right string Right part of comment\n+\n+---@param ref_position integer[]\n+---@return string\n+local function get_commentstring(ref_position)\n+  local buf_cs = vim.bo.commentstring\n+\n+  local has_ts_parser, ts_parser = pcall(vim.treesitter.get_parser)\n+  if not has_ts_parser then\n+    return buf_cs\n+  end\n+\n+  -- Try to get 'commentstring' associated with local tree-sitter language.\n+  -- This is useful for injected languages (like markdown with code blocks).\n+  local row, col = ref_position[1] - 1, ref_position[2]\n+  local ref_range = { row, col, row, col + 1 }\n+\n+  -- - Get 'commentstring' from the deepest LanguageTree which both contains\n+  --   reference range and has valid 'commentstring' (meaning it has at least\n+  --   one associated 'filetype' with valid 'commentstring').\n+  --   In simple cases using `parser:language_for_range()` would be enough, but\n+  --   it fails for languages without valid 'commentstring' (like 'comment').\n+  local ts_cs, res_level = nil, 0\n+\n+  ---@param lang_tree vim.treesitter.LanguageTree\n+  local function traverse(lang_tree, level)\n+    if not lang_tree:contains(ref_range) then\n+      return\n+    end\n+\n+    local lang = lang_tree:lang()\n+    local filetypes = vim.treesitter.language.get_filetypes(lang)\n+    for _, ft in ipairs(filetypes) do\n+      local cur_cs = vim.filetype.get_option(ft, 'commentstring')\n+      if type(cur_cs) == 'string' and cur_cs ~= '' and level > res_level then\n+        ts_cs = cur_cs\n+      end\n+    end\n+\n+    for _, child_lang_tree in pairs(lang_tree:children()) do\n+      traverse(child_lang_tree, level + 1)\n+    end\n+  end\n+  traverse(ts_parser, 1)\n+\n+  return ts_cs or buf_cs\n+end\n+\n+---@param ref_position integer[]\n+---@return vim._comment.Parts\n+local function make_comment_parts(ref_position)\n+  local cs = get_commentstring(ref_position)\n+\n+  if cs == nil or cs == '' then\n+    vim.api.nvim_echo({ { \"Option 'commentstring' is empty.\", 'WarningMsg' } }, true, {})\n+    return { left = '', right = '' }\n+  end\n+\n+  if not (type(cs) == 'string' and string.find(cs, '%%s') ~= nil) then\n+    error(vim.inspect(cs) .. \" is not a valid 'commentstring'.\")\n+  end\n+\n+  -- Structure of 'commentstring': <left part> <%s> <right part>\n+  local left, right = string.match(cs, '^(.-)%%s(.-)$')\n+  return { left = left, right = right }\n+end\n+\n+---@param parts vim._comment.Parts\n+---@return fun(line: string): boolean\n+local function make_comment_check(parts)\n+  local l_esc, r_esc = vim.pesc(parts.left), vim.pesc(parts.right)\n+\n+  -- Commented line has the following structure:\n+  -- <possible whitespace> <left> <anything> <right> <possible whitespace>\n+  local nonblank_regex = '^%s-' .. l_esc .. '.*' .. r_esc .. '%s-$'\n+\n+  -- Commented blank line can have any amoung of whitespace around parts\n+  local blank_regex = '^%s-' .. vim.trim(l_esc) .. '%s*' .. vim.trim(r_esc) .. '%s-$'\n+\n+  return function(line)\n+    return string.find(line, nonblank_regex) ~= nil or string.find(line, blank_regex) ~= nil\n+  end\n+end\n+\n+---@param lines string[]\n+---@param parts vim._comment.Parts\n+---@return string indent\n+---@return boolean is_commented\n+local function get_lines_info(lines, parts)\n+  local comment_check = make_comment_check(parts)\n+\n+  local is_commented = true\n+  local indent_width, indent_width_cur = math.huge, math.huge\n+  ---@type integer\n+  local indent\n+  ---@type integer\n+  local indent_cur\n+\n+  for _, l in ipairs(lines) do\n+    -- Update lines indent: minimum of all indents except blank lines\n+    ---@diagnostic disable-next-line:cast-local-type\n+    _, indent_width_cur, indent_cur = string.find(l, '^(%s*)')\n+    local is_blank = indent_width_cur == string.len(l)\n+\n+    -- NOTE: Copying actual indent instead of recreating it with `indent_width`\n+    -- allows to handle both tabs and spaces\n+    if indent_width_cur < indent_width and not is_blank then\n+      ---@diagnostic disable-next-line:cast-local-type\n+      indent_width, indent = indent_width_cur, indent_cur\n+    end\n+\n+    -- Update comment info: lines are commented if every line is commented\n+    if is_commented then\n+      is_commented = comment_check(l)\n+    end\n+  end\n+\n+  -- `indent` can still be `nil` in case all `lines` are empty\n+  return indent or '', is_commented\n+end\n+\n+---@param x string\n+---@return boolean is_blank\n+local function is_blank(x)\n+  return string.find(x, '^%s*$') ~= nil\n+end\n+\n+---@param parts vim._comment.Parts\n+---@param indent string\n+---@return fun(line: string): string\n+local function make_comment_function(parts, indent)\n+  local prefix, nonindent_start, suffix = indent .. parts.left, string.len(indent) + 1, parts.right\n+  local blank_comment = indent .. vim.trim(parts.left) .. vim.trim(parts.right)\n+\n+  return function(line)\n+    if is_blank(line) then\n+      return blank_comment\n+    end\n+    return prefix .. string.sub(line, nonindent_start) .. suffix\n+  end\n+end\n+\n+---@param parts vim._comment.Parts\n+---@return fun(line: string): string\n+local function make_uncomment_function(parts)",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552157484",
            "id": 1552157484,
            "in_reply_to_id": 1552083225,
            "line": 154,
            "node_id": "PRRC_kwDOAPphoM5chAss",
            "original_commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "original_line": 154,
            "original_position": 148,
            "original_start_line": null,
            "path": "runtime/lua/vim/_comment.lua",
            "position": 154,
            "pull_request_review_id": 1980728249,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552157484/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-04T17:47:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552157484",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552158277"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552158277"
                }
            },
            "author_association": "MEMBER",
            "body": "Moved documentation to 'various.txt' (although it has not the best formatting rules, in my opinion).",
            "commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "created_at": "2024-04-04T17:48:14Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552158277",
            "id": 1552158277,
            "in_reply_to_id": 1552087677,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM5chA5F",
            "original_commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/doc/commenting.txt",
            "position": 1,
            "pull_request_review_id": 1980729380,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552158277/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2024-04-04T17:48:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552158277",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552169116"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552169116"
                }
            },
            "author_association": "MEMBER",
            "body": "Possible followup: this could be more broadly useful refactored as a `vim.treesitter.get_local_option('commentstring', position)`.",
            "commit_id": "ef93981ae37486af5d9219636436fb2fe4ccaa69",
            "created_at": "2024-04-04T17:52:18Z",
            "diff_hunk": "@@ -0,0 +1,264 @@\n+---@nodoc\n+---@class vim._comment.Parts\n+---@field left string Left part of comment\n+---@field right string Right part of comment\n+\n+--- Get 'commentstring' at cursor\n+---@param ref_position integer[]\n+---@return string\n+local function get_commentstring(ref_position)",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552169116",
            "id": 1552169116,
            "line": 9,
            "node_id": "PRRC_kwDOAPphoM5chDic",
            "original_commit_id": "fbb2f505408a53c6c0547657bd7f26d7de1f47b5",
            "original_line": 9,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/lua/vim/_comment.lua",
            "position": 9,
            "pull_request_review_id": 1980742681,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552169116/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-04T17:52:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552169116",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552180216"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552180216"
                }
            },
            "author_association": "MEMBER",
            "body": "> plug-in\r\n\r\nUgh. Let's not continue this convention please. Anyone, now I know. Thanks for the info.",
            "commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "created_at": "2024-04-04T17:57:18Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552180216",
            "id": 1552180216,
            "in_reply_to_id": 1552087677,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM5chGP4",
            "original_commit_id": "979624d571690e49ca2b97417048952e83358d49",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/doc/commenting.txt",
            "position": 1,
            "pull_request_review_id": 1980757209,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 3,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552180216/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2024-04-04T17:57:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552180216",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552205714"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552205714"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nthe status of consecutive lines: if all lines are commented then uncomment them,\r\n```",
            "commit_id": "ef93981ae37486af5d9219636436fb2fe4ccaa69",
            "created_at": "2024-04-04T18:14:29Z",
            "diff_hunk": "@@ -557,5 +557,34 @@ LessInitFunc in your vimrc, for example: >\n \t  set nocursorcolumn nocursorline\n \tendfunc\n <\n+==============================================================================\n+3. Commenting\t\t\t\t\t\t\t*commenting*\n+\n+Nvim supports commenting and uncommenting per line. It is done by toggling\n+the status of consecutive lines: if all lines are commented - uncomment them,",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552205714",
            "id": 1552205714,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5chMeS",
            "original_commit_id": "b219a3687fb8f7d31f2d1eff0c8d85cee8cd40e6",
            "original_line": 564,
            "original_position": 8,
            "original_start_line": null,
            "path": "runtime/doc/various.txt",
            "position": null,
            "pull_request_review_id": 1980796347,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552205714/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-04T18:19:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552205714",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552206234"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552206234"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nCommenting a line is done by inserting the left comment part at the appropriate indent\r\n```",
            "commit_id": "ef93981ae37486af5d9219636436fb2fe4ccaa69",
            "created_at": "2024-04-04T18:15:03Z",
            "diff_hunk": "@@ -557,5 +557,34 @@ LessInitFunc in your vimrc, for example: >\n \t  set nocursorcolumn nocursorline\n \tendfunc\n <\n+==============================================================================\n+3. Commenting\t\t\t\t\t\t\t*commenting*\n+\n+Nvim supports commenting and uncommenting per line. It is done by toggling\n+the status of consecutive lines: if all lines are commented - uncomment them,\n+comment otherwise.\n+\n+Comment structure is directly inferred from 'commentstring' at cursor: text\n+before and after `%s` is taken as left and right part of comment.\n+\n+Commenting line is done by inserting left comment part at appropriate indent",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552206234",
            "id": 1552206234,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5chMma",
            "original_commit_id": "b219a3687fb8f7d31f2d1eff0c8d85cee8cd40e6",
            "original_line": 570,
            "original_position": 14,
            "original_start_line": null,
            "path": "runtime/doc/various.txt",
            "position": null,
            "pull_request_review_id": 1980796347,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552206234/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-04T18:19:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552206234",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552206879"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552206879"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nUncommenting is done by removing left and right parts from the start and end of\r\n```",
            "commit_id": "ef93981ae37486af5d9219636436fb2fe4ccaa69",
            "created_at": "2024-04-04T18:15:36Z",
            "diff_hunk": "@@ -557,5 +557,34 @@ LessInitFunc in your vimrc, for example: >\n \t  set nocursorcolumn nocursorline\n \tendfunc\n <\n+==============================================================================\n+3. Commenting\t\t\t\t\t\t\t*commenting*\n+\n+Nvim supports commenting and uncommenting per line. It is done by toggling\n+the status of consecutive lines: if all lines are commented - uncomment them,\n+comment otherwise.\n+\n+Comment structure is directly inferred from 'commentstring' at cursor: text\n+before and after `%s` is taken as left and right part of comment.\n+\n+Commenting line is done by inserting left comment part at appropriate indent\n+and right part at line's end.\n+Uncommenting is done by removing left and right parts from start and end of",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552206879",
            "id": 1552206879,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5chMwf",
            "original_commit_id": "b219a3687fb8f7d31f2d1eff0c8d85cee8cd40e6",
            "original_line": 572,
            "original_position": 16,
            "original_start_line": null,
            "path": "runtime/doc/various.txt",
            "position": null,
            "pull_request_review_id": 1980796347,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552206879/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-04T18:19:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552206879",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552209953"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552209953"
                }
            },
            "author_association": "MEMBER",
            "body": "I have to admit that I found this explanation not really helpful. Maybe consider expanding (explaining the structure of `commentstring`, giving an example) or just leaving this out as self-evident?\r\n\r\nI think the most important part of the documentation is how it decides whether to comment, uncomment, or leave alone(?), so maybe just focus on that? (The specifics _how_ things are commented are not so important; I think it behaves exactly as people expect, modulo some edge cases which would be too tedious to document here.)",
            "commit_id": "ef93981ae37486af5d9219636436fb2fe4ccaa69",
            "created_at": "2024-04-04T18:18:21Z",
            "diff_hunk": "@@ -557,5 +557,34 @@ LessInitFunc in your vimrc, for example: >\n \t  set nocursorcolumn nocursorline\n \tendfunc\n <\n+==============================================================================\n+3. Commenting\t\t\t\t\t\t\t*commenting*\n+\n+Nvim supports commenting and uncommenting per line. It is done by toggling\n+the status of consecutive lines: if all lines are commented - uncomment them,\n+comment otherwise.\n+\n+Comment structure is directly inferred from 'commentstring' at cursor: text\n+before and after `%s` is taken as left and right part of comment.\n+\n+Commenting line is done by inserting left comment part at appropriate indent\n+and right part at line's end.\n+Uncommenting is done by removing left and right parts from start and end of\n+line (ignoring whitespace).\n+Blank lines are also commented and uncommented with trimmed versions of\n+comment parts for a more intuitive experience.",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552209953",
            "id": 1552209953,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5chNgh",
            "original_commit_id": "b219a3687fb8f7d31f2d1eff0c8d85cee8cd40e6",
            "original_line": 575,
            "original_position": 19,
            "original_start_line": null,
            "path": "runtime/doc/various.txt",
            "position": null,
            "pull_request_review_id": 1980796347,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552209953/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-04T18:19:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552209953",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552210337"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552210337"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\ngc{motion}\t\tToggle comment for lines over {motion}.\r\n```\r\n(and similarly below).",
            "commit_id": "ef93981ae37486af5d9219636436fb2fe4ccaa69",
            "created_at": "2024-04-04T18:18:45Z",
            "diff_hunk": "@@ -557,5 +557,34 @@ LessInitFunc in your vimrc, for example: >\n \t  set nocursorcolumn nocursorline\n \tendfunc\n <\n+==============================================================================\n+3. Commenting\t\t\t\t\t\t\t*commenting*\n+\n+Nvim supports commenting and uncommenting per line. It is done by toggling\n+the status of consecutive lines: if all lines are commented - uncomment them,\n+comment otherwise.\n+\n+Comment structure is directly inferred from 'commentstring' at cursor: text\n+before and after `%s` is taken as left and right part of comment.\n+\n+Commenting line is done by inserting left comment part at appropriate indent\n+and right part at line's end.\n+Uncommenting is done by removing left and right parts from start and end of\n+line (ignoring whitespace).\n+Blank lines are also commented and uncommented with trimmed versions of\n+comment parts for a more intuitive experience.\n+\n+\t\t\t\t\t\t\t*gc*\n+gc{motion}\t\tToggle lines over {motion}.",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552210337",
            "id": 1552210337,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5chNmh",
            "original_commit_id": "b219a3687fb8f7d31f2d1eff0c8d85cee8cd40e6",
            "original_line": 578,
            "original_position": 22,
            "original_start_line": null,
            "path": "runtime/doc/various.txt",
            "position": null,
            "pull_request_review_id": 1980796347,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552210337/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-04T18:19:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552210337",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552227887"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552227887"
                }
            },
            "author_association": "MEMBER",
            "body": "One reason I did not use that is because \"Toggle comment for lines\" does not sound as good wording for new users. It can be \"Toggle commented status of lines\", but this is too much. So decided to leave at just \"Toggle\" which is described in the first line.",
            "commit_id": "ef93981ae37486af5d9219636436fb2fe4ccaa69",
            "created_at": "2024-04-04T18:30:55Z",
            "diff_hunk": "@@ -557,5 +557,34 @@ LessInitFunc in your vimrc, for example: >\n \t  set nocursorcolumn nocursorline\n \tendfunc\n <\n+==============================================================================\n+3. Commenting\t\t\t\t\t\t\t*commenting*\n+\n+Nvim supports commenting and uncommenting per line. It is done by toggling\n+the status of consecutive lines: if all lines are commented - uncomment them,\n+comment otherwise.\n+\n+Comment structure is directly inferred from 'commentstring' at cursor: text\n+before and after `%s` is taken as left and right part of comment.\n+\n+Commenting line is done by inserting left comment part at appropriate indent\n+and right part at line's end.\n+Uncommenting is done by removing left and right parts from start and end of\n+line (ignoring whitespace).\n+Blank lines are also commented and uncommented with trimmed versions of\n+comment parts for a more intuitive experience.\n+\n+\t\t\t\t\t\t\t*gc*\n+gc{motion}\t\tToggle lines over {motion}.",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552227887",
            "id": 1552227887,
            "in_reply_to_id": 1552210337,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5chR4v",
            "original_commit_id": "b219a3687fb8f7d31f2d1eff0c8d85cee8cd40e6",
            "original_line": 578,
            "original_position": 22,
            "original_start_line": null,
            "path": "runtime/doc/various.txt",
            "position": null,
            "pull_request_review_id": 1980831609,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552227887/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-04T18:30:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552227887",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552268593"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552268593"
                }
            },
            "author_association": "MEMBER",
            "body": "I've replaced this paragraph with examples.",
            "commit_id": "ef93981ae37486af5d9219636436fb2fe4ccaa69",
            "created_at": "2024-04-04T18:58:10Z",
            "diff_hunk": "@@ -557,5 +557,34 @@ LessInitFunc in your vimrc, for example: >\n \t  set nocursorcolumn nocursorline\n \tendfunc\n <\n+==============================================================================\n+3. Commenting\t\t\t\t\t\t\t*commenting*\n+\n+Nvim supports commenting and uncommenting per line. It is done by toggling\n+the status of consecutive lines: if all lines are commented - uncomment them,\n+comment otherwise.\n+\n+Comment structure is directly inferred from 'commentstring' at cursor: text\n+before and after `%s` is taken as left and right part of comment.\n+\n+Commenting line is done by inserting left comment part at appropriate indent\n+and right part at line's end.\n+Uncommenting is done by removing left and right parts from start and end of\n+line (ignoring whitespace).\n+Blank lines are also commented and uncommented with trimmed versions of\n+comment parts for a more intuitive experience.",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552268593",
            "id": 1552268593,
            "in_reply_to_id": 1552209953,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5chb0x",
            "original_commit_id": "b219a3687fb8f7d31f2d1eff0c8d85cee8cd40e6",
            "original_line": 575,
            "original_position": 19,
            "original_start_line": null,
            "path": "runtime/doc/various.txt",
            "position": null,
            "pull_request_review_id": 1980893929,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552268593/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-04T18:58:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552268593",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1552594000"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552594000"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  -- NOTE: This leverages bundled Vimscript and Lua tree-sitter parsers\r\n  api.nvim_set_option_value('filetype', 'vim', { buf = 0 })\r\n  exec_lua('vim.treesitter.start()')\r\nend\r\n\r\nbefore_each(function()\r\n  clear({ args_rm = { '--cmd' }, args = { '--clean' } })\r\nend)\r\n\r\ndescribe('commenting', function()\r\n  before_each(function()\r\n    set_lines(example_lines)\r\n    set_commentstring('# %s')\r\n```",
            "commit_id": "ef93981ae37486af5d9219636436fb2fe4ccaa69",
            "created_at": "2024-04-04T23:44:14Z",
            "diff_hunk": "@@ -0,0 +1,644 @@\n+local helpers = require('test.functional.helpers')(after_each)\n+\n+local api = helpers.api\n+local clear = helpers.clear\n+local command = helpers.command\n+local eq = helpers.eq\n+local exec_capture = helpers.exec_capture\n+local exec_lua = helpers.exec_lua\n+local feed = helpers.feed\n+\n+-- Reference text\n+-- aa\n+--  aa\n+--   aa\n+--\n+--   aa\n+--  aa\n+-- aa\n+local example_lines = { 'aa', ' aa', '  aa', '', '  aa', ' aa', 'aa' }\n+\n+local set_commentstring = function(commentstring)\n+  api.nvim_set_option_value('commentstring', commentstring, { buf = 0 })\n+end\n+\n+local get_lines = function(from, to)\n+  from, to = from or 0, to or -1\n+  return api.nvim_buf_get_lines(0, from, to, false)\n+end\n+\n+local set_lines = function(lines, from, to)\n+  from, to = from or 0, to or -1\n+  api.nvim_buf_set_lines(0, from, to, false, lines)\n+end\n+\n+local set_cursor = function(row, col)\n+  api.nvim_win_set_cursor(0, { row, col })\n+end\n+\n+local get_cursor = function()\n+  return api.nvim_win_get_cursor(0)\n+end\n+\n+local setup_treesitter = function()\n+  command('filetype plugin on')\n+  -- NOTE: This leverages bundled Vimscript and Lua tree-sitter parsers\n+  api.nvim_set_option_value('filetype', 'vim', { buf = 0 })\n+  exec_lua('vim.treesitter.start()')\n+end\n+\n+before_each(clear)\n+\n+describe('commenting', function()\n+  before_each(function()\n+    set_lines(example_lines)\n+    set_commentstring('# %s')\n+    command('source $VIMRUNTIME/lua/vim/_defaults.lua')",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1552594000",
            "id": 1552594000,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5cirRQ",
            "original_commit_id": "c77da43f392ee5bf5ff0658261a77ffd72a852f4",
            "original_line": 56,
            "original_position": 56,
            "original_start_line": 44,
            "path": "test/functional/lua/comment_spec.lua",
            "position": null,
            "pull_request_review_id": 1981394268,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552594000/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-04-04T23:44:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1552594000",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28176#discussion_r1553376578"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28176"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1553376578"
                }
            },
            "author_association": "MEMBER",
            "body": "Thanks! I was struggling with proper initialization of child process and this was the best solution I could find.",
            "commit_id": "ef93981ae37486af5d9219636436fb2fe4ccaa69",
            "created_at": "2024-04-05T10:36:42Z",
            "diff_hunk": "@@ -0,0 +1,644 @@\n+local helpers = require('test.functional.helpers')(after_each)\n+\n+local api = helpers.api\n+local clear = helpers.clear\n+local command = helpers.command\n+local eq = helpers.eq\n+local exec_capture = helpers.exec_capture\n+local exec_lua = helpers.exec_lua\n+local feed = helpers.feed\n+\n+-- Reference text\n+-- aa\n+--  aa\n+--   aa\n+--\n+--   aa\n+--  aa\n+-- aa\n+local example_lines = { 'aa', ' aa', '  aa', '', '  aa', ' aa', 'aa' }\n+\n+local set_commentstring = function(commentstring)\n+  api.nvim_set_option_value('commentstring', commentstring, { buf = 0 })\n+end\n+\n+local get_lines = function(from, to)\n+  from, to = from or 0, to or -1\n+  return api.nvim_buf_get_lines(0, from, to, false)\n+end\n+\n+local set_lines = function(lines, from, to)\n+  from, to = from or 0, to or -1\n+  api.nvim_buf_set_lines(0, from, to, false, lines)\n+end\n+\n+local set_cursor = function(row, col)\n+  api.nvim_win_set_cursor(0, { row, col })\n+end\n+\n+local get_cursor = function()\n+  return api.nvim_win_get_cursor(0)\n+end\n+\n+local setup_treesitter = function()\n+  command('filetype plugin on')\n+  -- NOTE: This leverages bundled Vimscript and Lua tree-sitter parsers\n+  api.nvim_set_option_value('filetype', 'vim', { buf = 0 })\n+  exec_lua('vim.treesitter.start()')\n+end\n+\n+before_each(clear)\n+\n+describe('commenting', function()\n+  before_each(function()\n+    set_lines(example_lines)\n+    set_commentstring('# %s')\n+    command('source $VIMRUNTIME/lua/vim/_defaults.lua')",
            "html_url": "https://github.com/neovim/neovim/pull/28176#discussion_r1553376578",
            "id": 1553376578,
            "in_reply_to_id": 1552594000,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5clqVC",
            "original_commit_id": "c77da43f392ee5bf5ff0658261a77ffd72a852f4",
            "original_line": 56,
            "original_position": 56,
            "original_start_line": 44,
            "path": "test/functional/lua/comment_spec.lua",
            "position": null,
            "pull_request_review_id": 1982686281,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1553376578/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-04-05T10:36:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1553376578",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "(Links in commit messages can get _very_ spammy, though.)",
            "created_at": "2024-04-04T17:50:11Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2037830028",
            "id": 2037830028,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM55dtGM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2037830028/reactions"
            },
            "updated_at": "2024-04-04T17:50:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2037830028",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "<s>One thing to note for a future reference. This PR might introduce errors after `:helptags ALL` if users have ['tpope/vim-commentary'](https://github.com/tpope/vim-commentary) installed (maybe other similar plugins), as there will be duplicating tags. As tag style used in this PR is consistent with what is used in core, I think it is worth leaving as is.</s>\r\n\r\nThis is now resolved by using `-default` suffix for mappings' tags.",
            "created_at": "2024-04-04T17:56:54Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2037844281",
            "id": 2037844281,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM55dwk5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 5,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 5,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2037844281/reactions"
            },
            "updated_at": "2024-04-05T15:46:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2037844281",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Nicely done. Testability is a strong reason for including this impl.\r\n\r\nThanks :pray:!\r\n\r\n> > supports tree-sitter by computing 'commentstring' option under cursor, which can matter in presence of tree-sitter injected languages.\r\n> > ...\r\n> > comments and uncomments blank lines while 'tpope/vim-commentary' does not. ... more intuitive experience\r\n> \r\n> These are worth mentioning briefly in the help, IMO.\r\n\r\nThe first one is already mentioned with \"... 'commentstring' at cursor\". I'd leave it at that. <s>Added about commenting blank lines.</s> Added usage examples which include empty line, so this should make more evident how commenting is done on empty/blank lines.\r\n\r\n> P.S. Please include the PR description in the commit message.\r\n\r\nWill add a stripped down version during later squash.",
            "created_at": "2024-04-04T18:14:12Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2037879865",
            "id": 2037879865,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM55d5Q5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2037879865/reactions"
            },
            "updated_at": "2024-04-04T18:59:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2037879865",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I'm very excited to finally see this feature included. Thanks @echasnovski for once again providing an excellent contribution.\r\n\r\nHowever, I have one concern about this:\r\n\r\n>This PR comments and uncomments blank lines while 'tpope/vim-commentary' does not.\r\nIt is a carefully thought through decision for a more intuitive experience at a cost of extra rules for how blank lines should be commented/uncommented.\r\n\r\nI disagree that this is more intuitive, and in fact I would argue it's the opposite, in particular when un-commenting. Consider this example:\r\n\r\n```c\r\n// int x = foo();\r\n\r\n// int y = bar(x);\r\n```\r\n\r\nThe 2nd line is a blank line: there are no characters in it all. If I use the \"toggle comment\" operation on these 3 lines, what I get is the following:\r\n\r\n```c\r\n// // int x = foo();\r\n//\r\n// // int y = bar(x);\r\n```\r\n\r\nBut what I would expect to see is\r\n\r\n```c\r\nint x = foo();\r\n\r\nint y = bar(x);\r\n```\r\n\r\nThis is rather annoying because when this happens I have to toggle the comments on the region again to get back to the original state, and then manually use the \"toggle comment\" operator on each individual line. For 2 lines that may not be a big deal, but for a less contrived, real world use case where there many such lines/individual regions, it becomes much more annoying.\r\n\r\nI really feel strongly that this should not be the default behavior.",
            "created_at": "2024-04-05T00:41:25Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2038546250",
            "id": 2038546250,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM55gb9K",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 10,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 10,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2038546250/reactions"
            },
            "updated_at": "2024-04-05T00:41:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2038546250",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> This is rather annoying because when this happens I have to toggle the comments on the region again to get back to the original state, and then manually use the \"toggle comment\" operator on each individual line. For 2 lines that may not be a big deal, but for a less contrived, real world use case where there many such lines/individual regions, it becomes much more annoying.\r\n\r\nThis situation, assuming continuous usage of suggested commenting, can happen if user toggled comment for those lines separately. In this case it is reasonable to expect for them to be also uncommented separately.\r\n\r\nI argue that commenting whole regions at once is more common than doing it line by line. So middle blank line would have been commented to begin with.\r\n\r\n> I really feel strongly that this should not be the default behavior.\r\n\r\nUnfortunately, I feel strongly that this should be the default behavior.\r\n\r\nIts only downside is that toggling twice a blank non-empty line converts it to empty, which I argue is even a good side-effect.\r\n\r\nThe benefits of commenting blank lines are:\r\n- It shows visible intent of which block waa originally commented. This really helps when going back to commented code after a while and not having to figure out which blocks were commented in the first place (like if it already was adjacent to other commented text).\r\n- It makes textobject *much* more intuitive to reason about and easier to implement. Otherwise for better use it should cleverly ignore blank lines when computing range.",
            "created_at": "2024-04-05T06:34:33Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2039048241",
            "id": 2039048241,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM55iWgx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 4,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2039048241/reactions"
            },
            "updated_at": "2024-04-05T06:34:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2039048241",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "For the record, I'm in @gpanders camp here, personally. Although I don't care enough to block the PR on this, it's good to have this discussion explicitly and no matter what the end result is, document it. (I found \"carefully thought through decision for a more intuitive experience\" too vague myself but knew from previous discussions that it was about the text object.)",
            "created_at": "2024-04-05T07:04:54Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2039100139",
            "id": 2039100139,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM55ijLr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2039100139/reactions"
            },
            "updated_at": "2024-04-05T07:04:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2039100139",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "One possible compromise would be to break symmetry: \r\n1. comment out blank lines\r\n2. ignore blank lines when _uncommenting_ (i.e., when deciding whether to comment or uncomment a block).\r\n\r\nOne thing to keep in mind is that \r\n\r\n> I argue that commenting whole regions at once is more common than doing it line by line. So middle blank line would have been commented to begin with.\r\n\r\nis a fallacy, since you often have to work with already commented code from other people.\r\n\r\n\r\nSecond alternative -- if we absolutely can't get consensus -- is to add an option for this, just like mini.comment already has. I'd prefer if we could do without, but if that's the price of adding this feature, it'd be worth it.",
            "created_at": "2024-04-05T07:27:13Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2039136523",
            "id": 2039136523,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM55isEL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2039136523/reactions"
            },
            "updated_at": "2024-04-05T07:28:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2039136523",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I wasn't aware of this and I also strongly agree with @gpanders . \n\nI thought the goal here was to include a Lua version of vim-commentary, which is what a large percentage of the vim/nvim user base has grown accustomed too.",
            "created_at": "2024-04-05T07:27:28Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2039136883",
            "id": 2039136883,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM55isJz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2039136883/reactions"
            },
            "updated_at": "2024-04-05T07:28:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2039136883",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I wasn't aware of this and I also strongly agree with @gpanders .\r\n> \r\n> I thought the goal here was to include a Lua version of vim-commentary, which is what a large percentage of the vim/nvim user base has grown accustomed too.\r\n\r\nThe goal here was to include a 'mini.comment' port, which is *explicitly* stated very close to top of the initial comment. With an *explicit* mention of this issue in the later comparison because I knew it might be a big deal.\r\n\r\nI would also say (in the same spirit) that a large percentage of Neovim user base has grown accustomed to have blank lines commented as both 'mini.comment' and 'NumToStr/Comment.nvim' have this enabled by default.\r\n\r\n> One possible compromise would be to break symmetry:\r\n\r\nI don't think breaking a symmetry is a good idea as it would break commutativity: \"comment-uncomment\" will return to initial lines (if empty lines included) while \"uncomment-comment\" will not.\r\n\r\n> One thing to keep in mind is that\r\n> \r\n> > I argue that commenting whole regions at once is more common than doing it line by line. So middle blank line would have been commented to begin with.\r\n> \r\n> is a fallacy, since you often have to work with already commented code from other people.\r\n\r\nIt is not as big of a statement to be called fallacy. Mostly because many more issues can arise if previous editing by other people are taken into account. For example, different comment structure could have been used and uncommenting will not work as expected (if at all).\r\n\r\n------\r\n\r\n> Second alternative -- if we absolutely can't get consensus -- is to add an option for this, just like mini.comment already has. I'd prefer if we could do without, but if that's the price of adding this feature, it'd be worth it.\r\n\r\nFrom my side I'll say the following. I would like to not be associated with a contribution which does not include possibility of commenting blank lines. Having it configurable is fine by me, but it will open another can of worms about how configuration is done.\r\n\r\nOne thing to add here is that forcing ignoring blank lines by default (with alternative behind an option) will disrupt synchronization of tests in this PR and 'mini.comment'. Which is a bit worth for long term maintainability.",
            "created_at": "2024-04-05T08:11:12Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2039215723",
            "id": 2039215723,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM55i_Zr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2039215723/reactions"
            },
            "updated_at": "2024-04-05T08:11:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2039215723",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I don't think breaking a symmetry is a good idea as it would break commutativity: \"comment-uncomment\" will return to initial lines (if empty lines included) while \"uncomment-comment\" will not.\r\n\r\nI'd be fine with that. Again, the use case in mind here (which _needs_ to be kept in mind) is working with pre-commented code; converting it to _your_ format (blank line commented) is a feature, not a problem.",
            "created_at": "2024-04-05T08:15:17Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2039222778",
            "id": 2039222778,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM55jBH6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2039222778/reactions"
            },
            "updated_at": "2024-04-05T08:15:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2039222778",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The goal here was to include a 'mini.comment' port, which is explicitly stated very close to top of the initial comment. With an explicit mention of this issue in the later comparison because I knew it might be a big deal.\n\nOk, sorry for the confusion.\n\nIn that case we may want to reconsider #27999 and continue to let that author maintain it and us pull the changes like we do with other parts of the runtime.",
            "created_at": "2024-04-05T08:25:15Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2039234163",
            "id": 2039234163,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM55jD5z",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 1,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2039234163/reactions"
            },
            "updated_at": "2024-04-05T09:44:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2039234163",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "topology rules: the empty line is both commented and uncommented 😊",
            "created_at": "2024-04-05T09:13:26Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2039293247",
            "id": 2039293247,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM55jSU_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2039293247/reactions"
            },
            "updated_at": "2024-04-05T09:13:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2039293247",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > I don't think breaking a symmetry is a good idea as it would break commutativity: \"comment-uncomment\" will return to initial lines (if empty lines included) while \"uncomment-comment\" will not.\r\n> \r\n> I'd be fine with that. Again, the use case in mind here (which _needs_ to be kept in mind) is working with pre-commented code; converting it to _your_ format (blank line commented) is a feature, not a problem.\r\n\r\nAfter further (private) discussions and a little bit of tests, I now think that ignoring blank lines when deciding the toggle action is actually a better approach. As my main concern is that blank lines are commented to show intent and grouping behind adding comments. Textobject definition I'd leave as is (any blank line stops textobject region).\r\n\r\nTo be more clear, here is the current behavior in Lua file:\r\n- Original lines:\r\n\r\n```\r\n-- line 1\r\n\r\n-- line 3\r\n```\r\n\r\n- `gcG` from the first line:\r\n\r\n```\r\nline 1\r\n\r\nline 3\r\n```\r\n\r\n- Again `gcG` from the first line:\r\n\r\n```\r\n-- line 1\r\n--\r\n-- line 3\r\n```\r\n\r\n@gpanders, @lewis6991, does this behavior sound good enough?\r\n\r\n------\r\n\r\nI think I'll even update 'mini.comment' to follow this.",
            "created_at": "2024-04-05T09:17:04Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2039299762",
            "id": 2039299762,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM55jT6y",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 10,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 10,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2039299762/reactions"
            },
            "updated_at": "2024-04-05T09:17:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2039299762",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Here's a (untested) patch for the lockmarks binding:\r\n\r\n```patch\r\ndiff --git a/runtime/lua/vim/_comment.lua b/runtime/lua/vim/_comment.lua\r\nindex e9cd662c9..ee045d9ae 100644\r\n--- a/runtime/lua/vim/_comment.lua\r\n+++ b/runtime/lua/vim/_comment.lua\r\n@@ -197,14 +197,9 @@ local function toggle_lines(line_start, line_end, ref_position)\r\n   -- - Debatable for highlighting in text area (like LSP semantic tokens).\r\n   --   Mostly because it causes flicker as highlighting is preserved during\r\n   --   comment toggling.\r\n-  package.loaded['vim._comment']._lines = vim.tbl_map(f, lines)\r\n-  local lua_cmd = string.format(\r\n-    'vim.api.nvim_buf_set_lines(0, %d, %d, false, package.loaded[\"vim._comment\"]._lines)',\r\n-    line_start - 1,\r\n-    line_end\r\n-  )\r\n-  vim.cmd.lua({ lua_cmd, mods = { lockmarks = true } })\r\n-  package.loaded['vim._comment']._lines = nil\r\n+  local saved_lockmarks = vim._lockmarks(true)\r\n+  vim.api.nvim_buf_set_lines(0, line_start - 1, line_end, false, vim.tbl_map(f, lines))\r\n+  vim._lockmarks(saved_lockmarks)\r\n end\r\n \r\n --- Operator which toggles user-supplied range of lines\r\ndiff --git a/runtime/lua/vim/_meta.lua b/runtime/lua/vim/_meta.lua\r\nindex 731dd5b92..430b7ea0a 100644\r\n--- a/runtime/lua/vim/_meta.lua\r\n+++ b/runtime/lua/vim/_meta.lua\r\n@@ -34,3 +34,8 @@ vim.uri_from_fname = uri.uri_from_fname\r\n vim.uri_from_bufnr = uri.uri_from_bufnr\r\n vim.uri_to_fname = uri.uri_to_fname\r\n vim.uri_to_bufnr = uri.uri_to_bufnr\r\n+\r\n+--- @param value? boolean\r\n+--- @return boolean : The previous value of lockmarks\r\n+function vim._lockmarks(value)\r\n+end\r\ndiff --git a/src/nvim/lua/stdlib.c b/src/nvim/lua/stdlib.c\r\nindex a5262efcf..4814f65cf 100644\r\n--- a/src/nvim/lua/stdlib.c\r\n+++ b/src/nvim/lua/stdlib.c\r\n@@ -555,6 +555,22 @@ static int nlua_foldupdate(lua_State *lstate)\r\n   return 0;\r\n }\r\n \r\n+static int nlua_lockmarks(lua_State *lstate)\r\n+{\r\n+  const int save_lockmarks = cmdmod.cmod_flags & CMOD_LOCKMARKS;\r\n+\r\n+  if (lua_gettop(lstate) >= 1) {\r\n+    if (lua_toboolean(lstate, 1)) {\r\n+      cmdmod.cmod_flags |= CMOD_LOCKMARKS;\r\n+    } else {\r\n+      cmdmod.cmod_flags &= ~CMOD_LOCKMARKS;\r\n+    }\r\n+  }\r\n+\r\n+  lua_pushboolean(lstate, save_lockmarks != 0);\r\n+  return 1;\r\n+}\r\n+\r\n // Access to internal functions. For use in runtime/\r\n static void nlua_state_add_internal(lua_State *const lstate)\r\n {\r\n@@ -569,6 +585,10 @@ static void nlua_state_add_internal(lua_State *const lstate)\r\n   // _updatefolds\r\n   lua_pushcfunction(lstate, &nlua_foldupdate);\r\n   lua_setfield(lstate, -2, \"_foldupdate\");\r\n+\r\n+  lua_pushcfunction(lstate, &nlua_lockmarks);\r\n+  lua_setfield(lstate, -2, \"_lockmarks\");\r\n }\r\n \r\n void nlua_state_add_stdlib(lua_State *const lstate, bool is_thread)\r\n```",
            "created_at": "2024-04-05T10:05:59Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2039401015",
            "id": 2039401015,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM55jso3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2039401015/reactions"
            },
            "updated_at": "2024-04-05T10:07:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2039401015",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">@gpanders, @lewis6991, does this behavior sound good enough?\r\n\r\nYes this looks perfect to me. Thanks.",
            "created_at": "2024-04-05T13:33:05Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2039817987",
            "id": 2039817987,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM55lScD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 6,
                "laugh": 0,
                "rocket": 0,
                "total_count": 6,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2039817987/reactions"
            },
            "updated_at": "2024-04-05T13:33:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2039817987",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Squashed and added stripped down version of PR description as commit message.\r\n\r\nAs far as I am aware, if/when CI is green, this is good to merge.",
            "created_at": "2024-04-05T14:36:09Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2039963271",
            "id": 2039963271,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM55l16H",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2039963271/reactions"
            },
            "updated_at": "2024-04-05T14:36:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2039963271",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@clason, thanks for the documentation review!\r\n\r\n**Now** should be good to merge.",
            "created_at": "2024-04-05T15:38:18Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2040116427",
            "id": 2040116427,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM55mbTL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 2,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2040116427/reactions"
            },
            "updated_at": "2024-04-05T15:38:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2040116427",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Thank you @echasnovski for another stellar contribution!",
            "created_at": "2024-04-05T16:07:56Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2040182606",
            "id": 2040182606,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM55mrdO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 18,
                "hooray": 23,
                "laugh": 0,
                "rocket": 0,
                "total_count": 41,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2040182606/reactions"
            },
            "updated_at": "2024-04-05T16:07:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2040182606",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> This got merged without any help docs !?\r\n\r\nIt's documented under [`:h commenting`](https://github.com/neovim/neovim/pull/28176/files#diff-e10fa5167b70184f67ba6b6e3c015a16e570e5d67aa1d45fd97f938c50a06d87R561).",
            "created_at": "2024-04-05T17:38:37Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2040317458",
            "id": 2040317458,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM55nMYS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2040317458/reactions"
            },
            "updated_at": "2024-04-05T17:38:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2040317458",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6256228?v=4",
                "events_url": "https://api.github.com/users/seandewar/events{/privacy}",
                "followers_url": "https://api.github.com/users/seandewar/followers",
                "following_url": "https://api.github.com/users/seandewar/following{/other_user}",
                "gists_url": "https://api.github.com/users/seandewar/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/seandewar",
                "id": 6256228,
                "login": "seandewar",
                "node_id": "MDQ6VXNlcjYyNTYyMjg=",
                "organizations_url": "https://api.github.com/users/seandewar/orgs",
                "received_events_url": "https://api.github.com/users/seandewar/received_events",
                "repos_url": "https://api.github.com/users/seandewar/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/seandewar/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/seandewar/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/seandewar"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> @seandewar ok, there should definitely be `:h gc`\r\n\r\n`:h gc-default`",
            "created_at": "2024-04-06T08:39:30Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2041018807",
            "id": 2041018807,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM55p3m3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2041018807/reactions"
            },
            "updated_at": "2024-04-06T08:39:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2041018807",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "#28205 will add it",
            "created_at": "2024-04-06T08:41:41Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2041019209",
            "id": 2041019209,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM55p3tJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2041019209/reactions"
            },
            "updated_at": "2024-04-06T08:41:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2041019209",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Not sure if this is desired behavior, but it seems rather unintuitive:\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <title>Document</title>\r\n  </head>\r\n  <body></body>\r\n  <script>\r\n\r\n    console.log(\"hi\");\r\n    console.log(\"hi\");\r\n\r\n  </script>\r\n</html>\r\n```\r\n\r\n`gcip` on the logs uses the HTML commentstring, with or without the cursor being on the javascript.\r\n`gc{j,k}` uses the HTML commenstring if the cursor is at the beginning whitespace of the logs and the javascript commenstring otherwise.\r\n\r\nNotably,  [mini.comment](https://github.com/echasnovski/mini.comment) uses the javascript commentstring in all of the above scenarios.",
            "created_at": "2024-04-07T02:25:35Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2041280584",
            "id": 2041280584,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM55q3hI",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2041280584/reactions"
            },
            "updated_at": "2024-04-07T02:25:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2041280584",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62671086?v=4",
                "events_url": "https://api.github.com/users/barrett-ruth/events{/privacy}",
                "followers_url": "https://api.github.com/users/barrett-ruth/followers",
                "following_url": "https://api.github.com/users/barrett-ruth/following{/other_user}",
                "gists_url": "https://api.github.com/users/barrett-ruth/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/barrett-ruth",
                "id": 62671086,
                "login": "barrett-ruth",
                "node_id": "MDQ6VXNlcjYyNjcxMDg2",
                "organizations_url": "https://api.github.com/users/barrett-ruth/orgs",
                "received_events_url": "https://api.github.com/users/barrett-ruth/received_events",
                "repos_url": "https://api.github.com/users/barrett-ruth/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/barrett-ruth/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/barrett-ruth/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/barrett-ruth"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> `gcip` on the logs uses the HTML commentstring, with or without the cursor being on the javascript. `gc{j,k}` uses the HTML commenstring if the cursor is at the beginning whitespace of the logs and the javascript commenstring otherwise.\r\n\r\nYes, this is expected and is an unfortunate consequence of how tree-sitter parsers whitespace in this case. You can (kind of) see this by running `:InspectTree`: injection is recognized from `c` in first `console.log` and until right before `</script>`. So in a similar fashion, typing `gcc` on whitespace before `</script>` will comment with JavaScript's 'commentstring'.\r\n\r\nThe reason it uses 'commentstring' in all cases of `gcip`, `gcj`, and `gck` is because of how operators work: just before executing operator's logic as a call of `operatorfunc`, cursor is moved to the start mark of the target region. In all these cases it is a first column of line 11, which is treated as an HTML portion of the file.\r\n\r\nThere is a way to fix this by caching cursor position when it is relevant, but this would break the dot-repeating (the same cursor position would be used for every call to `.`). So between these two cases, proper dot-repeat was decided to have higher priority with hope that this might get resolved in the future with better tree-sitter parsers.\r\n\r\n> Notably, [mini.comment](https://github.com/echasnovski/mini.comment) uses the javascript commentstring in all of the above scenarios.\r\n\r\nI reproduce the same behavior both with the new built-in commenting and 'mini.comment'. Are you sure you are using default `require('mini.comment').setup()`? In particular, that there is no custom hooks (like with [JoosepAlviste/nvim-ts-context-commentstring](https://github.com/JoosepAlviste/nvim-ts-context-commentstring)).",
            "created_at": "2024-04-07T12:01:04Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2041446398",
            "id": 2041446398,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM55rf_-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2041446398/reactions"
            },
            "updated_at": "2024-04-07T12:01:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2041446398",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Ah yes, I I was using nvim-ts-context-commenstring. I see the plugin updates it on `CursorHold`.\r\nIt just seems odd that what will now be a core verb(?) will not work intuitively across text objects, which at least has been the core of what separates (neo)vim for me - hopefully there'll be a simple way to add this to one's configuration in the future?\r\nRegardless, thanks for the awesome PR, happy to see my plugin count go down over the years.",
            "created_at": "2024-04-07T14:00:59Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2041480626",
            "id": 2041480626,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM55roWy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2041480626/reactions"
            },
            "updated_at": "2024-04-07T14:00:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2041480626",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62671086?v=4",
                "events_url": "https://api.github.com/users/barrett-ruth/events{/privacy}",
                "followers_url": "https://api.github.com/users/barrett-ruth/followers",
                "following_url": "https://api.github.com/users/barrett-ruth/following{/other_user}",
                "gists_url": "https://api.github.com/users/barrett-ruth/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/barrett-ruth",
                "id": 62671086,
                "login": "barrett-ruth",
                "node_id": "MDQ6VXNlcjYyNjcxMDg2",
                "organizations_url": "https://api.github.com/users/barrett-ruth/orgs",
                "received_events_url": "https://api.github.com/users/barrett-ruth/received_events",
                "repos_url": "https://api.github.com/users/barrett-ruth/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/barrett-ruth/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/barrett-ruth/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/barrett-ruth"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Experience report.\r\n\r\nThanks for the feature, the injected languages recognition is pretty great (despite what @barrett-ruth observed, which I haven't run into yet when editing lua-in-viml).\r\n\r\nI noticed the existence of this feature due to the default of `pad_comment_parts = false` as mentioned in the description. It doesn't match what tpope/vim-commentary does by default (which I was using). It's mildly jarring, I'll see if I can get used to it. The \"problem\" is that for real comments, I always pad with a space. For temporary comment block, I'd be OK with the lack of a space.  I'm not sure how often I use `gc` for real comment blocks, time will tell.\r\n\r\nAlso I was surprised that the following kept on working (in the sense that it maintains the space between commentstring and first text), I was happy to find out about that:\r\n\r\n```vim\r\n\" Rewrap the current comment block. Necessary because paragraphs don't work\r\n\" properly inside of comment blocks, so we re-use tpope's comment block text\r\n\" object. nnoremap doesn't work. I have _no_ idea why, maybe because gc isn't\r\n\" builtin?. It appears to set a cursor to the end of the block, which I fix with\r\n\" marks. Overrides mark `q`, which I hope I wasn't using. Normally I'd use the\r\n\" `'` mark but that gets overriden during the `gc` movement, probably because of\r\n\" a jump.\r\nnmap <leader>e mjgqgc`j\r\n```\r\n\r\n(The comment about vim-commentary is now a bit outdated, of course.)\r\n\r\nAlso, this seems to override `tpope/vim-commentary`. That may be undesirable if people really want that space (I, too, may consider moving back). Thing is, I don't know how to move back.",
            "created_at": "2024-04-08T07:09:04Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2042013099",
            "id": 2042013099,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM55tqWr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2042013099/reactions"
            },
            "updated_at": "2024-04-08T07:10:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2042013099",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "That seems to be a bug in vim-commentary. The following change will fix it:\r\n```diff\r\ndiff --git a/plugin/commentary.vim b/plugin/commentary.vim\r\nindex 5370106..ed056a4 100644\r\n--- a/plugin/commentary.vim\r\n+++ b/plugin/commentary.vim\r\n@@ -108,7 +108,6 @@ nnoremap <expr>   <Plug>Commentary     <SID>go()\r\n nnoremap <expr>   <Plug>CommentaryLine <SID>go() . '_'\r\n onoremap <silent> <Plug>Commentary        :<C-U>call <SID>textobject(get(v:, 'operator', '') ==# 'c')<CR>\r\n nnoremap <silent> <Plug>ChangeCommentary c:<C-U>call <SID>textobject(1)<CR>\r\n-nmap <silent> <Plug>CommentaryUndo :echoerr \"Change your <Plug>CommentaryUndo map to <Plug>Commentary<Plug>Commentary\"<CR>\r\n \r\n if !hasmapto('<Plug>Commentary') || maparg('gc','n') ==# ''\r\n   xmap gc  <Plug>Commentary\r\n@@ -118,4 +117,6 @@ if !hasmapto('<Plug>Commentary') || maparg('gc','n') ==# ''\r\n   nmap gcu <Plug>Commentary<Plug>Commentary\r\n endif\r\n \r\n+nmap <silent> <Plug>CommentaryUndo :echoerr \"Change your <Plug>CommentaryUndo map to <Plug>Commentary<Plug>Commentary\"<CR>\r\n+\r\n \" vim:set et sw=2:\r\n```",
            "created_at": "2024-04-08T07:27:24Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2042044064",
            "id": 2042044064,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM55tx6g",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2042044064/reactions"
            },
            "updated_at": "2024-04-08T07:27:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2042044064",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> That seems to be a bug in vim-commentary. The following change will fix it:\r\n\r\nWhat specifically are you referring to? The fact that vim-commentary does not override builtin commenting?",
            "created_at": "2024-04-08T07:35:37Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2042058612",
            "id": 2042058612,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM55t1d0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2042058612/reactions"
            },
            "updated_at": "2024-04-08T07:35:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2042058612",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > That seems to be a bug in vim-commentary. The following change will fix it:\r\n> \r\n> What specifically are you referring to? The fact that vim-commentary does not override builtin commenting?\r\n\r\nYes. I've created tpope/vim-commentary#173 to fix it.",
            "created_at": "2024-04-08T07:36:21Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2042059840",
            "id": 2042059840,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM55t1xA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2042059840/reactions"
            },
            "updated_at": "2024-04-08T07:36:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2042059840",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I noticed the existence of this feature due to the default of `pad_comment_parts = false` as mentioned in the description. It doesn't match what tpope/vim-commentary does by default (which I was using). It's mildly jarring, I'll see if I can get used to it. The \"problem\" is that for real comments, I always pad with a space. For temporary comment block, I'd be OK with the lack of a space. I'm not sure how often I use `gc` for real comment blocks, time will tell.\r\n\r\nThe reason for this is to allow any 'commentstring' value (including no padding) in the presence of no other way to override it (opposed to `b:commentary_format` from 'tpope/vim-commentary'). At the moment to counter that users can set custom 'commentstring' to have formatting they want. I hope that after the release there will be work to modify default 'commentstring' values to have padding where it is reasonable.",
            "created_at": "2024-04-08T07:51:57Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2042088961",
            "id": 2042088961,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM55t84B",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2042088961/reactions"
            },
            "updated_at": "2024-04-08T07:51:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2042088961",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> . I hope that after the release there will be work to modify default 'commentstring' values to have padding where it is reasonable.\r\n\r\nAs these are set by the bundled `ftplugin`s, that change will have to come from vim/vim. Someone will have to open a PR there to add spaces to those `commentstring`s lacking it (and the maintainers not insisting that no space is in fact correct).",
            "created_at": "2024-04-08T07:59:17Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2042102878",
            "id": 2042102878,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM55uARe",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2042102878/reactions"
            },
            "updated_at": "2024-04-08T07:59:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2042102878",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "You're right, changing the commentstring to add a space seems to work in some sense, but it does mean that `//comments` are no longer recognized as comments which is annoying (though it's minor, such comments are not really allowed in the codebases I work on).",
            "created_at": "2024-04-08T10:21:07Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2042383103",
            "id": 2042383103,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM55vEr_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2042383103/reactions"
            },
            "updated_at": "2024-04-08T10:21:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2042383103",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Also, perhaps `help 'commentstring'` should be updated referencing this new feature.",
            "created_at": "2024-04-08T10:25:11Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2042390524",
            "id": 2042390524,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM55vGf8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2042390524/reactions"
            },
            "updated_at": "2024-04-08T10:25:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2042390524",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/189413?v=4",
                "events_url": "https://api.github.com/users/aktau/events{/privacy}",
                "followers_url": "https://api.github.com/users/aktau/followers",
                "following_url": "https://api.github.com/users/aktau/following{/other_user}",
                "gists_url": "https://api.github.com/users/aktau/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aktau",
                "id": 189413,
                "login": "aktau",
                "node_id": "MDQ6VXNlcjE4OTQxMw==",
                "organizations_url": "https://api.github.com/users/aktau/orgs",
                "received_events_url": "https://api.github.com/users/aktau/received_events",
                "repos_url": "https://api.github.com/users/aktau/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aktau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aktau/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aktau"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Already in the works.",
            "created_at": "2024-04-08T10:26:43Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2042393352",
            "id": 2042393352,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM55vHMI",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2042393352/reactions"
            },
            "updated_at": "2024-04-08T10:26:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2042393352",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I've edited the initial comment with some details, but will duplicate here for more visibility.\r\n\r\n- The best approach for users to customize 'commentstring' is to create a filetype plugin (see `:h ftplugin`) or `FileType` autocommand inside which set the option locally (with `:setlocal` or `lua vim.bo`). Changing it interactively will not always work (for example, in presence of active tree-sitter parser).\r\n- Presence of a tree-sitter parser in a buffer is enough for using tree-sitter based 'commentstring' (and thus ignoring buffer-local one). Running `vim.treesitter.start()`/`vim.treesitter.stop()` affects only highlighting and will not affect commenting.",
            "created_at": "2024-04-09T08:32:30Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2044443629",
            "id": 2044443629,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM5527vt",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2044443629/reactions"
            },
            "updated_at": "2024-04-09T08:32:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2044443629",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "author_association": "NONE",
            "body": "Awesome! Thanks for this!\r\n\r\nI have [nvim-ts-context-commentstring](https://github.com/JoosepAlviste/nvim-ts-context-commentstring) installed, is this still needed / helpful?",
            "created_at": "2024-04-10T14:28:47Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2047710883",
            "id": 2047710883,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM56DZaj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2047710883/reactions"
            },
            "updated_at": "2024-04-10T14:28:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2047710883",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4176520?v=4",
                "events_url": "https://api.github.com/users/calebdw/events{/privacy}",
                "followers_url": "https://api.github.com/users/calebdw/followers",
                "following_url": "https://api.github.com/users/calebdw/following{/other_user}",
                "gists_url": "https://api.github.com/users/calebdw/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/calebdw",
                "id": 4176520,
                "login": "calebdw",
                "node_id": "MDQ6VXNlcjQxNzY1MjA=",
                "organizations_url": "https://api.github.com/users/calebdw/orgs",
                "received_events_url": "https://api.github.com/users/calebdw/received_events",
                "repos_url": "https://api.github.com/users/calebdw/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/calebdw/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/calebdw/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/calebdw"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I have [nvim-ts-context-commentstring](https://github.com/JoosepAlviste/nvim-ts-context-commentstring) installed, is this still needed / helpful?\r\n\r\nFor most use cases - probably no. For some complicated ones (like JSX) - probably yes. The best way to know for sure is to try without it and see if anything does not work as you'd expect.",
            "created_at": "2024-04-10T14:39:00Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2047740402",
            "id": 2047740402,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM56Dgny",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2047740402/reactions"
            },
            "updated_at": "2024-04-10T14:40:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2047740402",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Not sure if this is desired behavior, but it seems rather unintuitive:\r\n> \r\n> ```\r\n> <!DOCTYPE html>\r\n> <html lang=\"en\">\r\n>   <head>\r\n>     <meta charset=\"UTF-8\" />\r\n>     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n>     <title>Document</title>\r\n>   </head>\r\n>   <body></body>\r\n>   <script>\r\n> \r\n>     console.log(\"hi\");\r\n>     console.log(\"hi\");\r\n> \r\n>   </script>\r\n> </html>\r\n> ```\r\n\r\nI think this now should behave as expected after #28262.",
            "created_at": "2024-04-11T07:46:03Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2049122286",
            "id": 2049122286,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM56Ix_u",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2049122286/reactions"
            },
            "updated_at": "2024-04-11T07:46:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2049122286",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "author_association": "NONE",
            "body": "> As these are set by the bundled `ftplugin`s, that change will have to come from vim/vim. Someone will have to open a PR there to add spaces to those `commentstring`s lacking it (and the maintainers not insisting that no space is in fact correct).\r\n\r\nUntil then I just created a simple autocommand to enforce the space(s):\r\n\r\n```lua\r\nvim.api.nvim_create_autocmd({ 'FileType' }, {\r\n  desc = 'Force commentstring to include spaces',\r\n  -- group = ...,\r\n  callback = function()\r\n    local cs = vim.bo.commentstring\r\n\r\n    if not cs or not cs:match('%%s') then\r\n      return\r\n    end\r\n\r\n    vim.bo.commentstring = cs:gsub('%s*%%s%s*', ' %%s '):gsub('%s*$', '')\r\n  end,\r\n})\r\n```",
            "created_at": "2024-04-12T14:55:22Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2051919913",
            "id": 2051919913,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM56TdAp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2051919913/reactions"
            },
            "updated_at": "2024-04-12T14:55:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2051919913",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4176520?v=4",
                "events_url": "https://api.github.com/users/calebdw/events{/privacy}",
                "followers_url": "https://api.github.com/users/calebdw/followers",
                "following_url": "https://api.github.com/users/calebdw/following{/other_user}",
                "gists_url": "https://api.github.com/users/calebdw/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/calebdw",
                "id": 4176520,
                "login": "calebdw",
                "node_id": "MDQ6VXNlcjQxNzY1MjA=",
                "organizations_url": "https://api.github.com/users/calebdw/orgs",
                "received_events_url": "https://api.github.com/users/calebdw/received_events",
                "repos_url": "https://api.github.com/users/calebdw/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/calebdw/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/calebdw/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/calebdw"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > As these are set by the bundled `ftplugin`s, that change will have to come from vim/vim. Someone will have to open a PR there to add spaces to those `commentstring`s lacking it (and the maintainers not insisting that no space is in fact correct).\r\n> \r\n> Until then I just created a simple autocommand to enforce the space(s):\r\n\r\nHere is a slightly more concise and precise version:\r\n\r\n```lua\r\nvim.api.nvim_create_autocmd({ 'FileType' }, {\r\n  desc = 'Force commentstring to include spaces',\r\n  -- group = ...,\r\n  callback = function(event)\r\n    local cs = vim.bo[event.buf].commentstring\r\n    vim.bo[event.buf].commentstring = cs:gsub('(%S)%%s', '%1 %%s'):gsub('%%s(%S)', '%%s %1')\r\n  end,\r\n})\r\n```",
            "created_at": "2024-04-12T15:06:17Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2051944146",
            "id": 2051944146,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM56Ti7S",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 2,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2051944146/reactions"
            },
            "updated_at": "2024-04-12T15:06:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2051944146",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I have my own little comment function but I wanted to try out the builtin one, but there's one behaviour I'm missing which is that the builtin comment doesn't ***always*** toggle comments, instead it's on a per-block basis. Is there any solution for that? would it be something that could be added or are most people against it?\r\n\r\nSo currently this:\r\n```c\r\n// commented code\r\nuncommented code\r\n```\r\nbecomes this:\r\n```c\r\n// // commented code\r\n// uncommented code\r\n```\r\n\r\nWhile I would it like to become this:\r\n```c\r\ncommented code\r\n// uncommented code\r\n```",
            "created_at": "2024-04-12T20:28:20Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2052484549",
            "id": 2052484549,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM56Vm3F",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2052484549/reactions"
            },
            "updated_at": "2024-04-12T20:30:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2052484549",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/74924917?v=4",
                "events_url": "https://api.github.com/users/T-727/events{/privacy}",
                "followers_url": "https://api.github.com/users/T-727/followers",
                "following_url": "https://api.github.com/users/T-727/following{/other_user}",
                "gists_url": "https://api.github.com/users/T-727/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/T-727",
                "id": 74924917,
                "login": "T-727",
                "node_id": "MDQ6VXNlcjc0OTI0OTE3",
                "organizations_url": "https://api.github.com/users/T-727/orgs",
                "received_events_url": "https://api.github.com/users/T-727/received_events",
                "repos_url": "https://api.github.com/users/T-727/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/T-727/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/T-727/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/T-727"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">would it be something that could be added or are most people against it?\r\n\r\nI don't think this is intuitive or expected behavior at all, because the `// commented code` in your example could just as well be an _actual comment_, and this behavior would uncomment it.\r\n\r\nYou can replicate the behavior you want using `:normal` and a visual mode mapping though:\r\n\r\n```\r\nxnoremap gc :normal gcc<CR>\r\n```",
            "created_at": "2024-04-12T20:39:31Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2052497984",
            "id": 2052497984,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM56VqJA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2052497984/reactions"
            },
            "updated_at": "2024-04-12T20:40:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2052497984",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I don't think this is intuitive or expected behavior at all\r\n\r\nYeah you're absolutely right, but I find it quite useful lol\r\n\r\n> You can replicate the behavior you want using :normal and a visual mode mapping though:\r\n> \r\n> ```\r\n> xnoremap gc :normal gcc<CR>\r\n> ```\r\nGreat, thanks!",
            "created_at": "2024-04-12T20:58:11Z",
            "html_url": "https://github.com/neovim/neovim/pull/28176#issuecomment-2052519194",
            "id": 2052519194,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
            "node_id": "IC_kwDOAPphoM56VvUa",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2052519194/reactions"
            },
            "updated_at": "2024-04-14T15:39:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2052519194",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/74924917?v=4",
                "events_url": "https://api.github.com/users/T-727/events{/privacy}",
                "followers_url": "https://api.github.com/users/T-727/followers",
                "following_url": "https://api.github.com/users/T-727/following{/other_user}",
                "gists_url": "https://api.github.com/users/T-727/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/T-727",
                "id": 74924917,
                "login": "T-727",
                "node_id": "MDQ6VXNlcjc0OTI0OTE3",
                "organizations_url": "https://api.github.com/users/T-727/orgs",
                "received_events_url": "https://api.github.com/users/T-727/received_events",
                "repos_url": "https://api.github.com/users/T-727/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/T-727/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/T-727/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/T-727"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/28176/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/28176/commits",
    "created_at": "2024-04-04T16:20:12Z",
    "diff_url": "https://github.com/neovim/neovim/pull/28176.diff",
    "draft": false,
    "head": {
        "label": "echasnovski:builtin-comment",
        "ref": "builtin-comment",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/echasnovski/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/echasnovski/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/echasnovski/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/echasnovski/neovim/branches{/branch}",
            "clone_url": "https://github.com/echasnovski/neovim.git",
            "collaborators_url": "https://api.github.com/repos/echasnovski/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/echasnovski/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/echasnovski/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/echasnovski/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/echasnovski/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/echasnovski/neovim/contributors",
            "created_at": "2021-12-02T09:43:59Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/echasnovski/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/echasnovski/neovim/downloads",
            "events_url": "https://api.github.com/repos/echasnovski/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/echasnovski/neovim/forks",
            "full_name": "echasnovski/neovim",
            "git_commits_url": "https://api.github.com/repos/echasnovski/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/echasnovski/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/echasnovski/neovim/git/tags{/sha}",
            "git_url": "git://github.com/echasnovski/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/echasnovski/neovim/hooks",
            "html_url": "https://github.com/echasnovski/neovim",
            "id": 434162461,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/echasnovski/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/echasnovski/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/echasnovski/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/echasnovski/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/echasnovski/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/echasnovski/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/echasnovski/neovim/merges",
            "milestones_url": "https://api.github.com/repos/echasnovski/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOGeDLHQ",
            "notifications_url": "https://api.github.com/repos/echasnovski/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/echasnovski/neovim/pulls{/number}",
            "pushed_at": "2024-04-11T07:39:17Z",
            "releases_url": "https://api.github.com/repos/echasnovski/neovim/releases{/id}",
            "size": 260292,
            "ssh_url": "git@github.com:echasnovski/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/echasnovski/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/echasnovski/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/echasnovski/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/echasnovski/neovim/subscription",
            "svn_url": "https://github.com/echasnovski/neovim",
            "tags_url": "https://api.github.com/repos/echasnovski/neovim/tags",
            "teams_url": "https://api.github.com/repos/echasnovski/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/echasnovski/neovim/git/trees{/sha}",
            "updated_at": "2024-04-04T02:16:29Z",
            "url": "https://api.github.com/repos/echasnovski/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "ef93981ae37486af5d9219636436fb2fe4ccaa69",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
            "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
            "followers_url": "https://api.github.com/users/echasnovski/followers",
            "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
            "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/echasnovski",
            "id": 24854248,
            "login": "echasnovski",
            "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
            "organizations_url": "https://api.github.com/users/echasnovski/orgs",
            "received_events_url": "https://api.github.com/users/echasnovski/received_events",
            "repos_url": "https://api.github.com/users/echasnovski/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/echasnovski"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/28176",
    "id": 1807462828,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28176",
    "labels": [],
    "locked": true,
    "merge_commit_sha": "73de98256cf3932dca156fbfd0c82c1cc10d487e",
    "merged_at": "2024-04-05T16:07:43Z",
    "milestone": {
        "closed_at": null,
        "closed_issues": 367,
        "created_at": "2023-02-02T14:11:43Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
            "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
            "followers_url": "https://api.github.com/users/bfredl/followers",
            "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
            "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bfredl",
            "id": 1363104,
            "login": "bfredl",
            "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
            "organizations_url": "https://api.github.com/users/bfredl/orgs",
            "received_events_url": "https://api.github.com/users/bfredl/received_events",
            "repos_url": "https://api.github.com/users/bfredl/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bfredl"
        },
        "description": "",
        "due_on": "2024-04-30T07:00:00Z",
        "html_url": "https://github.com/neovim/neovim/milestone/36",
        "id": 8997654,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/36/labels",
        "node_id": "MI_kwDOAPphoM4AiUsW",
        "number": 36,
        "open_issues": 21,
        "state": "open",
        "title": "0.10",
        "updated_at": "2024-04-15T22:44:29Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/36"
    },
    "node_id": "PR_kwDOAPphoM5ru7Gs",
    "number": 28176,
    "patch_url": "https://github.com/neovim/neovim/pull/28176.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/28176/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/ef93981ae37486af5d9219636436fb2fe4ccaa69",
    "title": "feat(comment): add built-in commenting",
    "updated_at": "2024-04-14T15:39:14Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/28176",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
        "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
        "followers_url": "https://api.github.com/users/echasnovski/followers",
        "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
        "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/echasnovski",
        "id": 24854248,
        "login": "echasnovski",
        "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
        "organizations_url": "https://api.github.com/users/echasnovski/orgs",
        "received_events_url": "https://api.github.com/users/echasnovski/received_events",
        "repos_url": "https://api.github.com/users/echasnovski/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/echasnovski"
    }
}