{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/31029/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31029/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/31029"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/31029"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31029/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/31029"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/162d3ef19f1f86328efc9bbe158941bb13959730"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5688,
            "forks_count": 5688,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1831,
            "open_issues_count": 1831,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-11-04T23:26:33Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 292457,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 83048,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-11-05T01:27:55Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 83048,
            "watchers_count": 83048,
            "web_commit_signoff_required": false
        },
        "sha": "0da4d89558a05fb86186253e778510cfd859caea",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Signatures can be cycled using `<C-s>` when the user enters the floating\r\nwindow.\r\n\r\n![image](https://github.com/user-attachments/assets/3e704096-826b-417d-9859-ed8cea0b6bcf)\r\n",
    "closed_at": "2024-11-04T11:55:39Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31029#discussion_r1826896929"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1826896929"
                }
            },
            "author_association": "MEMBER",
            "body": "Can we just hardcode `markdown` here? What if a client sends documentation as plain text?",
            "commit_id": "162d3ef19f1f86328efc9bbe158941bb13959730",
            "created_at": "2024-11-03T03:43:17Z",
            "diff_hunk": "@@ -270,58 +297,79 @@ local sig_help_ns = api.nvim_create_namespace('vim_lsp_signature_help')\n function M.signature_help(config)\n   local method = ms.textDocument_signatureHelp\n \n-  config = config or {}\n+  config = config and vim.deepcopy(config) or {}\n   config.focus_id = method\n \n-  lsp.buf_request(0, method, client_positional_params(), function(err, result, ctx)\n-    local client = assert(vim.lsp.get_client_by_id(ctx.client_id))\n-\n-    if err then\n-      vim.notify(\n-        client.name .. ': ' .. tostring(err.code) .. ': ' .. err.message,\n-        vim.log.levels.ERROR\n-      )\n-      api.nvim_command('redraw')\n-      return\n-    end\n-\n+  lsp.buf_request_all(0, method, client_positional_params(), function(results, ctx)\n     if api.nvim_get_current_buf() ~= ctx.bufnr then\n       -- Ignore result since buffer changed. This happens for slow language servers.\n       return\n     end\n \n-    -- When use `autocmd CompleteDone <silent><buffer> lua vim.lsp.buf.signature_help()` to call signatureHelp handler\n-    -- If the completion item doesn't have signatures It will make noise. Change to use `print` that can use `<silent>` to ignore\n-    if not result or not result.signatures or not result.signatures[1] then\n+    local signatures = process_signature_help_results(results)\n+\n+    if not next(signatures) then\n       if config.silent ~= true then\n         print('No signature help available')\n       end\n       return\n     end\n \n-    local triggers =\n-      vim.tbl_get(client.server_capabilities, 'signatureHelpProvider', 'triggerCharacters')\n-\n     local ft = vim.bo[ctx.bufnr].filetype\n-    local lines, hl = util.convert_signature_help_to_markdown_lines(result, ft, triggers)\n-    if not lines or vim.tbl_isempty(lines) then\n-      if config.silent ~= true then\n-        print('No signature help available')\n+    local total = #signatures\n+    local idx = 0\n+\n+    --- @param update_win? integer\n+    local function show_signature(update_win)\n+      idx = (idx % total) + 1\n+      local client, result = signatures[idx][1], signatures[idx][2]\n+      --- @type string[]?\n+      local triggers =\n+        vim.tbl_get(client.server_capabilities, 'signatureHelpProvider', 'triggerCharacters')\n+      local lines, hl =\n+        util.convert_signature_help_to_markdown_lines({ signatures = { result } }, ft, triggers)\n+      if not lines then\n+        return\n       end\n-      return\n+\n+      local sfx = total > 1 and string.format(' (%d/%d) (<C-s> to cycle)', idx, total) or ''\n+      local title = string.format('Signature Help: %s%s', client.name, sfx)\n+      if config.border then\n+        config.title = title\n+      else\n+        table.insert(lines, 1, '# ' .. title)\n+        if hl then\n+          hl[1] = hl[1] + 1\n+          hl[3] = hl[3] + 1\n+        end\n+      end\n+\n+      config._update_win = update_win\n+\n+      local buf, win = util.open_floating_preview(lines, 'markdown', config)",
            "html_url": "https://github.com/neovim/neovim/pull/31029#discussion_r1826896929",
            "id": 1826896929,
            "line": 349,
            "node_id": "PRRC_kwDOAPphoM5s5Dwh",
            "original_commit_id": "28dd227a6aaa68cda58374ca57497e57500ce9eb",
            "original_line": 349,
            "original_position": 111,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/buf.lua",
            "position": 111,
            "pull_request_review_id": 2411774599,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1826896929/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-03T03:47:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1826896929",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31029#discussion_r1826897011"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1826897011"
                }
            },
            "author_association": "MEMBER",
            "body": "I normally trigger signature help when in insert mode:\r\n```suggestion\r\n      vim.keymap.set({ 'n', 'i' }, '<C-s>', function()\r\n```",
            "commit_id": "162d3ef19f1f86328efc9bbe158941bb13959730",
            "created_at": "2024-11-03T03:44:47Z",
            "diff_hunk": "@@ -270,58 +297,79 @@ local sig_help_ns = api.nvim_create_namespace('vim_lsp_signature_help')\n function M.signature_help(config)\n   local method = ms.textDocument_signatureHelp\n \n-  config = config or {}\n+  config = config and vim.deepcopy(config) or {}\n   config.focus_id = method\n \n-  lsp.buf_request(0, method, client_positional_params(), function(err, result, ctx)\n-    local client = assert(vim.lsp.get_client_by_id(ctx.client_id))\n-\n-    if err then\n-      vim.notify(\n-        client.name .. ': ' .. tostring(err.code) .. ': ' .. err.message,\n-        vim.log.levels.ERROR\n-      )\n-      api.nvim_command('redraw')\n-      return\n-    end\n-\n+  lsp.buf_request_all(0, method, client_positional_params(), function(results, ctx)\n     if api.nvim_get_current_buf() ~= ctx.bufnr then\n       -- Ignore result since buffer changed. This happens for slow language servers.\n       return\n     end\n \n-    -- When use `autocmd CompleteDone <silent><buffer> lua vim.lsp.buf.signature_help()` to call signatureHelp handler\n-    -- If the completion item doesn't have signatures It will make noise. Change to use `print` that can use `<silent>` to ignore\n-    if not result or not result.signatures or not result.signatures[1] then\n+    local signatures = process_signature_help_results(results)\n+\n+    if not next(signatures) then\n       if config.silent ~= true then\n         print('No signature help available')\n       end\n       return\n     end\n \n-    local triggers =\n-      vim.tbl_get(client.server_capabilities, 'signatureHelpProvider', 'triggerCharacters')\n-\n     local ft = vim.bo[ctx.bufnr].filetype\n-    local lines, hl = util.convert_signature_help_to_markdown_lines(result, ft, triggers)\n-    if not lines or vim.tbl_isempty(lines) then\n-      if config.silent ~= true then\n-        print('No signature help available')\n+    local total = #signatures\n+    local idx = 0\n+\n+    --- @param update_win? integer\n+    local function show_signature(update_win)\n+      idx = (idx % total) + 1\n+      local client, result = signatures[idx][1], signatures[idx][2]\n+      --- @type string[]?\n+      local triggers =\n+        vim.tbl_get(client.server_capabilities, 'signatureHelpProvider', 'triggerCharacters')\n+      local lines, hl =\n+        util.convert_signature_help_to_markdown_lines({ signatures = { result } }, ft, triggers)\n+      if not lines then\n+        return\n       end\n-      return\n+\n+      local sfx = total > 1 and string.format(' (%d/%d) (<C-s> to cycle)', idx, total) or ''\n+      local title = string.format('Signature Help: %s%s', client.name, sfx)\n+      if config.border then\n+        config.title = title\n+      else\n+        table.insert(lines, 1, '# ' .. title)\n+        if hl then\n+          hl[1] = hl[1] + 1\n+          hl[3] = hl[3] + 1\n+        end\n+      end\n+\n+      config._update_win = update_win\n+\n+      local buf, win = util.open_floating_preview(lines, 'markdown', config)\n+\n+      if hl then\n+        vim.api.nvim_buf_clear_namespace(buf, sig_help_ns, 0, -1)\n+        vim.hl.range(\n+          buf,\n+          sig_help_ns,\n+          'LspSignatureActiveParameter',\n+          { hl[1], hl[2] },\n+          { hl[3], hl[4] }\n+        )\n+      end\n+      return buf, win\n     end\n \n-    local fbuf = util.open_floating_preview(lines, 'markdown', config)\n+    local fbuf, fwin = show_signature()\n \n-    -- Highlight the active parameter.\n-    if hl then\n-      vim.hl.range(\n-        fbuf,\n-        sig_help_ns,\n-        'LspSignatureActiveParameter',\n-        { hl[1], hl[2] },\n-        { hl[3], hl[4] }\n-      )\n+    if total > 1 then\n+      vim.keymap.set('n', '<C-s>', function()",
            "html_url": "https://github.com/neovim/neovim/pull/31029#discussion_r1826897011",
            "id": 1826897011,
            "line": 367,
            "node_id": "PRRC_kwDOAPphoM5s5Dxz",
            "original_commit_id": "28dd227a6aaa68cda58374ca57497e57500ce9eb",
            "original_line": 367,
            "original_position": 139,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/buf.lua",
            "position": 139,
            "pull_request_review_id": 2411774599,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1826897011/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-03T03:47:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1826897011",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31029#discussion_r1826897189"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1826897189"
                }
            },
            "author_association": "MEMBER",
            "body": "`idx` is zero-based, but I think it would be more useful to use 1-based-indexing in the UI.",
            "commit_id": "162d3ef19f1f86328efc9bbe158941bb13959730",
            "created_at": "2024-11-03T03:46:24Z",
            "diff_hunk": "@@ -270,58 +297,79 @@ local sig_help_ns = api.nvim_create_namespace('vim_lsp_signature_help')\n function M.signature_help(config)\n   local method = ms.textDocument_signatureHelp\n \n-  config = config or {}\n+  config = config and vim.deepcopy(config) or {}\n   config.focus_id = method\n \n-  lsp.buf_request(0, method, client_positional_params(), function(err, result, ctx)\n-    local client = assert(vim.lsp.get_client_by_id(ctx.client_id))\n-\n-    if err then\n-      vim.notify(\n-        client.name .. ': ' .. tostring(err.code) .. ': ' .. err.message,\n-        vim.log.levels.ERROR\n-      )\n-      api.nvim_command('redraw')\n-      return\n-    end\n-\n+  lsp.buf_request_all(0, method, client_positional_params(), function(results, ctx)\n     if api.nvim_get_current_buf() ~= ctx.bufnr then\n       -- Ignore result since buffer changed. This happens for slow language servers.\n       return\n     end\n \n-    -- When use `autocmd CompleteDone <silent><buffer> lua vim.lsp.buf.signature_help()` to call signatureHelp handler\n-    -- If the completion item doesn't have signatures It will make noise. Change to use `print` that can use `<silent>` to ignore\n-    if not result or not result.signatures or not result.signatures[1] then\n+    local signatures = process_signature_help_results(results)\n+\n+    if not next(signatures) then\n       if config.silent ~= true then\n         print('No signature help available')\n       end\n       return\n     end\n \n-    local triggers =\n-      vim.tbl_get(client.server_capabilities, 'signatureHelpProvider', 'triggerCharacters')\n-\n     local ft = vim.bo[ctx.bufnr].filetype\n-    local lines, hl = util.convert_signature_help_to_markdown_lines(result, ft, triggers)\n-    if not lines or vim.tbl_isempty(lines) then\n-      if config.silent ~= true then\n-        print('No signature help available')\n+    local total = #signatures\n+    local idx = 0\n+\n+    --- @param update_win? integer\n+    local function show_signature(update_win)\n+      idx = (idx % total) + 1\n+      local client, result = signatures[idx][1], signatures[idx][2]\n+      --- @type string[]?\n+      local triggers =\n+        vim.tbl_get(client.server_capabilities, 'signatureHelpProvider', 'triggerCharacters')\n+      local lines, hl =\n+        util.convert_signature_help_to_markdown_lines({ signatures = { result } }, ft, triggers)\n+      if not lines then\n+        return\n       end\n-      return\n+\n+      local sfx = total > 1 and string.format(' (%d/%d) (<C-s> to cycle)', idx, total) or ''",
            "html_url": "https://github.com/neovim/neovim/pull/31029#discussion_r1826897189",
            "id": 1826897189,
            "line": 335,
            "node_id": "PRRC_kwDOAPphoM5s5D0l",
            "original_commit_id": "28dd227a6aaa68cda58374ca57497e57500ce9eb",
            "original_line": 335,
            "original_position": 97,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/buf.lua",
            "position": 97,
            "pull_request_review_id": 2411774599,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1826897189/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-03T03:47:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1826897189",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31029#discussion_r1826897285"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1826897285"
                }
            },
            "author_association": "MEMBER",
            "body": "Super nit but I find `astart` and `aend` to be not very useful variable names.",
            "commit_id": "162d3ef19f1f86328efc9bbe158941bb13959730",
            "created_at": "2024-11-03T03:47:08Z",
            "diff_hunk": "@@ -804,9 +804,11 @@ function M.convert_signature_help_to_markdown_lines(signature_help, ft, triggers\n       active_offset[2] = active_offset[2] + #contents[1]\n     end\n \n-    active_hl = {}\n-    list_extend(active_hl, get_pos_from_offset(active_offset[1], contents) or {})\n-    list_extend(active_hl, get_pos_from_offset(active_offset[2], contents) or {})\n+    local astart = get_pos_from_offset(active_offset[1], contents)\n+    local aend = get_pos_from_offset(active_offset[2], contents)\n+    if astart and aend then",
            "html_url": "https://github.com/neovim/neovim/pull/31029#discussion_r1826897285",
            "id": 1826897285,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5s5D2F",
            "original_commit_id": "28dd227a6aaa68cda58374ca57497e57500ce9eb",
            "original_line": 809,
            "original_position": 18,
            "original_start_line": 807,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 2411774599,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1826897285/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-11-03T03:47:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1826897285",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31029#discussion_r1826925356"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1826925356"
                }
            },
            "author_association": "MEMBER",
            "body": "I'm not sure. This is what was here before.",
            "commit_id": "162d3ef19f1f86328efc9bbe158941bb13959730",
            "created_at": "2024-11-03T09:03:06Z",
            "diff_hunk": "@@ -270,58 +297,79 @@ local sig_help_ns = api.nvim_create_namespace('vim_lsp_signature_help')\n function M.signature_help(config)\n   local method = ms.textDocument_signatureHelp\n \n-  config = config or {}\n+  config = config and vim.deepcopy(config) or {}\n   config.focus_id = method\n \n-  lsp.buf_request(0, method, client_positional_params(), function(err, result, ctx)\n-    local client = assert(vim.lsp.get_client_by_id(ctx.client_id))\n-\n-    if err then\n-      vim.notify(\n-        client.name .. ': ' .. tostring(err.code) .. ': ' .. err.message,\n-        vim.log.levels.ERROR\n-      )\n-      api.nvim_command('redraw')\n-      return\n-    end\n-\n+  lsp.buf_request_all(0, method, client_positional_params(), function(results, ctx)\n     if api.nvim_get_current_buf() ~= ctx.bufnr then\n       -- Ignore result since buffer changed. This happens for slow language servers.\n       return\n     end\n \n-    -- When use `autocmd CompleteDone <silent><buffer> lua vim.lsp.buf.signature_help()` to call signatureHelp handler\n-    -- If the completion item doesn't have signatures It will make noise. Change to use `print` that can use `<silent>` to ignore\n-    if not result or not result.signatures or not result.signatures[1] then\n+    local signatures = process_signature_help_results(results)\n+\n+    if not next(signatures) then\n       if config.silent ~= true then\n         print('No signature help available')\n       end\n       return\n     end\n \n-    local triggers =\n-      vim.tbl_get(client.server_capabilities, 'signatureHelpProvider', 'triggerCharacters')\n-\n     local ft = vim.bo[ctx.bufnr].filetype\n-    local lines, hl = util.convert_signature_help_to_markdown_lines(result, ft, triggers)\n-    if not lines or vim.tbl_isempty(lines) then\n-      if config.silent ~= true then\n-        print('No signature help available')\n+    local total = #signatures\n+    local idx = 0\n+\n+    --- @param update_win? integer\n+    local function show_signature(update_win)\n+      idx = (idx % total) + 1\n+      local client, result = signatures[idx][1], signatures[idx][2]\n+      --- @type string[]?\n+      local triggers =\n+        vim.tbl_get(client.server_capabilities, 'signatureHelpProvider', 'triggerCharacters')\n+      local lines, hl =\n+        util.convert_signature_help_to_markdown_lines({ signatures = { result } }, ft, triggers)\n+      if not lines then\n+        return\n       end\n-      return\n+\n+      local sfx = total > 1 and string.format(' (%d/%d) (<C-s> to cycle)', idx, total) or ''\n+      local title = string.format('Signature Help: %s%s', client.name, sfx)\n+      if config.border then\n+        config.title = title\n+      else\n+        table.insert(lines, 1, '# ' .. title)\n+        if hl then\n+          hl[1] = hl[1] + 1\n+          hl[3] = hl[3] + 1\n+        end\n+      end\n+\n+      config._update_win = update_win\n+\n+      local buf, win = util.open_floating_preview(lines, 'markdown', config)",
            "html_url": "https://github.com/neovim/neovim/pull/31029#discussion_r1826925356",
            "id": 1826925356,
            "in_reply_to_id": 1826896929,
            "line": 349,
            "node_id": "PRRC_kwDOAPphoM5s5Kss",
            "original_commit_id": "28dd227a6aaa68cda58374ca57497e57500ce9eb",
            "original_line": 349,
            "original_position": 111,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/buf.lua",
            "position": 111,
            "pull_request_review_id": 2411799048,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1826925356/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-03T09:03:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1826925356",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31029#discussion_r1826925500"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1826925500"
                }
            },
            "author_association": "MEMBER",
            "body": "This mapping only triggers when inside the floating window which has `modifiable=false`.",
            "commit_id": "162d3ef19f1f86328efc9bbe158941bb13959730",
            "created_at": "2024-11-03T09:04:00Z",
            "diff_hunk": "@@ -270,58 +297,79 @@ local sig_help_ns = api.nvim_create_namespace('vim_lsp_signature_help')\n function M.signature_help(config)\n   local method = ms.textDocument_signatureHelp\n \n-  config = config or {}\n+  config = config and vim.deepcopy(config) or {}\n   config.focus_id = method\n \n-  lsp.buf_request(0, method, client_positional_params(), function(err, result, ctx)\n-    local client = assert(vim.lsp.get_client_by_id(ctx.client_id))\n-\n-    if err then\n-      vim.notify(\n-        client.name .. ': ' .. tostring(err.code) .. ': ' .. err.message,\n-        vim.log.levels.ERROR\n-      )\n-      api.nvim_command('redraw')\n-      return\n-    end\n-\n+  lsp.buf_request_all(0, method, client_positional_params(), function(results, ctx)\n     if api.nvim_get_current_buf() ~= ctx.bufnr then\n       -- Ignore result since buffer changed. This happens for slow language servers.\n       return\n     end\n \n-    -- When use `autocmd CompleteDone <silent><buffer> lua vim.lsp.buf.signature_help()` to call signatureHelp handler\n-    -- If the completion item doesn't have signatures It will make noise. Change to use `print` that can use `<silent>` to ignore\n-    if not result or not result.signatures or not result.signatures[1] then\n+    local signatures = process_signature_help_results(results)\n+\n+    if not next(signatures) then\n       if config.silent ~= true then\n         print('No signature help available')\n       end\n       return\n     end\n \n-    local triggers =\n-      vim.tbl_get(client.server_capabilities, 'signatureHelpProvider', 'triggerCharacters')\n-\n     local ft = vim.bo[ctx.bufnr].filetype\n-    local lines, hl = util.convert_signature_help_to_markdown_lines(result, ft, triggers)\n-    if not lines or vim.tbl_isempty(lines) then\n-      if config.silent ~= true then\n-        print('No signature help available')\n+    local total = #signatures\n+    local idx = 0\n+\n+    --- @param update_win? integer\n+    local function show_signature(update_win)\n+      idx = (idx % total) + 1\n+      local client, result = signatures[idx][1], signatures[idx][2]\n+      --- @type string[]?\n+      local triggers =\n+        vim.tbl_get(client.server_capabilities, 'signatureHelpProvider', 'triggerCharacters')\n+      local lines, hl =\n+        util.convert_signature_help_to_markdown_lines({ signatures = { result } }, ft, triggers)\n+      if not lines then\n+        return\n       end\n-      return\n+\n+      local sfx = total > 1 and string.format(' (%d/%d) (<C-s> to cycle)', idx, total) or ''\n+      local title = string.format('Signature Help: %s%s', client.name, sfx)\n+      if config.border then\n+        config.title = title\n+      else\n+        table.insert(lines, 1, '# ' .. title)\n+        if hl then\n+          hl[1] = hl[1] + 1\n+          hl[3] = hl[3] + 1\n+        end\n+      end\n+\n+      config._update_win = update_win\n+\n+      local buf, win = util.open_floating_preview(lines, 'markdown', config)\n+\n+      if hl then\n+        vim.api.nvim_buf_clear_namespace(buf, sig_help_ns, 0, -1)\n+        vim.hl.range(\n+          buf,\n+          sig_help_ns,\n+          'LspSignatureActiveParameter',\n+          { hl[1], hl[2] },\n+          { hl[3], hl[4] }\n+        )\n+      end\n+      return buf, win\n     end\n \n-    local fbuf = util.open_floating_preview(lines, 'markdown', config)\n+    local fbuf, fwin = show_signature()\n \n-    -- Highlight the active parameter.\n-    if hl then\n-      vim.hl.range(\n-        fbuf,\n-        sig_help_ns,\n-        'LspSignatureActiveParameter',\n-        { hl[1], hl[2] },\n-        { hl[3], hl[4] }\n-      )\n+    if total > 1 then\n+      vim.keymap.set('n', '<C-s>', function()",
            "html_url": "https://github.com/neovim/neovim/pull/31029#discussion_r1826925500",
            "id": 1826925500,
            "in_reply_to_id": 1826897011,
            "line": 367,
            "node_id": "PRRC_kwDOAPphoM5s5Ku8",
            "original_commit_id": "28dd227a6aaa68cda58374ca57497e57500ce9eb",
            "original_line": 367,
            "original_position": 139,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/buf.lua",
            "position": 139,
            "pull_request_review_id": 2411799200,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31029",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1826925500/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-03T09:04:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1826925500",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31029#discussion_r1826925527"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1826925527"
                }
            },
            "author_association": "MEMBER",
            "body": "`idx` is 1-based?",
            "commit_id": "162d3ef19f1f86328efc9bbe158941bb13959730",
            "created_at": "2024-11-03T09:04:23Z",
            "diff_hunk": "@@ -270,58 +297,79 @@ local sig_help_ns = api.nvim_create_namespace('vim_lsp_signature_help')\n function M.signature_help(config)\n   local method = ms.textDocument_signatureHelp\n \n-  config = config or {}\n+  config = config and vim.deepcopy(config) or {}\n   config.focus_id = method\n \n-  lsp.buf_request(0, method, client_positional_params(), function(err, result, ctx)\n-    local client = assert(vim.lsp.get_client_by_id(ctx.client_id))\n-\n-    if err then\n-      vim.notify(\n-        client.name .. ': ' .. tostring(err.code) .. ': ' .. err.message,\n-        vim.log.levels.ERROR\n-      )\n-      api.nvim_command('redraw')\n-      return\n-    end\n-\n+  lsp.buf_request_all(0, method, client_positional_params(), function(results, ctx)\n     if api.nvim_get_current_buf() ~= ctx.bufnr then\n       -- Ignore result since buffer changed. This happens for slow language servers.\n       return\n     end\n \n-    -- When use `autocmd CompleteDone <silent><buffer> lua vim.lsp.buf.signature_help()` to call signatureHelp handler\n-    -- If the completion item doesn't have signatures It will make noise. Change to use `print` that can use `<silent>` to ignore\n-    if not result or not result.signatures or not result.signatures[1] then\n+    local signatures = process_signature_help_results(results)\n+\n+    if not next(signatures) then\n       if config.silent ~= true then\n         print('No signature help available')\n       end\n       return\n     end\n \n-    local triggers =\n-      vim.tbl_get(client.server_capabilities, 'signatureHelpProvider', 'triggerCharacters')\n-\n     local ft = vim.bo[ctx.bufnr].filetype\n-    local lines, hl = util.convert_signature_help_to_markdown_lines(result, ft, triggers)\n-    if not lines or vim.tbl_isempty(lines) then\n-      if config.silent ~= true then\n-        print('No signature help available')\n+    local total = #signatures\n+    local idx = 0\n+\n+    --- @param update_win? integer\n+    local function show_signature(update_win)\n+      idx = (idx % total) + 1\n+      local client, result = signatures[idx][1], signatures[idx][2]\n+      --- @type string[]?\n+      local triggers =\n+        vim.tbl_get(client.server_capabilities, 'signatureHelpProvider', 'triggerCharacters')\n+      local lines, hl =\n+        util.convert_signature_help_to_markdown_lines({ signatures = { result } }, ft, triggers)\n+      if not lines then\n+        return\n       end\n-      return\n+\n+      local sfx = total > 1 and string.format(' (%d/%d) (<C-s> to cycle)', idx, total) or ''",
            "html_url": "https://github.com/neovim/neovim/pull/31029#discussion_r1826925527",
            "id": 1826925527,
            "in_reply_to_id": 1826897189,
            "line": 335,
            "node_id": "PRRC_kwDOAPphoM5s5KvX",
            "original_commit_id": "28dd227a6aaa68cda58374ca57497e57500ce9eb",
            "original_line": 335,
            "original_position": 97,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/buf.lua",
            "position": 97,
            "pull_request_review_id": 2411799248,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1826925527/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-03T09:04:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1826925527",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31029#discussion_r1826925967"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1826925967"
                }
            },
            "author_association": "MEMBER",
            "body": "The `a` is for active_offset. I would have used `start` and `end` but `end` is a keyword so I added a single letter prefix. We could go with `s` and `e`. As their scope is very small, so I don't think longer names are justified.",
            "commit_id": "162d3ef19f1f86328efc9bbe158941bb13959730",
            "created_at": "2024-11-03T09:07:24Z",
            "diff_hunk": "@@ -804,9 +804,11 @@ function M.convert_signature_help_to_markdown_lines(signature_help, ft, triggers\n       active_offset[2] = active_offset[2] + #contents[1]\n     end\n \n-    active_hl = {}\n-    list_extend(active_hl, get_pos_from_offset(active_offset[1], contents) or {})\n-    list_extend(active_hl, get_pos_from_offset(active_offset[2], contents) or {})\n+    local astart = get_pos_from_offset(active_offset[1], contents)\n+    local aend = get_pos_from_offset(active_offset[2], contents)\n+    if astart and aend then",
            "html_url": "https://github.com/neovim/neovim/pull/31029#discussion_r1826925967",
            "id": 1826925967,
            "in_reply_to_id": 1826897285,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5s5K2P",
            "original_commit_id": "28dd227a6aaa68cda58374ca57497e57500ce9eb",
            "original_line": 809,
            "original_position": 18,
            "original_start_line": 807,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 2411799734,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1826925967/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-11-03T09:07:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1826925967",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31029#discussion_r1827015807"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1827015807"
                }
            },
            "author_association": "MEMBER",
            "body": "Oh I was just seeing that you initialize `idx` to 0 but then you set `idx = (idx % total) + 1`. Never mind.",
            "commit_id": "162d3ef19f1f86328efc9bbe158941bb13959730",
            "created_at": "2024-11-03T16:16:00Z",
            "diff_hunk": "@@ -270,58 +297,79 @@ local sig_help_ns = api.nvim_create_namespace('vim_lsp_signature_help')\n function M.signature_help(config)\n   local method = ms.textDocument_signatureHelp\n \n-  config = config or {}\n+  config = config and vim.deepcopy(config) or {}\n   config.focus_id = method\n \n-  lsp.buf_request(0, method, client_positional_params(), function(err, result, ctx)\n-    local client = assert(vim.lsp.get_client_by_id(ctx.client_id))\n-\n-    if err then\n-      vim.notify(\n-        client.name .. ': ' .. tostring(err.code) .. ': ' .. err.message,\n-        vim.log.levels.ERROR\n-      )\n-      api.nvim_command('redraw')\n-      return\n-    end\n-\n+  lsp.buf_request_all(0, method, client_positional_params(), function(results, ctx)\n     if api.nvim_get_current_buf() ~= ctx.bufnr then\n       -- Ignore result since buffer changed. This happens for slow language servers.\n       return\n     end\n \n-    -- When use `autocmd CompleteDone <silent><buffer> lua vim.lsp.buf.signature_help()` to call signatureHelp handler\n-    -- If the completion item doesn't have signatures It will make noise. Change to use `print` that can use `<silent>` to ignore\n-    if not result or not result.signatures or not result.signatures[1] then\n+    local signatures = process_signature_help_results(results)\n+\n+    if not next(signatures) then\n       if config.silent ~= true then\n         print('No signature help available')\n       end\n       return\n     end\n \n-    local triggers =\n-      vim.tbl_get(client.server_capabilities, 'signatureHelpProvider', 'triggerCharacters')\n-\n     local ft = vim.bo[ctx.bufnr].filetype\n-    local lines, hl = util.convert_signature_help_to_markdown_lines(result, ft, triggers)\n-    if not lines or vim.tbl_isempty(lines) then\n-      if config.silent ~= true then\n-        print('No signature help available')\n+    local total = #signatures\n+    local idx = 0\n+\n+    --- @param update_win? integer\n+    local function show_signature(update_win)\n+      idx = (idx % total) + 1\n+      local client, result = signatures[idx][1], signatures[idx][2]\n+      --- @type string[]?\n+      local triggers =\n+        vim.tbl_get(client.server_capabilities, 'signatureHelpProvider', 'triggerCharacters')\n+      local lines, hl =\n+        util.convert_signature_help_to_markdown_lines({ signatures = { result } }, ft, triggers)\n+      if not lines then\n+        return\n       end\n-      return\n+\n+      local sfx = total > 1 and string.format(' (%d/%d) (<C-s> to cycle)', idx, total) or ''",
            "html_url": "https://github.com/neovim/neovim/pull/31029#discussion_r1827015807",
            "id": 1827015807,
            "in_reply_to_id": 1826897189,
            "line": 335,
            "node_id": "PRRC_kwDOAPphoM5s5gx_",
            "original_commit_id": "28dd227a6aaa68cda58374ca57497e57500ce9eb",
            "original_line": 335,
            "original_position": 97,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/buf.lua",
            "position": 97,
            "pull_request_review_id": 2411887871,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1827015807/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-03T16:16:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1827015807",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31029#discussion_r1827015920"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1827015920"
                }
            },
            "author_association": "MEMBER",
            "body": "Can we at least use `a_`?",
            "commit_id": "162d3ef19f1f86328efc9bbe158941bb13959730",
            "created_at": "2024-11-03T16:16:30Z",
            "diff_hunk": "@@ -804,9 +804,11 @@ function M.convert_signature_help_to_markdown_lines(signature_help, ft, triggers\n       active_offset[2] = active_offset[2] + #contents[1]\n     end\n \n-    active_hl = {}\n-    list_extend(active_hl, get_pos_from_offset(active_offset[1], contents) or {})\n-    list_extend(active_hl, get_pos_from_offset(active_offset[2], contents) or {})\n+    local astart = get_pos_from_offset(active_offset[1], contents)\n+    local aend = get_pos_from_offset(active_offset[2], contents)\n+    if astart and aend then",
            "html_url": "https://github.com/neovim/neovim/pull/31029#discussion_r1827015920",
            "id": 1827015920,
            "in_reply_to_id": 1826897285,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5s5gzw",
            "original_commit_id": "28dd227a6aaa68cda58374ca57497e57500ce9eb",
            "original_line": 809,
            "original_position": 18,
            "original_start_line": 807,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 2411887973,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31029",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1827015920/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-11-03T16:16:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1827015920",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/31029#discussion_r1827510684"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/31029"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1827510684"
                }
            },
            "author_association": "MEMBER",
            "body": "`lines` is explicitly provided as markdown from `vim.lsp.util.convert_signature_help_to_markdown_lines()`\r\n",
            "commit_id": "162d3ef19f1f86328efc9bbe158941bb13959730",
            "created_at": "2024-11-04T10:30:15Z",
            "diff_hunk": "@@ -270,58 +297,79 @@ local sig_help_ns = api.nvim_create_namespace('vim_lsp_signature_help')\n function M.signature_help(config)\n   local method = ms.textDocument_signatureHelp\n \n-  config = config or {}\n+  config = config and vim.deepcopy(config) or {}\n   config.focus_id = method\n \n-  lsp.buf_request(0, method, client_positional_params(), function(err, result, ctx)\n-    local client = assert(vim.lsp.get_client_by_id(ctx.client_id))\n-\n-    if err then\n-      vim.notify(\n-        client.name .. ': ' .. tostring(err.code) .. ': ' .. err.message,\n-        vim.log.levels.ERROR\n-      )\n-      api.nvim_command('redraw')\n-      return\n-    end\n-\n+  lsp.buf_request_all(0, method, client_positional_params(), function(results, ctx)\n     if api.nvim_get_current_buf() ~= ctx.bufnr then\n       -- Ignore result since buffer changed. This happens for slow language servers.\n       return\n     end\n \n-    -- When use `autocmd CompleteDone <silent><buffer> lua vim.lsp.buf.signature_help()` to call signatureHelp handler\n-    -- If the completion item doesn't have signatures It will make noise. Change to use `print` that can use `<silent>` to ignore\n-    if not result or not result.signatures or not result.signatures[1] then\n+    local signatures = process_signature_help_results(results)\n+\n+    if not next(signatures) then\n       if config.silent ~= true then\n         print('No signature help available')\n       end\n       return\n     end\n \n-    local triggers =\n-      vim.tbl_get(client.server_capabilities, 'signatureHelpProvider', 'triggerCharacters')\n-\n     local ft = vim.bo[ctx.bufnr].filetype\n-    local lines, hl = util.convert_signature_help_to_markdown_lines(result, ft, triggers)\n-    if not lines or vim.tbl_isempty(lines) then\n-      if config.silent ~= true then\n-        print('No signature help available')\n+    local total = #signatures\n+    local idx = 0\n+\n+    --- @param update_win? integer\n+    local function show_signature(update_win)\n+      idx = (idx % total) + 1\n+      local client, result = signatures[idx][1], signatures[idx][2]\n+      --- @type string[]?\n+      local triggers =\n+        vim.tbl_get(client.server_capabilities, 'signatureHelpProvider', 'triggerCharacters')\n+      local lines, hl =\n+        util.convert_signature_help_to_markdown_lines({ signatures = { result } }, ft, triggers)\n+      if not lines then\n+        return\n       end\n-      return\n+\n+      local sfx = total > 1 and string.format(' (%d/%d) (<C-s> to cycle)', idx, total) or ''\n+      local title = string.format('Signature Help: %s%s', client.name, sfx)\n+      if config.border then\n+        config.title = title\n+      else\n+        table.insert(lines, 1, '# ' .. title)\n+        if hl then\n+          hl[1] = hl[1] + 1\n+          hl[3] = hl[3] + 1\n+        end\n+      end\n+\n+      config._update_win = update_win\n+\n+      local buf, win = util.open_floating_preview(lines, 'markdown', config)",
            "html_url": "https://github.com/neovim/neovim/pull/31029#discussion_r1827510684",
            "id": 1827510684,
            "in_reply_to_id": 1826896929,
            "line": 349,
            "node_id": "PRRC_kwDOAPphoM5s7Zmc",
            "original_commit_id": "28dd227a6aaa68cda58374ca57497e57500ce9eb",
            "original_line": 349,
            "original_position": 111,
            "original_start_line": null,
            "path": "runtime/lua/vim/lsp/buf.lua",
            "position": 111,
            "pull_request_review_id": 2412696203,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/31029",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1827510684/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-11-04T10:30:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1827510684",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "Feel free to bikeshed on UI and keymaps.",
            "created_at": "2024-11-01T12:38:21Z",
            "html_url": "https://github.com/neovim/neovim/pull/31029#issuecomment-2451807492",
            "id": 2451807492,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31029",
            "node_id": "IC_kwDOAPphoM6SI50E",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2451807492/reactions"
            },
            "updated_at": "2024-11-01T12:38:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2451807492",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Feel free to bikeshed on UI and keymaps.\r\n\r\nYeah I don't like using `<C-s>` since I use that to escape and save 😄.\r\n\r\nI think it would be nice to cycle through the signatures when calling the function again, although that's currently used to focus the window (although who needs to focus sig help?).",
            "created_at": "2024-11-03T03:39:27Z",
            "html_url": "https://github.com/neovim/neovim/pull/31029#issuecomment-2453280867",
            "id": 2453280867,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31029",
            "node_id": "IC_kwDOAPphoM6SOhhj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453280867/reactions"
            },
            "updated_at": "2024-11-03T03:39:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453280867",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I think it would be nice to cycle through the signatures when calling the function again, although that's currently used to focus the window (although who needs to focus sig help?).\n\nNote the mapping is for the floating buffer, and not the original buffer. Adding mappings to the original buffer is off the cards since it interferes with user mappings. I believe we need custom modes in order to add mappings to the main buffer. I chose `<c-s>` because that's the default value to open and enter the window. Once you are in the window, you can repeat the key to cycle signatures.\n\nCalling the function again might be possible, but would be more complicated since we need to store a closure somewhere. And we wouldn't be able to show help for the mapping.\n\nThe alternative is to not cycle and just dump out all the signatures in a single buffer like we do for hover.\n\nEDIT: this might actually be a good application for `<Plug>` mappings.\n",
            "created_at": "2024-11-03T09:16:02Z",
            "html_url": "https://github.com/neovim/neovim/pull/31029#issuecomment-2453338904",
            "id": 2453338904,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31029",
            "node_id": "IC_kwDOAPphoM6SOvsY",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453338904/reactions"
            },
            "updated_at": "2024-11-03T09:19:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453338904",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Note the mapping is for the floating buffer, and not the original buffer. Adding mappings to the original buffer is off the cards since it interferes with user mappings. I believe we need custom modes in order to add mappings to the main buffer. I chose `<c-s>` because that's the default value to open and enter the window. Once you are in the window, you can repeat the key to cycle signatures.\r\n\r\nUnderstood. But then cycling would only be possible if you set `focusable` to true right? If that's the case, I would remove the cycling labels when `focusable` is set to false.\r\n\r\n> Calling the function again might be possible, but would be more complicated since we need to store a closure somewhere. And we wouldn't be able to show help for the mapping.\r\n\r\nSomething nice about this is that then we could cycle through the signatures without having to jump into the buffer first. But this design wouldn't allow focusing the buffer.\r\n\r\n> The alternative is to not cycle and just dump out all the signatures in a single buffer like we do for hover.\r\n\r\nI don't like this since a single server can also return multiple signatures, so this would be noisy.\r\n\r\n",
            "created_at": "2024-11-03T16:19:33Z",
            "html_url": "https://github.com/neovim/neovim/pull/31029#issuecomment-2453483647",
            "id": 2453483647,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31029",
            "node_id": "IC_kwDOAPphoM6SPTB_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453483647/reactions"
            },
            "updated_at": "2024-11-03T16:19:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2453483647",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Could always use c-w w to focus the window.\r\n\r\nJust note that re-using the same mapping, used to show the float, to enter it, has become a bit of an unwritten convention. I've seen it requested in both gitsigns.nvim and hover.nvim.\r\n\r\n> (I'd even consider cycling for hover too)\r\n\r\nOff-topic, but I'm hoping we can eventually sherlock hover.nvim (in a better form) into something like `vim.hover`, similar to how `vim.diagnostic` relates to LSP diagnostics, so we can include non-LSP hovers: e.g. vimhelp, man pages, diagnostics, in addition to providing an API for plugins to add their own hovers. Normally I'd say this is out of scope, but as we already provide `vim.lsp.buf.hover()`, I think this would be worth doing.",
            "created_at": "2024-11-04T11:55:33Z",
            "html_url": "https://github.com/neovim/neovim/pull/31029#issuecomment-2454519081",
            "id": 2454519081,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31029",
            "node_id": "IC_kwDOAPphoM6STP0p",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2454519081/reactions"
            },
            "updated_at": "2024-11-04T11:55:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2454519081",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I'm hoping we can eventually sherlock hover.nvim (in a better form) into something like `vim.hover`\r\n\r\nSeems like it would fit in `vim.ui.hover`",
            "created_at": "2024-11-04T12:48:47Z",
            "html_url": "https://github.com/neovim/neovim/pull/31029#issuecomment-2454632016",
            "id": 2454632016,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31029",
            "node_id": "IC_kwDOAPphoM6STrZQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2454632016/reactions"
            },
            "updated_at": "2024-11-04T12:48:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2454632016",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Just note that re-using the same mapping, used to show the float, to enter it, has become a bit of an unwritten convention\r\n\r\nUnfortunately - I'm not a fan of these extra mappings when some that are not really harder to use already exist - especially if it then blocks using these keys for potentially more useful behavior.\r\n\r\n> Off-topic, but I'm hoping we can eventually sherlock hover.nvim (in a better form) into something like vim.hover, similar to how vim.diagnostic relates to LSP diagnostics, so we can include non-LSP hovers: e.g. vimhelp, man pages, diagnostics,\r\n\r\nCould this use the lsp subsystem via https://github.com/neovim/neovim/pull/24338 ?\r\n",
            "created_at": "2024-11-04T15:13:33Z",
            "html_url": "https://github.com/neovim/neovim/pull/31029#issuecomment-2454977770",
            "id": 2454977770,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31029",
            "node_id": "IC_kwDOAPphoM6SU_zq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2454977770/reactions"
            },
            "updated_at": "2024-11-04T15:13:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2454977770",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Unfortunately - I'm not a fan of these extra mappings when some that are not really harder to use already exist - especially if it then blocks using these keys for potentially more useful behavior.\r\n\r\nI'm mostly indifferent, but what is _common_ should be taken into account. I can see the argument that `<C-w>w` is a bit clumsy, but a counterargument to that could be something like `noremap <C-q> <C-w>w`.\r\n\r\n> Could this use the lsp subsystem via https://github.com/neovim/neovim/pull/24338 ?\r\n\r\nYeah, potentially. I remember you suggesting it. Arguably, we could have made the same argument for doing that instead of implementing `vim.diagnostic`. We can prototype both, but I expect a dedicated interface will provide more flexibility since we'll be able to reason about Nvim buffers, extmarks, additional mappings, etc, instead of the interface just being `'markdown'|'plaintext'`",
            "created_at": "2024-11-04T15:25:03Z",
            "html_url": "https://github.com/neovim/neovim/pull/31029#issuecomment-2455006711",
            "id": 2455006711,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31029",
            "node_id": "IC_kwDOAPphoM6SVG33",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2455006711/reactions"
            },
            "updated_at": "2024-11-04T15:25:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2455006711",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/31029/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/31029/commits",
    "created_at": "2024-11-01T12:33:24Z",
    "diff_url": "https://github.com/neovim/neovim/pull/31029.diff",
    "draft": false,
    "head": {
        "label": "lewis6991:feat/sighelp_multi",
        "ref": "feat/sighelp_multi",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/lewis6991/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/lewis6991/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/lewis6991/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/lewis6991/neovim/branches{/branch}",
            "clone_url": "https://github.com/lewis6991/neovim.git",
            "collaborators_url": "https://api.github.com/repos/lewis6991/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/lewis6991/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/lewis6991/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/lewis6991/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/lewis6991/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/lewis6991/neovim/contributors",
            "created_at": "2020-11-24T21:47:43Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/lewis6991/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/lewis6991/neovim/downloads",
            "events_url": "https://api.github.com/repos/lewis6991/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/lewis6991/neovim/forks",
            "full_name": "lewis6991/neovim",
            "git_commits_url": "https://api.github.com/repos/lewis6991/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/lewis6991/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/lewis6991/neovim/git/tags{/sha}",
            "git_url": "git://github.com/lewis6991/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/lewis6991/neovim/hooks",
            "html_url": "https://github.com/lewis6991/neovim",
            "id": 315760150,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/lewis6991/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/lewis6991/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/lewis6991/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/lewis6991/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/lewis6991/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/lewis6991/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/lewis6991/neovim/merges",
            "milestones_url": "https://api.github.com/repos/lewis6991/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkzMTU3NjAxNTA=",
            "notifications_url": "https://api.github.com/repos/lewis6991/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/lewis6991/neovim/pulls{/number}",
            "pushed_at": "2024-11-04T16:22:18Z",
            "releases_url": "https://api.github.com/repos/lewis6991/neovim/releases{/id}",
            "size": 286207,
            "ssh_url": "git@github.com:lewis6991/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/lewis6991/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/lewis6991/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/lewis6991/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/lewis6991/neovim/subscription",
            "svn_url": "https://github.com/lewis6991/neovim",
            "tags_url": "https://api.github.com/repos/lewis6991/neovim/tags",
            "teams_url": "https://api.github.com/repos/lewis6991/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/lewis6991/neovim/git/trees{/sha}",
            "updated_at": "2024-02-06T12:43:15Z",
            "url": "https://api.github.com/repos/lewis6991/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "162d3ef19f1f86328efc9bbe158941bb13959730",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
            "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
            "followers_url": "https://api.github.com/users/lewis6991/followers",
            "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
            "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/lewis6991",
            "id": 7904185,
            "login": "lewis6991",
            "node_id": "MDQ6VXNlcjc5MDQxODU=",
            "organizations_url": "https://api.github.com/users/lewis6991/orgs",
            "received_events_url": "https://api.github.com/users/lewis6991/received_events",
            "repos_url": "https://api.github.com/users/lewis6991/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/lewis6991",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/31029",
    "id": 2157995369,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/31029",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "locked": false,
    "merge_commit_sha": "6e68fed37441096bf9fd2aa27b9bf6e7d7eae550",
    "merged_at": "2024-11-04T11:55:39Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM6AoGVp",
    "number": 31029,
    "patch_url": "https://github.com/neovim/neovim/pull/31029.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/31029/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/162d3ef19f1f86328efc9bbe158941bb13959730",
    "title": "feat(lsp): multi-client support for signature_help",
    "updated_at": "2024-11-04T15:25:05Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/31029",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
        "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
        "followers_url": "https://api.github.com/users/lewis6991/followers",
        "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
        "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/lewis6991",
        "id": 7904185,
        "login": "lewis6991",
        "node_id": "MDQ6VXNlcjc5MDQxODU=",
        "organizations_url": "https://api.github.com/users/lewis6991/orgs",
        "received_events_url": "https://api.github.com/users/lewis6991/received_events",
        "repos_url": "https://api.github.com/users/lewis6991/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/lewis6991",
        "user_view_type": "public"
    }
}