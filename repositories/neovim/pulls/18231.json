{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/18231/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/18231/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/18231"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/18231"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/18231/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/8dbb11ebf633e40cb57568e77c7168deffc8bd7f"
        }
    },
    "active_lock_reason": "resolved",
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 4858,
            "forks_count": 4858,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1679,
            "open_issues_count": 1679,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2023-09-11T00:42:25Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 247614,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 69248,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2023-09-11T01:19:13Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 69248,
            "watchers_count": 69248,
            "web_commit_signoff_required": false
        },
        "sha": "3c23100130725bb79c04e933c505bbeda96fb3bb",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "Adds an API function to parse a command line string and get command information from it\r\n\r\nrelated: #14966",
    "closed_at": "2022-04-30T16:41:17Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r856858414"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/856858414"
                }
            },
            "author_association": "MEMBER",
            "body": "This is not freed",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-23T06:34:26Z",
            "diff_hunk": "@@ -1220,6 +1220,111 @@ static char_u *skip_colon_white(const char_u *p, bool skipleadingwhite)\n   return (char_u *)p;\n }\n \n+// Set the addr type for command\n+//\n+// @param p pointer to character after command name in cmdline\n+static void set_cmd_addr_type(exarg_T *eap, char_u *p)\n+{\n+  // ea.addr_type for user commands is set by find_ucmd\n+  if (!IS_USER_CMDIDX(eap->cmdidx)) {\n+    if (eap->cmdidx != CMD_SIZE) {\n+      eap->addr_type = cmdnames[(int)eap->cmdidx].cmd_addr_type;\n+    } else {\n+      eap->addr_type = ADDR_LINES;\n+    }\n+    // :wincmd range depends on the argument\n+    if (eap->cmdidx == CMD_wincmd && p != NULL) {\n+      get_wincmd_addr_type(skipwhite(p), eap);\n+    }\n+    // :.cc in quickfix window uses line number\n+    if ((eap->cmdidx == CMD_cc || eap->cmdidx == CMD_ll) && bt_quickfix(curbuf)) {\n+      eap->addr_type = ADDR_OTHER;\n+    }\n+  }\n+}\n+\n+/// Parse command line and return information about the first command.\n+///\n+/// @return Success or failure\n+bool parse_cmdline(const char_u *cmdline_str, exarg_T *eap)\n+{\n+  char *errormsg = NULL;\n+  char_u *cmdline = vim_strsave(cmdline_str);",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r856858414",
            "id": 856858414,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zEp8u",
            "original_commit_id": "3cae689ee4c429e999084597c72c88088b14dd6a",
            "original_line": 1252,
            "original_position": 33,
            "original_start_line": null,
            "path": "src/nvim/ex_docmd.c",
            "position": null,
            "pull_request_review_id": 950937376,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/856858414/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-23T06:34:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/856858414",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r856861262"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/856861262"
                }
            },
            "author_association": "MEMBER",
            "body": "This does fail for an non-existent command.",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-23T07:13:05Z",
            "diff_hunk": "@@ -2451,3 +2451,70 @@ void nvim_del_user_command(String name, Error *err)\n {\n   nvim_buf_del_user_command(-1, name, err);\n }\n+\n+/// Parse command line.\n+///\n+/// Doesn't check the validity of command or command arguments.",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r856861262",
            "id": 856861262,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zEqpO",
            "original_commit_id": "7d442cfd98103b00bdc13798c523f18d01e136f7",
            "original_line": 2457,
            "original_position": 7,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 950939685,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/856861262/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-23T07:13:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/856861262",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r856861339"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/856861339"
                }
            },
            "author_association": "MEMBER",
            "body": "`cmdline` is not freed when returning here.",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-23T07:14:35Z",
            "diff_hunk": "@@ -2451,3 +2451,70 @@ void nvim_del_user_command(String name, Error *err)\n {\n   nvim_buf_del_user_command(-1, name, err);\n }\n+\n+/// Parse command line.\n+///\n+/// Doesn't check the validity of command or command arguments.\n+///\n+/// @param str       Command line string to parse. Cannot contain \"\\n\".\n+/// @param opts      Optional parameters. Reserved for future use.\n+/// @param[out] err  Error details, if any.\n+/// @return Dictionary containing command information, with these keys:\n+///         - cmd: (string) command name.\n+///         - line1: (number) starting line of command range.\n+///         - line2: (number) final line of command range.\n+///         - force: (boolean) whether command contains a bang.\n+///         - args: (array) command arguments.\n+Dictionary nvim_parse_cmdline(String str, Dictionary opts, Error *err)\n+  FUNC_API_SINCE(10) FUNC_API_FAST\n+{\n+  Dictionary result = ARRAY_DICT_INIT;\n+\n+  if (opts.size > 0) {\n+    api_set_error(err, kErrorTypeValidation, \"opts dict isn't empty\");\n+    return result;\n+  }\n+\n+  // Parse command line\n+  exarg_T ea;\n+  char_u *cmdline = vim_strsave((char_u *)str.data);\n+\n+  if (!parse_cmdline(cmdline, &ea)) {\n+    api_set_error(err, kErrorTypeException, \"Error while parsing command line\");\n+    return result;",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r856861339",
            "id": 856861339,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zEqqb",
            "original_commit_id": "7d442cfd98103b00bdc13798c523f18d01e136f7",
            "original_line": 2484,
            "original_position": 34,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 950939780,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/856861339/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-23T07:14:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/856861339",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r856865322"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/856865322"
                }
            },
            "author_association": "MEMBER",
            "body": "Fixed now",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-23T08:03:29Z",
            "diff_hunk": "@@ -2451,3 +2451,70 @@ void nvim_del_user_command(String name, Error *err)\n {\n   nvim_buf_del_user_command(-1, name, err);\n }\n+\n+/// Parse command line.\n+///\n+/// Doesn't check the validity of command or command arguments.",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r856865322",
            "id": 856865322,
            "in_reply_to_id": 856861262,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zEroq",
            "original_commit_id": "7d442cfd98103b00bdc13798c523f18d01e136f7",
            "original_line": 2457,
            "original_position": 7,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 950942811,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/856865322/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-23T08:03:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/856865322",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r856865351"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/856865351"
                }
            },
            "author_association": "MEMBER",
            "body": "Fixed",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-23T08:03:49Z",
            "diff_hunk": "@@ -2451,3 +2451,70 @@ void nvim_del_user_command(String name, Error *err)\n {\n   nvim_buf_del_user_command(-1, name, err);\n }\n+\n+/// Parse command line.\n+///\n+/// Doesn't check the validity of command or command arguments.\n+///\n+/// @param str       Command line string to parse. Cannot contain \"\\n\".\n+/// @param opts      Optional parameters. Reserved for future use.\n+/// @param[out] err  Error details, if any.\n+/// @return Dictionary containing command information, with these keys:\n+///         - cmd: (string) command name.\n+///         - line1: (number) starting line of command range.\n+///         - line2: (number) final line of command range.\n+///         - force: (boolean) whether command contains a bang.\n+///         - args: (array) command arguments.\n+Dictionary nvim_parse_cmdline(String str, Dictionary opts, Error *err)\n+  FUNC_API_SINCE(10) FUNC_API_FAST\n+{\n+  Dictionary result = ARRAY_DICT_INIT;\n+\n+  if (opts.size > 0) {\n+    api_set_error(err, kErrorTypeValidation, \"opts dict isn't empty\");\n+    return result;\n+  }\n+\n+  // Parse command line\n+  exarg_T ea;\n+  char_u *cmdline = vim_strsave((char_u *)str.data);\n+\n+  if (!parse_cmdline(cmdline, &ea)) {\n+    api_set_error(err, kErrorTypeException, \"Error while parsing command line\");\n+    return result;",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r856865351",
            "id": 856865351,
            "in_reply_to_id": 856861339,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zErpH",
            "original_commit_id": "7d442cfd98103b00bdc13798c523f18d01e136f7",
            "original_line": 2484,
            "original_position": 34,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 950942829,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/856865351/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-23T08:03:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/856865351",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r856942528"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/856942528"
                }
            },
            "author_association": "MEMBER",
            "body": "Even if we don't have full capability yet, we should also include fields such as:\r\n\r\n1. whether `%` is treated literally or expanded. The field could be called `magic` but probably it needs to be a list (not binary) because of the nonsensical variations possible with Vim commands. So `magic=[]` means \"literal\", `magic=['%']` means \"%\" is interpreted in the magic way, `magic=['%', '|']` means that `|` is non-literal, `magic=['%', '|', '\"']` means that `\"` is a comment\r\n2. `mods` , see `:help <mods>`\r\n3. `nargs`, see `:help :command-nargs`\r\n    - the explicitness is useful as command \"metadata\" even though the `args` list implies it\r\n\r\nThis knowledge might need to be maintained as a hacky list for now, but ultimately should be built into `src/nvim/ex_cmds.lua`",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-23T17:22:11Z",
            "diff_hunk": "@@ -1350,6 +1350,27 @@ nvim_out_write({str})                                       *nvim_out_write()*\n                 Parameters: ~\n                     {str}  Message\n \n+nvim_parse_cmdline({str}, {opts})                       *nvim_parse_cmdline()*\n+                Parse command line.\n+\n+                Doesn't check the validity of command arguments.\n+\n+                Attributes: ~\n+                    {fast}\n+\n+                Parameters: ~\n+                    {str}   Command line string to parse. Cannot contain \"\\n\".\n+                    {opts}  Optional parameters. Reserved for future use.\n+\n+                Return: ~\n+                    Dictionary containing command information, with these\n+                    keys:\n+                    • cmd: (string) command name.\n+                    • line1: (number) starting line of command range.\n+                    • line2: (number) final line of command range.\n+                    • force: (boolean) whether command contains a bang.\n+                    • args: (array) command arguments.",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r856942528",
            "id": 856942528,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zE-fA",
            "original_commit_id": "20c49fb2ebb12ab5635f43a0adcc3768a50e2259",
            "original_line": 1372,
            "original_position": 23,
            "original_start_line": null,
            "path": "runtime/doc/api.txt",
            "position": null,
            "pull_request_review_id": 951019452,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/856942528/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-23T17:38:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/856942528",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r856942791"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/856942791"
                }
            },
            "author_association": "MEMBER",
            "body": "* Let's introduce \"cmd\" as an API noun and stick with it. This opens the door for `nvim_exec_cmd({list})`, then we can deprecate `nvim_command({string})` and maybe even `nvim_exec()`.\r\n* \"cmdline\" implies the UI for entering cmds, which isn't really the case here.\r\n\r\n```suggestion\r\nDictionary nvim_parse_cmd(String str, Dictionary opts, Error *err)\r\n```",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-23T17:25:12Z",
            "diff_hunk": "@@ -2451,3 +2451,71 @@ void nvim_del_user_command(String name, Error *err)\n {\n   nvim_buf_del_user_command(-1, name, err);\n }\n+\n+/// Parse command line.\n+///\n+/// Doesn't check the validity of command arguments.\n+///\n+/// @param str       Command line string to parse. Cannot contain \"\\n\".\n+/// @param opts      Optional parameters. Reserved for future use.\n+/// @param[out] err  Error details, if any.\n+/// @return Dictionary containing command information, with these keys:\n+///         - cmd: (string) command name.\n+///         - line1: (number) starting line of command range.\n+///         - line2: (number) final line of command range.\n+///         - force: (boolean) whether command contains a bang.\n+///         - args: (array) command arguments.\n+Dictionary nvim_parse_cmdline(String str, Dictionary opts, Error *err)",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r856942791",
            "id": 856942791,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zE-jH",
            "original_commit_id": "20c49fb2ebb12ab5635f43a0adcc3768a50e2259",
            "original_line": 2468,
            "original_position": 18,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 951019651,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/856942791/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-23T17:25:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/856942791",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r857029411"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/857029411"
                }
            },
            "author_association": "MEMBER",
            "body": "This is an argument in favor of keeping `nvim_parse_cmd` separate from `nvim_cmd` (which wouldn't be \"fast\" unless `opt.parse_only=true`).",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-23T19:48:33Z",
            "diff_hunk": "@@ -1350,6 +1350,27 @@ nvim_out_write({str})                                       *nvim_out_write()*\n                 Parameters: ~\n                     {str}  Message\n \n+nvim_parse_cmdline({str}, {opts})                       *nvim_parse_cmdline()*\n+                Parse command line.\n+\n+                Doesn't check the validity of command arguments.\n+\n+                Attributes: ~\n+                    {fast}",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r857029411",
            "id": 857029411,
            "line": 1359,
            "node_id": "PRRC_kwDOAPphoM4zFTsj",
            "original_commit_id": "20c49fb2ebb12ab5635f43a0adcc3768a50e2259",
            "original_line": 1359,
            "original_position": 10,
            "original_start_line": null,
            "path": "runtime/doc/api.txt",
            "position": 10,
            "pull_request_review_id": 951123209,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/857029411/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-23T19:48:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/857029411",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r857068916"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/857068916"
                }
            },
            "author_association": "MEMBER",
            "body": "I think we should keep `nvim_parse_cmd` separate, but keep them compatible so that `nvim_cmd(nvim_parse_cmd(command))` always has the same effect as `nvim_command(command)`",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-24T05:37:00Z",
            "diff_hunk": "@@ -1350,6 +1350,27 @@ nvim_out_write({str})                                       *nvim_out_write()*\n                 Parameters: ~\n                     {str}  Message\n \n+nvim_parse_cmdline({str}, {opts})                       *nvim_parse_cmdline()*\n+                Parse command line.\n+\n+                Doesn't check the validity of command arguments.\n+\n+                Attributes: ~\n+                    {fast}",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r857068916",
            "id": 857068916,
            "in_reply_to_id": 857029411,
            "line": 1359,
            "node_id": "PRRC_kwDOAPphoM4zFdV0",
            "original_commit_id": "20c49fb2ebb12ab5635f43a0adcc3768a50e2259",
            "original_line": 1359,
            "original_position": 10,
            "original_start_line": null,
            "path": "runtime/doc/api.txt",
            "position": 10,
            "pull_request_review_id": 951153160,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/857068916/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-24T05:37:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/857068916",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r857196993"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/857196993"
                }
            },
            "author_association": "MEMBER",
            "body": "hmm. interesting...",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-25T00:26:12Z",
            "diff_hunk": "@@ -1350,6 +1350,27 @@ nvim_out_write({str})                                       *nvim_out_write()*\n                 Parameters: ~\n                     {str}  Message\n \n+nvim_parse_cmdline({str}, {opts})                       *nvim_parse_cmdline()*\n+                Parse command line.\n+\n+                Doesn't check the validity of command arguments.\n+\n+                Attributes: ~\n+                    {fast}",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r857196993",
            "id": 857196993,
            "in_reply_to_id": 857029411,
            "line": 1359,
            "node_id": "PRRC_kwDOAPphoM4zF8nB",
            "original_commit_id": "20c49fb2ebb12ab5635f43a0adcc3768a50e2259",
            "original_line": 1359,
            "original_position": 10,
            "original_start_line": null,
            "path": "runtime/doc/api.txt",
            "position": 10,
            "pull_request_review_id": 951263872,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/857196993/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-25T00:26:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/857196993",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r860947870"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/860947870"
                }
            },
            "author_association": "MEMBER",
            "body": "I added `mods` and `nargs`. Also added `addr` because I felt like that was also important. @justinmk not sure how to implement `magic`. In case it is difficult to implement, do you think we could merge this for now and implement that later since this would really benefit #18194 ",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-28T14:17:47Z",
            "diff_hunk": "@@ -1350,6 +1350,27 @@ nvim_out_write({str})                                       *nvim_out_write()*\n                 Parameters: ~\n                     {str}  Message\n \n+nvim_parse_cmdline({str}, {opts})                       *nvim_parse_cmdline()*\n+                Parse command line.\n+\n+                Doesn't check the validity of command arguments.\n+\n+                Attributes: ~\n+                    {fast}\n+\n+                Parameters: ~\n+                    {str}   Command line string to parse. Cannot contain \"\\n\".\n+                    {opts}  Optional parameters. Reserved for future use.\n+\n+                Return: ~\n+                    Dictionary containing command information, with these\n+                    keys:\n+                    • cmd: (string) command name.\n+                    • line1: (number) starting line of command range.\n+                    • line2: (number) final line of command range.\n+                    • force: (boolean) whether command contains a bang.\n+                    • args: (array) command arguments.",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r860947870",
            "id": 860947870,
            "in_reply_to_id": 856942528,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zUQWe",
            "original_commit_id": "20c49fb2ebb12ab5635f43a0adcc3768a50e2259",
            "original_line": 1372,
            "original_position": 23,
            "original_start_line": null,
            "path": "runtime/doc/api.txt",
            "position": null,
            "pull_request_review_id": 956520934,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/860947870/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-28T14:17:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/860947870",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r861446935"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/861446935"
                }
            },
            "author_association": "MEMBER",
            "body": "Having both `|` and `\"` in magic would be redundant btw since one implies the other (as far as I can tell). And honestly, I don't think having `|` or `\"` in magic is even necessary since we already do the job of separating the next command in `nvim_parse_cmd` itself",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-29T04:01:40Z",
            "diff_hunk": "@@ -1350,6 +1350,27 @@ nvim_out_write({str})                                       *nvim_out_write()*\n                 Parameters: ~\n                     {str}  Message\n \n+nvim_parse_cmdline({str}, {opts})                       *nvim_parse_cmdline()*\n+                Parse command line.\n+\n+                Doesn't check the validity of command arguments.\n+\n+                Attributes: ~\n+                    {fast}\n+\n+                Parameters: ~\n+                    {str}   Command line string to parse. Cannot contain \"\\n\".\n+                    {opts}  Optional parameters. Reserved for future use.\n+\n+                Return: ~\n+                    Dictionary containing command information, with these\n+                    keys:\n+                    • cmd: (string) command name.\n+                    • line1: (number) starting line of command range.\n+                    • line2: (number) final line of command range.\n+                    • force: (boolean) whether command contains a bang.\n+                    • args: (array) command arguments.",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r861446935",
            "id": 861446935,
            "in_reply_to_id": 856942528,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zWKMX",
            "original_commit_id": "20c49fb2ebb12ab5635f43a0adcc3768a50e2259",
            "original_line": 1372,
            "original_position": 23,
            "original_start_line": null,
            "path": "runtime/doc/api.txt",
            "position": null,
            "pull_request_review_id": 957229662,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/861446935/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-29T04:10:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/861446935",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r861483177"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/861483177"
                }
            },
            "author_association": "MEMBER",
            "body": "I implemented `magic` btw",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-29T06:12:08Z",
            "diff_hunk": "@@ -1350,6 +1350,27 @@ nvim_out_write({str})                                       *nvim_out_write()*\n                 Parameters: ~\n                     {str}  Message\n \n+nvim_parse_cmdline({str}, {opts})                       *nvim_parse_cmdline()*\n+                Parse command line.\n+\n+                Doesn't check the validity of command arguments.\n+\n+                Attributes: ~\n+                    {fast}\n+\n+                Parameters: ~\n+                    {str}   Command line string to parse. Cannot contain \"\\n\".\n+                    {opts}  Optional parameters. Reserved for future use.\n+\n+                Return: ~\n+                    Dictionary containing command information, with these\n+                    keys:\n+                    • cmd: (string) command name.\n+                    • line1: (number) starting line of command range.\n+                    • line2: (number) final line of command range.\n+                    • force: (boolean) whether command contains a bang.\n+                    • args: (array) command arguments.",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r861483177",
            "id": 861483177,
            "in_reply_to_id": 856942528,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zWTCp",
            "original_commit_id": "20c49fb2ebb12ab5635f43a0adcc3768a50e2259",
            "original_line": 1372,
            "original_position": 23,
            "original_start_line": null,
            "path": "runtime/doc/api.txt",
            "position": null,
            "pull_request_review_id": 957281636,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/861483177/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-29T06:12:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/861483177",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r862013223"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/862013223"
                }
            },
            "author_association": "MEMBER",
            "body": "`%` is missing here. perhaps it needs escaped as `%%` in source?",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-29T17:38:37Z",
            "diff_hunk": "@@ -1350,6 +1350,57 @@ nvim_out_write({str})                                       *nvim_out_write()*\n                 Parameters: ~\n                     {str}  Message\n \n+nvim_parse_cmd({str}, {opts})                               *nvim_parse_cmd()*\n+                Parse command line.\n+\n+                Doesn't check the validity of command arguments.\n+\n+                Attributes: ~\n+                    {fast}\n+\n+                Parameters: ~\n+                    {str}   Command line string to parse. Cannot contain \"\\n\".\n+                    {opts}  Optional parameters. Reserved for future use.\n+\n+                Return: ~\n+                    Dictionary containing command information, with these\n+                    keys:\n+                    • cmd: (string) Command name.\n+                    • line1: (number) Starting line of command range.\n+                    • line2: (number) Final line of command range.\n+                    • force: (boolean) Whether command contains a bang.\n+                    • args: (array) Command arguments.\n+                    • addr: (string) Value of |:command-addr|. Uses short\n+                      name.\n+                    • nargs: (string) Value of |:command-nargs|.\n+                    • nextcmd: (string) Next command if there are multiple\n+                      commands separated by a |:bar|. Empty if there isn't a\n+                      next command.\n+                    • magic: (array) Which characters have special meaning\n+                      inside the command arguments. Possible values inside the\n+                      array are:\n+                      • '': '' and '#' get expanded by the command.",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r862013223",
            "id": 862013223,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zYUcn",
            "original_commit_id": "827e854d7f8cc6c0e58cef23e6c59f85bef3f31c",
            "original_line": 1382,
            "original_position": 33,
            "original_start_line": null,
            "path": "runtime/doc/api.txt",
            "position": null,
            "pull_request_review_id": 958048984,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862013223/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-29T17:38:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862013223",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r862014237"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/862014237"
                }
            },
            "author_association": "MEMBER",
            "body": "`addr` could be defined as `const char *` and then we could just `addr = \"line\"` here and so on.",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-29T17:39:52Z",
            "diff_hunk": "@@ -2450,3 +2451,185 @@ void nvim_del_user_command(String name, Error *err)\n {\n   nvim_buf_del_user_command(-1, name, err);\n }\n+\n+/// Parse command line.\n+///\n+/// Doesn't check the validity of command arguments.\n+///\n+/// @param str       Command line string to parse. Cannot contain \"\\n\".\n+/// @param opts      Optional parameters. Reserved for future use.\n+/// @param[out] err  Error details, if any.\n+/// @return Dictionary containing command information, with these keys:\n+///         - cmd: (string) Command name.\n+///         - line1: (number) Starting line of command range.\n+///         - line2: (number) Final line of command range.\n+///         - force: (boolean) Whether command contains a bang.\n+///         - args: (array) Command arguments.\n+///         - addr: (string) Value of |:command-addr|. Uses short name.\n+///         - nargs: (string) Value of |:command-nargs|.\n+///         - nextcmd: (string) Next command if there are multiple commands separated by a |:bar|.\n+///                             Empty if there isn't a next command.\n+///         - magic: (array) Which characters have special meaning inside the command arguments.\n+///                          Possible values inside the array are:\n+///             - '%': '%' and '#' get expanded by the command.\n+///             - '|': '|' may get treated specially by the command depending on the command and\n+///                    where it's used. '\"' is treated as the start of a quote.\n+///         - mods: (dictionary) |:command-modifiers|.\n+///             - silent: (boolean) |:silent|.\n+///             - emsg_silent: (boolean) |:silent!|.\n+///             - sandbox: (boolean) |:sandbox|.\n+///             - noautocmd: (boolean) |:noautocmd|.\n+///             - browse: (boolean) |:browse|.\n+///             - confirm: (boolean) |:confirm|.\n+///             - hide: (boolean) |:hide|.\n+///             - keepalt: (boolean) |:keepalt|.\n+///             - keepjumps: (boolean) |:keepjumps|.\n+///             - keepmarks: (boolean) |:keepmarks|.\n+///             - keeppatterns: (boolean) |:keeppatterns|.\n+///             - lockmarks: (boolean) |:lockmarks|.\n+///             - noswapfile: (boolean) |:noswapfile|.\n+///             - tab: (integer) |:tab|.\n+///             - verbose: (integer) |:verbose|.\n+Dictionary nvim_parse_cmd(String str, Dictionary opts, Error *err)\n+  FUNC_API_SINCE(10) FUNC_API_FAST\n+{\n+  Dictionary result = ARRAY_DICT_INIT;\n+\n+  if (opts.size > 0) {\n+    api_set_error(err, kErrorTypeValidation, \"opts dict isn't empty\");\n+    return result;\n+  }\n+\n+  // Parse command line\n+  exarg_T ea;\n+  char nargs[2];\n+  char addr[5];\n+  cmd_parse_info_T cmdinfo;\n+  char_u *cmdline = vim_strsave((char_u *)str.data);\n+\n+  if (!parse_cmdline(cmdline, &ea, &cmdinfo)) {\n+    api_set_error(err, kErrorTypeException, \"Error while parsing command line\");\n+    goto end;\n+  }\n+\n+  // Parse arguments\n+  Array args = ARRAY_DICT_INIT;\n+  size_t length = STRLEN(ea.arg);\n+  size_t end = 0;\n+  size_t len = 0;\n+  int i = 1;\n+  char *buf = xcalloc(length, sizeof(char));\n+  bool done = false;\n+\n+  while (!done) {\n+    done = uc_split_args_iter(ea.arg, length, &end, buf, &len);\n+    if (len > 0) {\n+      ADD(args, STRING_OBJ(cstrn_to_string(buf, len)));\n+      i++;\n+    }\n+  }\n+\n+  if (ea.cmdidx == CMD_USER) {\n+    PUT(result, \"cmd\", CSTR_TO_OBJ((char *)USER_CMD(ea.useridx)->uc_name));\n+  } else if (ea.cmdidx == CMD_USER_BUF) {\n+    PUT(result, \"cmd\", CSTR_TO_OBJ((char *)USER_CMD_GA(&curbuf->b_ucmds, ea.useridx)->uc_name));\n+  } else {\n+    PUT(result, \"cmd\", CSTR_TO_OBJ((char *)get_command_name(NULL, ea.cmdidx)));\n+  }\n+  PUT(result, \"line1\", INTEGER_OBJ(ea.line1));\n+  PUT(result, \"line2\", INTEGER_OBJ(ea.line2));\n+  PUT(result, \"force\", BOOLEAN_OBJ(ea.forceit));\n+  PUT(result, \"args\", ARRAY_OBJ(args));\n+\n+  if (ea.argt & EX_EXTRA) {\n+    if (ea.argt & EX_NOSPC) {\n+      if (ea.argt & EX_NEEDARG) {\n+        nargs[0] = '1';\n+      } else {\n+        nargs[0] = '?';\n+      }\n+    } else if (ea.argt & EX_NEEDARG) {\n+      nargs[0] = '+';\n+    } else {\n+      nargs[0] = '*';\n+    }\n+  } else {\n+    nargs[0] = '0';\n+  }\n+  nargs[1] = '\\0';\n+  PUT(result, \"nargs\", CSTR_TO_OBJ(nargs));\n+\n+  switch (ea.addr_type) {\n+  case ADDR_LINES:\n+    STRCPY(addr, \"line\");",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r862014237",
            "id": 862014237,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zYUsd",
            "original_commit_id": "827e854d7f8cc6c0e58cef23e6c59f85bef3f31c",
            "original_line": 2564,
            "original_position": 122,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 958050137,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862014237/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-29T17:39:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862014237",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r862015763"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/862015763"
                }
            },
            "author_association": "MEMBER",
            "body": "I would naively think these are mutually exclusive, so perhaps we could instead have `split = \"aboveleft\"\" attribute instead of four invididual ones? (still separate flag for vertical tho)",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-29T17:42:09Z",
            "diff_hunk": "@@ -2450,3 +2451,185 @@ void nvim_del_user_command(String name, Error *err)\n {\n   nvim_buf_del_user_command(-1, name, err);\n }\n+\n+/// Parse command line.\n+///\n+/// Doesn't check the validity of command arguments.\n+///\n+/// @param str       Command line string to parse. Cannot contain \"\\n\".\n+/// @param opts      Optional parameters. Reserved for future use.\n+/// @param[out] err  Error details, if any.\n+/// @return Dictionary containing command information, with these keys:\n+///         - cmd: (string) Command name.\n+///         - line1: (number) Starting line of command range.\n+///         - line2: (number) Final line of command range.\n+///         - force: (boolean) Whether command contains a bang.\n+///         - args: (array) Command arguments.\n+///         - addr: (string) Value of |:command-addr|. Uses short name.\n+///         - nargs: (string) Value of |:command-nargs|.\n+///         - nextcmd: (string) Next command if there are multiple commands separated by a |:bar|.\n+///                             Empty if there isn't a next command.\n+///         - magic: (array) Which characters have special meaning inside the command arguments.\n+///                          Possible values inside the array are:\n+///             - '%': '%' and '#' get expanded by the command.\n+///             - '|': '|' may get treated specially by the command depending on the command and\n+///                    where it's used. '\"' is treated as the start of a quote.\n+///         - mods: (dictionary) |:command-modifiers|.\n+///             - silent: (boolean) |:silent|.\n+///             - emsg_silent: (boolean) |:silent!|.\n+///             - sandbox: (boolean) |:sandbox|.\n+///             - noautocmd: (boolean) |:noautocmd|.\n+///             - browse: (boolean) |:browse|.\n+///             - confirm: (boolean) |:confirm|.\n+///             - hide: (boolean) |:hide|.\n+///             - keepalt: (boolean) |:keepalt|.\n+///             - keepjumps: (boolean) |:keepjumps|.\n+///             - keepmarks: (boolean) |:keepmarks|.\n+///             - keeppatterns: (boolean) |:keeppatterns|.\n+///             - lockmarks: (boolean) |:lockmarks|.\n+///             - noswapfile: (boolean) |:noswapfile|.\n+///             - tab: (integer) |:tab|.\n+///             - verbose: (integer) |:verbose|.\n+Dictionary nvim_parse_cmd(String str, Dictionary opts, Error *err)\n+  FUNC_API_SINCE(10) FUNC_API_FAST\n+{\n+  Dictionary result = ARRAY_DICT_INIT;\n+\n+  if (opts.size > 0) {\n+    api_set_error(err, kErrorTypeValidation, \"opts dict isn't empty\");\n+    return result;\n+  }\n+\n+  // Parse command line\n+  exarg_T ea;\n+  char nargs[2];\n+  char addr[5];\n+  cmd_parse_info_T cmdinfo;\n+  char_u *cmdline = vim_strsave((char_u *)str.data);\n+\n+  if (!parse_cmdline(cmdline, &ea, &cmdinfo)) {\n+    api_set_error(err, kErrorTypeException, \"Error while parsing command line\");\n+    goto end;\n+  }\n+\n+  // Parse arguments\n+  Array args = ARRAY_DICT_INIT;\n+  size_t length = STRLEN(ea.arg);\n+  size_t end = 0;\n+  size_t len = 0;\n+  int i = 1;\n+  char *buf = xcalloc(length, sizeof(char));\n+  bool done = false;\n+\n+  while (!done) {\n+    done = uc_split_args_iter(ea.arg, length, &end, buf, &len);\n+    if (len > 0) {\n+      ADD(args, STRING_OBJ(cstrn_to_string(buf, len)));\n+      i++;\n+    }\n+  }\n+\n+  if (ea.cmdidx == CMD_USER) {\n+    PUT(result, \"cmd\", CSTR_TO_OBJ((char *)USER_CMD(ea.useridx)->uc_name));\n+  } else if (ea.cmdidx == CMD_USER_BUF) {\n+    PUT(result, \"cmd\", CSTR_TO_OBJ((char *)USER_CMD_GA(&curbuf->b_ucmds, ea.useridx)->uc_name));\n+  } else {\n+    PUT(result, \"cmd\", CSTR_TO_OBJ((char *)get_command_name(NULL, ea.cmdidx)));\n+  }\n+  PUT(result, \"line1\", INTEGER_OBJ(ea.line1));\n+  PUT(result, \"line2\", INTEGER_OBJ(ea.line2));\n+  PUT(result, \"force\", BOOLEAN_OBJ(ea.forceit));\n+  PUT(result, \"args\", ARRAY_OBJ(args));\n+\n+  if (ea.argt & EX_EXTRA) {\n+    if (ea.argt & EX_NOSPC) {\n+      if (ea.argt & EX_NEEDARG) {\n+        nargs[0] = '1';\n+      } else {\n+        nargs[0] = '?';\n+      }\n+    } else if (ea.argt & EX_NEEDARG) {\n+      nargs[0] = '+';\n+    } else {\n+      nargs[0] = '*';\n+    }\n+  } else {\n+    nargs[0] = '0';\n+  }\n+  nargs[1] = '\\0';\n+  PUT(result, \"nargs\", CSTR_TO_OBJ(nargs));\n+\n+  switch (ea.addr_type) {\n+  case ADDR_LINES:\n+    STRCPY(addr, \"line\");\n+    break;\n+  case ADDR_ARGUMENTS:\n+    STRCPY(addr, \"arg\");\n+    break;\n+  case ADDR_BUFFERS:\n+    STRCPY(addr, \"buf\");\n+    break;\n+  case ADDR_LOADED_BUFFERS:\n+    STRCPY(addr, \"load\");\n+    break;\n+  case ADDR_WINDOWS:\n+    STRCPY(addr, \"win\");\n+    break;\n+  case ADDR_TABS:\n+    STRCPY(addr, \"tab\");\n+    break;\n+  case ADDR_QUICKFIX:\n+    STRCPY(addr, \"qf\");\n+    break;\n+  case ADDR_NONE:\n+    STRCPY(addr, \"none\");\n+    break;\n+  default:\n+    STRCPY(addr, \"?\");\n+    break;\n+  }\n+  PUT(result, \"addr\", CSTR_TO_OBJ(addr));\n+  PUT(result, \"nextcmd\", CSTR_TO_OBJ((char *)ea.nextcmd));\n+\n+  Dictionary mods = ARRAY_DICT_INIT;\n+  PUT(mods, \"silent\", BOOLEAN_OBJ(cmdinfo.silent));\n+  PUT(mods, \"emsg_silent\", BOOLEAN_OBJ(cmdinfo.emsg_silent));\n+  PUT(mods, \"sandbox\", BOOLEAN_OBJ(cmdinfo.sandbox));\n+  PUT(mods, \"noautocmd\", BOOLEAN_OBJ(cmdinfo.noautocmd));\n+  PUT(mods, \"tab\", INTEGER_OBJ(cmdmod.tab));\n+  PUT(mods, \"verbose\", INTEGER_OBJ(cmdinfo.verbose));\n+  PUT(mods, \"browse\", BOOLEAN_OBJ(cmdmod.browse));\n+  PUT(mods, \"confirm\", BOOLEAN_OBJ(cmdmod.confirm));\n+  PUT(mods, \"hide\", BOOLEAN_OBJ(cmdmod.hide));\n+  PUT(mods, \"keepalt\", BOOLEAN_OBJ(cmdmod.keepalt));\n+  PUT(mods, \"keepjumps\", BOOLEAN_OBJ(cmdmod.keepjumps));\n+  PUT(mods, \"keepmarks\", BOOLEAN_OBJ(cmdmod.keepmarks));\n+  PUT(mods, \"keeppatterns\", BOOLEAN_OBJ(cmdmod.keeppatterns));\n+  PUT(mods, \"lockmarks\", BOOLEAN_OBJ(cmdmod.lockmarks));\n+  PUT(mods, \"noswapfile\", BOOLEAN_OBJ(cmdmod.noswapfile));\n+\n+  Dictionary splitmods = ARRAY_DICT_INIT;\n+  PUT(splitmods, \"vertical\", BOOLEAN_OBJ(cmdmod.split & WSP_VERT));\n+  PUT(splitmods, \"aboveleft\", BOOLEAN_OBJ(cmdmod.split & WSP_ABOVE));\n+  PUT(splitmods, \"belowright\", BOOLEAN_OBJ(cmdmod.split & WSP_BELOW));\n+  PUT(splitmods, \"topleft\", BOOLEAN_OBJ(cmdmod.split & WSP_TOP));\n+  PUT(splitmods, \"botright\", BOOLEAN_OBJ(cmdmod.split & WSP_BOT));",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r862015763",
            "id": 862015763,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zYVET",
            "original_commit_id": "827e854d7f8cc6c0e58cef23e6c59f85bef3f31c",
            "original_line": 2616,
            "original_position": 174,
            "original_start_line": 2613,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 958052247,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862015763/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-04-29T17:42:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862015763",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r862029251"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/862029251"
                }
            },
            "author_association": "MEMBER",
            "body": "> I would naively think these are mutually exclusive, so perhaps we could instead have `split = \"aboveleft\"\" attribute instead of four invididual ones? (still separate flag for vertical tho)\r\n\r\nWell, I'd have done it too but it's a bit more complicated than that. For example `aboveleft = false` doesn't imply that the `belowright` modifier is set, and vice-versa. Also `aboveleft` and `topleft` can both be true at the same time afaik, same with `belowright` and `botright`",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-29T18:02:37Z",
            "diff_hunk": "@@ -2450,3 +2451,185 @@ void nvim_del_user_command(String name, Error *err)\n {\n   nvim_buf_del_user_command(-1, name, err);\n }\n+\n+/// Parse command line.\n+///\n+/// Doesn't check the validity of command arguments.\n+///\n+/// @param str       Command line string to parse. Cannot contain \"\\n\".\n+/// @param opts      Optional parameters. Reserved for future use.\n+/// @param[out] err  Error details, if any.\n+/// @return Dictionary containing command information, with these keys:\n+///         - cmd: (string) Command name.\n+///         - line1: (number) Starting line of command range.\n+///         - line2: (number) Final line of command range.\n+///         - force: (boolean) Whether command contains a bang.\n+///         - args: (array) Command arguments.\n+///         - addr: (string) Value of |:command-addr|. Uses short name.\n+///         - nargs: (string) Value of |:command-nargs|.\n+///         - nextcmd: (string) Next command if there are multiple commands separated by a |:bar|.\n+///                             Empty if there isn't a next command.\n+///         - magic: (array) Which characters have special meaning inside the command arguments.\n+///                          Possible values inside the array are:\n+///             - '%': '%' and '#' get expanded by the command.\n+///             - '|': '|' may get treated specially by the command depending on the command and\n+///                    where it's used. '\"' is treated as the start of a quote.\n+///         - mods: (dictionary) |:command-modifiers|.\n+///             - silent: (boolean) |:silent|.\n+///             - emsg_silent: (boolean) |:silent!|.\n+///             - sandbox: (boolean) |:sandbox|.\n+///             - noautocmd: (boolean) |:noautocmd|.\n+///             - browse: (boolean) |:browse|.\n+///             - confirm: (boolean) |:confirm|.\n+///             - hide: (boolean) |:hide|.\n+///             - keepalt: (boolean) |:keepalt|.\n+///             - keepjumps: (boolean) |:keepjumps|.\n+///             - keepmarks: (boolean) |:keepmarks|.\n+///             - keeppatterns: (boolean) |:keeppatterns|.\n+///             - lockmarks: (boolean) |:lockmarks|.\n+///             - noswapfile: (boolean) |:noswapfile|.\n+///             - tab: (integer) |:tab|.\n+///             - verbose: (integer) |:verbose|.\n+Dictionary nvim_parse_cmd(String str, Dictionary opts, Error *err)\n+  FUNC_API_SINCE(10) FUNC_API_FAST\n+{\n+  Dictionary result = ARRAY_DICT_INIT;\n+\n+  if (opts.size > 0) {\n+    api_set_error(err, kErrorTypeValidation, \"opts dict isn't empty\");\n+    return result;\n+  }\n+\n+  // Parse command line\n+  exarg_T ea;\n+  char nargs[2];\n+  char addr[5];\n+  cmd_parse_info_T cmdinfo;\n+  char_u *cmdline = vim_strsave((char_u *)str.data);\n+\n+  if (!parse_cmdline(cmdline, &ea, &cmdinfo)) {\n+    api_set_error(err, kErrorTypeException, \"Error while parsing command line\");\n+    goto end;\n+  }\n+\n+  // Parse arguments\n+  Array args = ARRAY_DICT_INIT;\n+  size_t length = STRLEN(ea.arg);\n+  size_t end = 0;\n+  size_t len = 0;\n+  int i = 1;\n+  char *buf = xcalloc(length, sizeof(char));\n+  bool done = false;\n+\n+  while (!done) {\n+    done = uc_split_args_iter(ea.arg, length, &end, buf, &len);\n+    if (len > 0) {\n+      ADD(args, STRING_OBJ(cstrn_to_string(buf, len)));\n+      i++;\n+    }\n+  }\n+\n+  if (ea.cmdidx == CMD_USER) {\n+    PUT(result, \"cmd\", CSTR_TO_OBJ((char *)USER_CMD(ea.useridx)->uc_name));\n+  } else if (ea.cmdidx == CMD_USER_BUF) {\n+    PUT(result, \"cmd\", CSTR_TO_OBJ((char *)USER_CMD_GA(&curbuf->b_ucmds, ea.useridx)->uc_name));\n+  } else {\n+    PUT(result, \"cmd\", CSTR_TO_OBJ((char *)get_command_name(NULL, ea.cmdidx)));\n+  }\n+  PUT(result, \"line1\", INTEGER_OBJ(ea.line1));\n+  PUT(result, \"line2\", INTEGER_OBJ(ea.line2));\n+  PUT(result, \"force\", BOOLEAN_OBJ(ea.forceit));\n+  PUT(result, \"args\", ARRAY_OBJ(args));\n+\n+  if (ea.argt & EX_EXTRA) {\n+    if (ea.argt & EX_NOSPC) {\n+      if (ea.argt & EX_NEEDARG) {\n+        nargs[0] = '1';\n+      } else {\n+        nargs[0] = '?';\n+      }\n+    } else if (ea.argt & EX_NEEDARG) {\n+      nargs[0] = '+';\n+    } else {\n+      nargs[0] = '*';\n+    }\n+  } else {\n+    nargs[0] = '0';\n+  }\n+  nargs[1] = '\\0';\n+  PUT(result, \"nargs\", CSTR_TO_OBJ(nargs));\n+\n+  switch (ea.addr_type) {\n+  case ADDR_LINES:\n+    STRCPY(addr, \"line\");\n+    break;\n+  case ADDR_ARGUMENTS:\n+    STRCPY(addr, \"arg\");\n+    break;\n+  case ADDR_BUFFERS:\n+    STRCPY(addr, \"buf\");\n+    break;\n+  case ADDR_LOADED_BUFFERS:\n+    STRCPY(addr, \"load\");\n+    break;\n+  case ADDR_WINDOWS:\n+    STRCPY(addr, \"win\");\n+    break;\n+  case ADDR_TABS:\n+    STRCPY(addr, \"tab\");\n+    break;\n+  case ADDR_QUICKFIX:\n+    STRCPY(addr, \"qf\");\n+    break;\n+  case ADDR_NONE:\n+    STRCPY(addr, \"none\");\n+    break;\n+  default:\n+    STRCPY(addr, \"?\");\n+    break;\n+  }\n+  PUT(result, \"addr\", CSTR_TO_OBJ(addr));\n+  PUT(result, \"nextcmd\", CSTR_TO_OBJ((char *)ea.nextcmd));\n+\n+  Dictionary mods = ARRAY_DICT_INIT;\n+  PUT(mods, \"silent\", BOOLEAN_OBJ(cmdinfo.silent));\n+  PUT(mods, \"emsg_silent\", BOOLEAN_OBJ(cmdinfo.emsg_silent));\n+  PUT(mods, \"sandbox\", BOOLEAN_OBJ(cmdinfo.sandbox));\n+  PUT(mods, \"noautocmd\", BOOLEAN_OBJ(cmdinfo.noautocmd));\n+  PUT(mods, \"tab\", INTEGER_OBJ(cmdmod.tab));\n+  PUT(mods, \"verbose\", INTEGER_OBJ(cmdinfo.verbose));\n+  PUT(mods, \"browse\", BOOLEAN_OBJ(cmdmod.browse));\n+  PUT(mods, \"confirm\", BOOLEAN_OBJ(cmdmod.confirm));\n+  PUT(mods, \"hide\", BOOLEAN_OBJ(cmdmod.hide));\n+  PUT(mods, \"keepalt\", BOOLEAN_OBJ(cmdmod.keepalt));\n+  PUT(mods, \"keepjumps\", BOOLEAN_OBJ(cmdmod.keepjumps));\n+  PUT(mods, \"keepmarks\", BOOLEAN_OBJ(cmdmod.keepmarks));\n+  PUT(mods, \"keeppatterns\", BOOLEAN_OBJ(cmdmod.keeppatterns));\n+  PUT(mods, \"lockmarks\", BOOLEAN_OBJ(cmdmod.lockmarks));\n+  PUT(mods, \"noswapfile\", BOOLEAN_OBJ(cmdmod.noswapfile));\n+\n+  Dictionary splitmods = ARRAY_DICT_INIT;\n+  PUT(splitmods, \"vertical\", BOOLEAN_OBJ(cmdmod.split & WSP_VERT));\n+  PUT(splitmods, \"aboveleft\", BOOLEAN_OBJ(cmdmod.split & WSP_ABOVE));\n+  PUT(splitmods, \"belowright\", BOOLEAN_OBJ(cmdmod.split & WSP_BELOW));\n+  PUT(splitmods, \"topleft\", BOOLEAN_OBJ(cmdmod.split & WSP_TOP));\n+  PUT(splitmods, \"botright\", BOOLEAN_OBJ(cmdmod.split & WSP_BOT));",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r862029251",
            "id": 862029251,
            "in_reply_to_id": 862015763,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zYYXD",
            "original_commit_id": "827e854d7f8cc6c0e58cef23e6c59f85bef3f31c",
            "original_line": 2616,
            "original_position": 174,
            "original_start_line": 2613,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 958071518,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862029251/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-04-29T20:10:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862029251",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r862032611"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/862032611"
                }
            },
            "author_association": "MEMBER",
            "body": "done",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-29T18:08:07Z",
            "diff_hunk": "@@ -2450,3 +2451,185 @@ void nvim_del_user_command(String name, Error *err)\n {\n   nvim_buf_del_user_command(-1, name, err);\n }\n+\n+/// Parse command line.\n+///\n+/// Doesn't check the validity of command arguments.\n+///\n+/// @param str       Command line string to parse. Cannot contain \"\\n\".\n+/// @param opts      Optional parameters. Reserved for future use.\n+/// @param[out] err  Error details, if any.\n+/// @return Dictionary containing command information, with these keys:\n+///         - cmd: (string) Command name.\n+///         - line1: (number) Starting line of command range.\n+///         - line2: (number) Final line of command range.\n+///         - force: (boolean) Whether command contains a bang.\n+///         - args: (array) Command arguments.\n+///         - addr: (string) Value of |:command-addr|. Uses short name.\n+///         - nargs: (string) Value of |:command-nargs|.\n+///         - nextcmd: (string) Next command if there are multiple commands separated by a |:bar|.\n+///                             Empty if there isn't a next command.\n+///         - magic: (array) Which characters have special meaning inside the command arguments.\n+///                          Possible values inside the array are:\n+///             - '%': '%' and '#' get expanded by the command.\n+///             - '|': '|' may get treated specially by the command depending on the command and\n+///                    where it's used. '\"' is treated as the start of a quote.\n+///         - mods: (dictionary) |:command-modifiers|.\n+///             - silent: (boolean) |:silent|.\n+///             - emsg_silent: (boolean) |:silent!|.\n+///             - sandbox: (boolean) |:sandbox|.\n+///             - noautocmd: (boolean) |:noautocmd|.\n+///             - browse: (boolean) |:browse|.\n+///             - confirm: (boolean) |:confirm|.\n+///             - hide: (boolean) |:hide|.\n+///             - keepalt: (boolean) |:keepalt|.\n+///             - keepjumps: (boolean) |:keepjumps|.\n+///             - keepmarks: (boolean) |:keepmarks|.\n+///             - keeppatterns: (boolean) |:keeppatterns|.\n+///             - lockmarks: (boolean) |:lockmarks|.\n+///             - noswapfile: (boolean) |:noswapfile|.\n+///             - tab: (integer) |:tab|.\n+///             - verbose: (integer) |:verbose|.\n+Dictionary nvim_parse_cmd(String str, Dictionary opts, Error *err)\n+  FUNC_API_SINCE(10) FUNC_API_FAST\n+{\n+  Dictionary result = ARRAY_DICT_INIT;\n+\n+  if (opts.size > 0) {\n+    api_set_error(err, kErrorTypeValidation, \"opts dict isn't empty\");\n+    return result;\n+  }\n+\n+  // Parse command line\n+  exarg_T ea;\n+  char nargs[2];\n+  char addr[5];\n+  cmd_parse_info_T cmdinfo;\n+  char_u *cmdline = vim_strsave((char_u *)str.data);\n+\n+  if (!parse_cmdline(cmdline, &ea, &cmdinfo)) {\n+    api_set_error(err, kErrorTypeException, \"Error while parsing command line\");\n+    goto end;\n+  }\n+\n+  // Parse arguments\n+  Array args = ARRAY_DICT_INIT;\n+  size_t length = STRLEN(ea.arg);\n+  size_t end = 0;\n+  size_t len = 0;\n+  int i = 1;\n+  char *buf = xcalloc(length, sizeof(char));\n+  bool done = false;\n+\n+  while (!done) {\n+    done = uc_split_args_iter(ea.arg, length, &end, buf, &len);\n+    if (len > 0) {\n+      ADD(args, STRING_OBJ(cstrn_to_string(buf, len)));\n+      i++;\n+    }\n+  }\n+\n+  if (ea.cmdidx == CMD_USER) {\n+    PUT(result, \"cmd\", CSTR_TO_OBJ((char *)USER_CMD(ea.useridx)->uc_name));\n+  } else if (ea.cmdidx == CMD_USER_BUF) {\n+    PUT(result, \"cmd\", CSTR_TO_OBJ((char *)USER_CMD_GA(&curbuf->b_ucmds, ea.useridx)->uc_name));\n+  } else {\n+    PUT(result, \"cmd\", CSTR_TO_OBJ((char *)get_command_name(NULL, ea.cmdidx)));\n+  }\n+  PUT(result, \"line1\", INTEGER_OBJ(ea.line1));\n+  PUT(result, \"line2\", INTEGER_OBJ(ea.line2));\n+  PUT(result, \"force\", BOOLEAN_OBJ(ea.forceit));\n+  PUT(result, \"args\", ARRAY_OBJ(args));\n+\n+  if (ea.argt & EX_EXTRA) {\n+    if (ea.argt & EX_NOSPC) {\n+      if (ea.argt & EX_NEEDARG) {\n+        nargs[0] = '1';\n+      } else {\n+        nargs[0] = '?';\n+      }\n+    } else if (ea.argt & EX_NEEDARG) {\n+      nargs[0] = '+';\n+    } else {\n+      nargs[0] = '*';\n+    }\n+  } else {\n+    nargs[0] = '0';\n+  }\n+  nargs[1] = '\\0';\n+  PUT(result, \"nargs\", CSTR_TO_OBJ(nargs));\n+\n+  switch (ea.addr_type) {\n+  case ADDR_LINES:\n+    STRCPY(addr, \"line\");",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r862032611",
            "id": 862032611,
            "in_reply_to_id": 862014237,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zYZLj",
            "original_commit_id": "827e854d7f8cc6c0e58cef23e6c59f85bef3f31c",
            "original_line": 2564,
            "original_position": 122,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 958076411,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862032611/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-29T18:08:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862032611",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r862032997"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/862032997"
                }
            },
            "author_association": "MEMBER",
            "body": "fixed",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-29T18:08:40Z",
            "diff_hunk": "@@ -1350,6 +1350,57 @@ nvim_out_write({str})                                       *nvim_out_write()*\n                 Parameters: ~\n                     {str}  Message\n \n+nvim_parse_cmd({str}, {opts})                               *nvim_parse_cmd()*\n+                Parse command line.\n+\n+                Doesn't check the validity of command arguments.\n+\n+                Attributes: ~\n+                    {fast}\n+\n+                Parameters: ~\n+                    {str}   Command line string to parse. Cannot contain \"\\n\".\n+                    {opts}  Optional parameters. Reserved for future use.\n+\n+                Return: ~\n+                    Dictionary containing command information, with these\n+                    keys:\n+                    • cmd: (string) Command name.\n+                    • line1: (number) Starting line of command range.\n+                    • line2: (number) Final line of command range.\n+                    • force: (boolean) Whether command contains a bang.\n+                    • args: (array) Command arguments.\n+                    • addr: (string) Value of |:command-addr|. Uses short\n+                      name.\n+                    • nargs: (string) Value of |:command-nargs|.\n+                    • nextcmd: (string) Next command if there are multiple\n+                      commands separated by a |:bar|. Empty if there isn't a\n+                      next command.\n+                    • magic: (array) Which characters have special meaning\n+                      inside the command arguments. Possible values inside the\n+                      array are:\n+                      • '': '' and '#' get expanded by the command.",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r862032997",
            "id": 862032997,
            "in_reply_to_id": 862013223,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zYZRl",
            "original_commit_id": "827e854d7f8cc6c0e58cef23e6c59f85bef3f31c",
            "original_line": 1382,
            "original_position": 33,
            "original_start_line": null,
            "path": "runtime/doc/api.txt",
            "position": null,
            "pull_request_review_id": 958076930,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862032997/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-29T18:08:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862032997",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r862307493"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/862307493"
                }
            },
            "author_association": "MEMBER",
            "body": "can this be generated from `ex_cmds.lua`? or it's a separate list (😱 )?",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-30T05:45:10Z",
            "diff_hunk": "@@ -1220,6 +1220,302 @@ static char_u *skip_colon_white(const char_u *p, bool skipleadingwhite)\n   return (char_u *)p;\n }\n \n+/// Set the addr type for command\n+///\n+/// @param p pointer to character after command name in cmdline\n+static void set_cmd_addr_type(exarg_T *eap, char_u *p)\n+{\n+  // ea.addr_type for user commands is set by find_ucmd\n+  if (!IS_USER_CMDIDX(eap->cmdidx)) {\n+    if (eap->cmdidx != CMD_SIZE) {\n+      eap->addr_type = cmdnames[(int)eap->cmdidx].cmd_addr_type;\n+    } else {\n+      eap->addr_type = ADDR_LINES;\n+    }\n+    // :wincmd range depends on the argument\n+    if (eap->cmdidx == CMD_wincmd && p != NULL) {\n+      get_wincmd_addr_type(skipwhite(p), eap);\n+    }\n+    // :.cc in quickfix window uses line number\n+    if ((eap->cmdidx == CMD_cc || eap->cmdidx == CMD_ll) && bt_quickfix(curbuf)) {\n+      eap->addr_type = ADDR_OTHER;\n+    }\n+  }\n+}\n+\n+/// Set default command range based on the addr type of the command\n+static void set_cmd_default_range(exarg_T *eap)\n+{\n+  buf_T *buf;\n+\n+  eap->line1 = 1;\n+  switch (eap->addr_type) {\n+  case ADDR_LINES:\n+  case ADDR_OTHER:\n+    eap->line2 = curbuf->b_ml.ml_line_count;\n+    break;\n+  case ADDR_LOADED_BUFFERS:\n+    buf = firstbuf;\n+    while (buf->b_next != NULL && buf->b_ml.ml_mfp == NULL) {\n+      buf = buf->b_next;\n+    }\n+    eap->line1 = buf->b_fnum;\n+    buf = lastbuf;\n+    while (buf->b_prev != NULL && buf->b_ml.ml_mfp == NULL) {\n+      buf = buf->b_prev;\n+    }\n+    eap->line2 = buf->b_fnum;\n+    break;\n+  case ADDR_BUFFERS:\n+    eap->line1 = firstbuf->b_fnum;\n+    eap->line2 = lastbuf->b_fnum;\n+    break;\n+  case ADDR_WINDOWS:\n+    eap->line2 = LAST_WIN_NR;\n+    break;\n+  case ADDR_TABS:\n+    eap->line2 = LAST_TAB_NR;\n+    break;\n+  case ADDR_TABS_RELATIVE:\n+    eap->line2 = 1;\n+    break;\n+  case ADDR_ARGUMENTS:\n+    if (ARGCOUNT == 0) {\n+      eap->line1 = eap->line2 = 0;\n+    } else {\n+      eap->line2 = ARGCOUNT;\n+    }\n+    break;\n+  case ADDR_QUICKFIX_VALID:\n+    eap->line2 = (linenr_T)qf_get_valid_size(eap);\n+    if (eap->line2 == 0) {\n+      eap->line2 = 1;\n+    }\n+    break;\n+  case ADDR_NONE:\n+  case ADDR_UNSIGNED:\n+  case ADDR_QUICKFIX:\n+    iemsg(_(\"INTERNAL: Cannot use EX_DFLALL \"\n+            \"with ADDR_NONE, ADDR_UNSIGNED or ADDR_QUICKFIX\"));\n+    break;\n+  }\n+}\n+\n+/// Check if command with ID handles '|' themselves\n+bool command_handles_bar(cmdidx_T cmdidx)",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r862307493",
            "id": 862307493,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zZcSl",
            "original_commit_id": "d88cb72ec823aa5a0c49ed02d403ac726c5f395d",
            "original_line": 1305,
            "original_position": 86,
            "original_start_line": null,
            "path": "src/nvim/ex_docmd.c",
            "position": null,
            "pull_request_review_id": 958451573,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862307493/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-30T05:54:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862307493",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r862307806"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/862307806"
                }
            },
            "author_association": "MEMBER",
            "body": "single-quote in a vimdoc is reserved for options. So use double quotes.\r\n```suggestion\r\n///             - \"|\": \"|\" may get treated specially by the command depending on the command and\r\n```",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-30T05:49:32Z",
            "diff_hunk": "@@ -2450,3 +2451,191 @@ void nvim_del_user_command(String name, Error *err)\n {\n   nvim_buf_del_user_command(-1, name, err);\n }\n+\n+/// Parse command line.\n+///\n+/// Doesn't check the validity of command arguments.\n+///\n+/// @param str       Command line string to parse. Cannot contain \"\\n\".\n+/// @param opts      Optional parameters. Reserved for future use.\n+/// @param[out] err  Error details, if any.\n+/// @return Dictionary containing command information, with these keys:\n+///         - cmd: (string) Command name.\n+///         - line1: (number) Starting line of command range.\n+///         - line2: (number) Final line of command range.\n+///         - force: (boolean) Whether command contains a bang.\n+///         - args: (array) Command arguments.\n+///         - addr: (string) Value of |:command-addr|. Uses short name.\n+///         - nargs: (string) Value of |:command-nargs|.\n+///         - nextcmd: (string) Next command if there are multiple commands separated by a |:bar|.\n+///                             Empty if there isn't a next command.\n+///         - magic: (array) Which characters have special meaning inside the command arguments.\n+///                          Possible values inside the array are:\n+///             - '%%': '%%' and '#' get expanded by the command.\n+///             - '|': '|' may get treated specially by the command depending on the command and",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r862307806",
            "id": 862307806,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zZcXe",
            "original_commit_id": "d88cb72ec823aa5a0c49ed02d403ac726c5f395d",
            "original_line": 2475,
            "original_position": 33,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 958451820,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862307806/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-30T05:49:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862307806",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r862307984"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/862307984"
                }
            },
            "author_association": "MEMBER",
            "body": "> And honestly, I don't think having | or \" in magic is even necessary since we already do the job of separating the next command in nvim_parse_cmd itself\r\n\r\nAn explicit field is useful. The point is to return all knowledge about the command. Without an explicit field, the caller would have to guess.",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-30T05:52:54Z",
            "diff_hunk": "@@ -1350,6 +1350,27 @@ nvim_out_write({str})                                       *nvim_out_write()*\n                 Parameters: ~\n                     {str}  Message\n \n+nvim_parse_cmdline({str}, {opts})                       *nvim_parse_cmdline()*\n+                Parse command line.\n+\n+                Doesn't check the validity of command arguments.\n+\n+                Attributes: ~\n+                    {fast}\n+\n+                Parameters: ~\n+                    {str}   Command line string to parse. Cannot contain \"\\n\".\n+                    {opts}  Optional parameters. Reserved for future use.\n+\n+                Return: ~\n+                    Dictionary containing command information, with these\n+                    keys:\n+                    • cmd: (string) command name.\n+                    • line1: (number) starting line of command range.\n+                    • line2: (number) final line of command range.\n+                    • force: (boolean) whether command contains a bang.\n+                    • args: (array) command arguments.",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r862307984",
            "id": 862307984,
            "in_reply_to_id": 856942528,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zZcaQ",
            "original_commit_id": "20c49fb2ebb12ab5635f43a0adcc3768a50e2259",
            "original_line": 1372,
            "original_position": 23,
            "original_start_line": null,
            "path": "runtime/doc/api.txt",
            "position": null,
            "pull_request_review_id": 958452013,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862307984/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-30T05:52:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862307984",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r862308246"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/862308246"
                }
            },
            "author_association": "MEMBER",
            "body": "Just for reference: another one is `*` and probably various wildcard characters. ",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-30T05:56:25Z",
            "diff_hunk": "@@ -2450,3 +2451,191 @@ void nvim_del_user_command(String name, Error *err)\n {\n   nvim_buf_del_user_command(-1, name, err);\n }\n+\n+/// Parse command line.\n+///\n+/// Doesn't check the validity of command arguments.\n+///\n+/// @param str       Command line string to parse. Cannot contain \"\\n\".\n+/// @param opts      Optional parameters. Reserved for future use.\n+/// @param[out] err  Error details, if any.\n+/// @return Dictionary containing command information, with these keys:\n+///         - cmd: (string) Command name.\n+///         - line1: (number) Starting line of command range.\n+///         - line2: (number) Final line of command range.\n+///         - force: (boolean) Whether command contains a bang.\n+///         - args: (array) Command arguments.\n+///         - addr: (string) Value of |:command-addr|. Uses short name.\n+///         - nargs: (string) Value of |:command-nargs|.\n+///         - nextcmd: (string) Next command if there are multiple commands separated by a |:bar|.\n+///                             Empty if there isn't a next command.\n+///         - magic: (array) Which characters have special meaning inside the command arguments.\n+///                          Possible values inside the array are:\n+///             - '%%': '%%' and '#' get expanded by the command.\n+///             - '|': '|' may get treated specially by the command depending on the command and\n+///                    where it's used. '\"' is treated as the start of a quote.\n+///         - mods: (dictionary) |:command-modifiers|.\n+///             - silent: (boolean) |:silent|.\n+///             - emsg_silent: (boolean) |:silent!|.\n+///             - sandbox: (boolean) |:sandbox|.\n+///             - noautocmd: (boolean) |:noautocmd|.\n+///             - browse: (boolean) |:browse|.\n+///             - confirm: (boolean) |:confirm|.\n+///             - hide: (boolean) |:hide|.\n+///             - keepalt: (boolean) |:keepalt|.\n+///             - keepjumps: (boolean) |:keepjumps|.\n+///             - keepmarks: (boolean) |:keepmarks|.\n+///             - keeppatterns: (boolean) |:keeppatterns|.\n+///             - lockmarks: (boolean) |:lockmarks|.\n+///             - noswapfile: (boolean) |:noswapfile|.\n+///             - tab: (integer) |:tab|.\n+///             - verbose: (integer) |:verbose|.\n+///             - split: (dictionary) Split modifiers.\n+///               - vertical: (boolean) |:vertical|.\n+///               - aboveleft: (boolean) |:aboveleft|.\n+///               - belowright: (boolean) |:belowright|.\n+///               - topleft: (boolean) |:topleft|.\n+///               - botright: (boolean) |:botright|.\n+Dictionary nvim_parse_cmd(String str, Dictionary opts, Error *err)\n+  FUNC_API_SINCE(10) FUNC_API_FAST\n+{\n+  Dictionary result = ARRAY_DICT_INIT;\n+\n+  if (opts.size > 0) {\n+    api_set_error(err, kErrorTypeValidation, \"opts dict isn't empty\");\n+    return result;\n+  }\n+\n+  // Parse command line\n+  exarg_T ea;\n+  char nargs[2];\n+  const char *addr;\n+  cmd_parse_info_T cmdinfo;\n+  char_u *cmdline = vim_strsave((char_u *)str.data);\n+\n+  if (!parse_cmdline(cmdline, &ea, &cmdinfo)) {\n+    api_set_error(err, kErrorTypeException, \"Error while parsing command line\");\n+    goto end;\n+  }\n+\n+  // Parse arguments\n+  Array args = ARRAY_DICT_INIT;\n+  size_t length = STRLEN(ea.arg);\n+  size_t end = 0;\n+  size_t len = 0;\n+  int i = 1;\n+  char *buf = xcalloc(length, sizeof(char));\n+  bool done = false;\n+\n+  while (!done) {\n+    done = uc_split_args_iter(ea.arg, length, &end, buf, &len);\n+    if (len > 0) {\n+      ADD(args, STRING_OBJ(cstrn_to_string(buf, len)));\n+      i++;\n+    }\n+  }\n+\n+  if (ea.cmdidx == CMD_USER) {\n+    PUT(result, \"cmd\", CSTR_TO_OBJ((char *)USER_CMD(ea.useridx)->uc_name));\n+  } else if (ea.cmdidx == CMD_USER_BUF) {\n+    PUT(result, \"cmd\", CSTR_TO_OBJ((char *)USER_CMD_GA(&curbuf->b_ucmds, ea.useridx)->uc_name));\n+  } else {\n+    PUT(result, \"cmd\", CSTR_TO_OBJ((char *)get_command_name(NULL, ea.cmdidx)));\n+  }\n+  PUT(result, \"line1\", INTEGER_OBJ(ea.line1));\n+  PUT(result, \"line2\", INTEGER_OBJ(ea.line2));\n+  PUT(result, \"force\", BOOLEAN_OBJ(ea.forceit));\n+  PUT(result, \"args\", ARRAY_OBJ(args));\n+\n+  if (ea.argt & EX_EXTRA) {\n+    if (ea.argt & EX_NOSPC) {\n+      if (ea.argt & EX_NEEDARG) {\n+        nargs[0] = '1';\n+      } else {\n+        nargs[0] = '?';\n+      }\n+    } else if (ea.argt & EX_NEEDARG) {\n+      nargs[0] = '+';\n+    } else {\n+      nargs[0] = '*';\n+    }\n+  } else {\n+    nargs[0] = '0';\n+  }\n+  nargs[1] = '\\0';\n+  PUT(result, \"nargs\", CSTR_TO_OBJ(nargs));\n+\n+  switch (ea.addr_type) {\n+  case ADDR_LINES:\n+    addr = \"line\";\n+    break;\n+  case ADDR_ARGUMENTS:\n+    addr = \"arg\";\n+    break;\n+  case ADDR_BUFFERS:\n+    addr = \"buf\";\n+    break;\n+  case ADDR_LOADED_BUFFERS:\n+    addr = \"load\";\n+    break;\n+  case ADDR_WINDOWS:\n+    addr = \"win\";\n+    break;\n+  case ADDR_TABS:\n+    addr = \"tab\";\n+    break;\n+  case ADDR_QUICKFIX:\n+    addr = \"qf\";\n+    break;\n+  case ADDR_NONE:\n+    addr = \"none\";\n+    break;\n+  default:\n+    addr = \"?\";\n+    break;\n+  }\n+  PUT(result, \"addr\", CSTR_TO_OBJ(addr));\n+  PUT(result, \"nextcmd\", CSTR_TO_OBJ((char *)ea.nextcmd));\n+\n+  Dictionary mods = ARRAY_DICT_INIT;\n+  PUT(mods, \"silent\", BOOLEAN_OBJ(cmdinfo.silent));\n+  PUT(mods, \"emsg_silent\", BOOLEAN_OBJ(cmdinfo.emsg_silent));\n+  PUT(mods, \"sandbox\", BOOLEAN_OBJ(cmdinfo.sandbox));\n+  PUT(mods, \"noautocmd\", BOOLEAN_OBJ(cmdinfo.noautocmd));\n+  PUT(mods, \"tab\", INTEGER_OBJ(cmdmod.tab));\n+  PUT(mods, \"verbose\", INTEGER_OBJ(cmdinfo.verbose));\n+  PUT(mods, \"browse\", BOOLEAN_OBJ(cmdmod.browse));\n+  PUT(mods, \"confirm\", BOOLEAN_OBJ(cmdmod.confirm));\n+  PUT(mods, \"hide\", BOOLEAN_OBJ(cmdmod.hide));\n+  PUT(mods, \"keepalt\", BOOLEAN_OBJ(cmdmod.keepalt));\n+  PUT(mods, \"keepjumps\", BOOLEAN_OBJ(cmdmod.keepjumps));\n+  PUT(mods, \"keepmarks\", BOOLEAN_OBJ(cmdmod.keepmarks));\n+  PUT(mods, \"keeppatterns\", BOOLEAN_OBJ(cmdmod.keeppatterns));\n+  PUT(mods, \"lockmarks\", BOOLEAN_OBJ(cmdmod.lockmarks));\n+  PUT(mods, \"noswapfile\", BOOLEAN_OBJ(cmdmod.noswapfile));\n+\n+  Dictionary splitmods = ARRAY_DICT_INIT;\n+  PUT(splitmods, \"vertical\", BOOLEAN_OBJ(cmdmod.split & WSP_VERT));\n+  PUT(splitmods, \"aboveleft\", BOOLEAN_OBJ(cmdmod.split & WSP_ABOVE));\n+  PUT(splitmods, \"belowright\", BOOLEAN_OBJ(cmdmod.split & WSP_BELOW));\n+  PUT(splitmods, \"topleft\", BOOLEAN_OBJ(cmdmod.split & WSP_TOP));\n+  PUT(splitmods, \"botright\", BOOLEAN_OBJ(cmdmod.split & WSP_BOT));\n+\n+  PUT(mods, \"split\", DICTIONARY_OBJ(splitmods));\n+  PUT(result, \"mods\", DICTIONARY_OBJ(mods));\n+\n+  Array magic = ARRAY_DICT_INIT;\n+  if (cmdinfo.magic.percent) {\n+    ADD(magic, STRING_OBJ(STATIC_CSTR_TO_STRING(\"%\")));",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r862308246",
            "id": 862308246,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zZceW",
            "original_commit_id": "d88cb72ec823aa5a0c49ed02d403ac726c5f395d",
            "original_line": 2629,
            "original_position": 187,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 958452210,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862308246/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-30T05:56:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862308246",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r862308746"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/862308746"
                }
            },
            "author_association": "MEMBER",
            "body": "It's a list of commands that don't have the `-bar` attribute and handle the `|` character by themselves, I found it in the code responsible for parsing a command and moved it from there into its own function.",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-30T06:01:56Z",
            "diff_hunk": "@@ -1220,6 +1220,302 @@ static char_u *skip_colon_white(const char_u *p, bool skipleadingwhite)\n   return (char_u *)p;\n }\n \n+/// Set the addr type for command\n+///\n+/// @param p pointer to character after command name in cmdline\n+static void set_cmd_addr_type(exarg_T *eap, char_u *p)\n+{\n+  // ea.addr_type for user commands is set by find_ucmd\n+  if (!IS_USER_CMDIDX(eap->cmdidx)) {\n+    if (eap->cmdidx != CMD_SIZE) {\n+      eap->addr_type = cmdnames[(int)eap->cmdidx].cmd_addr_type;\n+    } else {\n+      eap->addr_type = ADDR_LINES;\n+    }\n+    // :wincmd range depends on the argument\n+    if (eap->cmdidx == CMD_wincmd && p != NULL) {\n+      get_wincmd_addr_type(skipwhite(p), eap);\n+    }\n+    // :.cc in quickfix window uses line number\n+    if ((eap->cmdidx == CMD_cc || eap->cmdidx == CMD_ll) && bt_quickfix(curbuf)) {\n+      eap->addr_type = ADDR_OTHER;\n+    }\n+  }\n+}\n+\n+/// Set default command range based on the addr type of the command\n+static void set_cmd_default_range(exarg_T *eap)\n+{\n+  buf_T *buf;\n+\n+  eap->line1 = 1;\n+  switch (eap->addr_type) {\n+  case ADDR_LINES:\n+  case ADDR_OTHER:\n+    eap->line2 = curbuf->b_ml.ml_line_count;\n+    break;\n+  case ADDR_LOADED_BUFFERS:\n+    buf = firstbuf;\n+    while (buf->b_next != NULL && buf->b_ml.ml_mfp == NULL) {\n+      buf = buf->b_next;\n+    }\n+    eap->line1 = buf->b_fnum;\n+    buf = lastbuf;\n+    while (buf->b_prev != NULL && buf->b_ml.ml_mfp == NULL) {\n+      buf = buf->b_prev;\n+    }\n+    eap->line2 = buf->b_fnum;\n+    break;\n+  case ADDR_BUFFERS:\n+    eap->line1 = firstbuf->b_fnum;\n+    eap->line2 = lastbuf->b_fnum;\n+    break;\n+  case ADDR_WINDOWS:\n+    eap->line2 = LAST_WIN_NR;\n+    break;\n+  case ADDR_TABS:\n+    eap->line2 = LAST_TAB_NR;\n+    break;\n+  case ADDR_TABS_RELATIVE:\n+    eap->line2 = 1;\n+    break;\n+  case ADDR_ARGUMENTS:\n+    if (ARGCOUNT == 0) {\n+      eap->line1 = eap->line2 = 0;\n+    } else {\n+      eap->line2 = ARGCOUNT;\n+    }\n+    break;\n+  case ADDR_QUICKFIX_VALID:\n+    eap->line2 = (linenr_T)qf_get_valid_size(eap);\n+    if (eap->line2 == 0) {\n+      eap->line2 = 1;\n+    }\n+    break;\n+  case ADDR_NONE:\n+  case ADDR_UNSIGNED:\n+  case ADDR_QUICKFIX:\n+    iemsg(_(\"INTERNAL: Cannot use EX_DFLALL \"\n+            \"with ADDR_NONE, ADDR_UNSIGNED or ADDR_QUICKFIX\"));\n+    break;\n+  }\n+}\n+\n+/// Check if command with ID handles '|' themselves\n+bool command_handles_bar(cmdidx_T cmdidx)",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r862308746",
            "id": 862308746,
            "in_reply_to_id": 862307493,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zZcmK",
            "original_commit_id": "d88cb72ec823aa5a0c49ed02d403ac726c5f395d",
            "original_line": 1305,
            "original_position": 86,
            "original_start_line": null,
            "path": "src/nvim/ex_docmd.c",
            "position": null,
            "pull_request_review_id": 958452537,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862308746/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-30T06:04:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862308746",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r862309021"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/862309021"
                }
            },
            "author_association": "MEMBER",
            "body": "What should we do about the `\"` character then, we can't put that inside double quotes but we need a way to reference to it",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-30T06:05:10Z",
            "diff_hunk": "@@ -2450,3 +2451,191 @@ void nvim_del_user_command(String name, Error *err)\n {\n   nvim_buf_del_user_command(-1, name, err);\n }\n+\n+/// Parse command line.\n+///\n+/// Doesn't check the validity of command arguments.\n+///\n+/// @param str       Command line string to parse. Cannot contain \"\\n\".\n+/// @param opts      Optional parameters. Reserved for future use.\n+/// @param[out] err  Error details, if any.\n+/// @return Dictionary containing command information, with these keys:\n+///         - cmd: (string) Command name.\n+///         - line1: (number) Starting line of command range.\n+///         - line2: (number) Final line of command range.\n+///         - force: (boolean) Whether command contains a bang.\n+///         - args: (array) Command arguments.\n+///         - addr: (string) Value of |:command-addr|. Uses short name.\n+///         - nargs: (string) Value of |:command-nargs|.\n+///         - nextcmd: (string) Next command if there are multiple commands separated by a |:bar|.\n+///                             Empty if there isn't a next command.\n+///         - magic: (array) Which characters have special meaning inside the command arguments.\n+///                          Possible values inside the array are:\n+///             - '%%': '%%' and '#' get expanded by the command.\n+///             - '|': '|' may get treated specially by the command depending on the command and",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r862309021",
            "id": 862309021,
            "in_reply_to_id": 862307806,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zZcqd",
            "original_commit_id": "d88cb72ec823aa5a0c49ed02d403ac726c5f395d",
            "original_line": 2475,
            "original_position": 33,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 958452692,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862309021/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-30T06:06:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862309021",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r862309299"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/862309299"
                }
            },
            "author_association": "MEMBER",
            "body": "i thought we didn't need `\"` as a magic char? If it is needed I'd write `double-quote (\")`",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-30T06:09:00Z",
            "diff_hunk": "@@ -2450,3 +2451,191 @@ void nvim_del_user_command(String name, Error *err)\n {\n   nvim_buf_del_user_command(-1, name, err);\n }\n+\n+/// Parse command line.\n+///\n+/// Doesn't check the validity of command arguments.\n+///\n+/// @param str       Command line string to parse. Cannot contain \"\\n\".\n+/// @param opts      Optional parameters. Reserved for future use.\n+/// @param[out] err  Error details, if any.\n+/// @return Dictionary containing command information, with these keys:\n+///         - cmd: (string) Command name.\n+///         - line1: (number) Starting line of command range.\n+///         - line2: (number) Final line of command range.\n+///         - force: (boolean) Whether command contains a bang.\n+///         - args: (array) Command arguments.\n+///         - addr: (string) Value of |:command-addr|. Uses short name.\n+///         - nargs: (string) Value of |:command-nargs|.\n+///         - nextcmd: (string) Next command if there are multiple commands separated by a |:bar|.\n+///                             Empty if there isn't a next command.\n+///         - magic: (array) Which characters have special meaning inside the command arguments.\n+///                          Possible values inside the array are:\n+///             - '%%': '%%' and '#' get expanded by the command.\n+///             - '|': '|' may get treated specially by the command depending on the command and",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r862309299",
            "id": 862309299,
            "in_reply_to_id": 862307806,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zZcuz",
            "original_commit_id": "d88cb72ec823aa5a0c49ed02d403ac726c5f395d",
            "original_line": 2475,
            "original_position": 33,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 958452942,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862309299/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-30T06:09:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862309299",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r862309480"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/862309480"
                }
            },
            "author_association": "MEMBER",
            "body": "> i thought we didn't need `\"` as a magic char? If it is needed I'd write `double-quote (\")`\r\n\r\nWe didn't, but we still need to reference that `\"|\"` is related to it in the docs",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-30T06:11:05Z",
            "diff_hunk": "@@ -2450,3 +2451,191 @@ void nvim_del_user_command(String name, Error *err)\n {\n   nvim_buf_del_user_command(-1, name, err);\n }\n+\n+/// Parse command line.\n+///\n+/// Doesn't check the validity of command arguments.\n+///\n+/// @param str       Command line string to parse. Cannot contain \"\\n\".\n+/// @param opts      Optional parameters. Reserved for future use.\n+/// @param[out] err  Error details, if any.\n+/// @return Dictionary containing command information, with these keys:\n+///         - cmd: (string) Command name.\n+///         - line1: (number) Starting line of command range.\n+///         - line2: (number) Final line of command range.\n+///         - force: (boolean) Whether command contains a bang.\n+///         - args: (array) Command arguments.\n+///         - addr: (string) Value of |:command-addr|. Uses short name.\n+///         - nargs: (string) Value of |:command-nargs|.\n+///         - nextcmd: (string) Next command if there are multiple commands separated by a |:bar|.\n+///                             Empty if there isn't a next command.\n+///         - magic: (array) Which characters have special meaning inside the command arguments.\n+///                          Possible values inside the array are:\n+///             - '%%': '%%' and '#' get expanded by the command.\n+///             - '|': '|' may get treated specially by the command depending on the command and",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r862309480",
            "id": 862309480,
            "in_reply_to_id": 862307806,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zZcxo",
            "original_commit_id": "d88cb72ec823aa5a0c49ed02d403ac726c5f395d",
            "original_line": 2475,
            "original_position": 33,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 958453070,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862309480/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-30T06:11:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862309480",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r862309828"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/862309828"
                }
            },
            "author_association": "MEMBER",
            "body": "Looking into the code, it seems those are all related to `%` and are expanded when `%` is expanded, maybe I should put that in the docs.",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-30T06:15:02Z",
            "diff_hunk": "@@ -2450,3 +2451,191 @@ void nvim_del_user_command(String name, Error *err)\n {\n   nvim_buf_del_user_command(-1, name, err);\n }\n+\n+/// Parse command line.\n+///\n+/// Doesn't check the validity of command arguments.\n+///\n+/// @param str       Command line string to parse. Cannot contain \"\\n\".\n+/// @param opts      Optional parameters. Reserved for future use.\n+/// @param[out] err  Error details, if any.\n+/// @return Dictionary containing command information, with these keys:\n+///         - cmd: (string) Command name.\n+///         - line1: (number) Starting line of command range.\n+///         - line2: (number) Final line of command range.\n+///         - force: (boolean) Whether command contains a bang.\n+///         - args: (array) Command arguments.\n+///         - addr: (string) Value of |:command-addr|. Uses short name.\n+///         - nargs: (string) Value of |:command-nargs|.\n+///         - nextcmd: (string) Next command if there are multiple commands separated by a |:bar|.\n+///                             Empty if there isn't a next command.\n+///         - magic: (array) Which characters have special meaning inside the command arguments.\n+///                          Possible values inside the array are:\n+///             - '%%': '%%' and '#' get expanded by the command.\n+///             - '|': '|' may get treated specially by the command depending on the command and\n+///                    where it's used. '\"' is treated as the start of a quote.\n+///         - mods: (dictionary) |:command-modifiers|.\n+///             - silent: (boolean) |:silent|.\n+///             - emsg_silent: (boolean) |:silent!|.\n+///             - sandbox: (boolean) |:sandbox|.\n+///             - noautocmd: (boolean) |:noautocmd|.\n+///             - browse: (boolean) |:browse|.\n+///             - confirm: (boolean) |:confirm|.\n+///             - hide: (boolean) |:hide|.\n+///             - keepalt: (boolean) |:keepalt|.\n+///             - keepjumps: (boolean) |:keepjumps|.\n+///             - keepmarks: (boolean) |:keepmarks|.\n+///             - keeppatterns: (boolean) |:keeppatterns|.\n+///             - lockmarks: (boolean) |:lockmarks|.\n+///             - noswapfile: (boolean) |:noswapfile|.\n+///             - tab: (integer) |:tab|.\n+///             - verbose: (integer) |:verbose|.\n+///             - split: (dictionary) Split modifiers.\n+///               - vertical: (boolean) |:vertical|.\n+///               - aboveleft: (boolean) |:aboveleft|.\n+///               - belowright: (boolean) |:belowright|.\n+///               - topleft: (boolean) |:topleft|.\n+///               - botright: (boolean) |:botright|.\n+Dictionary nvim_parse_cmd(String str, Dictionary opts, Error *err)\n+  FUNC_API_SINCE(10) FUNC_API_FAST\n+{\n+  Dictionary result = ARRAY_DICT_INIT;\n+\n+  if (opts.size > 0) {\n+    api_set_error(err, kErrorTypeValidation, \"opts dict isn't empty\");\n+    return result;\n+  }\n+\n+  // Parse command line\n+  exarg_T ea;\n+  char nargs[2];\n+  const char *addr;\n+  cmd_parse_info_T cmdinfo;\n+  char_u *cmdline = vim_strsave((char_u *)str.data);\n+\n+  if (!parse_cmdline(cmdline, &ea, &cmdinfo)) {\n+    api_set_error(err, kErrorTypeException, \"Error while parsing command line\");\n+    goto end;\n+  }\n+\n+  // Parse arguments\n+  Array args = ARRAY_DICT_INIT;\n+  size_t length = STRLEN(ea.arg);\n+  size_t end = 0;\n+  size_t len = 0;\n+  int i = 1;\n+  char *buf = xcalloc(length, sizeof(char));\n+  bool done = false;\n+\n+  while (!done) {\n+    done = uc_split_args_iter(ea.arg, length, &end, buf, &len);\n+    if (len > 0) {\n+      ADD(args, STRING_OBJ(cstrn_to_string(buf, len)));\n+      i++;\n+    }\n+  }\n+\n+  if (ea.cmdidx == CMD_USER) {\n+    PUT(result, \"cmd\", CSTR_TO_OBJ((char *)USER_CMD(ea.useridx)->uc_name));\n+  } else if (ea.cmdidx == CMD_USER_BUF) {\n+    PUT(result, \"cmd\", CSTR_TO_OBJ((char *)USER_CMD_GA(&curbuf->b_ucmds, ea.useridx)->uc_name));\n+  } else {\n+    PUT(result, \"cmd\", CSTR_TO_OBJ((char *)get_command_name(NULL, ea.cmdidx)));\n+  }\n+  PUT(result, \"line1\", INTEGER_OBJ(ea.line1));\n+  PUT(result, \"line2\", INTEGER_OBJ(ea.line2));\n+  PUT(result, \"force\", BOOLEAN_OBJ(ea.forceit));\n+  PUT(result, \"args\", ARRAY_OBJ(args));\n+\n+  if (ea.argt & EX_EXTRA) {\n+    if (ea.argt & EX_NOSPC) {\n+      if (ea.argt & EX_NEEDARG) {\n+        nargs[0] = '1';\n+      } else {\n+        nargs[0] = '?';\n+      }\n+    } else if (ea.argt & EX_NEEDARG) {\n+      nargs[0] = '+';\n+    } else {\n+      nargs[0] = '*';\n+    }\n+  } else {\n+    nargs[0] = '0';\n+  }\n+  nargs[1] = '\\0';\n+  PUT(result, \"nargs\", CSTR_TO_OBJ(nargs));\n+\n+  switch (ea.addr_type) {\n+  case ADDR_LINES:\n+    addr = \"line\";\n+    break;\n+  case ADDR_ARGUMENTS:\n+    addr = \"arg\";\n+    break;\n+  case ADDR_BUFFERS:\n+    addr = \"buf\";\n+    break;\n+  case ADDR_LOADED_BUFFERS:\n+    addr = \"load\";\n+    break;\n+  case ADDR_WINDOWS:\n+    addr = \"win\";\n+    break;\n+  case ADDR_TABS:\n+    addr = \"tab\";\n+    break;\n+  case ADDR_QUICKFIX:\n+    addr = \"qf\";\n+    break;\n+  case ADDR_NONE:\n+    addr = \"none\";\n+    break;\n+  default:\n+    addr = \"?\";\n+    break;\n+  }\n+  PUT(result, \"addr\", CSTR_TO_OBJ(addr));\n+  PUT(result, \"nextcmd\", CSTR_TO_OBJ((char *)ea.nextcmd));\n+\n+  Dictionary mods = ARRAY_DICT_INIT;\n+  PUT(mods, \"silent\", BOOLEAN_OBJ(cmdinfo.silent));\n+  PUT(mods, \"emsg_silent\", BOOLEAN_OBJ(cmdinfo.emsg_silent));\n+  PUT(mods, \"sandbox\", BOOLEAN_OBJ(cmdinfo.sandbox));\n+  PUT(mods, \"noautocmd\", BOOLEAN_OBJ(cmdinfo.noautocmd));\n+  PUT(mods, \"tab\", INTEGER_OBJ(cmdmod.tab));\n+  PUT(mods, \"verbose\", INTEGER_OBJ(cmdinfo.verbose));\n+  PUT(mods, \"browse\", BOOLEAN_OBJ(cmdmod.browse));\n+  PUT(mods, \"confirm\", BOOLEAN_OBJ(cmdmod.confirm));\n+  PUT(mods, \"hide\", BOOLEAN_OBJ(cmdmod.hide));\n+  PUT(mods, \"keepalt\", BOOLEAN_OBJ(cmdmod.keepalt));\n+  PUT(mods, \"keepjumps\", BOOLEAN_OBJ(cmdmod.keepjumps));\n+  PUT(mods, \"keepmarks\", BOOLEAN_OBJ(cmdmod.keepmarks));\n+  PUT(mods, \"keeppatterns\", BOOLEAN_OBJ(cmdmod.keeppatterns));\n+  PUT(mods, \"lockmarks\", BOOLEAN_OBJ(cmdmod.lockmarks));\n+  PUT(mods, \"noswapfile\", BOOLEAN_OBJ(cmdmod.noswapfile));\n+\n+  Dictionary splitmods = ARRAY_DICT_INIT;\n+  PUT(splitmods, \"vertical\", BOOLEAN_OBJ(cmdmod.split & WSP_VERT));\n+  PUT(splitmods, \"aboveleft\", BOOLEAN_OBJ(cmdmod.split & WSP_ABOVE));\n+  PUT(splitmods, \"belowright\", BOOLEAN_OBJ(cmdmod.split & WSP_BELOW));\n+  PUT(splitmods, \"topleft\", BOOLEAN_OBJ(cmdmod.split & WSP_TOP));\n+  PUT(splitmods, \"botright\", BOOLEAN_OBJ(cmdmod.split & WSP_BOT));\n+\n+  PUT(mods, \"split\", DICTIONARY_OBJ(splitmods));\n+  PUT(result, \"mods\", DICTIONARY_OBJ(mods));\n+\n+  Array magic = ARRAY_DICT_INIT;\n+  if (cmdinfo.magic.percent) {\n+    ADD(magic, STRING_OBJ(STATIC_CSTR_TO_STRING(\"%\")));",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r862309828",
            "id": 862309828,
            "in_reply_to_id": 862308246,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zZc3E",
            "original_commit_id": "d88cb72ec823aa5a0c49ed02d403ac726c5f395d",
            "original_line": 2629,
            "original_position": 187,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 958453303,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862309828/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-30T06:15:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862309828",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r862310087"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/862310087"
                }
            },
            "author_association": "MEMBER",
            "body": "Alright it's in the docs now :)",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-30T06:18:35Z",
            "diff_hunk": "@@ -2450,3 +2451,191 @@ void nvim_del_user_command(String name, Error *err)\n {\n   nvim_buf_del_user_command(-1, name, err);\n }\n+\n+/// Parse command line.\n+///\n+/// Doesn't check the validity of command arguments.\n+///\n+/// @param str       Command line string to parse. Cannot contain \"\\n\".\n+/// @param opts      Optional parameters. Reserved for future use.\n+/// @param[out] err  Error details, if any.\n+/// @return Dictionary containing command information, with these keys:\n+///         - cmd: (string) Command name.\n+///         - line1: (number) Starting line of command range.\n+///         - line2: (number) Final line of command range.\n+///         - force: (boolean) Whether command contains a bang.\n+///         - args: (array) Command arguments.\n+///         - addr: (string) Value of |:command-addr|. Uses short name.\n+///         - nargs: (string) Value of |:command-nargs|.\n+///         - nextcmd: (string) Next command if there are multiple commands separated by a |:bar|.\n+///                             Empty if there isn't a next command.\n+///         - magic: (array) Which characters have special meaning inside the command arguments.\n+///                          Possible values inside the array are:\n+///             - '%%': '%%' and '#' get expanded by the command.\n+///             - '|': '|' may get treated specially by the command depending on the command and\n+///                    where it's used. '\"' is treated as the start of a quote.\n+///         - mods: (dictionary) |:command-modifiers|.\n+///             - silent: (boolean) |:silent|.\n+///             - emsg_silent: (boolean) |:silent!|.\n+///             - sandbox: (boolean) |:sandbox|.\n+///             - noautocmd: (boolean) |:noautocmd|.\n+///             - browse: (boolean) |:browse|.\n+///             - confirm: (boolean) |:confirm|.\n+///             - hide: (boolean) |:hide|.\n+///             - keepalt: (boolean) |:keepalt|.\n+///             - keepjumps: (boolean) |:keepjumps|.\n+///             - keepmarks: (boolean) |:keepmarks|.\n+///             - keeppatterns: (boolean) |:keeppatterns|.\n+///             - lockmarks: (boolean) |:lockmarks|.\n+///             - noswapfile: (boolean) |:noswapfile|.\n+///             - tab: (integer) |:tab|.\n+///             - verbose: (integer) |:verbose|.\n+///             - split: (dictionary) Split modifiers.\n+///               - vertical: (boolean) |:vertical|.\n+///               - aboveleft: (boolean) |:aboveleft|.\n+///               - belowright: (boolean) |:belowright|.\n+///               - topleft: (boolean) |:topleft|.\n+///               - botright: (boolean) |:botright|.\n+Dictionary nvim_parse_cmd(String str, Dictionary opts, Error *err)\n+  FUNC_API_SINCE(10) FUNC_API_FAST\n+{\n+  Dictionary result = ARRAY_DICT_INIT;\n+\n+  if (opts.size > 0) {\n+    api_set_error(err, kErrorTypeValidation, \"opts dict isn't empty\");\n+    return result;\n+  }\n+\n+  // Parse command line\n+  exarg_T ea;\n+  char nargs[2];\n+  const char *addr;\n+  cmd_parse_info_T cmdinfo;\n+  char_u *cmdline = vim_strsave((char_u *)str.data);\n+\n+  if (!parse_cmdline(cmdline, &ea, &cmdinfo)) {\n+    api_set_error(err, kErrorTypeException, \"Error while parsing command line\");\n+    goto end;\n+  }\n+\n+  // Parse arguments\n+  Array args = ARRAY_DICT_INIT;\n+  size_t length = STRLEN(ea.arg);\n+  size_t end = 0;\n+  size_t len = 0;\n+  int i = 1;\n+  char *buf = xcalloc(length, sizeof(char));\n+  bool done = false;\n+\n+  while (!done) {\n+    done = uc_split_args_iter(ea.arg, length, &end, buf, &len);\n+    if (len > 0) {\n+      ADD(args, STRING_OBJ(cstrn_to_string(buf, len)));\n+      i++;\n+    }\n+  }\n+\n+  if (ea.cmdidx == CMD_USER) {\n+    PUT(result, \"cmd\", CSTR_TO_OBJ((char *)USER_CMD(ea.useridx)->uc_name));\n+  } else if (ea.cmdidx == CMD_USER_BUF) {\n+    PUT(result, \"cmd\", CSTR_TO_OBJ((char *)USER_CMD_GA(&curbuf->b_ucmds, ea.useridx)->uc_name));\n+  } else {\n+    PUT(result, \"cmd\", CSTR_TO_OBJ((char *)get_command_name(NULL, ea.cmdidx)));\n+  }\n+  PUT(result, \"line1\", INTEGER_OBJ(ea.line1));\n+  PUT(result, \"line2\", INTEGER_OBJ(ea.line2));\n+  PUT(result, \"force\", BOOLEAN_OBJ(ea.forceit));\n+  PUT(result, \"args\", ARRAY_OBJ(args));\n+\n+  if (ea.argt & EX_EXTRA) {\n+    if (ea.argt & EX_NOSPC) {\n+      if (ea.argt & EX_NEEDARG) {\n+        nargs[0] = '1';\n+      } else {\n+        nargs[0] = '?';\n+      }\n+    } else if (ea.argt & EX_NEEDARG) {\n+      nargs[0] = '+';\n+    } else {\n+      nargs[0] = '*';\n+    }\n+  } else {\n+    nargs[0] = '0';\n+  }\n+  nargs[1] = '\\0';\n+  PUT(result, \"nargs\", CSTR_TO_OBJ(nargs));\n+\n+  switch (ea.addr_type) {\n+  case ADDR_LINES:\n+    addr = \"line\";\n+    break;\n+  case ADDR_ARGUMENTS:\n+    addr = \"arg\";\n+    break;\n+  case ADDR_BUFFERS:\n+    addr = \"buf\";\n+    break;\n+  case ADDR_LOADED_BUFFERS:\n+    addr = \"load\";\n+    break;\n+  case ADDR_WINDOWS:\n+    addr = \"win\";\n+    break;\n+  case ADDR_TABS:\n+    addr = \"tab\";\n+    break;\n+  case ADDR_QUICKFIX:\n+    addr = \"qf\";\n+    break;\n+  case ADDR_NONE:\n+    addr = \"none\";\n+    break;\n+  default:\n+    addr = \"?\";\n+    break;\n+  }\n+  PUT(result, \"addr\", CSTR_TO_OBJ(addr));\n+  PUT(result, \"nextcmd\", CSTR_TO_OBJ((char *)ea.nextcmd));\n+\n+  Dictionary mods = ARRAY_DICT_INIT;\n+  PUT(mods, \"silent\", BOOLEAN_OBJ(cmdinfo.silent));\n+  PUT(mods, \"emsg_silent\", BOOLEAN_OBJ(cmdinfo.emsg_silent));\n+  PUT(mods, \"sandbox\", BOOLEAN_OBJ(cmdinfo.sandbox));\n+  PUT(mods, \"noautocmd\", BOOLEAN_OBJ(cmdinfo.noautocmd));\n+  PUT(mods, \"tab\", INTEGER_OBJ(cmdmod.tab));\n+  PUT(mods, \"verbose\", INTEGER_OBJ(cmdinfo.verbose));\n+  PUT(mods, \"browse\", BOOLEAN_OBJ(cmdmod.browse));\n+  PUT(mods, \"confirm\", BOOLEAN_OBJ(cmdmod.confirm));\n+  PUT(mods, \"hide\", BOOLEAN_OBJ(cmdmod.hide));\n+  PUT(mods, \"keepalt\", BOOLEAN_OBJ(cmdmod.keepalt));\n+  PUT(mods, \"keepjumps\", BOOLEAN_OBJ(cmdmod.keepjumps));\n+  PUT(mods, \"keepmarks\", BOOLEAN_OBJ(cmdmod.keepmarks));\n+  PUT(mods, \"keeppatterns\", BOOLEAN_OBJ(cmdmod.keeppatterns));\n+  PUT(mods, \"lockmarks\", BOOLEAN_OBJ(cmdmod.lockmarks));\n+  PUT(mods, \"noswapfile\", BOOLEAN_OBJ(cmdmod.noswapfile));\n+\n+  Dictionary splitmods = ARRAY_DICT_INIT;\n+  PUT(splitmods, \"vertical\", BOOLEAN_OBJ(cmdmod.split & WSP_VERT));\n+  PUT(splitmods, \"aboveleft\", BOOLEAN_OBJ(cmdmod.split & WSP_ABOVE));\n+  PUT(splitmods, \"belowright\", BOOLEAN_OBJ(cmdmod.split & WSP_BELOW));\n+  PUT(splitmods, \"topleft\", BOOLEAN_OBJ(cmdmod.split & WSP_TOP));\n+  PUT(splitmods, \"botright\", BOOLEAN_OBJ(cmdmod.split & WSP_BOT));\n+\n+  PUT(mods, \"split\", DICTIONARY_OBJ(splitmods));\n+  PUT(result, \"mods\", DICTIONARY_OBJ(mods));\n+\n+  Array magic = ARRAY_DICT_INIT;\n+  if (cmdinfo.magic.percent) {\n+    ADD(magic, STRING_OBJ(STATIC_CSTR_TO_STRING(\"%\")));",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r862310087",
            "id": 862310087,
            "in_reply_to_id": 862308246,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zZc7H",
            "original_commit_id": "d88cb72ec823aa5a0c49ed02d403ac726c5f395d",
            "original_line": 2629,
            "original_position": 187,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 958453473,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862310087/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-30T06:18:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862310087",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r862310158"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/862310158"
                }
            },
            "author_association": "MEMBER",
            "body": "Anyway it's fixed now ",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-30T06:18:54Z",
            "diff_hunk": "@@ -2450,3 +2451,191 @@ void nvim_del_user_command(String name, Error *err)\n {\n   nvim_buf_del_user_command(-1, name, err);\n }\n+\n+/// Parse command line.\n+///\n+/// Doesn't check the validity of command arguments.\n+///\n+/// @param str       Command line string to parse. Cannot contain \"\\n\".\n+/// @param opts      Optional parameters. Reserved for future use.\n+/// @param[out] err  Error details, if any.\n+/// @return Dictionary containing command information, with these keys:\n+///         - cmd: (string) Command name.\n+///         - line1: (number) Starting line of command range.\n+///         - line2: (number) Final line of command range.\n+///         - force: (boolean) Whether command contains a bang.\n+///         - args: (array) Command arguments.\n+///         - addr: (string) Value of |:command-addr|. Uses short name.\n+///         - nargs: (string) Value of |:command-nargs|.\n+///         - nextcmd: (string) Next command if there are multiple commands separated by a |:bar|.\n+///                             Empty if there isn't a next command.\n+///         - magic: (array) Which characters have special meaning inside the command arguments.\n+///                          Possible values inside the array are:\n+///             - '%%': '%%' and '#' get expanded by the command.\n+///             - '|': '|' may get treated specially by the command depending on the command and",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r862310158",
            "id": 862310158,
            "in_reply_to_id": 862307806,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zZc8O",
            "original_commit_id": "d88cb72ec823aa5a0c49ed02d403ac726c5f395d",
            "original_line": 2475,
            "original_position": 33,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 958453499,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862310158/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-30T06:18:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862310158",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r862310248"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/862310248"
                }
            },
            "author_association": "MEMBER",
            "body": "On second thought maybe we shouldn't rely on this list and just check if the command doesn't have the `-bar` attribute? Though I'm not sure if that'll work perfectly since I'm not sure if this list contains all commands without the `-bar` attribute",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-30T06:20:08Z",
            "diff_hunk": "@@ -1220,6 +1220,302 @@ static char_u *skip_colon_white(const char_u *p, bool skipleadingwhite)\n   return (char_u *)p;\n }\n \n+/// Set the addr type for command\n+///\n+/// @param p pointer to character after command name in cmdline\n+static void set_cmd_addr_type(exarg_T *eap, char_u *p)\n+{\n+  // ea.addr_type for user commands is set by find_ucmd\n+  if (!IS_USER_CMDIDX(eap->cmdidx)) {\n+    if (eap->cmdidx != CMD_SIZE) {\n+      eap->addr_type = cmdnames[(int)eap->cmdidx].cmd_addr_type;\n+    } else {\n+      eap->addr_type = ADDR_LINES;\n+    }\n+    // :wincmd range depends on the argument\n+    if (eap->cmdidx == CMD_wincmd && p != NULL) {\n+      get_wincmd_addr_type(skipwhite(p), eap);\n+    }\n+    // :.cc in quickfix window uses line number\n+    if ((eap->cmdidx == CMD_cc || eap->cmdidx == CMD_ll) && bt_quickfix(curbuf)) {\n+      eap->addr_type = ADDR_OTHER;\n+    }\n+  }\n+}\n+\n+/// Set default command range based on the addr type of the command\n+static void set_cmd_default_range(exarg_T *eap)\n+{\n+  buf_T *buf;\n+\n+  eap->line1 = 1;\n+  switch (eap->addr_type) {\n+  case ADDR_LINES:\n+  case ADDR_OTHER:\n+    eap->line2 = curbuf->b_ml.ml_line_count;\n+    break;\n+  case ADDR_LOADED_BUFFERS:\n+    buf = firstbuf;\n+    while (buf->b_next != NULL && buf->b_ml.ml_mfp == NULL) {\n+      buf = buf->b_next;\n+    }\n+    eap->line1 = buf->b_fnum;\n+    buf = lastbuf;\n+    while (buf->b_prev != NULL && buf->b_ml.ml_mfp == NULL) {\n+      buf = buf->b_prev;\n+    }\n+    eap->line2 = buf->b_fnum;\n+    break;\n+  case ADDR_BUFFERS:\n+    eap->line1 = firstbuf->b_fnum;\n+    eap->line2 = lastbuf->b_fnum;\n+    break;\n+  case ADDR_WINDOWS:\n+    eap->line2 = LAST_WIN_NR;\n+    break;\n+  case ADDR_TABS:\n+    eap->line2 = LAST_TAB_NR;\n+    break;\n+  case ADDR_TABS_RELATIVE:\n+    eap->line2 = 1;\n+    break;\n+  case ADDR_ARGUMENTS:\n+    if (ARGCOUNT == 0) {\n+      eap->line1 = eap->line2 = 0;\n+    } else {\n+      eap->line2 = ARGCOUNT;\n+    }\n+    break;\n+  case ADDR_QUICKFIX_VALID:\n+    eap->line2 = (linenr_T)qf_get_valid_size(eap);\n+    if (eap->line2 == 0) {\n+      eap->line2 = 1;\n+    }\n+    break;\n+  case ADDR_NONE:\n+  case ADDR_UNSIGNED:\n+  case ADDR_QUICKFIX:\n+    iemsg(_(\"INTERNAL: Cannot use EX_DFLALL \"\n+            \"with ADDR_NONE, ADDR_UNSIGNED or ADDR_QUICKFIX\"));\n+    break;\n+  }\n+}\n+\n+/// Check if command with ID handles '|' themselves\n+bool command_handles_bar(cmdidx_T cmdidx)",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r862310248",
            "id": 862310248,
            "in_reply_to_id": 862307493,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zZc9o",
            "original_commit_id": "d88cb72ec823aa5a0c49ed02d403ac726c5f395d",
            "original_line": 1305,
            "original_position": 86,
            "original_start_line": null,
            "path": "src/nvim/ex_docmd.c",
            "position": null,
            "pull_request_review_id": 958453563,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862310248/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-30T06:20:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862310248",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r862310447"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/862310447"
                }
            },
            "author_association": "MEMBER",
            "body": "Okay so it seems that all commands that don't have the `-bar` attribute aren't in the list, and those that aren't in the list are commands that always treat `|` as their argument. So it depends on what meaning we want the `|` magic value to have? Do we want it to mean that `|` is treated as a command separator or do we want it to mean that `|` is treated as an argument. Currently it means that even though the command handles `|` by itself, it may still be treated as a command separator, which I personally think is the right behavior",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-30T06:22:28Z",
            "diff_hunk": "@@ -1220,6 +1220,302 @@ static char_u *skip_colon_white(const char_u *p, bool skipleadingwhite)\n   return (char_u *)p;\n }\n \n+/// Set the addr type for command\n+///\n+/// @param p pointer to character after command name in cmdline\n+static void set_cmd_addr_type(exarg_T *eap, char_u *p)\n+{\n+  // ea.addr_type for user commands is set by find_ucmd\n+  if (!IS_USER_CMDIDX(eap->cmdidx)) {\n+    if (eap->cmdidx != CMD_SIZE) {\n+      eap->addr_type = cmdnames[(int)eap->cmdidx].cmd_addr_type;\n+    } else {\n+      eap->addr_type = ADDR_LINES;\n+    }\n+    // :wincmd range depends on the argument\n+    if (eap->cmdidx == CMD_wincmd && p != NULL) {\n+      get_wincmd_addr_type(skipwhite(p), eap);\n+    }\n+    // :.cc in quickfix window uses line number\n+    if ((eap->cmdidx == CMD_cc || eap->cmdidx == CMD_ll) && bt_quickfix(curbuf)) {\n+      eap->addr_type = ADDR_OTHER;\n+    }\n+  }\n+}\n+\n+/// Set default command range based on the addr type of the command\n+static void set_cmd_default_range(exarg_T *eap)\n+{\n+  buf_T *buf;\n+\n+  eap->line1 = 1;\n+  switch (eap->addr_type) {\n+  case ADDR_LINES:\n+  case ADDR_OTHER:\n+    eap->line2 = curbuf->b_ml.ml_line_count;\n+    break;\n+  case ADDR_LOADED_BUFFERS:\n+    buf = firstbuf;\n+    while (buf->b_next != NULL && buf->b_ml.ml_mfp == NULL) {\n+      buf = buf->b_next;\n+    }\n+    eap->line1 = buf->b_fnum;\n+    buf = lastbuf;\n+    while (buf->b_prev != NULL && buf->b_ml.ml_mfp == NULL) {\n+      buf = buf->b_prev;\n+    }\n+    eap->line2 = buf->b_fnum;\n+    break;\n+  case ADDR_BUFFERS:\n+    eap->line1 = firstbuf->b_fnum;\n+    eap->line2 = lastbuf->b_fnum;\n+    break;\n+  case ADDR_WINDOWS:\n+    eap->line2 = LAST_WIN_NR;\n+    break;\n+  case ADDR_TABS:\n+    eap->line2 = LAST_TAB_NR;\n+    break;\n+  case ADDR_TABS_RELATIVE:\n+    eap->line2 = 1;\n+    break;\n+  case ADDR_ARGUMENTS:\n+    if (ARGCOUNT == 0) {\n+      eap->line1 = eap->line2 = 0;\n+    } else {\n+      eap->line2 = ARGCOUNT;\n+    }\n+    break;\n+  case ADDR_QUICKFIX_VALID:\n+    eap->line2 = (linenr_T)qf_get_valid_size(eap);\n+    if (eap->line2 == 0) {\n+      eap->line2 = 1;\n+    }\n+    break;\n+  case ADDR_NONE:\n+  case ADDR_UNSIGNED:\n+  case ADDR_QUICKFIX:\n+    iemsg(_(\"INTERNAL: Cannot use EX_DFLALL \"\n+            \"with ADDR_NONE, ADDR_UNSIGNED or ADDR_QUICKFIX\"));\n+    break;\n+  }\n+}\n+\n+/// Check if command with ID handles '|' themselves\n+bool command_handles_bar(cmdidx_T cmdidx)",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r862310447",
            "id": 862310447,
            "in_reply_to_id": 862307493,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zZdAv",
            "original_commit_id": "d88cb72ec823aa5a0c49ed02d403ac726c5f395d",
            "original_line": 1305,
            "original_position": 86,
            "original_start_line": null,
            "path": "src/nvim/ex_docmd.c",
            "position": null,
            "pull_request_review_id": 958453674,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862310447/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-30T06:23:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862310447",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r862310913"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/862310913"
                }
            },
            "author_association": "MEMBER",
            "body": "> Do we want it to mean that `|` is treated as a command separator or do we want it to mean that `|` is treated as an argument.\r\n\r\nIf it's treated as an arg, that's \"literal\". If it's a separator that's \"magic\".\r\n\r\nThe purpose of `magic=[]` (i.e. _no magic_) is to say \"I want all args to be passed literally to the command\". Commands can, of course, interpret the args any way they want.",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-30T06:27:22Z",
            "diff_hunk": "@@ -1220,6 +1220,302 @@ static char_u *skip_colon_white(const char_u *p, bool skipleadingwhite)\n   return (char_u *)p;\n }\n \n+/// Set the addr type for command\n+///\n+/// @param p pointer to character after command name in cmdline\n+static void set_cmd_addr_type(exarg_T *eap, char_u *p)\n+{\n+  // ea.addr_type for user commands is set by find_ucmd\n+  if (!IS_USER_CMDIDX(eap->cmdidx)) {\n+    if (eap->cmdidx != CMD_SIZE) {\n+      eap->addr_type = cmdnames[(int)eap->cmdidx].cmd_addr_type;\n+    } else {\n+      eap->addr_type = ADDR_LINES;\n+    }\n+    // :wincmd range depends on the argument\n+    if (eap->cmdidx == CMD_wincmd && p != NULL) {\n+      get_wincmd_addr_type(skipwhite(p), eap);\n+    }\n+    // :.cc in quickfix window uses line number\n+    if ((eap->cmdidx == CMD_cc || eap->cmdidx == CMD_ll) && bt_quickfix(curbuf)) {\n+      eap->addr_type = ADDR_OTHER;\n+    }\n+  }\n+}\n+\n+/// Set default command range based on the addr type of the command\n+static void set_cmd_default_range(exarg_T *eap)\n+{\n+  buf_T *buf;\n+\n+  eap->line1 = 1;\n+  switch (eap->addr_type) {\n+  case ADDR_LINES:\n+  case ADDR_OTHER:\n+    eap->line2 = curbuf->b_ml.ml_line_count;\n+    break;\n+  case ADDR_LOADED_BUFFERS:\n+    buf = firstbuf;\n+    while (buf->b_next != NULL && buf->b_ml.ml_mfp == NULL) {\n+      buf = buf->b_next;\n+    }\n+    eap->line1 = buf->b_fnum;\n+    buf = lastbuf;\n+    while (buf->b_prev != NULL && buf->b_ml.ml_mfp == NULL) {\n+      buf = buf->b_prev;\n+    }\n+    eap->line2 = buf->b_fnum;\n+    break;\n+  case ADDR_BUFFERS:\n+    eap->line1 = firstbuf->b_fnum;\n+    eap->line2 = lastbuf->b_fnum;\n+    break;\n+  case ADDR_WINDOWS:\n+    eap->line2 = LAST_WIN_NR;\n+    break;\n+  case ADDR_TABS:\n+    eap->line2 = LAST_TAB_NR;\n+    break;\n+  case ADDR_TABS_RELATIVE:\n+    eap->line2 = 1;\n+    break;\n+  case ADDR_ARGUMENTS:\n+    if (ARGCOUNT == 0) {\n+      eap->line1 = eap->line2 = 0;\n+    } else {\n+      eap->line2 = ARGCOUNT;\n+    }\n+    break;\n+  case ADDR_QUICKFIX_VALID:\n+    eap->line2 = (linenr_T)qf_get_valid_size(eap);\n+    if (eap->line2 == 0) {\n+      eap->line2 = 1;\n+    }\n+    break;\n+  case ADDR_NONE:\n+  case ADDR_UNSIGNED:\n+  case ADDR_QUICKFIX:\n+    iemsg(_(\"INTERNAL: Cannot use EX_DFLALL \"\n+            \"with ADDR_NONE, ADDR_UNSIGNED or ADDR_QUICKFIX\"));\n+    break;\n+  }\n+}\n+\n+/// Check if command with ID handles '|' themselves\n+bool command_handles_bar(cmdidx_T cmdidx)",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r862310913",
            "id": 862310913,
            "in_reply_to_id": 862307493,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zZdIB",
            "original_commit_id": "d88cb72ec823aa5a0c49ed02d403ac726c5f395d",
            "original_line": 1305,
            "original_position": 86,
            "original_start_line": null,
            "path": "src/nvim/ex_docmd.c",
            "position": null,
            "pull_request_review_id": 958453964,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862310913/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-30T06:27:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862310913",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r862311496"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/862311496"
                }
            },
            "author_association": "MEMBER",
            "body": "> > Do we want it to mean that `|` is treated as a command separator or do we want it to mean that `|` is treated as an argument.\r\n> \r\n> If it's treated as an arg, that's \"literal\". If it's a separator that's \"magic\".\r\n> \r\n> The purpose of `magic=[]` (i.e. _no magic_) is to say \"I want all args to be passed literally to the command\". Commands can, of course, interpret the args any way they want.\r\n\r\nIn that case, I need to change the behavior a bit. But there's some commands where it's ambiguous whether `|` is treated literally or not, and it depends on the position of the `|`, so it's near impossible to get a fully accurate definitive list of which commands treat `|` specially. We could do the next best thing however and just put `|` as magic for all commands with the `-bar` attribute",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-30T06:31:28Z",
            "diff_hunk": "@@ -1220,6 +1220,302 @@ static char_u *skip_colon_white(const char_u *p, bool skipleadingwhite)\n   return (char_u *)p;\n }\n \n+/// Set the addr type for command\n+///\n+/// @param p pointer to character after command name in cmdline\n+static void set_cmd_addr_type(exarg_T *eap, char_u *p)\n+{\n+  // ea.addr_type for user commands is set by find_ucmd\n+  if (!IS_USER_CMDIDX(eap->cmdidx)) {\n+    if (eap->cmdidx != CMD_SIZE) {\n+      eap->addr_type = cmdnames[(int)eap->cmdidx].cmd_addr_type;\n+    } else {\n+      eap->addr_type = ADDR_LINES;\n+    }\n+    // :wincmd range depends on the argument\n+    if (eap->cmdidx == CMD_wincmd && p != NULL) {\n+      get_wincmd_addr_type(skipwhite(p), eap);\n+    }\n+    // :.cc in quickfix window uses line number\n+    if ((eap->cmdidx == CMD_cc || eap->cmdidx == CMD_ll) && bt_quickfix(curbuf)) {\n+      eap->addr_type = ADDR_OTHER;\n+    }\n+  }\n+}\n+\n+/// Set default command range based on the addr type of the command\n+static void set_cmd_default_range(exarg_T *eap)\n+{\n+  buf_T *buf;\n+\n+  eap->line1 = 1;\n+  switch (eap->addr_type) {\n+  case ADDR_LINES:\n+  case ADDR_OTHER:\n+    eap->line2 = curbuf->b_ml.ml_line_count;\n+    break;\n+  case ADDR_LOADED_BUFFERS:\n+    buf = firstbuf;\n+    while (buf->b_next != NULL && buf->b_ml.ml_mfp == NULL) {\n+      buf = buf->b_next;\n+    }\n+    eap->line1 = buf->b_fnum;\n+    buf = lastbuf;\n+    while (buf->b_prev != NULL && buf->b_ml.ml_mfp == NULL) {\n+      buf = buf->b_prev;\n+    }\n+    eap->line2 = buf->b_fnum;\n+    break;\n+  case ADDR_BUFFERS:\n+    eap->line1 = firstbuf->b_fnum;\n+    eap->line2 = lastbuf->b_fnum;\n+    break;\n+  case ADDR_WINDOWS:\n+    eap->line2 = LAST_WIN_NR;\n+    break;\n+  case ADDR_TABS:\n+    eap->line2 = LAST_TAB_NR;\n+    break;\n+  case ADDR_TABS_RELATIVE:\n+    eap->line2 = 1;\n+    break;\n+  case ADDR_ARGUMENTS:\n+    if (ARGCOUNT == 0) {\n+      eap->line1 = eap->line2 = 0;\n+    } else {\n+      eap->line2 = ARGCOUNT;\n+    }\n+    break;\n+  case ADDR_QUICKFIX_VALID:\n+    eap->line2 = (linenr_T)qf_get_valid_size(eap);\n+    if (eap->line2 == 0) {\n+      eap->line2 = 1;\n+    }\n+    break;\n+  case ADDR_NONE:\n+  case ADDR_UNSIGNED:\n+  case ADDR_QUICKFIX:\n+    iemsg(_(\"INTERNAL: Cannot use EX_DFLALL \"\n+            \"with ADDR_NONE, ADDR_UNSIGNED or ADDR_QUICKFIX\"));\n+    break;\n+  }\n+}\n+\n+/// Check if command with ID handles '|' themselves\n+bool command_handles_bar(cmdidx_T cmdidx)",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r862311496",
            "id": 862311496,
            "in_reply_to_id": 862307493,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zZdRI",
            "original_commit_id": "d88cb72ec823aa5a0c49ed02d403ac726c5f395d",
            "original_line": 1305,
            "original_position": 86,
            "original_start_line": null,
            "path": "src/nvim/ex_docmd.c",
            "position": null,
            "pull_request_review_id": 958457901,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862311496/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-30T06:31:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862311496",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r862312685"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/862312685"
                }
            },
            "author_association": "MEMBER",
            "body": "> We could do the next best thing however and just put | as magic for all commands with the -bar attribute\r\n\r\nSure let's start with that. Doesn't need to be perfect. This is already going to be super valuable and we can make it more granular later.",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-30T06:33:44Z",
            "diff_hunk": "@@ -1220,6 +1220,302 @@ static char_u *skip_colon_white(const char_u *p, bool skipleadingwhite)\n   return (char_u *)p;\n }\n \n+/// Set the addr type for command\n+///\n+/// @param p pointer to character after command name in cmdline\n+static void set_cmd_addr_type(exarg_T *eap, char_u *p)\n+{\n+  // ea.addr_type for user commands is set by find_ucmd\n+  if (!IS_USER_CMDIDX(eap->cmdidx)) {\n+    if (eap->cmdidx != CMD_SIZE) {\n+      eap->addr_type = cmdnames[(int)eap->cmdidx].cmd_addr_type;\n+    } else {\n+      eap->addr_type = ADDR_LINES;\n+    }\n+    // :wincmd range depends on the argument\n+    if (eap->cmdidx == CMD_wincmd && p != NULL) {\n+      get_wincmd_addr_type(skipwhite(p), eap);\n+    }\n+    // :.cc in quickfix window uses line number\n+    if ((eap->cmdidx == CMD_cc || eap->cmdidx == CMD_ll) && bt_quickfix(curbuf)) {\n+      eap->addr_type = ADDR_OTHER;\n+    }\n+  }\n+}\n+\n+/// Set default command range based on the addr type of the command\n+static void set_cmd_default_range(exarg_T *eap)\n+{\n+  buf_T *buf;\n+\n+  eap->line1 = 1;\n+  switch (eap->addr_type) {\n+  case ADDR_LINES:\n+  case ADDR_OTHER:\n+    eap->line2 = curbuf->b_ml.ml_line_count;\n+    break;\n+  case ADDR_LOADED_BUFFERS:\n+    buf = firstbuf;\n+    while (buf->b_next != NULL && buf->b_ml.ml_mfp == NULL) {\n+      buf = buf->b_next;\n+    }\n+    eap->line1 = buf->b_fnum;\n+    buf = lastbuf;\n+    while (buf->b_prev != NULL && buf->b_ml.ml_mfp == NULL) {\n+      buf = buf->b_prev;\n+    }\n+    eap->line2 = buf->b_fnum;\n+    break;\n+  case ADDR_BUFFERS:\n+    eap->line1 = firstbuf->b_fnum;\n+    eap->line2 = lastbuf->b_fnum;\n+    break;\n+  case ADDR_WINDOWS:\n+    eap->line2 = LAST_WIN_NR;\n+    break;\n+  case ADDR_TABS:\n+    eap->line2 = LAST_TAB_NR;\n+    break;\n+  case ADDR_TABS_RELATIVE:\n+    eap->line2 = 1;\n+    break;\n+  case ADDR_ARGUMENTS:\n+    if (ARGCOUNT == 0) {\n+      eap->line1 = eap->line2 = 0;\n+    } else {\n+      eap->line2 = ARGCOUNT;\n+    }\n+    break;\n+  case ADDR_QUICKFIX_VALID:\n+    eap->line2 = (linenr_T)qf_get_valid_size(eap);\n+    if (eap->line2 == 0) {\n+      eap->line2 = 1;\n+    }\n+    break;\n+  case ADDR_NONE:\n+  case ADDR_UNSIGNED:\n+  case ADDR_QUICKFIX:\n+    iemsg(_(\"INTERNAL: Cannot use EX_DFLALL \"\n+            \"with ADDR_NONE, ADDR_UNSIGNED or ADDR_QUICKFIX\"));\n+    break;\n+  }\n+}\n+\n+/// Check if command with ID handles '|' themselves\n+bool command_handles_bar(cmdidx_T cmdidx)",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r862312685",
            "id": 862312685,
            "in_reply_to_id": 862307493,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zZdjt",
            "original_commit_id": "d88cb72ec823aa5a0c49ed02d403ac726c5f395d",
            "original_line": 1305,
            "original_position": 86,
            "original_start_line": null,
            "path": "src/nvim/ex_docmd.c",
            "position": null,
            "pull_request_review_id": 958458056,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862312685/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-30T06:33:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862312685",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r862314249"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/862314249"
                }
            },
            "author_association": "MEMBER",
            "body": "Alright, done!",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-30T06:37:13Z",
            "diff_hunk": "@@ -1220,6 +1220,302 @@ static char_u *skip_colon_white(const char_u *p, bool skipleadingwhite)\n   return (char_u *)p;\n }\n \n+/// Set the addr type for command\n+///\n+/// @param p pointer to character after command name in cmdline\n+static void set_cmd_addr_type(exarg_T *eap, char_u *p)\n+{\n+  // ea.addr_type for user commands is set by find_ucmd\n+  if (!IS_USER_CMDIDX(eap->cmdidx)) {\n+    if (eap->cmdidx != CMD_SIZE) {\n+      eap->addr_type = cmdnames[(int)eap->cmdidx].cmd_addr_type;\n+    } else {\n+      eap->addr_type = ADDR_LINES;\n+    }\n+    // :wincmd range depends on the argument\n+    if (eap->cmdidx == CMD_wincmd && p != NULL) {\n+      get_wincmd_addr_type(skipwhite(p), eap);\n+    }\n+    // :.cc in quickfix window uses line number\n+    if ((eap->cmdidx == CMD_cc || eap->cmdidx == CMD_ll) && bt_quickfix(curbuf)) {\n+      eap->addr_type = ADDR_OTHER;\n+    }\n+  }\n+}\n+\n+/// Set default command range based on the addr type of the command\n+static void set_cmd_default_range(exarg_T *eap)\n+{\n+  buf_T *buf;\n+\n+  eap->line1 = 1;\n+  switch (eap->addr_type) {\n+  case ADDR_LINES:\n+  case ADDR_OTHER:\n+    eap->line2 = curbuf->b_ml.ml_line_count;\n+    break;\n+  case ADDR_LOADED_BUFFERS:\n+    buf = firstbuf;\n+    while (buf->b_next != NULL && buf->b_ml.ml_mfp == NULL) {\n+      buf = buf->b_next;\n+    }\n+    eap->line1 = buf->b_fnum;\n+    buf = lastbuf;\n+    while (buf->b_prev != NULL && buf->b_ml.ml_mfp == NULL) {\n+      buf = buf->b_prev;\n+    }\n+    eap->line2 = buf->b_fnum;\n+    break;\n+  case ADDR_BUFFERS:\n+    eap->line1 = firstbuf->b_fnum;\n+    eap->line2 = lastbuf->b_fnum;\n+    break;\n+  case ADDR_WINDOWS:\n+    eap->line2 = LAST_WIN_NR;\n+    break;\n+  case ADDR_TABS:\n+    eap->line2 = LAST_TAB_NR;\n+    break;\n+  case ADDR_TABS_RELATIVE:\n+    eap->line2 = 1;\n+    break;\n+  case ADDR_ARGUMENTS:\n+    if (ARGCOUNT == 0) {\n+      eap->line1 = eap->line2 = 0;\n+    } else {\n+      eap->line2 = ARGCOUNT;\n+    }\n+    break;\n+  case ADDR_QUICKFIX_VALID:\n+    eap->line2 = (linenr_T)qf_get_valid_size(eap);\n+    if (eap->line2 == 0) {\n+      eap->line2 = 1;\n+    }\n+    break;\n+  case ADDR_NONE:\n+  case ADDR_UNSIGNED:\n+  case ADDR_QUICKFIX:\n+    iemsg(_(\"INTERNAL: Cannot use EX_DFLALL \"\n+            \"with ADDR_NONE, ADDR_UNSIGNED or ADDR_QUICKFIX\"));\n+    break;\n+  }\n+}\n+\n+/// Check if command with ID handles '|' themselves\n+bool command_handles_bar(cmdidx_T cmdidx)",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r862314249",
            "id": 862314249,
            "in_reply_to_id": 862307493,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zZd8J",
            "original_commit_id": "d88cb72ec823aa5a0c49ed02d403ac726c5f395d",
            "original_line": 1305,
            "original_position": 86,
            "original_start_line": null,
            "path": "src/nvim/ex_docmd.c",
            "position": null,
            "pull_request_review_id": 958458232,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862314249/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-30T06:37:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862314249",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r862332795"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/862332795"
                }
            },
            "author_association": "MEMBER",
            "body": "> For example aboveleft = false doesn't imply that the belowright modifier is set, and vice-versa\r\n\r\nThat's not necessary. the value could empty as well.\r\n\r\n>  Also aboveleft and topleft can both be true at the same time afaik, same with belowright and botright\r\n\r\nIs the behaviour with topleft+aboveleft different than just topleft? Sounds like `topleft` would just take priority then.",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-30T09:00:20Z",
            "diff_hunk": "@@ -2450,3 +2451,185 @@ void nvim_del_user_command(String name, Error *err)\n {\n   nvim_buf_del_user_command(-1, name, err);\n }\n+\n+/// Parse command line.\n+///\n+/// Doesn't check the validity of command arguments.\n+///\n+/// @param str       Command line string to parse. Cannot contain \"\\n\".\n+/// @param opts      Optional parameters. Reserved for future use.\n+/// @param[out] err  Error details, if any.\n+/// @return Dictionary containing command information, with these keys:\n+///         - cmd: (string) Command name.\n+///         - line1: (number) Starting line of command range.\n+///         - line2: (number) Final line of command range.\n+///         - force: (boolean) Whether command contains a bang.\n+///         - args: (array) Command arguments.\n+///         - addr: (string) Value of |:command-addr|. Uses short name.\n+///         - nargs: (string) Value of |:command-nargs|.\n+///         - nextcmd: (string) Next command if there are multiple commands separated by a |:bar|.\n+///                             Empty if there isn't a next command.\n+///         - magic: (array) Which characters have special meaning inside the command arguments.\n+///                          Possible values inside the array are:\n+///             - '%': '%' and '#' get expanded by the command.\n+///             - '|': '|' may get treated specially by the command depending on the command and\n+///                    where it's used. '\"' is treated as the start of a quote.\n+///         - mods: (dictionary) |:command-modifiers|.\n+///             - silent: (boolean) |:silent|.\n+///             - emsg_silent: (boolean) |:silent!|.\n+///             - sandbox: (boolean) |:sandbox|.\n+///             - noautocmd: (boolean) |:noautocmd|.\n+///             - browse: (boolean) |:browse|.\n+///             - confirm: (boolean) |:confirm|.\n+///             - hide: (boolean) |:hide|.\n+///             - keepalt: (boolean) |:keepalt|.\n+///             - keepjumps: (boolean) |:keepjumps|.\n+///             - keepmarks: (boolean) |:keepmarks|.\n+///             - keeppatterns: (boolean) |:keeppatterns|.\n+///             - lockmarks: (boolean) |:lockmarks|.\n+///             - noswapfile: (boolean) |:noswapfile|.\n+///             - tab: (integer) |:tab|.\n+///             - verbose: (integer) |:verbose|.\n+Dictionary nvim_parse_cmd(String str, Dictionary opts, Error *err)\n+  FUNC_API_SINCE(10) FUNC_API_FAST\n+{\n+  Dictionary result = ARRAY_DICT_INIT;\n+\n+  if (opts.size > 0) {\n+    api_set_error(err, kErrorTypeValidation, \"opts dict isn't empty\");\n+    return result;\n+  }\n+\n+  // Parse command line\n+  exarg_T ea;\n+  char nargs[2];\n+  char addr[5];\n+  cmd_parse_info_T cmdinfo;\n+  char_u *cmdline = vim_strsave((char_u *)str.data);\n+\n+  if (!parse_cmdline(cmdline, &ea, &cmdinfo)) {\n+    api_set_error(err, kErrorTypeException, \"Error while parsing command line\");\n+    goto end;\n+  }\n+\n+  // Parse arguments\n+  Array args = ARRAY_DICT_INIT;\n+  size_t length = STRLEN(ea.arg);\n+  size_t end = 0;\n+  size_t len = 0;\n+  int i = 1;\n+  char *buf = xcalloc(length, sizeof(char));\n+  bool done = false;\n+\n+  while (!done) {\n+    done = uc_split_args_iter(ea.arg, length, &end, buf, &len);\n+    if (len > 0) {\n+      ADD(args, STRING_OBJ(cstrn_to_string(buf, len)));\n+      i++;\n+    }\n+  }\n+\n+  if (ea.cmdidx == CMD_USER) {\n+    PUT(result, \"cmd\", CSTR_TO_OBJ((char *)USER_CMD(ea.useridx)->uc_name));\n+  } else if (ea.cmdidx == CMD_USER_BUF) {\n+    PUT(result, \"cmd\", CSTR_TO_OBJ((char *)USER_CMD_GA(&curbuf->b_ucmds, ea.useridx)->uc_name));\n+  } else {\n+    PUT(result, \"cmd\", CSTR_TO_OBJ((char *)get_command_name(NULL, ea.cmdidx)));\n+  }\n+  PUT(result, \"line1\", INTEGER_OBJ(ea.line1));\n+  PUT(result, \"line2\", INTEGER_OBJ(ea.line2));\n+  PUT(result, \"force\", BOOLEAN_OBJ(ea.forceit));\n+  PUT(result, \"args\", ARRAY_OBJ(args));\n+\n+  if (ea.argt & EX_EXTRA) {\n+    if (ea.argt & EX_NOSPC) {\n+      if (ea.argt & EX_NEEDARG) {\n+        nargs[0] = '1';\n+      } else {\n+        nargs[0] = '?';\n+      }\n+    } else if (ea.argt & EX_NEEDARG) {\n+      nargs[0] = '+';\n+    } else {\n+      nargs[0] = '*';\n+    }\n+  } else {\n+    nargs[0] = '0';\n+  }\n+  nargs[1] = '\\0';\n+  PUT(result, \"nargs\", CSTR_TO_OBJ(nargs));\n+\n+  switch (ea.addr_type) {\n+  case ADDR_LINES:\n+    STRCPY(addr, \"line\");\n+    break;\n+  case ADDR_ARGUMENTS:\n+    STRCPY(addr, \"arg\");\n+    break;\n+  case ADDR_BUFFERS:\n+    STRCPY(addr, \"buf\");\n+    break;\n+  case ADDR_LOADED_BUFFERS:\n+    STRCPY(addr, \"load\");\n+    break;\n+  case ADDR_WINDOWS:\n+    STRCPY(addr, \"win\");\n+    break;\n+  case ADDR_TABS:\n+    STRCPY(addr, \"tab\");\n+    break;\n+  case ADDR_QUICKFIX:\n+    STRCPY(addr, \"qf\");\n+    break;\n+  case ADDR_NONE:\n+    STRCPY(addr, \"none\");\n+    break;\n+  default:\n+    STRCPY(addr, \"?\");\n+    break;\n+  }\n+  PUT(result, \"addr\", CSTR_TO_OBJ(addr));\n+  PUT(result, \"nextcmd\", CSTR_TO_OBJ((char *)ea.nextcmd));\n+\n+  Dictionary mods = ARRAY_DICT_INIT;\n+  PUT(mods, \"silent\", BOOLEAN_OBJ(cmdinfo.silent));\n+  PUT(mods, \"emsg_silent\", BOOLEAN_OBJ(cmdinfo.emsg_silent));\n+  PUT(mods, \"sandbox\", BOOLEAN_OBJ(cmdinfo.sandbox));\n+  PUT(mods, \"noautocmd\", BOOLEAN_OBJ(cmdinfo.noautocmd));\n+  PUT(mods, \"tab\", INTEGER_OBJ(cmdmod.tab));\n+  PUT(mods, \"verbose\", INTEGER_OBJ(cmdinfo.verbose));\n+  PUT(mods, \"browse\", BOOLEAN_OBJ(cmdmod.browse));\n+  PUT(mods, \"confirm\", BOOLEAN_OBJ(cmdmod.confirm));\n+  PUT(mods, \"hide\", BOOLEAN_OBJ(cmdmod.hide));\n+  PUT(mods, \"keepalt\", BOOLEAN_OBJ(cmdmod.keepalt));\n+  PUT(mods, \"keepjumps\", BOOLEAN_OBJ(cmdmod.keepjumps));\n+  PUT(mods, \"keepmarks\", BOOLEAN_OBJ(cmdmod.keepmarks));\n+  PUT(mods, \"keeppatterns\", BOOLEAN_OBJ(cmdmod.keeppatterns));\n+  PUT(mods, \"lockmarks\", BOOLEAN_OBJ(cmdmod.lockmarks));\n+  PUT(mods, \"noswapfile\", BOOLEAN_OBJ(cmdmod.noswapfile));\n+\n+  Dictionary splitmods = ARRAY_DICT_INIT;\n+  PUT(splitmods, \"vertical\", BOOLEAN_OBJ(cmdmod.split & WSP_VERT));\n+  PUT(splitmods, \"aboveleft\", BOOLEAN_OBJ(cmdmod.split & WSP_ABOVE));\n+  PUT(splitmods, \"belowright\", BOOLEAN_OBJ(cmdmod.split & WSP_BELOW));\n+  PUT(splitmods, \"topleft\", BOOLEAN_OBJ(cmdmod.split & WSP_TOP));\n+  PUT(splitmods, \"botright\", BOOLEAN_OBJ(cmdmod.split & WSP_BOT));",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r862332795",
            "id": 862332795,
            "in_reply_to_id": 862015763,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zZid7",
            "original_commit_id": "827e854d7f8cc6c0e58cef23e6c59f85bef3f31c",
            "original_line": 2616,
            "original_position": 174,
            "original_start_line": 2613,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 958472121,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862332795/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-04-30T09:00:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862332795",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r862335626"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/862335626"
                }
            },
            "author_association": "MEMBER",
            "body": "isn't this more like a set? so would rather use a dict than array here so you easily could check if a char is magic or not.",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-30T09:33:30Z",
            "diff_hunk": "@@ -2450,3 +2451,201 @@ void nvim_del_user_command(String name, Error *err)\n {\n   nvim_buf_del_user_command(-1, name, err);\n }\n+\n+/// Parse command line.\n+///\n+/// Doesn't check the validity of command arguments.\n+///\n+/// @param str       Command line string to parse. Cannot contain \"\\n\".\n+/// @param opts      Optional parameters. Reserved for future use.\n+/// @param[out] err  Error details, if any.\n+/// @return Dictionary containing command information, with these keys:\n+///         - cmd: (string) Command name.\n+///         - line1: (number) Starting line of command range. Only applicable if command can take a\n+///                  range.\n+///         - line2: (number) Final line of command range. Only applicable if command can take a\n+///                  range.\n+///         - bang: (boolean) Whether command contains a bang (!) modifier.\n+///         - args: (array) Command arguments.\n+///         - addr: (string) Value of |:command-addr|. Uses short name.\n+///         - nargs: (string) Value of |:command-nargs|.\n+///         - nextcmd: (string) Next command if there are multiple commands separated by a |:bar|.\n+///                             Empty if there isn't a next command.\n+///         - magic: (array) Which characters have special meaning inside the command arguments.",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r862335626",
            "id": 862335626,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zZjKK",
            "original_commit_id": "0a7d8ff1f1495bde24c997d197b728c57e791e24",
            "original_line": 2474,
            "original_position": 32,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 958474335,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862335626/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-30T09:33:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862335626",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r862336571"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/862336571"
                }
            },
            "author_association": "MEMBER",
            "body": "True, that's probably better",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-30T09:44:22Z",
            "diff_hunk": "@@ -2450,3 +2451,201 @@ void nvim_del_user_command(String name, Error *err)\n {\n   nvim_buf_del_user_command(-1, name, err);\n }\n+\n+/// Parse command line.\n+///\n+/// Doesn't check the validity of command arguments.\n+///\n+/// @param str       Command line string to parse. Cannot contain \"\\n\".\n+/// @param opts      Optional parameters. Reserved for future use.\n+/// @param[out] err  Error details, if any.\n+/// @return Dictionary containing command information, with these keys:\n+///         - cmd: (string) Command name.\n+///         - line1: (number) Starting line of command range. Only applicable if command can take a\n+///                  range.\n+///         - line2: (number) Final line of command range. Only applicable if command can take a\n+///                  range.\n+///         - bang: (boolean) Whether command contains a bang (!) modifier.\n+///         - args: (array) Command arguments.\n+///         - addr: (string) Value of |:command-addr|. Uses short name.\n+///         - nargs: (string) Value of |:command-nargs|.\n+///         - nextcmd: (string) Next command if there are multiple commands separated by a |:bar|.\n+///                             Empty if there isn't a next command.\n+///         - magic: (array) Which characters have special meaning inside the command arguments.",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r862336571",
            "id": 862336571,
            "in_reply_to_id": 862335626,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zZjY7",
            "original_commit_id": "0a7d8ff1f1495bde24c997d197b728c57e791e24",
            "original_line": 2474,
            "original_position": 32,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 958474981,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862336571/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-30T09:44:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862336571",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r862359627"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/862359627"
                }
            },
            "author_association": "MEMBER",
            "body": "Alright, fixed it",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-30T14:09:24Z",
            "diff_hunk": "@@ -2450,3 +2451,185 @@ void nvim_del_user_command(String name, Error *err)\n {\n   nvim_buf_del_user_command(-1, name, err);\n }\n+\n+/// Parse command line.\n+///\n+/// Doesn't check the validity of command arguments.\n+///\n+/// @param str       Command line string to parse. Cannot contain \"\\n\".\n+/// @param opts      Optional parameters. Reserved for future use.\n+/// @param[out] err  Error details, if any.\n+/// @return Dictionary containing command information, with these keys:\n+///         - cmd: (string) Command name.\n+///         - line1: (number) Starting line of command range.\n+///         - line2: (number) Final line of command range.\n+///         - force: (boolean) Whether command contains a bang.\n+///         - args: (array) Command arguments.\n+///         - addr: (string) Value of |:command-addr|. Uses short name.\n+///         - nargs: (string) Value of |:command-nargs|.\n+///         - nextcmd: (string) Next command if there are multiple commands separated by a |:bar|.\n+///                             Empty if there isn't a next command.\n+///         - magic: (array) Which characters have special meaning inside the command arguments.\n+///                          Possible values inside the array are:\n+///             - '%': '%' and '#' get expanded by the command.\n+///             - '|': '|' may get treated specially by the command depending on the command and\n+///                    where it's used. '\"' is treated as the start of a quote.\n+///         - mods: (dictionary) |:command-modifiers|.\n+///             - silent: (boolean) |:silent|.\n+///             - emsg_silent: (boolean) |:silent!|.\n+///             - sandbox: (boolean) |:sandbox|.\n+///             - noautocmd: (boolean) |:noautocmd|.\n+///             - browse: (boolean) |:browse|.\n+///             - confirm: (boolean) |:confirm|.\n+///             - hide: (boolean) |:hide|.\n+///             - keepalt: (boolean) |:keepalt|.\n+///             - keepjumps: (boolean) |:keepjumps|.\n+///             - keepmarks: (boolean) |:keepmarks|.\n+///             - keeppatterns: (boolean) |:keeppatterns|.\n+///             - lockmarks: (boolean) |:lockmarks|.\n+///             - noswapfile: (boolean) |:noswapfile|.\n+///             - tab: (integer) |:tab|.\n+///             - verbose: (integer) |:verbose|.\n+Dictionary nvim_parse_cmd(String str, Dictionary opts, Error *err)\n+  FUNC_API_SINCE(10) FUNC_API_FAST\n+{\n+  Dictionary result = ARRAY_DICT_INIT;\n+\n+  if (opts.size > 0) {\n+    api_set_error(err, kErrorTypeValidation, \"opts dict isn't empty\");\n+    return result;\n+  }\n+\n+  // Parse command line\n+  exarg_T ea;\n+  char nargs[2];\n+  char addr[5];\n+  cmd_parse_info_T cmdinfo;\n+  char_u *cmdline = vim_strsave((char_u *)str.data);\n+\n+  if (!parse_cmdline(cmdline, &ea, &cmdinfo)) {\n+    api_set_error(err, kErrorTypeException, \"Error while parsing command line\");\n+    goto end;\n+  }\n+\n+  // Parse arguments\n+  Array args = ARRAY_DICT_INIT;\n+  size_t length = STRLEN(ea.arg);\n+  size_t end = 0;\n+  size_t len = 0;\n+  int i = 1;\n+  char *buf = xcalloc(length, sizeof(char));\n+  bool done = false;\n+\n+  while (!done) {\n+    done = uc_split_args_iter(ea.arg, length, &end, buf, &len);\n+    if (len > 0) {\n+      ADD(args, STRING_OBJ(cstrn_to_string(buf, len)));\n+      i++;\n+    }\n+  }\n+\n+  if (ea.cmdidx == CMD_USER) {\n+    PUT(result, \"cmd\", CSTR_TO_OBJ((char *)USER_CMD(ea.useridx)->uc_name));\n+  } else if (ea.cmdidx == CMD_USER_BUF) {\n+    PUT(result, \"cmd\", CSTR_TO_OBJ((char *)USER_CMD_GA(&curbuf->b_ucmds, ea.useridx)->uc_name));\n+  } else {\n+    PUT(result, \"cmd\", CSTR_TO_OBJ((char *)get_command_name(NULL, ea.cmdidx)));\n+  }\n+  PUT(result, \"line1\", INTEGER_OBJ(ea.line1));\n+  PUT(result, \"line2\", INTEGER_OBJ(ea.line2));\n+  PUT(result, \"force\", BOOLEAN_OBJ(ea.forceit));\n+  PUT(result, \"args\", ARRAY_OBJ(args));\n+\n+  if (ea.argt & EX_EXTRA) {\n+    if (ea.argt & EX_NOSPC) {\n+      if (ea.argt & EX_NEEDARG) {\n+        nargs[0] = '1';\n+      } else {\n+        nargs[0] = '?';\n+      }\n+    } else if (ea.argt & EX_NEEDARG) {\n+      nargs[0] = '+';\n+    } else {\n+      nargs[0] = '*';\n+    }\n+  } else {\n+    nargs[0] = '0';\n+  }\n+  nargs[1] = '\\0';\n+  PUT(result, \"nargs\", CSTR_TO_OBJ(nargs));\n+\n+  switch (ea.addr_type) {\n+  case ADDR_LINES:\n+    STRCPY(addr, \"line\");\n+    break;\n+  case ADDR_ARGUMENTS:\n+    STRCPY(addr, \"arg\");\n+    break;\n+  case ADDR_BUFFERS:\n+    STRCPY(addr, \"buf\");\n+    break;\n+  case ADDR_LOADED_BUFFERS:\n+    STRCPY(addr, \"load\");\n+    break;\n+  case ADDR_WINDOWS:\n+    STRCPY(addr, \"win\");\n+    break;\n+  case ADDR_TABS:\n+    STRCPY(addr, \"tab\");\n+    break;\n+  case ADDR_QUICKFIX:\n+    STRCPY(addr, \"qf\");\n+    break;\n+  case ADDR_NONE:\n+    STRCPY(addr, \"none\");\n+    break;\n+  default:\n+    STRCPY(addr, \"?\");\n+    break;\n+  }\n+  PUT(result, \"addr\", CSTR_TO_OBJ(addr));\n+  PUT(result, \"nextcmd\", CSTR_TO_OBJ((char *)ea.nextcmd));\n+\n+  Dictionary mods = ARRAY_DICT_INIT;\n+  PUT(mods, \"silent\", BOOLEAN_OBJ(cmdinfo.silent));\n+  PUT(mods, \"emsg_silent\", BOOLEAN_OBJ(cmdinfo.emsg_silent));\n+  PUT(mods, \"sandbox\", BOOLEAN_OBJ(cmdinfo.sandbox));\n+  PUT(mods, \"noautocmd\", BOOLEAN_OBJ(cmdinfo.noautocmd));\n+  PUT(mods, \"tab\", INTEGER_OBJ(cmdmod.tab));\n+  PUT(mods, \"verbose\", INTEGER_OBJ(cmdinfo.verbose));\n+  PUT(mods, \"browse\", BOOLEAN_OBJ(cmdmod.browse));\n+  PUT(mods, \"confirm\", BOOLEAN_OBJ(cmdmod.confirm));\n+  PUT(mods, \"hide\", BOOLEAN_OBJ(cmdmod.hide));\n+  PUT(mods, \"keepalt\", BOOLEAN_OBJ(cmdmod.keepalt));\n+  PUT(mods, \"keepjumps\", BOOLEAN_OBJ(cmdmod.keepjumps));\n+  PUT(mods, \"keepmarks\", BOOLEAN_OBJ(cmdmod.keepmarks));\n+  PUT(mods, \"keeppatterns\", BOOLEAN_OBJ(cmdmod.keeppatterns));\n+  PUT(mods, \"lockmarks\", BOOLEAN_OBJ(cmdmod.lockmarks));\n+  PUT(mods, \"noswapfile\", BOOLEAN_OBJ(cmdmod.noswapfile));\n+\n+  Dictionary splitmods = ARRAY_DICT_INIT;\n+  PUT(splitmods, \"vertical\", BOOLEAN_OBJ(cmdmod.split & WSP_VERT));\n+  PUT(splitmods, \"aboveleft\", BOOLEAN_OBJ(cmdmod.split & WSP_ABOVE));\n+  PUT(splitmods, \"belowright\", BOOLEAN_OBJ(cmdmod.split & WSP_BELOW));\n+  PUT(splitmods, \"topleft\", BOOLEAN_OBJ(cmdmod.split & WSP_TOP));\n+  PUT(splitmods, \"botright\", BOOLEAN_OBJ(cmdmod.split & WSP_BOT));",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r862359627",
            "id": 862359627,
            "in_reply_to_id": 862015763,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zZpBL",
            "original_commit_id": "827e854d7f8cc6c0e58cef23e6c59f85bef3f31c",
            "original_line": 2616,
            "original_position": 174,
            "original_start_line": 2613,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 958492336,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862359627/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-04-30T14:09:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862359627",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r862361610"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/862361610"
                }
            },
            "author_association": "MEMBER",
            "body": "is this because `parse_cmdline` might modify the contents of the string?",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-30T14:28:31Z",
            "diff_hunk": "@@ -2450,3 +2451,203 @@ void nvim_del_user_command(String name, Error *err)\n {\n   nvim_buf_del_user_command(-1, name, err);\n }\n+\n+/// Parse command line.\n+///\n+/// Doesn't check the validity of command arguments.\n+///\n+/// @param str       Command line string to parse. Cannot contain \"\\n\".\n+/// @param opts      Optional parameters. Reserved for future use.\n+/// @param[out] err  Error details, if any.\n+/// @return Dictionary containing command information, with these keys:\n+///         - cmd: (string) Command name.\n+///         - line1: (number) Starting line of command range. Only applicable if command can take a\n+///                  range.\n+///         - line2: (number) Final line of command range. Only applicable if command can take a\n+///                  range.\n+///         - bang: (boolean) Whether command contains a bang (!) modifier.\n+///         - args: (array) Command arguments.\n+///         - addr: (string) Value of |:command-addr|. Uses short name.\n+///         - nargs: (string) Value of |:command-nargs|.\n+///         - nextcmd: (string) Next command if there are multiple commands separated by a |:bar|.\n+///                             Empty if there isn't a next command.\n+///         - magic: (dictionary) Which characters have special meaning in the command arguments.\n+///             - file: (boolean) The command expands filenames. Which means characters such as \"%\",\n+///                               \"#\" and wildcards are expanded.\n+///             - bar: The \"|\" character is treated as a command separator and the double quote\n+///                    character (\") is treated as the start of a comment.\n+///         - mods: (dictionary) |:command-modifiers|.\n+///             - silent: (boolean) |:silent|.\n+///             - emsg_silent: (boolean) |:silent!|.\n+///             - sandbox: (boolean) |:sandbox|.\n+///             - noautocmd: (boolean) |:noautocmd|.\n+///             - browse: (boolean) |:browse|.\n+///             - confirm: (boolean) |:confirm|.\n+///             - hide: (boolean) |:hide|.\n+///             - keepalt: (boolean) |:keepalt|.\n+///             - keepjumps: (boolean) |:keepjumps|.\n+///             - keepmarks: (boolean) |:keepmarks|.\n+///             - keeppatterns: (boolean) |:keeppatterns|.\n+///             - lockmarks: (boolean) |:lockmarks|.\n+///             - noswapfile: (boolean) |:noswapfile|.\n+///             - tab: (integer) |:tab|.\n+///             - verbose: (integer) |:verbose|.\n+///             - vertical: (boolean) |:vertical|.\n+///             - split: (string) Split modifier string, is an empty string when there's no split\n+///                               modifier. If there is a split modifier it can be one of:\n+///               - \"aboveleft\": |:aboveleft|.\n+///               - \"belowright\": |:belowright|.\n+///               - \"topleft\": |:topleft|.\n+///               - \"botright\": |:botright|.\n+Dictionary nvim_parse_cmd(String str, Dictionary opts, Error *err)\n+  FUNC_API_SINCE(10) FUNC_API_FAST\n+{\n+  Dictionary result = ARRAY_DICT_INIT;\n+\n+  if (opts.size > 0) {\n+    api_set_error(err, kErrorTypeValidation, \"opts dict isn't empty\");\n+    return result;\n+  }\n+\n+  // Parse command line\n+  exarg_T ea;\n+  char nargs[2];\n+  const char *addr;\n+  CmdParseInfo cmdinfo;\n+  char_u *cmdline = vim_strsave((char_u *)str.data);",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r862361610",
            "id": 862361610,
            "line": 2525,
            "node_id": "PRRC_kwDOAPphoM4zZpgK",
            "original_commit_id": "13299b093e0f8bffc3f2c30ce03004c2e6b5e4b8",
            "original_line": 2525,
            "original_position": 75,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": 73,
            "pull_request_review_id": 958493701,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862361610/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-30T14:28:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862361610",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r862361638"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/862361638"
                }
            },
            "author_association": "MEMBER",
            "body": "> is this because `parse_cmdline` might modify the contents of the string?\r\n\r\nyes",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-30T14:29:05Z",
            "diff_hunk": "@@ -2450,3 +2451,203 @@ void nvim_del_user_command(String name, Error *err)\n {\n   nvim_buf_del_user_command(-1, name, err);\n }\n+\n+/// Parse command line.\n+///\n+/// Doesn't check the validity of command arguments.\n+///\n+/// @param str       Command line string to parse. Cannot contain \"\\n\".\n+/// @param opts      Optional parameters. Reserved for future use.\n+/// @param[out] err  Error details, if any.\n+/// @return Dictionary containing command information, with these keys:\n+///         - cmd: (string) Command name.\n+///         - line1: (number) Starting line of command range. Only applicable if command can take a\n+///                  range.\n+///         - line2: (number) Final line of command range. Only applicable if command can take a\n+///                  range.\n+///         - bang: (boolean) Whether command contains a bang (!) modifier.\n+///         - args: (array) Command arguments.\n+///         - addr: (string) Value of |:command-addr|. Uses short name.\n+///         - nargs: (string) Value of |:command-nargs|.\n+///         - nextcmd: (string) Next command if there are multiple commands separated by a |:bar|.\n+///                             Empty if there isn't a next command.\n+///         - magic: (dictionary) Which characters have special meaning in the command arguments.\n+///             - file: (boolean) The command expands filenames. Which means characters such as \"%\",\n+///                               \"#\" and wildcards are expanded.\n+///             - bar: The \"|\" character is treated as a command separator and the double quote\n+///                    character (\") is treated as the start of a comment.\n+///         - mods: (dictionary) |:command-modifiers|.\n+///             - silent: (boolean) |:silent|.\n+///             - emsg_silent: (boolean) |:silent!|.\n+///             - sandbox: (boolean) |:sandbox|.\n+///             - noautocmd: (boolean) |:noautocmd|.\n+///             - browse: (boolean) |:browse|.\n+///             - confirm: (boolean) |:confirm|.\n+///             - hide: (boolean) |:hide|.\n+///             - keepalt: (boolean) |:keepalt|.\n+///             - keepjumps: (boolean) |:keepjumps|.\n+///             - keepmarks: (boolean) |:keepmarks|.\n+///             - keeppatterns: (boolean) |:keeppatterns|.\n+///             - lockmarks: (boolean) |:lockmarks|.\n+///             - noswapfile: (boolean) |:noswapfile|.\n+///             - tab: (integer) |:tab|.\n+///             - verbose: (integer) |:verbose|.\n+///             - vertical: (boolean) |:vertical|.\n+///             - split: (string) Split modifier string, is an empty string when there's no split\n+///                               modifier. If there is a split modifier it can be one of:\n+///               - \"aboveleft\": |:aboveleft|.\n+///               - \"belowright\": |:belowright|.\n+///               - \"topleft\": |:topleft|.\n+///               - \"botright\": |:botright|.\n+Dictionary nvim_parse_cmd(String str, Dictionary opts, Error *err)\n+  FUNC_API_SINCE(10) FUNC_API_FAST\n+{\n+  Dictionary result = ARRAY_DICT_INIT;\n+\n+  if (opts.size > 0) {\n+    api_set_error(err, kErrorTypeValidation, \"opts dict isn't empty\");\n+    return result;\n+  }\n+\n+  // Parse command line\n+  exarg_T ea;\n+  char nargs[2];\n+  const char *addr;\n+  CmdParseInfo cmdinfo;\n+  char_u *cmdline = vim_strsave((char_u *)str.data);",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r862361638",
            "id": 862361638,
            "in_reply_to_id": 862361610,
            "line": 2525,
            "node_id": "PRRC_kwDOAPphoM4zZpgm",
            "original_commit_id": "13299b093e0f8bffc3f2c30ce03004c2e6b5e4b8",
            "original_line": 2525,
            "original_position": 75,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": 73,
            "pull_request_review_id": 958493742,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862361638/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-30T14:29:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862361638",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r862361700"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/862361700"
                }
            },
            "author_association": "MEMBER",
            "body": "👍  If we find exceptions where wildcards are literal but `%`/`#` are magic, we can add variants later.",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-30T14:29:35Z",
            "diff_hunk": "@@ -2450,3 +2451,203 @@ void nvim_del_user_command(String name, Error *err)\n {\n   nvim_buf_del_user_command(-1, name, err);\n }\n+\n+/// Parse command line.\n+///\n+/// Doesn't check the validity of command arguments.\n+///\n+/// @param str       Command line string to parse. Cannot contain \"\\n\".\n+/// @param opts      Optional parameters. Reserved for future use.\n+/// @param[out] err  Error details, if any.\n+/// @return Dictionary containing command information, with these keys:\n+///         - cmd: (string) Command name.\n+///         - line1: (number) Starting line of command range. Only applicable if command can take a\n+///                  range.\n+///         - line2: (number) Final line of command range. Only applicable if command can take a\n+///                  range.\n+///         - bang: (boolean) Whether command contains a bang (!) modifier.\n+///         - args: (array) Command arguments.\n+///         - addr: (string) Value of |:command-addr|. Uses short name.\n+///         - nargs: (string) Value of |:command-nargs|.\n+///         - nextcmd: (string) Next command if there are multiple commands separated by a |:bar|.\n+///                             Empty if there isn't a next command.\n+///         - magic: (dictionary) Which characters have special meaning in the command arguments.\n+///             - file: (boolean) The command expands filenames. Which means characters such as \"%\",\n+///                               \"#\" and wildcards are expanded.",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r862361700",
            "id": 862361700,
            "line": 2486,
            "node_id": "PRRC_kwDOAPphoM4zZphk",
            "original_commit_id": "13299b093e0f8bffc3f2c30ce03004c2e6b5e4b8",
            "original_line": 2486,
            "original_position": 34,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": 34,
            "pull_request_review_id": 958493803,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862361700/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-30T14:29:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862361700",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r862361768"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/862361768"
                }
            },
            "author_association": "MEMBER",
            "body": "Yeah",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-30T14:30:17Z",
            "diff_hunk": "@@ -2450,3 +2451,203 @@ void nvim_del_user_command(String name, Error *err)\n {\n   nvim_buf_del_user_command(-1, name, err);\n }\n+\n+/// Parse command line.\n+///\n+/// Doesn't check the validity of command arguments.\n+///\n+/// @param str       Command line string to parse. Cannot contain \"\\n\".\n+/// @param opts      Optional parameters. Reserved for future use.\n+/// @param[out] err  Error details, if any.\n+/// @return Dictionary containing command information, with these keys:\n+///         - cmd: (string) Command name.\n+///         - line1: (number) Starting line of command range. Only applicable if command can take a\n+///                  range.\n+///         - line2: (number) Final line of command range. Only applicable if command can take a\n+///                  range.\n+///         - bang: (boolean) Whether command contains a bang (!) modifier.\n+///         - args: (array) Command arguments.\n+///         - addr: (string) Value of |:command-addr|. Uses short name.\n+///         - nargs: (string) Value of |:command-nargs|.\n+///         - nextcmd: (string) Next command if there are multiple commands separated by a |:bar|.\n+///                             Empty if there isn't a next command.\n+///         - magic: (dictionary) Which characters have special meaning in the command arguments.\n+///             - file: (boolean) The command expands filenames. Which means characters such as \"%\",\n+///                               \"#\" and wildcards are expanded.",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r862361768",
            "id": 862361768,
            "in_reply_to_id": 862361700,
            "line": 2486,
            "node_id": "PRRC_kwDOAPphoM4zZpio",
            "original_commit_id": "13299b093e0f8bffc3f2c30ce03004c2e6b5e4b8",
            "original_line": 2486,
            "original_position": 34,
            "original_start_line": null,
            "path": "src/nvim/api/vim.c",
            "position": 34,
            "pull_request_review_id": 958493847,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862361768/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-04-30T14:30:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862361768",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/18231#discussion_r862361886"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/18231"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/862361886"
                }
            },
            "author_association": "MEMBER",
            "body": "these two can be moved closer to first usage.",
            "commit_id": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
            "created_at": "2022-04-30T14:31:29Z",
            "diff_hunk": "@@ -2450,3 +2451,203 @@ void nvim_del_user_command(String name, Error *err)\n {\n   nvim_buf_del_user_command(-1, name, err);\n }\n+\n+/// Parse command line.\n+///\n+/// Doesn't check the validity of command arguments.\n+///\n+/// @param str       Command line string to parse. Cannot contain \"\\n\".\n+/// @param opts      Optional parameters. Reserved for future use.\n+/// @param[out] err  Error details, if any.\n+/// @return Dictionary containing command information, with these keys:\n+///         - cmd: (string) Command name.\n+///         - line1: (number) Starting line of command range. Only applicable if command can take a\n+///                  range.\n+///         - line2: (number) Final line of command range. Only applicable if command can take a\n+///                  range.\n+///         - bang: (boolean) Whether command contains a bang (!) modifier.\n+///         - args: (array) Command arguments.\n+///         - addr: (string) Value of |:command-addr|. Uses short name.\n+///         - nargs: (string) Value of |:command-nargs|.\n+///         - nextcmd: (string) Next command if there are multiple commands separated by a |:bar|.\n+///                             Empty if there isn't a next command.\n+///         - magic: (dictionary) Which characters have special meaning in the command arguments.\n+///             - file: (boolean) The command expands filenames. Which means characters such as \"%\",\n+///                               \"#\" and wildcards are expanded.\n+///             - bar: The \"|\" character is treated as a command separator and the double quote\n+///                    character (\") is treated as the start of a comment.\n+///         - mods: (dictionary) |:command-modifiers|.\n+///             - silent: (boolean) |:silent|.\n+///             - emsg_silent: (boolean) |:silent!|.\n+///             - sandbox: (boolean) |:sandbox|.\n+///             - noautocmd: (boolean) |:noautocmd|.\n+///             - browse: (boolean) |:browse|.\n+///             - confirm: (boolean) |:confirm|.\n+///             - hide: (boolean) |:hide|.\n+///             - keepalt: (boolean) |:keepalt|.\n+///             - keepjumps: (boolean) |:keepjumps|.\n+///             - keepmarks: (boolean) |:keepmarks|.\n+///             - keeppatterns: (boolean) |:keeppatterns|.\n+///             - lockmarks: (boolean) |:lockmarks|.\n+///             - noswapfile: (boolean) |:noswapfile|.\n+///             - tab: (integer) |:tab|.\n+///             - verbose: (integer) |:verbose|.\n+///             - vertical: (boolean) |:vertical|.\n+///             - split: (string) Split modifier string, is an empty string when there's no split\n+///                               modifier. If there is a split modifier it can be one of:\n+///               - \"aboveleft\": |:aboveleft|.\n+///               - \"belowright\": |:belowright|.\n+///               - \"topleft\": |:topleft|.\n+///               - \"botright\": |:botright|.\n+Dictionary nvim_parse_cmd(String str, Dictionary opts, Error *err)\n+  FUNC_API_SINCE(10) FUNC_API_FAST\n+{\n+  Dictionary result = ARRAY_DICT_INIT;\n+\n+  if (opts.size > 0) {\n+    api_set_error(err, kErrorTypeValidation, \"opts dict isn't empty\");\n+    return result;\n+  }\n+\n+  // Parse command line\n+  exarg_T ea;\n+  char nargs[2];\n+  const char *addr;",
            "html_url": "https://github.com/neovim/neovim/pull/18231#discussion_r862361886",
            "id": 862361886,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4zZpke",
            "original_commit_id": "13299b093e0f8bffc3f2c30ce03004c2e6b5e4b8",
            "original_line": 2515,
            "original_position": 73,
            "original_start_line": 2514,
            "path": "src/nvim/api/vim.c",
            "position": null,
            "pull_request_review_id": 958493937,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862361886/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-04-30T14:31:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/862361886",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "> I'm really excited about this because it removes a lot of useless work related to adding functions that just wrap commands.\r\n> \r\n> Of course, commands _not related to editing_ are a (bad) legacy idea--they serve exactly zero purpose ever since FEAT_EVAL (not to mention Lua or RPC). But this at least \"stops the bleeding\": it unlocks all commands in a structured way.\r\n> \r\n> This won't be perfect at first but we should mark the API as \"WIP / use-at-your-own-risk\" so that we aren't stuck with the initial decisions.\r\n\r\nIn that case, should I rename the function to `nvim__parse_cmd` to emphasize it being WIP?",
            "created_at": "2022-04-23T17:35:26Z",
            "html_url": "https://github.com/neovim/neovim/pull/18231#issuecomment-1107540013",
            "id": 1107540013,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18231",
            "node_id": "IC_kwDOAPphoM5CA7gt",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1107540013/reactions"
            },
            "updated_at": "2022-04-23T19:21:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1107540013",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> In that case, should I rename the function to `nvim__parse_cmd` to emphasize it being WIP?\r\n\r\nI suppose yes. For 0.8 release we can decide if we want to introduce a new mechanism like `nvim --unstable-features`.",
            "created_at": "2022-04-23T17:41:49Z",
            "html_url": "https://github.com/neovim/neovim/pull/18231#issuecomment-1107541021",
            "id": 1107541021,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18231",
            "node_id": "IC_kwDOAPphoM5CA7wd",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1107541021/reactions"
            },
            "updated_at": "2022-04-23T17:41:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1107541021",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Which reminds me: there's quite a number of such functions in the docs already. \r\n1. Are they covered by the API contract as well?\r\n2. If not, is this documented somewhere?\r\n3. Should we graduate some of them for 0.8?",
            "created_at": "2022-04-23T17:46:54Z",
            "html_url": "https://github.com/neovim/neovim/pull/18231#issuecomment-1107541798",
            "id": 1107541798,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18231",
            "node_id": "IC_kwDOAPphoM5CA78m",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1107541798/reactions"
            },
            "updated_at": "2022-04-23T17:46:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1107541798",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Which reminds me: there's quite a number of such functions in the docs already.\r\n\r\nYou mean `nvim__foo` functions? Or can you give examples?\r\n \r\n> 1. Are they covered by the API contract as well?\r\n\r\n`nvim__foo` (double underscore) are explicitly _not_ covered by `:help api-contract`.\r\n\r\n> 2. If not, is this documented somewhere?\r\n\r\nHopefuly `:help api-contract` , else I'll fix that.\r\n\r\n> 3. Should we graduate some of them for 0.8?\r\n\r\nDon't know of any cases that need to be rushed. Can wait until someone owns that for a particular case.\r\n",
            "created_at": "2022-04-23T18:46:55Z",
            "html_url": "https://github.com/neovim/neovim/pull/18231#issuecomment-1107614267",
            "id": 1107614267,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18231",
            "node_id": "IC_kwDOAPphoM5CBNo7",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1107614267/reactions"
            },
            "updated_at": "2022-04-23T19:22:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1107614267",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > Which reminds me: there's quite a number of such functions in the docs already.\r\n> \r\n> You mean `nvim__foo` functions? Or can you give examples?\r\n\r\nYes, exactly.\r\n\r\n> > 1. Are they covered by the API contract as well?\r\n> \r\n> `nvim__foo` (double underscore) are explicitly _not_ covered by `:help api-contract`.\r\n> \r\n> > 2. If not, is this documented somewhere?\r\n> \r\n> Hopefuly `:help api-contract` , else I'll fix that.\r\n\r\n\r\nI didn't see it (hence my question), but I do tend to be blind.\r\n\r\n> > 3. Should we graduate some of them for 0.8?\r\n> \r\n> Don't know of any cases that need to be rushed. Can wait until someone owns that for a particular case.\r\n\r\n👍",
            "created_at": "2022-04-23T19:07:58Z",
            "html_url": "https://github.com/neovim/neovim/pull/18231#issuecomment-1107633272",
            "id": 1107633272,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18231",
            "node_id": "IC_kwDOAPphoM5CBSR4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1107633272/reactions"
            },
            "updated_at": "2022-04-23T19:07:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1107633272",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "In https://github.com/neovim/neovim/issues/14966#issuecomment-1107635693 I sketched an incomplete idea for `nvim_cmd()` which would build on this PR.\r\n\r\nI'm wondering if we actually need a separate \"parse\" function. Their signatures\r\n(and implementations) might share a lot of concepts. Merging them helps users\r\nby avoiding mostly-duplicate interfaces.\r\n\r\nDo we need `nvim_parse_cmd`, or could it be a flag on `nvim_cmd` ?",
            "created_at": "2022-04-23T19:46:57Z",
            "html_url": "https://github.com/neovim/neovim/pull/18231#issuecomment-1107638757",
            "id": 1107638757,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18231",
            "node_id": "IC_kwDOAPphoM5CBTnl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1107638757/reactions"
            },
            "updated_at": "2022-04-23T19:46:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1107638757",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "<strike>Currently the implementation has the following \"issues\" (though they may not even be issues depending on what we want):</strike>\r\n\r\n<strike>1. `nvim_parse_cmd` doesn't check whether the command even supports bang / range if it is given one, it just returns the values of them through `force`, `line1` and `line2`</strike>\r\n<strike>2. Commands separated by pipes don't work properly, so `e foo.txt | e bar.txt` gets treated like `e \"foo.txt | bar.txt\"`. This is not an issue for user commands since user commands capture everything anyway, but it is an issue for built-in commands.</strike>\r\n\r\nEDIT: I fixed both of these issues",
            "created_at": "2022-04-28T15:08:02Z",
            "html_url": "https://github.com/neovim/neovim/pull/18231#issuecomment-1112325758",
            "id": 1112325758,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18231",
            "node_id": "IC_kwDOAPphoM5CTL5-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1112325758/reactions"
            },
            "updated_at": "2022-04-28T19:29:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1112325758",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "It seems changing the quote to a double quote in the docs made the \"%\" character be interpreted literally and not need to be escaped, so I changed it to a single \"%\"",
            "created_at": "2022-04-30T06:47:33Z",
            "html_url": "https://github.com/neovim/neovim/pull/18231#issuecomment-1113934116",
            "id": 1113934116,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18231",
            "node_id": "IC_kwDOAPphoM5CZUkk",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1113934116/reactions"
            },
            "updated_at": "2022-04-30T06:47:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1113934116",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Alright I tidied up the code and removed some redundant parts. Tell me if I need to squash.",
            "created_at": "2022-04-30T07:04:54Z",
            "html_url": "https://github.com/neovim/neovim/pull/18231#issuecomment-1113936157",
            "id": 1113936157,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18231",
            "node_id": "IC_kwDOAPphoM5CZVEd",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1113936157/reactions"
            },
            "updated_at": "2022-04-30T09:10:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1113936157",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@famiu coverity warning:\r\n\r\n```\r\n*** CID 352571:  Memory - illegal accesses  (STRING_NULL)\r\n/src/nvim/api/vim.c: 2527 in nvim_parse_cmd()\r\n2521     \r\n2522       // Parse command line\r\n2523       exarg_T ea;\r\n2524       CmdParseInfo cmdinfo;\r\n2525       char_u *cmdline = vim_strsave((char_u *)str.data);\r\n2526     \r\n>>>     CID 352571:  Memory - illegal accesses  (STRING_NULL)\r\n>>>     Passing unterminated string \"cmdline\" to \"parse_cmdline\", which expects a null-terminated string.\r\n2527       if (!parse_cmdline(cmdline, &ea, &cmdinfo)) {\r\n2528         api_set_error(err, kErrorTypeException, \"Error while parsing command line\");\r\n2529         goto end;\r\n2530       }\r\n2531     \r\n2532       // Parse arguments\r\n```",
            "created_at": "2022-05-02T10:46:58Z",
            "html_url": "https://github.com/neovim/neovim/pull/18231#issuecomment-1114716879",
            "id": 1114716879,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18231",
            "node_id": "IC_kwDOAPphoM5CcTrP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1114716879/reactions"
            },
            "updated_at": "2022-05-02T10:46:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1114716879",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> @famiu coverity warning:\r\n> \r\n> ```\r\n> *** CID 352571:  Memory - illegal accesses  (STRING_NULL)\r\n> /src/nvim/api/vim.c: 2527 in nvim_parse_cmd()\r\n> 2521     \r\n> 2522       // Parse command line\r\n> 2523       exarg_T ea;\r\n> 2524       CmdParseInfo cmdinfo;\r\n> 2525       char_u *cmdline = vim_strsave((char_u *)str.data);\r\n> 2526     \r\n> >>>     CID 352571:  Memory - illegal accesses  (STRING_NULL)\r\n> >>>     Passing unterminated string \"cmdline\" to \"parse_cmdline\", which expects a null-terminated string.\r\n> 2527       if (!parse_cmdline(cmdline, &ea, &cmdinfo)) {\r\n> 2528         api_set_error(err, kErrorTypeException, \"Error while parsing command line\");\r\n> 2529         goto end;\r\n> 2530       }\r\n> 2531     \r\n> 2532       // Parse arguments\r\n> ```\r\n\r\nThat's very strange, are there cases where `vim_strsave` can return a non NULL-terminated string?",
            "created_at": "2022-05-02T14:52:41Z",
            "html_url": "https://github.com/neovim/neovim/pull/18231#issuecomment-1114994865",
            "id": 1114994865,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18231",
            "node_id": "IC_kwDOAPphoM5CdXix",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1114994865/reactions"
            },
            "updated_at": "2022-05-02T14:52:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1114994865",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "`String` isn't guaranteed to be NULL-terminated, I guess.",
            "created_at": "2022-05-02T15:01:27Z",
            "html_url": "https://github.com/neovim/neovim/pull/18231#issuecomment-1115003491",
            "id": 1115003491,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18231",
            "node_id": "IC_kwDOAPphoM5CdZpj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1115003491/reactions"
            },
            "updated_at": "2022-05-02T15:01:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1115003491",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> `String` isn't guaranteed to be NULL-terminated, I guess.\r\n\r\nThen I should use `vim_strnsave` in that case, I'll fix it in #18366 ",
            "created_at": "2022-05-02T15:23:28Z",
            "html_url": "https://github.com/neovim/neovim/pull/18231#issuecomment-1115030653",
            "id": 1115030653,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18231",
            "node_id": "IC_kwDOAPphoM5CdgR9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1115030653/reactions"
            },
            "updated_at": "2022-05-02T15:25:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1115030653",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Wait, I guess what actually causes the coverity warning is missing function attributes?",
            "created_at": "2022-05-02T23:26:19Z",
            "html_url": "https://github.com/neovim/neovim/pull/18231#issuecomment-1115463380",
            "id": 1115463380,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18231",
            "node_id": "IC_kwDOAPphoM5CfJ7U",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1115463380/reactions"
            },
            "updated_at": "2022-05-02T23:26:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1115463380",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I cannot find such a function attribute though.",
            "created_at": "2022-05-02T23:27:11Z",
            "html_url": "https://github.com/neovim/neovim/pull/18231#issuecomment-1115463820",
            "id": 1115463820,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18231",
            "node_id": "IC_kwDOAPphoM5CfKCM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1115463820/reactions"
            },
            "updated_at": "2022-05-02T23:27:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1115463820",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/18231/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/18231/commits",
    "created_at": "2022-04-23T04:23:48Z",
    "diff_url": "https://github.com/neovim/neovim/pull/18231.diff",
    "draft": false,
    "head": {
        "label": "famiu:feat/api/parse_cmdline",
        "ref": "feat/api/parse_cmdline",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/famiu/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/famiu/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/famiu/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/famiu/neovim/branches{/branch}",
            "clone_url": "https://github.com/famiu/neovim.git",
            "collaborators_url": "https://api.github.com/repos/famiu/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/famiu/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/famiu/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/famiu/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/famiu/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/famiu/neovim/contributors",
            "created_at": "2021-10-11T04:58:58Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/famiu/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/famiu/neovim/downloads",
            "events_url": "https://api.github.com/repos/famiu/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/famiu/neovim/forks",
            "full_name": "famiu/neovim",
            "git_commits_url": "https://api.github.com/repos/famiu/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/famiu/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/famiu/neovim/git/tags{/sha}",
            "git_url": "git://github.com/famiu/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/famiu/neovim/hooks",
            "html_url": "https://github.com/famiu/neovim",
            "id": 415783665,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/famiu/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/famiu/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/famiu/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/famiu/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/famiu/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/famiu/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/famiu/neovim/merges",
            "milestones_url": "https://api.github.com/repos/famiu/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOGMha8Q",
            "notifications_url": "https://api.github.com/repos/famiu/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/famiu/neovim/pulls{/number}",
            "pushed_at": "2023-09-10T06:28:11Z",
            "releases_url": "https://api.github.com/repos/famiu/neovim/releases{/id}",
            "size": 243195,
            "ssh_url": "git@github.com:famiu/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/famiu/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/famiu/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/famiu/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/famiu/neovim/subscription",
            "svn_url": "https://github.com/famiu/neovim",
            "tags_url": "https://api.github.com/repos/famiu/neovim/tags",
            "teams_url": "https://api.github.com/repos/famiu/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/famiu/neovim/git/trees{/sha}",
            "updated_at": "2022-08-29T10:09:33Z",
            "url": "https://api.github.com/repos/famiu/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
            "events_url": "https://api.github.com/users/famiu/events{/privacy}",
            "followers_url": "https://api.github.com/users/famiu/followers",
            "following_url": "https://api.github.com/users/famiu/following{/other_user}",
            "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/famiu",
            "id": 29580810,
            "login": "famiu",
            "node_id": "MDQ6VXNlcjI5NTgwODEw",
            "organizations_url": "https://api.github.com/users/famiu/orgs",
            "received_events_url": "https://api.github.com/users/famiu/received_events",
            "repos_url": "https://api.github.com/users/famiu/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/famiu"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/18231",
    "id": 917124959,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/18231",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        }
    ],
    "locked": true,
    "merge_commit_sha": "cc27540560672c1586e17a9e39512074e770b005",
    "merged_at": "2022-04-30T16:41:17Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM42qjdf",
    "number": 18231,
    "patch_url": "https://github.com/neovim/neovim/pull/18231.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/18231/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/8dbb11ebf633e40cb57568e77c7168deffc8bd7f",
    "title": "feat(api): `nvim_parse_cmd`",
    "updated_at": "2023-09-10T15:51:03Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/18231",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
        "events_url": "https://api.github.com/users/famiu/events{/privacy}",
        "followers_url": "https://api.github.com/users/famiu/followers",
        "following_url": "https://api.github.com/users/famiu/following{/other_user}",
        "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/famiu",
        "id": 29580810,
        "login": "famiu",
        "node_id": "MDQ6VXNlcjI5NTgwODEw",
        "organizations_url": "https://api.github.com/users/famiu/orgs",
        "received_events_url": "https://api.github.com/users/famiu/received_events",
        "repos_url": "https://api.github.com/users/famiu/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/famiu"
    }
}