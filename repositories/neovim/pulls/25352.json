{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/25352/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/25352/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/25352"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/25352"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/25352/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/25352"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/28e9e175378a780484654cf8b0d9a993eb17a812"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 4906,
            "forks_count": 4906,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1659,
            "open_issues_count": 1659,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2023-10-03T01:37:42Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 252026,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 69845,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2023-10-03T01:48:04Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 69845,
            "watchers_count": 69845,
            "web_commit_signoff_required": false
        },
        "sha": "c0f4d60016676d4cde809107763a3bc51ad309b9",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "Preliminary work for https://github.com/neovim/neovim/pull/25301.\r\n\r\nThe purpose of this PR is to replace the [existing parser implementation](https://github.com/neovim/neovim/blob/master/runtime/lua/vim/lsp/_snippet.lua) by an LPEG grammar. This grammar strictly follows the [EBNF snippet grammar](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.18/specification/#snippet_syntax) defined by LSP. \r\n\r\nI've also updated the structure of the nodes to be generic and contain their \"payload\" in `data` (yayyy type annotations!).\r\n\r\nTODOs:\r\n- [x] Update tests.\r\n- [x] Replace usages of `_snippet` by `_snippet_grammar` in `vim.lsp.util`. <s>The reason I haven't done this yet is because I'm unsure of the use cases of `vim.lsp.util.parse_snippet`. It seems to simply invoke [`tostring` on the snippet node](https://github.com/neovim/neovim/blob/b917db062fc673dfbbc6a8c722b05101319ab44e/runtime/lua/vim/lsp/_snippet.lua#L189), but that function doesn't even cover all node types?</s> I've modified `vim.lsp.util.parse_snippet` to just return the \"raw\" snippet tree, which is pretty much what the current implementation does. I'm unsure if we should deprecate this function; it feels weird to provide this \"dummy\" snippet parser if snippet support isn't even set in the client's capabilities.",
    "closed_at": "2023-10-02T20:21:35Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25352#discussion_r1339634451"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25352"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1339634451"
                }
            },
            "author_association": "MEMBER",
            "body": "I'm not sure of what to do with this test, since it tests something that LSP doesn't support in theory. The snippet grammar says that the value of a placeholder node consists of a single node, but the current parser allows it to be multiple nodes:\r\n```\r\nany         ::= tabstop | placeholder | choice | variable | text\r\nplaceholder ::= '${' int ':' any '}'\r\n```\r\n\r\nIs that intentional? Should we support this?",
            "commit_id": "28e9e175378a780484654cf8b0d9a993eb17a812",
            "created_at": "2023-09-28T07:07:42Z",
            "diff_hunk": "@@ -1,236 +1,188 @@\n local helpers = require('test.functional.helpers')(after_each)\n-local snippet = require('vim.lsp._snippet')\n+local snippet = require('vim.lsp._snippet_grammar')\n \n local eq = helpers.eq\n local exec_lua = helpers.exec_lua\n \n-describe('vim.lsp._snippet', function()\n+describe('vim.lsp._snippet_grammar', function()\n   before_each(helpers.clear)\n   after_each(helpers.clear)\n \n   local parse = function(...)\n-    return exec_lua('return require(\"vim.lsp._snippet\").parse(...)', ...)\n+    local snippet = exec_lua('return require(\"vim.lsp._snippet_grammar\").parse(...)', ...)\n+    return snippet.data.children\n   end\n \n-  it('should parse only text', function()\n+  it('parses only text', function()\n     eq({\n-      type = snippet.NodeType.SNIPPET,\n-      children = {\n-        {\n-          type = snippet.NodeType.TEXT,\n-          raw = 'TE\\\\$\\\\}XT',\n-          esc = 'TE$}XT',\n-        },\n-      },\n+      { type = snippet.NodeType.Text, data = 'TE$}XT' },\n     }, parse('TE\\\\$\\\\}XT'))\n   end)\n \n-  it('should parse tabstop', function()\n+  it('parses tabstops', function()\n     eq({\n-      type = snippet.NodeType.SNIPPET,\n-      children = {\n-        {\n-          type = snippet.NodeType.TABSTOP,\n-          tabstop = 1,\n-        },\n-        {\n-          type = snippet.NodeType.TABSTOP,\n-          tabstop = 2,\n-        },\n-      },\n+      { type = snippet.NodeType.Tabstop, data = 1 },\n+      { type = snippet.NodeType.Tabstop, data = 2 },\n     }, parse('$1${2}'))\n   end)\n \n-  it('should parse placeholders', function()",
            "html_url": "https://github.com/neovim/neovim/pull/25352#discussion_r1339634451",
            "id": 1339634451,
            "line": 44,
            "node_id": "PRRC_kwDOAPphoM5P2TMT",
            "original_commit_id": "d80b3441d45764bcf6e27105cdabb6069bfe2288",
            "original_line": 44,
            "original_position": 53,
            "original_start_line": null,
            "path": "test/functional/plugin/lsp/snippet_spec.lua",
            "position": 53,
            "pull_request_review_id": 1648049280,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25352",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1339634451/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-28T07:07:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1339634451",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25352#discussion_r1339687639"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25352"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1339687639"
                }
            },
            "author_association": "MEMBER",
            "body": "We only need to support the grammar from the specification. Fine to drop it.",
            "commit_id": "28e9e175378a780484654cf8b0d9a993eb17a812",
            "created_at": "2023-09-28T07:52:53Z",
            "diff_hunk": "@@ -1,236 +1,188 @@\n local helpers = require('test.functional.helpers')(after_each)\n-local snippet = require('vim.lsp._snippet')\n+local snippet = require('vim.lsp._snippet_grammar')\n \n local eq = helpers.eq\n local exec_lua = helpers.exec_lua\n \n-describe('vim.lsp._snippet', function()\n+describe('vim.lsp._snippet_grammar', function()\n   before_each(helpers.clear)\n   after_each(helpers.clear)\n \n   local parse = function(...)\n-    return exec_lua('return require(\"vim.lsp._snippet\").parse(...)', ...)\n+    local snippet = exec_lua('return require(\"vim.lsp._snippet_grammar\").parse(...)', ...)\n+    return snippet.data.children\n   end\n \n-  it('should parse only text', function()\n+  it('parses only text', function()\n     eq({\n-      type = snippet.NodeType.SNIPPET,\n-      children = {\n-        {\n-          type = snippet.NodeType.TEXT,\n-          raw = 'TE\\\\$\\\\}XT',\n-          esc = 'TE$}XT',\n-        },\n-      },\n+      { type = snippet.NodeType.Text, data = 'TE$}XT' },\n     }, parse('TE\\\\$\\\\}XT'))\n   end)\n \n-  it('should parse tabstop', function()\n+  it('parses tabstops', function()\n     eq({\n-      type = snippet.NodeType.SNIPPET,\n-      children = {\n-        {\n-          type = snippet.NodeType.TABSTOP,\n-          tabstop = 1,\n-        },\n-        {\n-          type = snippet.NodeType.TABSTOP,\n-          tabstop = 2,\n-        },\n-      },\n+      { type = snippet.NodeType.Tabstop, data = 1 },\n+      { type = snippet.NodeType.Tabstop, data = 2 },\n     }, parse('$1${2}'))\n   end)\n \n-  it('should parse placeholders', function()",
            "html_url": "https://github.com/neovim/neovim/pull/25352#discussion_r1339687639",
            "id": 1339687639,
            "in_reply_to_id": 1339634451,
            "line": 44,
            "node_id": "PRRC_kwDOAPphoM5P2gLX",
            "original_commit_id": "d80b3441d45764bcf6e27105cdabb6069bfe2288",
            "original_line": 44,
            "original_position": 53,
            "original_start_line": null,
            "path": "test/functional/plugin/lsp/snippet_spec.lua",
            "position": 53,
            "pull_request_review_id": 1648128591,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25352",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1339687639/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-28T07:52:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1339687639",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25352#discussion_r1339690915"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25352"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1339690915"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "on the other hand could there be any problems with supporting it?\r\nSince the goal of this whole snippet thing shouldn't imo only be to support the lsp spec. That's the minimal requirement. If we can make it more extensible \"for free\" why not do that.",
            "commit_id": "28e9e175378a780484654cf8b0d9a993eb17a812",
            "created_at": "2023-09-28T07:55:27Z",
            "diff_hunk": "@@ -1,236 +1,188 @@\n local helpers = require('test.functional.helpers')(after_each)\n-local snippet = require('vim.lsp._snippet')\n+local snippet = require('vim.lsp._snippet_grammar')\n \n local eq = helpers.eq\n local exec_lua = helpers.exec_lua\n \n-describe('vim.lsp._snippet', function()\n+describe('vim.lsp._snippet_grammar', function()\n   before_each(helpers.clear)\n   after_each(helpers.clear)\n \n   local parse = function(...)\n-    return exec_lua('return require(\"vim.lsp._snippet\").parse(...)', ...)\n+    local snippet = exec_lua('return require(\"vim.lsp._snippet_grammar\").parse(...)', ...)\n+    return snippet.data.children\n   end\n \n-  it('should parse only text', function()\n+  it('parses only text', function()\n     eq({\n-      type = snippet.NodeType.SNIPPET,\n-      children = {\n-        {\n-          type = snippet.NodeType.TEXT,\n-          raw = 'TE\\\\$\\\\}XT',\n-          esc = 'TE$}XT',\n-        },\n-      },\n+      { type = snippet.NodeType.Text, data = 'TE$}XT' },\n     }, parse('TE\\\\$\\\\}XT'))\n   end)\n \n-  it('should parse tabstop', function()\n+  it('parses tabstops', function()\n     eq({\n-      type = snippet.NodeType.SNIPPET,\n-      children = {\n-        {\n-          type = snippet.NodeType.TABSTOP,\n-          tabstop = 1,\n-        },\n-        {\n-          type = snippet.NodeType.TABSTOP,\n-          tabstop = 2,\n-        },\n-      },\n+      { type = snippet.NodeType.Tabstop, data = 1 },\n+      { type = snippet.NodeType.Tabstop, data = 2 },\n     }, parse('$1${2}'))\n   end)\n \n-  it('should parse placeholders', function()",
            "html_url": "https://github.com/neovim/neovim/pull/25352#discussion_r1339690915",
            "id": 1339690915,
            "in_reply_to_id": 1339634451,
            "line": 44,
            "node_id": "PRRC_kwDOAPphoM5P2g-j",
            "original_commit_id": "d80b3441d45764bcf6e27105cdabb6069bfe2288",
            "original_line": 44,
            "original_position": 53,
            "original_start_line": null,
            "path": "test/functional/plugin/lsp/snippet_spec.lua",
            "position": 53,
            "pull_request_review_id": 1648133047,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25352",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1339690915/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-28T07:55:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1339690915",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/81827001?v=4",
                "events_url": "https://api.github.com/users/max397574/events{/privacy}",
                "followers_url": "https://api.github.com/users/max397574/followers",
                "following_url": "https://api.github.com/users/max397574/following{/other_user}",
                "gists_url": "https://api.github.com/users/max397574/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/max397574",
                "id": 81827001,
                "login": "max397574",
                "node_id": "MDQ6VXNlcjgxODI3MDAx",
                "organizations_url": "https://api.github.com/users/max397574/orgs",
                "received_events_url": "https://api.github.com/users/max397574/received_events",
                "repos_url": "https://api.github.com/users/max397574/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/max397574/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/max397574/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/max397574"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25352#discussion_r1339697767"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25352"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1339697767"
                }
            },
            "author_association": "MEMBER",
            "body": "> Since the goal of this whole snippet thing shouldn't imo only be to support the lsp spec.\r\n\r\nNo, that _is_ the goal. The basic user interface may be shared and exposed, but the underlying snippet format will only ever be LSP -- and LSP for us means \"the spec, and nothing but the spec\".\r\n\r\n(And nothing is \"free\", you always pay a cost in maintenance and documentation.)",
            "commit_id": "28e9e175378a780484654cf8b0d9a993eb17a812",
            "created_at": "2023-09-28T08:00:54Z",
            "diff_hunk": "@@ -1,236 +1,188 @@\n local helpers = require('test.functional.helpers')(after_each)\n-local snippet = require('vim.lsp._snippet')\n+local snippet = require('vim.lsp._snippet_grammar')\n \n local eq = helpers.eq\n local exec_lua = helpers.exec_lua\n \n-describe('vim.lsp._snippet', function()\n+describe('vim.lsp._snippet_grammar', function()\n   before_each(helpers.clear)\n   after_each(helpers.clear)\n \n   local parse = function(...)\n-    return exec_lua('return require(\"vim.lsp._snippet\").parse(...)', ...)\n+    local snippet = exec_lua('return require(\"vim.lsp._snippet_grammar\").parse(...)', ...)\n+    return snippet.data.children\n   end\n \n-  it('should parse only text', function()\n+  it('parses only text', function()\n     eq({\n-      type = snippet.NodeType.SNIPPET,\n-      children = {\n-        {\n-          type = snippet.NodeType.TEXT,\n-          raw = 'TE\\\\$\\\\}XT',\n-          esc = 'TE$}XT',\n-        },\n-      },\n+      { type = snippet.NodeType.Text, data = 'TE$}XT' },\n     }, parse('TE\\\\$\\\\}XT'))\n   end)\n \n-  it('should parse tabstop', function()\n+  it('parses tabstops', function()\n     eq({\n-      type = snippet.NodeType.SNIPPET,\n-      children = {\n-        {\n-          type = snippet.NodeType.TABSTOP,\n-          tabstop = 1,\n-        },\n-        {\n-          type = snippet.NodeType.TABSTOP,\n-          tabstop = 2,\n-        },\n-      },\n+      { type = snippet.NodeType.Tabstop, data = 1 },\n+      { type = snippet.NodeType.Tabstop, data = 2 },\n     }, parse('$1${2}'))\n   end)\n \n-  it('should parse placeholders', function()",
            "html_url": "https://github.com/neovim/neovim/pull/25352#discussion_r1339697767",
            "id": 1339697767,
            "in_reply_to_id": 1339634451,
            "line": 44,
            "node_id": "PRRC_kwDOAPphoM5P2ipn",
            "original_commit_id": "d80b3441d45764bcf6e27105cdabb6069bfe2288",
            "original_line": 44,
            "original_position": 53,
            "original_start_line": null,
            "path": "test/functional/plugin/lsp/snippet_spec.lua",
            "position": 53,
            "pull_request_review_id": 1648142632,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25352",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1339697767/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-28T08:00:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1339697767",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25352#discussion_r1339734543"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25352"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1339734543"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I think the spec intended that placeholders could have multiple nodes.\r\n\r\nFor example, the `any-node` to be multiple nodes.\r\nThe `local a = $1` will parsed as `any-node` but it will have text-node and tabstop-node.\r\n\r\nMy decision policy was that the implementation should be supported VSCode behavior as much as possible.\r\n\r\nThe VSCode allows `local $1 = ${2:test$1test}`.",
            "commit_id": "28e9e175378a780484654cf8b0d9a993eb17a812",
            "created_at": "2023-09-28T08:29:09Z",
            "diff_hunk": "@@ -1,236 +1,188 @@\n local helpers = require('test.functional.helpers')(after_each)\n-local snippet = require('vim.lsp._snippet')\n+local snippet = require('vim.lsp._snippet_grammar')\n \n local eq = helpers.eq\n local exec_lua = helpers.exec_lua\n \n-describe('vim.lsp._snippet', function()\n+describe('vim.lsp._snippet_grammar', function()\n   before_each(helpers.clear)\n   after_each(helpers.clear)\n \n   local parse = function(...)\n-    return exec_lua('return require(\"vim.lsp._snippet\").parse(...)', ...)\n+    local snippet = exec_lua('return require(\"vim.lsp._snippet_grammar\").parse(...)', ...)\n+    return snippet.data.children\n   end\n \n-  it('should parse only text', function()\n+  it('parses only text', function()\n     eq({\n-      type = snippet.NodeType.SNIPPET,\n-      children = {\n-        {\n-          type = snippet.NodeType.TEXT,\n-          raw = 'TE\\\\$\\\\}XT',\n-          esc = 'TE$}XT',\n-        },\n-      },\n+      { type = snippet.NodeType.Text, data = 'TE$}XT' },\n     }, parse('TE\\\\$\\\\}XT'))\n   end)\n \n-  it('should parse tabstop', function()\n+  it('parses tabstops', function()\n     eq({\n-      type = snippet.NodeType.SNIPPET,\n-      children = {\n-        {\n-          type = snippet.NodeType.TABSTOP,\n-          tabstop = 1,\n-        },\n-        {\n-          type = snippet.NodeType.TABSTOP,\n-          tabstop = 2,\n-        },\n-      },\n+      { type = snippet.NodeType.Tabstop, data = 1 },\n+      { type = snippet.NodeType.Tabstop, data = 2 },\n     }, parse('$1${2}'))\n   end)\n \n-  it('should parse placeholders', function()",
            "html_url": "https://github.com/neovim/neovim/pull/25352#discussion_r1339734543",
            "id": 1339734543,
            "in_reply_to_id": 1339634451,
            "line": 44,
            "node_id": "PRRC_kwDOAPphoM5P2roP",
            "original_commit_id": "d80b3441d45764bcf6e27105cdabb6069bfe2288",
            "original_line": 44,
            "original_position": 53,
            "original_start_line": null,
            "path": "test/functional/plugin/lsp/snippet_spec.lua",
            "position": 53,
            "pull_request_review_id": 1648195751,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25352",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1339734543/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-28T08:29:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1339734543",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25352#discussion_r1339743902"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25352"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1339743902"
                }
            },
            "author_association": "MEMBER",
            "body": "> My decision policy was that the implementation should be supported VSCode behavior as much as possible.\r\n\r\nThat is different from Neovim's decision policy, though, which is \"If VS Code can't stick to their own spec, that's their problem\".\r\n\r\n(If the spec can be interpreted as allowing multiple nodes, supporting a permissive reading is fine. That's a different matter.)",
            "commit_id": "28e9e175378a780484654cf8b0d9a993eb17a812",
            "created_at": "2023-09-28T08:36:27Z",
            "diff_hunk": "@@ -1,236 +1,188 @@\n local helpers = require('test.functional.helpers')(after_each)\n-local snippet = require('vim.lsp._snippet')\n+local snippet = require('vim.lsp._snippet_grammar')\n \n local eq = helpers.eq\n local exec_lua = helpers.exec_lua\n \n-describe('vim.lsp._snippet', function()\n+describe('vim.lsp._snippet_grammar', function()\n   before_each(helpers.clear)\n   after_each(helpers.clear)\n \n   local parse = function(...)\n-    return exec_lua('return require(\"vim.lsp._snippet\").parse(...)', ...)\n+    local snippet = exec_lua('return require(\"vim.lsp._snippet_grammar\").parse(...)', ...)\n+    return snippet.data.children\n   end\n \n-  it('should parse only text', function()\n+  it('parses only text', function()\n     eq({\n-      type = snippet.NodeType.SNIPPET,\n-      children = {\n-        {\n-          type = snippet.NodeType.TEXT,\n-          raw = 'TE\\\\$\\\\}XT',\n-          esc = 'TE$}XT',\n-        },\n-      },\n+      { type = snippet.NodeType.Text, data = 'TE$}XT' },\n     }, parse('TE\\\\$\\\\}XT'))\n   end)\n \n-  it('should parse tabstop', function()\n+  it('parses tabstops', function()\n     eq({\n-      type = snippet.NodeType.SNIPPET,\n-      children = {\n-        {\n-          type = snippet.NodeType.TABSTOP,\n-          tabstop = 1,\n-        },\n-        {\n-          type = snippet.NodeType.TABSTOP,\n-          tabstop = 2,\n-        },\n-      },\n+      { type = snippet.NodeType.Tabstop, data = 1 },\n+      { type = snippet.NodeType.Tabstop, data = 2 },\n     }, parse('$1${2}'))\n   end)\n \n-  it('should parse placeholders', function()",
            "html_url": "https://github.com/neovim/neovim/pull/25352#discussion_r1339743902",
            "id": 1339743902,
            "in_reply_to_id": 1339634451,
            "line": 44,
            "node_id": "PRRC_kwDOAPphoM5P2t6e",
            "original_commit_id": "d80b3441d45764bcf6e27105cdabb6069bfe2288",
            "original_line": 44,
            "original_position": 53,
            "original_start_line": null,
            "path": "test/functional/plugin/lsp/snippet_spec.lua",
            "position": 53,
            "pull_request_review_id": 1648209225,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25352",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1339743902/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-28T08:36:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1339743902",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25352#discussion_r1339764970"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25352"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1339764970"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "There are many details that are not specified in the LSP specification.\r\nFor example, LSP does not determine the cursor position after applying TextEdit.\r\n\r\nIn such cases, I tried to check the behavior of VSCode as much as possible. (However, I agree that certain \"features\" of VSCode should not be implemented.)",
            "commit_id": "28e9e175378a780484654cf8b0d9a993eb17a812",
            "created_at": "2023-09-28T08:51:05Z",
            "diff_hunk": "@@ -1,236 +1,188 @@\n local helpers = require('test.functional.helpers')(after_each)\n-local snippet = require('vim.lsp._snippet')\n+local snippet = require('vim.lsp._snippet_grammar')\n \n local eq = helpers.eq\n local exec_lua = helpers.exec_lua\n \n-describe('vim.lsp._snippet', function()\n+describe('vim.lsp._snippet_grammar', function()\n   before_each(helpers.clear)\n   after_each(helpers.clear)\n \n   local parse = function(...)\n-    return exec_lua('return require(\"vim.lsp._snippet\").parse(...)', ...)\n+    local snippet = exec_lua('return require(\"vim.lsp._snippet_grammar\").parse(...)', ...)\n+    return snippet.data.children\n   end\n \n-  it('should parse only text', function()\n+  it('parses only text', function()\n     eq({\n-      type = snippet.NodeType.SNIPPET,\n-      children = {\n-        {\n-          type = snippet.NodeType.TEXT,\n-          raw = 'TE\\\\$\\\\}XT',\n-          esc = 'TE$}XT',\n-        },\n-      },\n+      { type = snippet.NodeType.Text, data = 'TE$}XT' },\n     }, parse('TE\\\\$\\\\}XT'))\n   end)\n \n-  it('should parse tabstop', function()\n+  it('parses tabstops', function()\n     eq({\n-      type = snippet.NodeType.SNIPPET,\n-      children = {\n-        {\n-          type = snippet.NodeType.TABSTOP,\n-          tabstop = 1,\n-        },\n-        {\n-          type = snippet.NodeType.TABSTOP,\n-          tabstop = 2,\n-        },\n-      },\n+      { type = snippet.NodeType.Tabstop, data = 1 },\n+      { type = snippet.NodeType.Tabstop, data = 2 },\n     }, parse('$1${2}'))\n   end)\n \n-  it('should parse placeholders', function()",
            "html_url": "https://github.com/neovim/neovim/pull/25352#discussion_r1339764970",
            "id": 1339764970,
            "in_reply_to_id": 1339634451,
            "line": 44,
            "node_id": "PRRC_kwDOAPphoM5P2zDq",
            "original_commit_id": "d80b3441d45764bcf6e27105cdabb6069bfe2288",
            "original_line": 44,
            "original_position": 53,
            "original_start_line": null,
            "path": "test/functional/plugin/lsp/snippet_spec.lua",
            "position": 53,
            "pull_request_review_id": 1648239598,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25352",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1339764970/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-28T08:51:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1339764970",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25352#discussion_r1340532767"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25352"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1340532767"
                }
            },
            "author_association": "MEMBER",
            "body": "I agree with @mfussenegger and @clason. We should follow the LSP specification and not promote a VS Code flavour of it. In case of ambiguities we can have a larger discussion, but in this case it is very clear that LSP says that `any` consists of a single node (there's no reason for that rule it not to be written as `any ::= (tabstop | placeholder | choice | variable | text)+`).\r\n\r\nIf we need to solve the ambiguity or ensure VS Code sticks to their specification, we should make the change [upstream](https://github.com/microsoft/language-server-protocol), not make \"educated guesses\" per editor.",
            "commit_id": "28e9e175378a780484654cf8b0d9a993eb17a812",
            "created_at": "2023-09-28T18:30:48Z",
            "diff_hunk": "@@ -1,236 +1,188 @@\n local helpers = require('test.functional.helpers')(after_each)\n-local snippet = require('vim.lsp._snippet')\n+local snippet = require('vim.lsp._snippet_grammar')\n \n local eq = helpers.eq\n local exec_lua = helpers.exec_lua\n \n-describe('vim.lsp._snippet', function()\n+describe('vim.lsp._snippet_grammar', function()\n   before_each(helpers.clear)\n   after_each(helpers.clear)\n \n   local parse = function(...)\n-    return exec_lua('return require(\"vim.lsp._snippet\").parse(...)', ...)\n+    local snippet = exec_lua('return require(\"vim.lsp._snippet_grammar\").parse(...)', ...)\n+    return snippet.data.children\n   end\n \n-  it('should parse only text', function()\n+  it('parses only text', function()\n     eq({\n-      type = snippet.NodeType.SNIPPET,\n-      children = {\n-        {\n-          type = snippet.NodeType.TEXT,\n-          raw = 'TE\\\\$\\\\}XT',\n-          esc = 'TE$}XT',\n-        },\n-      },\n+      { type = snippet.NodeType.Text, data = 'TE$}XT' },\n     }, parse('TE\\\\$\\\\}XT'))\n   end)\n \n-  it('should parse tabstop', function()\n+  it('parses tabstops', function()\n     eq({\n-      type = snippet.NodeType.SNIPPET,\n-      children = {\n-        {\n-          type = snippet.NodeType.TABSTOP,\n-          tabstop = 1,\n-        },\n-        {\n-          type = snippet.NodeType.TABSTOP,\n-          tabstop = 2,\n-        },\n-      },\n+      { type = snippet.NodeType.Tabstop, data = 1 },\n+      { type = snippet.NodeType.Tabstop, data = 2 },\n     }, parse('$1${2}'))\n   end)\n \n-  it('should parse placeholders', function()",
            "html_url": "https://github.com/neovim/neovim/pull/25352#discussion_r1340532767",
            "id": 1340532767,
            "in_reply_to_id": 1339634451,
            "line": 44,
            "node_id": "PRRC_kwDOAPphoM5P5ugf",
            "original_commit_id": "d80b3441d45764bcf6e27105cdabb6069bfe2288",
            "original_line": 44,
            "original_position": 53,
            "original_start_line": null,
            "path": "test/functional/plugin/lsp/snippet_spec.lua",
            "position": 53,
            "pull_request_review_id": 1649487982,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25352",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1340532767/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-09-28T18:31:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1340532767",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25352#discussion_r1341545309"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25352"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1341545309"
                }
            },
            "author_association": "MEMBER",
            "body": "I think with `return assert(snippet, \"snippet parsing failed\")` you could avoid the type cast and it also raises an error.\r\n(Keep in mind that the second argument is eager evaluated, so if you'd generate the message instead of using a string literal, it could be more expensive and the existing pattern might be preferable)",
            "commit_id": "28e9e175378a780484654cf8b0d9a993eb17a812",
            "created_at": "2023-09-29T15:55:12Z",
            "diff_hunk": "@@ -0,0 +1,145 @@\n+--- Grammar for LSP snippets, based on https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#snippet_syntax\n+\n+local lpeg = vim.lpeg\n+local P, S, R, V = lpeg.P, lpeg.S, lpeg.R, lpeg.V\n+local C, Cg, Ct = lpeg.C, lpeg.Cg, lpeg.Ct\n+\n+local alpha = R('az', 'AZ')\n+local backslash = P('\\\\')\n+local colon = P(':')\n+local dollar = P('$')\n+local int = R('09') ^ 1\n+local l_brace, r_brace = P('{'), P('}')\n+local pipe = P('|')\n+local slash = P('/')\n+local underscore = P('_')\n+local var = Cg((underscore + alpha) * ((underscore + alpha + int) ^ 0), 'name')\n+local format_capture = Cg(int / tonumber, 'capture')\n+local format_modifier = Cg(P('upcase') + P('downcase') + P('capitalize'), 'modifier')\n+local tabstop = Cg(int / tonumber, 'tabstop')\n+\n+--- Returns a function that unescapes occurrences of \"special\" characters.\n+---\n+--- @param special string\n+--- @return fun(match: string): string\n+local function escape_text(special)\n+  return function(match)\n+    local escaped = match:gsub('\\\\(.)', function(c)\n+      return special:find(c) and c or '\\\\' .. c\n+    end)\n+    return escaped\n+  end\n+end\n+\n+-- Text nodes match \"any character\", but $, \\, and } must be escaped.\n+local escapable = '$}\\\\'\n+local text = (backslash * S(escapable)) + (P(1) - S(escapable))\n+local text_0, text_1 = (text ^ 0) / escape_text(escapable), text ^ 1\n+-- Within choice nodes, \\ also escapes comma and pipe characters.\n+local choice_text = C(((backslash * S(escapable .. ',|')) + (P(1) - S(escapable .. ',|'))) ^ 1)\n+  / escape_text(escapable .. ',|')\n+local if_text, else_text = Cg(text_0, 'if_text'), Cg(text_0, 'else_text')\n+-- Within format nodes, make sure we stop at /\n+local format_text = C(((backslash * S(escapable)) + (P(1) - S(escapable .. '/'))) ^ 1)\n+  / escape_text(escapable)\n+-- Within ternary condition format nodes, make sure we stop at :\n+local if_till_colon_text = Cg(\n+  C(((backslash * S(escapable)) + (P(1) - S(escapable .. ':'))) ^ 1) / escape_text(escapable),\n+  'if_text'\n+)\n+\n+-- Matches the string inside //, allowing escaping of the closing slash.\n+local regex = Cg(((backslash * slash) + (P(1) - slash)) ^ 1, 'regex')\n+\n+-- Regex constructor flags (see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp#parameters).\n+local options = Cg(S('dgimsuvy') ^ 0, 'options')\n+\n+--- @enum vim.snippet.Type\n+local Type = {\n+  Tabstop = 1,\n+  Placeholder = 2,\n+  Choice = 3,\n+  Variable = 4,\n+  Format = 5,\n+  Text = 6,\n+  Snippet = 7,\n+}\n+\n+--- @class vim.snippet.Node<T>: { type: vim.snippet.Type, data: T }\n+--- @class vim.snippet.Tabstop: { tabstop: number }\n+--- @class vim.snippet.TextData: { text: string }\n+--- @class vim.snippet.PlaceholderData: { tabstop: vim.snippet.Tabstop, value: vim.snippet.Node<any> }\n+--- @class vim.snippet.ChoiceData: { tabstop: vim.snippet.Tabstop, values: string[] }\n+--- @class vim.snippet.VariableData: { name: string, default?: vim.snippet.Node<any>, regex?: string, format?: vim.snippet.Node<vim.snippet.FormatData|vim.snippet.TextData>[], options?: string }\n+--- @class vim.snippet.FormatData: { capture: number, modifier?: string, if_text?: string, else_text?: string }\n+--- @class vim.snippet.SnippetData: { children: vim.snippet.Node<any>[] }\n+\n+--- Returns a function that constructs a snippet node of the given type.\n+---\n+--- @generic T\n+--- @param type vim.snippet.Type\n+--- @return fun(data: T): vim.snippet.Node<T>\n+local function node(type)\n+  return function(data)\n+    return { type = type, data = data }\n+  end\n+end\n+\n+-- stylua: ignore\n+local G = P({\n+  'snippet';\n+  snippet = Ct(Cg(\n+    Ct((\n+      V('any') +\n+      (Ct(Cg(text_1 / escape_text(escapable), 'text')) / node(Type.Text))\n+    ) ^ 1), 'children'\n+  )) / node(Type.Snippet),\n+  any_or_text = V('any') + (Ct(Cg(text_0 / escape_text(escapable), 'text')) / node(Type.Text)),\n+  any = V('placeholder') + V('tabstop') + V('choice') + V('variable'),\n+  tabstop = Ct(dollar * (tabstop + (l_brace * tabstop * r_brace))) / node(Type.Tabstop),\n+  placeholder = Ct(dollar * l_brace * tabstop * colon * Cg(V('any_or_text'), 'value') * r_brace) / node(Type.Placeholder),\n+  choice = Ct(dollar *\n+    l_brace *\n+    tabstop *\n+    pipe *\n+    Cg(Ct(choice_text * (P(',') * choice_text) ^ 0), 'values') *\n+    pipe *\n+    r_brace) / node(Type.Choice),\n+  variable = Ct(dollar * (\n+    var + (\n+    l_brace * var * (\n+      r_brace +\n+      (colon * Cg(V('any_or_text'), 'default') * r_brace) +\n+      (slash * regex * slash * Cg(Ct((V('format') + (C(format_text) / node(Type.Text))) ^ 1), 'format') * slash * options * r_brace)\n+    ))\n+  )) / node(Type.Variable),\n+  format = Ct(dollar * (\n+    format_capture + (\n+    l_brace * format_capture * (\n+      r_brace +\n+      (colon * (\n+        (slash * format_modifier * r_brace) +\n+        (P('+') * if_text * r_brace) +\n+        (P('?') * if_till_colon_text * colon * else_text * r_brace) +\n+        (P('-') * else_text * r_brace) +\n+        (else_text * r_brace)\n+      ))\n+    ))\n+  )) / node(Type.Format),\n+})\n+\n+local M = {}\n+M.NodeType = Type\n+\n+--- Parses the given input into a snippet tree.\n+--- @param input string\n+--- @return vim.snippet.Node<vim.snippet.SnippetData>\n+function M.parse(input)\n+  local snippet = G:match(input)\n+  if not snippet then\n+    error('snippet parsing failed')\n+  end\n+  return snippet --- @type vim.snippet.Node<vim.snippet.SnippetData>",
            "html_url": "https://github.com/neovim/neovim/pull/25352#discussion_r1341545309",
            "id": 1341545309,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5P9ltd",
            "original_commit_id": "5f7c18e554ad8126176371b1593eddfafa10049c",
            "original_line": 140,
            "original_position": 142,
            "original_start_line": 139,
            "path": "runtime/lua/vim/lsp/_snippet_grammar.lua",
            "position": null,
            "pull_request_review_id": 1651079997,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25352",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1341545309/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-09-29T16:02:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1341545309",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25352#discussion_r1341553980"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25352"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1341553980"
                }
            },
            "author_association": "MEMBER",
            "body": "Looking at how `parse_snippet` is currently used in https://github.com/MariaSolOs/neovim/blob/5f7c18e554ad8126176371b1593eddfafa10049c/runtime/lua/vim/lsp/util.lua#L633-L650\r\n\r\nI don't think this is safe to do. E.g. `lua =vim.lsp.util.parse_snippet(\"${1:foobar}\")` on master returns `foobar`, now it would return `table: 0x...`.\r\n\r\nI'm not sure how to do this in a non-disruptive way. We could change `get_completion_word` to not use this function anymore - without snippet support opt-in in the capabilities users shouldn't get results anyways.\r\n\r\nBut not sure what to do about direct `parse_snippet` users. As mentioned in the other comment. I think this function needs to 🔥\r\n\r\nIf a quick github code search shows no other usages, maybe we're daring a ☢️ option and kick it immediately ?\r\n",
            "commit_id": "28e9e175378a780484654cf8b0d9a993eb17a812",
            "created_at": "2023-09-29T16:01:47Z",
            "diff_hunk": "@@ -610,7 +610,7 @@ end\n ---@return string parsed snippet\n function M.parse_snippet(input)\n   local ok, parsed = pcall(function()\n-    return tostring(snippet.parse(input))\n+    return tostring(snippet.parse(input).data.children)",
            "html_url": "https://github.com/neovim/neovim/pull/25352#discussion_r1341553980",
            "id": 1341553980,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5P9n08",
            "original_commit_id": "5f7c18e554ad8126176371b1593eddfafa10049c",
            "original_line": 613,
            "original_position": 12,
            "original_start_line": 613,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1651079997,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25352",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1341553980/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "LEFT",
            "subject_type": "line",
            "updated_at": "2023-09-29T16:02:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1341553980",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25352#discussion_r1341931007"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25352"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1341931007"
                }
            },
            "author_association": "MEMBER",
            "body": "It's [used by nvim-cmp](https://github.com/hrsh7th/nvim-cmp/blob/5dce1b778b85c717f6614e3f4da45e9f19f54435/lua/cmp/entry.lua#L118), unfortunately (@hrsh7th), as well as a number of dotfiles (there seems to be a copy-pasted snippet that throws out multiline snippets).\r\n\r\nI'm OK with breaking user config on master in this case, but maybe we can coordinate with nvim-cmp so that they have an adaptation in place when we merge this?\r\n\r\nAlternative is to not merge this \"partial\" PR and combine it with the API one, so we can give this the `stylize_markdown` treatment and tell people \"just use `vim.snippet.parse()` (or whatever we decide on) instead\". That's probably the easiest for downstream.\r\n\r\n",
            "commit_id": "28e9e175378a780484654cf8b0d9a993eb17a812",
            "created_at": "2023-09-30T08:39:14Z",
            "diff_hunk": "@@ -610,7 +610,7 @@ end\n ---@return string parsed snippet\n function M.parse_snippet(input)\n   local ok, parsed = pcall(function()\n-    return tostring(snippet.parse(input))\n+    return tostring(snippet.parse(input).data.children)",
            "html_url": "https://github.com/neovim/neovim/pull/25352#discussion_r1341931007",
            "id": 1341931007,
            "in_reply_to_id": 1341553980,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5P_D3_",
            "original_commit_id": "5f7c18e554ad8126176371b1593eddfafa10049c",
            "original_line": 613,
            "original_position": 12,
            "original_start_line": 613,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1651663130,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25352",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1341931007/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "LEFT",
            "subject_type": "line",
            "updated_at": "2023-09-30T08:40:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1341931007",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25352#discussion_r1341961295"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25352"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1341961295"
                }
            },
            "author_association": "MEMBER",
            "body": "Or is it possible to translate the new result into the old form with a simple shim we can insert now and remove before 0.10?",
            "commit_id": "28e9e175378a780484654cf8b0d9a993eb17a812",
            "created_at": "2023-09-30T13:16:18Z",
            "diff_hunk": "@@ -610,7 +610,7 @@ end\n ---@return string parsed snippet\n function M.parse_snippet(input)\n   local ok, parsed = pcall(function()\n-    return tostring(snippet.parse(input))\n+    return tostring(snippet.parse(input).data.children)",
            "html_url": "https://github.com/neovim/neovim/pull/25352#discussion_r1341961295",
            "id": 1341961295,
            "in_reply_to_id": 1341553980,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5P_LRP",
            "original_commit_id": "5f7c18e554ad8126176371b1593eddfafa10049c",
            "original_line": 613,
            "original_position": 12,
            "original_start_line": 613,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1651696270,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25352",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1341961295/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "LEFT",
            "subject_type": "line",
            "updated_at": "2023-09-30T13:16:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1341961295",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25352#discussion_r1341988079"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25352"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1341988079"
                }
            },
            "author_association": "MEMBER",
            "body": "Unfortunately I still need the type cast because lpeg doesn't realize that I'm not returning a pattern but a node.",
            "commit_id": "28e9e175378a780484654cf8b0d9a993eb17a812",
            "created_at": "2023-09-30T17:06:19Z",
            "diff_hunk": "@@ -0,0 +1,145 @@\n+--- Grammar for LSP snippets, based on https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#snippet_syntax\n+\n+local lpeg = vim.lpeg\n+local P, S, R, V = lpeg.P, lpeg.S, lpeg.R, lpeg.V\n+local C, Cg, Ct = lpeg.C, lpeg.Cg, lpeg.Ct\n+\n+local alpha = R('az', 'AZ')\n+local backslash = P('\\\\')\n+local colon = P(':')\n+local dollar = P('$')\n+local int = R('09') ^ 1\n+local l_brace, r_brace = P('{'), P('}')\n+local pipe = P('|')\n+local slash = P('/')\n+local underscore = P('_')\n+local var = Cg((underscore + alpha) * ((underscore + alpha + int) ^ 0), 'name')\n+local format_capture = Cg(int / tonumber, 'capture')\n+local format_modifier = Cg(P('upcase') + P('downcase') + P('capitalize'), 'modifier')\n+local tabstop = Cg(int / tonumber, 'tabstop')\n+\n+--- Returns a function that unescapes occurrences of \"special\" characters.\n+---\n+--- @param special string\n+--- @return fun(match: string): string\n+local function escape_text(special)\n+  return function(match)\n+    local escaped = match:gsub('\\\\(.)', function(c)\n+      return special:find(c) and c or '\\\\' .. c\n+    end)\n+    return escaped\n+  end\n+end\n+\n+-- Text nodes match \"any character\", but $, \\, and } must be escaped.\n+local escapable = '$}\\\\'\n+local text = (backslash * S(escapable)) + (P(1) - S(escapable))\n+local text_0, text_1 = (text ^ 0) / escape_text(escapable), text ^ 1\n+-- Within choice nodes, \\ also escapes comma and pipe characters.\n+local choice_text = C(((backslash * S(escapable .. ',|')) + (P(1) - S(escapable .. ',|'))) ^ 1)\n+  / escape_text(escapable .. ',|')\n+local if_text, else_text = Cg(text_0, 'if_text'), Cg(text_0, 'else_text')\n+-- Within format nodes, make sure we stop at /\n+local format_text = C(((backslash * S(escapable)) + (P(1) - S(escapable .. '/'))) ^ 1)\n+  / escape_text(escapable)\n+-- Within ternary condition format nodes, make sure we stop at :\n+local if_till_colon_text = Cg(\n+  C(((backslash * S(escapable)) + (P(1) - S(escapable .. ':'))) ^ 1) / escape_text(escapable),\n+  'if_text'\n+)\n+\n+-- Matches the string inside //, allowing escaping of the closing slash.\n+local regex = Cg(((backslash * slash) + (P(1) - slash)) ^ 1, 'regex')\n+\n+-- Regex constructor flags (see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp#parameters).\n+local options = Cg(S('dgimsuvy') ^ 0, 'options')\n+\n+--- @enum vim.snippet.Type\n+local Type = {\n+  Tabstop = 1,\n+  Placeholder = 2,\n+  Choice = 3,\n+  Variable = 4,\n+  Format = 5,\n+  Text = 6,\n+  Snippet = 7,\n+}\n+\n+--- @class vim.snippet.Node<T>: { type: vim.snippet.Type, data: T }\n+--- @class vim.snippet.Tabstop: { tabstop: number }\n+--- @class vim.snippet.TextData: { text: string }\n+--- @class vim.snippet.PlaceholderData: { tabstop: vim.snippet.Tabstop, value: vim.snippet.Node<any> }\n+--- @class vim.snippet.ChoiceData: { tabstop: vim.snippet.Tabstop, values: string[] }\n+--- @class vim.snippet.VariableData: { name: string, default?: vim.snippet.Node<any>, regex?: string, format?: vim.snippet.Node<vim.snippet.FormatData|vim.snippet.TextData>[], options?: string }\n+--- @class vim.snippet.FormatData: { capture: number, modifier?: string, if_text?: string, else_text?: string }\n+--- @class vim.snippet.SnippetData: { children: vim.snippet.Node<any>[] }\n+\n+--- Returns a function that constructs a snippet node of the given type.\n+---\n+--- @generic T\n+--- @param type vim.snippet.Type\n+--- @return fun(data: T): vim.snippet.Node<T>\n+local function node(type)\n+  return function(data)\n+    return { type = type, data = data }\n+  end\n+end\n+\n+-- stylua: ignore\n+local G = P({\n+  'snippet';\n+  snippet = Ct(Cg(\n+    Ct((\n+      V('any') +\n+      (Ct(Cg(text_1 / escape_text(escapable), 'text')) / node(Type.Text))\n+    ) ^ 1), 'children'\n+  )) / node(Type.Snippet),\n+  any_or_text = V('any') + (Ct(Cg(text_0 / escape_text(escapable), 'text')) / node(Type.Text)),\n+  any = V('placeholder') + V('tabstop') + V('choice') + V('variable'),\n+  tabstop = Ct(dollar * (tabstop + (l_brace * tabstop * r_brace))) / node(Type.Tabstop),\n+  placeholder = Ct(dollar * l_brace * tabstop * colon * Cg(V('any_or_text'), 'value') * r_brace) / node(Type.Placeholder),\n+  choice = Ct(dollar *\n+    l_brace *\n+    tabstop *\n+    pipe *\n+    Cg(Ct(choice_text * (P(',') * choice_text) ^ 0), 'values') *\n+    pipe *\n+    r_brace) / node(Type.Choice),\n+  variable = Ct(dollar * (\n+    var + (\n+    l_brace * var * (\n+      r_brace +\n+      (colon * Cg(V('any_or_text'), 'default') * r_brace) +\n+      (slash * regex * slash * Cg(Ct((V('format') + (C(format_text) / node(Type.Text))) ^ 1), 'format') * slash * options * r_brace)\n+    ))\n+  )) / node(Type.Variable),\n+  format = Ct(dollar * (\n+    format_capture + (\n+    l_brace * format_capture * (\n+      r_brace +\n+      (colon * (\n+        (slash * format_modifier * r_brace) +\n+        (P('+') * if_text * r_brace) +\n+        (P('?') * if_till_colon_text * colon * else_text * r_brace) +\n+        (P('-') * else_text * r_brace) +\n+        (else_text * r_brace)\n+      ))\n+    ))\n+  )) / node(Type.Format),\n+})\n+\n+local M = {}\n+M.NodeType = Type\n+\n+--- Parses the given input into a snippet tree.\n+--- @param input string\n+--- @return vim.snippet.Node<vim.snippet.SnippetData>\n+function M.parse(input)\n+  local snippet = G:match(input)\n+  if not snippet then\n+    error('snippet parsing failed')\n+  end\n+  return snippet --- @type vim.snippet.Node<vim.snippet.SnippetData>",
            "html_url": "https://github.com/neovim/neovim/pull/25352#discussion_r1341988079",
            "id": 1341988079,
            "in_reply_to_id": 1341545309,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5P_Rzv",
            "original_commit_id": "5f7c18e554ad8126176371b1593eddfafa10049c",
            "original_line": 140,
            "original_position": 142,
            "original_start_line": 139,
            "path": "runtime/lua/vim/lsp/_snippet_grammar.lua",
            "position": null,
            "pull_request_review_id": 1651726151,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25352",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1341988079/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-09-30T17:06:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1341988079",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25352#discussion_r1341988305"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25352"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1341988305"
                }
            },
            "author_association": "MEMBER",
            "body": "I will just move all of the current parse snippet logic inside `vim.lsp.util.parse_snippet` (so basically encapsulate the shim there). We can deprecate it later once we have the API.",
            "commit_id": "28e9e175378a780484654cf8b0d9a993eb17a812",
            "created_at": "2023-09-30T17:08:46Z",
            "diff_hunk": "@@ -610,7 +610,7 @@ end\n ---@return string parsed snippet\n function M.parse_snippet(input)\n   local ok, parsed = pcall(function()\n-    return tostring(snippet.parse(input))\n+    return tostring(snippet.parse(input).data.children)",
            "html_url": "https://github.com/neovim/neovim/pull/25352#discussion_r1341988305",
            "id": 1341988305,
            "in_reply_to_id": 1341553980,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5P_R3R",
            "original_commit_id": "5f7c18e554ad8126176371b1593eddfafa10049c",
            "original_line": 613,
            "original_position": 12,
            "original_start_line": 613,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1651726362,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25352",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1341988305/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "LEFT",
            "subject_type": "line",
            "updated_at": "2023-09-30T17:08:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1341988305",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25352#discussion_r1341988786"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25352"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1341988786"
                }
            },
            "author_association": "MEMBER",
            "body": "B-but your diffstats... 😭 ",
            "commit_id": "28e9e175378a780484654cf8b0d9a993eb17a812",
            "created_at": "2023-09-30T17:14:11Z",
            "diff_hunk": "@@ -610,7 +610,7 @@ end\n ---@return string parsed snippet\n function M.parse_snippet(input)\n   local ok, parsed = pcall(function()\n-    return tostring(snippet.parse(input))\n+    return tostring(snippet.parse(input).data.children)",
            "html_url": "https://github.com/neovim/neovim/pull/25352#discussion_r1341988786",
            "id": 1341988786,
            "in_reply_to_id": 1341553980,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5P_R-y",
            "original_commit_id": "5f7c18e554ad8126176371b1593eddfafa10049c",
            "original_line": 613,
            "original_position": 12,
            "original_start_line": 613,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1651726790,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25352",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1341988786/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "LEFT",
            "subject_type": "line",
            "updated_at": "2023-09-30T17:14:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1341988786",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25352#discussion_r1341988925"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25352"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1341988925"
                }
            },
            "author_association": "MEMBER",
            "body": "😭 ",
            "commit_id": "28e9e175378a780484654cf8b0d9a993eb17a812",
            "created_at": "2023-09-30T17:15:39Z",
            "diff_hunk": "@@ -610,7 +610,7 @@ end\n ---@return string parsed snippet\n function M.parse_snippet(input)\n   local ok, parsed = pcall(function()\n-    return tostring(snippet.parse(input))\n+    return tostring(snippet.parse(input).data.children)",
            "html_url": "https://github.com/neovim/neovim/pull/25352#discussion_r1341988925",
            "id": 1341988925,
            "in_reply_to_id": 1341553980,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5P_SA9",
            "original_commit_id": "5f7c18e554ad8126176371b1593eddfafa10049c",
            "original_line": 613,
            "original_position": 12,
            "original_start_line": 613,
            "path": "runtime/lua/vim/lsp/util.lua",
            "position": null,
            "pull_request_review_id": 1651726928,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25352",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1341988925/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "LEFT",
            "subject_type": "line",
            "updated_at": "2023-09-30T17:15:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1341988925",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "Ehhh I need help 😅 I'm struggling with the recursive grammar. The `any` <-> `placeholder` rules cause a stack overflow:\r\n```\r\nany         ::= tabstop | placeholder | choice | variable | text\r\nplaceholder ::= '${' int ':' any '}'\r\n```\r\n\r\nAny hints on how I could handle this?\r\n\r\nEDIT: Nvm I figured it out.",
            "created_at": "2023-09-26T06:20:12Z",
            "html_url": "https://github.com/neovim/neovim/pull/25352#issuecomment-1734898106",
            "id": 1734898106,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25352",
            "node_id": "IC_kwDOAPphoM5naHG6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 2,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1734898106/reactions"
            },
            "updated_at": "2023-09-29T15:41:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1734898106",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@mfussenegger @L3MON4D3 @justinmk do you know why the current snippet parser [returns an array of snippets](https://github.com/neovim/neovim/blob/e46f5aab895f333d23d6adf490e13177c8d3c1d8/runtime/lua/vim/lsp/_snippet.lua#L476-L498) (instead of a single snippet node)? I'm not finding anything in the specs about the insert text of a completion entry either being a single snippet, or multiple ones...",
            "created_at": "2023-09-27T23:47:29Z",
            "html_url": "https://github.com/neovim/neovim/pull/25352#issuecomment-1738249733",
            "id": 1738249733,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25352",
            "node_id": "IC_kwDOAPphoM5nm5YF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1738249733/reactions"
            },
            "updated_at": "2023-09-29T15:41:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1738249733",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "no idea sorry :)",
            "created_at": "2023-09-28T03:08:01Z",
            "html_url": "https://github.com/neovim/neovim/pull/25352#issuecomment-1738371624",
            "id": 1738371624,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25352",
            "node_id": "IC_kwDOAPphoM5nnXIo",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1738371624/reactions"
            },
            "updated_at": "2023-09-29T15:42:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1738371624",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> no idea sorry :)\r\n\r\nNo worries, I pinged you because I saw that you had reviewed a relevant PR in the past :)",
            "created_at": "2023-09-28T03:51:53Z",
            "html_url": "https://github.com/neovim/neovim/pull/25352#issuecomment-1738394367",
            "id": 1738394367,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25352",
            "node_id": "IC_kwDOAPphoM5nncr_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1738394367/reactions"
            },
            "updated_at": "2023-09-29T15:42:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1738394367",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Thanks for your work.\r\n\r\nI think we should introduce `snippet` node as root node of ast as your said.\r\n",
            "created_at": "2023-09-28T04:07:13Z",
            "html_url": "https://github.com/neovim/neovim/pull/25352#issuecomment-1738402671",
            "id": 1738402671,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25352",
            "node_id": "IC_kwDOAPphoM5nnetv",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1738402671/reactions"
            },
            "updated_at": "2023-09-29T15:42:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1738402671",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Thanks for your work.\r\n> \r\n> I think we should introduce `snippet` node as root node of ast as your said.\r\n\r\n@hrsh7th Thank *you* for weighing in (and all the groundwork you've already done here with snippets)! \r\n\r\nAfter looking deeper it seems like parsing an array of nodes is actually needed. For example, `local foo = $1` is a valid server response and consists of a text node followed by a tabstop node. \r\n\r\nThat being said, I find it cleaner to have the parser return an array instead of a parent snippet node.",
            "created_at": "2023-09-28T04:17:32Z",
            "html_url": "https://github.com/neovim/neovim/pull/25352#issuecomment-1738408091",
            "id": 1738408091,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25352",
            "node_id": "IC_kwDOAPphoM5nngCb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1738408091/reactions"
            },
            "updated_at": "2023-09-29T15:42:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1738408091",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "IMO, If we introduce the `snippet root node`, the `local foo = $1` will be the following.\r\n\r\n```\r\n{\r\n  type: 'snippet',\r\n  children: [\r\n    {\r\n      type: 'text',\r\n      value: 'local foo = '\r\n    },\r\n    {\r\n      type: 'tabstop',\r\n      index: 1,\r\n    }\r\n  ]\r\n}\r\n```",
            "created_at": "2023-09-28T04:42:39Z",
            "html_url": "https://github.com/neovim/neovim/pull/25352#issuecomment-1738423028",
            "id": 1738423028,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25352",
            "node_id": "IC_kwDOAPphoM5nnjr0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1738423028/reactions"
            },
            "updated_at": "2023-09-29T15:42:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1738423028",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@hrsh7th That's the current implementation. I'll leave it like that then.",
            "created_at": "2023-09-28T04:55:35Z",
            "html_url": "https://github.com/neovim/neovim/pull/25352#issuecomment-1738430689",
            "id": 1738430689,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25352",
            "node_id": "IC_kwDOAPphoM5nnljh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1738430689/reactions"
            },
            "updated_at": "2023-09-29T15:43:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1738430689",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "sorry. It seems I misunderstood your intent.\r\n\r\nI think it's common format for an AST to have a root node, so I think it's okay to leave it as is. :+1: ",
            "created_at": "2023-09-28T06:09:40Z",
            "html_url": "https://github.com/neovim/neovim/pull/25352#issuecomment-1738527927",
            "id": 1738527927,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25352",
            "node_id": "IC_kwDOAPphoM5nn9S3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1738527927/reactions"
            },
            "updated_at": "2023-09-29T15:43:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1738527927",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/629908?v=4",
                "events_url": "https://api.github.com/users/hrsh7th/events{/privacy}",
                "followers_url": "https://api.github.com/users/hrsh7th/followers",
                "following_url": "https://api.github.com/users/hrsh7th/following{/other_user}",
                "gists_url": "https://api.github.com/users/hrsh7th/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hrsh7th",
                "id": 629908,
                "login": "hrsh7th",
                "node_id": "MDQ6VXNlcjYyOTkwOA==",
                "organizations_url": "https://api.github.com/users/hrsh7th/orgs",
                "received_events_url": "https://api.github.com/users/hrsh7th/received_events",
                "repos_url": "https://api.github.com/users/hrsh7th/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hrsh7th/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hrsh7th/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hrsh7th"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> It seems to simply invoke [tostring on the snippet node](https://github.com/neovim/neovim/blob/b917db062fc673dfbbc6a8c722b05101319ab44e/runtime/lua/vim/lsp/_snippet.lua#L189), but that function doesn't even cover all node types?\r\n\r\nYes, we don't have full snippet support -- especially multiline snippets are not handled, which is why we don't advertise snippet support in our capabilities.\r\n\r\nFor the purpose of your PRs, you can assume that these functions are de facto not used and refactor with extreme prejudice.",
            "created_at": "2023-09-29T05:45:50Z",
            "html_url": "https://github.com/neovim/neovim/pull/25352#issuecomment-1740344793",
            "id": 1740344793,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25352",
            "node_id": "IC_kwDOAPphoM5nu43Z",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1740344793/reactions"
            },
            "updated_at": "2023-09-29T05:45:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1740344793",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": ">  I'm unsure if we should deprecate this function; it feels weird to provide this \"dummy\" snippet parser if snippet support isn't even set in the client's capabilities.\r\n\r\nYes. (It's in lsp.util, after all.)\r\n\r\nIt makes sense to export your full parser, though.",
            "created_at": "2023-09-29T06:07:41Z",
            "html_url": "https://github.com/neovim/neovim/pull/25352#issuecomment-1740358468",
            "id": 1740358468,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25352",
            "node_id": "IC_kwDOAPphoM5nu8NE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1740358468/reactions"
            },
            "updated_at": "2023-09-29T06:08:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1740358468",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> It makes sense to export your full parser, though.\r\n\r\nYou mean exporting the grammar? I think @mfussenegger had suggested leaving it private for now. I think that it would be better to have the new snippet namespace introduced in #25301 to expose the public API.",
            "created_at": "2023-09-29T06:15:49Z",
            "html_url": "https://github.com/neovim/neovim/pull/25352#issuecomment-1740364152",
            "id": 1740364152,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25352",
            "node_id": "IC_kwDOAPphoM5nu9l4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1740364152/reactions"
            },
            "updated_at": "2023-09-29T06:15:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1740364152",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Not the grammar, just a `parse` function (with output TBD).\r\n\r\nBut yes, this is a topic for a later \"expose snippet API\" PR.",
            "created_at": "2023-09-29T06:18:18Z",
            "html_url": "https://github.com/neovim/neovim/pull/25352#issuecomment-1740365981",
            "id": 1740365981,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25352",
            "node_id": "IC_kwDOAPphoM5nu-Cd",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1740365981/reactions"
            },
            "updated_at": "2023-09-29T06:18:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1740365981",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Once this is working, we could (should) set `snippetSupport` to `true` in `lsp/protocol.lua`.",
            "created_at": "2023-09-29T06:20:41Z",
            "html_url": "https://github.com/neovim/neovim/pull/25352#issuecomment-1740367684",
            "id": 1740367684,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25352",
            "node_id": "IC_kwDOAPphoM5nu-dE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1740367684/reactions"
            },
            "updated_at": "2023-09-29T06:23:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1740367684",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Once this is working, we could (should) set snippetSupport to true in lsp/protocol.lua.\r\n\r\nI think we should defer that until we've full expansion support, including integration with completion. \r\nOtherwise language servers can switch from returning candidates like `foo` to `foo(bar, baz)` and if that's then inserted as literal string without tabstop/jump functionality, you end up typing more as you've to backtrack.\r\n\r\n`lsp.util.parse_snippet(input)` is imho another candidate for culling. I'd focus on the high level API `vim.snippet.expand()` / `vim.snippet.jump` .. etc. and treat everything else internal. We can think about exposing the snippet parser/AST once we're happy with the structure. Until that's the case I wouldn't give up on the flexibility of being able to change it without deprecation/breaking changes. \r\n\r\nLSP should eventually become a snippet API consumer, and not host any of the implementation\r\n\r\n@MariaSolOs is this PR otherwise good to go from your side?",
            "created_at": "2023-09-29T15:50:28Z",
            "html_url": "https://github.com/neovim/neovim/pull/25352#issuecomment-1741107440",
            "id": 1741107440,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25352",
            "node_id": "IC_kwDOAPphoM5nxzDw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1741107440/reactions"
            },
            "updated_at": "2023-09-29T15:50:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1741107440",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I think we should defer that until we've full expansion support, including integration with completion\n\nYes, that's what I meant by \"working\". ",
            "created_at": "2023-09-29T16:00:21Z",
            "html_url": "https://github.com/neovim/neovim/pull/25352#issuecomment-1741119618",
            "id": 1741119618,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25352",
            "node_id": "IC_kwDOAPphoM5nx2CC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1741119618/reactions"
            },
            "updated_at": "2023-09-29T16:00:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1741119618",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> `lsp.util.parse_snippet(input)` is imho another candidate for culling. I'd focus on the high level API `vim.snippet.expand()` / `vim.snippet.jump` .. etc. and treat everything else internal. We can think about exposing the snippet parser/AST once we're happy with the structure. Until that's the case I wouldn't give up on the flexibility of being able to change it without deprecation/breaking changes.\r\n\r\nAgreed.\r\n\r\n> @MariaSolOs is this PR otherwise good to go from your side?\r\n\r\nYep, just shimming `parse_snippet` and waiting for those tests to pass again.\r\n\r\n",
            "created_at": "2023-09-30T17:52:06Z",
            "html_url": "https://github.com/neovim/neovim/pull/25352#issuecomment-1741824371",
            "id": 1741824371,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25352",
            "node_id": "IC_kwDOAPphoM5n0iFz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1741824371/reactions"
            },
            "updated_at": "2023-09-30T17:52:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1741824371",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@clason @mfussenegger Thoughts on how we should communicate the parsing changes regarding what's considered a valid snippet? E.g.: With this PR a placeholder node like `${1:$foo $bar}` is no longer valid, since the value (the stuff after the colon) now follow the LSP grammar and hence it's restricted to a single node.\r\n\r\nIs a comment in `news.txt` enough?",
            "created_at": "2023-10-01T05:05:11Z",
            "html_url": "https://github.com/neovim/neovim/pull/25352#issuecomment-1741960167",
            "id": 1741960167,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25352",
            "node_id": "IC_kwDOAPphoM5n1DPn",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1741960167/reactions"
            },
            "updated_at": "2023-10-01T05:05:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1741960167",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Is a comment in news.txt enough?\r\n\r\nI would also mark this commit as breaking (`feat(lsp)!: ...`). We will rewrite the news item(s) anyway as part of the \"full\" snippet PR.",
            "created_at": "2023-10-01T08:50:11Z",
            "html_url": "https://github.com/neovim/neovim/pull/25352#issuecomment-1742010282",
            "id": 1742010282,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25352",
            "node_id": "IC_kwDOAPphoM5n1Peq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1742010282/reactions"
            },
            "updated_at": "2023-10-01T08:50:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1742010282",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > @MariaSolOs is this PR otherwise good to go from your side?\r\n\r\n> Yep, just shimming parse_snippet and waiting for those tests to pass again.\r\n\r\n@mfussenegger @clason the tests are now passing, so this PR is now ready from my side.",
            "created_at": "2023-10-02T15:11:43Z",
            "html_url": "https://github.com/neovim/neovim/pull/25352#issuecomment-1743204261",
            "id": 1743204261,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25352",
            "node_id": "IC_kwDOAPphoM5n5y-l",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1743204261/reactions"
            },
            "updated_at": "2023-10-02T15:11:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1743204261",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/25352/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/25352/commits",
    "created_at": "2023-09-24T23:34:36Z",
    "diff_url": "https://github.com/neovim/neovim/pull/25352.diff",
    "draft": false,
    "head": {
        "label": "MariaSolOs:lpeg-for-snippets",
        "ref": "lpeg-for-snippets",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/MariaSolOs/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/MariaSolOs/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/MariaSolOs/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/MariaSolOs/neovim/branches{/branch}",
            "clone_url": "https://github.com/MariaSolOs/neovim.git",
            "collaborators_url": "https://api.github.com/repos/MariaSolOs/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/MariaSolOs/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/MariaSolOs/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/MariaSolOs/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/MariaSolOs/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/MariaSolOs/neovim/contributors",
            "created_at": "2023-08-05T17:10:58Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/MariaSolOs/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/MariaSolOs/neovim/downloads",
            "events_url": "https://api.github.com/repos/MariaSolOs/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/MariaSolOs/neovim/forks",
            "full_name": "MariaSolOs/neovim",
            "git_commits_url": "https://api.github.com/repos/MariaSolOs/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/MariaSolOs/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/MariaSolOs/neovim/git/tags{/sha}",
            "git_url": "git://github.com/MariaSolOs/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/MariaSolOs/neovim/hooks",
            "html_url": "https://github.com/MariaSolOs/neovim",
            "id": 675070403,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/MariaSolOs/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/MariaSolOs/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/MariaSolOs/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/MariaSolOs/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/MariaSolOs/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/MariaSolOs/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/MariaSolOs/neovim/merges",
            "milestones_url": "https://api.github.com/repos/MariaSolOs/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOKDzBww",
            "notifications_url": "https://api.github.com/repos/MariaSolOs/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/MariaSolOs/neovim/pulls{/number}",
            "pushed_at": "2023-10-02T22:46:08Z",
            "releases_url": "https://api.github.com/repos/MariaSolOs/neovim/releases{/id}",
            "size": 246517,
            "ssh_url": "git@github.com:MariaSolOs/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/MariaSolOs/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/MariaSolOs/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/MariaSolOs/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/MariaSolOs/neovim/subscription",
            "svn_url": "https://github.com/MariaSolOs/neovim",
            "tags_url": "https://api.github.com/repos/MariaSolOs/neovim/tags",
            "teams_url": "https://api.github.com/repos/MariaSolOs/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/MariaSolOs/neovim/git/trees{/sha}",
            "updated_at": "2023-08-09T04:34:06Z",
            "url": "https://api.github.com/repos/MariaSolOs/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "28e9e175378a780484654cf8b0d9a993eb17a812",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
            "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
            "followers_url": "https://api.github.com/users/MariaSolOs/followers",
            "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
            "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/MariaSolOs",
            "id": 62502207,
            "login": "MariaSolOs",
            "node_id": "MDQ6VXNlcjYyNTAyMjA3",
            "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
            "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
            "repos_url": "https://api.github.com/users/MariaSolOs/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/MariaSolOs"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/25352",
    "id": 1527852329,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25352",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        }
    ],
    "locked": false,
    "merge_commit_sha": "eb1f0e8fcca756a00d287e23bf87554e0e7f6dfd",
    "merged_at": "2023-10-02T20:21:35Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5bES0p",
    "number": 25352,
    "patch_url": "https://github.com/neovim/neovim/pull/25352.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/25352/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/28e9e175378a780484654cf8b0d9a993eb17a812",
    "title": "feat(lsp): snippet grammar using lpeg",
    "updated_at": "2023-10-02T22:45:09Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/25352",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
        "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
        "followers_url": "https://api.github.com/users/MariaSolOs/followers",
        "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
        "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/MariaSolOs",
        "id": 62502207,
        "login": "MariaSolOs",
        "node_id": "MDQ6VXNlcjYyNTAyMjA3",
        "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
        "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
        "repos_url": "https://api.github.com/users/MariaSolOs/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/MariaSolOs"
    }
}