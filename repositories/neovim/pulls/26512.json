{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/26512/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/26512/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/26512"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/26512"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/26512/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/26512"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/3c2c022e5e299ecac4663c3813e2db5e2b099ffa"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5066,
            "forks_count": 5066,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1721,
            "open_issues_count": 1721,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2023-12-19T00:15:23Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 246400,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 71892,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2023-12-19T01:02:33Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 71892,
            "watchers_count": 71892,
            "web_commit_signoff_required": false
        },
        "sha": "320e9c1c21817fd76b84345018661f70437fa4b5",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "Problem: We have `P_(BOOL|NUM|STRING)` macros to represent an option's type, which is redundant because `OptValType` can already do that. The current implementation of option type flags is also too limited to allow adding multitype options in the future.\r\n\r\nSolution: Remove `P_(BOOL|NUM|STRING)` and replace it with a new `type_flags` attribute in `vimoption_T`. Also do some groundwork for adding multitype options in the future.\r\n\r\nSide-effects: Attempting to set an invalid keycode option (e.g. `set t_foo=123`) no longer gives an error.\r\n\r\nIt is an eventual goal to replace all (at least most) of the `option_has_type` checks with switch statements, but that is for much later. In a follow-up PR, we can also work on removing the `is_tty_option` checks by giving TTY options their own option index.",
    "closed_at": "2023-12-16T10:39:30Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26512#discussion_r1424633382"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26512"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1424633382"
                }
            },
            "author_association": "MEMBER",
            "body": "Remove this comment",
            "commit_id": "3c2c022e5e299ecac4663c3813e2db5e2b099ffa",
            "created_at": "2023-12-12T22:16:37Z",
            "diff_hunk": "@@ -6,52 +6,49 @@\n // option_vars.h: definition of global variables for settable options\n \n // Option Flags\n-#define P_BOOL         0x01U        ///< the option is boolean\n-#define P_NUM          0x02U        ///< the option is numeric\n-#define P_STRING       0x04U        ///< the option is a string\n-#define P_ALLOCED      0x08U        ///< the string option is in allocated memory,\n+#define P_ALLOCED      0x01U        ///< the option is in allocated memory,\n                                     ///< must use free_string_option() when\n                                     ///< assigning new value. Not set if default is\n                                     ///< the same.\n-#define P_EXPAND       0x10U        ///< environment expansion.  NOTE: P_EXPAND can\n+#define P_EXPAND       0x02U        ///< environment expansion.  NOTE: P_EXPAND can\n                                     ///< never be used for local or hidden options\n-#define P_NO_DEF_EXP   0x20U        ///< do not expand default value\n-#define P_NODEFAULT    0x40U        ///< don't set to default value\n-#define P_DEF_ALLOCED  0x80U        ///< default value is in allocated memory, must\n+#define P_NO_DEF_EXP   0x04U        ///< do not expand default value\n+#define P_NODEFAULT    0x08U        ///< don't set to default value\n+#define P_DEF_ALLOCED  0x10U        ///< default value is in allocated memory, must\n                                     ///< use free() when assigning new value\n-#define P_WAS_SET      0x100U       ///< option has been set/reset\n-#define P_NO_MKRC      0x200U       ///< don't include in :mkvimrc output\n+#define P_WAS_SET      0x20U        ///< option has been set/reset\n+#define P_NO_MKRC      0x40U        ///< don't include in :mkvimrc output\n \n // when option changed, what to display:\n-#define P_UI_OPTION    0x400U       ///< send option to remote UI\n-#define P_RTABL        0x800U       ///< redraw tabline\n-#define P_RSTAT        0x1000U      ///< redraw status lines\n-#define P_RWIN         0x2000U      ///< redraw current window and recompute text\n-#define P_RBUF         0x4000U      ///< redraw current buffer and recompute text\n-#define P_RALL         0x6000U      ///< redraw all windows\n-#define P_RCLR         0x7000U      ///< clear and redraw all\n-\n-#define P_COMMA        0x8000U      ///< comma separated list\n-#define P_ONECOMMA     0x18000U     ///< P_COMMA and cannot have two consecutive\n+#define P_UI_OPTION    0x80U        ///< send option to remote UI\n+#define P_RTABL        0x100U       ///< redraw tabline\n+#define P_RSTAT        0x200U       ///< redraw status lines\n+#define P_RWIN         0x400U       ///< redraw current window and recompute text\n+#define P_RBUF         0x800U       ///< redraw current buffer and recompute text\n+#define P_RALL         0xC00U       ///< redraw all windows\n+#define P_RCLR         0xE00U       ///< clear and redraw all\n+\n+#define P_COMMA        0x1000U      ///< comma separated list\n+#define P_ONECOMMA     0x3000U      ///< P_COMMA and cannot have two consecutive\n                                     ///< commas\n-#define P_NODUP        0x20000U     ///< don't allow duplicate strings\n-#define P_FLAGLIST     0x40000U     ///< list of single-char flags\n-\n-#define P_SECURE       0x80000U     ///< cannot change in modeline or secure mode\n-#define P_GETTEXT      0x100000U    ///< expand default value with _()\n-#define P_NOGLOB       0x200000U    ///< do not use local value for global vimrc\n-#define P_NFNAME       0x400000U    ///< only normal file name chars allowed\n-#define P_INSECURE     0x800000U    ///< option was set from a modeline\n-#define P_PRI_MKRC     0x1000000U   ///< priority for :mkvimrc (setting option\n+#define P_NODUP        0x4000U      ///< don't allow duplicate strings\n+#define P_FLAGLIST     0x8000U      ///< list of single-char flags\n+\n+#define P_SECURE       0x10000U     ///< cannot change in modeline or secure mode\n+#define P_GETTEXT      0x20000U     ///< expand default value with _()\n+#define P_NOGLOB       0x40000U     ///< do not use local value for global vimrc\n+#define P_NFNAME       0x80000U     ///< only normal file name chars allowed\n+#define P_INSECURE     0x100000U    ///< option was set from a modeline\n+#define P_PRI_MKRC     0x200000U    ///< priority for :mkvimrc (setting option\n                                     ///< has side effects)\n-#define P_NO_ML        0x2000000U   ///< not allowed in modeline\n-#define P_CURSWANT     0x4000000U   ///< update curswant required; not needed\n+#define P_NO_ML        0x400000U    ///< not allowed in modeline\n+#define P_CURSWANT     0x800000U    ///< update curswant required; not needed\n                                     ///< when there is a redraw flag\n-#define P_NDNAME       0x8000000U   ///< only normal dir name chars allowed\n-#define P_RWINONLY     0x10000000U  ///< only redraw current window\n-#define P_MLE          0x20000000U  ///< under control of 'modelineexpr'\n-#define P_FUNC         0x40000000U  ///< accept a function reference or a lambda\n-#define P_COLON        0x80000000U  ///< values use colons to create sublists\n+#define P_NDNAME       0x1000000U   ///< only normal dir name chars allowed\n+#define P_RWINONLY     0x2000000U   ///< only redraw current window\n+#define P_MLE          0x4000000U   ///< under control of 'modelineexpr'\n+#define P_FUNC         0x8000000U   ///< accept a function reference or a lambda\n+#define P_COLON        0x10000000U  ///< values use colons to create sublists\n // Warning: Currently we have used all 32 bits for option flags, and adding more\n //          flags will overflow it. Adding another flag will need to change how\n //          it's stored first.",
            "html_url": "https://github.com/neovim/neovim/pull/26512#discussion_r1424633382",
            "id": 1424633382,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U6i4m",
            "original_commit_id": "6799549d8c99ff421e8ec6f5b889f3338164ec39",
            "original_line": 54,
            "original_position": 85,
            "original_start_line": 52,
            "path": "src/nvim/option_vars.h",
            "position": null,
            "pull_request_review_id": 1778528480,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26512",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1424633382/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-12-12T22:16:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1424633382",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26512#discussion_r1425412937"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26512"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425412937"
                }
            },
            "author_association": "MEMBER",
            "body": "??? `:h E113` and `:h E355` are two different help tags at two different places.",
            "commit_id": "3c2c022e5e299ecac4663c3813e2db5e2b099ffa",
            "created_at": "2023-12-13T14:12:19Z",
            "diff_hunk": "@@ -3783,31 +3785,24 @@ int eval_option(const char **const arg, typval_T *const rettv, const bool evalua\n     return OK;\n   }\n \n-  int ret = OK;\n   char c = *option_end;\n   *option_end = NUL;\n \n+  int ret = OK;\n   bool is_tty_opt = is_tty_option(*arg);\n-  OptIndex opt_idx = is_tty_opt ? kOptInvalid : findoption(*arg);\n \n   if (opt_idx == kOptInvalid && !is_tty_opt) {\n     // Only give error if result is going to be used.\n     if (rettv != NULL) {\n-      semsg(_(\"E113: Unknown option: %s\"), *arg);\n+      semsg(_(e_unknown_option2), *arg);",
            "html_url": "https://github.com/neovim/neovim/pull/26512#discussion_r1425412937",
            "id": 1425412937,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U9hNJ",
            "original_commit_id": "53cea94d48f8feea22c19750af364a2074be2e37",
            "original_line": 3797,
            "original_position": 30,
            "original_start_line": 3796,
            "path": "src/nvim/eval.c",
            "position": null,
            "pull_request_review_id": 1779733001,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26512",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425412937/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "LEFT",
            "subject_type": "line",
            "updated_at": "2023-12-13T14:12:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425412937",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26512#discussion_r1425518560"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26512"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425518560"
                }
            },
            "author_association": "MEMBER",
            "body": "could dedupe this a bit.\r\n\r\n```suggestion\r\n    switch (value.data.boolean) {\r\n    case kTrue:\r\n      rettv.vval.v_number = 1;\r\n      rettv.vval.v_bool = kBoolVarTrue;\r\n      rettv.v_type = numbool ? VAR_NUMBER : VAR_BOOL;\r\n      break;\r\n    case kFalse:\r\n      rettv.vval.v_number = 0;\r\n      rettv.vval.v_bool = kBoolVarFalse;\r\n      rettv.v_type = numbool ? VAR_NUMBER : VAR_BOOL;\r\n      break;\r\n    case kNone:\r\n      break;  // return v:null for None boolean value\r\n    }\r\n```",
            "commit_id": "3c2c022e5e299ecac4663c3813e2db5e2b099ffa",
            "created_at": "2023-12-13T15:26:34Z",
            "diff_hunk": "@@ -1900,28 +1904,45 @@ static OptVal tv_to_optval(typval_T *tv, const char *option, uint32_t flags, boo\n \n /// Convert an option value to typval.\n ///\n-/// @param[in]  value  Option value to convert.\n+/// @param[in]  value    Option value to convert.\n+/// @param      numbool  Whether to convert boolean values to number.\n+///                      Used for backwards compatibility.\n ///\n /// @return  OptVal converted to typval.\n-typval_T optval_as_tv(OptVal value)\n+typval_T optval_as_tv(OptVal value, bool numbool)\n {\n   typval_T rettv = { .v_type = VAR_SPECIAL, .vval = { .v_special = kSpecialVarNull } };\n \n   switch (value.type) {\n   case kOptValTypeNil:\n     break;\n   case kOptValTypeBoolean:\n-    switch (value.data.boolean) {\n-    case kTrue:\n-      rettv.v_type = VAR_BOOL;\n-      rettv.vval.v_bool = kBoolVarTrue;\n-      break;\n-    case kFalse:\n-      rettv.v_type = VAR_BOOL;\n-      rettv.vval.v_bool = kBoolVarFalse;\n-      break;\n-    case kNone:\n-      break;  // return v:null for None boolean value\n+    if (numbool) {\n+      switch (value.data.boolean) {\n+      case kTrue:\n+        rettv.v_type = VAR_NUMBER;\n+        rettv.vval.v_number = 1;\n+        break;\n+      case kFalse:\n+        rettv.v_type = VAR_NUMBER;\n+        rettv.vval.v_number = 0;\n+        break;\n+      case kNone:\n+        break;  // return v:null for None boolean value\n+      }\n+    } else {\n+      switch (value.data.boolean) {\n+      case kTrue:\n+        rettv.v_type = VAR_BOOL;\n+        rettv.vval.v_bool = kBoolVarTrue;\n+        break;\n+      case kFalse:\n+        rettv.v_type = VAR_BOOL;\n+        rettv.vval.v_bool = kBoolVarFalse;\n+        break;\n+      case kNone:\n+        break;  // return v:null for None boolean value",
            "html_url": "https://github.com/neovim/neovim/pull/26512#discussion_r1425518560",
            "id": 1425518560,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U96_g",
            "original_commit_id": "23051cfbc420c9404726c9fa7e5b260543f839d4",
            "original_line": 1944,
            "original_position": 140,
            "original_start_line": 1920,
            "path": "src/nvim/eval/vars.c",
            "position": null,
            "pull_request_review_id": 1779902410,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26512",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425518560/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-12-13T15:29:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425518560",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26512#discussion_r1425528527"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26512"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425528527"
                }
            },
            "author_association": "MEMBER",
            "body": "The logic is not quite the same. Previously, `a==b` if _both_ are NULL, but _not_ if one is NULL and one is `\"\"`.\r\n\r\nI think it's useful to be able to say \"if these are both NULL I consider them equal\". But I wouldn't consider them equal if one is NULL and one is empty string.",
            "commit_id": "3c2c022e5e299ecac4663c3813e2db5e2b099ffa",
            "created_at": "2023-12-13T15:33:45Z",
            "diff_hunk": "@@ -512,7 +512,14 @@ void *xmemdup(const void *data, size_t len)\n bool strequal(const char *a, const char *b)\n   FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT\n {\n-  return (a == NULL && b == NULL) || (a && b && strcmp(a, b) == 0);\n+  return strcmp(a ? a : \"\", b ? b : \"\") == 0;",
            "html_url": "https://github.com/neovim/neovim/pull/26512#discussion_r1425528527",
            "id": 1425528527,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U99bP",
            "original_commit_id": "23051cfbc420c9404726c9fa7e5b260543f839d4",
            "original_line": 515,
            "original_position": 5,
            "original_start_line": null,
            "path": "src/nvim/memory.c",
            "position": null,
            "pull_request_review_id": 1779920737,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26512",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425528527/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T15:35:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425528527",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26512#discussion_r1425531059"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26512"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425531059"
                }
            },
            "author_association": "MEMBER",
            "body": "> could dedupe this a bit.\r\n\r\nThanks for this, but setting both `v_number` and `v_bool` would probably not work as intended as `vval` is a union, not a struct. But surrounding that part by an `if` statement could work",
            "commit_id": "3c2c022e5e299ecac4663c3813e2db5e2b099ffa",
            "created_at": "2023-12-13T15:35:38Z",
            "diff_hunk": "@@ -1900,28 +1904,45 @@ static OptVal tv_to_optval(typval_T *tv, const char *option, uint32_t flags, boo\n \n /// Convert an option value to typval.\n ///\n-/// @param[in]  value  Option value to convert.\n+/// @param[in]  value    Option value to convert.\n+/// @param      numbool  Whether to convert boolean values to number.\n+///                      Used for backwards compatibility.\n ///\n /// @return  OptVal converted to typval.\n-typval_T optval_as_tv(OptVal value)\n+typval_T optval_as_tv(OptVal value, bool numbool)\n {\n   typval_T rettv = { .v_type = VAR_SPECIAL, .vval = { .v_special = kSpecialVarNull } };\n \n   switch (value.type) {\n   case kOptValTypeNil:\n     break;\n   case kOptValTypeBoolean:\n-    switch (value.data.boolean) {\n-    case kTrue:\n-      rettv.v_type = VAR_BOOL;\n-      rettv.vval.v_bool = kBoolVarTrue;\n-      break;\n-    case kFalse:\n-      rettv.v_type = VAR_BOOL;\n-      rettv.vval.v_bool = kBoolVarFalse;\n-      break;\n-    case kNone:\n-      break;  // return v:null for None boolean value\n+    if (numbool) {\n+      switch (value.data.boolean) {\n+      case kTrue:\n+        rettv.v_type = VAR_NUMBER;\n+        rettv.vval.v_number = 1;\n+        break;\n+      case kFalse:\n+        rettv.v_type = VAR_NUMBER;\n+        rettv.vval.v_number = 0;\n+        break;\n+      case kNone:\n+        break;  // return v:null for None boolean value\n+      }\n+    } else {\n+      switch (value.data.boolean) {\n+      case kTrue:\n+        rettv.v_type = VAR_BOOL;\n+        rettv.vval.v_bool = kBoolVarTrue;\n+        break;\n+      case kFalse:\n+        rettv.v_type = VAR_BOOL;\n+        rettv.vval.v_bool = kBoolVarFalse;\n+        break;\n+      case kNone:\n+        break;  // return v:null for None boolean value",
            "html_url": "https://github.com/neovim/neovim/pull/26512#discussion_r1425531059",
            "id": 1425531059,
            "in_reply_to_id": 1425518560,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U9-Cz",
            "original_commit_id": "23051cfbc420c9404726c9fa7e5b260543f839d4",
            "original_line": 1944,
            "original_position": 140,
            "original_start_line": 1920,
            "path": "src/nvim/eval/vars.c",
            "position": null,
            "pull_request_review_id": 1779924929,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26512",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425531059/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-12-13T15:49:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425531059",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26512#discussion_r1425532516"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26512"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425532516"
                }
            },
            "author_association": "MEMBER",
            "body": "I am aware of this technical change, but functionally it still behaves the same everywhere it's called.\r\nAnd imo, this behavior makes more sense if we don't want to discriminate between 0-length strings.\r\nCan change this back if required, though.",
            "commit_id": "3c2c022e5e299ecac4663c3813e2db5e2b099ffa",
            "created_at": "2023-12-13T15:36:44Z",
            "diff_hunk": "@@ -512,7 +512,14 @@ void *xmemdup(const void *data, size_t len)\n bool strequal(const char *a, const char *b)\n   FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT\n {\n-  return (a == NULL && b == NULL) || (a && b && strcmp(a, b) == 0);\n+  return strcmp(a ? a : \"\", b ? b : \"\") == 0;",
            "html_url": "https://github.com/neovim/neovim/pull/26512#discussion_r1425532516",
            "id": 1425532516,
            "in_reply_to_id": 1425528527,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U9-Zk",
            "original_commit_id": "23051cfbc420c9404726c9fa7e5b260543f839d4",
            "original_line": 515,
            "original_position": 5,
            "original_start_line": null,
            "path": "src/nvim/memory.c",
            "position": null,
            "pull_request_review_id": 1779927403,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26512",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425532516/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T15:36:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425532516",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26512#discussion_r1425535304"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26512"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425535304"
                }
            },
            "author_association": "MEMBER",
            "body": "should this be in the `#else`?",
            "commit_id": "3c2c022e5e299ecac4663c3813e2db5e2b099ffa",
            "created_at": "2023-12-13T15:38:50Z",
            "diff_hunk": "@@ -40,3 +40,29 @@ int xisnan(double d)\n {\n   return FP_NAN == xfpclassify(d);\n }\n+\n+/// Count trailing zeroes at the end of bit field.\n+int xctz(uint64_t x)\n+{\n+  // If x == 0, that means all bits are zeroes.\n+  if (x == 0) {",
            "html_url": "https://github.com/neovim/neovim/pull/26512#discussion_r1425535304",
            "id": 1425535304,
            "line": 48,
            "node_id": "PRRC_kwDOAPphoM5U9_FI",
            "original_commit_id": "23051cfbc420c9404726c9fa7e5b260543f839d4",
            "original_line": 48,
            "original_position": 9,
            "original_start_line": null,
            "path": "src/nvim/math.c",
            "position": 9,
            "pull_request_review_id": 1779932021,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26512",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425535304/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T15:38:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425535304",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26512#discussion_r1425540236"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26512"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425540236"
                }
            },
            "author_association": "MEMBER",
            "body": "```c\r\n  case kOptValTypeBoolean:\r\n    if (value.data.boolean != kNone) {\r\n      if (numbool) {\r\n        rettv.v_type = VAR_NUMBER;\r\n        rettv.vval.v_number = value.data.boolean == kTrue;\r\n      } else {\r\n        rettv.v_type = VAR_BOOL;\r\n        rettv.vval.v_bool = value.data.boolean == kTrue;\r\n      }\r\n    }\r\n    break;  // return v:null for None boolean value.\r\n```\r\n\r\nThis seems to work",
            "commit_id": "3c2c022e5e299ecac4663c3813e2db5e2b099ffa",
            "created_at": "2023-12-13T15:42:25Z",
            "diff_hunk": "@@ -1900,28 +1904,45 @@ static OptVal tv_to_optval(typval_T *tv, const char *option, uint32_t flags, boo\n \n /// Convert an option value to typval.\n ///\n-/// @param[in]  value  Option value to convert.\n+/// @param[in]  value    Option value to convert.\n+/// @param      numbool  Whether to convert boolean values to number.\n+///                      Used for backwards compatibility.\n ///\n /// @return  OptVal converted to typval.\n-typval_T optval_as_tv(OptVal value)\n+typval_T optval_as_tv(OptVal value, bool numbool)\n {\n   typval_T rettv = { .v_type = VAR_SPECIAL, .vval = { .v_special = kSpecialVarNull } };\n \n   switch (value.type) {\n   case kOptValTypeNil:\n     break;\n   case kOptValTypeBoolean:\n-    switch (value.data.boolean) {\n-    case kTrue:\n-      rettv.v_type = VAR_BOOL;\n-      rettv.vval.v_bool = kBoolVarTrue;\n-      break;\n-    case kFalse:\n-      rettv.v_type = VAR_BOOL;\n-      rettv.vval.v_bool = kBoolVarFalse;\n-      break;\n-    case kNone:\n-      break;  // return v:null for None boolean value\n+    if (numbool) {\n+      switch (value.data.boolean) {\n+      case kTrue:\n+        rettv.v_type = VAR_NUMBER;\n+        rettv.vval.v_number = 1;\n+        break;\n+      case kFalse:\n+        rettv.v_type = VAR_NUMBER;\n+        rettv.vval.v_number = 0;\n+        break;\n+      case kNone:\n+        break;  // return v:null for None boolean value\n+      }\n+    } else {\n+      switch (value.data.boolean) {\n+      case kTrue:\n+        rettv.v_type = VAR_BOOL;\n+        rettv.vval.v_bool = kBoolVarTrue;\n+        break;\n+      case kFalse:\n+        rettv.v_type = VAR_BOOL;\n+        rettv.vval.v_bool = kBoolVarFalse;\n+        break;\n+      case kNone:\n+        break;  // return v:null for None boolean value",
            "html_url": "https://github.com/neovim/neovim/pull/26512#discussion_r1425540236",
            "id": 1425540236,
            "in_reply_to_id": 1425518560,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U-ASM",
            "original_commit_id": "23051cfbc420c9404726c9fa7e5b260543f839d4",
            "original_line": 1944,
            "original_position": 140,
            "original_start_line": 1920,
            "path": "src/nvim/eval/vars.c",
            "position": null,
            "pull_request_review_id": 1779939937,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26512",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425540236/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-12-13T15:42:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425540236",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26512#discussion_r1425540734"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26512"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425540734"
                }
            },
            "author_association": "MEMBER",
            "body": "Nope, the builtin ctz is undefined for x == 0",
            "commit_id": "3c2c022e5e299ecac4663c3813e2db5e2b099ffa",
            "created_at": "2023-12-13T15:42:47Z",
            "diff_hunk": "@@ -40,3 +40,29 @@ int xisnan(double d)\n {\n   return FP_NAN == xfpclassify(d);\n }\n+\n+/// Count trailing zeroes at the end of bit field.\n+int xctz(uint64_t x)\n+{\n+  // If x == 0, that means all bits are zeroes.\n+  if (x == 0) {",
            "html_url": "https://github.com/neovim/neovim/pull/26512#discussion_r1425540734",
            "id": 1425540734,
            "in_reply_to_id": 1425535304,
            "line": 48,
            "node_id": "PRRC_kwDOAPphoM5U-AZ-",
            "original_commit_id": "23051cfbc420c9404726c9fa7e5b260543f839d4",
            "original_line": 48,
            "original_position": 9,
            "original_start_line": null,
            "path": "src/nvim/math.c",
            "position": 9,
            "pull_request_review_id": 1779940737,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26512",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425540734/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T15:42:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425540734",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26512#discussion_r1425547562"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26512"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425547562"
                }
            },
            "author_association": "MEMBER",
            "body": "I wouldn't change the semantics. E.g. for environment variables, NULL means something different than empty string. `strequal` could no longer be used for that case.\r\n\r\nIf we want to change this we need to think about all call sites and should be done in a separate PR.",
            "commit_id": "3c2c022e5e299ecac4663c3813e2db5e2b099ffa",
            "created_at": "2023-12-13T15:47:35Z",
            "diff_hunk": "@@ -512,7 +512,14 @@ void *xmemdup(const void *data, size_t len)\n bool strequal(const char *a, const char *b)\n   FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT\n {\n-  return (a == NULL && b == NULL) || (a && b && strcmp(a, b) == 0);\n+  return strcmp(a ? a : \"\", b ? b : \"\") == 0;",
            "html_url": "https://github.com/neovim/neovim/pull/26512#discussion_r1425547562",
            "id": 1425547562,
            "in_reply_to_id": 1425528527,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U-CEq",
            "original_commit_id": "23051cfbc420c9404726c9fa7e5b260543f839d4",
            "original_line": 515,
            "original_position": 5,
            "original_start_line": null,
            "path": "src/nvim/memory.c",
            "position": null,
            "pull_request_review_id": 1779952487,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26512",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425547562/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T15:47:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425547562",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26512#discussion_r1425550948"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26512"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425550948"
                }
            },
            "author_association": "MEMBER",
            "body": "That's valid. How do you think `strnequal` (not `strequal`) should behave in that case for `n == 0` if `a == NULL` and `b != NULL`?",
            "commit_id": "3c2c022e5e299ecac4663c3813e2db5e2b099ffa",
            "created_at": "2023-12-13T15:50:03Z",
            "diff_hunk": "@@ -512,7 +512,14 @@ void *xmemdup(const void *data, size_t len)\n bool strequal(const char *a, const char *b)\n   FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT\n {\n-  return (a == NULL && b == NULL) || (a && b && strcmp(a, b) == 0);\n+  return strcmp(a ? a : \"\", b ? b : \"\") == 0;",
            "html_url": "https://github.com/neovim/neovim/pull/26512#discussion_r1425550948",
            "id": 1425550948,
            "in_reply_to_id": 1425528527,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U-C5k",
            "original_commit_id": "23051cfbc420c9404726c9fa7e5b260543f839d4",
            "original_line": 515,
            "original_position": 5,
            "original_start_line": null,
            "path": "src/nvim/memory.c",
            "position": null,
            "pull_request_review_id": 1779957851,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26512",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425550948/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T15:50:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425550948",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26512#discussion_r1425559520"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26512"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425559520"
                }
            },
            "author_association": "MEMBER",
            "body": "I changed `strequal` back to what it was before and made `strnequal` mimic its behavior as well. Lmk if you think it looks fine.",
            "commit_id": "3c2c022e5e299ecac4663c3813e2db5e2b099ffa",
            "created_at": "2023-12-13T15:56:08Z",
            "diff_hunk": "@@ -512,7 +512,14 @@ void *xmemdup(const void *data, size_t len)\n bool strequal(const char *a, const char *b)\n   FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT\n {\n-  return (a == NULL && b == NULL) || (a && b && strcmp(a, b) == 0);\n+  return strcmp(a ? a : \"\", b ? b : \"\") == 0;",
            "html_url": "https://github.com/neovim/neovim/pull/26512#discussion_r1425559520",
            "id": 1425559520,
            "in_reply_to_id": 1425528527,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U-E_g",
            "original_commit_id": "23051cfbc420c9404726c9fa7e5b260543f839d4",
            "original_line": 515,
            "original_position": 5,
            "original_start_line": null,
            "path": "src/nvim/memory.c",
            "position": null,
            "pull_request_review_id": 1779971438,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26512",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425559520/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-14T01:08:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425559520",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26512#discussion_r1425567341"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26512"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425567341"
                }
            },
            "author_association": "MEMBER",
            "body": "> How do you think `strnequal` (not `strequal`) should behave\r\n\r\nsame as `strequal`",
            "commit_id": "3c2c022e5e299ecac4663c3813e2db5e2b099ffa",
            "created_at": "2023-12-13T16:01:53Z",
            "diff_hunk": "@@ -512,7 +512,14 @@ void *xmemdup(const void *data, size_t len)\n bool strequal(const char *a, const char *b)\n   FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT\n {\n-  return (a == NULL && b == NULL) || (a && b && strcmp(a, b) == 0);\n+  return strcmp(a ? a : \"\", b ? b : \"\") == 0;",
            "html_url": "https://github.com/neovim/neovim/pull/26512#discussion_r1425567341",
            "id": 1425567341,
            "in_reply_to_id": 1425528527,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U-G5t",
            "original_commit_id": "23051cfbc420c9404726c9fa7e5b260543f839d4",
            "original_line": 515,
            "original_position": 5,
            "original_start_line": null,
            "path": "src/nvim/memory.c",
            "position": null,
            "pull_request_review_id": 1779984215,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26512",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425567341/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T16:01:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425567341",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26512#discussion_r1426019205"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26512"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1426019205"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n#include \"nvim/option_defs.h\"  // IWYU pragma: keep\r\n```",
            "commit_id": "3c2c022e5e299ecac4663c3813e2db5e2b099ffa",
            "created_at": "2023-12-14T00:27:39Z",
            "diff_hunk": "@@ -13,6 +13,7 @@\n #include \"nvim/hashtab_defs.h\"\n #include \"nvim/macros_defs.h\"\n #include \"nvim/mbyte_defs.h\"  // IWYU pragma: keep\n+#include \"nvim/option_defs.h\"",
            "html_url": "https://github.com/neovim/neovim/pull/26512#discussion_r1426019205",
            "id": 1426019205,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U_1OF",
            "original_commit_id": "8b3ba1bef0d993eaa701331dbdf123160472998c",
            "original_line": 16,
            "original_position": 4,
            "original_start_line": null,
            "path": "src/nvim/eval.h",
            "position": null,
            "pull_request_review_id": 1780698685,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26512",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1426019205/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-14T00:27:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1426019205",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26512#discussion_r1426071744"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26512"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1426071744"
                }
            },
            "author_association": "MEMBER",
            "body": "These two functions should now be moved to option.c. Then `find_tty_option_end()` can be static.",
            "commit_id": "3c2c022e5e299ecac4663c3813e2db5e2b099ffa",
            "created_at": "2023-12-14T01:43:41Z",
            "diff_hunk": "@@ -8138,13 +8133,85 @@ void ex_execute(exarg_T *eap)\n   eap->nextcmd = check_nextcmd(arg);\n }\n \n-/// Skip over the name of an option: \"&option\", \"&g:option\" or \"&l:option\".\n+/// Skip over the name of a TTY option or keycode option.\n+///\n+/// @param[in]  arg  Start of TTY or keycode option name.\n+///\n+/// @return NULL when option isn't a TTY or keycode option. Otherwise pointer to the char after the\n+/// option name.\n+const char *find_tty_option_end(const char *arg)\n+{\n+  if (strequal(arg, \"term\")) {\n+    return arg + sizeof(\"term\") - 1;\n+  } else if (strequal(arg, \"ttytype\")) {\n+    return arg + sizeof(\"ttytype\") - 1;\n+  }\n+\n+  const char *p = arg;\n+  bool delimit = false;  // whether to delimit <\n+\n+  if (arg[0] == '<') {\n+    // look out for <t_>;>\n+    delimit = true;\n+    p++;\n+  }\n+  if (p[0] == 't' && p[1] == '_' && p[2] && p[3]) {\n+    p += 4;\n+  } else if (delimit) {\n+    // Search for delimiting >.\n+    while (*p != NUL && *p != '>') {\n+      p++;\n+    }\n+  }\n+  // Return NULL when delimiting > is not found.\n+  if (delimit) {\n+    if (*p != '>') {\n+      return NULL;\n+    }\n+    p++;\n+  }\n+\n+  return arg == p ? NULL : p;\n+}\n+\n+/// Skip over the name of an option.\n+///\n+/// @param[in]   arg       Start of option name.\n+/// @param[out]  opt_idxp  Set to option index in options[] table.\n+///\n+/// @return NULL when no option name found. Otherwise pointer to the char after the option name.\n+const char *find_option_end(const char *arg, OptIndex *opt_idxp)\n+{\n+  const char *p;\n+\n+  // Handle TTY and keycode options separately.\n+  if ((p = find_tty_option_end(arg)) != NULL) {\n+    *opt_idxp = kOptInvalid;\n+    return p;\n+  } else {\n+    p = arg;\n+  }\n+\n+  if (!ASCII_ISALPHA(*p)) {\n+    *opt_idxp = kOptInvalid;\n+    return NULL;\n+  }\n+  while (ASCII_ISALPHA(*p)) {\n+    p++;\n+  }\n+\n+  *opt_idxp = findoption_len(arg, (size_t)(p - arg));\n+  return p;\n+}",
            "html_url": "https://github.com/neovim/neovim/pull/26512#discussion_r1426071744",
            "id": 1426071744,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5VACDA",
            "original_commit_id": "cbf3f106236fc9de43f39209e82d3c11677b0d36",
            "original_line": 8205,
            "original_position": 117,
            "original_start_line": 8136,
            "path": "src/nvim/eval.c",
            "position": null,
            "pull_request_review_id": 1780789722,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26512",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1426071744/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-12-14T01:44:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1426071744",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        }
    ],
    "comment_regular_data": [],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/26512/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/26512/commits",
    "created_at": "2023-12-10T19:48:35Z",
    "diff_url": "https://github.com/neovim/neovim/pull/26512.diff",
    "draft": false,
    "head": {
        "label": "famiu:refactor/options/type_flags",
        "ref": "refactor/options/type_flags",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/famiu/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/famiu/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/famiu/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/famiu/neovim/branches{/branch}",
            "clone_url": "https://github.com/famiu/neovim.git",
            "collaborators_url": "https://api.github.com/repos/famiu/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/famiu/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/famiu/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/famiu/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/famiu/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/famiu/neovim/contributors",
            "created_at": "2021-10-11T04:58:58Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/famiu/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/famiu/neovim/downloads",
            "events_url": "https://api.github.com/repos/famiu/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/famiu/neovim/forks",
            "full_name": "famiu/neovim",
            "git_commits_url": "https://api.github.com/repos/famiu/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/famiu/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/famiu/neovim/git/tags{/sha}",
            "git_url": "git://github.com/famiu/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/famiu/neovim/hooks",
            "html_url": "https://github.com/famiu/neovim",
            "id": 415783665,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/famiu/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/famiu/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/famiu/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/famiu/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/famiu/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/famiu/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/famiu/neovim/merges",
            "milestones_url": "https://api.github.com/repos/famiu/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOGMha8Q",
            "notifications_url": "https://api.github.com/repos/famiu/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/famiu/neovim/pulls{/number}",
            "pushed_at": "2023-12-18T17:33:44Z",
            "releases_url": "https://api.github.com/repos/famiu/neovim/releases{/id}",
            "size": 240814,
            "ssh_url": "git@github.com:famiu/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/famiu/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/famiu/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/famiu/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/famiu/neovim/subscription",
            "svn_url": "https://github.com/famiu/neovim",
            "tags_url": "https://api.github.com/repos/famiu/neovim/tags",
            "teams_url": "https://api.github.com/repos/famiu/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/famiu/neovim/git/trees{/sha}",
            "updated_at": "2022-08-29T10:09:33Z",
            "url": "https://api.github.com/repos/famiu/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "3c2c022e5e299ecac4663c3813e2db5e2b099ffa",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
            "events_url": "https://api.github.com/users/famiu/events{/privacy}",
            "followers_url": "https://api.github.com/users/famiu/followers",
            "following_url": "https://api.github.com/users/famiu/following{/other_user}",
            "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/famiu",
            "id": 29580810,
            "login": "famiu",
            "node_id": "MDQ6VXNlcjI5NTgwODEw",
            "organizations_url": "https://api.github.com/users/famiu/orgs",
            "received_events_url": "https://api.github.com/users/famiu/received_events",
            "repos_url": "https://api.github.com/users/famiu/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/famiu"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/26512",
    "id": 1637790196,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26512",
    "labels": [
        {
            "color": "C5DEF5",
            "default": false,
            "description": "changes that are not features or bugfixes",
            "id": 106949155,
            "name": "refactor",
            "node_id": "MDU6TGFiZWwxMDY5NDkxNTU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/refactor"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "",
            "id": 4242493821,
            "name": "options",
            "node_id": "LA_kwDOAPphoM7831F9",
            "url": "https://api.github.com/repos/neovim/neovim/labels/options"
        }
    ],
    "locked": false,
    "merge_commit_sha": "7e7da962de404e3a0952bcc0adc6fbe53eda3cfb",
    "merged_at": "2023-12-16T10:39:30Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5hnrH0",
    "number": 26512,
    "patch_url": "https://github.com/neovim/neovim/pull/26512.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/26512/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/3c2c022e5e299ecac4663c3813e2db5e2b099ffa",
    "title": "refactor(options): remove option type macros",
    "updated_at": "2023-12-16T12:30:03Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/26512",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
        "events_url": "https://api.github.com/users/famiu/events{/privacy}",
        "followers_url": "https://api.github.com/users/famiu/followers",
        "following_url": "https://api.github.com/users/famiu/following{/other_user}",
        "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/famiu",
        "id": 29580810,
        "login": "famiu",
        "node_id": "MDQ6VXNlcjI5NTgwODEw",
        "organizations_url": "https://api.github.com/users/famiu/orgs",
        "received_events_url": "https://api.github.com/users/famiu/received_events",
        "repos_url": "https://api.github.com/users/famiu/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/famiu"
    }
}