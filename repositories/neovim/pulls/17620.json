{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/17620/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/17620/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/17620"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/17620"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/17620/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/17620"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/fa59456d0bdd1c816e21d00b6b8473c83c466759"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 4786,
            "forks_count": 4786,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1682,
            "open_issues_count": 1682,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2023-07-24T00:01:55Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 245746,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 67664,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2023-07-24T01:30:51Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 67664,
            "watchers_count": 67664,
            "web_commit_signoff_required": false
        },
        "sha": "e55ba16a0e3a1a363deb16d1da7b4d80db37a494",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "Convenience wrapper for `vim.loop.spawn` with IO setup.\r\n\r\nDesigned to handle the main boilerplate for the majority of `vim.loop.spawn` applications, not intended to include the \r\nkitchen sink.\r\n\r\n### Examples:\r\n\r\n```lua\r\nlocal on_exit = function(code, signal, stdout, stderr)\r\n  print(code)\r\n  print(signal)\r\n  print(stdout)\r\n  print(stderr)\r\nend\r\n\r\nvim.subprocess('echo hello', on_exit)\r\nvim.subprocess({'echo', 'hello'}, on_exit)\r\nvim.subprocess({command = 'echo', args = {'hello'}}, on_exit)\r\n```\r\n### API\r\n```lua\r\n--- Run a subprocess\r\n---\r\n--- Convenience wrapper for vim.loop.spawn with automatic IO handling.\r\n---\r\n--- @param spec string|table When passed as a string or a string array, the argument is interpreted\r\n---                          as a command.\r\n---\r\n---                          When passed as a keyed table, accepts all options as vim.loop.spawn in\r\n---                          addition to:\r\n---                          - command: (string) command to execute\r\n---                          - input: (string|string array) cannot be used with stdin\r\n---                          - stdin: (uv_pipe_t) cannot be used with input\r\n---                          - stdout: (uv_pipe_t)\r\n---                          - stderr: (uv_pipe_t)\r\n---\r\n--- @param on_exit function  Called when subprocess exits. Has the following arguments:\r\n---                          - code: (integer)\r\n---                          - signal: (integer)\r\n---                          - stdout: (string), nil if stdout argument is passed\r\n---                          - stderr: (string), nil if stderr argument is passed\r\n---\r\n---  @returns process handle (uv_process_t userdata), PID (integer)\r\n```\r\n\r\n### Applications in mind:\r\n- [gitsigns.nvim subprocess module](https://github.com/lewis6991/gitsigns.nvim/blob/779f4eb59047ef7faa41e71d261d041edfabfb39/teal/gitsigns/subprocess.tl)\r\n- [null-ls.nvim generator factory](https://github.com/jose-elias-alvarez/null-ls.nvim/blob/2f305569c85818e5c43d7b1ba592c3d047c3377b/lua/null-ls/helpers/generator_factory.lua#L108)\r\n- [packer.nvim jobs](https://github.com/wbthomason/packer.nvim/blob/6afb67460283f0e990d35d229fd38fdc04063e0a/lua/packer/jobs.lua)\r\n- Eliminate https://github.com/neovim/neovim/blob/fae754073289566051433fae74ec65783f9e7a6a/runtime/autoload/health/provider.vim#L38-L113\r\n\r\n### Possible enhancements:\r\n- add `on_stdout`/`on_stderr` callback functions similar to Plenary Jobs\r\n- Make it synchronous if `on_exit` is not provided.\r\n- Allow stdout/stderr pipes to be disabled by passing them as `false`\r\n\r\n### Todo\r\n- [ ] Rename to `jobstart()`\r\n- [ ] Allow to be called synchronously",
    "closed_at": "2023-05-31T11:22:36Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/17620#discussion_r820772184"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/17620"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/820772184"
                }
            },
            "author_association": "MEMBER",
            "body": "If I remember correctly from my use of uv.spawn in nvim-dap and nvim-lint, the spawn callback is not called if the `spawn` call errors because the command doesn't exist. In that case the pipes would never be closed and `on_exit` wouldn't get called\r\n",
            "commit_id": "fa59456d0bdd1c816e21d00b6b8473c83c466759",
            "created_at": "2022-03-07T14:44:04Z",
            "diff_hunk": "@@ -0,0 +1,153 @@\n+local uv = vim.loop\n+\n+local function handle_input(pipe, input)\n+  if type(input) == 'table' then\n+    for _, v in ipairs(input) do\n+      pipe:write(v)\n+      pipe:write('\\n')\n+    end\n+  elseif type(input) == 'string' then\n+    pipe:write(input)\n+  end\n+\n+  -- Shutdown the write side of the duplex stream and then close the pipe.\n+  -- Note shutdown will wait for all the pending write requests to complete\n+  pipe:shutdown(function()\n+    if pipe then\n+      pipe:close()\n+    end\n+  end)\n+end\n+\n+local function parse_spec(spec)\n+  if type(spec) == 'string' then\n+    spec = vim.split(spec, '%s')\n+  end\n+\n+  return {\n+    command = spec[1],\n+    args = {select(2, unpack(spec))}\n+  }\n+end\n+\n+local function handle_output(pipe, output)\n+  pipe:read_start(function(err, data)\n+    if err then error(err) end\n+    output[#output+1] = data\n+  end)\n+end\n+\n+local function close_pipe(pipe)\n+  if pipe then\n+    pipe:read_stop()\n+    if not pipe:is_closing() then\n+      pipe:close()\n+    end\n+  end\n+end\n+\n+--- Run a subprocess\n+---\n+--- Convenience wrapper for vim.loop.spawn with automatic IO handling.\n+---\n+--- Examples:\n+--- <pre>\n+---\n+---   local on_exit = function(code, signal, stdout, stderr)\n+---     print(code)\n+---     print(signal)\n+---     print(stdout)\n+---     print(stderr)\n+---   end\n+---\n+---   vim.subprocess('echo hello', on_exit)\n+---   vim.subprocess({'echo', 'hello'}, on_exit)\n+---   vim.subprocess({command = 'echo', args = {'hello'}}, on_exit)\n+---\n+--- </pre>\n+---\n+--- @param spec table   When passed as a string or a string array, the argument is interpreted\n+---                     as a command.\n+---\n+---                     When passed as a keyed table, accepts all options as vim.loop.spawn in\n+---                     addition to:\n+---                     - command: (string) command to execute\n+---                     - input: (string|string array) cannot be used with stdin\n+---                     - stdin: (uv_pipe_t) cannot be used with input\n+---                     - stdout: (uv_pipe_t)\n+---                     - stderr: (uv_pipe_t)\n+---\n+--- @param on_exit function  Called when subprocess exits. Has the following arguments:\n+---                          - code: (integer)\n+---                          - signal: (integer)\n+---                          - stdout: (string), nil if stdout argument is passed\n+---                          - stderr: (string), nil if stderr argument is passed\n+---\n+---  @returns process handle (uv_process_t userdata), PID (integer)\n+local function subprocess(spec, on_exit)\n+  vim.validate {\n+    spec = { spec, { 'table', 'string' }},\n+    on_exit = { on_exit, 'function' },\n+  }\n+\n+  if spec.stdin and spec.input then\n+    error('stdin cannot be used with input')\n+  end\n+\n+  if not spec.command then\n+    -- Assume spec is raw command as string or array\n+    spec = parse_spec(spec)\n+  end\n+\n+  local stdout = spec.stdout or uv.new_pipe(false)\n+  local stderr = spec.stderr or uv.new_pipe(false)\n+  local stdin\n+\n+  if not spec.stdin and spec.input then\n+    stdin = uv.new_pipe(false)\n+  end\n+\n+  -- Define data buckets as tables and concatenate the elements at the end as one operation.\n+  local stdout_data, stderr_data\n+\n+  local spec0 = vim.deepcopy(spec)\n+\n+  -- Remove non luv.spawn arguments\n+  for _, s in ipairs{'input', 'command', 'stdout', 'stderr', 'stdin'} do\n+    spec0[s] = nil\n+  end\n+\n+  spec0.stdio = { stdin, stdout, stderr }\n+\n+  local handle, pid = uv.spawn(spec.command, spec0,\n+    function(code, signal)\n+      close_pipe(stdin)\n+      close_pipe(stdout)\n+      close_pipe(stderr)",
            "html_url": "https://github.com/neovim/neovim/pull/17620#discussion_r820772184",
            "id": 820772184,
            "line": 134,
            "node_id": "PRRC_kwDOAPphoM4w6_1Y",
            "original_commit_id": "fac65c7dedcaf2301b8d814b0f97fcfc075c7f10",
            "original_line": 134,
            "original_position": 126,
            "original_start_line": 124,
            "path": "runtime/lua/vim/subprocess.lua",
            "position": 134,
            "pull_request_review_id": 901786303,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/17620",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/820772184/reactions"
            },
            "side": "RIGHT",
            "start_line": 132,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-03-07T16:33:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/820772184",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/17620#discussion_r820775616"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/17620"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/820775616"
                }
            },
            "author_association": "MEMBER",
            "body": "I think the comment is not really true, in nvim-lint I had to add something like this:\r\n\r\n```lua\r\nstdin:write('', function()\r\n  stdin:shutdown(function()\r\n    stdin:close()\r\n  end)\r\nend)\r\n```\r\n\r\nSee https://github.com/mfussenegger/nvim-lint/commit/d6a76b326b82625219b52b62c3b6d47a1fd4b319 and https://github.com/mfussenegger/nvim-lint/commit/b6b82c243b55ef0309bce2ea9b1a092548930204\r\n",
            "commit_id": "fa59456d0bdd1c816e21d00b6b8473c83c466759",
            "created_at": "2022-03-07T14:47:33Z",
            "diff_hunk": "@@ -0,0 +1,153 @@\n+local uv = vim.loop\n+\n+local function handle_input(pipe, input)\n+  if type(input) == 'table' then\n+    for _, v in ipairs(input) do\n+      pipe:write(v)\n+      pipe:write('\\n')\n+    end\n+  elseif type(input) == 'string' then\n+    pipe:write(input)\n+  end\n+\n+  -- Shutdown the write side of the duplex stream and then close the pipe.\n+  -- Note shutdown will wait for all the pending write requests to complete\n+  pipe:shutdown(function()\n+    if pipe then\n+      pipe:close()\n+    end\n+  end)",
            "html_url": "https://github.com/neovim/neovim/pull/17620#discussion_r820775616",
            "id": 820775616,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4w7ArA",
            "original_commit_id": "fac65c7dedcaf2301b8d814b0f97fcfc075c7f10",
            "original_line": 24,
            "original_position": 19,
            "original_start_line": 13,
            "path": "runtime/lua/vim/subprocess.lua",
            "position": null,
            "pull_request_review_id": 901786303,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/17620",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/820775616/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-03-07T16:33:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/820775616",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38700?v=4",
                "events_url": "https://api.github.com/users/mfussenegger/events{/privacy}",
                "followers_url": "https://api.github.com/users/mfussenegger/followers",
                "following_url": "https://api.github.com/users/mfussenegger/following{/other_user}",
                "gists_url": "https://api.github.com/users/mfussenegger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mfussenegger",
                "id": 38700,
                "login": "mfussenegger",
                "node_id": "MDQ6VXNlcjM4NzAw",
                "organizations_url": "https://api.github.com/users/mfussenegger/orgs",
                "received_events_url": "https://api.github.com/users/mfussenegger/received_events",
                "repos_url": "https://api.github.com/users/mfussenegger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mfussenegger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mfussenegger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mfussenegger"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/17620#discussion_r836568968"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/17620"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/836568968"
                }
            },
            "author_association": "MEMBER",
            "body": "Good catch",
            "commit_id": "fa59456d0bdd1c816e21d00b6b8473c83c466759",
            "created_at": "2022-03-28T15:36:29Z",
            "diff_hunk": "@@ -0,0 +1,153 @@\n+local uv = vim.loop\n+\n+local function handle_input(pipe, input)\n+  if type(input) == 'table' then\n+    for _, v in ipairs(input) do\n+      pipe:write(v)\n+      pipe:write('\\n')\n+    end\n+  elseif type(input) == 'string' then\n+    pipe:write(input)\n+  end\n+\n+  -- Shutdown the write side of the duplex stream and then close the pipe.\n+  -- Note shutdown will wait for all the pending write requests to complete\n+  pipe:shutdown(function()\n+    if pipe then\n+      pipe:close()\n+    end\n+  end)\n+end\n+\n+local function parse_spec(spec)\n+  if type(spec) == 'string' then\n+    spec = vim.split(spec, '%s')\n+  end\n+\n+  return {\n+    command = spec[1],\n+    args = {select(2, unpack(spec))}\n+  }\n+end\n+\n+local function handle_output(pipe, output)\n+  pipe:read_start(function(err, data)\n+    if err then error(err) end\n+    output[#output+1] = data\n+  end)\n+end\n+\n+local function close_pipe(pipe)\n+  if pipe then\n+    pipe:read_stop()\n+    if not pipe:is_closing() then\n+      pipe:close()\n+    end\n+  end\n+end\n+\n+--- Run a subprocess\n+---\n+--- Convenience wrapper for vim.loop.spawn with automatic IO handling.\n+---\n+--- Examples:\n+--- <pre>\n+---\n+---   local on_exit = function(code, signal, stdout, stderr)\n+---     print(code)\n+---     print(signal)\n+---     print(stdout)\n+---     print(stderr)\n+---   end\n+---\n+---   vim.subprocess('echo hello', on_exit)\n+---   vim.subprocess({'echo', 'hello'}, on_exit)\n+---   vim.subprocess({command = 'echo', args = {'hello'}}, on_exit)\n+---\n+--- </pre>\n+---\n+--- @param spec table   When passed as a string or a string array, the argument is interpreted\n+---                     as a command.\n+---\n+---                     When passed as a keyed table, accepts all options as vim.loop.spawn in\n+---                     addition to:\n+---                     - command: (string) command to execute\n+---                     - input: (string|string array) cannot be used with stdin\n+---                     - stdin: (uv_pipe_t) cannot be used with input\n+---                     - stdout: (uv_pipe_t)\n+---                     - stderr: (uv_pipe_t)\n+---\n+--- @param on_exit function  Called when subprocess exits. Has the following arguments:\n+---                          - code: (integer)\n+---                          - signal: (integer)\n+---                          - stdout: (string), nil if stdout argument is passed\n+---                          - stderr: (string), nil if stderr argument is passed\n+---\n+---  @returns process handle (uv_process_t userdata), PID (integer)\n+local function subprocess(spec, on_exit)\n+  vim.validate {\n+    spec = { spec, { 'table', 'string' }},\n+    on_exit = { on_exit, 'function' },\n+  }\n+\n+  if spec.stdin and spec.input then\n+    error('stdin cannot be used with input')\n+  end\n+\n+  if not spec.command then\n+    -- Assume spec is raw command as string or array\n+    spec = parse_spec(spec)\n+  end\n+\n+  local stdout = spec.stdout or uv.new_pipe(false)\n+  local stderr = spec.stderr or uv.new_pipe(false)\n+  local stdin\n+\n+  if not spec.stdin and spec.input then\n+    stdin = uv.new_pipe(false)\n+  end\n+\n+  -- Define data buckets as tables and concatenate the elements at the end as one operation.\n+  local stdout_data, stderr_data\n+\n+  local spec0 = vim.deepcopy(spec)\n+\n+  -- Remove non luv.spawn arguments\n+  for _, s in ipairs{'input', 'command', 'stdout', 'stderr', 'stdin'} do\n+    spec0[s] = nil\n+  end\n+\n+  spec0.stdio = { stdin, stdout, stderr }\n+\n+  local handle, pid = uv.spawn(spec.command, spec0,\n+    function(code, signal)\n+      close_pipe(stdin)\n+      close_pipe(stdout)\n+      close_pipe(stderr)",
            "html_url": "https://github.com/neovim/neovim/pull/17620#discussion_r836568968",
            "id": 836568968,
            "in_reply_to_id": 820772184,
            "line": 134,
            "node_id": "PRRC_kwDOAPphoM4x3QeI",
            "original_commit_id": "fac65c7dedcaf2301b8d814b0f97fcfc075c7f10",
            "original_line": 134,
            "original_position": 126,
            "original_start_line": 124,
            "path": "runtime/lua/vim/subprocess.lua",
            "position": 134,
            "pull_request_review_id": 923349302,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/17620",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/836568968/reactions"
            },
            "side": "RIGHT",
            "start_line": 132,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-03-28T15:36:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/836568968",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/17620#discussion_r836572246"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/17620"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/836572246"
                }
            },
            "author_association": "MEMBER",
            "body": "Hmm, well that suggests a bug in luv/libuv since the documentation exactly says:\r\n\r\n>              Shutdown the outgoing (write) side of a duplex stream. It\r\n>              waits for pending write requests to complete. The callback is\r\n>              called after shutdown is complete.\r\n\r\nBut I guess there's no harm in just doing:\r\n\r\n```lua\r\n    stdin:write('', function()\r\n      stdin:shutdown(function()\r\n        stdin:close()\r\n      end)\r\n```\r\n\r\nif you know that to work.",
            "commit_id": "fa59456d0bdd1c816e21d00b6b8473c83c466759",
            "created_at": "2022-03-28T15:39:35Z",
            "diff_hunk": "@@ -0,0 +1,153 @@\n+local uv = vim.loop\n+\n+local function handle_input(pipe, input)\n+  if type(input) == 'table' then\n+    for _, v in ipairs(input) do\n+      pipe:write(v)\n+      pipe:write('\\n')\n+    end\n+  elseif type(input) == 'string' then\n+    pipe:write(input)\n+  end\n+\n+  -- Shutdown the write side of the duplex stream and then close the pipe.\n+  -- Note shutdown will wait for all the pending write requests to complete\n+  pipe:shutdown(function()\n+    if pipe then\n+      pipe:close()\n+    end\n+  end)",
            "html_url": "https://github.com/neovim/neovim/pull/17620#discussion_r836572246",
            "id": 836572246,
            "in_reply_to_id": 820775616,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM4x3RRW",
            "original_commit_id": "fac65c7dedcaf2301b8d814b0f97fcfc075c7f10",
            "original_line": 24,
            "original_position": 19,
            "original_start_line": 13,
            "path": "runtime/lua/vim/subprocess.lua",
            "position": null,
            "pull_request_review_id": 923353955,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/17620",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/836572246/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2022-03-28T15:39:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/836572246",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/17620#discussion_r836604000"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/17620"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/836604000"
                }
            },
            "author_association": "MEMBER",
            "body": "Should we also error here or just let the user handle it?",
            "commit_id": "fa59456d0bdd1c816e21d00b6b8473c83c466759",
            "created_at": "2022-03-28T16:09:50Z",
            "diff_hunk": "@@ -0,0 +1,167 @@\n+local uv = vim.loop\n+\n+---@private\n+local function handle_input(pipe, input)\n+  if type(input) == 'table' then\n+    for _, v in ipairs(input) do\n+      pipe:write(v)\n+      pipe:write('\\n')\n+    end\n+  elseif type(input) == 'string' then\n+    pipe:write(input)\n+  end\n+\n+  -- Shutdown the write side of the duplex stream and then close the pipe.\n+  -- Note shutdown will wait for all the pending write requests to complete\n+  -- TODO(lewis6991): apparently shutdown doesn't behave this way.\n+  -- (https://github.com/neovim/neovim/pull/17620#discussion_r820775616)\n+  pipe:write('', function()\n+    pipe:shutdown(function()\n+      if pipe then\n+        pipe:close()\n+      end\n+    end)\n+  end)\n+end\n+\n+---@private\n+local function parse_spec(spec)\n+  if type(spec) == 'string' then\n+    spec = vim.split(spec, '%s')\n+  end\n+\n+  return {\n+    command = spec[1],\n+    args = {select(2, unpack(spec))}\n+  }\n+end\n+\n+---@private\n+local function handle_output(pipe, output)\n+  pipe:read_start(function(err, data)\n+    if err then error(err) end\n+    output[#output+1] = data\n+  end)\n+end\n+\n+---@private\n+local function close_pipe(pipe)\n+  if pipe then\n+    pipe:read_stop()\n+    if not pipe:is_closing() then\n+      pipe:close()\n+    end\n+  end\n+end\n+\n+--- Run a subprocess\n+---\n+--- Convenience wrapper for vim.loop.spawn with automatic IO handling.\n+---\n+--- Examples:\n+--- <pre>\n+---\n+---   local on_exit = function(code, signal, stdout, stderr)\n+---     print(code)\n+---     print(signal)\n+---     print(stdout)\n+---     print(stderr)\n+---   end\n+---\n+---   vim.subprocess('echo hello', on_exit)\n+---   vim.subprocess({'echo', 'hello'}, on_exit)\n+---   vim.subprocess({command = 'echo', args = {'hello'}}, on_exit)\n+---\n+--- </pre>\n+---\n+--- @param spec table   When passed as a string or a string array, the argument is interpreted\n+---                     as a command.\n+---\n+---                     When passed as a keyed table, accepts all options as vim.loop.spawn in\n+---                     addition to:\n+---                     - command: (string) command to execute\n+---                     - input: (string|string array) cannot be used with stdin\n+---                     - stdin: (uv_pipe_t) cannot be used with input\n+---                     - stdout: (uv_pipe_t)\n+---                     - stderr: (uv_pipe_t)\n+---\n+--- @param on_exit function  Called when subprocess exits. Has the following arguments:\n+---                          - code: (integer)\n+---                          - signal: (integer)\n+---                          - stdout: (string), nil if stdout argument is passed\n+---                          - stderr: (string), nil if stderr argument is passed\n+---\n+---  @returns process handle (uv_process_t userdata), PID (integer)\n+local function subprocess(spec, on_exit)\n+  vim.validate {\n+    spec = { spec, { 'table', 'string' }},\n+    on_exit = { on_exit, 'function' },\n+  }\n+\n+  if spec.stdin and spec.input then\n+    error('stdin cannot be used with input')\n+  end\n+\n+  if not spec.command then\n+    -- Assume spec is raw command as string or array\n+    spec = parse_spec(spec)\n+  end\n+\n+  local stdout = spec.stdout or uv.new_pipe(false)\n+  local stderr = spec.stderr or uv.new_pipe(false)\n+  local stdin\n+\n+  if not spec.stdin and spec.input then\n+    stdin = uv.new_pipe(false)\n+  end\n+\n+  -- Define data buckets as tables and concatenate the elements at the end as one operation.\n+  local stdout_data, stderr_data\n+\n+  local spec0 = vim.deepcopy(spec)\n+\n+  -- Remove non luv.spawn arguments\n+  for _, s in ipairs{'input', 'command', 'stdout', 'stderr', 'stdin'} do\n+    spec0[s] = nil\n+  end\n+\n+  spec0.stdio = { stdin, stdout, stderr }\n+\n+  local handle, pid = uv.spawn(spec.command, spec0,\n+    function(code, signal)\n+      close_pipe(stdin)\n+      close_pipe(stdout)\n+      close_pipe(stderr)\n+\n+      on_exit(\n+        code, signal,\n+        stdout_data and stdout_data[1] and table.concat(stdout_data) or nil,\n+        stderr_data and stderr_data[1] and table.concat(stderr_data) or nil\n+      )\n+    end\n+  )\n+\n+  if not handle then\n+    close_pipe(stdin)\n+    close_pipe(stdout)\n+    close_pipe(stderr)",
            "html_url": "https://github.com/neovim/neovim/pull/17620#discussion_r836604000",
            "id": 836604000,
            "line": 147,
            "node_id": "PRRC_kwDOAPphoM4x3ZBg",
            "original_commit_id": "fa59456d0bdd1c816e21d00b6b8473c83c466759",
            "original_line": 147,
            "original_position": 147,
            "original_start_line": null,
            "path": "runtime/lua/vim/subprocess.lua",
            "position": 147,
            "pull_request_review_id": 923397426,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/17620",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/836604000/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-03-28T16:09:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/836604000",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "There has been some discussion on the Neovim dev Matrix channel, and sentiment seems to be positive for `vim.subprocess`. However, there was a small concern about the several other methods of running external processes, so I have listed these below.\r\n\r\n## Comparison with other available API's\r\n\r\n### `jobstart()`\r\n\r\n- :x: Vimscript only (but accessible in Lua via `vim.fn.jobstart()`)\r\n- More similar to `vim.loop.spawn`\r\n- ✅ Uses libuv\r\n- :x: Requires using `chansend()` to write to stdin.\r\n- ✅ Allows passing a custom environment\r\n\r\n**IMO there is no reason to use this over `vim.loop.spawn`.**\r\n\r\n---\r\n### `system()`\r\n\r\n- :x: Vimscript only (but accessible in Lua via `vim.fn.system()`)\r\n- :x: Synchronous only\r\n- :x: No way to retrieve exit code\r\n\r\n---\r\n### `io.popen()`\r\n\r\n- :x: Synchronous only\r\n- :x: Only allows input or output stream, not both.\r\n- ✅ Allows iterating lines output.\r\n\r\n---\r\n### `os.execute()`\r\n\r\n- :x: Synchronous only\r\n- :x: No IO streams, only returns the exit code\r\n- :x: :x: Doesn't actually work properly in Neovim, e.g. try `:lua os.execute('echo hello')`\r\n\r\n**This should not be used**",
            "created_at": "2022-03-07T10:12:10Z",
            "html_url": "https://github.com/neovim/neovim/pull/17620#issuecomment-1060427777",
            "id": 1060427777,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/17620",
            "node_id": "IC_kwDOAPphoM4_NNgB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1060427777/reactions"
            },
            "updated_at": "2022-03-07T10:57:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1060427777",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> (like fusing `cmd` and `args` into `command`) seems a bit random\r\n\r\nI wouldn't call it random, it's just a short form variant that uses an array as the input. There are plenty of contexts where this would be useful.  Having to provide a keyed table can be too verbose sometimes ([e.g](https://github.com/lewis6991/dotfiles/blob/c8f894bfd8deb66a91d73e4f0e5a185b195fb11a/config/nvim/lua/lewis6991/cmp_gh.lua#L74)).\r\n\r\n> But I guess this depends on if `subprocess` should be viewed independently as a standalone API or whether it should be regarded as a layer over `vim.loop.spawn` that feels consistent and coherent.\r\n\r\nIt is explicitly a layer on top of `vim.loop.spawn`, but this doesn't require it mirrors its input format. This is only supposed to be an ergonomic version without the need for some boilerplate (that apparently isn't well understood by either of us given your comment about `shutdown`). Both of your code review comments really highlight a need for something like this.\r\n\r\n>  I think neovim already has too many \"execute-a-process\" variants \r\n\r\nI've listed all these variants, and they all have major problems and I don't think any of them should be used over `vim.loop.spawn`.\r\n\r\n> and I feel it would be better if new stuff at least looked as if it fits in with existing stuff.\r\n\r\nCan you elaborate? AFAIK there are only vimscript jobs. The only thing worth considering in Lua is `vim.loop.spawn`.\r\n\r\n> I probably also wouldn't support setting either stdin or input, I'd commit to the high level API and only support input string or array and remove the option to specify pipes, referring to `vim.loop.spawn` for use cases where one needs more control.\r\n\r\nI guess, but allowing pipes to be passed is trivial to support and means `subprocess` can completely replace `vim.loop.spawn` meaning users can just stick to using one API.\r\n\r\n> Regarding nvim-lint as a use-case: Not sure if I'd actually change it to use this, I kinda intentionally designed it so incremental parsing could be supported.\r\n\r\nOk, then I'll remove nvim-lint as an 'application in mind', but FWIW `stdout` and `stderr` are provided as options so you can do incremental stuff, this only changes the default if they are **not** provided.\r\n",
            "created_at": "2022-03-28T15:59:25Z",
            "html_url": "https://github.com/neovim/neovim/pull/17620#issuecomment-1080830000",
            "id": 1080830000,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/17620",
            "node_id": "IC_kwDOAPphoM5AbCgw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1080830000/reactions"
            },
            "updated_at": "2022-03-28T15:59:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1080830000",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "No comment on whether this is desirable, but if anyone decides to continue it, first question is why wouldn't this be named `vim.jobstart` or `vim.system` ? Why introduce yet another name for the same thing.\r\n\r\nIf a module is needed instead of just a function, should it not be named `vim.jobs`? Subprocesses in Nvim are called jobs. Avoid extra jargon.",
            "created_at": "2022-04-10T22:15:43Z",
            "html_url": "https://github.com/neovim/neovim/pull/17620#issuecomment-1094380518",
            "id": 1094380518,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/17620",
            "node_id": "IC_kwDOAPphoM5BOuvm",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1094380518/reactions"
            },
            "updated_at": "2022-11-09T15:07:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1094380518",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Besides my comment about naming https://github.com/neovim/neovim/pull/17620#issuecomment-1094380518 , a use-case to drive this would be to eliminate these `s:system_handler()` / `s:system()` function(s): https://github.com/neovim/neovim/blob/fae754073289566051433fae74ec65783f9e7a6a/runtime/autoload/health/provider.vim#L38-L113\r\n\r\nAlso regarding \"jobs\": even if it's out of scope here, the idea of having a global list of current and recent jobs is something that we want eventually. And that should be one list, regardless of whether jobstart(), :terminal, or `vim.job.start()` started it. This is important for troubleshooting and performance checks. So that's an important reason to avoid new jargon.",
            "created_at": "2022-11-09T15:10:49Z",
            "html_url": "https://github.com/neovim/neovim/pull/17620#issuecomment-1308909141",
            "id": 1308909141,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/17620",
            "node_id": "IC_kwDOAPphoM5OBF5V",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1308909141/reactions"
            },
            "updated_at": "2022-11-09T15:13:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1308909141",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "thanks for the new feature. does vim.subprocess designed to handle negative status codes.\r\n\r\nref: https://github.com/neovim/neovim/issues/20856",
            "created_at": "2023-04-08T09:36:04Z",
            "html_url": "https://github.com/neovim/neovim/pull/17620#issuecomment-1500844895",
            "id": 1500844895,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/17620",
            "node_id": "IC_kwDOAPphoM5ZdRNf",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1500844895/reactions"
            },
            "updated_at": "2023-04-08T09:36:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1500844895",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/13142418?v=4",
                "events_url": "https://api.github.com/users/wsdjeg/events{/privacy}",
                "followers_url": "https://api.github.com/users/wsdjeg/followers",
                "following_url": "https://api.github.com/users/wsdjeg/following{/other_user}",
                "gists_url": "https://api.github.com/users/wsdjeg/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wsdjeg",
                "id": 13142418,
                "login": "wsdjeg",
                "node_id": "MDQ6VXNlcjEzMTQyNDE4",
                "organizations_url": "https://api.github.com/users/wsdjeg/orgs",
                "received_events_url": "https://api.github.com/users/wsdjeg/received_events",
                "repos_url": "https://api.github.com/users/wsdjeg/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wsdjeg/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wsdjeg/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wsdjeg"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "It just passes back whatever `vim.loop.spawn` returns.",
            "created_at": "2023-04-12T15:34:11Z",
            "html_url": "https://github.com/neovim/neovim/pull/17620#issuecomment-1505485217",
            "id": 1505485217,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/17620",
            "node_id": "IC_kwDOAPphoM5Zu-Gh",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1505485217/reactions"
            },
            "updated_at": "2023-04-12T15:34:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1505485217",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Superseded by #23827 ",
            "created_at": "2023-05-31T11:22:36Z",
            "html_url": "https://github.com/neovim/neovim/pull/17620#issuecomment-1570006489",
            "id": 1570006489,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/17620",
            "node_id": "IC_kwDOAPphoM5dlGXZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1570006489/reactions"
            },
            "updated_at": "2023-05-31T11:22:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1570006489",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/17620/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/17620/commits",
    "created_at": "2022-03-06T11:45:46Z",
    "diff_url": "https://github.com/neovim/neovim/pull/17620.diff",
    "draft": true,
    "head": {
        "label": "lewis6991:subprocess",
        "ref": "subprocess",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/lewis6991/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/lewis6991/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/lewis6991/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/lewis6991/neovim/branches{/branch}",
            "clone_url": "https://github.com/lewis6991/neovim.git",
            "collaborators_url": "https://api.github.com/repos/lewis6991/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/lewis6991/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/lewis6991/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/lewis6991/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/lewis6991/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/lewis6991/neovim/contributors",
            "created_at": "2020-11-24T21:47:43Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/lewis6991/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/lewis6991/neovim/downloads",
            "events_url": "https://api.github.com/repos/lewis6991/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/lewis6991/neovim/forks",
            "full_name": "lewis6991/neovim",
            "git_commits_url": "https://api.github.com/repos/lewis6991/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/lewis6991/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/lewis6991/neovim/git/tags{/sha}",
            "git_url": "git://github.com/lewis6991/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/lewis6991/neovim/hooks",
            "html_url": "https://github.com/lewis6991/neovim",
            "id": 315760150,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/lewis6991/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/lewis6991/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/lewis6991/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/lewis6991/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/lewis6991/neovim/labels{/name}",
            "language": "Vim script",
            "languages_url": "https://api.github.com/repos/lewis6991/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/lewis6991/neovim/merges",
            "milestones_url": "https://api.github.com/repos/lewis6991/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkzMTU3NjAxNTA=",
            "notifications_url": "https://api.github.com/repos/lewis6991/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/lewis6991/neovim/pulls{/number}",
            "pushed_at": "2023-07-23T05:20:32Z",
            "releases_url": "https://api.github.com/repos/lewis6991/neovim/releases{/id}",
            "size": 241282,
            "ssh_url": "git@github.com:lewis6991/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/lewis6991/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/lewis6991/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/lewis6991/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/lewis6991/neovim/subscription",
            "svn_url": "https://github.com/lewis6991/neovim",
            "tags_url": "https://api.github.com/repos/lewis6991/neovim/tags",
            "teams_url": "https://api.github.com/repos/lewis6991/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/lewis6991/neovim/git/trees{/sha}",
            "updated_at": "2023-01-31T18:36:52Z",
            "url": "https://api.github.com/repos/lewis6991/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "fa59456d0bdd1c816e21d00b6b8473c83c466759",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
            "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
            "followers_url": "https://api.github.com/users/lewis6991/followers",
            "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
            "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/lewis6991",
            "id": 7904185,
            "login": "lewis6991",
            "node_id": "MDQ6VXNlcjc5MDQxODU=",
            "organizations_url": "https://api.github.com/users/lewis6991/orgs",
            "received_events_url": "https://api.github.com/users/lewis6991/received_events",
            "repos_url": "https://api.github.com/users/lewis6991/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/lewis6991"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/17620",
    "id": 872441662,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/17620",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 182884815,
            "name": "job-control",
            "node_id": "MDU6TGFiZWwxODI4ODQ4MTU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/job-control"
        },
        {
            "color": "FBCA04",
            "default": false,
            "description": "For PRs that propose significant changes to some part of the architecture or API",
            "id": 212680983,
            "name": "needs:discussion",
            "node_id": "MDU6TGFiZWwyMTI2ODA5ODM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/needs:discussion"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        }
    ],
    "locked": false,
    "merge_commit_sha": "5be757ab2be78e15e7ed032002b77334673a0404",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM40AGc-",
    "number": 17620,
    "patch_url": "https://github.com/neovim/neovim/pull/17620.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/17620/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/fa59456d0bdd1c816e21d00b6b8473c83c466759",
    "title": "feat(lua): add subprocess module",
    "updated_at": "2023-07-20T10:47:19Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/17620",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
        "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
        "followers_url": "https://api.github.com/users/lewis6991/followers",
        "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
        "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/lewis6991",
        "id": 7904185,
        "login": "lewis6991",
        "node_id": "MDQ6VXNlcjc5MDQxODU=",
        "organizations_url": "https://api.github.com/users/lewis6991/orgs",
        "received_events_url": "https://api.github.com/users/lewis6991/received_events",
        "repos_url": "https://api.github.com/users/lewis6991/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/lewis6991"
    }
}