{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/26406/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/26406/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/26406"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/26406"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/26406/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/4bdff57576939f0e71c6f24cb758a3b0db66d836"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5038,
            "forks_count": 5038,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1704,
            "open_issues_count": 1704,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2023-12-08T01:42:53Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 241217,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 71571,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2023-12-08T01:57:01Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 71571,
            "watchers_count": 71571,
            "web_commit_signoff_required": false
        },
        "sha": "5fa88a7ae13effc02d42070313d3082bf98e22a7",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "Problem:  The entire marktree needs to be traversed each time a sign is removed from the sentinel line.\r\nSolution: Remove sentinel line and instead keep track of the number of lines that hold up the 'signcolumn' in \"max_count\". Adjust this number for added/removed signs, and set it to 0 when the maximum number of signs on a line changes. Only when \"max_count\" is decremented to 0 due to sign removal do we need to check the entire buffer.\r\n\r\nAlso replace \"invalid_top\" and \"invalid_bot\" with a map of invalid ranges, further reducing the number of lines to be checked.\r\n\r\nAlso improve tree traversal when counting the number of signs. Instead of looping over the to be checked range and counting the overlap for each row, keep track of the overlap in an array and add this to the count.",
    "closed_at": "2023-12-07T14:22:24Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1417013059"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417013059"
                }
            },
            "author_association": "MEMBER",
            "body": "Why is this a 1 element array?",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-06T09:46:10Z",
            "diff_hunk": "@@ -703,11 +703,10 @@ struct file_buffer {\n                                 // may use a different synblock_T.\n \n   struct {\n-    int size;                   // last calculated number of sign columns\n-    int max;                    // maximum value size is valid for.\n-    linenr_T sentinel;          // a line number which is holding up the signcolumn\n-    linenr_T invalid_top;       // first invalid line number that needs to be checked\n-    linenr_T invalid_bot;       // last invalid line number that needs to be checked\n+    int max;                    // maximum number of signs on a single line\n+    int max_count;              // number of lines with max number of signs\n+    bool resized;               // whether max changed at start of redraw\n+    Map(int, int) invalid[1];   // map of invalid ranges to be checked",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1417013059",
            "id": 1417013059,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5UdedD",
            "original_commit_id": "31a3869a02ed1c91e7e8a56550b748467de87f3c",
            "original_line": 709,
            "original_position": 12,
            "original_start_line": null,
            "path": "src/nvim/buffer_defs.h",
            "position": null,
            "pull_request_review_id": 1767125483,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417013059/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-06T10:13:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417013059",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1417020795"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417020795"
                }
            },
            "author_association": "MEMBER",
            "body": "I do think this is harder to read than what it was before.",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-06T09:51:37Z",
            "diff_hunk": "@@ -735,11 +735,8 @@ void decor_redraw_signs(win_T *wp, buf_T *buf, int row, SignTextAttrs sattrs[],\n     }\n   }\n \n-  while (itr->x) {\n-    MTKey mark = marktree_itr_current(itr);\n-    if (mark.pos.row != row) {\n-      break;\n-    }\n+  MTKey mark;\n+  while ((mark = marktree_itr_current(itr)).pos.row == row) {",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1417020795",
            "id": 1417020795,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5UdgV7",
            "original_commit_id": "31a3869a02ed1c91e7e8a56550b748467de87f3c",
            "original_line": 739,
            "original_position": 65,
            "original_start_line": null,
            "path": "src/nvim/decoration.c",
            "position": null,
            "pull_request_review_id": 1767125483,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417020795/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-06T10:13:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417020795",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1417026804"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417026804"
                }
            },
            "author_association": "MEMBER",
            "body": "If range is a line number then I would rename the arguments to `line1` and `line2` and add\r\n\r\n```suggestion\r\nint row1 = line1 - 1;\r\nint row2 = line2 - 1;\r\n```",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-06T09:55:43Z",
            "diff_hunk": "@@ -792,50 +789,95 @@ DecorSignHighlight *decor_find_sign(DecorInline decor)\n   }\n }\n \n-// Increase the signcolumn size and update the sentinel line if necessary for\n-// the invalidated range.\n-void decor_validate_signcols(buf_T *buf, int max)\n+/// Add overlapping signs in current row to count. If it is greater than\n+/// current max, set it and make b_signcols valid. Adjust max_count if\n+/// row has or had max signs.\n+void buf_signcols_count_row(buf_T *buf, const int overlap[], int idx, int count, bool del)\n {\n-  int signcols = 0;  // highest value of count\n-  int currow = buf->b_signcols.invalid_top - 1;\n-  // TODO(bfredl): only need to use marktree_itr_get_overlap once.\n-  // then we can process both start and end events and update state for each row\n-  for (; currow < buf->b_signcols.invalid_bot; currow++) {\n-    MarkTreeIter itr[1];\n-    if (!marktree_itr_get_overlap(buf->b_marktree, currow, 0, itr)) {\n-      continue;\n-    }\n+  count += overlap[idx];\n+  if (count > buf->b_signcols.max) {\n+    buf->b_signcols.max = count;\n+    buf->b_signcols.resized = true;\n+    buf->b_signcols.max_count = 0;\n+  }\n+  buf->b_signcols.max_count += (count == buf->b_signcols.max - del) * (del ? -1 : 1);\n+}\n \n-    int count = 0;\n-    MTPair pair;\n-    while (marktree_itr_step_overlap(buf->b_marktree, itr, &pair)) {\n-      if (!mt_invalid(pair.start) && (pair.start.flags & MT_FLAG_DECOR_SIGNTEXT)) {\n-        count++;\n-      }\n-    }\n+void buf_signcols_validate_range(buf_T *buf, int row1, int row2)\n+{\n+  bool del = row1 < 0;\n+  // Range for deleted sign is negative, make it positive.\n+  if (del) {\n+    row1 *= -1;\n+    row2 *= -1;\n+  }\n+  row1--;  // Range is actually a line number, adjust for row.\n+  row2--;",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1417026804",
            "id": 1417026804,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Udhz0",
            "original_commit_id": "31a3869a02ed1c91e7e8a56550b748467de87f3c",
            "original_line": 815,
            "original_position": 115,
            "original_start_line": 814,
            "path": "src/nvim/decoration.c",
            "position": null,
            "pull_request_review_id": 1767125483,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417026804/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-12-06T10:13:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417026804",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1417032441"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417032441"
                }
            },
            "author_association": "MEMBER",
            "body": "`overlap` and `idx` are only used once. I would move the count adjustment outside to make this function less convoluted.",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-06T10:00:05Z",
            "diff_hunk": "@@ -792,50 +789,95 @@ DecorSignHighlight *decor_find_sign(DecorInline decor)\n   }\n }\n \n-// Increase the signcolumn size and update the sentinel line if necessary for\n-// the invalidated range.\n-void decor_validate_signcols(buf_T *buf, int max)\n+/// Add overlapping signs in current row to count. If it is greater than\n+/// current max, set it and make b_signcols valid. Adjust max_count if\n+/// row has or had max signs.\n+void buf_signcols_count_row(buf_T *buf, const int overlap[], int idx, int count, bool del)",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1417032441",
            "id": 1417032441,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5UdjL5",
            "original_commit_id": "31a3869a02ed1c91e7e8a56550b748467de87f3c",
            "original_line": 795,
            "original_position": 79,
            "original_start_line": null,
            "path": "src/nvim/decoration.c",
            "position": null,
            "pull_request_review_id": 1767125483,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417032441/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-06T10:13:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417032441",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1417038634"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417038634"
                }
            },
            "author_association": "MEMBER",
            "body": "Should this go in the same file as `buf_signcols_validate_range`?",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-06T10:05:01Z",
            "diff_hunk": "@@ -1200,16 +1204,45 @@ void comp_col(void)\n   set_vim_var_nr(VV_ECHOSPACE, sc_col - 1);\n }\n \n-static void redraw_win_signcol(win_T *wp)\n+static int buf_signcols_validate(win_T *wp, buf_T *buf, bool force)",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1417038634",
            "id": 1417038634,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Udksq",
            "original_commit_id": "31a3869a02ed1c91e7e8a56550b748467de87f3c",
            "original_line": 1207,
            "original_position": 37,
            "original_start_line": null,
            "path": "src/nvim/drawscreen.c",
            "position": null,
            "pull_request_review_id": 1767125483,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417038634/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-06T10:13:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417038634",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1417042650"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417042650"
                }
            },
            "author_association": "MEMBER",
            "body": "Does this need to be state? It looks like this can be used as the return value for `buf_signcols_validate`, `buf_signcols_validate_range` and `buf_signcols_set_invalid`.",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-06T10:08:11Z",
            "diff_hunk": "@@ -703,11 +703,10 @@ struct file_buffer {\n                                 // may use a different synblock_T.\n \n   struct {\n-    int size;                   // last calculated number of sign columns\n-    int max;                    // maximum value size is valid for.\n-    linenr_T sentinel;          // a line number which is holding up the signcolumn\n-    linenr_T invalid_top;       // first invalid line number that needs to be checked\n-    linenr_T invalid_bot;       // last invalid line number that needs to be checked\n+    int max;                    // maximum number of signs on a single line\n+    int max_count;              // number of lines with max number of signs\n+    bool resized;               // whether max changed at start of redraw",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1417042650",
            "id": 1417042650,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Udlra",
            "original_commit_id": "31a3869a02ed1c91e7e8a56550b748467de87f3c",
            "original_line": 708,
            "original_position": 11,
            "original_start_line": null,
            "path": "src/nvim/buffer_defs.h",
            "position": null,
            "pull_request_review_id": 1767125483,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417042650/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-06T10:13:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417042650",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1417048186"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417048186"
                }
            },
            "author_association": "MEMBER",
            "body": "Is this change necessary?",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-06T10:12:24Z",
            "diff_hunk": "@@ -67,18 +67,18 @@ void extmark_set(buf_T *buf, uint32_t ns_id, uint32_t *idp, int row, colnr_T col\n       } else {\n         assert(marktree_itr_valid(itr));\n         if (old_mark.pos.row == row && old_mark.pos.col == col) {\n+          // not paired: we can revise in place\n           if (mt_decor_any(old_mark)) {\n+            mt_itr_rawkey(itr).flags &= (uint16_t) ~MT_FLAG_DECOR_SIGNTEXT;\n             buf_decor_remove(buf, row, row, mt_decor(old_mark), true);\n           }\n-\n-          // not paired: we can revise in place\n           mt_itr_rawkey(itr).flags &= (uint16_t) ~MT_FLAG_EXTERNAL_MASK;\n           mt_itr_rawkey(itr).flags |= flags;\n           mt_itr_rawkey(itr).decor_data = decor.data;\n           goto revised;\n         }\n-        buf_decor_remove(buf, old_mark.pos.row, old_mark.pos.row, mt_decor(old_mark), true);\n         marktree_del_itr(buf->b_marktree, itr, false);\n+        buf_decor_remove(buf, old_mark.pos.row, old_mark.pos.row, mt_decor(old_mark), true);",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1417048186",
            "id": 1417048186,
            "line": 81,
            "node_id": "PRRC_kwDOAPphoM5UdnB6",
            "original_commit_id": "31a3869a02ed1c91e7e8a56550b748467de87f3c",
            "original_line": 81,
            "original_position": 18,
            "original_start_line": null,
            "path": "src/nvim/extmark.c",
            "position": 18,
            "pull_request_review_id": 1767125483,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417048186/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-06T10:13:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417048186",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1417121540"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417121540"
                }
            },
            "author_association": "MEMBER",
            "body": "Not sure tbh, to be consistent with `b_extmark_ns`. Presumably just to be able to call `map_` functions without taking the address.",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-06T11:14:42Z",
            "diff_hunk": "@@ -703,11 +703,10 @@ struct file_buffer {\n                                 // may use a different synblock_T.\n \n   struct {\n-    int size;                   // last calculated number of sign columns\n-    int max;                    // maximum value size is valid for.\n-    linenr_T sentinel;          // a line number which is holding up the signcolumn\n-    linenr_T invalid_top;       // first invalid line number that needs to be checked\n-    linenr_T invalid_bot;       // last invalid line number that needs to be checked\n+    int max;                    // maximum number of signs on a single line\n+    int max_count;              // number of lines with max number of signs\n+    bool resized;               // whether max changed at start of redraw\n+    Map(int, int) invalid[1];   // map of invalid ranges to be checked",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1417121540",
            "id": 1417121540,
            "in_reply_to_id": 1417013059,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Ud48E",
            "original_commit_id": "31a3869a02ed1c91e7e8a56550b748467de87f3c",
            "original_line": 709,
            "original_position": 12,
            "original_start_line": null,
            "path": "src/nvim/buffer_defs.h",
            "position": null,
            "pull_request_review_id": 1767298580,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417121540/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-06T11:30:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417121540",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1417126154"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417126154"
                }
            },
            "author_association": "MEMBER",
            "body": "Sure, both are only used in `drawscreen.c` but have more to do with decorations I guess. Would `static` `drawscreen.c` functions be preferred or exported in `decorations.c`?",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-06T11:17:53Z",
            "diff_hunk": "@@ -1200,16 +1204,45 @@ void comp_col(void)\n   set_vim_var_nr(VV_ECHOSPACE, sc_col - 1);\n }\n \n-static void redraw_win_signcol(win_T *wp)\n+static int buf_signcols_validate(win_T *wp, buf_T *buf, bool force)",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1417126154",
            "id": 1417126154,
            "in_reply_to_id": 1417038634,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Ud6EK",
            "original_commit_id": "31a3869a02ed1c91e7e8a56550b748467de87f3c",
            "original_line": 1207,
            "original_position": 37,
            "original_start_line": null,
            "path": "src/nvim/drawscreen.c",
            "position": null,
            "pull_request_review_id": 1767303759,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417126154/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-06T11:17:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417126154",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1417129775"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417129775"
                }
            },
            "author_association": "MEMBER",
            "body": "Sure, it's only used to determine whether 'statuscolumn' needs to be rebuild when 'signcolumn' is \"number/no\". Because `w_scwidth` is and stays 0 then.",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-06T11:21:01Z",
            "diff_hunk": "@@ -703,11 +703,10 @@ struct file_buffer {\n                                 // may use a different synblock_T.\n \n   struct {\n-    int size;                   // last calculated number of sign columns\n-    int max;                    // maximum value size is valid for.\n-    linenr_T sentinel;          // a line number which is holding up the signcolumn\n-    linenr_T invalid_top;       // first invalid line number that needs to be checked\n-    linenr_T invalid_bot;       // last invalid line number that needs to be checked\n+    int max;                    // maximum number of signs on a single line\n+    int max_count;              // number of lines with max number of signs\n+    bool resized;               // whether max changed at start of redraw",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1417129775",
            "id": 1417129775,
            "in_reply_to_id": 1417042650,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Ud68v",
            "original_commit_id": "31a3869a02ed1c91e7e8a56550b748467de87f3c",
            "original_line": 708,
            "original_position": 11,
            "original_start_line": null,
            "path": "src/nvim/buffer_defs.h",
            "position": null,
            "pull_request_review_id": 1767308764,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417129775/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-06T11:21:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417129775",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1417132817"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417132817"
                }
            },
            "author_association": "MEMBER",
            "body": "I think not `drawscreen.c`. I considered adding a new file just for column/signs, but if not that then maybe `decoration.c` for now.",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-06T11:24:02Z",
            "diff_hunk": "@@ -1200,16 +1204,45 @@ void comp_col(void)\n   set_vim_var_nr(VV_ECHOSPACE, sc_col - 1);\n }\n \n-static void redraw_win_signcol(win_T *wp)\n+static int buf_signcols_validate(win_T *wp, buf_T *buf, bool force)",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1417132817",
            "id": 1417132817,
            "in_reply_to_id": 1417038634,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Ud7sR",
            "original_commit_id": "31a3869a02ed1c91e7e8a56550b748467de87f3c",
            "original_line": 1207,
            "original_position": 37,
            "original_start_line": null,
            "path": "src/nvim/drawscreen.c",
            "position": null,
            "pull_request_review_id": 1767313452,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417132817/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-06T11:24:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417132817",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1417134178"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417134178"
                }
            },
            "author_association": "MEMBER",
            "body": "Hmm since the counting is now delayed to the start of a redraw it no longer is. Can revert I guess but I think it's more correct in this order in case `buf_decor_remove()` ever handles other side effects which expect the mark to already be removed from the marktree.",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-06T11:25:24Z",
            "diff_hunk": "@@ -67,18 +67,18 @@ void extmark_set(buf_T *buf, uint32_t ns_id, uint32_t *idp, int row, colnr_T col\n       } else {\n         assert(marktree_itr_valid(itr));\n         if (old_mark.pos.row == row && old_mark.pos.col == col) {\n+          // not paired: we can revise in place\n           if (mt_decor_any(old_mark)) {\n+            mt_itr_rawkey(itr).flags &= (uint16_t) ~MT_FLAG_DECOR_SIGNTEXT;\n             buf_decor_remove(buf, row, row, mt_decor(old_mark), true);\n           }\n-\n-          // not paired: we can revise in place\n           mt_itr_rawkey(itr).flags &= (uint16_t) ~MT_FLAG_EXTERNAL_MASK;\n           mt_itr_rawkey(itr).flags |= flags;\n           mt_itr_rawkey(itr).decor_data = decor.data;\n           goto revised;\n         }\n-        buf_decor_remove(buf, old_mark.pos.row, old_mark.pos.row, mt_decor(old_mark), true);\n         marktree_del_itr(buf->b_marktree, itr, false);\n+        buf_decor_remove(buf, old_mark.pos.row, old_mark.pos.row, mt_decor(old_mark), true);",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1417134178",
            "id": 1417134178,
            "in_reply_to_id": 1417048186,
            "line": 81,
            "node_id": "PRRC_kwDOAPphoM5Ud8Bi",
            "original_commit_id": "31a3869a02ed1c91e7e8a56550b748467de87f3c",
            "original_line": 81,
            "original_position": 18,
            "original_start_line": null,
            "path": "src/nvim/extmark.c",
            "position": 18,
            "pull_request_review_id": 1767315556,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417134178/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-06T11:25:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417134178",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1417170863"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417170863"
                }
            },
            "author_association": "MEMBER",
            "body": "The other line only deletes an iterator. It doesn't change the marktree.",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-06T11:59:17Z",
            "diff_hunk": "@@ -67,18 +67,18 @@ void extmark_set(buf_T *buf, uint32_t ns_id, uint32_t *idp, int row, colnr_T col\n       } else {\n         assert(marktree_itr_valid(itr));\n         if (old_mark.pos.row == row && old_mark.pos.col == col) {\n+          // not paired: we can revise in place\n           if (mt_decor_any(old_mark)) {\n+            mt_itr_rawkey(itr).flags &= (uint16_t) ~MT_FLAG_DECOR_SIGNTEXT;\n             buf_decor_remove(buf, row, row, mt_decor(old_mark), true);\n           }\n-\n-          // not paired: we can revise in place\n           mt_itr_rawkey(itr).flags &= (uint16_t) ~MT_FLAG_EXTERNAL_MASK;\n           mt_itr_rawkey(itr).flags |= flags;\n           mt_itr_rawkey(itr).decor_data = decor.data;\n           goto revised;\n         }\n-        buf_decor_remove(buf, old_mark.pos.row, old_mark.pos.row, mt_decor(old_mark), true);\n         marktree_del_itr(buf->b_marktree, itr, false);\n+        buf_decor_remove(buf, old_mark.pos.row, old_mark.pos.row, mt_decor(old_mark), true);",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1417170863",
            "id": 1417170863,
            "in_reply_to_id": 1417048186,
            "line": 81,
            "node_id": "PRRC_kwDOAPphoM5UeE-v",
            "original_commit_id": "31a3869a02ed1c91e7e8a56550b748467de87f3c",
            "original_line": 81,
            "original_position": 18,
            "original_start_line": null,
            "path": "src/nvim/extmark.c",
            "position": 18,
            "pull_request_review_id": 1767373380,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417170863/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-06T11:59:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417170863",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1417191387"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417191387"
                }
            },
            "author_association": "MEMBER",
            "body": "Uhm I don't think that's true. `marktree_del_itr()` removes the key pointed to by the iterator?\r\n\r\nPoint is that the pattern of edit marktree -> handle side effects seems safer, same as in https://github.com/neovim/neovim/pull/26361. But it's no longer needed for correctness in this PR, I'm fine to revert.",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-06T12:19:06Z",
            "diff_hunk": "@@ -67,18 +67,18 @@ void extmark_set(buf_T *buf, uint32_t ns_id, uint32_t *idp, int row, colnr_T col\n       } else {\n         assert(marktree_itr_valid(itr));\n         if (old_mark.pos.row == row && old_mark.pos.col == col) {\n+          // not paired: we can revise in place\n           if (mt_decor_any(old_mark)) {\n+            mt_itr_rawkey(itr).flags &= (uint16_t) ~MT_FLAG_DECOR_SIGNTEXT;\n             buf_decor_remove(buf, row, row, mt_decor(old_mark), true);\n           }\n-\n-          // not paired: we can revise in place\n           mt_itr_rawkey(itr).flags &= (uint16_t) ~MT_FLAG_EXTERNAL_MASK;\n           mt_itr_rawkey(itr).flags |= flags;\n           mt_itr_rawkey(itr).decor_data = decor.data;\n           goto revised;\n         }\n-        buf_decor_remove(buf, old_mark.pos.row, old_mark.pos.row, mt_decor(old_mark), true);\n         marktree_del_itr(buf->b_marktree, itr, false);\n+        buf_decor_remove(buf, old_mark.pos.row, old_mark.pos.row, mt_decor(old_mark), true);",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1417191387",
            "id": 1417191387,
            "in_reply_to_id": 1417048186,
            "line": 81,
            "node_id": "PRRC_kwDOAPphoM5UeJ_b",
            "original_commit_id": "31a3869a02ed1c91e7e8a56550b748467de87f3c",
            "original_line": 81,
            "original_position": 18,
            "original_start_line": null,
            "path": "src/nvim/extmark.c",
            "position": 18,
            "pull_request_review_id": 1767406076,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417191387/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-06T12:22:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417191387",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1417201050"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417201050"
                }
            },
            "author_association": "MEMBER",
            "body": "Is it necessary to remove? It's more convenient as a globally accessible variable.",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-06T12:28:27Z",
            "diff_hunk": "@@ -703,11 +703,10 @@ struct file_buffer {\n                                 // may use a different synblock_T.\n \n   struct {\n-    int size;                   // last calculated number of sign columns\n-    int max;                    // maximum value size is valid for.\n-    linenr_T sentinel;          // a line number which is holding up the signcolumn\n-    linenr_T invalid_top;       // first invalid line number that needs to be checked\n-    linenr_T invalid_bot;       // last invalid line number that needs to be checked\n+    int max;                    // maximum number of signs on a single line\n+    int max_count;              // number of lines with max number of signs\n+    bool resized;               // whether max changed at start of redraw",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1417201050",
            "id": 1417201050,
            "in_reply_to_id": 1417042650,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5UeMWa",
            "original_commit_id": "31a3869a02ed1c91e7e8a56550b748467de87f3c",
            "original_line": 708,
            "original_position": 11,
            "original_start_line": null,
            "path": "src/nvim/buffer_defs.h",
            "position": null,
            "pull_request_review_id": 1767421348,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417201050/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-06T12:28:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417201050",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1417556798"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417556798"
                }
            },
            "author_association": "MEMBER",
            "body": "No worries. I'm just being picky to reduce the diff.",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-06T15:46:52Z",
            "diff_hunk": "@@ -67,18 +67,18 @@ void extmark_set(buf_T *buf, uint32_t ns_id, uint32_t *idp, int row, colnr_T col\n       } else {\n         assert(marktree_itr_valid(itr));\n         if (old_mark.pos.row == row && old_mark.pos.col == col) {\n+          // not paired: we can revise in place\n           if (mt_decor_any(old_mark)) {\n+            mt_itr_rawkey(itr).flags &= (uint16_t) ~MT_FLAG_DECOR_SIGNTEXT;\n             buf_decor_remove(buf, row, row, mt_decor(old_mark), true);\n           }\n-\n-          // not paired: we can revise in place\n           mt_itr_rawkey(itr).flags &= (uint16_t) ~MT_FLAG_EXTERNAL_MASK;\n           mt_itr_rawkey(itr).flags |= flags;\n           mt_itr_rawkey(itr).decor_data = decor.data;\n           goto revised;\n         }\n-        buf_decor_remove(buf, old_mark.pos.row, old_mark.pos.row, mt_decor(old_mark), true);\n         marktree_del_itr(buf->b_marktree, itr, false);\n+        buf_decor_remove(buf, old_mark.pos.row, old_mark.pos.row, mt_decor(old_mark), true);",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1417556798",
            "id": 1417556798,
            "in_reply_to_id": 1417048186,
            "line": 81,
            "node_id": "PRRC_kwDOAPphoM5UfjM-",
            "original_commit_id": "31a3869a02ed1c91e7e8a56550b748467de87f3c",
            "original_line": 81,
            "original_position": 18,
            "original_start_line": null,
            "path": "src/nvim/extmark.c",
            "position": 18,
            "pull_request_review_id": 1767942592,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417556798/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-06T15:46:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417556798",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1417579371"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417579371"
                }
            },
            "author_association": "MEMBER",
            "body": "Global state should generally be avoided, especially in a repository with a regular rotation of contributors who don't always 100% understand the code they have inherited. There are plenty of resources that explain this (quick one from google: https://softwareengineering.stackexchange.com/questions/148108/why-is-global-state-so-evil).\r\n\r\n~I know this isn't exactly global state~ (EDIT: actually it is), but given the size of the buf_T struct, the same principles all apply.\r\n\r\nSometimes the benefits of convenience can justify it, time is a real constraint after all, but I don't think that's the case here. I think removing this piece of state will make the code cleaner, even though it is a little more effort.",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-06T15:57:04Z",
            "diff_hunk": "@@ -703,11 +703,10 @@ struct file_buffer {\n                                 // may use a different synblock_T.\n \n   struct {\n-    int size;                   // last calculated number of sign columns\n-    int max;                    // maximum value size is valid for.\n-    linenr_T sentinel;          // a line number which is holding up the signcolumn\n-    linenr_T invalid_top;       // first invalid line number that needs to be checked\n-    linenr_T invalid_bot;       // last invalid line number that needs to be checked\n+    int max;                    // maximum number of signs on a single line\n+    int max_count;              // number of lines with max number of signs\n+    bool resized;               // whether max changed at start of redraw",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1417579371",
            "id": 1417579371,
            "in_reply_to_id": 1417042650,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Ufotr",
            "original_commit_id": "31a3869a02ed1c91e7e8a56550b748467de87f3c",
            "original_line": 708,
            "original_position": 11,
            "original_start_line": null,
            "path": "src/nvim/buffer_defs.h",
            "position": null,
            "pull_request_review_id": 1767977126,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417579371/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-06T15:58:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417579371",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1417600876"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417600876"
                }
            },
            "author_association": "MEMBER",
            "body": "> Sometimes the benefits of convenience can justify it, time is a real constraint after all, but I don't think that's the case here. I think removing this piece of state will make the code cleaner, even though it is a little more effort.\r\n\r\nI had already done the work to remove it but I disagreed on it being cleaner. It requires a bunch of extra if statements to check the return value of the inner functions. And once I got to replacing this one I actually got stuck:\r\n```c\r\nvoid buf_signcols_invalidate_range(buf_T *buf, int line1, int line2)\r\n{\r\n  if (!buf->b_signs_with_text) {\r\n    buf->b_signcols.max = buf->b_signcols.max_count = 0;\r\n    buf->b_signcols.resized = true;\r\n    map_clear(int, buf->b_signcols.invalid);\r\n    return;\r\n }\r\n```\r\n\r\nThe caller of this function doesn't care about `b_signcols.resized`, and it needs to stay `true` until the 'statuscolumn' check in `update_screen()`. So while avoiding global state might be better, I'm not sure it can be avoided here.",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-06T16:10:57Z",
            "diff_hunk": "@@ -703,11 +703,10 @@ struct file_buffer {\n                                 // may use a different synblock_T.\n \n   struct {\n-    int size;                   // last calculated number of sign columns\n-    int max;                    // maximum value size is valid for.\n-    linenr_T sentinel;          // a line number which is holding up the signcolumn\n-    linenr_T invalid_top;       // first invalid line number that needs to be checked\n-    linenr_T invalid_bot;       // last invalid line number that needs to be checked\n+    int max;                    // maximum number of signs on a single line\n+    int max_count;              // number of lines with max number of signs\n+    bool resized;               // whether max changed at start of redraw",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1417600876",
            "id": 1417600876,
            "in_reply_to_id": 1417042650,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Uft9s",
            "original_commit_id": "31a3869a02ed1c91e7e8a56550b748467de87f3c",
            "original_line": 708,
            "original_position": 11,
            "original_start_line": null,
            "path": "src/nvim/buffer_defs.h",
            "position": null,
            "pull_request_review_id": 1768018177,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417600876/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-06T16:17:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417600876",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1417615907"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417615907"
                }
            },
            "author_association": "MEMBER",
            "body": "Ok, so in this case it does actually need to be state.",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-06T16:21:28Z",
            "diff_hunk": "@@ -703,11 +703,10 @@ struct file_buffer {\n                                 // may use a different synblock_T.\n \n   struct {\n-    int size;                   // last calculated number of sign columns\n-    int max;                    // maximum value size is valid for.\n-    linenr_T sentinel;          // a line number which is holding up the signcolumn\n-    linenr_T invalid_top;       // first invalid line number that needs to be checked\n-    linenr_T invalid_bot;       // last invalid line number that needs to be checked\n+    int max;                    // maximum number of signs on a single line\n+    int max_count;              // number of lines with max number of signs\n+    bool resized;               // whether max changed at start of redraw",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1417615907",
            "id": 1417615907,
            "in_reply_to_id": 1417042650,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Ufxoj",
            "original_commit_id": "31a3869a02ed1c91e7e8a56550b748467de87f3c",
            "original_line": 708,
            "original_position": 11,
            "original_start_line": null,
            "path": "src/nvim/buffer_defs.h",
            "position": null,
            "pull_request_review_id": 1768043296,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417615907/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-06T16:21:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417615907",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1417617249"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417617249"
                }
            },
            "author_association": "MEMBER",
            "body": "This is a bit of a random place to reset this. Shouldn't this be done at line 615?",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-06T16:22:29Z",
            "diff_hunk": "@@ -619,6 +621,8 @@ int update_screen(void)\n   screen_search_hl.rm.regprog = NULL;\n \n   FOR_ALL_WINDOWS_IN_TAB(wp, curtab) {\n+    wp->w_buffer->b_signcols.resized = false;",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1417617249",
            "id": 1417617249,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Ufx9h",
            "original_commit_id": "86aa78357e654bf1f38c57b9fe11c46df58e2e14",
            "original_line": 624,
            "original_position": 27,
            "original_start_line": null,
            "path": "src/nvim/drawscreen.c",
            "position": null,
            "pull_request_review_id": 1768045530,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417617249/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-06T16:22:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417617249",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1417670659"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417670659"
                }
            },
            "author_association": "MEMBER",
            "body": "Actually it needs to stay `true` until the above loop has ended. Otherwise, subsequent encountered windows displaying the same buffer will not have their statuscolumn rebuilt. I.e. this would fail:\r\nhttps://github.com/neovim/neovim/blob/ca7f8786a0eb578895400e23cd21e25cc0f91800/test/functional/ui/statuscolumn_spec.lua#L838-L845\r\n\r\nEDIT: I've moved the rebuild check to `win_redraw_signcols()` an the flag reset to another (seemingly random) place...",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-06T17:00:45Z",
            "diff_hunk": "@@ -619,6 +621,8 @@ int update_screen(void)\n   screen_search_hl.rm.regprog = NULL;\n \n   FOR_ALL_WINDOWS_IN_TAB(wp, curtab) {\n+    wp->w_buffer->b_signcols.resized = false;",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1417670659",
            "id": 1417670659,
            "in_reply_to_id": 1417617249,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Uf_AD",
            "original_commit_id": "86aa78357e654bf1f38c57b9fe11c46df58e2e14",
            "original_line": 624,
            "original_position": 27,
            "original_start_line": null,
            "path": "src/nvim/drawscreen.c",
            "position": null,
            "pull_request_review_id": 1768130219,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417670659/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-07T00:42:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1417670659",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1418724583"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418724583"
                }
            },
            "author_association": "MEMBER",
            "body": "Why does `redraw_later()` no longer work here?",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-07T10:22:12Z",
            "diff_hunk": "@@ -1200,16 +1192,34 @@ void comp_col(void)\n   set_vim_var_nr(VV_ECHOSPACE, sc_col - 1);\n }\n \n-static void redraw_win_signcol(win_T *wp)\n+/// Redraw entire window \"wp\" if configured 'signcolumn' width changes.\n+static void win_redraw_signcols(win_T *wp)\n {\n-  // If we can compute a change in the automatic sizing of the sign column\n-  // under 'signcolumn=auto:X' and signs currently placed in the buffer, better\n-  // figuring it out here so we can redraw the entire screen for it.\n+  bool rebuild_stc = false;\n+  buf_T *buf = wp->w_buffer;\n+  int width = buf->b_signcols.max;\n+\n+  if (wp->w_minscwidth <= SCL_NO) {\n+    if (*wp->w_p_stc) {\n+      buf_signcols_validate(wp, buf, true);\n+      if (buf->b_signcols.resized) {\n+        rebuild_stc = true;\n+        wp->w_nrwidth_line_count = 0;\n+      }\n+    }\n+    width = 0;\n+  } else if (wp->w_maxscwidth <= 1 && buf->b_signs_with_text >= (size_t)wp->w_maxscwidth) {\n+    width = wp->w_maxscwidth;\n+  } else if (map_size(buf->b_signcols.invalid)) {\n+    width = buf_signcols_validate(wp, buf, false);\n+  }\n+\n   int scwidth = wp->w_scwidth;\n-  wp->w_scwidth = win_signcol_count(wp);\n-  if (wp->w_scwidth != scwidth) {\n+  wp->w_scwidth = MAX(wp->w_minscwidth, width);\n+  if (scwidth != wp->w_scwidth || rebuild_stc) {\n+    wp->w_lines_valid = 0;\n+    wp->w_redr_type = UPD_NOT_VALID;",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1418724583",
            "id": 1418724583,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5UkATn",
            "original_commit_id": "2000abbdfe39f338c09796293f76ec8336d81b22",
            "original_line": 1221,
            "original_position": 66,
            "original_start_line": null,
            "path": "src/nvim/drawscreen.c",
            "position": null,
            "pull_request_review_id": 1769744180,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418724583/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-07T10:22:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418724583",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1418744309"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418744309"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nstatic void buf_signcols_validate_row(buf_T *buf, int count, int add)\r\n```",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-07T10:34:39Z",
            "diff_hunk": "@@ -792,50 +792,113 @@ DecorSignHighlight *decor_find_sign(DecorInline decor)\n   }\n }\n \n-// Increase the signcolumn size and update the sentinel line if necessary for\n-// the invalidated range.\n-void decor_validate_signcols(buf_T *buf, int max)\n+/// If \"count\" is greater than current max, set it and make b_signcols valid.\n+/// Adjust max_count if validated row has or had max signs.\n+void buf_signcols_validate_row(buf_T *buf, int count, int add)",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1418744309",
            "id": 1418744309,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5UkFH1",
            "original_commit_id": "2000abbdfe39f338c09796293f76ec8336d81b22",
            "original_line": 797,
            "original_position": 64,
            "original_start_line": null,
            "path": "src/nvim/decoration.c",
            "position": null,
            "pull_request_review_id": 1769792983,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418744309/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-07T10:34:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418744309",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1418744835"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418744835"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nstatic void buf_signcols_validate_range(buf_T *buf, int row1, int row2, int add)\r\n```",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-07T10:35:08Z",
            "diff_hunk": "@@ -792,50 +792,113 @@ DecorSignHighlight *decor_find_sign(DecorInline decor)\n   }\n }\n \n-// Increase the signcolumn size and update the sentinel line if necessary for\n-// the invalidated range.\n-void decor_validate_signcols(buf_T *buf, int max)\n+/// If \"count\" is greater than current max, set it and make b_signcols valid.\n+/// Adjust max_count if validated row has or had max signs.\n+void buf_signcols_validate_row(buf_T *buf, int count, int add)\n {\n-  int signcols = 0;  // highest value of count\n-  int currow = buf->b_signcols.invalid_top - 1;\n-  // TODO(bfredl): only need to use marktree_itr_get_overlap once.\n-  // then we can process both start and end events and update state for each row\n-  for (; currow < buf->b_signcols.invalid_bot; currow++) {\n-    MarkTreeIter itr[1];\n-    if (!marktree_itr_get_overlap(buf->b_marktree, currow, 0, itr)) {\n-      continue;\n+  int del = add < 0 ? -add : 0;\n+  if (count > buf->b_signcols.max) {\n+    buf->b_signcols.max = count;\n+    buf->b_signcols.resized = true;\n+    buf->b_signcols.max_count = 0;\n+  }\n+  buf->b_signcols.max_count += (count == buf->b_signcols.max - del) * (del ? -1 : 1);\n+}\n+\n+void buf_signcols_validate_range(buf_T *buf, int row1, int row2, int add)",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1418744835",
            "id": 1418744835,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5UkFQD",
            "original_commit_id": "2000abbdfe39f338c09796293f76ec8336d81b22",
            "original_line": 808,
            "original_position": 83,
            "original_start_line": null,
            "path": "src/nvim/decoration.c",
            "position": null,
            "pull_request_review_id": 1769794453,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418744835/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-07T10:35:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418744835",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1418745507"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418745507"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nstatic void buf_signcols_invalidate_range(buf_T *buf, int row1, int row2, int add)\r\n```",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-07T10:35:41Z",
            "diff_hunk": "@@ -792,50 +792,113 @@ DecorSignHighlight *decor_find_sign(DecorInline decor)\n   }\n }\n \n-// Increase the signcolumn size and update the sentinel line if necessary for\n-// the invalidated range.\n-void decor_validate_signcols(buf_T *buf, int max)\n+/// If \"count\" is greater than current max, set it and make b_signcols valid.\n+/// Adjust max_count if validated row has or had max signs.\n+void buf_signcols_validate_row(buf_T *buf, int count, int add)\n {\n-  int signcols = 0;  // highest value of count\n-  int currow = buf->b_signcols.invalid_top - 1;\n-  // TODO(bfredl): only need to use marktree_itr_get_overlap once.\n-  // then we can process both start and end events and update state for each row\n-  for (; currow < buf->b_signcols.invalid_bot; currow++) {\n-    MarkTreeIter itr[1];\n-    if (!marktree_itr_get_overlap(buf->b_marktree, currow, 0, itr)) {\n-      continue;\n+  int del = add < 0 ? -add : 0;\n+  if (count > buf->b_signcols.max) {\n+    buf->b_signcols.max = count;\n+    buf->b_signcols.resized = true;\n+    buf->b_signcols.max_count = 0;\n+  }\n+  buf->b_signcols.max_count += (count == buf->b_signcols.max - del) * (del ? -1 : 1);\n+}\n+\n+void buf_signcols_validate_range(buf_T *buf, int row1, int row2, int add)\n+{\n+  int count = 0;\n+  int currow = row1;\n+  MTPair pair = { 0 };\n+  MarkTreeIter itr[1];\n+  int *overlap = xcalloc(sizeof(int), (size_t)(row2 + 1 - row1));\n+\n+  marktree_itr_get_overlap(buf->b_marktree, currow, 0, itr);\n+  while (marktree_itr_step_overlap(buf->b_marktree, itr, &pair)) {\n+    if (!mt_invalid(pair.start) && pair.start.flags & MT_FLAG_DECOR_SIGNTEXT) {\n+      overlap[0]++;\n     }\n+  }\n \n-    int count = 0;\n-    MTPair pair;\n-    while (marktree_itr_step_overlap(buf->b_marktree, itr, &pair)) {\n-      if (!mt_invalid(pair.start) && (pair.start.flags & MT_FLAG_DECOR_SIGNTEXT)) {\n-        count++;\n-      }\n+  while (itr->x) {\n+    MTKey mark = marktree_itr_current(itr);\n+    if (mark.pos.row > row2) {\n+      break;\n+    }\n+    if (mark.pos.row != currow) {\n+      buf_signcols_validate_row(buf, count + overlap[currow - row1], add);\n+      currow = mark.pos.row;\n+      count = 0;\n     }\n \n-    while (itr->x) {\n-      MTKey mark = marktree_itr_current(itr);\n-      if (mark.pos.row != currow) {\n-        break;\n-      }\n-      if (!mt_invalid(mark) && !mt_end(mark) && (mark.flags & MT_FLAG_DECOR_SIGNTEXT)) {\n-        count++;\n+    // Increment count and overlap array for the range of a paired sign mark.\n+    if (!mt_invalid(mark) && !mt_end(mark) && (mark.flags & MT_FLAG_DECOR_SIGNTEXT)) {\n+      if (mt_paired(mark)) {\n+        MTPos end = marktree_get_altpos(buf->b_marktree, mark, NULL);\n+        for (int i = mark.pos.row; i < MIN(row2, end.row); i++) {\n+          overlap[row2 - i]++;\n+        }\n       }\n-      marktree_itr_next(buf->b_marktree, itr);\n+      count++;\n     }\n \n-    if (count > signcols) {\n-      if (count >= buf->b_signcols.size) {\n-        buf->b_signcols.size = count;\n-        buf->b_signcols.sentinel = currow + 1;\n-      }\n-      if (count >= max) {\n-        return;\n-      }\n-      signcols = count;\n+    marktree_itr_next(buf->b_marktree, itr);\n+  }\n+  buf_signcols_validate_row(buf, count + overlap[currow - row1], add);\n+  xfree(overlap);\n+}\n+\n+int buf_signcols_validate(win_T *wp, buf_T *buf, bool force)\n+{\n+  int start;\n+  SignRange range;\n+  map_foreach(buf->b_signcols.invalid, start, range, {\n+    if ((!force || buf->b_signcols.resized)\n+        && range.add > 0 && buf->b_signcols.max >= wp->w_maxscwidth) {\n+      return wp->w_maxscwidth;\n+    }\n+    buf_signcols_validate_range(buf, start, range.end, range.add);\n+    if (buf->b_signcols.max_count == 0) {\n+      buf->b_signcols.resized = true;\n+      buf->b_signcols.max += range.add;\n+      buf_signcols_validate_range(buf, 0, buf->b_ml.ml_line_count, 0);\n+      break;\n     }\n+  });\n+  map_clear(int, buf->b_signcols.invalid);\n+  return buf->b_signcols.max;\n+}\n+\n+void buf_signcols_invalidate_range(buf_T *buf, int row1, int row2, int add)",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1418745507",
            "id": 1418745507,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5UkFaj",
            "original_commit_id": "2000abbdfe39f338c09796293f76ec8336d81b22",
            "original_line": 872,
            "original_position": 170,
            "original_start_line": null,
            "path": "src/nvim/decoration.c",
            "position": null,
            "pull_request_review_id": 1769796126,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418745507/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-07T10:35:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418745507",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1418760645"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418760645"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't think it's good practice to rely on the fact that == returns 0/1.\r\n\r\n```suggestion\r\n  if (count == buf->b_signcols.max - del) {\r\n    buf->b_signcols.max_count += del > 0 ? -1 : 1;\r\n  }\r\n```",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-07T10:48:15Z",
            "diff_hunk": "@@ -792,50 +792,113 @@ DecorSignHighlight *decor_find_sign(DecorInline decor)\n   }\n }\n \n-// Increase the signcolumn size and update the sentinel line if necessary for\n-// the invalidated range.\n-void decor_validate_signcols(buf_T *buf, int max)\n+/// If \"count\" is greater than current max, set it and make b_signcols valid.\n+/// Adjust max_count if validated row has or had max signs.\n+void buf_signcols_validate_row(buf_T *buf, int count, int add)\n {\n-  int signcols = 0;  // highest value of count\n-  int currow = buf->b_signcols.invalid_top - 1;\n-  // TODO(bfredl): only need to use marktree_itr_get_overlap once.\n-  // then we can process both start and end events and update state for each row\n-  for (; currow < buf->b_signcols.invalid_bot; currow++) {\n-    MarkTreeIter itr[1];\n-    if (!marktree_itr_get_overlap(buf->b_marktree, currow, 0, itr)) {\n-      continue;\n+  int del = add < 0 ? -add : 0;\n+  if (count > buf->b_signcols.max) {\n+    buf->b_signcols.max = count;\n+    buf->b_signcols.resized = true;\n+    buf->b_signcols.max_count = 0;\n+  }\n+  buf->b_signcols.max_count += (count == buf->b_signcols.max - del) * (del ? -1 : 1);",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1418760645",
            "id": 1418760645,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5UkJHF",
            "original_commit_id": "2000abbdfe39f338c09796293f76ec8336d81b22",
            "original_line": 805,
            "original_position": 80,
            "original_start_line": null,
            "path": "src/nvim/decoration.c",
            "position": null,
            "pull_request_review_id": 1769835704,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418760645/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-07T10:49:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418760645",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1418764057"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418764057"
                }
            },
            "author_association": "MEMBER",
            "body": "It's not obvious to me what this condition means. Can we add a short comment?",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-07T10:51:00Z",
            "diff_hunk": "@@ -792,50 +792,113 @@ DecorSignHighlight *decor_find_sign(DecorInline decor)\n   }\n }\n \n-// Increase the signcolumn size and update the sentinel line if necessary for\n-// the invalidated range.\n-void decor_validate_signcols(buf_T *buf, int max)\n+/// If \"count\" is greater than current max, set it and make b_signcols valid.\n+/// Adjust max_count if validated row has or had max signs.\n+void buf_signcols_validate_row(buf_T *buf, int count, int add)\n {\n-  int signcols = 0;  // highest value of count\n-  int currow = buf->b_signcols.invalid_top - 1;\n-  // TODO(bfredl): only need to use marktree_itr_get_overlap once.\n-  // then we can process both start and end events and update state for each row\n-  for (; currow < buf->b_signcols.invalid_bot; currow++) {\n-    MarkTreeIter itr[1];\n-    if (!marktree_itr_get_overlap(buf->b_marktree, currow, 0, itr)) {\n-      continue;\n+  int del = add < 0 ? -add : 0;\n+  if (count > buf->b_signcols.max) {\n+    buf->b_signcols.max = count;\n+    buf->b_signcols.resized = true;\n+    buf->b_signcols.max_count = 0;\n+  }\n+  buf->b_signcols.max_count += (count == buf->b_signcols.max - del) * (del ? -1 : 1);\n+}\n+\n+void buf_signcols_validate_range(buf_T *buf, int row1, int row2, int add)\n+{\n+  int count = 0;\n+  int currow = row1;\n+  MTPair pair = { 0 };\n+  MarkTreeIter itr[1];\n+  int *overlap = xcalloc(sizeof(int), (size_t)(row2 + 1 - row1));\n+\n+  marktree_itr_get_overlap(buf->b_marktree, currow, 0, itr);\n+  while (marktree_itr_step_overlap(buf->b_marktree, itr, &pair)) {\n+    if (!mt_invalid(pair.start) && pair.start.flags & MT_FLAG_DECOR_SIGNTEXT) {\n+      overlap[0]++;\n     }\n+  }\n \n-    int count = 0;\n-    MTPair pair;\n-    while (marktree_itr_step_overlap(buf->b_marktree, itr, &pair)) {\n-      if (!mt_invalid(pair.start) && (pair.start.flags & MT_FLAG_DECOR_SIGNTEXT)) {\n-        count++;\n-      }\n+  while (itr->x) {\n+    MTKey mark = marktree_itr_current(itr);\n+    if (mark.pos.row > row2) {\n+      break;\n+    }\n+    if (mark.pos.row != currow) {\n+      buf_signcols_validate_row(buf, count + overlap[currow - row1], add);\n+      currow = mark.pos.row;\n+      count = 0;\n     }\n \n-    while (itr->x) {\n-      MTKey mark = marktree_itr_current(itr);\n-      if (mark.pos.row != currow) {\n-        break;\n-      }\n-      if (!mt_invalid(mark) && !mt_end(mark) && (mark.flags & MT_FLAG_DECOR_SIGNTEXT)) {\n-        count++;\n+    // Increment count and overlap array for the range of a paired sign mark.\n+    if (!mt_invalid(mark) && !mt_end(mark) && (mark.flags & MT_FLAG_DECOR_SIGNTEXT)) {\n+      if (mt_paired(mark)) {\n+        MTPos end = marktree_get_altpos(buf->b_marktree, mark, NULL);\n+        for (int i = mark.pos.row; i < MIN(row2, end.row); i++) {\n+          overlap[row2 - i]++;\n+        }\n       }\n-      marktree_itr_next(buf->b_marktree, itr);\n+      count++;\n     }\n \n-    if (count > signcols) {\n-      if (count >= buf->b_signcols.size) {\n-        buf->b_signcols.size = count;\n-        buf->b_signcols.sentinel = currow + 1;\n-      }\n-      if (count >= max) {\n-        return;\n-      }\n-      signcols = count;\n+    marktree_itr_next(buf->b_marktree, itr);\n+  }\n+  buf_signcols_validate_row(buf, count + overlap[currow - row1], add);\n+  xfree(overlap);\n+}\n+\n+int buf_signcols_validate(win_T *wp, buf_T *buf, bool force)\n+{\n+  int start;\n+  SignRange range;\n+  map_foreach(buf->b_signcols.invalid, start, range, {\n+    if ((!force || buf->b_signcols.resized)\n+        && range.add > 0 && buf->b_signcols.max >= wp->w_maxscwidth) {",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1418764057",
            "id": 1418764057,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5UkJ8Z",
            "original_commit_id": "2000abbdfe39f338c09796293f76ec8336d81b22",
            "original_line": 857,
            "original_position": 155,
            "original_start_line": null,
            "path": "src/nvim/decoration.c",
            "position": null,
            "pull_request_review_id": 1769844091,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418764057/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-07T10:51:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418764057",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1418767715"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418767715"
                }
            },
            "author_association": "MEMBER",
            "body": "Can this be documented? It's not obvious that `start` is maintained as the map `key` or that this struct is only intended to be used as the value type of a map.",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-07T10:54:20Z",
            "diff_hunk": "@@ -48,3 +48,9 @@ typedef enum {\n #define TRISTATE_FROM_INT(val) ((val) == 0 ? kFalse : ((val) >= 1 ? kTrue : kNone))\n \n typedef int64_t OptInt;\n+\n+typedef struct {\n+  int end;\n+  int add;",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1418767715",
            "id": 1418767715,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5UkK1j",
            "original_commit_id": "2000abbdfe39f338c09796293f76ec8336d81b22",
            "original_line": 54,
            "original_position": 7,
            "original_start_line": null,
            "path": "src/nvim/types_defs.h",
            "position": null,
            "pull_request_review_id": 1769853947,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418767715/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-07T11:05:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418767715",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1418771223"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418771223"
                }
            },
            "author_association": "MEMBER",
            "body": "There's an implicit constraint here that `row2 > row1`, this should either be asserted and/or documented in the function doc.\r\n\r\nWe also need a comment for what `overlap` is for.",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-07T10:57:32Z",
            "diff_hunk": "@@ -792,50 +792,113 @@ DecorSignHighlight *decor_find_sign(DecorInline decor)\n   }\n }\n \n-// Increase the signcolumn size and update the sentinel line if necessary for\n-// the invalidated range.\n-void decor_validate_signcols(buf_T *buf, int max)\n+/// If \"count\" is greater than current max, set it and make b_signcols valid.\n+/// Adjust max_count if validated row has or had max signs.\n+void buf_signcols_validate_row(buf_T *buf, int count, int add)\n {\n-  int signcols = 0;  // highest value of count\n-  int currow = buf->b_signcols.invalid_top - 1;\n-  // TODO(bfredl): only need to use marktree_itr_get_overlap once.\n-  // then we can process both start and end events and update state for each row\n-  for (; currow < buf->b_signcols.invalid_bot; currow++) {\n-    MarkTreeIter itr[1];\n-    if (!marktree_itr_get_overlap(buf->b_marktree, currow, 0, itr)) {\n-      continue;\n+  int del = add < 0 ? -add : 0;\n+  if (count > buf->b_signcols.max) {\n+    buf->b_signcols.max = count;\n+    buf->b_signcols.resized = true;\n+    buf->b_signcols.max_count = 0;\n+  }\n+  buf->b_signcols.max_count += (count == buf->b_signcols.max - del) * (del ? -1 : 1);\n+}\n+\n+void buf_signcols_validate_range(buf_T *buf, int row1, int row2, int add)\n+{\n+  int count = 0;\n+  int currow = row1;\n+  MTPair pair = { 0 };\n+  MarkTreeIter itr[1];\n+  int *overlap = xcalloc(sizeof(int), (size_t)(row2 + 1 - row1));",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1418771223",
            "id": 1418771223,
            "line": 821,
            "node_id": "PRRC_kwDOAPphoM5UkLsX",
            "original_commit_id": "2000abbdfe39f338c09796293f76ec8336d81b22",
            "original_line": 821,
            "original_position": 89,
            "original_start_line": null,
            "path": "src/nvim/decoration.c",
            "position": 103,
            "pull_request_review_id": 1769862997,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418771223/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-07T10:59:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418771223",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1418773497"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418773497"
                }
            },
            "author_association": "MEMBER",
            "body": "I think this function needs documenting.",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-07T10:59:32Z",
            "diff_hunk": "@@ -792,50 +792,113 @@ DecorSignHighlight *decor_find_sign(DecorInline decor)\n   }\n }\n \n-// Increase the signcolumn size and update the sentinel line if necessary for\n-// the invalidated range.\n-void decor_validate_signcols(buf_T *buf, int max)\n+/// If \"count\" is greater than current max, set it and make b_signcols valid.\n+/// Adjust max_count if validated row has or had max signs.\n+void buf_signcols_validate_row(buf_T *buf, int count, int add)\n {\n-  int signcols = 0;  // highest value of count\n-  int currow = buf->b_signcols.invalid_top - 1;\n-  // TODO(bfredl): only need to use marktree_itr_get_overlap once.\n-  // then we can process both start and end events and update state for each row\n-  for (; currow < buf->b_signcols.invalid_bot; currow++) {\n-    MarkTreeIter itr[1];\n-    if (!marktree_itr_get_overlap(buf->b_marktree, currow, 0, itr)) {\n-      continue;\n+  int del = add < 0 ? -add : 0;\n+  if (count > buf->b_signcols.max) {\n+    buf->b_signcols.max = count;\n+    buf->b_signcols.resized = true;\n+    buf->b_signcols.max_count = 0;\n+  }\n+  buf->b_signcols.max_count += (count == buf->b_signcols.max - del) * (del ? -1 : 1);\n+}\n+\n+void buf_signcols_validate_range(buf_T *buf, int row1, int row2, int add)",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1418773497",
            "id": 1418773497,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5UkMP5",
            "original_commit_id": "2000abbdfe39f338c09796293f76ec8336d81b22",
            "original_line": 808,
            "original_position": 83,
            "original_start_line": null,
            "path": "src/nvim/decoration.c",
            "position": null,
            "pull_request_review_id": 1769868802,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418773497/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-07T10:59:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418773497",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1418782276"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418782276"
                }
            },
            "author_association": "MEMBER",
            "body": "I know this might be a common way of finding range intersections, but the API for extmarks here is a bit esoteric, so some descriptions of what is happening will make this easier to follow. I.e. why is this only done for `row1`?",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-07T11:04:16Z",
            "diff_hunk": "@@ -792,50 +792,113 @@ DecorSignHighlight *decor_find_sign(DecorInline decor)\n   }\n }\n \n-// Increase the signcolumn size and update the sentinel line if necessary for\n-// the invalidated range.\n-void decor_validate_signcols(buf_T *buf, int max)\n+/// If \"count\" is greater than current max, set it and make b_signcols valid.\n+/// Adjust max_count if validated row has or had max signs.\n+void buf_signcols_validate_row(buf_T *buf, int count, int add)\n {\n-  int signcols = 0;  // highest value of count\n-  int currow = buf->b_signcols.invalid_top - 1;\n-  // TODO(bfredl): only need to use marktree_itr_get_overlap once.\n-  // then we can process both start and end events and update state for each row\n-  for (; currow < buf->b_signcols.invalid_bot; currow++) {\n-    MarkTreeIter itr[1];\n-    if (!marktree_itr_get_overlap(buf->b_marktree, currow, 0, itr)) {\n-      continue;\n+  int del = add < 0 ? -add : 0;\n+  if (count > buf->b_signcols.max) {\n+    buf->b_signcols.max = count;\n+    buf->b_signcols.resized = true;\n+    buf->b_signcols.max_count = 0;\n+  }\n+  buf->b_signcols.max_count += (count == buf->b_signcols.max - del) * (del ? -1 : 1);\n+}\n+\n+void buf_signcols_validate_range(buf_T *buf, int row1, int row2, int add)\n+{\n+  int count = 0;\n+  int currow = row1;\n+  MTPair pair = { 0 };\n+  MarkTreeIter itr[1];\n+  int *overlap = xcalloc(sizeof(int), (size_t)(row2 + 1 - row1));\n+\n+  marktree_itr_get_overlap(buf->b_marktree, currow, 0, itr);\n+  while (marktree_itr_step_overlap(buf->b_marktree, itr, &pair)) {",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1418782276",
            "id": 1418782276,
            "line": 825,
            "node_id": "PRRC_kwDOAPphoM5UkOZE",
            "original_commit_id": "2000abbdfe39f338c09796293f76ec8336d81b22",
            "original_line": 825,
            "original_position": 92,
            "original_start_line": null,
            "path": "src/nvim/decoration.c",
            "position": 107,
            "pull_request_review_id": 1769884985,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418782276/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-07T11:04:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418782276",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1418798909"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418798909"
                }
            },
            "author_association": "MEMBER",
            "body": "It does but this is called from `update_screen()`, in which directly modifying `w_redr_type` is more idiomatic.",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-07T11:17:50Z",
            "diff_hunk": "@@ -1200,16 +1192,34 @@ void comp_col(void)\n   set_vim_var_nr(VV_ECHOSPACE, sc_col - 1);\n }\n \n-static void redraw_win_signcol(win_T *wp)\n+/// Redraw entire window \"wp\" if configured 'signcolumn' width changes.\n+static void win_redraw_signcols(win_T *wp)\n {\n-  // If we can compute a change in the automatic sizing of the sign column\n-  // under 'signcolumn=auto:X' and signs currently placed in the buffer, better\n-  // figuring it out here so we can redraw the entire screen for it.\n+  bool rebuild_stc = false;\n+  buf_T *buf = wp->w_buffer;\n+  int width = buf->b_signcols.max;\n+\n+  if (wp->w_minscwidth <= SCL_NO) {\n+    if (*wp->w_p_stc) {\n+      buf_signcols_validate(wp, buf, true);\n+      if (buf->b_signcols.resized) {\n+        rebuild_stc = true;\n+        wp->w_nrwidth_line_count = 0;\n+      }\n+    }\n+    width = 0;\n+  } else if (wp->w_maxscwidth <= 1 && buf->b_signs_with_text >= (size_t)wp->w_maxscwidth) {\n+    width = wp->w_maxscwidth;\n+  } else if (map_size(buf->b_signcols.invalid)) {\n+    width = buf_signcols_validate(wp, buf, false);\n+  }\n+\n   int scwidth = wp->w_scwidth;\n-  wp->w_scwidth = win_signcol_count(wp);\n-  if (wp->w_scwidth != scwidth) {\n+  wp->w_scwidth = MAX(wp->w_minscwidth, width);\n+  if (scwidth != wp->w_scwidth || rebuild_stc) {\n+    wp->w_lines_valid = 0;\n+    wp->w_redr_type = UPD_NOT_VALID;",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1418798909",
            "id": 1418798909,
            "in_reply_to_id": 1418724583,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5UkSc9",
            "original_commit_id": "2000abbdfe39f338c09796293f76ec8336d81b22",
            "original_line": 1221,
            "original_position": 66,
            "original_start_line": null,
            "path": "src/nvim/drawscreen.c",
            "position": null,
            "pull_request_review_id": 1769926621,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418798909/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-07T11:21:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418798909",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1418801841"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418801841"
                }
            },
            "author_association": "MEMBER",
            "body": "The explanation is given in the `marktree_itr_get_overlap()` docstring. Can add a comment referring to that I guess.",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-07T11:19:55Z",
            "diff_hunk": "@@ -792,50 +792,113 @@ DecorSignHighlight *decor_find_sign(DecorInline decor)\n   }\n }\n \n-// Increase the signcolumn size and update the sentinel line if necessary for\n-// the invalidated range.\n-void decor_validate_signcols(buf_T *buf, int max)\n+/// If \"count\" is greater than current max, set it and make b_signcols valid.\n+/// Adjust max_count if validated row has or had max signs.\n+void buf_signcols_validate_row(buf_T *buf, int count, int add)\n {\n-  int signcols = 0;  // highest value of count\n-  int currow = buf->b_signcols.invalid_top - 1;\n-  // TODO(bfredl): only need to use marktree_itr_get_overlap once.\n-  // then we can process both start and end events and update state for each row\n-  for (; currow < buf->b_signcols.invalid_bot; currow++) {\n-    MarkTreeIter itr[1];\n-    if (!marktree_itr_get_overlap(buf->b_marktree, currow, 0, itr)) {\n-      continue;\n+  int del = add < 0 ? -add : 0;\n+  if (count > buf->b_signcols.max) {\n+    buf->b_signcols.max = count;\n+    buf->b_signcols.resized = true;\n+    buf->b_signcols.max_count = 0;\n+  }\n+  buf->b_signcols.max_count += (count == buf->b_signcols.max - del) * (del ? -1 : 1);\n+}\n+\n+void buf_signcols_validate_range(buf_T *buf, int row1, int row2, int add)\n+{\n+  int count = 0;\n+  int currow = row1;\n+  MTPair pair = { 0 };\n+  MarkTreeIter itr[1];\n+  int *overlap = xcalloc(sizeof(int), (size_t)(row2 + 1 - row1));\n+\n+  marktree_itr_get_overlap(buf->b_marktree, currow, 0, itr);\n+  while (marktree_itr_step_overlap(buf->b_marktree, itr, &pair)) {",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1418801841",
            "id": 1418801841,
            "in_reply_to_id": 1418782276,
            "line": 825,
            "node_id": "PRRC_kwDOAPphoM5UkTKx",
            "original_commit_id": "2000abbdfe39f338c09796293f76ec8336d81b22",
            "original_line": 825,
            "original_position": 92,
            "original_start_line": null,
            "path": "src/nvim/decoration.c",
            "position": 107,
            "pull_request_review_id": 1769930633,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418801841/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-07T11:20:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418801841",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1418805480"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418805480"
                }
            },
            "author_association": "MEMBER",
            "body": "But this is `win_redraw_signcols()`, the caller shouldn't matter. I don't think it is reasonable for the reader to have deep knowledge of the call stack in order to understand the code. \r\n\r\nThis should probably return a boolean then you can set `w_redr_type` in `update_screen()` directly.",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-07T11:22:34Z",
            "diff_hunk": "@@ -1200,16 +1192,34 @@ void comp_col(void)\n   set_vim_var_nr(VV_ECHOSPACE, sc_col - 1);\n }\n \n-static void redraw_win_signcol(win_T *wp)\n+/// Redraw entire window \"wp\" if configured 'signcolumn' width changes.\n+static void win_redraw_signcols(win_T *wp)\n {\n-  // If we can compute a change in the automatic sizing of the sign column\n-  // under 'signcolumn=auto:X' and signs currently placed in the buffer, better\n-  // figuring it out here so we can redraw the entire screen for it.\n+  bool rebuild_stc = false;\n+  buf_T *buf = wp->w_buffer;\n+  int width = buf->b_signcols.max;\n+\n+  if (wp->w_minscwidth <= SCL_NO) {\n+    if (*wp->w_p_stc) {\n+      buf_signcols_validate(wp, buf, true);\n+      if (buf->b_signcols.resized) {\n+        rebuild_stc = true;\n+        wp->w_nrwidth_line_count = 0;\n+      }\n+    }\n+    width = 0;\n+  } else if (wp->w_maxscwidth <= 1 && buf->b_signs_with_text >= (size_t)wp->w_maxscwidth) {\n+    width = wp->w_maxscwidth;\n+  } else if (map_size(buf->b_signcols.invalid)) {\n+    width = buf_signcols_validate(wp, buf, false);\n+  }\n+\n   int scwidth = wp->w_scwidth;\n-  wp->w_scwidth = win_signcol_count(wp);\n-  if (wp->w_scwidth != scwidth) {\n+  wp->w_scwidth = MAX(wp->w_minscwidth, width);\n+  if (scwidth != wp->w_scwidth || rebuild_stc) {\n+    wp->w_lines_valid = 0;\n+    wp->w_redr_type = UPD_NOT_VALID;",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1418805480",
            "id": 1418805480,
            "in_reply_to_id": 1418724583,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5UkUDo",
            "original_commit_id": "2000abbdfe39f338c09796293f76ec8336d81b22",
            "original_line": 1221,
            "original_position": 66,
            "original_start_line": null,
            "path": "src/nvim/drawscreen.c",
            "position": null,
            "pull_request_review_id": 1769936003,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418805480/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-07T11:22:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418805480",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1418824862"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418824862"
                }
            },
            "author_association": "MEMBER",
            "body": "Fair enough, still seems like an unnecessary redirection when I just want to quickly understand the intent of the code without having to learn an unusual API.",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-07T11:35:30Z",
            "diff_hunk": "@@ -792,50 +792,113 @@ DecorSignHighlight *decor_find_sign(DecorInline decor)\n   }\n }\n \n-// Increase the signcolumn size and update the sentinel line if necessary for\n-// the invalidated range.\n-void decor_validate_signcols(buf_T *buf, int max)\n+/// If \"count\" is greater than current max, set it and make b_signcols valid.\n+/// Adjust max_count if validated row has or had max signs.\n+void buf_signcols_validate_row(buf_T *buf, int count, int add)\n {\n-  int signcols = 0;  // highest value of count\n-  int currow = buf->b_signcols.invalid_top - 1;\n-  // TODO(bfredl): only need to use marktree_itr_get_overlap once.\n-  // then we can process both start and end events and update state for each row\n-  for (; currow < buf->b_signcols.invalid_bot; currow++) {\n-    MarkTreeIter itr[1];\n-    if (!marktree_itr_get_overlap(buf->b_marktree, currow, 0, itr)) {\n-      continue;\n+  int del = add < 0 ? -add : 0;\n+  if (count > buf->b_signcols.max) {\n+    buf->b_signcols.max = count;\n+    buf->b_signcols.resized = true;\n+    buf->b_signcols.max_count = 0;\n+  }\n+  buf->b_signcols.max_count += (count == buf->b_signcols.max - del) * (del ? -1 : 1);\n+}\n+\n+void buf_signcols_validate_range(buf_T *buf, int row1, int row2, int add)\n+{\n+  int count = 0;\n+  int currow = row1;\n+  MTPair pair = { 0 };\n+  MarkTreeIter itr[1];\n+  int *overlap = xcalloc(sizeof(int), (size_t)(row2 + 1 - row1));\n+\n+  marktree_itr_get_overlap(buf->b_marktree, currow, 0, itr);\n+  while (marktree_itr_step_overlap(buf->b_marktree, itr, &pair)) {",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1418824862",
            "id": 1418824862,
            "in_reply_to_id": 1418782276,
            "line": 825,
            "node_id": "PRRC_kwDOAPphoM5UkYye",
            "original_commit_id": "2000abbdfe39f338c09796293f76ec8336d81b22",
            "original_line": 825,
            "original_position": 92,
            "original_start_line": null,
            "path": "src/nvim/decoration.c",
            "position": 107,
            "pull_request_review_id": 1769961645,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418824862/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-07T11:35:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418824862",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1418837759"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418837759"
                }
            },
            "author_association": "MEMBER",
            "body": "What are we counting?",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-07T11:43:43Z",
            "diff_hunk": "@@ -792,50 +792,113 @@ DecorSignHighlight *decor_find_sign(DecorInline decor)\n   }\n }\n \n-// Increase the signcolumn size and update the sentinel line if necessary for\n-// the invalidated range.\n-void decor_validate_signcols(buf_T *buf, int max)\n+/// If \"count\" is greater than current max, set it and make b_signcols valid.\n+/// Adjust max_count if validated row has or had max signs.\n+void buf_signcols_validate_row(buf_T *buf, int count, int add)\n {\n-  int signcols = 0;  // highest value of count\n-  int currow = buf->b_signcols.invalid_top - 1;\n-  // TODO(bfredl): only need to use marktree_itr_get_overlap once.\n-  // then we can process both start and end events and update state for each row\n-  for (; currow < buf->b_signcols.invalid_bot; currow++) {\n-    MarkTreeIter itr[1];\n-    if (!marktree_itr_get_overlap(buf->b_marktree, currow, 0, itr)) {\n-      continue;\n+  int del = add < 0 ? -add : 0;\n+  if (count > buf->b_signcols.max) {\n+    buf->b_signcols.max = count;\n+    buf->b_signcols.resized = true;\n+    buf->b_signcols.max_count = 0;\n+  }\n+  buf->b_signcols.max_count += (count == buf->b_signcols.max - del) * (del ? -1 : 1);\n+}\n+\n+void buf_signcols_validate_range(buf_T *buf, int row1, int row2, int add)\n+{\n+  int count = 0;",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1418837759",
            "id": 1418837759,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Ukb7_",
            "original_commit_id": "2000abbdfe39f338c09796293f76ec8336d81b22",
            "original_line": 810,
            "original_position": 85,
            "original_start_line": null,
            "path": "src/nvim/decoration.c",
            "position": null,
            "pull_request_review_id": 1769978769,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418837759/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-07T11:43:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1418837759",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1419025862"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1419025862"
                }
            },
            "author_association": "MEMBER",
            "body": "Perfect",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-07T14:11:34Z",
            "diff_hunk": "@@ -792,50 +792,128 @@ DecorSignHighlight *decor_find_sign(DecorInline decor)\n   }\n }\n \n-// Increase the signcolumn size and update the sentinel line if necessary for\n-// the invalidated range.\n-void decor_validate_signcols(buf_T *buf, int max)\n+/// If \"count\" is greater than current max, set it and reset \"max_count\".\n+static void buf_signcols_validate_row(buf_T *buf, int count, int add)\n {\n-  int signcols = 0;  // highest value of count\n-  int currow = buf->b_signcols.invalid_top - 1;\n-  // TODO(bfredl): only need to use marktree_itr_get_overlap once.\n-  // then we can process both start and end events and update state for each row\n-  for (; currow < buf->b_signcols.invalid_bot; currow++) {\n-    MarkTreeIter itr[1];\n-    if (!marktree_itr_get_overlap(buf->b_marktree, currow, 0, itr)) {\n-      continue;\n-    }\n+  int del = add < 0 ? -add : 0;\n+  if (count > buf->b_signcols.max) {\n+    buf->b_signcols.max = count;\n+    buf->b_signcols.max_count = 0;\n+    buf->b_signcols.resized = true;\n+  }\n+  /// Add sign of \"add\" to \"max_count\"\n+  if (count == buf->b_signcols.max - del) {\n+    buf->b_signcols.max_count += (add > 0) - (add < 0);\n+  }\n+}\n \n-    int count = 0;\n-    MTPair pair;\n-    while (marktree_itr_step_overlap(buf->b_marktree, itr, &pair)) {\n-      if (!mt_invalid(pair.start) && (pair.start.flags & MT_FLAG_DECOR_SIGNTEXT)) {\n-        count++;\n-      }\n+/// Validate a range by counting the number of overlapping signs and adjusting\n+/// \"b_signcols\" accordingly.\n+static void buf_signcols_validate_range(buf_T *buf, int row1, int row2, int add)\n+{\n+  int count = 0;  // Number of signs on the current line\n+  int currow = row1;\n+  MTPair pair = { 0 };\n+  MarkTreeIter itr[1];\n+\n+  // Allocate an array of integers holding the overlapping signs in the range.\n+  assert(row2 >= row1);\n+  int *overlap = xcalloc(sizeof(int), (size_t)(row2 + 1 - row1));\n+\n+  // First find the number of overlapping signs at \"row1\".\n+  marktree_itr_get_overlap(buf->b_marktree, currow, 0, itr);\n+  while (marktree_itr_step_overlap(buf->b_marktree, itr, &pair)) {\n+    if (!mt_invalid(pair.start) && pair.start.flags & MT_FLAG_DECOR_SIGNTEXT) {\n+      overlap[0]++;\n     }\n+  }\n \n-    while (itr->x) {\n-      MTKey mark = marktree_itr_current(itr);\n-      if (mark.pos.row != currow) {\n-        break;\n-      }\n-      if (!mt_invalid(mark) && !mt_end(mark) && (mark.flags & MT_FLAG_DECOR_SIGNTEXT)) {\n-        count++;\n-      }\n-      marktree_itr_next(buf->b_marktree, itr);\n+  // Continue traversing the marktree until beyond \"row2\". Increment \"count\" for\n+  // the start of a mark, increment the overlap array until the end of a paired mark.",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1419025862",
            "id": 1419025862,
            "line": 832,
            "node_id": "PRRC_kwDOAPphoM5UlJ3G",
            "original_commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "original_line": 832,
            "original_position": 123,
            "original_start_line": null,
            "path": "src/nvim/decoration.c",
            "position": 123,
            "pull_request_review_id": 1770253354,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1419025862/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-07T14:11:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1419025862",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26406#discussion_r1419077076"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26406"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1419077076"
                }
            },
            "author_association": "MEMBER",
            "body": "Full disclosure: I'm not entirely sure what happens if the overlapping range does not have the same `add`.\r\nMaybe we need to get rid of this optimization if I can find a test case where this goes wrong.",
            "commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "created_at": "2023-12-07T14:44:42Z",
            "diff_hunk": "@@ -792,50 +792,128 @@ DecorSignHighlight *decor_find_sign(DecorInline decor)\n   }\n }\n \n-// Increase the signcolumn size and update the sentinel line if necessary for\n-// the invalidated range.\n-void decor_validate_signcols(buf_T *buf, int max)\n+/// If \"count\" is greater than current max, set it and reset \"max_count\".\n+static void buf_signcols_validate_row(buf_T *buf, int count, int add)\n {\n-  int signcols = 0;  // highest value of count\n-  int currow = buf->b_signcols.invalid_top - 1;\n-  // TODO(bfredl): only need to use marktree_itr_get_overlap once.\n-  // then we can process both start and end events and update state for each row\n-  for (; currow < buf->b_signcols.invalid_bot; currow++) {\n-    MarkTreeIter itr[1];\n-    if (!marktree_itr_get_overlap(buf->b_marktree, currow, 0, itr)) {\n-      continue;\n-    }\n+  int del = add < 0 ? -add : 0;\n+  if (count > buf->b_signcols.max) {\n+    buf->b_signcols.max = count;\n+    buf->b_signcols.max_count = 0;\n+    buf->b_signcols.resized = true;\n+  }\n+  /// Add sign of \"add\" to \"max_count\"\n+  if (count == buf->b_signcols.max - del) {\n+    buf->b_signcols.max_count += (add > 0) - (add < 0);\n+  }\n+}\n \n-    int count = 0;\n-    MTPair pair;\n-    while (marktree_itr_step_overlap(buf->b_marktree, itr, &pair)) {\n-      if (!mt_invalid(pair.start) && (pair.start.flags & MT_FLAG_DECOR_SIGNTEXT)) {\n-        count++;\n-      }\n+/// Validate a range by counting the number of overlapping signs and adjusting\n+/// \"b_signcols\" accordingly.\n+static void buf_signcols_validate_range(buf_T *buf, int row1, int row2, int add)\n+{\n+  int count = 0;  // Number of signs on the current line\n+  int currow = row1;\n+  MTPair pair = { 0 };\n+  MarkTreeIter itr[1];\n+\n+  // Allocate an array of integers holding the overlapping signs in the range.\n+  assert(row2 >= row1);\n+  int *overlap = xcalloc(sizeof(int), (size_t)(row2 + 1 - row1));\n+\n+  // First find the number of overlapping signs at \"row1\".\n+  marktree_itr_get_overlap(buf->b_marktree, currow, 0, itr);\n+  while (marktree_itr_step_overlap(buf->b_marktree, itr, &pair)) {\n+    if (!mt_invalid(pair.start) && pair.start.flags & MT_FLAG_DECOR_SIGNTEXT) {\n+      overlap[0]++;\n     }\n+  }\n \n-    while (itr->x) {\n-      MTKey mark = marktree_itr_current(itr);\n-      if (mark.pos.row != currow) {\n-        break;\n-      }\n-      if (!mt_invalid(mark) && !mt_end(mark) && (mark.flags & MT_FLAG_DECOR_SIGNTEXT)) {\n-        count++;\n-      }\n-      marktree_itr_next(buf->b_marktree, itr);\n+  // Continue traversing the marktree until beyond \"row2\". Increment \"count\" for\n+  // the start of a mark, increment the overlap array until the end of a paired mark.\n+  while (itr->x) {\n+    MTKey mark = marktree_itr_current(itr);\n+    if (mark.pos.row > row2) {\n+      break;\n+    }\n+    // Finish the count at the previous row.\n+    if (mark.pos.row != currow) {\n+      buf_signcols_validate_row(buf, count + overlap[currow - row1], add);\n+      currow = mark.pos.row;\n+      count = 0;\n     }\n \n-    if (count > signcols) {\n-      if (count >= buf->b_signcols.size) {\n-        buf->b_signcols.size = count;\n-        buf->b_signcols.sentinel = currow + 1;\n-      }\n-      if (count >= max) {\n-        return;\n+    // Increment count and overlap array for the range of a paired sign mark.\n+    if (!mt_invalid(mark) && !mt_end(mark) && (mark.flags & MT_FLAG_DECOR_SIGNTEXT)) {\n+      count++;\n+      if (mt_paired(mark)) {\n+        MTPos end = marktree_get_altpos(buf->b_marktree, mark, NULL);\n+        for (int i = mark.pos.row; i < MIN(row2, end.row); i++) {\n+          overlap[row2 - i]++;\n+        }\n       }\n-      signcols = count;\n     }\n+\n+    marktree_itr_next(buf->b_marktree, itr);\n+  }\n+  buf_signcols_validate_row(buf, count + overlap[currow - row1], add);\n+  xfree(overlap);\n+}\n+\n+int buf_signcols_validate(win_T *wp, buf_T *buf, bool stc_check)\n+{\n+  int start;\n+  SignRange range;\n+  map_foreach(buf->b_signcols.invalid, start, range, {\n+    // Leave rest of the ranges invalid if max is already greater than\n+    // configured maximum or resize is detected for 'statuscolumn' rebuild.\n+    if ((!stc_check || buf->b_signcols.resized)\n+        && (range.add > 0 && buf->b_signcols.max >= wp->w_maxscwidth)) {\n+      return wp->w_maxscwidth;\n+    }\n+    buf_signcols_validate_range(buf, start, range.end, range.add);\n+  });\n+\n+  // Check if we need to scan the entire buffer.\n+  if (buf->b_signcols.max_count == 0) {\n+    buf->b_signcols.max = 0;\n+    buf->b_signcols.resized = true;\n+    buf_signcols_validate_range(buf, 0, buf->b_ml.ml_line_count, 0);\n+  }\n+\n+  map_clear(int, buf->b_signcols.invalid);\n+  return buf->b_signcols.max;\n+}\n+\n+static void buf_signcols_invalidate_range(buf_T *buf, int row1, int row2, int add)\n+{\n+  if (!buf->b_signs_with_text) {\n+    buf->b_signcols.max = buf->b_signcols.max_count = 0;\n+    buf->b_signcols.resized = true;\n+    map_clear(int, buf->b_signcols.invalid);\n+    return;\n+  }\n+\n+  // Remove an invalid range if sum of added/removed signs is now 0.\n+  SignRange *srp = map_ref(int, SignRange)(buf->b_signcols.invalid, row1, NULL);\n+  if (srp && srp->end == row2 && srp->add + add == 0) {\n+    map_del(int, SignRange)(buf->b_signcols.invalid, row1, NULL);\n+    return;\n   }\n+\n+  // Merge with overlapping invalid range.",
            "html_url": "https://github.com/neovim/neovim/pull/26406#discussion_r1419077076",
            "id": 1419077076,
            "line": 903,
            "node_id": "PRRC_kwDOAPphoM5UlWXU",
            "original_commit_id": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
            "original_line": 903,
            "original_position": 202,
            "original_start_line": null,
            "path": "src/nvim/decoration.c",
            "position": 202,
            "pull_request_review_id": 1770326490,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1419077076/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-07T14:44:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1419077076",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "Seems the assert I added doesn't hold. Not sure if it matters.\r\nI guess that happens when `max_count` is decremented to 0, and further signs are removed before a redraw which would validate `max_count` again.",
            "created_at": "2023-12-05T15:32:21Z",
            "html_url": "https://github.com/neovim/neovim/pull/26406#issuecomment-1841031422",
            "id": 1841031422,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26406",
            "node_id": "IC_kwDOAPphoM5tu-j-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1841031422/reactions"
            },
            "updated_at": "2023-12-05T15:32:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1841031422",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "One adverse effect of this refactor is that `'signcolumn' == \"number/yes/no/auto:1\"` users will also pay for counting the number of signs immediately upon sign insertion/deletion (small cost just counting the number of signs in the affected range). Not when validating at the start of a redraw though, here we have the window context and can return early.\r\n\r\nMaybe this can be avoided by looping over all windows and considering the maximum of all `maxscwidth` for windows that hold the buffer in which the sign is being inserted/deleted. Not sure if that's worth it.",
            "created_at": "2023-12-05T15:54:23Z",
            "html_url": "https://github.com/neovim/neovim/pull/26406#issuecomment-1841075445",
            "id": 1841075445,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26406",
            "node_id": "IC_kwDOAPphoM5tvJT1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1841075445/reactions"
            },
            "updated_at": "2023-12-06T04:57:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1841075445",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I've confirmed that indeed the number of times the entire buffer needs to be validated is greatly reduced. `make functionaltest` only checks the entire buffer twice to validate `b_signcols`, vs 72 times on `master`.\r\n\r\nDespite this, we end up checking **more** lines, because we check the range of the added/removed sign immediately upon sign insertion/deletion. For real usage I would think this PR is already an improvement (`make functionaltest` only tests small buffers). But I wanna see if checking for added/removed signs can be somehow delayed. So that when multiple signs are added to the same range, counting the number of signs on that range is not done multiple times. Which is where I presume this difference in number of checked lines is coming from.",
            "created_at": "2023-12-05T20:41:13Z",
            "html_url": "https://github.com/neovim/neovim/pull/26406#issuecomment-1841579900",
            "id": 1841579900,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26406",
            "node_id": "IC_kwDOAPphoM5txEd8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1841579900/reactions"
            },
            "updated_at": "2023-12-06T04:57:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1841579900",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Both the number of times we have to scan the entire buffer, and the number of lines checked is now significantly reduced.",
            "created_at": "2023-12-06T05:07:07Z",
            "html_url": "https://github.com/neovim/neovim/pull/26406#issuecomment-1842094652",
            "id": 1842094652,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26406",
            "node_id": "IC_kwDOAPphoM5tzCI8",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1842094652/reactions"
            },
            "updated_at": "2023-12-06T13:54:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1842094652",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Hmm, it fails to update the signcolumn width accordingly when removing multiple signs from a single line:\r\n```lua\r\nvim.o.signcolumn = \"auto:3\"\r\nvim.cmd.call(\"setline(1, ['aaaa']->repeat(10))\")\r\n_G.ns = vim.api.nvim_create_namespace('')\r\nvim.api.nvim_buf_set_extmark(0, ns, 0, 0, { invalidate = true, sign_text = 'S1', end_row = 2 })\r\nvim.api.nvim_buf_set_extmark(0, ns, 1, 0, { invalidate = true, sign_text = 'S2'})\r\nvim.api.nvim_buf_set_extmark(0, ns, 1, 0, { invalidate = true, sign_text = 'S3'})\r\nvim.cmd.redraw()\r\nvim.cmd.norm('2Gdd')\r\n```\r\n\r\nIf we want to keep the invalid map I think it needs to also store how many signs were removed from a line.",
            "created_at": "2023-12-06T17:26:58Z",
            "html_url": "https://github.com/neovim/neovim/pull/26406#issuecomment-1843341432",
            "id": 1843341432,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26406",
            "node_id": "IC_kwDOAPphoM5t3yh4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1843341432/reactions"
            },
            "updated_at": "2023-12-06T20:20:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1843341432",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> If we want to keep the invalid map I think it needs to also store how many signs were removed from a line.\r\n\r\nI've gone ahead and done this, unfortunately making the diff slightly bigger (also added a test). But like I said without adding the invalid map (just adding `b_signcols.max_count`), this PR actually increases the number of lines checked. Probably because the current `b_signcols.sentinel` is disproportionally effective in `make functionaltest`. Even so, now at least we can be sure it is a pure performance improvement.",
            "created_at": "2023-12-06T20:20:35Z",
            "html_url": "https://github.com/neovim/neovim/pull/26406#issuecomment-1843628815",
            "id": 1843628815,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26406",
            "node_id": "IC_kwDOAPphoM5t44sP",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1843628815/reactions"
            },
            "updated_at": "2023-12-06T20:29:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1843628815",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Thanks for the review!",
            "created_at": "2023-12-07T14:22:30Z",
            "html_url": "https://github.com/neovim/neovim/pull/26406#issuecomment-1845430253",
            "id": 1845430253,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26406",
            "node_id": "IC_kwDOAPphoM5t_wft",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1845430253/reactions"
            },
            "updated_at": "2023-12-07T14:22:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1845430253",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/26406/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/26406/commits",
    "created_at": "2023-12-05T14:55:55Z",
    "diff_url": "https://github.com/neovim/neovim/pull/26406.diff",
    "draft": false,
    "head": {
        "label": "luukvbaal:maxcount",
        "ref": "maxcount",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/luukvbaal/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/luukvbaal/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/luukvbaal/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/luukvbaal/neovim/branches{/branch}",
            "clone_url": "https://github.com/luukvbaal/neovim.git",
            "collaborators_url": "https://api.github.com/repos/luukvbaal/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/luukvbaal/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/luukvbaal/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/luukvbaal/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/luukvbaal/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/luukvbaal/neovim/contributors",
            "created_at": "2022-07-05T23:21:47Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/luukvbaal/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/luukvbaal/neovim/downloads",
            "events_url": "https://api.github.com/repos/luukvbaal/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/luukvbaal/neovim/forks",
            "full_name": "luukvbaal/neovim",
            "git_commits_url": "https://api.github.com/repos/luukvbaal/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/luukvbaal/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/luukvbaal/neovim/git/tags{/sha}",
            "git_url": "git://github.com/luukvbaal/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/luukvbaal/neovim/hooks",
            "html_url": "https://github.com/luukvbaal/neovim",
            "id": 510922471,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/luukvbaal/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/luukvbaal/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/luukvbaal/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/luukvbaal/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/luukvbaal/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/luukvbaal/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/luukvbaal/neovim/merges",
            "milestones_url": "https://api.github.com/repos/luukvbaal/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOHnQO5w",
            "notifications_url": "https://api.github.com/repos/luukvbaal/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/luukvbaal/neovim/pulls{/number}",
            "pushed_at": "2023-12-07T13:00:55Z",
            "releases_url": "https://api.github.com/repos/luukvbaal/neovim/releases{/id}",
            "size": 238195,
            "ssh_url": "git@github.com:luukvbaal/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/luukvbaal/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/luukvbaal/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/luukvbaal/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/luukvbaal/neovim/subscription",
            "svn_url": "https://github.com/luukvbaal/neovim",
            "tags_url": "https://api.github.com/repos/luukvbaal/neovim/tags",
            "teams_url": "https://api.github.com/repos/luukvbaal/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/luukvbaal/neovim/git/trees{/sha}",
            "updated_at": "2022-09-14T02:39:38Z",
            "url": "https://api.github.com/repos/luukvbaal/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "4bdff57576939f0e71c6f24cb758a3b0db66d836",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
            "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
            "followers_url": "https://api.github.com/users/luukvbaal/followers",
            "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
            "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/luukvbaal",
            "id": 31730729,
            "login": "luukvbaal",
            "node_id": "MDQ6VXNlcjMxNzMwNzI5",
            "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
            "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
            "repos_url": "https://api.github.com/users/luukvbaal/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/luukvbaal"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/26406",
    "id": 1630567444,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26406",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "sign/number column",
            "id": 2962322085,
            "name": "column",
            "node_id": "MDU6TGFiZWwyOTYyMzIyMDg1",
            "url": "https://api.github.com/repos/neovim/neovim/labels/column"
        }
    ],
    "locked": false,
    "merge_commit_sha": "4a34da82c18e6da1e46d6bf3d21082a6b6c8b947",
    "merged_at": "2023-12-07T14:22:24Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5hMHwU",
    "number": 26406,
    "patch_url": "https://github.com/neovim/neovim/pull/26406.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/26406/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/4bdff57576939f0e71c6f24cb758a3b0db66d836",
    "title": "perf(column): keep track of number of lines that hold up the 'signcolumn'",
    "updated_at": "2023-12-07T14:44:42Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/26406",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
        "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
        "followers_url": "https://api.github.com/users/luukvbaal/followers",
        "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
        "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/luukvbaal",
        "id": 31730729,
        "login": "luukvbaal",
        "node_id": "MDQ6VXNlcjMxNzMwNzI5",
        "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
        "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
        "repos_url": "https://api.github.com/users/luukvbaal/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/luukvbaal"
    }
}