{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/25826/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/25826/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/25826"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/25826"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/25826/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/25826"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/489ddbc2db57362a489aeee284c7e69288480392"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5000,
            "forks_count": 5000,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1690,
            "open_issues_count": 1690,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2023-11-22T01:50:28Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 234192,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 71096,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2023-11-21T23:18:53Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 71096,
            "watchers_count": 71096,
            "web_commit_signoff_required": false
        },
        "sha": "fec5e3ab247bcc1ced67f1d0aa7fa10f694f933b",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "Remove the monolithic Decoration struct. Before this change, each extmark could either represent just a hl_id + priority value as a inline decoration, or it would take a pointer to this monolitic 112 byte struct which has to be allocated.\r\n\r\nThis separates the decorations into two pieces: DecorSignHighlight for signs, highlights and simple set-flag decorations (like spell, ui-watched), and DecorVirtText for virtual text and lines.\r\n\r\nThe main separation here is whether they are expected to allocate more memory. Currently this is not really true as sign text has to be an allocated string, but the plan is to get rid of this eventually (it can just be an array of two schar_T:s). Further refactors are expected to improve the representation of each decoration kind individually. The goal of this particular PR is to get things started by cutting the Gordian knot which was the monolithic struct Decoration.\r\n\r\nNow, each extmark can either contain chained indices/pointers to these kinds of objects, or it can fit a subset of DecorSignHighlight inline.\r\n\r\nThe point of this change is not only to make simple decorations smaller in memory. In fact, the main motivation is to later allow them to grow **larger**, but on a dynamic, on demand fashion. As a simple example, it would be possible to augment highlights to take a list of multiple `hl_group`:s, which then would trivially map to a chain of multiple DecorSignHighlight entries.\r\n\r\nOne small feature improvement included with this refactor itself, is that the restriction that extmarks cannot be removed inside a decoration provider has been lifted. These are instead safely lifetime extended on a \"to free\" list until the current iteration of screen drawing is done.",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25826#discussion_r1399264834"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25826"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1399264834"
                }
            },
            "author_association": "MEMBER",
            "body": "If this function is necessary the docstring here and at `sign_list_append_info()` should be updated.",
            "commit_id": "489ddbc2db57362a489aeee284c7e69288480392",
            "created_at": "2023-11-20T14:14:57Z",
            "diff_hunk": "@@ -873,6 +881,22 @@ static void sign_list_append_info(sign_T *sp, MTKey *mark, list_T *retlist)\n   }\n }\n \n+/// Append dictionary of information for a defined sign \"sp\", or placed\n+/// sign \"mark\" to \"retlist\". Either \"sp\", or \"mark\" is NULL.",
            "html_url": "https://github.com/neovim/neovim/pull/25826#discussion_r1399264834",
            "id": 1399264834,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5TZxZC",
            "original_commit_id": "738aa31a60bc26fe5e98acdf246e5bb32949e466",
            "original_line": 885,
            "original_position": 139,
            "original_start_line": null,
            "path": "src/nvim/sign.c",
            "position": null,
            "pull_request_review_id": 1739919878,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25826",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1399264834/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-20T14:40:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1399264834",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25826#discussion_r1399293154"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25826"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1399293154"
                }
            },
            "author_association": "MEMBER",
            "body": "Would it make sense to (also or instead) add these to `MTKey->flags` in `extmark_set()`?\r\nSo that one can do `if (mark & ExtmarkType)` directly instead of looping over all decor items when needing to determine the type.\r\n\r\nI.e. `if (mark.(flags/type) & kExtmarkSignHL)` instead of `if (decor_find_sign(mt_decor(mark))`.",
            "commit_id": "489ddbc2db57362a489aeee284c7e69288480392",
            "created_at": "2023-11-20T14:35:17Z",
            "diff_hunk": "@@ -612,20 +899,175 @@ int decor_virt_lines(win_T *wp, linenr_T lnum, VirtLines *lines, TriState has_fo\n       break;\n     } else if (mt_end(mark)\n                || marktree_decor_level(mark) < kDecorLevelVirtLine\n-               || !mark.decor_full) {\n+               || !(mark.flags & MT_FLAG_DECOR_EXT)) {\n       goto next_mark;\n     }\n-    Decoration *const decor = mark.decor_full;\n-    const int draw_row = mark.pos.row + (decor->virt_lines_above ? 0 : 1);\n-    if (draw_row == row) {\n-      virt_lines += (int)kv_size(decor->virt_lines);\n-      if (lines) {\n-        kv_splice(*lines, decor->virt_lines);\n+    DecorVirtText *vt = mark.decor_data.ext.vt;\n+    while (vt) {\n+      if (vt->flags & kVTIsLines) {\n+        bool above = vt->flags & kVTLinesAbove;\n+        int draw_row = mark.pos.row + (above ? 0 : 1);\n+        if (draw_row == row) {\n+          virt_lines += (int)kv_size(vt->data.virt_lines);\n+          if (lines) {\n+            kv_splice(*lines, vt->data.virt_lines);\n+          }\n+        }\n       }\n+      vt = vt->next;\n     }\n next_mark:\n     marktree_itr_next(buf->b_marktree, itr);\n   }\n \n   return virt_lines;\n }\n+\n+void put_decor_to_dict_legacy(Dictionary *dict, DecorInline decor, bool hl_name)\n+{\n+  DecorSignHighlight sh_hl = DECOR_SIGN_HIGHLIGHT_INIT;\n+  DecorSignHighlight sh_sign = DECOR_SIGN_HIGHLIGHT_INIT;\n+  DecorVirtText *virt_text = NULL;\n+  DecorVirtText *virt_lines = NULL;\n+  int32_t priority = -1;  // sentinel value which cannot actually be set\n+\n+  if (decor.ext) {\n+    DecorVirtText *vt = decor.data.ext.vt;\n+    while (vt) {\n+      if (vt->flags & kVTIsLines) {\n+        virt_lines = vt;\n+      } else {\n+        virt_text = vt;\n+      }\n+      vt = vt->next;\n+    }\n+\n+    uint32_t idx = decor.data.ext.sh_idx;\n+    while (idx != DECOR_ID_INVALID) {\n+      DecorSignHighlight *sh = &kv_A(decor_items, idx);\n+      if (sh->flags & (kSHIsSign)) {\n+        sh_sign = *sh;\n+      } else {\n+        sh_hl = *sh;\n+      }\n+      idx = sh->next;\n+    }\n+  } else {\n+    sh_hl = decor_sh_from_inline(decor.data.hl, (String)STRING_INIT);\n+  }\n+\n+  if (sh_hl.hl_id) {\n+    PUT(*dict, \"hl_group\", hl_group_name(sh_hl.hl_id, hl_name));\n+    PUT(*dict, \"hl_eol\", BOOLEAN_OBJ(sh_hl.flags & kSHHlEol));\n+    if (sh_hl.flags & kSHConceal) {\n+      String name;\n+      if (sh_hl.flags & kSHConcealAlloc) {\n+        name = cstr_to_string(sh_hl.text.ptr);\n+      } else {\n+        name = cbuf_to_string(sh_hl.text.data, strnlen(sh_hl.text.data, 8));\n+      }\n+      PUT(*dict, \"conceal\", STRING_OBJ(name));\n+    }\n+\n+    if (sh_hl.flags & kSHSpellOn) {\n+      PUT(*dict, \"spell\", BOOLEAN_OBJ(true));\n+    } else if (sh_hl.flags & kSHSpellOff) {\n+      PUT(*dict, \"spell\", BOOLEAN_OBJ(false));\n+    }\n+\n+    priority = sh_hl.priority;\n+  }\n+\n+  if (sh_hl.flags & kSHUIWatched) {\n+    PUT(*dict, \"ui_watched\", BOOLEAN_OBJ(true));\n+  }\n+\n+  if (virt_text) {\n+    if (virt_text->hl_mode) {\n+      PUT(*dict, \"hl_mode\", CSTR_TO_OBJ(hl_mode_str[virt_text->hl_mode]));\n+    }\n+\n+    Array chunks = virt_text_to_array(virt_text->data.virt_text, hl_name);\n+    PUT(*dict, \"virt_text\", ARRAY_OBJ(chunks));\n+    PUT(*dict, \"virt_text_hide\", BOOLEAN_OBJ(virt_text->flags & kVTHide));\n+    if (virt_text->pos == kVPosWinCol) {\n+      PUT(*dict, \"virt_text_win_col\", INTEGER_OBJ(virt_text->col));\n+    }\n+    PUT(*dict, \"virt_text_pos\",\n+        CSTR_TO_OBJ(virt_text_pos_str[virt_text->pos]));\n+    priority = virt_text->priority;\n+  }\n+\n+  if (virt_lines) {\n+    Array all_chunks = ARRAY_DICT_INIT;\n+    bool virt_lines_leftcol = false;\n+    for (size_t i = 0; i < kv_size(virt_lines->data.virt_lines); i++) {\n+      virt_lines_leftcol = kv_A(virt_lines->data.virt_lines, i).left_col;\n+      Array chunks = virt_text_to_array(kv_A(virt_lines->data.virt_lines, i).line, hl_name);\n+      ADD(all_chunks, ARRAY_OBJ(chunks));\n+    }\n+    PUT(*dict, \"virt_lines\", ARRAY_OBJ(all_chunks));\n+    PUT(*dict, \"virt_lines_above\", BOOLEAN_OBJ(virt_lines->flags & kVTLinesAbove));\n+    PUT(*dict, \"virt_lines_leftcol\", BOOLEAN_OBJ(virt_lines_leftcol));\n+    priority = virt_lines->priority;\n+  }\n+\n+  if (sh_sign.flags & kSHIsSign) {\n+    if (sh_sign.text.ptr) {\n+      PUT(*dict, \"sign_text\", CSTR_TO_OBJ(sh_sign.text.ptr));\n+    }\n+\n+    // uncrustify:off\n+\n+    struct { char *name; const int val; } hls[] = {\n+      { \"sign_hl_group\"      , sh_sign.hl_id            },\n+      { \"number_hl_group\"    , sh_sign.number_hl_id     },\n+      { \"line_hl_group\"      , sh_sign.line_hl_id       },\n+      { \"cursorline_hl_group\", sh_sign.cursorline_hl_id },\n+      { NULL, 0 },\n+    };\n+\n+    // uncrustify:on\n+\n+    for (int j = 0; hls[j].name; j++) {\n+      if (hls[j].val) {\n+        PUT(*dict, hls[j].name, hl_group_name(hls[j].val, hl_name));\n+      }\n+    }\n+    priority = sh_sign.priority;\n+  }\n+\n+  if (priority != -1) {\n+    PUT(*dict, \"priority\", INTEGER_OBJ(priority));\n+  }\n+}\n+\n+uint16_t decor_type_flags(DecorInline decor)",
            "html_url": "https://github.com/neovim/neovim/pull/25826#discussion_r1399293154",
            "id": 1399293154,
            "line": 1041,
            "node_id": "PRRC_kwDOAPphoM5TZ4Ti",
            "original_commit_id": "738aa31a60bc26fe5e98acdf246e5bb32949e466",
            "original_line": 1041,
            "original_position": 996,
            "original_start_line": null,
            "path": "src/nvim/decoration.c",
            "position": 999,
            "pull_request_review_id": 1739919878,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25826",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1399293154/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-20T14:59:38Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1399293154",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25826#discussion_r1399324007"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25826"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1399324007"
                }
            },
            "author_association": "MEMBER",
            "body": "I had prepared this commit a while ago: https://github.com/luukvbaal/neovim/commit/36de27eff028d8d5b746e9eb7cfe91ac2cde616d.",
            "commit_id": "489ddbc2db57362a489aeee284c7e69288480392",
            "created_at": "2023-11-20T14:57:03Z",
            "diff_hunk": "@@ -612,20 +899,175 @@ int decor_virt_lines(win_T *wp, linenr_T lnum, VirtLines *lines, TriState has_fo\n       break;\n     } else if (mt_end(mark)\n                || marktree_decor_level(mark) < kDecorLevelVirtLine\n-               || !mark.decor_full) {\n+               || !(mark.flags & MT_FLAG_DECOR_EXT)) {\n       goto next_mark;\n     }\n-    Decoration *const decor = mark.decor_full;\n-    const int draw_row = mark.pos.row + (decor->virt_lines_above ? 0 : 1);\n-    if (draw_row == row) {\n-      virt_lines += (int)kv_size(decor->virt_lines);\n-      if (lines) {\n-        kv_splice(*lines, decor->virt_lines);\n+    DecorVirtText *vt = mark.decor_data.ext.vt;\n+    while (vt) {\n+      if (vt->flags & kVTIsLines) {\n+        bool above = vt->flags & kVTLinesAbove;\n+        int draw_row = mark.pos.row + (above ? 0 : 1);\n+        if (draw_row == row) {\n+          virt_lines += (int)kv_size(vt->data.virt_lines);\n+          if (lines) {\n+            kv_splice(*lines, vt->data.virt_lines);\n+          }\n+        }\n       }\n+      vt = vt->next;\n     }\n next_mark:\n     marktree_itr_next(buf->b_marktree, itr);\n   }\n \n   return virt_lines;\n }\n+\n+void put_decor_to_dict_legacy(Dictionary *dict, DecorInline decor, bool hl_name)\n+{\n+  DecorSignHighlight sh_hl = DECOR_SIGN_HIGHLIGHT_INIT;\n+  DecorSignHighlight sh_sign = DECOR_SIGN_HIGHLIGHT_INIT;\n+  DecorVirtText *virt_text = NULL;\n+  DecorVirtText *virt_lines = NULL;\n+  int32_t priority = -1;  // sentinel value which cannot actually be set\n+\n+  if (decor.ext) {\n+    DecorVirtText *vt = decor.data.ext.vt;\n+    while (vt) {\n+      if (vt->flags & kVTIsLines) {\n+        virt_lines = vt;\n+      } else {\n+        virt_text = vt;\n+      }\n+      vt = vt->next;\n+    }\n+\n+    uint32_t idx = decor.data.ext.sh_idx;\n+    while (idx != DECOR_ID_INVALID) {\n+      DecorSignHighlight *sh = &kv_A(decor_items, idx);\n+      if (sh->flags & (kSHIsSign)) {\n+        sh_sign = *sh;\n+      } else {\n+        sh_hl = *sh;\n+      }\n+      idx = sh->next;\n+    }\n+  } else {\n+    sh_hl = decor_sh_from_inline(decor.data.hl, (String)STRING_INIT);\n+  }\n+\n+  if (sh_hl.hl_id) {\n+    PUT(*dict, \"hl_group\", hl_group_name(sh_hl.hl_id, hl_name));\n+    PUT(*dict, \"hl_eol\", BOOLEAN_OBJ(sh_hl.flags & kSHHlEol));\n+    if (sh_hl.flags & kSHConceal) {\n+      String name;\n+      if (sh_hl.flags & kSHConcealAlloc) {\n+        name = cstr_to_string(sh_hl.text.ptr);\n+      } else {\n+        name = cbuf_to_string(sh_hl.text.data, strnlen(sh_hl.text.data, 8));\n+      }\n+      PUT(*dict, \"conceal\", STRING_OBJ(name));\n+    }\n+\n+    if (sh_hl.flags & kSHSpellOn) {\n+      PUT(*dict, \"spell\", BOOLEAN_OBJ(true));\n+    } else if (sh_hl.flags & kSHSpellOff) {\n+      PUT(*dict, \"spell\", BOOLEAN_OBJ(false));\n+    }\n+\n+    priority = sh_hl.priority;\n+  }\n+\n+  if (sh_hl.flags & kSHUIWatched) {\n+    PUT(*dict, \"ui_watched\", BOOLEAN_OBJ(true));\n+  }\n+\n+  if (virt_text) {\n+    if (virt_text->hl_mode) {\n+      PUT(*dict, \"hl_mode\", CSTR_TO_OBJ(hl_mode_str[virt_text->hl_mode]));\n+    }\n+\n+    Array chunks = virt_text_to_array(virt_text->data.virt_text, hl_name);\n+    PUT(*dict, \"virt_text\", ARRAY_OBJ(chunks));\n+    PUT(*dict, \"virt_text_hide\", BOOLEAN_OBJ(virt_text->flags & kVTHide));\n+    if (virt_text->pos == kVPosWinCol) {\n+      PUT(*dict, \"virt_text_win_col\", INTEGER_OBJ(virt_text->col));\n+    }\n+    PUT(*dict, \"virt_text_pos\",\n+        CSTR_TO_OBJ(virt_text_pos_str[virt_text->pos]));\n+    priority = virt_text->priority;\n+  }\n+\n+  if (virt_lines) {\n+    Array all_chunks = ARRAY_DICT_INIT;\n+    bool virt_lines_leftcol = false;\n+    for (size_t i = 0; i < kv_size(virt_lines->data.virt_lines); i++) {\n+      virt_lines_leftcol = kv_A(virt_lines->data.virt_lines, i).left_col;\n+      Array chunks = virt_text_to_array(kv_A(virt_lines->data.virt_lines, i).line, hl_name);\n+      ADD(all_chunks, ARRAY_OBJ(chunks));\n+    }\n+    PUT(*dict, \"virt_lines\", ARRAY_OBJ(all_chunks));\n+    PUT(*dict, \"virt_lines_above\", BOOLEAN_OBJ(virt_lines->flags & kVTLinesAbove));\n+    PUT(*dict, \"virt_lines_leftcol\", BOOLEAN_OBJ(virt_lines_leftcol));\n+    priority = virt_lines->priority;\n+  }\n+\n+  if (sh_sign.flags & kSHIsSign) {\n+    if (sh_sign.text.ptr) {\n+      PUT(*dict, \"sign_text\", CSTR_TO_OBJ(sh_sign.text.ptr));\n+    }\n+\n+    // uncrustify:off\n+\n+    struct { char *name; const int val; } hls[] = {\n+      { \"sign_hl_group\"      , sh_sign.hl_id            },\n+      { \"number_hl_group\"    , sh_sign.number_hl_id     },\n+      { \"line_hl_group\"      , sh_sign.line_hl_id       },\n+      { \"cursorline_hl_group\", sh_sign.cursorline_hl_id },\n+      { NULL, 0 },\n+    };\n+\n+    // uncrustify:on\n+\n+    for (int j = 0; hls[j].name; j++) {\n+      if (hls[j].val) {\n+        PUT(*dict, hls[j].name, hl_group_name(hls[j].val, hl_name));\n+      }\n+    }\n+    priority = sh_sign.priority;\n+  }\n+\n+  if (priority != -1) {\n+    PUT(*dict, \"priority\", INTEGER_OBJ(priority));\n+  }\n+}\n+\n+uint16_t decor_type_flags(DecorInline decor)",
            "html_url": "https://github.com/neovim/neovim/pull/25826#discussion_r1399324007",
            "id": 1399324007,
            "in_reply_to_id": 1399293154,
            "line": 1041,
            "node_id": "PRRC_kwDOAPphoM5TZ_1n",
            "original_commit_id": "738aa31a60bc26fe5e98acdf246e5bb32949e466",
            "original_line": 1041,
            "original_position": 996,
            "original_start_line": null,
            "path": "src/nvim/decoration.c",
            "position": 999,
            "pull_request_review_id": 1740016639,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25826",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1399324007/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-20T14:57:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1399324007",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25826#discussion_r1399545029"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25826"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1399545029"
                }
            },
            "author_association": "MEMBER",
            "body": "it is planned but it will be some adjustments, i e the flags will match the conditions which are more useful internally (like \"inline\" virtual_text needs to be special cased more than virtual_text in general).",
            "commit_id": "489ddbc2db57362a489aeee284c7e69288480392",
            "created_at": "2023-11-20T17:45:41Z",
            "diff_hunk": "@@ -612,20 +899,175 @@ int decor_virt_lines(win_T *wp, linenr_T lnum, VirtLines *lines, TriState has_fo\n       break;\n     } else if (mt_end(mark)\n                || marktree_decor_level(mark) < kDecorLevelVirtLine\n-               || !mark.decor_full) {\n+               || !(mark.flags & MT_FLAG_DECOR_EXT)) {\n       goto next_mark;\n     }\n-    Decoration *const decor = mark.decor_full;\n-    const int draw_row = mark.pos.row + (decor->virt_lines_above ? 0 : 1);\n-    if (draw_row == row) {\n-      virt_lines += (int)kv_size(decor->virt_lines);\n-      if (lines) {\n-        kv_splice(*lines, decor->virt_lines);\n+    DecorVirtText *vt = mark.decor_data.ext.vt;\n+    while (vt) {\n+      if (vt->flags & kVTIsLines) {\n+        bool above = vt->flags & kVTLinesAbove;\n+        int draw_row = mark.pos.row + (above ? 0 : 1);\n+        if (draw_row == row) {\n+          virt_lines += (int)kv_size(vt->data.virt_lines);\n+          if (lines) {\n+            kv_splice(*lines, vt->data.virt_lines);\n+          }\n+        }\n       }\n+      vt = vt->next;\n     }\n next_mark:\n     marktree_itr_next(buf->b_marktree, itr);\n   }\n \n   return virt_lines;\n }\n+\n+void put_decor_to_dict_legacy(Dictionary *dict, DecorInline decor, bool hl_name)\n+{\n+  DecorSignHighlight sh_hl = DECOR_SIGN_HIGHLIGHT_INIT;\n+  DecorSignHighlight sh_sign = DECOR_SIGN_HIGHLIGHT_INIT;\n+  DecorVirtText *virt_text = NULL;\n+  DecorVirtText *virt_lines = NULL;\n+  int32_t priority = -1;  // sentinel value which cannot actually be set\n+\n+  if (decor.ext) {\n+    DecorVirtText *vt = decor.data.ext.vt;\n+    while (vt) {\n+      if (vt->flags & kVTIsLines) {\n+        virt_lines = vt;\n+      } else {\n+        virt_text = vt;\n+      }\n+      vt = vt->next;\n+    }\n+\n+    uint32_t idx = decor.data.ext.sh_idx;\n+    while (idx != DECOR_ID_INVALID) {\n+      DecorSignHighlight *sh = &kv_A(decor_items, idx);\n+      if (sh->flags & (kSHIsSign)) {\n+        sh_sign = *sh;\n+      } else {\n+        sh_hl = *sh;\n+      }\n+      idx = sh->next;\n+    }\n+  } else {\n+    sh_hl = decor_sh_from_inline(decor.data.hl, (String)STRING_INIT);\n+  }\n+\n+  if (sh_hl.hl_id) {\n+    PUT(*dict, \"hl_group\", hl_group_name(sh_hl.hl_id, hl_name));\n+    PUT(*dict, \"hl_eol\", BOOLEAN_OBJ(sh_hl.flags & kSHHlEol));\n+    if (sh_hl.flags & kSHConceal) {\n+      String name;\n+      if (sh_hl.flags & kSHConcealAlloc) {\n+        name = cstr_to_string(sh_hl.text.ptr);\n+      } else {\n+        name = cbuf_to_string(sh_hl.text.data, strnlen(sh_hl.text.data, 8));\n+      }\n+      PUT(*dict, \"conceal\", STRING_OBJ(name));\n+    }\n+\n+    if (sh_hl.flags & kSHSpellOn) {\n+      PUT(*dict, \"spell\", BOOLEAN_OBJ(true));\n+    } else if (sh_hl.flags & kSHSpellOff) {\n+      PUT(*dict, \"spell\", BOOLEAN_OBJ(false));\n+    }\n+\n+    priority = sh_hl.priority;\n+  }\n+\n+  if (sh_hl.flags & kSHUIWatched) {\n+    PUT(*dict, \"ui_watched\", BOOLEAN_OBJ(true));\n+  }\n+\n+  if (virt_text) {\n+    if (virt_text->hl_mode) {\n+      PUT(*dict, \"hl_mode\", CSTR_TO_OBJ(hl_mode_str[virt_text->hl_mode]));\n+    }\n+\n+    Array chunks = virt_text_to_array(virt_text->data.virt_text, hl_name);\n+    PUT(*dict, \"virt_text\", ARRAY_OBJ(chunks));\n+    PUT(*dict, \"virt_text_hide\", BOOLEAN_OBJ(virt_text->flags & kVTHide));\n+    if (virt_text->pos == kVPosWinCol) {\n+      PUT(*dict, \"virt_text_win_col\", INTEGER_OBJ(virt_text->col));\n+    }\n+    PUT(*dict, \"virt_text_pos\",\n+        CSTR_TO_OBJ(virt_text_pos_str[virt_text->pos]));\n+    priority = virt_text->priority;\n+  }\n+\n+  if (virt_lines) {\n+    Array all_chunks = ARRAY_DICT_INIT;\n+    bool virt_lines_leftcol = false;\n+    for (size_t i = 0; i < kv_size(virt_lines->data.virt_lines); i++) {\n+      virt_lines_leftcol = kv_A(virt_lines->data.virt_lines, i).left_col;\n+      Array chunks = virt_text_to_array(kv_A(virt_lines->data.virt_lines, i).line, hl_name);\n+      ADD(all_chunks, ARRAY_OBJ(chunks));\n+    }\n+    PUT(*dict, \"virt_lines\", ARRAY_OBJ(all_chunks));\n+    PUT(*dict, \"virt_lines_above\", BOOLEAN_OBJ(virt_lines->flags & kVTLinesAbove));\n+    PUT(*dict, \"virt_lines_leftcol\", BOOLEAN_OBJ(virt_lines_leftcol));\n+    priority = virt_lines->priority;\n+  }\n+\n+  if (sh_sign.flags & kSHIsSign) {\n+    if (sh_sign.text.ptr) {\n+      PUT(*dict, \"sign_text\", CSTR_TO_OBJ(sh_sign.text.ptr));\n+    }\n+\n+    // uncrustify:off\n+\n+    struct { char *name; const int val; } hls[] = {\n+      { \"sign_hl_group\"      , sh_sign.hl_id            },\n+      { \"number_hl_group\"    , sh_sign.number_hl_id     },\n+      { \"line_hl_group\"      , sh_sign.line_hl_id       },\n+      { \"cursorline_hl_group\", sh_sign.cursorline_hl_id },\n+      { NULL, 0 },\n+    };\n+\n+    // uncrustify:on\n+\n+    for (int j = 0; hls[j].name; j++) {\n+      if (hls[j].val) {\n+        PUT(*dict, hls[j].name, hl_group_name(hls[j].val, hl_name));\n+      }\n+    }\n+    priority = sh_sign.priority;\n+  }\n+\n+  if (priority != -1) {\n+    PUT(*dict, \"priority\", INTEGER_OBJ(priority));\n+  }\n+}\n+\n+uint16_t decor_type_flags(DecorInline decor)",
            "html_url": "https://github.com/neovim/neovim/pull/25826#discussion_r1399545029",
            "id": 1399545029,
            "in_reply_to_id": 1399293154,
            "line": 1041,
            "node_id": "PRRC_kwDOAPphoM5Ta1zF",
            "original_commit_id": "738aa31a60bc26fe5e98acdf246e5bb32949e466",
            "original_line": 1041,
            "original_position": 996,
            "original_start_line": null,
            "path": "src/nvim/decoration.c",
            "position": 999,
            "pull_request_review_id": 1740371792,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25826",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1399545029/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-20T17:45:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1399545029",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25826#discussion_r1399546942"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25826"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1399546942"
                }
            },
            "author_association": "MEMBER",
            "body": "done, also simplified the arguments further.",
            "commit_id": "489ddbc2db57362a489aeee284c7e69288480392",
            "created_at": "2023-11-20T17:47:30Z",
            "diff_hunk": "@@ -873,6 +881,22 @@ static void sign_list_append_info(sign_T *sp, MTKey *mark, list_T *retlist)\n   }\n }\n \n+/// Append dictionary of information for a defined sign \"sp\", or placed\n+/// sign \"mark\" to \"retlist\". Either \"sp\", or \"mark\" is NULL.",
            "html_url": "https://github.com/neovim/neovim/pull/25826#discussion_r1399546942",
            "id": 1399546942,
            "in_reply_to_id": 1399264834,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Ta2Q-",
            "original_commit_id": "738aa31a60bc26fe5e98acdf246e5bb32949e466",
            "original_line": 885,
            "original_position": 139,
            "original_start_line": null,
            "path": "src/nvim/sign.c",
            "position": null,
            "pull_request_review_id": 1740374793,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25826",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1399546942/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-20T17:47:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1399546942",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        }
    ],
    "comment_regular_data": [],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/25826/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/25826/commits",
    "created_at": "2023-10-29T09:32:41Z",
    "diff_url": "https://github.com/neovim/neovim/pull/25826.diff",
    "draft": false,
    "head": {
        "label": "bfredl:art_deco",
        "ref": "art_deco",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/bfredl/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/bfredl/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/bfredl/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/bfredl/neovim/branches{/branch}",
            "clone_url": "https://github.com/bfredl/neovim.git",
            "collaborators_url": "https://api.github.com/repos/bfredl/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/bfredl/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/bfredl/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/bfredl/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/bfredl/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/bfredl/neovim/contributors",
            "created_at": "2014-06-20T19:51:31Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/bfredl/neovim/deployments",
            "description": "vim's rebirth for the 21st century",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/bfredl/neovim/downloads",
            "events_url": "https://api.github.com/repos/bfredl/neovim/events",
            "fork": true,
            "forks": 1,
            "forks_count": 1,
            "forks_url": "https://api.github.com/repos/bfredl/neovim/forks",
            "full_name": "bfredl/neovim",
            "git_commits_url": "https://api.github.com/repos/bfredl/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/bfredl/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/bfredl/neovim/git/tags{/sha}",
            "git_url": "git://github.com/bfredl/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "http://neovim.org/",
            "hooks_url": "https://api.github.com/repos/bfredl/neovim/hooks",
            "html_url": "https://github.com/bfredl/neovim",
            "id": 21050434,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/bfredl/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/bfredl/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/bfredl/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/bfredl/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/bfredl/neovim/labels{/name}",
            "language": "Vim script",
            "languages_url": "https://api.github.com/repos/bfredl/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/bfredl/neovim/merges",
            "milestones_url": "https://api.github.com/repos/bfredl/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkyMTA1MDQzNA==",
            "notifications_url": "https://api.github.com/repos/bfredl/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/bfredl/neovim/pulls{/number}",
            "pushed_at": "2023-11-21T09:08:39Z",
            "releases_url": "https://api.github.com/repos/bfredl/neovim/releases{/id}",
            "size": 235524,
            "ssh_url": "git@github.com:bfredl/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/bfredl/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/bfredl/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/bfredl/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/bfredl/neovim/subscription",
            "svn_url": "https://github.com/bfredl/neovim",
            "tags_url": "https://api.github.com/repos/bfredl/neovim/tags",
            "teams_url": "https://api.github.com/repos/bfredl/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/bfredl/neovim/git/trees{/sha}",
            "updated_at": "2022-03-21T08:01:17Z",
            "url": "https://api.github.com/repos/bfredl/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "489ddbc2db57362a489aeee284c7e69288480392",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
            "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
            "followers_url": "https://api.github.com/users/bfredl/followers",
            "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
            "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bfredl",
            "id": 1363104,
            "login": "bfredl",
            "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
            "organizations_url": "https://api.github.com/users/bfredl/orgs",
            "received_events_url": "https://api.github.com/users/bfredl/received_events",
            "repos_url": "https://api.github.com/users/bfredl/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bfredl"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/25826",
    "id": 1577801556,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25826",
    "labels": [
        {
            "color": "C5DEF5",
            "default": false,
            "description": "changes that are not features or bugfixes",
            "id": 106949155,
            "name": "refactor",
            "node_id": "MDU6TGFiZWwxMDY5NDkxNTU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/refactor"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "extmarks, decorations, virtual text, namespaces",
            "id": 1680119719,
            "name": "extmarks",
            "node_id": "MDU6TGFiZWwxNjgwMTE5NzE5",
            "url": "https://api.github.com/repos/neovim/neovim/labels/extmarks"
        }
    ],
    "locked": false,
    "merge_commit_sha": "23bfabf2f17e62f4d20cc62a6711e5aadccc45ab",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5eC1dU",
    "number": 25826,
    "patch_url": "https://github.com/neovim/neovim/pull/25826.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/25826/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/489ddbc2db57362a489aeee284c7e69288480392",
    "title": "refactor(decorations): break up Decoration struct into smaller pieces",
    "updated_at": "2023-11-21T09:08:43Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/25826",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
        "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
        "followers_url": "https://api.github.com/users/bfredl/followers",
        "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
        "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/bfredl",
        "id": 1363104,
        "login": "bfredl",
        "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
        "organizations_url": "https://api.github.com/users/bfredl/orgs",
        "received_events_url": "https://api.github.com/users/bfredl/received_events",
        "repos_url": "https://api.github.com/users/bfredl/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/bfredl"
    }
}