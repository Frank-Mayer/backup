{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/24507/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/24507/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/24507"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/24507"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/24507/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/24507"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/8bed9278f0b29d3838a4db3e0052529644f32c27"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "FIRST_TIME_CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 4809,
            "forks_count": 4809,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1656,
            "open_issues_count": 1656,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2023-08-11T00:39:57Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 247262,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 68368,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2023-08-11T01:43:19Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 68368,
            "watchers_count": 68368,
            "web_commit_signoff_required": false
        },
        "sha": "3d948a4dc4b2cd3c8d3ac497caf3dfe25adfb90d",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "One feature I think the Lua API is missing is convenience functions for working with window layouts. This is the first of my ideas, mostly just an alternative to `vim.fn.winlayout`. \r\n\r\nI'd also like to implement `nvim_tabpage_set_layout` as a counterpart to this, which would allow for easily configurable layouts to be created in user configs, but that will likely be a larger task and probably needs discussion on what the API would look like. My idea is that it would take the same structure that `tabpage_get_layout` returns, but instead of leaves containing window handles, they would contain buffer handles which would be used to populate the layout windows.\r\n\r\nTodo: tests - need to figure out how to assert window layouts.",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24507#discussion_r1278211495"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24507"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278211495"
                }
            },
            "author_association": "MEMBER",
            "body": "Now it's no longer a Dictionary.",
            "commit_id": "8bed9278f0b29d3838a4db3e0052529644f32c27",
            "created_at": "2023-07-29T02:09:06Z",
            "diff_hunk": "@@ -4,15 +4,51 @@\n #include <stdbool.h>\n #include <stdlib.h>\n \n+#include \"nvim/api/private/converter.h\"\n #include \"nvim/api/private/defs.h\"\n #include \"nvim/api/private/helpers.h\"\n #include \"nvim/api/tabpage.h\"\n #include \"nvim/api/vim.h\"\n #include \"nvim/buffer_defs.h\"\n+#include \"nvim/eval/typval.h\"\n+#include \"nvim/eval/typval_defs.h\"\n+#include \"nvim/eval/typval_encode.h\"\n+#include \"nvim/eval/window.h\"\n #include \"nvim/globals.h\"\n #include \"nvim/memory.h\"\n #include \"nvim/window.h\"\n \n+/// Returns the layout of a tabpage as a tree-structured Dictionary",
            "html_url": "https://github.com/neovim/neovim/pull/24507#discussion_r1278211495",
            "id": 1278211495,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ML_Wn",
            "original_commit_id": "fbe99d6b274c42ae6a59c1e85fbef84540c8081c",
            "original_line": 21,
            "original_position": 18,
            "original_start_line": null,
            "path": "src/nvim/api/tabpage.c",
            "position": null,
            "pull_request_review_id": 1553158576,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24507",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278211495/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T02:11:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278211495",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24507#discussion_r1278211505"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24507"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278211505"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nArray nvim_tabpage_get_layout(Tabpage tabpage, Error *err)\r\n```",
            "commit_id": "8bed9278f0b29d3838a4db3e0052529644f32c27",
            "created_at": "2023-07-29T02:09:16Z",
            "diff_hunk": "@@ -4,15 +4,51 @@\n #include <stdbool.h>\n #include <stdlib.h>\n \n+#include \"nvim/api/private/converter.h\"\n #include \"nvim/api/private/defs.h\"\n #include \"nvim/api/private/helpers.h\"\n #include \"nvim/api/tabpage.h\"\n #include \"nvim/api/vim.h\"\n #include \"nvim/buffer_defs.h\"\n+#include \"nvim/eval/typval.h\"\n+#include \"nvim/eval/typval_defs.h\"\n+#include \"nvim/eval/typval_encode.h\"\n+#include \"nvim/eval/window.h\"\n #include \"nvim/globals.h\"\n #include \"nvim/memory.h\"\n #include \"nvim/window.h\"\n \n+/// Returns the layout of a tabpage as a tree-structured Dictionary\n+///\n+/// @param tabpage Tabpage handle, or 0 for the current tabpage\n+/// @param[out] err Error details, if any.\n+/// @return Tree of windows and frames in `tabpage`, or nil if the tab is invalid\n+Object nvim_tabpage_get_layout(Tabpage tabpage, Error *err)",
            "html_url": "https://github.com/neovim/neovim/pull/24507#discussion_r1278211505",
            "id": 1278211505,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ML_Wx",
            "original_commit_id": "fbe99d6b274c42ae6a59c1e85fbef84540c8081c",
            "original_line": 26,
            "original_position": 23,
            "original_start_line": null,
            "path": "src/nvim/api/tabpage.c",
            "position": null,
            "pull_request_review_id": 1553158576,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24507",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278211505/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T02:11:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278211505",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24507#discussion_r1278211579"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24507"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278211579"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  Array rv = vim_to_object(&list_tv).data.array;\r\n  tv_clear(&list_tv);\r\n  return rv;\r\n```",
            "commit_id": "8bed9278f0b29d3838a4db3e0052529644f32c27",
            "created_at": "2023-07-29T02:09:42Z",
            "diff_hunk": "@@ -4,15 +4,51 @@\n #include <stdbool.h>\n #include <stdlib.h>\n \n+#include \"nvim/api/private/converter.h\"\n #include \"nvim/api/private/defs.h\"\n #include \"nvim/api/private/helpers.h\"\n #include \"nvim/api/tabpage.h\"\n #include \"nvim/api/vim.h\"\n #include \"nvim/buffer_defs.h\"\n+#include \"nvim/eval/typval.h\"\n+#include \"nvim/eval/typval_defs.h\"\n+#include \"nvim/eval/typval_encode.h\"\n+#include \"nvim/eval/window.h\"\n #include \"nvim/globals.h\"\n #include \"nvim/memory.h\"\n #include \"nvim/window.h\"\n \n+/// Returns the layout of a tabpage as a tree-structured Dictionary\n+///\n+/// @param tabpage Tabpage handle, or 0 for the current tabpage\n+/// @param[out] err Error details, if any.\n+/// @return Tree of windows and frames in `tabpage`, or nil if the tab is invalid\n+Object nvim_tabpage_get_layout(Tabpage tabpage, Error *err)\n+  FUNC_API_SINCE(10)\n+{\n+  tabpage_T *tab;\n+  if (tabpage == 0) {\n+    tab = curtab;\n+  } else {\n+    tab = find_tab_by_handle(tabpage, err);\n+  }\n+\n+  if (!tab) {\n+    return NIL;\n+  }\n+\n+  list_T *fr_list = tv_list_alloc(2);\n+\n+  get_framelayout(tab->tp_topframe, fr_list, true);\n+\n+  typval_T rv = {\n+    .vval.v_list = fr_list,\n+    .v_type = VAR_LIST\n+  };\n+\n+  return vim_to_object(&rv);",
            "html_url": "https://github.com/neovim/neovim/pull/24507#discussion_r1278211579",
            "id": 1278211579,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ML_X7",
            "original_commit_id": "fbe99d6b274c42ae6a59c1e85fbef84540c8081c",
            "original_line": 49,
            "original_position": 46,
            "original_start_line": null,
            "path": "src/nvim/api/tabpage.c",
            "position": null,
            "pull_request_review_id": 1553158576,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24507",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278211579/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T02:33:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278211579",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24507#discussion_r1278211941"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24507"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278211941"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  typval_T list_tv = {\r\n```",
            "commit_id": "8bed9278f0b29d3838a4db3e0052529644f32c27",
            "created_at": "2023-07-29T02:11:18Z",
            "diff_hunk": "@@ -4,15 +4,51 @@\n #include <stdbool.h>\n #include <stdlib.h>\n \n+#include \"nvim/api/private/converter.h\"\n #include \"nvim/api/private/defs.h\"\n #include \"nvim/api/private/helpers.h\"\n #include \"nvim/api/tabpage.h\"\n #include \"nvim/api/vim.h\"\n #include \"nvim/buffer_defs.h\"\n+#include \"nvim/eval/typval.h\"\n+#include \"nvim/eval/typval_defs.h\"\n+#include \"nvim/eval/typval_encode.h\"\n+#include \"nvim/eval/window.h\"\n #include \"nvim/globals.h\"\n #include \"nvim/memory.h\"\n #include \"nvim/window.h\"\n \n+/// Returns the layout of a tabpage as a tree-structured Dictionary\n+///\n+/// @param tabpage Tabpage handle, or 0 for the current tabpage\n+/// @param[out] err Error details, if any.\n+/// @return Tree of windows and frames in `tabpage`, or nil if the tab is invalid\n+Object nvim_tabpage_get_layout(Tabpage tabpage, Error *err)\n+  FUNC_API_SINCE(10)\n+{\n+  tabpage_T *tab;\n+  if (tabpage == 0) {\n+    tab = curtab;\n+  } else {\n+    tab = find_tab_by_handle(tabpage, err);\n+  }\n+\n+  if (!tab) {\n+    return NIL;\n+  }\n+\n+  list_T *fr_list = tv_list_alloc(2);\n+\n+  get_framelayout(tab->tp_topframe, fr_list, true);\n+\n+  typval_T rv = {",
            "html_url": "https://github.com/neovim/neovim/pull/24507#discussion_r1278211941",
            "id": 1278211941,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ML_dl",
            "original_commit_id": "fbe99d6b274c42ae6a59c1e85fbef84540c8081c",
            "original_line": 44,
            "original_position": 41,
            "original_start_line": null,
            "path": "src/nvim/api/tabpage.c",
            "position": null,
            "pull_request_review_id": 1553158576,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24507",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278211941/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T02:11:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278211941",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24507#discussion_r1278212188"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24507"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278212188"
                }
            },
            "author_association": "NONE",
            "body": "Ahh okay, thanks! Still getting a handle on the type system here.",
            "commit_id": "8bed9278f0b29d3838a4db3e0052529644f32c27",
            "created_at": "2023-07-29T02:15:16Z",
            "diff_hunk": "@@ -4,15 +4,51 @@\n #include <stdbool.h>\n #include <stdlib.h>\n \n+#include \"nvim/api/private/converter.h\"\n #include \"nvim/api/private/defs.h\"\n #include \"nvim/api/private/helpers.h\"\n #include \"nvim/api/tabpage.h\"\n #include \"nvim/api/vim.h\"\n #include \"nvim/buffer_defs.h\"\n+#include \"nvim/eval/typval.h\"\n+#include \"nvim/eval/typval_defs.h\"\n+#include \"nvim/eval/typval_encode.h\"\n+#include \"nvim/eval/window.h\"\n #include \"nvim/globals.h\"\n #include \"nvim/memory.h\"\n #include \"nvim/window.h\"\n \n+/// Returns the layout of a tabpage as a tree-structured Dictionary\n+///\n+/// @param tabpage Tabpage handle, or 0 for the current tabpage\n+/// @param[out] err Error details, if any.\n+/// @return Tree of windows and frames in `tabpage`, or nil if the tab is invalid\n+Object nvim_tabpage_get_layout(Tabpage tabpage, Error *err)\n+  FUNC_API_SINCE(10)\n+{\n+  tabpage_T *tab;\n+  if (tabpage == 0) {\n+    tab = curtab;\n+  } else {\n+    tab = find_tab_by_handle(tabpage, err);\n+  }\n+\n+  if (!tab) {\n+    return NIL;\n+  }\n+\n+  list_T *fr_list = tv_list_alloc(2);\n+\n+  get_framelayout(tab->tp_topframe, fr_list, true);\n+\n+  typval_T rv = {\n+    .vval.v_list = fr_list,\n+    .v_type = VAR_LIST\n+  };\n+\n+  return vim_to_object(&rv);",
            "html_url": "https://github.com/neovim/neovim/pull/24507#discussion_r1278212188",
            "id": 1278212188,
            "in_reply_to_id": 1278211579,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ML_hc",
            "original_commit_id": "fbe99d6b274c42ae6a59c1e85fbef84540c8081c",
            "original_line": 49,
            "original_position": 46,
            "original_start_line": null,
            "path": "src/nvim/api/tabpage.c",
            "position": null,
            "pull_request_review_id": 1553159639,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24507",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278212188/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T02:15:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278212188",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38540736?v=4",
                "events_url": "https://api.github.com/users/willothy/events{/privacy}",
                "followers_url": "https://api.github.com/users/willothy/followers",
                "following_url": "https://api.github.com/users/willothy/following{/other_user}",
                "gists_url": "https://api.github.com/users/willothy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/willothy",
                "id": 38540736,
                "login": "willothy",
                "node_id": "MDQ6VXNlcjM4NTQwNzM2",
                "organizations_url": "https://api.github.com/users/willothy/orgs",
                "received_events_url": "https://api.github.com/users/willothy/received_events",
                "repos_url": "https://api.github.com/users/willothy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/willothy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/willothy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/willothy"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24507#discussion_r1278212524"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24507"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278212524"
                }
            },
            "author_association": "NONE",
            "body": "What about the nil case? Should I just return an empty array?",
            "commit_id": "8bed9278f0b29d3838a4db3e0052529644f32c27",
            "created_at": "2023-07-29T02:19:26Z",
            "diff_hunk": "@@ -4,15 +4,51 @@\n #include <stdbool.h>\n #include <stdlib.h>\n \n+#include \"nvim/api/private/converter.h\"\n #include \"nvim/api/private/defs.h\"\n #include \"nvim/api/private/helpers.h\"\n #include \"nvim/api/tabpage.h\"\n #include \"nvim/api/vim.h\"\n #include \"nvim/buffer_defs.h\"\n+#include \"nvim/eval/typval.h\"\n+#include \"nvim/eval/typval_defs.h\"\n+#include \"nvim/eval/typval_encode.h\"\n+#include \"nvim/eval/window.h\"\n #include \"nvim/globals.h\"\n #include \"nvim/memory.h\"\n #include \"nvim/window.h\"\n \n+/// Returns the layout of a tabpage as a tree-structured Dictionary\n+///\n+/// @param tabpage Tabpage handle, or 0 for the current tabpage\n+/// @param[out] err Error details, if any.\n+/// @return Tree of windows and frames in `tabpage`, or nil if the tab is invalid\n+Object nvim_tabpage_get_layout(Tabpage tabpage, Error *err)",
            "html_url": "https://github.com/neovim/neovim/pull/24507#discussion_r1278212524",
            "id": 1278212524,
            "in_reply_to_id": 1278211505,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ML_ms",
            "original_commit_id": "fbe99d6b274c42ae6a59c1e85fbef84540c8081c",
            "original_line": 26,
            "original_position": 23,
            "original_start_line": null,
            "path": "src/nvim/api/tabpage.c",
            "position": null,
            "pull_request_review_id": 1553160071,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24507",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278212524/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T02:19:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278212524",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38540736?v=4",
                "events_url": "https://api.github.com/users/willothy/events{/privacy}",
                "followers_url": "https://api.github.com/users/willothy/followers",
                "following_url": "https://api.github.com/users/willothy/following{/other_user}",
                "gists_url": "https://api.github.com/users/willothy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/willothy",
                "id": 38540736,
                "login": "willothy",
                "node_id": "MDQ6VXNlcjM4NTQwNzM2",
                "organizations_url": "https://api.github.com/users/willothy/orgs",
                "received_events_url": "https://api.github.com/users/willothy/received_events",
                "repos_url": "https://api.github.com/users/willothy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/willothy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/willothy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/willothy"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24507#discussion_r1278213370"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24507"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278213370"
                }
            },
            "author_association": "MEMBER",
            "body": "yes, empty array should be fine (when is that possible ? 😆 )",
            "commit_id": "8bed9278f0b29d3838a4db3e0052529644f32c27",
            "created_at": "2023-07-29T02:28:54Z",
            "diff_hunk": "@@ -4,15 +4,51 @@\n #include <stdbool.h>\n #include <stdlib.h>\n \n+#include \"nvim/api/private/converter.h\"\n #include \"nvim/api/private/defs.h\"\n #include \"nvim/api/private/helpers.h\"\n #include \"nvim/api/tabpage.h\"\n #include \"nvim/api/vim.h\"\n #include \"nvim/buffer_defs.h\"\n+#include \"nvim/eval/typval.h\"\n+#include \"nvim/eval/typval_defs.h\"\n+#include \"nvim/eval/typval_encode.h\"\n+#include \"nvim/eval/window.h\"\n #include \"nvim/globals.h\"\n #include \"nvim/memory.h\"\n #include \"nvim/window.h\"\n \n+/// Returns the layout of a tabpage as a tree-structured Dictionary\n+///\n+/// @param tabpage Tabpage handle, or 0 for the current tabpage\n+/// @param[out] err Error details, if any.\n+/// @return Tree of windows and frames in `tabpage`, or nil if the tab is invalid\n+Object nvim_tabpage_get_layout(Tabpage tabpage, Error *err)",
            "html_url": "https://github.com/neovim/neovim/pull/24507#discussion_r1278213370",
            "id": 1278213370,
            "in_reply_to_id": 1278211505,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ML_z6",
            "original_commit_id": "fbe99d6b274c42ae6a59c1e85fbef84540c8081c",
            "original_line": 26,
            "original_position": 23,
            "original_start_line": null,
            "path": "src/nvim/api/tabpage.c",
            "position": null,
            "pull_request_review_id": 1553160922,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24507",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278213370/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T02:28:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278213370",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24507#discussion_r1278213436"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24507"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278213436"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes. That's `(Array)ARRAY_DICT_INIT`.",
            "commit_id": "8bed9278f0b29d3838a4db3e0052529644f32c27",
            "created_at": "2023-07-29T02:29:55Z",
            "diff_hunk": "@@ -4,15 +4,51 @@\n #include <stdbool.h>\n #include <stdlib.h>\n \n+#include \"nvim/api/private/converter.h\"\n #include \"nvim/api/private/defs.h\"\n #include \"nvim/api/private/helpers.h\"\n #include \"nvim/api/tabpage.h\"\n #include \"nvim/api/vim.h\"\n #include \"nvim/buffer_defs.h\"\n+#include \"nvim/eval/typval.h\"\n+#include \"nvim/eval/typval_defs.h\"\n+#include \"nvim/eval/typval_encode.h\"\n+#include \"nvim/eval/window.h\"\n #include \"nvim/globals.h\"\n #include \"nvim/memory.h\"\n #include \"nvim/window.h\"\n \n+/// Returns the layout of a tabpage as a tree-structured Dictionary\n+///\n+/// @param tabpage Tabpage handle, or 0 for the current tabpage\n+/// @param[out] err Error details, if any.\n+/// @return Tree of windows and frames in `tabpage`, or nil if the tab is invalid\n+Object nvim_tabpage_get_layout(Tabpage tabpage, Error *err)",
            "html_url": "https://github.com/neovim/neovim/pull/24507#discussion_r1278213436",
            "id": 1278213436,
            "in_reply_to_id": 1278211505,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ML_08",
            "original_commit_id": "fbe99d6b274c42ae6a59c1e85fbef84540c8081c",
            "original_line": 26,
            "original_position": 23,
            "original_start_line": null,
            "path": "src/nvim/api/tabpage.c",
            "position": null,
            "pull_request_review_id": 1553161038,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24507",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278213436/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T02:29:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278213436",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24507#discussion_r1278213919"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24507"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278213919"
                }
            },
            "author_association": "NONE",
            "body": "Thanks!",
            "commit_id": "8bed9278f0b29d3838a4db3e0052529644f32c27",
            "created_at": "2023-07-29T02:32:05Z",
            "diff_hunk": "@@ -4,15 +4,51 @@\n #include <stdbool.h>\n #include <stdlib.h>\n \n+#include \"nvim/api/private/converter.h\"\n #include \"nvim/api/private/defs.h\"\n #include \"nvim/api/private/helpers.h\"\n #include \"nvim/api/tabpage.h\"\n #include \"nvim/api/vim.h\"\n #include \"nvim/buffer_defs.h\"\n+#include \"nvim/eval/typval.h\"\n+#include \"nvim/eval/typval_defs.h\"\n+#include \"nvim/eval/typval_encode.h\"\n+#include \"nvim/eval/window.h\"\n #include \"nvim/globals.h\"\n #include \"nvim/memory.h\"\n #include \"nvim/window.h\"\n \n+/// Returns the layout of a tabpage as a tree-structured Dictionary\n+///\n+/// @param tabpage Tabpage handle, or 0 for the current tabpage\n+/// @param[out] err Error details, if any.\n+/// @return Tree of windows and frames in `tabpage`, or nil if the tab is invalid\n+Object nvim_tabpage_get_layout(Tabpage tabpage, Error *err)",
            "html_url": "https://github.com/neovim/neovim/pull/24507#discussion_r1278213919",
            "id": 1278213919,
            "in_reply_to_id": 1278211505,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ML_8f",
            "original_commit_id": "fbe99d6b274c42ae6a59c1e85fbef84540c8081c",
            "original_line": 26,
            "original_position": 23,
            "original_start_line": null,
            "path": "src/nvim/api/tabpage.c",
            "position": null,
            "pull_request_review_id": 1553161891,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24507",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278213919/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T02:32:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278213919",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38540736?v=4",
                "events_url": "https://api.github.com/users/willothy/events{/privacy}",
                "followers_url": "https://api.github.com/users/willothy/followers",
                "following_url": "https://api.github.com/users/willothy/following{/other_user}",
                "gists_url": "https://api.github.com/users/willothy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/willothy",
                "id": 38540736,
                "login": "willothy",
                "node_id": "MDQ6VXNlcjM4NTQwNzM2",
                "organizations_url": "https://api.github.com/users/willothy/orgs",
                "received_events_url": "https://api.github.com/users/willothy/received_events",
                "repos_url": "https://api.github.com/users/willothy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/willothy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/willothy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/willothy"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24507#discussion_r1278214208"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24507"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278214208"
                }
            },
            "author_association": "NONE",
            "body": "So to be clear, vim_to_object performs a copy  so the memory held by whatever it's converting from is no longer needed?",
            "commit_id": "8bed9278f0b29d3838a4db3e0052529644f32c27",
            "created_at": "2023-07-29T02:35:57Z",
            "diff_hunk": "@@ -4,15 +4,51 @@\n #include <stdbool.h>\n #include <stdlib.h>\n \n+#include \"nvim/api/private/converter.h\"\n #include \"nvim/api/private/defs.h\"\n #include \"nvim/api/private/helpers.h\"\n #include \"nvim/api/tabpage.h\"\n #include \"nvim/api/vim.h\"\n #include \"nvim/buffer_defs.h\"\n+#include \"nvim/eval/typval.h\"\n+#include \"nvim/eval/typval_defs.h\"\n+#include \"nvim/eval/typval_encode.h\"\n+#include \"nvim/eval/window.h\"\n #include \"nvim/globals.h\"\n #include \"nvim/memory.h\"\n #include \"nvim/window.h\"\n \n+/// Returns the layout of a tabpage as a tree-structured Dictionary\n+///\n+/// @param tabpage Tabpage handle, or 0 for the current tabpage\n+/// @param[out] err Error details, if any.\n+/// @return Tree of windows and frames in `tabpage`, or nil if the tab is invalid\n+Object nvim_tabpage_get_layout(Tabpage tabpage, Error *err)\n+  FUNC_API_SINCE(10)\n+{\n+  tabpage_T *tab;\n+  if (tabpage == 0) {\n+    tab = curtab;\n+  } else {\n+    tab = find_tab_by_handle(tabpage, err);\n+  }\n+\n+  if (!tab) {\n+    return NIL;\n+  }\n+\n+  list_T *fr_list = tv_list_alloc(2);\n+\n+  get_framelayout(tab->tp_topframe, fr_list, true);\n+\n+  typval_T rv = {\n+    .vval.v_list = fr_list,\n+    .v_type = VAR_LIST\n+  };\n+\n+  return vim_to_object(&rv);",
            "html_url": "https://github.com/neovim/neovim/pull/24507#discussion_r1278214208",
            "id": 1278214208,
            "in_reply_to_id": 1278211579,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MMABA",
            "original_commit_id": "fbe99d6b274c42ae6a59c1e85fbef84540c8081c",
            "original_line": 49,
            "original_position": 46,
            "original_start_line": null,
            "path": "src/nvim/api/tabpage.c",
            "position": null,
            "pull_request_review_id": 1553162286,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24507",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278214208/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T02:35:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278214208",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38540736?v=4",
                "events_url": "https://api.github.com/users/willothy/events{/privacy}",
                "followers_url": "https://api.github.com/users/willothy/followers",
                "following_url": "https://api.github.com/users/willothy/following{/other_user}",
                "gists_url": "https://api.github.com/users/willothy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/willothy",
                "id": 38540736,
                "login": "willothy",
                "node_id": "MDQ6VXNlcjM4NTQwNzM2",
                "organizations_url": "https://api.github.com/users/willothy/orgs",
                "received_events_url": "https://api.github.com/users/willothy/received_events",
                "repos_url": "https://api.github.com/users/willothy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/willothy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/willothy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/willothy"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24507#discussion_r1278214401"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24507"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278214401"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes. There is a similar example in lines 317-319 in src/nvim/context.c.",
            "commit_id": "8bed9278f0b29d3838a4db3e0052529644f32c27",
            "created_at": "2023-07-29T02:37:44Z",
            "diff_hunk": "@@ -4,15 +4,51 @@\n #include <stdbool.h>\n #include <stdlib.h>\n \n+#include \"nvim/api/private/converter.h\"\n #include \"nvim/api/private/defs.h\"\n #include \"nvim/api/private/helpers.h\"\n #include \"nvim/api/tabpage.h\"\n #include \"nvim/api/vim.h\"\n #include \"nvim/buffer_defs.h\"\n+#include \"nvim/eval/typval.h\"\n+#include \"nvim/eval/typval_defs.h\"\n+#include \"nvim/eval/typval_encode.h\"\n+#include \"nvim/eval/window.h\"\n #include \"nvim/globals.h\"\n #include \"nvim/memory.h\"\n #include \"nvim/window.h\"\n \n+/// Returns the layout of a tabpage as a tree-structured Dictionary\n+///\n+/// @param tabpage Tabpage handle, or 0 for the current tabpage\n+/// @param[out] err Error details, if any.\n+/// @return Tree of windows and frames in `tabpage`, or nil if the tab is invalid\n+Object nvim_tabpage_get_layout(Tabpage tabpage, Error *err)\n+  FUNC_API_SINCE(10)\n+{\n+  tabpage_T *tab;\n+  if (tabpage == 0) {\n+    tab = curtab;\n+  } else {\n+    tab = find_tab_by_handle(tabpage, err);\n+  }\n+\n+  if (!tab) {\n+    return NIL;\n+  }\n+\n+  list_T *fr_list = tv_list_alloc(2);\n+\n+  get_framelayout(tab->tp_topframe, fr_list, true);\n+\n+  typval_T rv = {\n+    .vval.v_list = fr_list,\n+    .v_type = VAR_LIST\n+  };\n+\n+  return vim_to_object(&rv);",
            "html_url": "https://github.com/neovim/neovim/pull/24507#discussion_r1278214401",
            "id": 1278214401,
            "in_reply_to_id": 1278211579,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MMAEB",
            "original_commit_id": "fbe99d6b274c42ae6a59c1e85fbef84540c8081c",
            "original_line": 49,
            "original_position": 46,
            "original_start_line": null,
            "path": "src/nvim/api/tabpage.c",
            "position": null,
            "pull_request_review_id": 1553162632,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24507",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278214401/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T02:37:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278214401",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24507#discussion_r1278214536"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24507"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278214536"
                }
            },
            "author_association": "NONE",
            "body": "Thanks, I'll check that out. I appreciate the help!",
            "commit_id": "8bed9278f0b29d3838a4db3e0052529644f32c27",
            "created_at": "2023-07-29T02:38:55Z",
            "diff_hunk": "@@ -4,15 +4,51 @@\n #include <stdbool.h>\n #include <stdlib.h>\n \n+#include \"nvim/api/private/converter.h\"\n #include \"nvim/api/private/defs.h\"\n #include \"nvim/api/private/helpers.h\"\n #include \"nvim/api/tabpage.h\"\n #include \"nvim/api/vim.h\"\n #include \"nvim/buffer_defs.h\"\n+#include \"nvim/eval/typval.h\"\n+#include \"nvim/eval/typval_defs.h\"\n+#include \"nvim/eval/typval_encode.h\"\n+#include \"nvim/eval/window.h\"\n #include \"nvim/globals.h\"\n #include \"nvim/memory.h\"\n #include \"nvim/window.h\"\n \n+/// Returns the layout of a tabpage as a tree-structured Dictionary\n+///\n+/// @param tabpage Tabpage handle, or 0 for the current tabpage\n+/// @param[out] err Error details, if any.\n+/// @return Tree of windows and frames in `tabpage`, or nil if the tab is invalid\n+Object nvim_tabpage_get_layout(Tabpage tabpage, Error *err)\n+  FUNC_API_SINCE(10)\n+{\n+  tabpage_T *tab;\n+  if (tabpage == 0) {\n+    tab = curtab;\n+  } else {\n+    tab = find_tab_by_handle(tabpage, err);\n+  }\n+\n+  if (!tab) {\n+    return NIL;\n+  }\n+\n+  list_T *fr_list = tv_list_alloc(2);\n+\n+  get_framelayout(tab->tp_topframe, fr_list, true);\n+\n+  typval_T rv = {\n+    .vval.v_list = fr_list,\n+    .v_type = VAR_LIST\n+  };\n+\n+  return vim_to_object(&rv);",
            "html_url": "https://github.com/neovim/neovim/pull/24507#discussion_r1278214536",
            "id": 1278214536,
            "in_reply_to_id": 1278211579,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5MMAGI",
            "original_commit_id": "fbe99d6b274c42ae6a59c1e85fbef84540c8081c",
            "original_line": 49,
            "original_position": 46,
            "original_start_line": null,
            "path": "src/nvim/api/tabpage.c",
            "position": null,
            "pull_request_review_id": 1553162768,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24507",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278214536/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-29T02:38:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1278214536",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38540736?v=4",
                "events_url": "https://api.github.com/users/willothy/events{/privacy}",
                "followers_url": "https://api.github.com/users/willothy/followers",
                "following_url": "https://api.github.com/users/willothy/following{/other_user}",
                "gists_url": "https://api.github.com/users/willothy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/willothy",
                "id": 38540736,
                "login": "willothy",
                "node_id": "MDQ6VXNlcjM4NTQwNzM2",
                "organizations_url": "https://api.github.com/users/willothy/orgs",
                "received_events_url": "https://api.github.com/users/willothy/received_events",
                "repos_url": "https://api.github.com/users/willothy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/willothy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/willothy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/willothy"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24507#discussion_r1290565904"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24507"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1290565904"
                }
            },
            "author_association": "NONE",
            "body": "Can use either a string to open a buffer, or a number to use an already-opened buffer. Setting buflisted manually is a bit hacky, but I don't know of a better way to open a buffer from Lua and get its bufnr. Could use input on that.",
            "commit_id": "8bed9278f0b29d3838a4db3e0052529644f32c27",
            "created_at": "2023-08-10T19:02:44Z",
            "diff_hunk": "@@ -976,4 +976,41 @@ do\n   end\n end\n \n+---@param tabpage tabpage\n+---@param layout table\n+function vim._set_layout(tabpage, layout)\n+  local function set_layout(node)\n+    local ty = node[1]\n+    if ty == 'leaf' then\n+      local buf = node[2]\n+      if type(buf) == 'string' then",
            "html_url": "https://github.com/neovim/neovim/pull/24507#discussion_r1290565904",
            "id": 1290565904,
            "line": 989,
            "node_id": "PRRC_kwDOAPphoM5M7HkQ",
            "original_commit_id": "c125f69f67d5e6985ae6c9b76e66c54841a7a874",
            "original_line": 986,
            "original_position": 11,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": 11,
            "pull_request_review_id": 1572556965,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24507",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1290565904/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-08-10T19:02:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1290565904",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38540736?v=4",
                "events_url": "https://api.github.com/users/willothy/events{/privacy}",
                "followers_url": "https://api.github.com/users/willothy/followers",
                "following_url": "https://api.github.com/users/willothy/following{/other_user}",
                "gists_url": "https://api.github.com/users/willothy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/willothy",
                "id": 38540736,
                "login": "willothy",
                "node_id": "MDQ6VXNlcjM4NTQwNzM2",
                "organizations_url": "https://api.github.com/users/willothy/orgs",
                "received_events_url": "https://api.github.com/users/willothy/received_events",
                "repos_url": "https://api.github.com/users/willothy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/willothy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/willothy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/willothy"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "Thanks for the PR, window layout is definitely something we want to expose more deeply: https://github.com/neovim/neovim/issues/3933\r\n\r\n> mostly just an alternative to `vim.fn.winlayout`.\r\n\r\nNew APIs need a stronger motivation than that. New C APIs are justified when (1) exposing C internals that aren't exposed or (2) adding new features that can't be added from Lua.\r\n\r\n`set_layout` sounds much more compelling. But can it take the same structure that is returned by `winlayout()`, or why not?\r\n\r\nIf we end up adding new API for this, perhaps `winlayout()` can be implemented with it. Having multiple different implementations of similar-but-different things is a burden.",
            "created_at": "2023-07-28T23:49:56Z",
            "html_url": "https://github.com/neovim/neovim/pull/24507#issuecomment-1656471222",
            "id": 1656471222,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24507",
            "node_id": "IC_kwDOAPphoM5iu762",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1656471222/reactions"
            },
            "updated_at": "2023-07-28T23:49:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1656471222",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "NONE",
            "body": "> New APIs need a stronger motivation than that. New C APIs are justified when (1) exposing C internals that aren't exposed or (2) adding new features that can't be added from Lua.\r\n\r\nThat's fair! My main motivation for the different structure to `fn.winlayout` is ease of use from Lua, as many window-related plugins implement functions that convert the output of `fn.winlayout` to a format similar to the one created here. The only other thing I can think of is consistency with `set_layout` in the future and keeping with the pattern of `nvim_[scope]_[get/set]_[property], but that may not be so important. \r\n\r\n> `set_layout` sounds much more compelling. But can it take the same structure that is returned by `winlayout()`, or why not?\r\n\r\n`set_layout` definitely could take the same format as `fn.winlayout` if that would be preferred. Now that I'm thinking about it, much of the reason a plugin would implement a transformation on the layout tree would be negated by `set_layout` anyways since transformations would be automatically applied and one would just need to swap window / buffer handles in the tree to move things around.\r\n\r\nI'd also be interested in implementing functions exposing more granular control over window layout, such as accessing and manipulating individual frames within a tabpage's layout, but that definitely needs discussion as I don't think there's anything related exposed by the API at the moment.\r\n\r\n> If we end up adding new API for this, perhaps `winlayout()` can be implemented with it. Having multiple different implementations of similar-but-different things is a burden.\r\n\r\nNot quite sure what you mean by this. Reimplementing / replacing winlayout()?\r\n",
            "created_at": "2023-07-29T00:05:59Z",
            "html_url": "https://github.com/neovim/neovim/pull/24507#issuecomment-1656477323",
            "id": 1656477323,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24507",
            "node_id": "IC_kwDOAPphoM5iu9aL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1656477323/reactions"
            },
            "updated_at": "2023-07-29T00:05:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1656477323",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38540736?v=4",
                "events_url": "https://api.github.com/users/willothy/events{/privacy}",
                "followers_url": "https://api.github.com/users/willothy/followers",
                "following_url": "https://api.github.com/users/willothy/following{/other_user}",
                "gists_url": "https://api.github.com/users/willothy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/willothy",
                "id": 38540736,
                "login": "willothy",
                "node_id": "MDQ6VXNlcjM4NTQwNzM2",
                "organizations_url": "https://api.github.com/users/willothy/orgs",
                "received_events_url": "https://api.github.com/users/willothy/received_events",
                "repos_url": "https://api.github.com/users/willothy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/willothy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/willothy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/willothy"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "The implementation of `winlayout()` is just 37 lines (blank lines excluded).",
            "created_at": "2023-07-29T00:11:48Z",
            "html_url": "https://github.com/neovim/neovim/pull/24507#issuecomment-1656479650",
            "id": 1656479650,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24507",
            "node_id": "IC_kwDOAPphoM5iu9-i",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1656479650/reactions"
            },
            "updated_at": "2023-07-29T00:11:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1656479650",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "author_association": "NONE",
            "body": "> The implementation of `winlayout()` is just 37 lines (blank lines excluded).\r\n\r\nIt is very efficient :) I think that returning the same structure as `winlayout()` would make my implementation a bit smaller, but I agree that the current implementation is good. \r\n\r\nThis probably isn't needed right now, but if `set_layout` existed it would be convenient and predictable to have a corresponding `get` function.",
            "created_at": "2023-07-29T00:22:57Z",
            "html_url": "https://github.com/neovim/neovim/pull/24507#issuecomment-1656484414",
            "id": 1656484414,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24507",
            "node_id": "IC_kwDOAPphoM5iu_I-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1656484414/reactions"
            },
            "updated_at": "2023-07-29T00:23:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1656484414",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38540736?v=4",
                "events_url": "https://api.github.com/users/willothy/events{/privacy}",
                "followers_url": "https://api.github.com/users/willothy/followers",
                "following_url": "https://api.github.com/users/willothy/following{/other_user}",
                "gists_url": "https://api.github.com/users/willothy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/willothy",
                "id": 38540736,
                "login": "willothy",
                "node_id": "MDQ6VXNlcjM4NTQwNzM2",
                "organizations_url": "https://api.github.com/users/willothy/orgs",
                "received_events_url": "https://api.github.com/users/willothy/received_events",
                "repos_url": "https://api.github.com/users/willothy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/willothy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/willothy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/willothy"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The implementation of `winlayout()` is just 37 lines (blank lines excluded).\r\n\r\nWell, `get_framelayout` exists for it only. And the `frame_get_layout` added in this PR is a re-implementation of that. So that definitely adds tech debt. \r\n\r\nAnd having 2 different user-facing structures that represent \"window layout\" is pretty ugly.\r\n\r\nIf we truly have a better way of representing window layout, let's deprecate and plan to remove `winlayout()`. Otherwise let's stick with the same structure.",
            "created_at": "2023-07-29T00:26:27Z",
            "html_url": "https://github.com/neovim/neovim/pull/24507#issuecomment-1656485998",
            "id": 1656485998,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24507",
            "node_id": "IC_kwDOAPphoM5iu_hu",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1656485998/reactions"
            },
            "updated_at": "2023-07-29T00:28:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1656485998",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "NONE",
            "body": "> And having 2 different user-facing structures that represent \"window layout\" is pretty ugly.\r\n> \r\n> If we truly have a better way of representing window layout, let's deprecate and plan to remove `winlayout()`. Otherwise let's stick with the same structure.\r\n\r\nThat makes sense. Should I rework this to keep the same structure as `winlayout()`, keep this as a draft and then start on `set_layout`? Or would it be better for me to scrap this and work on set_layout separately with the assumption that `fn.winlayout()` will continue to be the only way of fetching layout? \r\n",
            "created_at": "2023-07-29T00:52:57Z",
            "html_url": "https://github.com/neovim/neovim/pull/24507#issuecomment-1656494737",
            "id": 1656494737,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24507",
            "node_id": "IC_kwDOAPphoM5ivBqR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1656494737/reactions"
            },
            "updated_at": "2023-07-29T00:52:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1656494737",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38540736?v=4",
                "events_url": "https://api.github.com/users/willothy/events{/privacy}",
                "followers_url": "https://api.github.com/users/willothy/followers",
                "following_url": "https://api.github.com/users/willothy/following{/other_user}",
                "gists_url": "https://api.github.com/users/willothy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/willothy",
                "id": 38540736,
                "login": "willothy",
                "node_id": "MDQ6VXNlcjM4NTQwNzM2",
                "organizations_url": "https://api.github.com/users/willothy/orgs",
                "received_events_url": "https://api.github.com/users/willothy/received_events",
                "repos_url": "https://api.github.com/users/willothy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/willothy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/willothy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/willothy"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Should I rework this to keep the same structure as `winlayout()`, keep this as a draft and then start on `set_layout`?\r\n\r\nThat's what I would suggest, until proven otherwise. get_layout in that case is just a passthrough and it should eliminate `frame_get_layout`, right?",
            "created_at": "2023-07-29T00:59:15Z",
            "html_url": "https://github.com/neovim/neovim/pull/24507#issuecomment-1656496333",
            "id": 1656496333,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24507",
            "node_id": "IC_kwDOAPphoM5ivCDN",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1656496333/reactions"
            },
            "updated_at": "2023-07-29T00:59:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1656496333",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "NONE",
            "body": "> That's what I would suggest, until proven otherwise. \r\n\r\nSounds good!\r\n\r\n> get_layout in that case is just a passthrough and it should eliminate `frame_get_layout`, right?\r\n\r\nMost likely - the implementation for `winlayout()` is currently static and defined in `nvim/eval/` not `nvim/api/`, would it be acceptable to make that nonstatic and include `nvim/eval/window.h` in `nvim/api/tabpage.c`?",
            "created_at": "2023-07-29T01:14:34Z",
            "html_url": "https://github.com/neovim/neovim/pull/24507#issuecomment-1656504416",
            "id": 1656504416,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24507",
            "node_id": "IC_kwDOAPphoM5ivEBg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1656504416/reactions"
            },
            "updated_at": "2023-07-29T01:15:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1656504416",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38540736?v=4",
                "events_url": "https://api.github.com/users/willothy/events{/privacy}",
                "followers_url": "https://api.github.com/users/willothy/followers",
                "following_url": "https://api.github.com/users/willothy/following{/other_user}",
                "gists_url": "https://api.github.com/users/willothy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/willothy",
                "id": 38540736,
                "login": "willothy",
                "node_id": "MDQ6VXNlcjM4NTQwNzM2",
                "organizations_url": "https://api.github.com/users/willothy/orgs",
                "received_events_url": "https://api.github.com/users/willothy/received_events",
                "repos_url": "https://api.github.com/users/willothy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/willothy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/willothy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/willothy"
            }
        },
        {
            "author_association": "NONE",
            "body": "Thanks for the quick reviews! I'll make those changes. ",
            "created_at": "2023-07-29T02:15:32Z",
            "html_url": "https://github.com/neovim/neovim/pull/24507#issuecomment-1656520726",
            "id": 1656520726,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24507",
            "node_id": "IC_kwDOAPphoM5ivIAW",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1656520726/reactions"
            },
            "updated_at": "2023-07-29T02:15:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1656520726",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38540736?v=4",
                "events_url": "https://api.github.com/users/willothy/events{/privacy}",
                "followers_url": "https://api.github.com/users/willothy/followers",
                "following_url": "https://api.github.com/users/willothy/following{/other_user}",
                "gists_url": "https://api.github.com/users/willothy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/willothy",
                "id": 38540736,
                "login": "willothy",
                "node_id": "MDQ6VXNlcjM4NTQwNzM2",
                "organizations_url": "https://api.github.com/users/willothy/orgs",
                "received_events_url": "https://api.github.com/users/willothy/received_events",
                "repos_url": "https://api.github.com/users/willothy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/willothy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/willothy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/willothy"
            }
        },
        {
            "author_association": "NONE",
            "body": "Regarding `set_layout`:\n\nWould it be beneficial for the layout tree to handle window views, so you'd pass a buffer handle and optional window view properties (`fn.winsaveview`) with each leaf? Or is that too much complexity and better handled separately after the layout is set?",
            "created_at": "2023-07-29T03:12:44Z",
            "html_url": "https://github.com/neovim/neovim/pull/24507#issuecomment-1656535769",
            "id": 1656535769,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24507",
            "node_id": "IC_kwDOAPphoM5ivLrZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1656535769/reactions"
            },
            "updated_at": "2023-07-29T03:12:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1656535769",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38540736?v=4",
                "events_url": "https://api.github.com/users/willothy/events{/privacy}",
                "followers_url": "https://api.github.com/users/willothy/followers",
                "following_url": "https://api.github.com/users/willothy/following{/other_user}",
                "gists_url": "https://api.github.com/users/willothy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/willothy",
                "id": 38540736,
                "login": "willothy",
                "node_id": "MDQ6VXNlcjM4NTQwNzM2",
                "organizations_url": "https://api.github.com/users/willothy/orgs",
                "received_events_url": "https://api.github.com/users/willothy/received_events",
                "repos_url": "https://api.github.com/users/willothy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/willothy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/willothy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/willothy"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Regarding `set_layout`:\r\n> \r\n> Would it be beneficial for the layout tree to handle window views, so you'd pass a buffer handle and optional window view properties (`fn.winsaveview`) with each leaf? Or is that too much complexity and better handled separately after the layout is set?\r\n\r\nThat is probably a necessary feature, but could be a followup PR? It seems useful for \"restore window layout\" to be a single operation so that Nvim can better avoid janky redraw.\r\n\r\nNote also this limitation of `:help winrestcmd()`:\r\n\r\n> Only works properly when no windows are opened or closed and the current window and tab page is unchanged.\r\n\r\n`set_layout` should of course not have that limitation.",
            "created_at": "2023-07-29T13:34:17Z",
            "html_url": "https://github.com/neovim/neovim/pull/24507#issuecomment-1656732578",
            "id": 1656732578,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24507",
            "node_id": "IC_kwDOAPphoM5iv7ui",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1656732578/reactions"
            },
            "updated_at": "2023-07-29T13:34:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1656732578",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "NONE",
            "body": "> That is probably a necessary feature, but could be a followup PR? It seems useful for \"restore window layout\" to be a single operation so that Nvim can better avoid janky redraw.\n\nExactly my thoughts. Definitely would make sense to do that in a separate PR, will make initial implementation simpler.\n\nI'm a bit busy today but will likely get started on this tonight!",
            "created_at": "2023-07-29T16:27:57Z",
            "html_url": "https://github.com/neovim/neovim/pull/24507#issuecomment-1656776967",
            "id": 1656776967,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24507",
            "node_id": "IC_kwDOAPphoM5iwGkH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1656776967/reactions"
            },
            "updated_at": "2023-07-29T16:27:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1656776967",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38540736?v=4",
                "events_url": "https://api.github.com/users/willothy/events{/privacy}",
                "followers_url": "https://api.github.com/users/willothy/followers",
                "following_url": "https://api.github.com/users/willothy/following{/other_user}",
                "gists_url": "https://api.github.com/users/willothy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/willothy",
                "id": 38540736,
                "login": "willothy",
                "node_id": "MDQ6VXNlcjM4NTQwNzM2",
                "organizations_url": "https://api.github.com/users/willothy/orgs",
                "received_events_url": "https://api.github.com/users/willothy/received_events",
                "repos_url": "https://api.github.com/users/willothy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/willothy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/willothy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/willothy"
            }
        },
        {
            "author_association": "NONE",
            "body": "Currently working on this - struggling a bit with creating windows. I've been able to use `win_split_ins` to create splits, but I've spent a fair amount of time with rg and LSP poking around `src/nvim/windows.c` and trying different things and still haven't been able to directly modify the layout. Any pointers on where I should look? Thanks :)",
            "created_at": "2023-07-31T08:44:19Z",
            "html_url": "https://github.com/neovim/neovim/pull/24507#issuecomment-1657932225",
            "id": 1657932225,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24507",
            "node_id": "IC_kwDOAPphoM5i0gnB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1657932225/reactions"
            },
            "updated_at": "2023-07-31T08:44:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1657932225",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38540736?v=4",
                "events_url": "https://api.github.com/users/willothy/events{/privacy}",
                "followers_url": "https://api.github.com/users/willothy/followers",
                "following_url": "https://api.github.com/users/willothy/following{/other_user}",
                "gists_url": "https://api.github.com/users/willothy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/willothy",
                "id": 38540736,
                "login": "willothy",
                "node_id": "MDQ6VXNlcjM4NTQwNzM2",
                "organizations_url": "https://api.github.com/users/willothy/orgs",
                "received_events_url": "https://api.github.com/users/willothy/received_events",
                "repos_url": "https://api.github.com/users/willothy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/willothy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/willothy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/willothy"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> and still haven't been able to directly modify the layout. Any pointers on where I should look?\r\n\r\nI'd start by copying the idea from winrestcmd(): https://github.com/neovim/neovim/blob/996dd36c77321ea91758b5996d152a2f37af99dd/src/nvim/eval/window.c#L770\r\n\r\nof course, it's just print a bunch of `:resize` and `:vert resize` commands, but could use their C equivalents instead: https://github.com/neovim/neovim/blob/996dd36c77321ea91758b5996d152a2f37af99dd/src/nvim/ex_docmd.c#L5175\r\n\r\nIt's also fine to just start with exactly what winrestcmd() produces, and execute it as vimscript using `do_cmdline_cmd`: https://github.com/neovim/neovim/blob/996dd36c77321ea91758b5996d152a2f37af99dd/src/nvim/insexpand.c#L1244\r\n\r\nThen after you have test coverage, can revisit the implementation if needed.\r\n\r\nI wouldn't spend a lot of time building up the C logic. Instead I would delegate as much as possible to Lua, and call the Lua function from C https://github.com/neovim/neovim/blob/996dd36c77321ea91758b5996d152a2f37af99dd/src/nvim/api/vim.c#L1878\r\n\r\nyou could put your Lua code in `runtime/lua/vim/shared.lua` for now.",
            "created_at": "2023-07-31T19:42:57Z",
            "html_url": "https://github.com/neovim/neovim/pull/24507#issuecomment-1659026163",
            "id": 1659026163,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24507",
            "node_id": "IC_kwDOAPphoM5i4rrz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1659026163/reactions"
            },
            "updated_at": "2023-07-31T19:45:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1659026163",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "NONE",
            "body": "Sounds good, that makes sense! I'll try to keep as much as possible on the Lua side. I was mainly trying to insert windows / frames into the layout manually to ensure best possible performance when doing a bunch of window operations simultaneously, but creating the splits via lua / vimscript makes more sense for now. Plus I definitely don't know the codebase well enough yet to understand the side affects of making those changes in C.",
            "created_at": "2023-07-31T19:54:31Z",
            "html_url": "https://github.com/neovim/neovim/pull/24507#issuecomment-1659042954",
            "id": 1659042954,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24507",
            "node_id": "IC_kwDOAPphoM5i4vyK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1659042954/reactions"
            },
            "updated_at": "2023-07-31T19:54:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1659042954",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38540736?v=4",
                "events_url": "https://api.github.com/users/willothy/events{/privacy}",
                "followers_url": "https://api.github.com/users/willothy/followers",
                "following_url": "https://api.github.com/users/willothy/following{/other_user}",
                "gists_url": "https://api.github.com/users/willothy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/willothy",
                "id": 38540736,
                "login": "willothy",
                "node_id": "MDQ6VXNlcjM4NTQwNzM2",
                "organizations_url": "https://api.github.com/users/willothy/orgs",
                "received_events_url": "https://api.github.com/users/willothy/received_events",
                "repos_url": "https://api.github.com/users/willothy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/willothy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/willothy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/willothy"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I was mainly trying to insert windows / frames into the layout manually to ensure best possible performance\r\n\r\nCan turn various knobs before/after `NLUA_EXEC_STATIC` , such as `RedrawingDisabled`: https://github.com/neovim/neovim/blob/996dd36c77321ea91758b5996d152a2f37af99dd/src/nvim/drawscreen.c#L304-L310\r\n\r\nI'm not sure we have any way of \"double buffering\" a window layout, so the main cost we have control over (AFAIK) is whether we immediately render stuff as we evaluate each split command.",
            "created_at": "2023-07-31T20:17:54Z",
            "html_url": "https://github.com/neovim/neovim/pull/24507#issuecomment-1659070553",
            "id": 1659070553,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24507",
            "node_id": "IC_kwDOAPphoM5i42hZ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1659070553/reactions"
            },
            "updated_at": "2023-07-31T20:17:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1659070553",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "NONE",
            "body": "For sure, delaying redraw probably will do the trick. The only other way I can think of would be using a separate tabpage then swapping their top-level frames after all layout setup is done, but I don't think there's a way to create unlisted tabpages and that would probably not be worth the complexity anyways.",
            "created_at": "2023-07-31T20:35:21Z",
            "html_url": "https://github.com/neovim/neovim/pull/24507#issuecomment-1659124956",
            "id": 1659124956,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24507",
            "node_id": "IC_kwDOAPphoM5i5Dzc",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1659124956/reactions"
            },
            "updated_at": "2023-07-31T20:35:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1659124956",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38540736?v=4",
                "events_url": "https://api.github.com/users/willothy/events{/privacy}",
                "followers_url": "https://api.github.com/users/willothy/followers",
                "following_url": "https://api.github.com/users/willothy/following{/other_user}",
                "gists_url": "https://api.github.com/users/willothy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/willothy",
                "id": 38540736,
                "login": "willothy",
                "node_id": "MDQ6VXNlcjM4NTQwNzM2",
                "organizations_url": "https://api.github.com/users/willothy/orgs",
                "received_events_url": "https://api.github.com/users/willothy/received_events",
                "repos_url": "https://api.github.com/users/willothy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/willothy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/willothy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/willothy"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> other way I can think of would be using a separate tabpage then swapping their top-level frames after all layout setup is done, but I don't think there's a way to create unlisted tabpages\r\n\r\nThere is precedent for that general idea, `aucmd_prepbuf` https://github.com/neovim/neovim/blob/996dd36c77321ea91758b5996d152a2f37af99dd/src/nvim/autocmd.c#L1237 but it's more for correctness, not performance.",
            "created_at": "2023-08-01T00:49:50Z",
            "html_url": "https://github.com/neovim/neovim/pull/24507#issuecomment-1659402633",
            "id": 1659402633,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24507",
            "node_id": "IC_kwDOAPphoM5i6HmJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1659402633/reactions"
            },
            "updated_at": "2023-08-01T00:50:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1659402633",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "NONE",
            "body": "> > other way I can think of would be using a separate tabpage then swapping their top-level frames after all layout setup is done, but I don't think there's a way to create unlisted tabpages\r\n> \r\n> There is precedent for that general idea, `aucmd_prepbuf`\r\n> \r\n> https://github.com/neovim/neovim/blob/996dd36c77321ea91758b5996d152a2f37af99dd/src/nvim/autocmd.c#L1237\r\n> \r\n\r\nCould be interesting, maybe could be done in a followup PR if the initial implementation has flicker or janky redraw.  \r\n\r\n> but it's more for correctness, not performance.\r\n\r\nYeah, I have no idea what the actual performance implications would be anyways, mainly just guessing based on \"no FFI faster than FFI\".",
            "created_at": "2023-08-01T01:05:43Z",
            "html_url": "https://github.com/neovim/neovim/pull/24507#issuecomment-1659413125",
            "id": 1659413125,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24507",
            "node_id": "IC_kwDOAPphoM5i6KKF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1659413125/reactions"
            },
            "updated_at": "2023-08-01T01:05:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1659413125",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38540736?v=4",
                "events_url": "https://api.github.com/users/willothy/events{/privacy}",
                "followers_url": "https://api.github.com/users/willothy/followers",
                "following_url": "https://api.github.com/users/willothy/following{/other_user}",
                "gists_url": "https://api.github.com/users/willothy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/willothy",
                "id": 38540736,
                "login": "willothy",
                "node_id": "MDQ6VXNlcjM4NTQwNzM2",
                "organizations_url": "https://api.github.com/users/willothy/orgs",
                "received_events_url": "https://api.github.com/users/willothy/received_events",
                "repos_url": "https://api.github.com/users/willothy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/willothy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/willothy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/willothy"
            }
        },
        {
            "author_association": "NONE",
            "body": "Relatively simple implementation but it works :)",
            "created_at": "2023-08-10T19:01:09Z",
            "html_url": "https://github.com/neovim/neovim/pull/24507#issuecomment-1673751749",
            "id": 1673751749,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24507",
            "node_id": "IC_kwDOAPphoM5jw2zF",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1673751749/reactions"
            },
            "updated_at": "2023-08-10T19:01:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1673751749",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38540736?v=4",
                "events_url": "https://api.github.com/users/willothy/events{/privacy}",
                "followers_url": "https://api.github.com/users/willothy/followers",
                "following_url": "https://api.github.com/users/willothy/following{/other_user}",
                "gists_url": "https://api.github.com/users/willothy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/willothy",
                "id": 38540736,
                "login": "willothy",
                "node_id": "MDQ6VXNlcjM4NTQwNzM2",
                "organizations_url": "https://api.github.com/users/willothy/orgs",
                "received_events_url": "https://api.github.com/users/willothy/received_events",
                "repos_url": "https://api.github.com/users/willothy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/willothy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/willothy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/willothy"
            }
        },
        {
            "author_association": "NONE",
            "body": "This is working, but there are a few things that I think could be better, but were maybe too complicated for the initial implementation. These can/should addressed in this PR or followups:\r\n- Searching the previous layout for windows that can be reused instead of closing all of them (update by difference)\r\n- Setting window view and size properties\r\n- Determining which window should be focused after the layout is setup\r\n- Better way of opening new buffers\r\n\r\nEdit: Not quite sure how to address the doc lints. Is the issue just formatting?\r\n\r\nEdit 2: A [gist](https://gist.github.com/willothy/0f4888bb9c5f5330f0899843f6207402) with usage example ",
            "created_at": "2023-08-10T19:32:21Z",
            "html_url": "https://github.com/neovim/neovim/pull/24507#issuecomment-1673795754",
            "id": 1673795754,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24507",
            "node_id": "IC_kwDOAPphoM5jxBiq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1673795754/reactions"
            },
            "updated_at": "2023-08-11T01:00:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1673795754",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38540736?v=4",
                "events_url": "https://api.github.com/users/willothy/events{/privacy}",
                "followers_url": "https://api.github.com/users/willothy/followers",
                "following_url": "https://api.github.com/users/willothy/following{/other_user}",
                "gists_url": "https://api.github.com/users/willothy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/willothy",
                "id": 38540736,
                "login": "willothy",
                "node_id": "MDQ6VXNlcjM4NTQwNzM2",
                "organizations_url": "https://api.github.com/users/willothy/orgs",
                "received_events_url": "https://api.github.com/users/willothy/received_events",
                "repos_url": "https://api.github.com/users/willothy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/willothy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/willothy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/willothy"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/24507/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/24507/commits",
    "created_at": "2023-07-28T23:28:37Z",
    "diff_url": "https://github.com/neovim/neovim/pull/24507.diff",
    "draft": false,
    "head": {
        "label": "willothy:tab-get-layout",
        "ref": "tab-get-layout",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/willothy/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/willothy/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/willothy/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/willothy/neovim/branches{/branch}",
            "clone_url": "https://github.com/willothy/neovim.git",
            "collaborators_url": "https://api.github.com/repos/willothy/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/willothy/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/willothy/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/willothy/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/willothy/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/willothy/neovim/contributors",
            "created_at": "2023-02-17T14:59:53Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/willothy/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/willothy/neovim/downloads",
            "events_url": "https://api.github.com/repos/willothy/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/willothy/neovim/forks",
            "full_name": "willothy/neovim",
            "git_commits_url": "https://api.github.com/repos/willothy/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/willothy/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/willothy/neovim/git/tags{/sha}",
            "git_url": "git://github.com/willothy/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/willothy/neovim/hooks",
            "html_url": "https://github.com/willothy/neovim",
            "id": 603070750,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/willothy/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/willothy/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/willothy/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/willothy/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/willothy/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/willothy/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/willothy/neovim/merges",
            "milestones_url": "https://api.github.com/repos/willothy/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOI_IhHg",
            "notifications_url": "https://api.github.com/repos/willothy/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/38540736?v=4",
                "events_url": "https://api.github.com/users/willothy/events{/privacy}",
                "followers_url": "https://api.github.com/users/willothy/followers",
                "following_url": "https://api.github.com/users/willothy/following{/other_user}",
                "gists_url": "https://api.github.com/users/willothy/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/willothy",
                "id": 38540736,
                "login": "willothy",
                "node_id": "MDQ6VXNlcjM4NTQwNzM2",
                "organizations_url": "https://api.github.com/users/willothy/orgs",
                "received_events_url": "https://api.github.com/users/willothy/received_events",
                "repos_url": "https://api.github.com/users/willothy/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/willothy/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/willothy/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/willothy"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/willothy/neovim/pulls{/number}",
            "pushed_at": "2023-08-10T19:45:07Z",
            "releases_url": "https://api.github.com/repos/willothy/neovim/releases{/id}",
            "size": 245716,
            "ssh_url": "git@github.com:willothy/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/willothy/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/willothy/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/willothy/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/willothy/neovim/subscription",
            "svn_url": "https://github.com/willothy/neovim",
            "tags_url": "https://api.github.com/repos/willothy/neovim/tags",
            "teams_url": "https://api.github.com/repos/willothy/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/willothy/neovim/git/trees{/sha}",
            "updated_at": "2023-03-06T01:37:30Z",
            "url": "https://api.github.com/repos/willothy/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "8bed9278f0b29d3838a4db3e0052529644f32c27",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/38540736?v=4",
            "events_url": "https://api.github.com/users/willothy/events{/privacy}",
            "followers_url": "https://api.github.com/users/willothy/followers",
            "following_url": "https://api.github.com/users/willothy/following{/other_user}",
            "gists_url": "https://api.github.com/users/willothy/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/willothy",
            "id": 38540736,
            "login": "willothy",
            "node_id": "MDQ6VXNlcjM4NTQwNzM2",
            "organizations_url": "https://api.github.com/users/willothy/orgs",
            "received_events_url": "https://api.github.com/users/willothy/received_events",
            "repos_url": "https://api.github.com/users/willothy/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/willothy/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/willothy/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/willothy"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/24507",
    "id": 1454527379,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24507",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "libnvim, Nvim RPC API",
            "id": 103819671,
            "name": "api",
            "node_id": "MDU6TGFiZWwxMDM4MTk2NzE=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/api"
        }
    ],
    "locked": false,
    "merge_commit_sha": "fb33ddf333cf810a512119cc63b1360193411060",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5WslOT",
    "number": 24507,
    "patch_url": "https://github.com/neovim/neovim/pull/24507.patch",
    "requested_reviewers": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
            "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
            "followers_url": "https://api.github.com/users/bfredl/followers",
            "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
            "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bfredl",
            "id": 1363104,
            "login": "bfredl",
            "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
            "organizations_url": "https://api.github.com/users/bfredl/orgs",
            "received_events_url": "https://api.github.com/users/bfredl/received_events",
            "repos_url": "https://api.github.com/users/bfredl/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bfredl"
        },
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
            "events_url": "https://api.github.com/users/famiu/events{/privacy}",
            "followers_url": "https://api.github.com/users/famiu/followers",
            "following_url": "https://api.github.com/users/famiu/following{/other_user}",
            "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/famiu",
            "id": 29580810,
            "login": "famiu",
            "node_id": "MDQ6VXNlcjI5NTgwODEw",
            "organizations_url": "https://api.github.com/users/famiu/orgs",
            "received_events_url": "https://api.github.com/users/famiu/received_events",
            "repos_url": "https://api.github.com/users/famiu/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/famiu"
        }
    ],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/24507/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/8bed9278f0b29d3838a4db3e0052529644f32c27",
    "title": "feat(api): nvim_tabpage_[get/set]_layout",
    "updated_at": "2023-08-11T01:00:59Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/24507",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/38540736?v=4",
        "events_url": "https://api.github.com/users/willothy/events{/privacy}",
        "followers_url": "https://api.github.com/users/willothy/followers",
        "following_url": "https://api.github.com/users/willothy/following{/other_user}",
        "gists_url": "https://api.github.com/users/willothy/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/willothy",
        "id": 38540736,
        "login": "willothy",
        "node_id": "MDQ6VXNlcjM4NTQwNzM2",
        "organizations_url": "https://api.github.com/users/willothy/orgs",
        "received_events_url": "https://api.github.com/users/willothy/received_events",
        "repos_url": "https://api.github.com/users/willothy/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/willothy/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/willothy/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/willothy"
    }
}