{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/28203/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/28203/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/28203"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/28203"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/28203/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/53899ac7418d805f7fa5cbfc180df4bf1027f030"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5262,
            "forks_count": 5262,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1704,
            "open_issues_count": 1704,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-04-16T01:36:31Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 265230,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 76221,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-04-16T01:13:32Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 76221,
            "watchers_count": 76221,
            "web_commit_signoff_required": false
        },
        "sha": "57adf8c6e01d9395eb52fe03571c535571efdc4b",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "Problem: Currently, `vim.fs.normalize` does not resolve `.` and `..` components. This makes no sense as the entire point of normalization is to remove redundancy from the path. The path normalization functions in several other languages (Java, Python, C++, etc.) also resolve `.` and `..` components. Source:\r\nPython: https://docs.python.org/3/library/os.path.html#os.path.normpath\r\nJava: https://docs.oracle.com/javase/8/docs/api/java/nio/file/Path.html#normalize--\r\nC++: https://en.cppreference.com/w/cpp/filesystem/path/lexically_normal\r\n\r\nSolution: Make `vim.fs.normalize` also resolve `.` and `..` paths. So now, `vim.fs.normalize(\"~/foo/bar/../baz/./\")` would result in `\"~/foo/baz\"` instead of `\"~/foo/bar/../baz/.\"`.",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1554546132"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554546132"
                }
            },
            "author_association": "MEMBER",
            "body": "My initial feeling  is that using `vim.split(path, '/')` might be more straightforward. Then maybe construct `resolved_path` as an array with a single `M.joinpath()` at the end?",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-06T08:03:45Z",
            "diff_hunk": "@@ -405,7 +409,29 @@ function M.normalize(path, opts)\n   -- Remove trailing slashes\n   path = path:gsub('(.)/$', '%1')\n \n-  return path\n+  -- Resolve `.` and `..` components\n+  local resolved_path = ''\n+  local curr_component = ''\n+\n+  -- Iterate through the string and process each components separated by `/`\n+  -- Go one character after the end of the string to handle the last component\n+  for i = 1, #path + 1 do",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1554546132",
            "id": 1554546132,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5cqH3U",
            "original_commit_id": "e478b3a0f184bac0e86463de482ed93f882b54eb",
            "original_line": 418,
            "original_position": 31,
            "original_start_line": null,
            "path": "runtime/lua/vim/fs.lua",
            "position": null,
            "pull_request_review_id": 1984461419,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554546132/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-06T08:03:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554546132",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1554629872"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554629872"
                }
            },
            "author_association": "MEMBER",
            "body": "This doesn’t need to be an error. In the root directory, `..` and `.` are equivalent (ie they both point back to the root directory), so this should be valid. ",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-06T15:36:48Z",
            "diff_hunk": "@@ -334,18 +334,89 @@ function M.find(names, opts)\n   return matches\n end\n \n+--- Split a Windows path into a prefix and a body, such that the body can be processed like a POSIX\n+--- path. Path must use forward slashes (/) as the path separator and must not have any extraneous\n+--- slashes.\n+---\n+--- Does not check if the path is a valid Windows path. Invalid paths will give invalid results.\n+---\n+--- Examples:\n+--- - `//./C:/foo/bar` -> `//./C:`, `/foo/bar`\n+--- - `//?/UNC/server/share/foo/bar` -> `//?/UNC/server/share`, `/foo/bar`\n+--- - `C:/foo/bar` -> `C:`, `/foo/bar`\n+--- - `C:foo/bar` -> `C:`, `foo/bar`\n+---\n+--- @param path string Path to split.\n+--- @return string, string : prefix, body\n+local function split_windows_path(path)\n+  local prefix = ''\n+\n+  local function process_unc_path()\n+    local server_share = path:match('[^/]+/[^/]+/')\n+\n+    if server_share == nil then\n+      error('Invalid Windows UNC path')\n+    end\n+\n+    prefix = prefix .. server_share --[[ @as string ]]\n+    path = path:sub(#server_share + 1)\n+  end\n+\n+  -- Device paths\n+  if path:match('^//[?.]/') then\n+    prefix = path:sub(1, 4)\n+    path = path:sub(5)\n+\n+    local device = path:match('[^/]+/')\n+\n+    if device == nil then\n+      error('Invalid Windows device path')\n+    end\n+\n+    prefix = prefix .. device --[[ @as string ]]\n+    path = path:sub(#device + 1)\n+\n+    if device == 'UNC/' then\n+      process_unc_path()\n+    end\n+  -- UNC paths\n+  elseif vim.startswith(path, '//') and not vim.startswith(path, '///') then\n+    prefix = '//'\n+    path = path:sub(3)\n+    process_unc_path()\n+  -- Drive paths\n+  elseif path:match('^%w:') then\n+    prefix = path:sub(1, 2)\n+    path = path:sub(3)\n+  end\n+\n+  -- If there is a slash at the end of the prefix, move it to the start of the body.\n+  if prefix:sub(-1) == '/' then\n+    prefix = prefix:sub(1, -2)\n+    path = '/' .. path\n+  end\n+\n+  return prefix, path\n+end\n+\n --- @class vim.fs.normalize.Opts\n --- @inlinedoc\n ---\n --- Expand environment variables.\n --- (default: `true`)\n --- @field expand_env boolean\n \n---- Normalize a path to a standard format. A tilde (~) character at the\n---- beginning of the path is expanded to the user's home directory and\n---- environment variables are also expanded. `.` and `..` components are also\n---- resolved.\n+--- Normalize a path to a standard format. A tilde (~) character at the beginning of the path is\n+--- expanded to the user's home directory and environment variables are also expanded. `.` and `..`\n+--- components are also resolved, except when the path is relative and trying to resolve it would\n+--- result in an absolute path. For example: the following will not get resolved:\n+--- - `.` as the only part in a relative path (e.g., `.`, `././`).\n+--- - Resolving `..` in a relative path leads outside the current directory (e.g., `../../foo`).\n ---\n+--- NOTE: Attempting to resolve `..` past the root directory in POSIX or past the root of a drive in",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1554629872",
            "id": 1554629872,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5cqcTw",
            "original_commit_id": "347acf9a3d0feb9a5fa4a794bded4aa9442f3eaf",
            "original_line": 416,
            "original_position": 87,
            "original_start_line": null,
            "path": "runtime/lua/vim/fs.lua",
            "position": null,
            "pull_request_review_id": 1984576749,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554629872/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-06T15:36:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554629872",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1554846293"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554846293"
                }
            },
            "author_association": "MEMBER",
            "body": "This block looks like it should go in a function, otherwise `normalize` is a 100 LOC which is too big IMO.",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-07T08:29:12Z",
            "diff_hunk": "@@ -397,13 +495,60 @@ function M.normalize(path, opts)\n     path = path:gsub('/+', '/')\n   end\n \n-  -- Ensure last slash is not truncated from root drive on Windows\n-  if iswin and path:match('^%w:/$') then\n-    return path\n+  local prefix = ''\n+\n+  -- Split Windows paths into prefix and body to make processing easier.\n+  if iswin then\n+    prefix, path = split_windows_path(path)\n+  -- For POSIX paths, if there are leading double slashes, set prefix to a single slash and remove a\n+  -- slash from the start of the path to make the path easier to work with.\n+  elseif vim.startswith(path, '//') then\n+    prefix = '/'\n+    path = path:sub(2)\n+  end\n+\n+  local is_path_absolute = vim.startswith(path, '/')\n+  -- Remove leading and trailing slashes from the path so split works correctly.\n+  path = path:gsub('^/', ''):gsub('/$', '')\n+\n+  -- Split the path into components and process them.\n+  local path_components = vim.split(path, '/')\n+  local new_path_components = {}\n+\n+  for _, component in ipairs(path_components) do",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1554846293",
            "id": 1554846293,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5crRJV",
            "original_commit_id": "4e86d81ceb13aff509c880dd0679b5da6ec6628f",
            "original_line": 518,
            "original_position": 159,
            "original_start_line": null,
            "path": "runtime/lua/vim/fs.lua",
            "position": null,
            "pull_request_review_id": 1984878912,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554846293/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-07T08:29:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554846293",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1554849175"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554849175"
                }
            },
            "author_association": "MEMBER",
            "body": "Yeah that's fair, I'll move it to a helper function like `split_windows_path`",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-07T08:43:46Z",
            "diff_hunk": "@@ -397,13 +495,60 @@ function M.normalize(path, opts)\n     path = path:gsub('/+', '/')\n   end\n \n-  -- Ensure last slash is not truncated from root drive on Windows\n-  if iswin and path:match('^%w:/$') then\n-    return path\n+  local prefix = ''\n+\n+  -- Split Windows paths into prefix and body to make processing easier.\n+  if iswin then\n+    prefix, path = split_windows_path(path)\n+  -- For POSIX paths, if there are leading double slashes, set prefix to a single slash and remove a\n+  -- slash from the start of the path to make the path easier to work with.\n+  elseif vim.startswith(path, '//') then\n+    prefix = '/'\n+    path = path:sub(2)\n+  end\n+\n+  local is_path_absolute = vim.startswith(path, '/')\n+  -- Remove leading and trailing slashes from the path so split works correctly.\n+  path = path:gsub('^/', ''):gsub('/$', '')\n+\n+  -- Split the path into components and process them.\n+  local path_components = vim.split(path, '/')\n+  local new_path_components = {}\n+\n+  for _, component in ipairs(path_components) do",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1554849175",
            "id": 1554849175,
            "in_reply_to_id": 1554846293,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5crR2X",
            "original_commit_id": "4e86d81ceb13aff509c880dd0679b5da6ec6628f",
            "original_line": 518,
            "original_position": 159,
            "original_start_line": null,
            "path": "runtime/lua/vim/fs.lua",
            "position": null,
            "pull_request_review_id": 1984882068,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554849175/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-07T08:43:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554849175",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1554954121"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554954121"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    • `..` in a relative path when it leads outside the current directory\r\n```",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-07T12:05:28Z",
            "diff_hunk": "@@ -2957,7 +2957,16 @@ vim.fs.joinpath({...})                                     *vim.fs.joinpath()*\n vim.fs.normalize({path}, {opts})                          *vim.fs.normalize()*\n     Normalize a path to a standard format. A tilde (~) character at the\n     beginning of the path is expanded to the user's home directory and\n-    environment variables are also expanded.\n+    environment variables are also expanded. `.` and `..` components are also\n+    resolved, except when the path is relative and trying to resolve it would\n+    result in an absolute path. For example: the following will not get\n+    resolved:\n+    • `.` as the only part in a relative path (e.g., `.`, `././`).\n+    • Resolving `..` in a relative path leads outside the current directory",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1554954121",
            "id": 1554954121,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5crreJ",
            "original_commit_id": "3b0e4654c74acc97b833475abbb87e11255e8608",
            "original_line": 2965,
            "original_position": 10,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1985065629,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554954121/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-07T12:13:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554954121",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1554954477"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554954477"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't think this makes much sense together with \"NOTE: In the root directory, resolving `..` will return the root directory itself.\". `..` in root directory either errors or is resolved to the root itself.",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-07T12:07:24Z",
            "diff_hunk": "@@ -2970,6 +2979,27 @@ vim.fs.normalize({path}, {opts})                          *vim.fs.normalize()*\n \n         vim.fs.normalize('$XDG_CONFIG_HOME/nvim/init.vim')\n         -- '/Users/jdoe/.config/nvim/init.vim'\n+\n+        vim.fs.normalize('~/src/nvim/api/../tui/./tui.c')\n+        -- '/home/jdoe/src/nvim/tui/tui.c'\n+\n+        vim.fs.normalize('.')\n+        -- '.'\n+\n+        vim.fs.normalize('./foo/bar')\n+        -- 'foo/bar'\n+\n+        vim.fs.normalize('foo/../../../bar')\n+        -- '../../bar'\n+\n+        vim.fs.normalize('/home/jdoe/../../../bar')\n+        -- Error: Invalid path, cannot resolve `..` past root directory",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1554954477",
            "id": 1554954477,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5crrjt",
            "original_commit_id": "3b0e4654c74acc97b833475abbb87e11255e8608",
            "original_line": 2996,
            "original_position": 36,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1985065629,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554954477/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-07T12:13:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554954477",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1554955084"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554955084"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    prefix, path = path:sub(1, 4), path:sub(5)\r\n```\r\n\r\nThis might be nit picking and against the overall code base, but I usually find it useful having this type of string split as a tuple assignment.",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-07T12:10:38Z",
            "diff_hunk": "@@ -334,16 +334,123 @@ function M.find(names, opts)\n   return matches\n end\n \n+--- Split a Windows path into a prefix and a body, such that the body can be processed like a POSIX\n+--- path. Path must use forward slashes (/) as the path separator and must not have any extraneous\n+--- slashes.\n+---\n+--- Does not check if the path is a valid Windows path. Invalid paths will give invalid results.\n+---\n+--- Examples:\n+--- - `//./C:/foo/bar` -> `//./C:`, `/foo/bar`\n+--- - `//?/UNC/server/share/foo/bar` -> `//?/UNC/server/share`, `/foo/bar`\n+--- - `C:/foo/bar` -> `C:`, `/foo/bar`\n+--- - `C:foo/bar` -> `C:`, `foo/bar`\n+---\n+--- @param path string Path to split.\n+--- @return string, string : prefix, body\n+local function split_windows_path(path)\n+  local prefix = ''\n+\n+  local function process_unc_path()\n+    local server_share = path:match('[^/]+/[^/]+/')\n+\n+    if server_share == nil then\n+      error('Invalid Windows UNC path')\n+    end\n+\n+    prefix = prefix .. server_share --[[ @as string ]]\n+    path = path:sub(#server_share + 1)\n+  end\n+\n+  -- Device paths\n+  if path:match('^//[?.]/') then\n+    prefix = path:sub(1, 4)\n+    path = path:sub(5)",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1554955084",
            "id": 1554955084,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5crrtM",
            "original_commit_id": "3b0e4654c74acc97b833475abbb87e11255e8608",
            "original_line": 368,
            "original_position": 35,
            "original_start_line": 367,
            "path": "runtime/lua/vim/fs.lua",
            "position": null,
            "pull_request_review_id": 1985065629,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554955084/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-04-07T12:13:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554955084",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1554955510"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554955510"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n      elseif not is_path_absolute then\r\n        -- Reached current directory in relative path, add `..` to the path\r\n        table.insert(new_path_components, component)\r\n      else\r\n```",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-07T12:12:48Z",
            "diff_hunk": "@@ -334,16 +334,123 @@ function M.find(names, opts)\n   return matches\n end\n \n+--- Split a Windows path into a prefix and a body, such that the body can be processed like a POSIX\n+--- path. Path must use forward slashes (/) as the path separator and must not have any extraneous\n+--- slashes.\n+---\n+--- Does not check if the path is a valid Windows path. Invalid paths will give invalid results.\n+---\n+--- Examples:\n+--- - `//./C:/foo/bar` -> `//./C:`, `/foo/bar`\n+--- - `//?/UNC/server/share/foo/bar` -> `//?/UNC/server/share`, `/foo/bar`\n+--- - `C:/foo/bar` -> `C:`, `/foo/bar`\n+--- - `C:foo/bar` -> `C:`, `foo/bar`\n+---\n+--- @param path string Path to split.\n+--- @return string, string : prefix, body\n+local function split_windows_path(path)\n+  local prefix = ''\n+\n+  local function process_unc_path()\n+    local server_share = path:match('[^/]+/[^/]+/')\n+\n+    if server_share == nil then\n+      error('Invalid Windows UNC path')\n+    end\n+\n+    prefix = prefix .. server_share --[[ @as string ]]\n+    path = path:sub(#server_share + 1)\n+  end\n+\n+  -- Device paths\n+  if path:match('^//[?.]/') then\n+    prefix = path:sub(1, 4)\n+    path = path:sub(5)\n+\n+    local device = path:match('[^/]+/')\n+\n+    if device == nil then\n+      error('Invalid Windows device path')\n+    end\n+\n+    prefix = prefix .. device --[[ @as string ]]\n+    path = path:sub(#device + 1)\n+\n+    if device == 'UNC/' then\n+      process_unc_path()\n+    end\n+  -- UNC paths\n+  elseif vim.startswith(path, '//') and not vim.startswith(path, '///') then\n+    prefix = '//'\n+    path = path:sub(3)\n+    process_unc_path()\n+  -- Drive paths\n+  elseif path:match('^%w:') then\n+    prefix = path:sub(1, 2)\n+    path = path:sub(3)\n+  end\n+\n+  -- If there is a slash at the end of the prefix, move it to the start of the body. This is to\n+  -- ensure that the body is treated as an absolute path. For paths like C:foo/bar, there is no\n+  -- slash at the end of the prefix, so it will be treated as a relative path, as it should be.\n+  if prefix:sub(-1) == '/' then\n+    prefix = prefix:sub(1, -2)\n+    path = '/' .. path\n+  end\n+\n+  return prefix, path\n+end\n+\n+--- Resolve `.` and `..` components in a POSIX-style path. This also removes extraneous slashes.\n+--- `..` is not resolved if the path is relative and resolving it requires the path to be absolute.\n+--- If a relative path resolves to the current directory, an empty string is returned.\n+---\n+--- @see M.normalize()\n+--- @param path string Path to resolve.\n+--- @return string Resolved path.\n+local function path_resolve_dot(path)\n+  local is_path_absolute = vim.startswith(path, '/')\n+  -- Split the path into components and process them\n+  local path_components = vim.split(path, '/')\n+  local new_path_components = {}\n+\n+  for _, component in ipairs(path_components) do\n+    if component == '.' or component == '' then -- luacheck: ignore 542\n+      -- Skip `.` components and empty components\n+    elseif component == '..' then\n+      if #new_path_components > 0 and new_path_components[#new_path_components] ~= '..' then\n+        -- For `..`, remove the last component if we're still inside the current directory, except\n+        -- when the last component is `..` itself\n+        table.remove(new_path_components)\n+      elseif is_path_absolute then -- luacheck: ignore 542\n+        -- Reached the root directory in absolute path, do nothing\n+      else\n+        -- Reached current directory in relative path, add `..` to the path\n+        table.insert(new_path_components, component)",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1554955510",
            "id": 1554955510,
            "line": 430,
            "node_id": "PRRC_kwDOAPphoM5crrz2",
            "original_commit_id": "3b0e4654c74acc97b833475abbb87e11255e8608",
            "original_line": 430,
            "original_position": 96,
            "original_start_line": 425,
            "path": "runtime/lua/vim/fs.lua",
            "position": 97,
            "pull_request_review_id": 1985065629,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554955510/reactions"
            },
            "side": "RIGHT",
            "start_line": 426,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-04-07T12:13:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554955510",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1554957243"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554957243"
                }
            },
            "author_association": "MEMBER",
            "body": "I was gonna comment on the same thing, I got confused by this as well.",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-07T12:22:14Z",
            "diff_hunk": "@@ -2970,6 +2979,27 @@ vim.fs.normalize({path}, {opts})                          *vim.fs.normalize()*\n \n         vim.fs.normalize('$XDG_CONFIG_HOME/nvim/init.vim')\n         -- '/Users/jdoe/.config/nvim/init.vim'\n+\n+        vim.fs.normalize('~/src/nvim/api/../tui/./tui.c')\n+        -- '/home/jdoe/src/nvim/tui/tui.c'\n+\n+        vim.fs.normalize('.')\n+        -- '.'\n+\n+        vim.fs.normalize('./foo/bar')\n+        -- 'foo/bar'\n+\n+        vim.fs.normalize('foo/../../../bar')\n+        -- '../../bar'\n+\n+        vim.fs.normalize('/home/jdoe/../../../bar')\n+        -- Error: Invalid path, cannot resolve `..` past root directory",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1554957243",
            "id": 1554957243,
            "in_reply_to_id": 1554954477,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5crsO7",
            "original_commit_id": "3b0e4654c74acc97b833475abbb87e11255e8608",
            "original_line": 2996,
            "original_position": 36,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1985068700,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554957243/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-07T12:22:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554957243",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1554957547"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554957547"
                }
            },
            "author_association": "MEMBER",
            "body": "This is more confusing to read and understand imo, the current code, while suboptimal, conveys the behavior better",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-07T12:23:47Z",
            "diff_hunk": "@@ -334,16 +334,123 @@ function M.find(names, opts)\n   return matches\n end\n \n+--- Split a Windows path into a prefix and a body, such that the body can be processed like a POSIX\n+--- path. Path must use forward slashes (/) as the path separator and must not have any extraneous\n+--- slashes.\n+---\n+--- Does not check if the path is a valid Windows path. Invalid paths will give invalid results.\n+---\n+--- Examples:\n+--- - `//./C:/foo/bar` -> `//./C:`, `/foo/bar`\n+--- - `//?/UNC/server/share/foo/bar` -> `//?/UNC/server/share`, `/foo/bar`\n+--- - `C:/foo/bar` -> `C:`, `/foo/bar`\n+--- - `C:foo/bar` -> `C:`, `foo/bar`\n+---\n+--- @param path string Path to split.\n+--- @return string, string : prefix, body\n+local function split_windows_path(path)\n+  local prefix = ''\n+\n+  local function process_unc_path()\n+    local server_share = path:match('[^/]+/[^/]+/')\n+\n+    if server_share == nil then\n+      error('Invalid Windows UNC path')\n+    end\n+\n+    prefix = prefix .. server_share --[[ @as string ]]\n+    path = path:sub(#server_share + 1)\n+  end\n+\n+  -- Device paths\n+  if path:match('^//[?.]/') then\n+    prefix = path:sub(1, 4)\n+    path = path:sub(5)\n+\n+    local device = path:match('[^/]+/')\n+\n+    if device == nil then\n+      error('Invalid Windows device path')\n+    end\n+\n+    prefix = prefix .. device --[[ @as string ]]\n+    path = path:sub(#device + 1)\n+\n+    if device == 'UNC/' then\n+      process_unc_path()\n+    end\n+  -- UNC paths\n+  elseif vim.startswith(path, '//') and not vim.startswith(path, '///') then\n+    prefix = '//'\n+    path = path:sub(3)\n+    process_unc_path()\n+  -- Drive paths\n+  elseif path:match('^%w:') then\n+    prefix = path:sub(1, 2)\n+    path = path:sub(3)\n+  end\n+\n+  -- If there is a slash at the end of the prefix, move it to the start of the body. This is to\n+  -- ensure that the body is treated as an absolute path. For paths like C:foo/bar, there is no\n+  -- slash at the end of the prefix, so it will be treated as a relative path, as it should be.\n+  if prefix:sub(-1) == '/' then\n+    prefix = prefix:sub(1, -2)\n+    path = '/' .. path\n+  end\n+\n+  return prefix, path\n+end\n+\n+--- Resolve `.` and `..` components in a POSIX-style path. This also removes extraneous slashes.\n+--- `..` is not resolved if the path is relative and resolving it requires the path to be absolute.\n+--- If a relative path resolves to the current directory, an empty string is returned.\n+---\n+--- @see M.normalize()\n+--- @param path string Path to resolve.\n+--- @return string Resolved path.\n+local function path_resolve_dot(path)\n+  local is_path_absolute = vim.startswith(path, '/')\n+  -- Split the path into components and process them\n+  local path_components = vim.split(path, '/')\n+  local new_path_components = {}\n+\n+  for _, component in ipairs(path_components) do\n+    if component == '.' or component == '' then -- luacheck: ignore 542\n+      -- Skip `.` components and empty components\n+    elseif component == '..' then\n+      if #new_path_components > 0 and new_path_components[#new_path_components] ~= '..' then\n+        -- For `..`, remove the last component if we're still inside the current directory, except\n+        -- when the last component is `..` itself\n+        table.remove(new_path_components)\n+      elseif is_path_absolute then -- luacheck: ignore 542\n+        -- Reached the root directory in absolute path, do nothing\n+      else\n+        -- Reached current directory in relative path, add `..` to the path\n+        table.insert(new_path_components, component)",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1554957547",
            "id": 1554957547,
            "in_reply_to_id": 1554955510,
            "line": 430,
            "node_id": "PRRC_kwDOAPphoM5crsTr",
            "original_commit_id": "3b0e4654c74acc97b833475abbb87e11255e8608",
            "original_line": 430,
            "original_position": 96,
            "original_start_line": 425,
            "path": "runtime/lua/vim/fs.lua",
            "position": 97,
            "pull_request_review_id": 1985069088,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554957547/reactions"
            },
            "side": "RIGHT",
            "start_line": 426,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-04-07T12:23:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554957547",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1554959008"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554959008"
                }
            },
            "author_association": "MEMBER",
            "body": "This should be in BREAKING CHANGES above",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-07T12:31:30Z",
            "diff_hunk": "@@ -143,6 +143,9 @@ BREAKING CHANGES IN HEAD                                    *news-breaking-dev*\n The following breaking changes were made during the development cycle to\n unreleased features on Nvim HEAD.\n \n+• |vim.fs.normalize()| now resolves `.` and `..` components in paths:",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1554959008",
            "id": 1554959008,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5crsqg",
            "original_commit_id": "dfa90cf134bb703aaf02eab273d0903f9e564ed2",
            "original_line": 146,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": null,
            "pull_request_review_id": 1985070592,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554959008/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-07T12:31:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554959008",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1554961492"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554961492"
                }
            },
            "author_association": "MEMBER",
            "body": "I think I wrote this, but I'm not sure this is true in hindsight. I don't see a reason why this should be collapsed.\r\n\r\n> A pathname that begins with two successive slashes may be interpreted in an implementation-defined manner, although more than two leading slashes shall be treated as a single slash.\r\n\r\nI still interpret `//` to fall under a pathname that begins with two successive slashes.",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-07T12:45:39Z",
            "diff_hunk": "@@ -308,26 +309,122 @@ describe('vim.fs', function()\n       )\n     end)\n \n-    it('works with UNC paths', function()\n-      eq('//foo', vim.fs.normalize('//foo')) -- UNC path\n-      eq('//foo/bar', vim.fs.normalize('//foo//bar////')) -- UNC path\n-      eq('/foo', vim.fs.normalize('///foo')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('//')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('///')) -- Not a UNC path\n-      eq('/foo/bar', vim.fs.normalize('/foo//bar////')) -- Not a UNC path\n-    end)\n-\n-    if is_os('win') then\n+    if not is_os('win') then\n+      it('preserves leading double slashes in POSIX paths', function()\n+        eq('//foo', vim.fs.normalize('//foo'))\n+        eq('//foo/bar', vim.fs.normalize('//foo//bar////'))\n+        eq('/foo', vim.fs.normalize('///foo'))\n+        eq('/', vim.fs.normalize('//'))",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1554961492",
            "id": 1554961492,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5crtRU",
            "original_commit_id": "c8b2ce0c3da1849a86379d7f98ee8f0e15ee147e",
            "original_line": 317,
            "original_position": 27,
            "original_start_line": null,
            "path": "test/functional/lua/fs_spec.lua",
            "position": null,
            "pull_request_review_id": 1985073122,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554961492/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-07T12:45:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554961492",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1554961673"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554961673"
                }
            },
            "author_association": "MEMBER",
            "body": "Why is a \"not windows\" check needed? Are the following not true for UNC/windows paths as well?",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-07T12:46:48Z",
            "diff_hunk": "@@ -308,26 +309,122 @@ describe('vim.fs', function()\n       )\n     end)\n \n-    it('works with UNC paths', function()\n-      eq('//foo', vim.fs.normalize('//foo')) -- UNC path\n-      eq('//foo/bar', vim.fs.normalize('//foo//bar////')) -- UNC path\n-      eq('/foo', vim.fs.normalize('///foo')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('//')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('///')) -- Not a UNC path\n-      eq('/foo/bar', vim.fs.normalize('/foo//bar////')) -- Not a UNC path\n-    end)\n-\n-    if is_os('win') then\n+    if not is_os('win') then",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1554961673",
            "id": 1554961673,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5crtUJ",
            "original_commit_id": "c8b2ce0c3da1849a86379d7f98ee8f0e15ee147e",
            "original_line": 312,
            "original_position": 22,
            "original_start_line": null,
            "path": "test/functional/lua/fs_spec.lua",
            "position": null,
            "pull_request_review_id": 1985073313,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554961673/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-07T12:46:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554961673",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1554961778"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554961778"
                }
            },
            "author_association": "MEMBER",
            "body": "Ah, it's actually easier to not collapse it, so I'm glad to hear that it's not necessary",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-07T12:47:40Z",
            "diff_hunk": "@@ -308,26 +309,122 @@ describe('vim.fs', function()\n       )\n     end)\n \n-    it('works with UNC paths', function()\n-      eq('//foo', vim.fs.normalize('//foo')) -- UNC path\n-      eq('//foo/bar', vim.fs.normalize('//foo//bar////')) -- UNC path\n-      eq('/foo', vim.fs.normalize('///foo')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('//')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('///')) -- Not a UNC path\n-      eq('/foo/bar', vim.fs.normalize('/foo//bar////')) -- Not a UNC path\n-    end)\n-\n-    if is_os('win') then\n+    if not is_os('win') then\n+      it('preserves leading double slashes in POSIX paths', function()\n+        eq('//foo', vim.fs.normalize('//foo'))\n+        eq('//foo/bar', vim.fs.normalize('//foo//bar////'))\n+        eq('/foo', vim.fs.normalize('///foo'))\n+        eq('/', vim.fs.normalize('//'))",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1554961778",
            "id": 1554961778,
            "in_reply_to_id": 1554961492,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5crtVy",
            "original_commit_id": "c8b2ce0c3da1849a86379d7f98ee8f0e15ee147e",
            "original_line": 317,
            "original_position": 27,
            "original_start_line": null,
            "path": "test/functional/lua/fs_spec.lua",
            "position": null,
            "pull_request_review_id": 1985073457,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554961778/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-07T12:47:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554961778",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1554961886"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554961886"
                }
            },
            "author_association": "MEMBER",
            "body": "Windows and POSIX paths are processed differently, trying to get both Windows and POSIX paths to work simultaneously in both platforms might be a lot more complicated, and the benefit is quite low",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-07T12:48:25Z",
            "diff_hunk": "@@ -308,26 +309,122 @@ describe('vim.fs', function()\n       )\n     end)\n \n-    it('works with UNC paths', function()\n-      eq('//foo', vim.fs.normalize('//foo')) -- UNC path\n-      eq('//foo/bar', vim.fs.normalize('//foo//bar////')) -- UNC path\n-      eq('/foo', vim.fs.normalize('///foo')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('//')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('///')) -- Not a UNC path\n-      eq('/foo/bar', vim.fs.normalize('/foo//bar////')) -- Not a UNC path\n-    end)\n-\n-    if is_os('win') then\n+    if not is_os('win') then",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1554961886",
            "id": 1554961886,
            "in_reply_to_id": 1554961673,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5crtXe",
            "original_commit_id": "c8b2ce0c3da1849a86379d7f98ee8f0e15ee147e",
            "original_line": 312,
            "original_position": 22,
            "original_start_line": null,
            "path": "test/functional/lua/fs_spec.lua",
            "position": null,
            "pull_request_review_id": 1985073580,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554961886/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-07T12:48:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554961886",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1554961943"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554961943"
                }
            },
            "author_association": "MEMBER",
            "body": "Doesn't this test the same thing as `Last slash is not truncated from root drive` test later on?",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-07T12:48:48Z",
            "diff_hunk": "@@ -308,26 +309,122 @@ describe('vim.fs', function()\n       )\n     end)\n \n-    it('works with UNC paths', function()\n-      eq('//foo', vim.fs.normalize('//foo')) -- UNC path\n-      eq('//foo/bar', vim.fs.normalize('//foo//bar////')) -- UNC path\n-      eq('/foo', vim.fs.normalize('///foo')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('//')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('///')) -- Not a UNC path\n-      eq('/foo/bar', vim.fs.normalize('/foo//bar////')) -- Not a UNC path\n-    end)\n-\n-    if is_os('win') then\n+    if not is_os('win') then\n+      it('preserves leading double slashes in POSIX paths', function()\n+        eq('//foo', vim.fs.normalize('//foo'))\n+        eq('//foo/bar', vim.fs.normalize('//foo//bar////'))\n+        eq('/foo', vim.fs.normalize('///foo'))\n+        eq('/', vim.fs.normalize('//'))\n+        eq('/', vim.fs.normalize('///'))\n+        eq('/foo/bar', vim.fs.normalize('/foo//bar////'))\n+      end)\n+      it('allows backslashes on unix-based os', function()\n+        eq('/home/user/hello\\\\world', vim.fs.normalize('/home/user/hello\\\\world'))\n+      end)\n+    else\n+      it('preserves / after drive letters', function()\n+        eq('C:/', vim.fs.normalize([[C:\\]]))\n+      end)",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1554961943",
            "id": 1554961943,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5crtYX",
            "original_commit_id": "c8b2ce0c3da1849a86379d7f98ee8f0e15ee147e",
            "original_line": 327,
            "original_position": 37,
            "original_start_line": 325,
            "path": "test/functional/lua/fs_spec.lua",
            "position": null,
            "pull_request_review_id": 1985073643,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554961943/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-04-07T12:48:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554961943",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1554962826"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554962826"
                }
            },
            "author_association": "MEMBER",
            "body": "OK, fair enough.",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-07T12:53:58Z",
            "diff_hunk": "@@ -308,26 +309,122 @@ describe('vim.fs', function()\n       )\n     end)\n \n-    it('works with UNC paths', function()\n-      eq('//foo', vim.fs.normalize('//foo')) -- UNC path\n-      eq('//foo/bar', vim.fs.normalize('//foo//bar////')) -- UNC path\n-      eq('/foo', vim.fs.normalize('///foo')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('//')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('///')) -- Not a UNC path\n-      eq('/foo/bar', vim.fs.normalize('/foo//bar////')) -- Not a UNC path\n-    end)\n-\n-    if is_os('win') then\n+    if not is_os('win') then",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1554962826",
            "id": 1554962826,
            "in_reply_to_id": 1554961673,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5crtmK",
            "original_commit_id": "c8b2ce0c3da1849a86379d7f98ee8f0e15ee147e",
            "original_line": 312,
            "original_position": 22,
            "original_start_line": null,
            "path": "test/functional/lua/fs_spec.lua",
            "position": null,
            "pull_request_review_id": 1985074605,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554962826/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-07T12:53:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554962826",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1554962828"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554962828"
                }
            },
            "author_association": "MEMBER",
            "body": "Good catch, removing that test",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-07T12:53:59Z",
            "diff_hunk": "@@ -308,26 +309,122 @@ describe('vim.fs', function()\n       )\n     end)\n \n-    it('works with UNC paths', function()\n-      eq('//foo', vim.fs.normalize('//foo')) -- UNC path\n-      eq('//foo/bar', vim.fs.normalize('//foo//bar////')) -- UNC path\n-      eq('/foo', vim.fs.normalize('///foo')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('//')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('///')) -- Not a UNC path\n-      eq('/foo/bar', vim.fs.normalize('/foo//bar////')) -- Not a UNC path\n-    end)\n-\n-    if is_os('win') then\n+    if not is_os('win') then\n+      it('preserves leading double slashes in POSIX paths', function()\n+        eq('//foo', vim.fs.normalize('//foo'))\n+        eq('//foo/bar', vim.fs.normalize('//foo//bar////'))\n+        eq('/foo', vim.fs.normalize('///foo'))\n+        eq('/', vim.fs.normalize('//'))\n+        eq('/', vim.fs.normalize('///'))\n+        eq('/foo/bar', vim.fs.normalize('/foo//bar////'))\n+      end)\n+      it('allows backslashes on unix-based os', function()\n+        eq('/home/user/hello\\\\world', vim.fs.normalize('/home/user/hello\\\\world'))\n+      end)\n+    else\n+      it('preserves / after drive letters', function()\n+        eq('C:/', vim.fs.normalize([[C:\\]]))\n+      end)",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1554962828",
            "id": 1554962828,
            "in_reply_to_id": 1554961943,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5crtmM",
            "original_commit_id": "c8b2ce0c3da1849a86379d7f98ee8f0e15ee147e",
            "original_line": 327,
            "original_position": 37,
            "original_start_line": 325,
            "path": "test/functional/lua/fs_spec.lua",
            "position": null,
            "pull_request_review_id": 1985074609,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554962828/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-04-07T12:54:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554962828",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1554962908"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554962908"
                }
            },
            "author_association": "MEMBER",
            "body": "But I could be wrong. I think @justinmk suggested this behavior in the first place, but I am not sure why.",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-07T12:54:35Z",
            "diff_hunk": "@@ -308,26 +309,122 @@ describe('vim.fs', function()\n       )\n     end)\n \n-    it('works with UNC paths', function()\n-      eq('//foo', vim.fs.normalize('//foo')) -- UNC path\n-      eq('//foo/bar', vim.fs.normalize('//foo//bar////')) -- UNC path\n-      eq('/foo', vim.fs.normalize('///foo')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('//')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('///')) -- Not a UNC path\n-      eq('/foo/bar', vim.fs.normalize('/foo//bar////')) -- Not a UNC path\n-    end)\n-\n-    if is_os('win') then\n+    if not is_os('win') then\n+      it('preserves leading double slashes in POSIX paths', function()\n+        eq('//foo', vim.fs.normalize('//foo'))\n+        eq('//foo/bar', vim.fs.normalize('//foo//bar////'))\n+        eq('/foo', vim.fs.normalize('///foo'))\n+        eq('/', vim.fs.normalize('//'))",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1554962908",
            "id": 1554962908,
            "in_reply_to_id": 1554961492,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5crtnc",
            "original_commit_id": "c8b2ce0c3da1849a86379d7f98ee8f0e15ee147e",
            "original_line": 317,
            "original_position": 27,
            "original_start_line": null,
            "path": "test/functional/lua/fs_spec.lua",
            "position": null,
            "pull_request_review_id": 1985074699,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554962908/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-07T12:54:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554962908",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1554963834"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554963834"
                }
            },
            "author_association": "MEMBER",
            "body": "Looking at https://stackoverflow.com/questions/20690828/what-does-double-slash-in-cd-mean-in-linux, specifically this comment:\r\n\r\n> The // does not mean nothing. It's defined by POSIX such that it may be interpreted in an implementation-defined manner, which means the system is free to do with it what it will. For example, on Cygwin, cd // followed by ls eventually returns ls: reading directory '.': Permission denied. whereas cd / followed by ls returns a listing of the root directory. (Cygwin uses a root of // to identify //hostname/path.)\r\n\r\nSeems like `//` by itself is special as well",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-07T12:59:36Z",
            "diff_hunk": "@@ -308,26 +309,122 @@ describe('vim.fs', function()\n       )\n     end)\n \n-    it('works with UNC paths', function()\n-      eq('//foo', vim.fs.normalize('//foo')) -- UNC path\n-      eq('//foo/bar', vim.fs.normalize('//foo//bar////')) -- UNC path\n-      eq('/foo', vim.fs.normalize('///foo')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('//')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('///')) -- Not a UNC path\n-      eq('/foo/bar', vim.fs.normalize('/foo//bar////')) -- Not a UNC path\n-    end)\n-\n-    if is_os('win') then\n+    if not is_os('win') then\n+      it('preserves leading double slashes in POSIX paths', function()\n+        eq('//foo', vim.fs.normalize('//foo'))\n+        eq('//foo/bar', vim.fs.normalize('//foo//bar////'))\n+        eq('/foo', vim.fs.normalize('///foo'))\n+        eq('/', vim.fs.normalize('//'))",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1554963834",
            "id": 1554963834,
            "in_reply_to_id": 1554961492,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5crt16",
            "original_commit_id": "c8b2ce0c3da1849a86379d7f98ee8f0e15ee147e",
            "original_line": 317,
            "original_position": 27,
            "original_start_line": null,
            "path": "test/functional/lua/fs_spec.lua",
            "position": null,
            "pull_request_review_id": 1985075671,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554963834/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-07T12:59:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554963834",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1554964546"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554964546"
                }
            },
            "author_association": "MEMBER",
            "body": "> OK, fair enough.\r\n\r\nWe could however choose to add an option that allows picking the path type, if this is ever needed. Since processing the path is easy if we know what type of path it is, what's hard is being able to process either type of path simultaneously without knowing which one it is",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-07T13:04:28Z",
            "diff_hunk": "@@ -308,26 +309,122 @@ describe('vim.fs', function()\n       )\n     end)\n \n-    it('works with UNC paths', function()\n-      eq('//foo', vim.fs.normalize('//foo')) -- UNC path\n-      eq('//foo/bar', vim.fs.normalize('//foo//bar////')) -- UNC path\n-      eq('/foo', vim.fs.normalize('///foo')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('//')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('///')) -- Not a UNC path\n-      eq('/foo/bar', vim.fs.normalize('/foo//bar////')) -- Not a UNC path\n-    end)\n-\n-    if is_os('win') then\n+    if not is_os('win') then",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1554964546",
            "id": 1554964546,
            "in_reply_to_id": 1554961673,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5cruBC",
            "original_commit_id": "c8b2ce0c3da1849a86379d7f98ee8f0e15ee147e",
            "original_line": 312,
            "original_position": 22,
            "original_start_line": null,
            "path": "test/functional/lua/fs_spec.lua",
            "position": null,
            "pull_request_review_id": 1985076496,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554964546/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-07T13:04:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554964546",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1554994970"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554994970"
                }
            },
            "author_association": "MEMBER",
            "body": "- explicit input/output would be less ambiguous, less verbose, and more intuitive.\r\n- using \"\" instead of backticks is more readable for this case.\r\n\r\n```suggestion\r\n    result in an absolute path. \r\n    • \".\" as the only part in a relative path:\r\n        • \".\" => \".\"\r\n        • \"././\" => \"././\"\r\n    • \"..\" when it leads outside the current directory\r\n        • \"../../foo\" => \"../foo\"\r\n    • \"..\" in the root directory returns the root directory.\r\n        • \"../\" => \"/\"\r\n```",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-07T15:15:56Z",
            "diff_hunk": "@@ -2957,7 +2957,16 @@ vim.fs.joinpath({...})                                     *vim.fs.joinpath()*\n vim.fs.normalize({path}, {opts})                          *vim.fs.normalize()*\n     Normalize a path to a standard format. A tilde (~) character at the\n     beginning of the path is expanded to the user's home directory and\n-    environment variables are also expanded.\n+    environment variables are also expanded. `.` and `..` components are also\n+    resolved, except when the path is relative and trying to resolve it would\n+    result in an absolute path. For example: the following will not get\n+    resolved:\n+    • `.` as the only part in a relative path (e.g., `.`, `././`).\n+    • `..` in a relative path when it leads outside the current directory\n+      (e.g., `../../foo`).\n+\n+    NOTE: In the root directory, resolving `..` will return the root directory\n+    itself.",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1554994970",
            "id": 1554994970,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5cr1ca",
            "original_commit_id": "f199dc6a7c59e82fea3b4e43c49afff4a6e558b5",
            "original_line": 2969,
            "original_position": 14,
            "original_start_line": 2962,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1985116291,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554994970/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-04-07T15:15:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554994970",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1554995110"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554995110"
                }
            },
            "author_association": "MEMBER",
            "body": "That's way better, thanks a lot!",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-07T15:16:46Z",
            "diff_hunk": "@@ -2957,7 +2957,16 @@ vim.fs.joinpath({...})                                     *vim.fs.joinpath()*\n vim.fs.normalize({path}, {opts})                          *vim.fs.normalize()*\n     Normalize a path to a standard format. A tilde (~) character at the\n     beginning of the path is expanded to the user's home directory and\n-    environment variables are also expanded.\n+    environment variables are also expanded. `.` and `..` components are also\n+    resolved, except when the path is relative and trying to resolve it would\n+    result in an absolute path. For example: the following will not get\n+    resolved:\n+    • `.` as the only part in a relative path (e.g., `.`, `././`).\n+    • `..` in a relative path when it leads outside the current directory\n+      (e.g., `../../foo`).\n+\n+    NOTE: In the root directory, resolving `..` will return the root directory\n+    itself.",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1554995110",
            "id": 1554995110,
            "in_reply_to_id": 1554994970,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5cr1em",
            "original_commit_id": "f199dc6a7c59e82fea3b4e43c49afff4a6e558b5",
            "original_line": 2969,
            "original_position": 14,
            "original_start_line": 2962,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1985116428,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554995110/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-04-07T15:16:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554995110",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1554995315"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554995315"
                }
            },
            "author_association": "MEMBER",
            "body": "off topic, somewhat surprised that `~` is expanded without `expand_env=true` (which perhaps should be named `expand`)",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-07T15:17:41Z",
            "diff_hunk": "@@ -2970,6 +2979,30 @@ vim.fs.normalize({path}, {opts})                          *vim.fs.normalize()*\n \n         vim.fs.normalize('$XDG_CONFIG_HOME/nvim/init.vim')\n         -- '/Users/jdoe/.config/nvim/init.vim'\n+\n+        vim.fs.normalize('~/src/nvim/api/../tui/./tui.c')\n+        -- '/home/jdoe/src/nvim/tui/tui.c'",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1554995315",
            "id": 1554995315,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5cr1hz",
            "original_commit_id": "f199dc6a7c59e82fea3b4e43c49afff4a6e558b5",
            "original_line": 2985,
            "original_position": 24,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1985116569,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554995315/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-07T15:17:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554995315",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1554995528"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554995528"
                }
            },
            "author_association": "MEMBER",
            "body": "use `[[...]]`, the escaping is just distracting from the purpose of this example.",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-07T15:19:17Z",
            "diff_hunk": "@@ -2970,6 +2979,30 @@ vim.fs.normalize({path}, {opts})                          *vim.fs.normalize()*\n \n         vim.fs.normalize('$XDG_CONFIG_HOME/nvim/init.vim')\n         -- '/Users/jdoe/.config/nvim/init.vim'\n+\n+        vim.fs.normalize('~/src/nvim/api/../tui/./tui.c')\n+        -- '/home/jdoe/src/nvim/tui/tui.c'\n+\n+        vim.fs.normalize('.')\n+        -- '.'\n+\n+        vim.fs.normalize('./foo/bar')\n+        -- 'foo/bar'\n+\n+        vim.fs.normalize('foo/../../../bar')\n+        -- '../../bar'\n+\n+        vim.fs.normalize('/home/jdoe/../../../bar')\n+        -- /bar\n+\n+        vim.fs.normalize('C:foo/../../baz')\n+        -- 'C:../baz'\n+\n+        vim.fs.normalize('C:/foo/../../baz')\n+        -- C:/baz\n+\n+        vim.fs.normalize('\\\\\\\\?\\\\UNC\\\\server\\\\share\\\\foo\\\\..\\\\..\\\\..\\\\bar')",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1554995528",
            "id": 1554995528,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5cr1lI",
            "original_commit_id": "f199dc6a7c59e82fea3b4e43c49afff4a6e558b5",
            "original_line": 3005,
            "original_position": 44,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1985116812,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554995528/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-07T15:19:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554995528",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1554996088"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554996088"
                }
            },
            "author_association": "MEMBER",
            "body": "this is a very noisy way to show input/output examples.\r\n\r\nusage examples are intended to help with the mechanics of using an interface. for input/output we can just have a table that shows input/output\r\n\r\n```\r\n\"./foo/bar\"               => \"foo/bar\"\r\n\"foo/../../../bar\"        => \"../../bar\"\r\n\"/home/jdoe/../../../bar\" => \"/bar\"\r\n\"C:foo/../../baz\"         => \"C:../baz\"\r\n\"C:/foo/../../baz\"        => \"C:/baz\"\r\n```",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-07T15:22:50Z",
            "diff_hunk": "@@ -2970,6 +2979,30 @@ vim.fs.normalize({path}, {opts})                          *vim.fs.normalize()*\n \n         vim.fs.normalize('$XDG_CONFIG_HOME/nvim/init.vim')\n         -- '/Users/jdoe/.config/nvim/init.vim'\n+\n+        vim.fs.normalize('~/src/nvim/api/../tui/./tui.c')\n+        -- '/home/jdoe/src/nvim/tui/tui.c'\n+\n+        vim.fs.normalize('.')\n+        -- '.'\n+\n+        vim.fs.normalize('./foo/bar')\n+        -- 'foo/bar'\n+\n+        vim.fs.normalize('foo/../../../bar')\n+        -- '../../bar'\n+\n+        vim.fs.normalize('/home/jdoe/../../../bar')\n+        -- /bar\n+\n+        vim.fs.normalize('C:foo/../../baz')\n+        -- 'C:../baz'\n+\n+        vim.fs.normalize('C:/foo/../../baz')\n+        -- C:/baz",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1554996088",
            "id": 1554996088,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5cr1t4",
            "original_commit_id": "f199dc6a7c59e82fea3b4e43c49afff4a6e558b5",
            "original_line": 3003,
            "original_position": 42,
            "original_start_line": 2989,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1985117368,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554996088/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-04-07T15:22:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554996088",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1554996506"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554996506"
                }
            },
            "author_association": "MEMBER",
            "body": "Fwiw, `~` is not expanded in Python's `os.path` either",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-07T15:25:32Z",
            "diff_hunk": "@@ -2970,6 +2979,30 @@ vim.fs.normalize({path}, {opts})                          *vim.fs.normalize()*\n \n         vim.fs.normalize('$XDG_CONFIG_HOME/nvim/init.vim')\n         -- '/Users/jdoe/.config/nvim/init.vim'\n+\n+        vim.fs.normalize('~/src/nvim/api/../tui/./tui.c')\n+        -- '/home/jdoe/src/nvim/tui/tui.c'",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1554996506",
            "id": 1554996506,
            "in_reply_to_id": 1554995315,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5cr10a",
            "original_commit_id": "f199dc6a7c59e82fea3b4e43c49afff4a6e558b5",
            "original_line": 2985,
            "original_position": 24,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1985117755,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554996506/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-07T15:25:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554996506",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1554996705"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554996705"
                }
            },
            "author_association": "MEMBER",
            "body": "Not really; that's the core part of \"normalization\". `expand_env` is about `$HOME` and friends (only), and it makes sense that these are independent choices.",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-07T15:26:29Z",
            "diff_hunk": "@@ -2970,6 +2979,30 @@ vim.fs.normalize({path}, {opts})                          *vim.fs.normalize()*\n \n         vim.fs.normalize('$XDG_CONFIG_HOME/nvim/init.vim')\n         -- '/Users/jdoe/.config/nvim/init.vim'\n+\n+        vim.fs.normalize('~/src/nvim/api/../tui/./tui.c')\n+        -- '/home/jdoe/src/nvim/tui/tui.c'",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1554996705",
            "id": 1554996705,
            "in_reply_to_id": 1554995315,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5cr13h",
            "original_commit_id": "f199dc6a7c59e82fea3b4e43c49afff4a6e558b5",
            "original_line": 2985,
            "original_position": 24,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1985117898,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554996705/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-07T15:26:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554996705",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1554997469"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554997469"
                }
            },
            "author_association": "MEMBER",
            "body": "Any reason we shouldn't have a `unc:boolean` or `win:boolean` option? That allows (1) tests can run in all environments, and (2) more flexibility for plugins that might need to work with windows/unc paths in a non-windows context. ",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-07T15:30:55Z",
            "diff_hunk": "@@ -308,26 +309,119 @@ describe('vim.fs', function()\n       )\n     end)\n \n-    it('works with UNC paths', function()\n-      eq('//foo', vim.fs.normalize('//foo')) -- UNC path\n-      eq('//foo/bar', vim.fs.normalize('//foo//bar////')) -- UNC path\n-      eq('/foo', vim.fs.normalize('///foo')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('//')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('///')) -- Not a UNC path\n-      eq('/foo/bar', vim.fs.normalize('/foo//bar////')) -- Not a UNC path\n-    end)\n-\n-    if is_os('win') then\n-      it('Last slash is not truncated from root drive', function()\n-        eq('C:/', vim.fs.normalize('C:/'))\n+    if not is_os('win') then\n+      it('preserves leading double slashes in POSIX paths', function()\n+        eq('//foo', vim.fs.normalize('//foo'))\n+        eq('//foo/bar', vim.fs.normalize('//foo//bar////'))\n+        eq('/foo', vim.fs.normalize('///foo'))\n+        eq('//', vim.fs.normalize('//'))\n+        eq('/', vim.fs.normalize('///'))\n+        eq('/foo/bar', vim.fs.normalize('/foo//bar////'))\n       end)\n-      it('converts backward slashes', function()\n-        eq('C:/Users/jdoe', vim.fs.normalize('C:\\\\Users\\\\jdoe'))\n-      end)\n-    else\n       it('allows backslashes on unix-based os', function()\n         eq('/home/user/hello\\\\world', vim.fs.normalize('/home/user/hello\\\\world'))\n       end)\n+    else\n+      it('preserves / after drive letters', function()\n+        eq('C:/', vim.fs.normalize([[C:\\]]))\n+      end)\n+      it('works with UNC and DOS device paths', function()\n+        eq('//server/share/foo/bar', vim.fs.normalize([[\\\\server\\share\\foo\\bar]]))\n+        eq('//system07/C$/', vim.fs.normalize([[\\\\system07\\C$\\]]))\n+        eq('//./C:/foo/bar', vim.fs.normalize([[\\\\.\\C:\\foo\\bar]]))\n+        eq('//?/C:/foo/bar', vim.fs.normalize([[\\\\?\\C:\\foo\\bar]]))\n+        eq('//?/UNC/server/share/foo/bar', vim.fs.normalize([[\\\\?\\UNC\\server\\share\\foo\\bar]]))\n+        eq('//./BootPartition/foo/bar', vim.fs.normalize([[\\\\.\\BootPartition\\foo\\bar]]))\n+        eq(\n+          '//./Volume{12345678-1234-1234-1234-1234567890AB}/foo/bar',\n+          vim.fs.normalize([[\\\\.\\Volume{12345678-1234-1234-1234-1234567890AB}\\foo\\bar]])\n+        )\n+      end)\n+      it('errors on invalid UNC and DOS device paths', function()\n+        eq(\n+          '.../fs.lua:0: Invalid Windows UNC path',\n+          pcall_err(vim.fs.normalize, [[\\\\server\\share]])\n+        )\n+        eq('.../fs.lua:0: Invalid Windows UNC path', pcall_err(vim.fs.normalize, [[\\\\server\\]]))\n+        eq(\n+          '.../fs.lua:0: Invalid Windows UNC path',\n+          pcall_err(vim.fs.normalize, [[\\\\.\\UNC\\server\\share]])\n+        )\n+        eq(\n+          '.../fs.lua:0: Invalid Windows UNC path',\n+          pcall_err(vim.fs.normalize, [[\\\\?\\UNC\\server\\]])\n+        )\n+        eq('.../fs.lua:0: Invalid Windows UNC path', pcall_err(vim.fs.normalize, [[\\\\.]]))\n+        eq('.../fs.lua:0: Invalid Windows device path', pcall_err(vim.fs.normalize, [[\\\\.\\]]))\n+        eq('.../fs.lua:0: Invalid Windows device path', pcall_err(vim.fs.normalize, [[\\\\.\\foo]]))\n+        eq(\n+          '.../fs.lua:0: Invalid Windows device path',\n+          pcall_err(vim.fs.normalize, [[\\\\.\\BootPartition]])\n+        )\n+      end)\n+      it('converts backward slashes', function()\n+        eq('C:/Users/jdoe', vim.fs.normalize([[C:\\Users\\jdoe]]))\n+      end)\n     end\n+\n+    describe('. and .. component resolving', function()\n+      it('works', function()\n+        if is_os('win') then\n+          eq('C:/Users', vim.fs.normalize([[C:\\Users\\jdoe\\Downloads\\.\\..\\..\\]]))\n+          eq('C:/Users/jdoe', vim.fs.normalize([[C:\\Users\\jdoe\\Downloads\\.\\..\\.\\.\\]]))\n+          eq('C:/', vim.fs.normalize('C:/Users/jdoe/Downloads/./../../../'))\n+          eq('C:foo', vim.fs.normalize([[C:foo\\bar\\.\\..\\.]]))\n+        else\n+          eq('/home', vim.fs.normalize('/home/jdoe/Downloads/./../..'))\n+          eq('/home/jdoe', vim.fs.normalize('/home/jdoe/Downloads/./../././'))\n+          eq('/', vim.fs.normalize('/home/jdoe/Downloads/./../../../'))\n+        end\n+\n+        eq('foo/bar/baz', vim.fs.normalize('foo/bar/foobar/../baz/./'))\n+        eq('foo/bar', vim.fs.normalize('foo/bar/foobar/../baz/./../../bar/./.'))\n+      end)\n+\n+      it('works when relative path reaches current directory', function()\n+        if is_os('win') then\n+          eq('C:', vim.fs.normalize('C:foo/bar/../../.'))\n+        end\n+\n+        eq('.', vim.fs.normalize('.'))\n+        eq('.', vim.fs.normalize('././././'))\n+        eq('.', vim.fs.normalize('foo/bar/../../.'))\n+      end)\n+\n+      it('works when relative path goes outside current directory', function()\n+        eq('../../foo/bar', vim.fs.normalize('../../foo/bar'))\n+        eq('../foo', vim.fs.normalize('foo/bar/../../../foo'))\n+\n+        if is_os('win') then\n+          eq('C:../foo', vim.fs.normalize('C:../foo'))\n+          eq('C:../../foo/bar', vim.fs.normalize('C:foo/../../../foo/bar'))\n+        end\n+      end)\n+\n+      it('.. in root directory resolves to itself', function()\n+        if is_os('win') then",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1554997469",
            "id": 1554997469,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5cr2Dd",
            "original_commit_id": "d8e56cc3596716751a75a9f55f2630c9af0fea10",
            "original_line": 405,
            "original_position": 121,
            "original_start_line": null,
            "path": "test/functional/lua/fs_spec.lua",
            "position": null,
            "pull_request_review_id": 1985118465,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554997469/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-07T15:31:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554997469",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1554997641"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554997641"
                }
            },
            "author_association": "MEMBER",
            "body": "My initial gut reaction was the same as Justin's (aka that `~` shouldn't be expanded if `expand_env` is false) although I can't with certainty say which is better/more consistent. Just wanted to share my 2 cents.",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-07T15:31:58Z",
            "diff_hunk": "@@ -2970,6 +2979,30 @@ vim.fs.normalize({path}, {opts})                          *vim.fs.normalize()*\n \n         vim.fs.normalize('$XDG_CONFIG_HOME/nvim/init.vim')\n         -- '/Users/jdoe/.config/nvim/init.vim'\n+\n+        vim.fs.normalize('~/src/nvim/api/../tui/./tui.c')\n+        -- '/home/jdoe/src/nvim/tui/tui.c'",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1554997641",
            "id": 1554997641,
            "in_reply_to_id": 1554995315,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5cr2GJ",
            "original_commit_id": "f199dc6a7c59e82fea3b4e43c49afff4a6e558b5",
            "original_line": 2985,
            "original_position": 24,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1985118692,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554997641/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-07T15:31:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554997641",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1554997960"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554997960"
                }
            },
            "author_association": "MEMBER",
            "body": "We could add an option like `path_style`, in case someone wants to process a path style that's different from their OS. I do think that should be a separate PR though.",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-07T15:34:22Z",
            "diff_hunk": "@@ -308,26 +309,119 @@ describe('vim.fs', function()\n       )\n     end)\n \n-    it('works with UNC paths', function()\n-      eq('//foo', vim.fs.normalize('//foo')) -- UNC path\n-      eq('//foo/bar', vim.fs.normalize('//foo//bar////')) -- UNC path\n-      eq('/foo', vim.fs.normalize('///foo')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('//')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('///')) -- Not a UNC path\n-      eq('/foo/bar', vim.fs.normalize('/foo//bar////')) -- Not a UNC path\n-    end)\n-\n-    if is_os('win') then\n-      it('Last slash is not truncated from root drive', function()\n-        eq('C:/', vim.fs.normalize('C:/'))\n+    if not is_os('win') then\n+      it('preserves leading double slashes in POSIX paths', function()\n+        eq('//foo', vim.fs.normalize('//foo'))\n+        eq('//foo/bar', vim.fs.normalize('//foo//bar////'))\n+        eq('/foo', vim.fs.normalize('///foo'))\n+        eq('//', vim.fs.normalize('//'))\n+        eq('/', vim.fs.normalize('///'))\n+        eq('/foo/bar', vim.fs.normalize('/foo//bar////'))\n       end)\n-      it('converts backward slashes', function()\n-        eq('C:/Users/jdoe', vim.fs.normalize('C:\\\\Users\\\\jdoe'))\n-      end)\n-    else\n       it('allows backslashes on unix-based os', function()\n         eq('/home/user/hello\\\\world', vim.fs.normalize('/home/user/hello\\\\world'))\n       end)\n+    else\n+      it('preserves / after drive letters', function()\n+        eq('C:/', vim.fs.normalize([[C:\\]]))\n+      end)\n+      it('works with UNC and DOS device paths', function()\n+        eq('//server/share/foo/bar', vim.fs.normalize([[\\\\server\\share\\foo\\bar]]))\n+        eq('//system07/C$/', vim.fs.normalize([[\\\\system07\\C$\\]]))\n+        eq('//./C:/foo/bar', vim.fs.normalize([[\\\\.\\C:\\foo\\bar]]))\n+        eq('//?/C:/foo/bar', vim.fs.normalize([[\\\\?\\C:\\foo\\bar]]))\n+        eq('//?/UNC/server/share/foo/bar', vim.fs.normalize([[\\\\?\\UNC\\server\\share\\foo\\bar]]))\n+        eq('//./BootPartition/foo/bar', vim.fs.normalize([[\\\\.\\BootPartition\\foo\\bar]]))\n+        eq(\n+          '//./Volume{12345678-1234-1234-1234-1234567890AB}/foo/bar',\n+          vim.fs.normalize([[\\\\.\\Volume{12345678-1234-1234-1234-1234567890AB}\\foo\\bar]])\n+        )\n+      end)\n+      it('errors on invalid UNC and DOS device paths', function()\n+        eq(\n+          '.../fs.lua:0: Invalid Windows UNC path',\n+          pcall_err(vim.fs.normalize, [[\\\\server\\share]])\n+        )\n+        eq('.../fs.lua:0: Invalid Windows UNC path', pcall_err(vim.fs.normalize, [[\\\\server\\]]))\n+        eq(\n+          '.../fs.lua:0: Invalid Windows UNC path',\n+          pcall_err(vim.fs.normalize, [[\\\\.\\UNC\\server\\share]])\n+        )\n+        eq(\n+          '.../fs.lua:0: Invalid Windows UNC path',\n+          pcall_err(vim.fs.normalize, [[\\\\?\\UNC\\server\\]])\n+        )\n+        eq('.../fs.lua:0: Invalid Windows UNC path', pcall_err(vim.fs.normalize, [[\\\\.]]))\n+        eq('.../fs.lua:0: Invalid Windows device path', pcall_err(vim.fs.normalize, [[\\\\.\\]]))\n+        eq('.../fs.lua:0: Invalid Windows device path', pcall_err(vim.fs.normalize, [[\\\\.\\foo]]))\n+        eq(\n+          '.../fs.lua:0: Invalid Windows device path',\n+          pcall_err(vim.fs.normalize, [[\\\\.\\BootPartition]])\n+        )\n+      end)\n+      it('converts backward slashes', function()\n+        eq('C:/Users/jdoe', vim.fs.normalize([[C:\\Users\\jdoe]]))\n+      end)\n     end\n+\n+    describe('. and .. component resolving', function()\n+      it('works', function()\n+        if is_os('win') then\n+          eq('C:/Users', vim.fs.normalize([[C:\\Users\\jdoe\\Downloads\\.\\..\\..\\]]))\n+          eq('C:/Users/jdoe', vim.fs.normalize([[C:\\Users\\jdoe\\Downloads\\.\\..\\.\\.\\]]))\n+          eq('C:/', vim.fs.normalize('C:/Users/jdoe/Downloads/./../../../'))\n+          eq('C:foo', vim.fs.normalize([[C:foo\\bar\\.\\..\\.]]))\n+        else\n+          eq('/home', vim.fs.normalize('/home/jdoe/Downloads/./../..'))\n+          eq('/home/jdoe', vim.fs.normalize('/home/jdoe/Downloads/./../././'))\n+          eq('/', vim.fs.normalize('/home/jdoe/Downloads/./../../../'))\n+        end\n+\n+        eq('foo/bar/baz', vim.fs.normalize('foo/bar/foobar/../baz/./'))\n+        eq('foo/bar', vim.fs.normalize('foo/bar/foobar/../baz/./../../bar/./.'))\n+      end)\n+\n+      it('works when relative path reaches current directory', function()\n+        if is_os('win') then\n+          eq('C:', vim.fs.normalize('C:foo/bar/../../.'))\n+        end\n+\n+        eq('.', vim.fs.normalize('.'))\n+        eq('.', vim.fs.normalize('././././'))\n+        eq('.', vim.fs.normalize('foo/bar/../../.'))\n+      end)\n+\n+      it('works when relative path goes outside current directory', function()\n+        eq('../../foo/bar', vim.fs.normalize('../../foo/bar'))\n+        eq('../foo', vim.fs.normalize('foo/bar/../../../foo'))\n+\n+        if is_os('win') then\n+          eq('C:../foo', vim.fs.normalize('C:../foo'))\n+          eq('C:../../foo/bar', vim.fs.normalize('C:foo/../../../foo/bar'))\n+        end\n+      end)\n+\n+      it('.. in root directory resolves to itself', function()\n+        if is_os('win') then",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1554997960",
            "id": 1554997960,
            "in_reply_to_id": 1554997469,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5cr2LI",
            "original_commit_id": "d8e56cc3596716751a75a9f55f2630c9af0fea10",
            "original_line": 405,
            "original_position": 121,
            "original_start_line": null,
            "path": "test/functional/lua/fs_spec.lua",
            "position": null,
            "pull_request_review_id": 1985119062,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554997960/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-07T15:34:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554997960",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1554998096"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554998096"
                }
            },
            "author_association": "MEMBER",
            "body": "I'm not sure how to make the `=>`s align in the Vimdocs, I aligned them in the Lua docs but the vimdocs generator removes the extra spaces",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-07T15:35:13Z",
            "diff_hunk": "@@ -2970,6 +2979,30 @@ vim.fs.normalize({path}, {opts})                          *vim.fs.normalize()*\n \n         vim.fs.normalize('$XDG_CONFIG_HOME/nvim/init.vim')\n         -- '/Users/jdoe/.config/nvim/init.vim'\n+\n+        vim.fs.normalize('~/src/nvim/api/../tui/./tui.c')\n+        -- '/home/jdoe/src/nvim/tui/tui.c'\n+\n+        vim.fs.normalize('.')\n+        -- '.'\n+\n+        vim.fs.normalize('./foo/bar')\n+        -- 'foo/bar'\n+\n+        vim.fs.normalize('foo/../../../bar')\n+        -- '../../bar'\n+\n+        vim.fs.normalize('/home/jdoe/../../../bar')\n+        -- /bar\n+\n+        vim.fs.normalize('C:foo/../../baz')\n+        -- 'C:../baz'\n+\n+        vim.fs.normalize('C:/foo/../../baz')\n+        -- C:/baz",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1554998096",
            "id": 1554998096,
            "in_reply_to_id": 1554996088,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5cr2NQ",
            "original_commit_id": "f199dc6a7c59e82fea3b4e43c49afff4a6e558b5",
            "original_line": 3003,
            "original_position": 42,
            "original_start_line": 2989,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1985119170,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554998096/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-04-07T15:35:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554998096",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1554998148"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554998148"
                }
            },
            "author_association": "MEMBER",
            "body": "> `expand_env` is about `$HOME` and friends (only)\r\n\r\nThat's an artificial/accidental constraint that we can choose to change. Or we could add a separate `expand` option in the worst case.\r\n\r\n> that's the core part of \"normalization\"\r\n\r\nNo, I've made this clear in multiple discussions: normalization means \"the result is deterministic\". That is separate from \"the result is different depending on the context\".\r\n\r\nWith the current behavior, the caller has to care that `~/` will be expanded even if they don't want that. For example, saving a path to a config file you probably don't want `~/` to be expanded.",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-07T15:35:36Z",
            "diff_hunk": "@@ -2970,6 +2979,30 @@ vim.fs.normalize({path}, {opts})                          *vim.fs.normalize()*\n \n         vim.fs.normalize('$XDG_CONFIG_HOME/nvim/init.vim')\n         -- '/Users/jdoe/.config/nvim/init.vim'\n+\n+        vim.fs.normalize('~/src/nvim/api/../tui/./tui.c')\n+        -- '/home/jdoe/src/nvim/tui/tui.c'",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1554998148",
            "id": 1554998148,
            "in_reply_to_id": 1554995315,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5cr2OE",
            "original_commit_id": "f199dc6a7c59e82fea3b4e43c49afff4a6e558b5",
            "original_line": 2985,
            "original_position": 24,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1985119227,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554998148/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-07T15:35:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554998148",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1554998247"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554998247"
                }
            },
            "author_association": "MEMBER",
            "body": "Isn't what you're talking about less about unc and more about operating system?",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-07T15:36:22Z",
            "diff_hunk": "@@ -308,26 +309,119 @@ describe('vim.fs', function()\n       )\n     end)\n \n-    it('works with UNC paths', function()\n-      eq('//foo', vim.fs.normalize('//foo')) -- UNC path\n-      eq('//foo/bar', vim.fs.normalize('//foo//bar////')) -- UNC path\n-      eq('/foo', vim.fs.normalize('///foo')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('//')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('///')) -- Not a UNC path\n-      eq('/foo/bar', vim.fs.normalize('/foo//bar////')) -- Not a UNC path\n-    end)\n-\n-    if is_os('win') then\n-      it('Last slash is not truncated from root drive', function()\n-        eq('C:/', vim.fs.normalize('C:/'))\n+    if not is_os('win') then\n+      it('preserves leading double slashes in POSIX paths', function()\n+        eq('//foo', vim.fs.normalize('//foo'))\n+        eq('//foo/bar', vim.fs.normalize('//foo//bar////'))\n+        eq('/foo', vim.fs.normalize('///foo'))\n+        eq('//', vim.fs.normalize('//'))\n+        eq('/', vim.fs.normalize('///'))\n+        eq('/foo/bar', vim.fs.normalize('/foo//bar////'))\n       end)\n-      it('converts backward slashes', function()\n-        eq('C:/Users/jdoe', vim.fs.normalize('C:\\\\Users\\\\jdoe'))\n-      end)\n-    else\n       it('allows backslashes on unix-based os', function()\n         eq('/home/user/hello\\\\world', vim.fs.normalize('/home/user/hello\\\\world'))\n       end)\n+    else\n+      it('preserves / after drive letters', function()\n+        eq('C:/', vim.fs.normalize([[C:\\]]))\n+      end)\n+      it('works with UNC and DOS device paths', function()\n+        eq('//server/share/foo/bar', vim.fs.normalize([[\\\\server\\share\\foo\\bar]]))\n+        eq('//system07/C$/', vim.fs.normalize([[\\\\system07\\C$\\]]))\n+        eq('//./C:/foo/bar', vim.fs.normalize([[\\\\.\\C:\\foo\\bar]]))\n+        eq('//?/C:/foo/bar', vim.fs.normalize([[\\\\?\\C:\\foo\\bar]]))\n+        eq('//?/UNC/server/share/foo/bar', vim.fs.normalize([[\\\\?\\UNC\\server\\share\\foo\\bar]]))\n+        eq('//./BootPartition/foo/bar', vim.fs.normalize([[\\\\.\\BootPartition\\foo\\bar]]))\n+        eq(\n+          '//./Volume{12345678-1234-1234-1234-1234567890AB}/foo/bar',\n+          vim.fs.normalize([[\\\\.\\Volume{12345678-1234-1234-1234-1234567890AB}\\foo\\bar]])\n+        )\n+      end)\n+      it('errors on invalid UNC and DOS device paths', function()\n+        eq(\n+          '.../fs.lua:0: Invalid Windows UNC path',\n+          pcall_err(vim.fs.normalize, [[\\\\server\\share]])\n+        )\n+        eq('.../fs.lua:0: Invalid Windows UNC path', pcall_err(vim.fs.normalize, [[\\\\server\\]]))\n+        eq(\n+          '.../fs.lua:0: Invalid Windows UNC path',\n+          pcall_err(vim.fs.normalize, [[\\\\.\\UNC\\server\\share]])\n+        )\n+        eq(\n+          '.../fs.lua:0: Invalid Windows UNC path',\n+          pcall_err(vim.fs.normalize, [[\\\\?\\UNC\\server\\]])\n+        )\n+        eq('.../fs.lua:0: Invalid Windows UNC path', pcall_err(vim.fs.normalize, [[\\\\.]]))\n+        eq('.../fs.lua:0: Invalid Windows device path', pcall_err(vim.fs.normalize, [[\\\\.\\]]))\n+        eq('.../fs.lua:0: Invalid Windows device path', pcall_err(vim.fs.normalize, [[\\\\.\\foo]]))\n+        eq(\n+          '.../fs.lua:0: Invalid Windows device path',\n+          pcall_err(vim.fs.normalize, [[\\\\.\\BootPartition]])\n+        )\n+      end)\n+      it('converts backward slashes', function()\n+        eq('C:/Users/jdoe', vim.fs.normalize([[C:\\Users\\jdoe]]))\n+      end)\n     end\n+\n+    describe('. and .. component resolving', function()\n+      it('works', function()\n+        if is_os('win') then\n+          eq('C:/Users', vim.fs.normalize([[C:\\Users\\jdoe\\Downloads\\.\\..\\..\\]]))\n+          eq('C:/Users/jdoe', vim.fs.normalize([[C:\\Users\\jdoe\\Downloads\\.\\..\\.\\.\\]]))\n+          eq('C:/', vim.fs.normalize('C:/Users/jdoe/Downloads/./../../../'))\n+          eq('C:foo', vim.fs.normalize([[C:foo\\bar\\.\\..\\.]]))\n+        else\n+          eq('/home', vim.fs.normalize('/home/jdoe/Downloads/./../..'))\n+          eq('/home/jdoe', vim.fs.normalize('/home/jdoe/Downloads/./../././'))\n+          eq('/', vim.fs.normalize('/home/jdoe/Downloads/./../../../'))\n+        end\n+\n+        eq('foo/bar/baz', vim.fs.normalize('foo/bar/foobar/../baz/./'))\n+        eq('foo/bar', vim.fs.normalize('foo/bar/foobar/../baz/./../../bar/./.'))\n+      end)\n+\n+      it('works when relative path reaches current directory', function()\n+        if is_os('win') then\n+          eq('C:', vim.fs.normalize('C:foo/bar/../../.'))\n+        end\n+\n+        eq('.', vim.fs.normalize('.'))\n+        eq('.', vim.fs.normalize('././././'))\n+        eq('.', vim.fs.normalize('foo/bar/../../.'))\n+      end)\n+\n+      it('works when relative path goes outside current directory', function()\n+        eq('../../foo/bar', vim.fs.normalize('../../foo/bar'))\n+        eq('../foo', vim.fs.normalize('foo/bar/../../../foo'))\n+\n+        if is_os('win') then\n+          eq('C:../foo', vim.fs.normalize('C:../foo'))\n+          eq('C:../../foo/bar', vim.fs.normalize('C:foo/../../../foo/bar'))\n+        end\n+      end)\n+\n+      it('.. in root directory resolves to itself', function()\n+        if is_os('win') then",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1554998247",
            "id": 1554998247,
            "in_reply_to_id": 1554997469,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5cr2Pn",
            "original_commit_id": "d8e56cc3596716751a75a9f55f2630c9af0fea10",
            "original_line": 405,
            "original_position": 121,
            "original_start_line": null,
            "path": "test/functional/lua/fs_spec.lua",
            "position": null,
            "pull_request_review_id": 1985119321,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554998247/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-07T15:36:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554998247",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1554998465"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554998465"
                }
            },
            "author_association": "MEMBER",
            "body": "> Isn't what you're talking about less about unc and more about operating system?\r\n\r\nUNC paths are only processed in Windows",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-07T15:38:01Z",
            "diff_hunk": "@@ -308,26 +309,119 @@ describe('vim.fs', function()\n       )\n     end)\n \n-    it('works with UNC paths', function()\n-      eq('//foo', vim.fs.normalize('//foo')) -- UNC path\n-      eq('//foo/bar', vim.fs.normalize('//foo//bar////')) -- UNC path\n-      eq('/foo', vim.fs.normalize('///foo')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('//')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('///')) -- Not a UNC path\n-      eq('/foo/bar', vim.fs.normalize('/foo//bar////')) -- Not a UNC path\n-    end)\n-\n-    if is_os('win') then\n-      it('Last slash is not truncated from root drive', function()\n-        eq('C:/', vim.fs.normalize('C:/'))\n+    if not is_os('win') then\n+      it('preserves leading double slashes in POSIX paths', function()\n+        eq('//foo', vim.fs.normalize('//foo'))\n+        eq('//foo/bar', vim.fs.normalize('//foo//bar////'))\n+        eq('/foo', vim.fs.normalize('///foo'))\n+        eq('//', vim.fs.normalize('//'))\n+        eq('/', vim.fs.normalize('///'))\n+        eq('/foo/bar', vim.fs.normalize('/foo//bar////'))\n       end)\n-      it('converts backward slashes', function()\n-        eq('C:/Users/jdoe', vim.fs.normalize('C:\\\\Users\\\\jdoe'))\n-      end)\n-    else\n       it('allows backslashes on unix-based os', function()\n         eq('/home/user/hello\\\\world', vim.fs.normalize('/home/user/hello\\\\world'))\n       end)\n+    else\n+      it('preserves / after drive letters', function()\n+        eq('C:/', vim.fs.normalize([[C:\\]]))\n+      end)\n+      it('works with UNC and DOS device paths', function()\n+        eq('//server/share/foo/bar', vim.fs.normalize([[\\\\server\\share\\foo\\bar]]))\n+        eq('//system07/C$/', vim.fs.normalize([[\\\\system07\\C$\\]]))\n+        eq('//./C:/foo/bar', vim.fs.normalize([[\\\\.\\C:\\foo\\bar]]))\n+        eq('//?/C:/foo/bar', vim.fs.normalize([[\\\\?\\C:\\foo\\bar]]))\n+        eq('//?/UNC/server/share/foo/bar', vim.fs.normalize([[\\\\?\\UNC\\server\\share\\foo\\bar]]))\n+        eq('//./BootPartition/foo/bar', vim.fs.normalize([[\\\\.\\BootPartition\\foo\\bar]]))\n+        eq(\n+          '//./Volume{12345678-1234-1234-1234-1234567890AB}/foo/bar',\n+          vim.fs.normalize([[\\\\.\\Volume{12345678-1234-1234-1234-1234567890AB}\\foo\\bar]])\n+        )\n+      end)\n+      it('errors on invalid UNC and DOS device paths', function()\n+        eq(\n+          '.../fs.lua:0: Invalid Windows UNC path',\n+          pcall_err(vim.fs.normalize, [[\\\\server\\share]])\n+        )\n+        eq('.../fs.lua:0: Invalid Windows UNC path', pcall_err(vim.fs.normalize, [[\\\\server\\]]))\n+        eq(\n+          '.../fs.lua:0: Invalid Windows UNC path',\n+          pcall_err(vim.fs.normalize, [[\\\\.\\UNC\\server\\share]])\n+        )\n+        eq(\n+          '.../fs.lua:0: Invalid Windows UNC path',\n+          pcall_err(vim.fs.normalize, [[\\\\?\\UNC\\server\\]])\n+        )\n+        eq('.../fs.lua:0: Invalid Windows UNC path', pcall_err(vim.fs.normalize, [[\\\\.]]))\n+        eq('.../fs.lua:0: Invalid Windows device path', pcall_err(vim.fs.normalize, [[\\\\.\\]]))\n+        eq('.../fs.lua:0: Invalid Windows device path', pcall_err(vim.fs.normalize, [[\\\\.\\foo]]))\n+        eq(\n+          '.../fs.lua:0: Invalid Windows device path',\n+          pcall_err(vim.fs.normalize, [[\\\\.\\BootPartition]])\n+        )\n+      end)\n+      it('converts backward slashes', function()\n+        eq('C:/Users/jdoe', vim.fs.normalize([[C:\\Users\\jdoe]]))\n+      end)\n     end\n+\n+    describe('. and .. component resolving', function()\n+      it('works', function()\n+        if is_os('win') then\n+          eq('C:/Users', vim.fs.normalize([[C:\\Users\\jdoe\\Downloads\\.\\..\\..\\]]))\n+          eq('C:/Users/jdoe', vim.fs.normalize([[C:\\Users\\jdoe\\Downloads\\.\\..\\.\\.\\]]))\n+          eq('C:/', vim.fs.normalize('C:/Users/jdoe/Downloads/./../../../'))\n+          eq('C:foo', vim.fs.normalize([[C:foo\\bar\\.\\..\\.]]))\n+        else\n+          eq('/home', vim.fs.normalize('/home/jdoe/Downloads/./../..'))\n+          eq('/home/jdoe', vim.fs.normalize('/home/jdoe/Downloads/./../././'))\n+          eq('/', vim.fs.normalize('/home/jdoe/Downloads/./../../../'))\n+        end\n+\n+        eq('foo/bar/baz', vim.fs.normalize('foo/bar/foobar/../baz/./'))\n+        eq('foo/bar', vim.fs.normalize('foo/bar/foobar/../baz/./../../bar/./.'))\n+      end)\n+\n+      it('works when relative path reaches current directory', function()\n+        if is_os('win') then\n+          eq('C:', vim.fs.normalize('C:foo/bar/../../.'))\n+        end\n+\n+        eq('.', vim.fs.normalize('.'))\n+        eq('.', vim.fs.normalize('././././'))\n+        eq('.', vim.fs.normalize('foo/bar/../../.'))\n+      end)\n+\n+      it('works when relative path goes outside current directory', function()\n+        eq('../../foo/bar', vim.fs.normalize('../../foo/bar'))\n+        eq('../foo', vim.fs.normalize('foo/bar/../../../foo'))\n+\n+        if is_os('win') then\n+          eq('C:../foo', vim.fs.normalize('C:../foo'))\n+          eq('C:../../foo/bar', vim.fs.normalize('C:foo/../../../foo/bar'))\n+        end\n+      end)\n+\n+      it('.. in root directory resolves to itself', function()\n+        if is_os('win') then",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1554998465",
            "id": 1554998465,
            "in_reply_to_id": 1554997469,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5cr2TB",
            "original_commit_id": "d8e56cc3596716751a75a9f55f2630c9af0fea10",
            "original_line": 405,
            "original_position": 121,
            "original_start_line": null,
            "path": "test/functional/lua/fs_spec.lua",
            "position": null,
            "pull_request_review_id": 1985119524,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554998465/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-07T15:38:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554998465",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1554999436"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554999436"
                }
            },
            "author_association": "MEMBER",
            "body": "I know. I'm saying I think a naming the option `unc` is wack since what Justin is suggesting (normalizing paths for another OS) can be relevant even without UNC, e.g. `C:/Users/../jdoe/.`.",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-07T15:43:34Z",
            "diff_hunk": "@@ -308,26 +309,119 @@ describe('vim.fs', function()\n       )\n     end)\n \n-    it('works with UNC paths', function()\n-      eq('//foo', vim.fs.normalize('//foo')) -- UNC path\n-      eq('//foo/bar', vim.fs.normalize('//foo//bar////')) -- UNC path\n-      eq('/foo', vim.fs.normalize('///foo')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('//')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('///')) -- Not a UNC path\n-      eq('/foo/bar', vim.fs.normalize('/foo//bar////')) -- Not a UNC path\n-    end)\n-\n-    if is_os('win') then\n-      it('Last slash is not truncated from root drive', function()\n-        eq('C:/', vim.fs.normalize('C:/'))\n+    if not is_os('win') then\n+      it('preserves leading double slashes in POSIX paths', function()\n+        eq('//foo', vim.fs.normalize('//foo'))\n+        eq('//foo/bar', vim.fs.normalize('//foo//bar////'))\n+        eq('/foo', vim.fs.normalize('///foo'))\n+        eq('//', vim.fs.normalize('//'))\n+        eq('/', vim.fs.normalize('///'))\n+        eq('/foo/bar', vim.fs.normalize('/foo//bar////'))\n       end)\n-      it('converts backward slashes', function()\n-        eq('C:/Users/jdoe', vim.fs.normalize('C:\\\\Users\\\\jdoe'))\n-      end)\n-    else\n       it('allows backslashes on unix-based os', function()\n         eq('/home/user/hello\\\\world', vim.fs.normalize('/home/user/hello\\\\world'))\n       end)\n+    else\n+      it('preserves / after drive letters', function()\n+        eq('C:/', vim.fs.normalize([[C:\\]]))\n+      end)\n+      it('works with UNC and DOS device paths', function()\n+        eq('//server/share/foo/bar', vim.fs.normalize([[\\\\server\\share\\foo\\bar]]))\n+        eq('//system07/C$/', vim.fs.normalize([[\\\\system07\\C$\\]]))\n+        eq('//./C:/foo/bar', vim.fs.normalize([[\\\\.\\C:\\foo\\bar]]))\n+        eq('//?/C:/foo/bar', vim.fs.normalize([[\\\\?\\C:\\foo\\bar]]))\n+        eq('//?/UNC/server/share/foo/bar', vim.fs.normalize([[\\\\?\\UNC\\server\\share\\foo\\bar]]))\n+        eq('//./BootPartition/foo/bar', vim.fs.normalize([[\\\\.\\BootPartition\\foo\\bar]]))\n+        eq(\n+          '//./Volume{12345678-1234-1234-1234-1234567890AB}/foo/bar',\n+          vim.fs.normalize([[\\\\.\\Volume{12345678-1234-1234-1234-1234567890AB}\\foo\\bar]])\n+        )\n+      end)\n+      it('errors on invalid UNC and DOS device paths', function()\n+        eq(\n+          '.../fs.lua:0: Invalid Windows UNC path',\n+          pcall_err(vim.fs.normalize, [[\\\\server\\share]])\n+        )\n+        eq('.../fs.lua:0: Invalid Windows UNC path', pcall_err(vim.fs.normalize, [[\\\\server\\]]))\n+        eq(\n+          '.../fs.lua:0: Invalid Windows UNC path',\n+          pcall_err(vim.fs.normalize, [[\\\\.\\UNC\\server\\share]])\n+        )\n+        eq(\n+          '.../fs.lua:0: Invalid Windows UNC path',\n+          pcall_err(vim.fs.normalize, [[\\\\?\\UNC\\server\\]])\n+        )\n+        eq('.../fs.lua:0: Invalid Windows UNC path', pcall_err(vim.fs.normalize, [[\\\\.]]))\n+        eq('.../fs.lua:0: Invalid Windows device path', pcall_err(vim.fs.normalize, [[\\\\.\\]]))\n+        eq('.../fs.lua:0: Invalid Windows device path', pcall_err(vim.fs.normalize, [[\\\\.\\foo]]))\n+        eq(\n+          '.../fs.lua:0: Invalid Windows device path',\n+          pcall_err(vim.fs.normalize, [[\\\\.\\BootPartition]])\n+        )\n+      end)\n+      it('converts backward slashes', function()\n+        eq('C:/Users/jdoe', vim.fs.normalize([[C:\\Users\\jdoe]]))\n+      end)\n     end\n+\n+    describe('. and .. component resolving', function()\n+      it('works', function()\n+        if is_os('win') then\n+          eq('C:/Users', vim.fs.normalize([[C:\\Users\\jdoe\\Downloads\\.\\..\\..\\]]))\n+          eq('C:/Users/jdoe', vim.fs.normalize([[C:\\Users\\jdoe\\Downloads\\.\\..\\.\\.\\]]))\n+          eq('C:/', vim.fs.normalize('C:/Users/jdoe/Downloads/./../../../'))\n+          eq('C:foo', vim.fs.normalize([[C:foo\\bar\\.\\..\\.]]))\n+        else\n+          eq('/home', vim.fs.normalize('/home/jdoe/Downloads/./../..'))\n+          eq('/home/jdoe', vim.fs.normalize('/home/jdoe/Downloads/./../././'))\n+          eq('/', vim.fs.normalize('/home/jdoe/Downloads/./../../../'))\n+        end\n+\n+        eq('foo/bar/baz', vim.fs.normalize('foo/bar/foobar/../baz/./'))\n+        eq('foo/bar', vim.fs.normalize('foo/bar/foobar/../baz/./../../bar/./.'))\n+      end)\n+\n+      it('works when relative path reaches current directory', function()\n+        if is_os('win') then\n+          eq('C:', vim.fs.normalize('C:foo/bar/../../.'))\n+        end\n+\n+        eq('.', vim.fs.normalize('.'))\n+        eq('.', vim.fs.normalize('././././'))\n+        eq('.', vim.fs.normalize('foo/bar/../../.'))\n+      end)\n+\n+      it('works when relative path goes outside current directory', function()\n+        eq('../../foo/bar', vim.fs.normalize('../../foo/bar'))\n+        eq('../foo', vim.fs.normalize('foo/bar/../../../foo'))\n+\n+        if is_os('win') then\n+          eq('C:../foo', vim.fs.normalize('C:../foo'))\n+          eq('C:../../foo/bar', vim.fs.normalize('C:foo/../../../foo/bar'))\n+        end\n+      end)\n+\n+      it('.. in root directory resolves to itself', function()\n+        if is_os('win') then",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1554999436",
            "id": 1554999436,
            "in_reply_to_id": 1554997469,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5cr2iM",
            "original_commit_id": "d8e56cc3596716751a75a9f55f2630c9af0fea10",
            "original_line": 405,
            "original_position": 121,
            "original_start_line": null,
            "path": "test/functional/lua/fs_spec.lua",
            "position": null,
            "pull_request_review_id": 1985120377,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554999436/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-07T15:43:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554999436",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1554999576"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554999576"
                }
            },
            "author_association": "MEMBER",
            "body": "> I know. I'm saying I think a naming the option `unc` is wack since what Justin is suggesting (normalizing paths for another OS) can be relevant even without UNC, e.g. `C:/Users/../jdoe/.`.\r\n\r\nYes, that's why I never suggested naming it UNC. I suggested a name like `path_style`, which would be like an enum that can be either `posix` or `win`",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-07T15:44:44Z",
            "diff_hunk": "@@ -308,26 +309,119 @@ describe('vim.fs', function()\n       )\n     end)\n \n-    it('works with UNC paths', function()\n-      eq('//foo', vim.fs.normalize('//foo')) -- UNC path\n-      eq('//foo/bar', vim.fs.normalize('//foo//bar////')) -- UNC path\n-      eq('/foo', vim.fs.normalize('///foo')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('//')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('///')) -- Not a UNC path\n-      eq('/foo/bar', vim.fs.normalize('/foo//bar////')) -- Not a UNC path\n-    end)\n-\n-    if is_os('win') then\n-      it('Last slash is not truncated from root drive', function()\n-        eq('C:/', vim.fs.normalize('C:/'))\n+    if not is_os('win') then\n+      it('preserves leading double slashes in POSIX paths', function()\n+        eq('//foo', vim.fs.normalize('//foo'))\n+        eq('//foo/bar', vim.fs.normalize('//foo//bar////'))\n+        eq('/foo', vim.fs.normalize('///foo'))\n+        eq('//', vim.fs.normalize('//'))\n+        eq('/', vim.fs.normalize('///'))\n+        eq('/foo/bar', vim.fs.normalize('/foo//bar////'))\n       end)\n-      it('converts backward slashes', function()\n-        eq('C:/Users/jdoe', vim.fs.normalize('C:\\\\Users\\\\jdoe'))\n-      end)\n-    else\n       it('allows backslashes on unix-based os', function()\n         eq('/home/user/hello\\\\world', vim.fs.normalize('/home/user/hello\\\\world'))\n       end)\n+    else\n+      it('preserves / after drive letters', function()\n+        eq('C:/', vim.fs.normalize([[C:\\]]))\n+      end)\n+      it('works with UNC and DOS device paths', function()\n+        eq('//server/share/foo/bar', vim.fs.normalize([[\\\\server\\share\\foo\\bar]]))\n+        eq('//system07/C$/', vim.fs.normalize([[\\\\system07\\C$\\]]))\n+        eq('//./C:/foo/bar', vim.fs.normalize([[\\\\.\\C:\\foo\\bar]]))\n+        eq('//?/C:/foo/bar', vim.fs.normalize([[\\\\?\\C:\\foo\\bar]]))\n+        eq('//?/UNC/server/share/foo/bar', vim.fs.normalize([[\\\\?\\UNC\\server\\share\\foo\\bar]]))\n+        eq('//./BootPartition/foo/bar', vim.fs.normalize([[\\\\.\\BootPartition\\foo\\bar]]))\n+        eq(\n+          '//./Volume{12345678-1234-1234-1234-1234567890AB}/foo/bar',\n+          vim.fs.normalize([[\\\\.\\Volume{12345678-1234-1234-1234-1234567890AB}\\foo\\bar]])\n+        )\n+      end)\n+      it('errors on invalid UNC and DOS device paths', function()\n+        eq(\n+          '.../fs.lua:0: Invalid Windows UNC path',\n+          pcall_err(vim.fs.normalize, [[\\\\server\\share]])\n+        )\n+        eq('.../fs.lua:0: Invalid Windows UNC path', pcall_err(vim.fs.normalize, [[\\\\server\\]]))\n+        eq(\n+          '.../fs.lua:0: Invalid Windows UNC path',\n+          pcall_err(vim.fs.normalize, [[\\\\.\\UNC\\server\\share]])\n+        )\n+        eq(\n+          '.../fs.lua:0: Invalid Windows UNC path',\n+          pcall_err(vim.fs.normalize, [[\\\\?\\UNC\\server\\]])\n+        )\n+        eq('.../fs.lua:0: Invalid Windows UNC path', pcall_err(vim.fs.normalize, [[\\\\.]]))\n+        eq('.../fs.lua:0: Invalid Windows device path', pcall_err(vim.fs.normalize, [[\\\\.\\]]))\n+        eq('.../fs.lua:0: Invalid Windows device path', pcall_err(vim.fs.normalize, [[\\\\.\\foo]]))\n+        eq(\n+          '.../fs.lua:0: Invalid Windows device path',\n+          pcall_err(vim.fs.normalize, [[\\\\.\\BootPartition]])\n+        )\n+      end)\n+      it('converts backward slashes', function()\n+        eq('C:/Users/jdoe', vim.fs.normalize([[C:\\Users\\jdoe]]))\n+      end)\n     end\n+\n+    describe('. and .. component resolving', function()\n+      it('works', function()\n+        if is_os('win') then\n+          eq('C:/Users', vim.fs.normalize([[C:\\Users\\jdoe\\Downloads\\.\\..\\..\\]]))\n+          eq('C:/Users/jdoe', vim.fs.normalize([[C:\\Users\\jdoe\\Downloads\\.\\..\\.\\.\\]]))\n+          eq('C:/', vim.fs.normalize('C:/Users/jdoe/Downloads/./../../../'))\n+          eq('C:foo', vim.fs.normalize([[C:foo\\bar\\.\\..\\.]]))\n+        else\n+          eq('/home', vim.fs.normalize('/home/jdoe/Downloads/./../..'))\n+          eq('/home/jdoe', vim.fs.normalize('/home/jdoe/Downloads/./../././'))\n+          eq('/', vim.fs.normalize('/home/jdoe/Downloads/./../../../'))\n+        end\n+\n+        eq('foo/bar/baz', vim.fs.normalize('foo/bar/foobar/../baz/./'))\n+        eq('foo/bar', vim.fs.normalize('foo/bar/foobar/../baz/./../../bar/./.'))\n+      end)\n+\n+      it('works when relative path reaches current directory', function()\n+        if is_os('win') then\n+          eq('C:', vim.fs.normalize('C:foo/bar/../../.'))\n+        end\n+\n+        eq('.', vim.fs.normalize('.'))\n+        eq('.', vim.fs.normalize('././././'))\n+        eq('.', vim.fs.normalize('foo/bar/../../.'))\n+      end)\n+\n+      it('works when relative path goes outside current directory', function()\n+        eq('../../foo/bar', vim.fs.normalize('../../foo/bar'))\n+        eq('../foo', vim.fs.normalize('foo/bar/../../../foo'))\n+\n+        if is_os('win') then\n+          eq('C:../foo', vim.fs.normalize('C:../foo'))\n+          eq('C:../../foo/bar', vim.fs.normalize('C:foo/../../../foo/bar'))\n+        end\n+      end)\n+\n+      it('.. in root directory resolves to itself', function()\n+        if is_os('win') then",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1554999576",
            "id": 1554999576,
            "in_reply_to_id": 1554997469,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5cr2kY",
            "original_commit_id": "d8e56cc3596716751a75a9f55f2630c9af0fea10",
            "original_line": 405,
            "original_position": 121,
            "original_start_line": null,
            "path": "test/functional/lua/fs_spec.lua",
            "position": null,
            "pull_request_review_id": 1985120524,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554999576/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-07T15:44:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1554999576",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1555012824"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1555012824"
                }
            },
            "author_association": "MEMBER",
            "body": "use a codeblock",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-07T17:11:29Z",
            "diff_hunk": "@@ -2970,6 +2979,30 @@ vim.fs.normalize({path}, {opts})                          *vim.fs.normalize()*\n \n         vim.fs.normalize('$XDG_CONFIG_HOME/nvim/init.vim')\n         -- '/Users/jdoe/.config/nvim/init.vim'\n+\n+        vim.fs.normalize('~/src/nvim/api/../tui/./tui.c')\n+        -- '/home/jdoe/src/nvim/tui/tui.c'\n+\n+        vim.fs.normalize('.')\n+        -- '.'\n+\n+        vim.fs.normalize('./foo/bar')\n+        -- 'foo/bar'\n+\n+        vim.fs.normalize('foo/../../../bar')\n+        -- '../../bar'\n+\n+        vim.fs.normalize('/home/jdoe/../../../bar')\n+        -- /bar\n+\n+        vim.fs.normalize('C:foo/../../baz')\n+        -- 'C:../baz'\n+\n+        vim.fs.normalize('C:/foo/../../baz')\n+        -- C:/baz",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1555012824",
            "id": 1555012824,
            "in_reply_to_id": 1554996088,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5cr5zY",
            "original_commit_id": "f199dc6a7c59e82fea3b4e43c49afff4a6e558b5",
            "original_line": 3003,
            "original_position": 42,
            "original_start_line": 2989,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1985134259,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1555012824/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-04-07T17:11:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1555012824",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1557489518"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1557489518"
                }
            },
            "author_association": "MEMBER",
            "body": "Will make this in a separate PR",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-09T11:33:50Z",
            "diff_hunk": "@@ -308,26 +309,119 @@ describe('vim.fs', function()\n       )\n     end)\n \n-    it('works with UNC paths', function()\n-      eq('//foo', vim.fs.normalize('//foo')) -- UNC path\n-      eq('//foo/bar', vim.fs.normalize('//foo//bar////')) -- UNC path\n-      eq('/foo', vim.fs.normalize('///foo')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('//')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('///')) -- Not a UNC path\n-      eq('/foo/bar', vim.fs.normalize('/foo//bar////')) -- Not a UNC path\n-    end)\n-\n-    if is_os('win') then\n-      it('Last slash is not truncated from root drive', function()\n-        eq('C:/', vim.fs.normalize('C:/'))\n+    if not is_os('win') then\n+      it('preserves leading double slashes in POSIX paths', function()\n+        eq('//foo', vim.fs.normalize('//foo'))\n+        eq('//foo/bar', vim.fs.normalize('//foo//bar////'))\n+        eq('/foo', vim.fs.normalize('///foo'))\n+        eq('//', vim.fs.normalize('//'))\n+        eq('/', vim.fs.normalize('///'))\n+        eq('/foo/bar', vim.fs.normalize('/foo//bar////'))\n       end)\n-      it('converts backward slashes', function()\n-        eq('C:/Users/jdoe', vim.fs.normalize('C:\\\\Users\\\\jdoe'))\n-      end)\n-    else\n       it('allows backslashes on unix-based os', function()\n         eq('/home/user/hello\\\\world', vim.fs.normalize('/home/user/hello\\\\world'))\n       end)\n+    else\n+      it('preserves / after drive letters', function()\n+        eq('C:/', vim.fs.normalize([[C:\\]]))\n+      end)\n+      it('works with UNC and DOS device paths', function()\n+        eq('//server/share/foo/bar', vim.fs.normalize([[\\\\server\\share\\foo\\bar]]))\n+        eq('//system07/C$/', vim.fs.normalize([[\\\\system07\\C$\\]]))\n+        eq('//./C:/foo/bar', vim.fs.normalize([[\\\\.\\C:\\foo\\bar]]))\n+        eq('//?/C:/foo/bar', vim.fs.normalize([[\\\\?\\C:\\foo\\bar]]))\n+        eq('//?/UNC/server/share/foo/bar', vim.fs.normalize([[\\\\?\\UNC\\server\\share\\foo\\bar]]))\n+        eq('//./BootPartition/foo/bar', vim.fs.normalize([[\\\\.\\BootPartition\\foo\\bar]]))\n+        eq(\n+          '//./Volume{12345678-1234-1234-1234-1234567890AB}/foo/bar',\n+          vim.fs.normalize([[\\\\.\\Volume{12345678-1234-1234-1234-1234567890AB}\\foo\\bar]])\n+        )\n+      end)\n+      it('errors on invalid UNC and DOS device paths', function()\n+        eq(\n+          '.../fs.lua:0: Invalid Windows UNC path',\n+          pcall_err(vim.fs.normalize, [[\\\\server\\share]])\n+        )\n+        eq('.../fs.lua:0: Invalid Windows UNC path', pcall_err(vim.fs.normalize, [[\\\\server\\]]))\n+        eq(\n+          '.../fs.lua:0: Invalid Windows UNC path',\n+          pcall_err(vim.fs.normalize, [[\\\\.\\UNC\\server\\share]])\n+        )\n+        eq(\n+          '.../fs.lua:0: Invalid Windows UNC path',\n+          pcall_err(vim.fs.normalize, [[\\\\?\\UNC\\server\\]])\n+        )\n+        eq('.../fs.lua:0: Invalid Windows UNC path', pcall_err(vim.fs.normalize, [[\\\\.]]))\n+        eq('.../fs.lua:0: Invalid Windows device path', pcall_err(vim.fs.normalize, [[\\\\.\\]]))\n+        eq('.../fs.lua:0: Invalid Windows device path', pcall_err(vim.fs.normalize, [[\\\\.\\foo]]))\n+        eq(\n+          '.../fs.lua:0: Invalid Windows device path',\n+          pcall_err(vim.fs.normalize, [[\\\\.\\BootPartition]])\n+        )\n+      end)\n+      it('converts backward slashes', function()\n+        eq('C:/Users/jdoe', vim.fs.normalize([[C:\\Users\\jdoe]]))\n+      end)\n     end\n+\n+    describe('. and .. component resolving', function()\n+      it('works', function()\n+        if is_os('win') then\n+          eq('C:/Users', vim.fs.normalize([[C:\\Users\\jdoe\\Downloads\\.\\..\\..\\]]))\n+          eq('C:/Users/jdoe', vim.fs.normalize([[C:\\Users\\jdoe\\Downloads\\.\\..\\.\\.\\]]))\n+          eq('C:/', vim.fs.normalize('C:/Users/jdoe/Downloads/./../../../'))\n+          eq('C:foo', vim.fs.normalize([[C:foo\\bar\\.\\..\\.]]))\n+        else\n+          eq('/home', vim.fs.normalize('/home/jdoe/Downloads/./../..'))\n+          eq('/home/jdoe', vim.fs.normalize('/home/jdoe/Downloads/./../././'))\n+          eq('/', vim.fs.normalize('/home/jdoe/Downloads/./../../../'))\n+        end\n+\n+        eq('foo/bar/baz', vim.fs.normalize('foo/bar/foobar/../baz/./'))\n+        eq('foo/bar', vim.fs.normalize('foo/bar/foobar/../baz/./../../bar/./.'))\n+      end)\n+\n+      it('works when relative path reaches current directory', function()\n+        if is_os('win') then\n+          eq('C:', vim.fs.normalize('C:foo/bar/../../.'))\n+        end\n+\n+        eq('.', vim.fs.normalize('.'))\n+        eq('.', vim.fs.normalize('././././'))\n+        eq('.', vim.fs.normalize('foo/bar/../../.'))\n+      end)\n+\n+      it('works when relative path goes outside current directory', function()\n+        eq('../../foo/bar', vim.fs.normalize('../../foo/bar'))\n+        eq('../foo', vim.fs.normalize('foo/bar/../../../foo'))\n+\n+        if is_os('win') then\n+          eq('C:../foo', vim.fs.normalize('C:../foo'))\n+          eq('C:../../foo/bar', vim.fs.normalize('C:foo/../../../foo/bar'))\n+        end\n+      end)\n+\n+      it('.. in root directory resolves to itself', function()\n+        if is_os('win') then",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1557489518",
            "id": 1557489518,
            "in_reply_to_id": 1554997469,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5c1Wdu",
            "original_commit_id": "d8e56cc3596716751a75a9f55f2630c9af0fea10",
            "original_line": 405,
            "original_position": 121,
            "original_start_line": null,
            "path": "test/functional/lua/fs_spec.lua",
            "position": null,
            "pull_request_review_id": 1988810996,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1557489518/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-09T11:33:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1557489518",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1564717440"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564717440"
                }
            },
            "author_association": "MEMBER",
            "body": "Why does it not immediately convert `\\` to `/` (or require a \"/\" path as input)? That would simplify parts of the logic.",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-14T13:09:14Z",
            "diff_hunk": "@@ -334,30 +334,143 @@ function M.find(names, opts)\n   return matches\n end\n \n+--- Split a Windows path into a prefix and a body, such that the body can be processed like a POSIX\n+--- path.\n+---\n+--- Does not check if the path is a valid Windows path. Invalid paths will give invalid results.\n+---\n+--- Examples:\n+--- - `\\\\.\\C:\\foo\\bar` -> `\\\\.\\C:`, `\\foo\\bar`",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1564717440",
            "id": 1564717440,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dQ7GA",
            "original_commit_id": "9668fc23f1e6fca9c835ba5aaa88956d9107011a",
            "original_line": 343,
            "original_position": 10,
            "original_start_line": null,
            "path": "runtime/lua/vim/fs.lua",
            "position": null,
            "pull_request_review_id": 1999658583,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564717440/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-14T13:09:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564717440",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1564717783"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564717783"
                }
            },
            "author_association": "MEMBER",
            "body": "this pattern (and others below) would be simplified if `split_windows_path` immediately converted `\\` slashes to `/` slashes (or required this in its input)",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-14T13:10:08Z",
            "diff_hunk": "@@ -334,30 +334,143 @@ function M.find(names, opts)\n   return matches\n end\n \n+--- Split a Windows path into a prefix and a body, such that the body can be processed like a POSIX\n+--- path.\n+---\n+--- Does not check if the path is a valid Windows path. Invalid paths will give invalid results.\n+---\n+--- Examples:\n+--- - `\\\\.\\C:\\foo\\bar` -> `\\\\.\\C:`, `\\foo\\bar`\n+--- - `//?/UNC/server/share/foo/bar` -> `//?/UNC/server/share`, `/foo/bar`\n+--- - `\\\\.\\system07\\C$\\foo\\bar` -> `\\\\.\\system07`, `\\C$\\foo\\bar`\n+--- - `C:/foo/bar` -> `C:`, `/foo/bar`\n+--- - `C:foo/bar` -> `C:`, `foo/bar`\n+---\n+--- @param path string Path to split.\n+--- @return string, string : prefix, body\n+local function split_windows_path(path)\n+  local prefix = ''\n+\n+  --- Match pattern. If there is a match, move the matched pattern from the path to the prefix.\n+  --- Returns the matched pattern.\n+  ---\n+  --- @param pattern string Pattern to match.\n+  --- @param nomatch_error string? Error message if the pattern doesn't match.\n+  --- @return string|nil Matched pattern\n+  local function match_to_prefix(pattern, nomatch_error)\n+    local match = path:match(pattern)\n+\n+    if match then\n+      prefix = prefix .. match --[[ @as string ]]\n+      path = path:sub(#match + 1)\n+    elseif nomatch_error then\n+      error(nomatch_error)\n+    end\n+\n+    return match\n+  end\n+\n+  local function process_unc_path()\n+    match_to_prefix('[^/\\\\]+[/\\\\]+[^/\\\\]+[/\\\\]+', 'Invalid Windows UNC path')",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1564717783",
            "id": 1564717783,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dQ7LX",
            "original_commit_id": "9668fc23f1e6fca9c835ba5aaa88956d9107011a",
            "original_line": 374,
            "original_position": 41,
            "original_start_line": null,
            "path": "runtime/lua/vim/fs.lua",
            "position": null,
            "pull_request_review_id": 1999658719,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564717783/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-14T13:10:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564717783",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1564718319"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564718319"
                }
            },
            "author_association": "MEMBER",
            "body": "this converts slashes. so why does `split_windows_path` (called below) support `\\` slashes ?",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-14T13:11:16Z",
            "diff_hunk": "@@ -388,22 +506,26 @@ function M.normalize(path, opts)\n   -- Convert path separator to `/`\n   path = path:gsub(os_sep, '/')",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1564718319",
            "id": 1564718319,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dQ7Tv",
            "original_commit_id": "9668fc23f1e6fca9c835ba5aaa88956d9107011a",
            "original_line": 507,
            "original_position": 170,
            "original_start_line": null,
            "path": "runtime/lua/vim/fs.lua",
            "position": null,
            "pull_request_review_id": 1999658868,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564718319/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-14T13:11:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564718319",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1564720809"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564720809"
                }
            },
            "author_association": "MEMBER",
            "body": "Ideally, we want this to be used outside of `normalize` as well (for example it's used in #28187), and those functions would not normalize or change the slashes, so I explicitly chose against correcting slashes",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-14T13:17:06Z",
            "diff_hunk": "@@ -334,30 +334,143 @@ function M.find(names, opts)\n   return matches\n end\n \n+--- Split a Windows path into a prefix and a body, such that the body can be processed like a POSIX\n+--- path.\n+---\n+--- Does not check if the path is a valid Windows path. Invalid paths will give invalid results.\n+---\n+--- Examples:\n+--- - `\\\\.\\C:\\foo\\bar` -> `\\\\.\\C:`, `\\foo\\bar`",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1564720809",
            "id": 1564720809,
            "in_reply_to_id": 1564717440,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dQ76p",
            "original_commit_id": "9668fc23f1e6fca9c835ba5aaa88956d9107011a",
            "original_line": 343,
            "original_position": 10,
            "original_start_line": null,
            "path": "runtime/lua/vim/fs.lua",
            "position": null,
            "pull_request_review_id": 1999659796,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564720809/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-14T13:18:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564720809",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1564721014"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564721014"
                }
            },
            "author_association": "MEMBER",
            "body": "Reasoning given above",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-14T13:17:31Z",
            "diff_hunk": "@@ -388,22 +506,26 @@ function M.normalize(path, opts)\n   -- Convert path separator to `/`\n   path = path:gsub(os_sep, '/')",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1564721014",
            "id": 1564721014,
            "in_reply_to_id": 1564718319,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dQ792",
            "original_commit_id": "9668fc23f1e6fca9c835ba5aaa88956d9107011a",
            "original_line": 507,
            "original_position": 170,
            "original_start_line": null,
            "path": "runtime/lua/vim/fs.lua",
            "position": null,
            "pull_request_review_id": 1999659861,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564721014/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-14T13:17:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564721014",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1564872292"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564872292"
                }
            },
            "author_association": "MEMBER",
            "body": "> Ideally, we want this to be used outside of `normalize` as well (for example it's used in #28187), and those functions would not normalize or change the slashes,\r\n\r\nNot worth it. If `abspath()` wants to use `\\` slashes for some reason it can always do a `replace('/', '\\\\')` just before it returns its result. But in fact, users/plugins can do that if they want.\r\n\r\nThe general policy is: Nvim uses `/` slashes everywhere. That is the policy. We need to stop fiddling around with `\\` slashes except for some specific cases for _presentation_.",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-14T18:49:03Z",
            "diff_hunk": "@@ -334,30 +334,143 @@ function M.find(names, opts)\n   return matches\n end\n \n+--- Split a Windows path into a prefix and a body, such that the body can be processed like a POSIX\n+--- path.\n+---\n+--- Does not check if the path is a valid Windows path. Invalid paths will give invalid results.\n+---\n+--- Examples:\n+--- - `\\\\.\\C:\\foo\\bar` -> `\\\\.\\C:`, `\\foo\\bar`",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1564872292",
            "id": 1564872292,
            "in_reply_to_id": 1564717440,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dRg5k",
            "original_commit_id": "9668fc23f1e6fca9c835ba5aaa88956d9107011a",
            "original_line": 343,
            "original_position": 10,
            "original_start_line": null,
            "path": "runtime/lua/vim/fs.lua",
            "position": null,
            "pull_request_review_id": 1999728170,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564872292/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-14T18:49:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564872292",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1564875574"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564875574"
                }
            },
            "author_association": "MEMBER",
            "body": "> > Ideally, we want this to be used outside of `normalize` as well (for example it's used in #28187), and those functions would not normalize or change the slashes,\r\n> \r\n> Not worth it. If `abspath()` wants to use `\\` slashes for some reason it can always do a `replace('/', '\\\\')` just before it returns its result. But in fact, users/plugins can do that if they want.\r\n> \r\n> The general policy is: Nvim uses `/` slashes everywhere. That is the policy. We need to stop fiddling around with `\\` slashes except for some specific cases for _presentation_.\r\n\r\nIt's not about replacing `/` with `\\`. I was told that `abspath` should keep slashes as-is, which means that `/` should remain as `/` and `\\` should remain `\\` even after being converted to an absolute path. If you think it's okay to convert `\\` to `/` in abspath then I don't mind going for it",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-14T18:56:47Z",
            "diff_hunk": "@@ -334,30 +334,143 @@ function M.find(names, opts)\n   return matches\n end\n \n+--- Split a Windows path into a prefix and a body, such that the body can be processed like a POSIX\n+--- path.\n+---\n+--- Does not check if the path is a valid Windows path. Invalid paths will give invalid results.\n+---\n+--- Examples:\n+--- - `\\\\.\\C:\\foo\\bar` -> `\\\\.\\C:`, `\\foo\\bar`",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1564875574",
            "id": 1564875574,
            "in_reply_to_id": 1564717440,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dRhs2",
            "original_commit_id": "9668fc23f1e6fca9c835ba5aaa88956d9107011a",
            "original_line": 343,
            "original_position": 10,
            "original_start_line": null,
            "path": "runtime/lua/vim/fs.lua",
            "position": null,
            "pull_request_review_id": 1999729229,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564875574/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-14T18:56:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564875574",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1564988739"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564988739"
                }
            },
            "author_association": "MEMBER",
            "body": "> I was told that `abspath` should keep slashes as-is\r\n\r\nThat's more of a nice to have and not a requirement. I repeat: Nvim uses \"/\" slashes. We need to stop fucking around with `\\` slashes, it's a waste of time.\r\n\r\nIf returning \"/\" slashes from abspath() simplifies our internals then that is what we should do. We decide how `vim.fs` behaves, if people don't like it they can easily replace the slashes or use something else.",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-14T23:47:26Z",
            "diff_hunk": "@@ -334,30 +334,143 @@ function M.find(names, opts)\n   return matches\n end\n \n+--- Split a Windows path into a prefix and a body, such that the body can be processed like a POSIX\n+--- path.\n+---\n+--- Does not check if the path is a valid Windows path. Invalid paths will give invalid results.\n+---\n+--- Examples:\n+--- - `\\\\.\\C:\\foo\\bar` -> `\\\\.\\C:`, `\\foo\\bar`",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1564988739",
            "id": 1564988739,
            "in_reply_to_id": 1564717440,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dR9VD",
            "original_commit_id": "9668fc23f1e6fca9c835ba5aaa88956d9107011a",
            "original_line": 343,
            "original_position": 10,
            "original_start_line": null,
            "path": "runtime/lua/vim/fs.lua",
            "position": null,
            "pull_request_review_id": 1999771657,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564988739/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-14T23:48:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1564988739",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1565759209"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1565759209"
                }
            },
            "author_association": "MEMBER",
            "body": "ternary",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-15T13:02:23Z",
            "diff_hunk": "@@ -369,12 +486,29 @@ function M.normalize(path, opts)\n   vim.validate({\n     path = { path, { 'string' } },\n     expand_env = { opts.expand_env, { 'boolean' }, true },\n+    win = { opts.win, { 'boolean' }, true },\n   })\n \n+  local win --- @type boolean\n+  local os_sep_local --- @type string\n+\n+  if opts.win ~= nil then\n+    win = opts.win\n+    os_sep_local = opts.win and '\\\\' or '/'\n+  else\n+    win = iswin\n+    os_sep_local = os_sep\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1565759209",
            "id": 1565759209,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dU5bp",
            "original_commit_id": "8640989dd5cbfdd71f626994dd227c5bce271d8a",
            "original_line": 501,
            "original_position": 178,
            "original_start_line": 492,
            "path": "runtime/lua/vim/fs.lua",
            "position": null,
            "pull_request_review_id": 2001047780,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1565759209/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-04-15T13:02:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1565759209",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1565769955"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1565769955"
                }
            },
            "author_association": "MEMBER",
            "body": "can `match_to_prefix` and `process_unc_path` be reworked to return multiple values instead of mutating `prefix` (which is subtle and generally should be avoided).\r\n\r\nusually a good idea to also print the arg at the end of the error.\r\n\r\n```suggestion\r\n    _, prefix = match_to_prefix('[^/]+/+[^/]+/+', ('Invalid Windows UNC path: \"%s\"'):format(...))\r\n```",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-15T13:10:11Z",
            "diff_hunk": "@@ -334,30 +334,147 @@ function M.find(names, opts)\n   return matches\n end\n \n+--- Split a Windows path into a prefix and a body, such that the body can be processed like a POSIX\n+--- path. The path must use forward slashes as path separator.\n+---\n+--- Does not check if the path is a valid Windows path. Invalid paths will give invalid results.\n+---\n+--- Examples:\n+--- - `//./C:/foo/bar` -> `//./C:`, `/foo/bar`\n+--- - `//?/UNC/server/share/foo/bar` -> `//?/UNC/server/share`, `/foo/bar`\n+--- - `//./system07/C$/foo/bar` -> `//./system07`, `/C$/foo/bar`\n+--- - `C:/foo/bar` -> `C:`, `/foo/bar`\n+--- - `C:foo/bar` -> `C:`, `foo/bar`\n+---\n+--- @param path string Path to split.\n+--- @return string, string : prefix, body\n+local function split_windows_path(path)\n+  local prefix = ''\n+\n+  --- Match pattern. If there is a match, move the matched pattern from the path to the prefix.\n+  --- Returns the matched pattern.\n+  ---\n+  --- @param pattern string Pattern to match.\n+  --- @param nomatch_error string? Error message if the pattern doesn't match.\n+  --- @return string|nil Matched pattern\n+  local function match_to_prefix(pattern, nomatch_error)\n+    local match = path:match(pattern)\n+\n+    if match then\n+      prefix = prefix .. match --[[ @as string ]]\n+      path = path:sub(#match + 1)\n+    elseif nomatch_error then\n+      error(nomatch_error)\n+    end\n+\n+    return match\n+  end\n+\n+  local function process_unc_path()\n+    match_to_prefix('[^/]+/+[^/]+/+', 'Invalid Windows UNC path')",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1565769955",
            "id": 1565769955,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dU8Dj",
            "original_commit_id": "8640989dd5cbfdd71f626994dd227c5bce271d8a",
            "original_line": 374,
            "original_position": 41,
            "original_start_line": null,
            "path": "runtime/lua/vim/fs.lua",
            "position": null,
            "pull_request_review_id": 2001066457,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1565769955/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-15T13:10:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1565769955",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1565777113"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1565777113"
                }
            },
            "author_association": "MEMBER",
            "body": "all of the input/outputs in this test batch look the same (except `\\` is coverted to `/`). maybe the inputs should be a bit more complex, e.g. add some double slashes, trailing slashes, etc.",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-15T13:15:22Z",
            "diff_hunk": "@@ -308,26 +310,133 @@ describe('vim.fs', function()\n       )\n     end)\n \n-    it('works with UNC paths', function()\n-      eq('//foo', vim.fs.normalize('//foo')) -- UNC path\n-      eq('//foo/bar', vim.fs.normalize('//foo//bar////')) -- UNC path\n-      eq('/foo', vim.fs.normalize('///foo')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('//')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('///')) -- Not a UNC path\n-      eq('/foo/bar', vim.fs.normalize('/foo//bar////')) -- Not a UNC path\n+    -- Opts required for testing posix paths and win paths\n+    local posix_opts = is_os('win') and { win = false } or {}\n+    local win_opts = is_os('win') and {} or { win = true }\n+\n+    it('preserves leading double slashes in POSIX paths', function()\n+      eq('//foo', vim.fs.normalize('//foo', posix_opts))\n+      eq('//foo/bar', vim.fs.normalize('//foo//bar////', posix_opts))\n+      eq('/foo', vim.fs.normalize('///foo', posix_opts))\n+      eq('//', vim.fs.normalize('//', posix_opts))\n+      eq('/', vim.fs.normalize('///', posix_opts))\n+      eq('/foo/bar', vim.fs.normalize('/foo//bar////', posix_opts))\n     end)\n \n-    if is_os('win') then\n-      it('Last slash is not truncated from root drive', function()\n-        eq('C:/', vim.fs.normalize('C:/'))\n+    it('allows backslashes on unix-based os', function()\n+      eq('/home/user/hello\\\\world', vim.fs.normalize('/home/user/hello\\\\world', posix_opts))\n+    end)\n+\n+    it('preserves / after drive letters', function()\n+      eq('C:/', vim.fs.normalize([[C:\\]], win_opts))\n+    end)\n+\n+    it('works with UNC and DOS device paths', function()",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1565777113",
            "id": 1565777113,
            "line": 332,
            "node_id": "PRRC_kwDOAPphoM5dU9zZ",
            "original_commit_id": "8640989dd5cbfdd71f626994dd227c5bce271d8a",
            "original_line": 332,
            "original_position": 51,
            "original_start_line": null,
            "path": "test/functional/lua/fs_spec.lua",
            "position": 35,
            "pull_request_review_id": 2001079065,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1565777113/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-04-15T13:15:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1565777113",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28203#discussion_r1565784551"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28203"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1565784551"
                }
            },
            "author_association": "MEMBER",
            "body": "Not really sure we should be \"validating\" the path, for most of these cases. normalize() just normalizes what it's given. If it can produce a deterministic result, it should.\r\n\r\nWe definitely want these _test cases_ for \"invalid\" UNC input, to ensure we have a contract for the expected result. But that's different than throwing an error.",
            "commit_id": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
            "created_at": "2024-04-15T13:19:50Z",
            "diff_hunk": "@@ -308,26 +310,133 @@ describe('vim.fs', function()\n       )\n     end)\n \n-    it('works with UNC paths', function()\n-      eq('//foo', vim.fs.normalize('//foo')) -- UNC path\n-      eq('//foo/bar', vim.fs.normalize('//foo//bar////')) -- UNC path\n-      eq('/foo', vim.fs.normalize('///foo')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('//')) -- Not a UNC path\n-      eq('/', vim.fs.normalize('///')) -- Not a UNC path\n-      eq('/foo/bar', vim.fs.normalize('/foo//bar////')) -- Not a UNC path\n+    -- Opts required for testing posix paths and win paths\n+    local posix_opts = is_os('win') and { win = false } or {}\n+    local win_opts = is_os('win') and {} or { win = true }\n+\n+    it('preserves leading double slashes in POSIX paths', function()\n+      eq('//foo', vim.fs.normalize('//foo', posix_opts))\n+      eq('//foo/bar', vim.fs.normalize('//foo//bar////', posix_opts))\n+      eq('/foo', vim.fs.normalize('///foo', posix_opts))\n+      eq('//', vim.fs.normalize('//', posix_opts))\n+      eq('/', vim.fs.normalize('///', posix_opts))\n+      eq('/foo/bar', vim.fs.normalize('/foo//bar////', posix_opts))\n     end)\n \n-    if is_os('win') then\n-      it('Last slash is not truncated from root drive', function()\n-        eq('C:/', vim.fs.normalize('C:/'))\n+    it('allows backslashes on unix-based os', function()\n+      eq('/home/user/hello\\\\world', vim.fs.normalize('/home/user/hello\\\\world', posix_opts))\n+    end)\n+\n+    it('preserves / after drive letters', function()\n+      eq('C:/', vim.fs.normalize([[C:\\]], win_opts))\n+    end)\n+\n+    it('works with UNC and DOS device paths', function()\n+      eq('//server/share/foo/bar', vim.fs.normalize([[\\\\server\\share\\foo\\bar]], win_opts))\n+      eq('//system07/C$/', vim.fs.normalize([[\\\\system07\\C$\\]], win_opts))\n+      eq('//./C:/foo/bar', vim.fs.normalize([[\\\\.\\C:\\foo\\bar]], win_opts))\n+      eq('//?/C:/foo/bar', vim.fs.normalize([[\\\\?\\C:\\foo\\bar]], win_opts))\n+      eq(\n+        '//?/UNC/server/share/foo/bar',\n+        vim.fs.normalize([[\\\\?\\UNC\\server\\share\\foo\\bar]], win_opts)\n+      )\n+      eq('//./BootPartition/foo/bar', vim.fs.normalize([[\\\\.\\BootPartition\\foo\\bar]], win_opts))\n+      eq(\n+        '//./Volume{12345678-1234-1234-1234-1234567890AB}/foo/bar',\n+        vim.fs.normalize([[\\\\.\\Volume{12345678-1234-1234-1234-1234567890AB}\\foo\\bar]], win_opts)\n+      )\n+    end)\n+\n+    it('errors on invalid UNC and DOS device paths', function()\n+      matches(\n+        'Invalid Windows UNC path',\n+        pcall_err(vim.fs.normalize, [[\\\\server\\share]], win_opts)\n+      )\n+      matches(\n+        'Invalid Windows UNC path',\n+        pcall_err(vim.fs.normalize, [[\\\\server\\]], win_opts)\n+      )",
            "html_url": "https://github.com/neovim/neovim/pull/28203#discussion_r1565784551",
            "id": 1565784551,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5dU_nn",
            "original_commit_id": "8640989dd5cbfdd71f626994dd227c5bce271d8a",
            "original_line": 358,
            "original_position": 75,
            "original_start_line": 352,
            "path": "test/functional/lua/fs_spec.lua",
            "position": null,
            "pull_request_review_id": 2001092377,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1565784551/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-04-15T13:21:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1565784551",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "see also: `:h simplify()`",
            "created_at": "2024-04-06T06:26:23Z",
            "html_url": "https://github.com/neovim/neovim/pull/28203#issuecomment-2040989571",
            "id": 2040989571,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28203",
            "node_id": "IC_kwDOAPphoM55pweD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2040989571/reactions"
            },
            "updated_at": "2024-04-06T06:26:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2040989571",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19489738?v=4",
                "events_url": "https://api.github.com/users/tomtomjhj/events{/privacy}",
                "followers_url": "https://api.github.com/users/tomtomjhj/followers",
                "following_url": "https://api.github.com/users/tomtomjhj/following{/other_user}",
                "gists_url": "https://api.github.com/users/tomtomjhj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tomtomjhj",
                "id": 19489738,
                "login": "tomtomjhj",
                "node_id": "MDQ6VXNlcjE5NDg5NzM4",
                "organizations_url": "https://api.github.com/users/tomtomjhj/orgs",
                "received_events_url": "https://api.github.com/users/tomtomjhj/received_events",
                "repos_url": "https://api.github.com/users/tomtomjhj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tomtomjhj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tomtomjhj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tomtomjhj"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Differences between POSIX platforms and Windows have bitten us many times in `normalize` and other `vim.fs` functions. Does `.` and `..` have any meaning on Windows? AFAIK it's a POSIX thing.\r\n\r\n**EDIT:** I just tried `.` and `..` in Windows in both PowerShell and `cmd.exe` and both seem to work as expected, so this is probably fine.\r\n\r\n",
            "created_at": "2024-04-06T14:19:51Z",
            "html_url": "https://github.com/neovim/neovim/pull/28203#issuecomment-2041102673",
            "id": 2041102673,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28203",
            "node_id": "IC_kwDOAPphoM55qMFR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2041102673/reactions"
            },
            "updated_at": "2024-04-06T14:29:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2041102673",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Differences between POSIX platforms and Windows have bitten us many times in `normalize` and other `vim.fs` functions. Does `.` and `..` have any meaning on Windows? AFAIK it's a POSIX thing.\r\n> \r\n> **EDIT:** I just tried `.` and `..` in Windows in both PowerShell and `cmd.exe` and both seem to work as expected, so this is probably fine.\r\n\r\n`.` and `..` both seem to work on my Windows VM as well, Also, if it counts, Python's `os.path.normpath` always resolves `.` and `..` on both Windows and Linux, dunno about other languages",
            "created_at": "2024-04-06T14:46:12Z",
            "html_url": "https://github.com/neovim/neovim/pull/28203#issuecomment-2041108840",
            "id": 2041108840,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28203",
            "node_id": "IC_kwDOAPphoM55qNlo",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2041108840/reactions"
            },
            "updated_at": "2024-04-06T14:46:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2041108840",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I don't think this is a breaking change, and it shouldn't be marked as such. Could just as well consider it a `fix` (or a changed `feat`ure, if you must have a news entry).",
            "created_at": "2024-04-07T12:35:05Z",
            "html_url": "https://github.com/neovim/neovim/pull/28203#issuecomment-2041456256",
            "id": 2041456256,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28203",
            "node_id": "IC_kwDOAPphoM55riaA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2041456256/reactions"
            },
            "updated_at": "2024-04-07T12:35:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2041456256",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Looks good. A future improvement in a follow-up PR (by you or someone else) could be to lowercase all pathnames in windows and mac since paths are case-insensetive on those.\n\nNot 100% true. Depends what the filesystem is. It is possible to format a Macos install that is case sensitive.",
            "created_at": "2024-04-07T13:11:07Z",
            "html_url": "https://github.com/neovim/neovim/pull/28203#issuecomment-2041466342",
            "id": 2041466342,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28203",
            "node_id": "IC_kwDOAPphoM55rk3m",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2041466342/reactions"
            },
            "updated_at": "2024-04-07T15:40:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2041466342",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Looks good. A future improvement in a follow-up PR (by you or someone else) could be to lowercase all pathnames in windows and mac since paths are case-insensetive on those.\r\n\r\nLooking at this: https://superuser.com/questions/365606/how-to-check-if-the-file-system-is-case-sensitive-on-windows-mac-and-linux\r\n\r\nSpecifically this quote:\r\n> As of Windows 10 1803, you can enable case sensitivity on NTFS partitions per directory. Granted, this is uncommon (for now), but it complicates any sort of test you might concoct:\r\n\r\nIf this is true, then I don't think we should do this. The user can achieve this with a simple `string.lower`, and checking if a certain filesystem is case sensitive will be a pain in the ass that's simply not worth it in the end.",
            "created_at": "2024-04-07T13:27:09Z",
            "html_url": "https://github.com/neovim/neovim/pull/28203#issuecomment-2041471912",
            "id": 2041471912,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28203",
            "node_id": "IC_kwDOAPphoM55rmOo",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2041471912/reactions"
            },
            "updated_at": "2024-04-07T13:27:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2041471912",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Did some pretty big changes to make `split_windows_path` a bit more useful for other things, which made some parts of the normalize function a bit more complicated, but it's a fair tradeoff imo.",
            "created_at": "2024-04-07T18:03:05Z",
            "html_url": "https://github.com/neovim/neovim/pull/28203#issuecomment-2041546961",
            "id": 2041546961,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28203",
            "node_id": "IC_kwDOAPphoM55r4jR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2041546961/reactions"
            },
            "updated_at": "2024-04-07T18:03:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2041546961",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@justinmk Would you have any issues with this, btw? Or is this okay to be merge? I'm primarily asking about the API, any internal implementation detail can always be changed",
            "created_at": "2024-04-10T07:41:20Z",
            "html_url": "https://github.com/neovim/neovim/pull/28203#issuecomment-2046758635",
            "id": 2046758635,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28203",
            "node_id": "IC_kwDOAPphoM55_w7r",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2046758635/reactions"
            },
            "updated_at": "2024-04-10T07:41:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2046758635",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I'm primarily asking about the API, any internal implementation detail can always be changed\r\n\r\nis adding the `win` flag difficult? ",
            "created_at": "2024-04-14T13:12:54Z",
            "html_url": "https://github.com/neovim/neovim/pull/28203#issuecomment-2054058037",
            "id": 2054058037,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28203",
            "node_id": "IC_kwDOAPphoM56bnA1",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2054058037/reactions"
            },
            "updated_at": "2024-04-14T13:12:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2054058037",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > I'm primarily asking about the API, any internal implementation detail can always be changed\r\n> \r\n> is adding the `win` flag difficult?\r\n\r\nWhat would a `win` flag do?\r\n\r\nIf you mean a separate flag for Windows paths, I think it's better to add something like it for multiple `vim.fs` functions at once in a separate PR dedicated to that, as there may be some complications with it",
            "created_at": "2024-04-14T13:18:08Z",
            "html_url": "https://github.com/neovim/neovim/pull/28203#issuecomment-2054059487",
            "id": 2054059487,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28203",
            "node_id": "IC_kwDOAPphoM56bnXf",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2054059487/reactions"
            },
            "updated_at": "2024-04-14T13:24:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2054059487",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> What would a `win` flag do?\r\n\r\nI mean the discussion just above which was \"resolved\".  https://github.com/neovim/neovim/pull/28203#discussion_r1554997469\r\n\r\n\r\n> If you mean a separate flag for Windows paths, I think it's better to add something like it for multiple `vim.fs` functions\r\n\r\nAdding such a flag for other `vim.fs` is not in scope. normalize() is a special case. As already [explained](https://github.com/neovim/neovim/pull/28203#discussion_r1554997469), we should strive for normalize() to be deterministic, but since we've made a compromise for UNC, the compromise is that this is controlled by a flag, just like `expand_env`. ",
            "created_at": "2024-04-14T18:52:15Z",
            "html_url": "https://github.com/neovim/neovim/pull/28203#issuecomment-2054153266",
            "id": 2054153266,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28203",
            "node_id": "IC_kwDOAPphoM56b-Qy",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2054153266/reactions"
            },
            "updated_at": "2024-04-14T18:52:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2054153266",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/28203/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/28203/commits",
    "created_at": "2024-04-06T06:19:55Z",
    "diff_url": "https://github.com/neovim/neovim/pull/28203.diff",
    "draft": false,
    "head": {
        "label": "famiu:feat/vim.fs/normalize",
        "ref": "feat/vim.fs/normalize",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/famiu/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/famiu/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/famiu/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/famiu/neovim/branches{/branch}",
            "clone_url": "https://github.com/famiu/neovim.git",
            "collaborators_url": "https://api.github.com/repos/famiu/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/famiu/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/famiu/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/famiu/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/famiu/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/famiu/neovim/contributors",
            "created_at": "2021-10-11T04:58:58Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/famiu/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/famiu/neovim/downloads",
            "events_url": "https://api.github.com/repos/famiu/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/famiu/neovim/forks",
            "full_name": "famiu/neovim",
            "git_commits_url": "https://api.github.com/repos/famiu/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/famiu/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/famiu/neovim/git/tags{/sha}",
            "git_url": "git://github.com/famiu/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/famiu/neovim/hooks",
            "html_url": "https://github.com/famiu/neovim",
            "id": 415783665,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/famiu/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/famiu/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/famiu/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/famiu/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/famiu/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/famiu/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/famiu/neovim/merges",
            "milestones_url": "https://api.github.com/repos/famiu/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOGMha8Q",
            "notifications_url": "https://api.github.com/repos/famiu/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/famiu/neovim/pulls{/number}",
            "pushed_at": "2024-04-15T14:36:29Z",
            "releases_url": "https://api.github.com/repos/famiu/neovim/releases{/id}",
            "size": 258091,
            "ssh_url": "git@github.com:famiu/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/famiu/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/famiu/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/famiu/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/famiu/neovim/subscription",
            "svn_url": "https://github.com/famiu/neovim",
            "tags_url": "https://api.github.com/repos/famiu/neovim/tags",
            "teams_url": "https://api.github.com/repos/famiu/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/famiu/neovim/git/trees{/sha}",
            "updated_at": "2022-08-29T10:09:33Z",
            "url": "https://api.github.com/repos/famiu/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "53899ac7418d805f7fa5cbfc180df4bf1027f030",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
            "events_url": "https://api.github.com/users/famiu/events{/privacy}",
            "followers_url": "https://api.github.com/users/famiu/followers",
            "following_url": "https://api.github.com/users/famiu/following{/other_user}",
            "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/famiu",
            "id": 29580810,
            "login": "famiu",
            "node_id": "MDQ6VXNlcjI5NTgwODEw",
            "organizations_url": "https://api.github.com/users/famiu/orgs",
            "received_events_url": "https://api.github.com/users/famiu/received_events",
            "repos_url": "https://api.github.com/users/famiu/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/famiu"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/28203",
    "id": 1810292566,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28203",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "filenames, path manipulation",
            "id": 3386070083,
            "name": "filesystem",
            "node_id": "LA_kwDOAPphoM7J01RD",
            "url": "https://api.github.com/repos/neovim/neovim/labels/filesystem"
        }
    ],
    "locked": false,
    "merge_commit_sha": "babef19395474cfa20f5b989ef5f26cb606bc4c0",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5r5t9W",
    "number": 28203,
    "patch_url": "https://github.com/neovim/neovim/pull/28203.patch",
    "requested_reviewers": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
            "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
            "followers_url": "https://api.github.com/users/lewis6991/followers",
            "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
            "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/lewis6991",
            "id": 7904185,
            "login": "lewis6991",
            "node_id": "MDQ6VXNlcjc5MDQxODU=",
            "organizations_url": "https://api.github.com/users/lewis6991/orgs",
            "received_events_url": "https://api.github.com/users/lewis6991/received_events",
            "repos_url": "https://api.github.com/users/lewis6991/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/lewis6991"
        },
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
            "events_url": "https://api.github.com/users/clason/events{/privacy}",
            "followers_url": "https://api.github.com/users/clason/followers",
            "following_url": "https://api.github.com/users/clason/following{/other_user}",
            "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/clason",
            "id": 2361214,
            "login": "clason",
            "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
            "organizations_url": "https://api.github.com/users/clason/orgs",
            "received_events_url": "https://api.github.com/users/clason/received_events",
            "repos_url": "https://api.github.com/users/clason/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/clason"
        },
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
            "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
            "followers_url": "https://api.github.com/users/gpanders/followers",
            "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
            "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/gpanders",
            "id": 8965202,
            "login": "gpanders",
            "node_id": "MDQ6VXNlcjg5NjUyMDI=",
            "organizations_url": "https://api.github.com/users/gpanders/orgs",
            "received_events_url": "https://api.github.com/users/gpanders/received_events",
            "repos_url": "https://api.github.com/users/gpanders/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/gpanders"
        },
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk"
        }
    ],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/28203/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/53899ac7418d805f7fa5cbfc180df4bf1027f030",
    "title": "fix(lua): make `vim.fs.normalize()` resolve `.` and `..`",
    "updated_at": "2024-04-15T14:50:55Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/28203",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
        "events_url": "https://api.github.com/users/famiu/events{/privacy}",
        "followers_url": "https://api.github.com/users/famiu/followers",
        "following_url": "https://api.github.com/users/famiu/following{/other_user}",
        "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/famiu",
        "id": 29580810,
        "login": "famiu",
        "node_id": "MDQ6VXNlcjI5NTgwODEw",
        "organizations_url": "https://api.github.com/users/famiu/orgs",
        "received_events_url": "https://api.github.com/users/famiu/received_events",
        "repos_url": "https://api.github.com/users/famiu/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/famiu"
    }
}