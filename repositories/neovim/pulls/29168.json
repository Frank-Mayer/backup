{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/29168/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/29168/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/29168"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/29168"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/29168/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/29168"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/b1a39e4d66957fe6ecb4340e32298816a72eded2"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5451,
            "forks_count": 5451,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1738,
            "open_issues_count": 1738,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-06-11T01:59:06Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 272256,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 79008,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-06-11T00:39:49Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 79008,
            "watchers_count": 79008,
            "web_commit_signoff_required": false
        },
        "sha": "4881211097aba7f5d17700362ec0967e3024f074",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "It's a function to perform operations in their own sealed context,\nsimilar to pythons `with`. This helps ease operations where you need to\nperform an operation in a specific context, and then restore the\ncontext.\n\nMarked as private for now as it's not ready for public use. The current\nplan is to start using this internally so we can discover and fix any\nproblems. Once this is ready to be exposed it will be renamed to\n`vim.with`.\n\nUsage:\n\n```lua\nlocal ret = vim._with({context = val}, function()\n  return \"hello\"\nend)\n```\n\n, where `context` is any combination of:\n\n- `buf`\n- `emsg_silent`\n- `hide`\n- `horizontal`\n- `keepalt`\n- `keepjumps`\n- `keepmarks`\n- `keeppatterns`\n- `lockmarks`\n- `noautocmd`\n- `options`\n- `sandbox`\n- `silent`\n- `unsilent`\n- `win`\n\n(except for `win` and `buf` which can't be used at the same time). This\nlist will most likely be expanded in the future.\n\nWork on https://github.com/neovim/neovim/issues/19832.",
    "closed_at": "2024-06-08T19:38:07Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29168#discussion_r1624802444"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29168"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1624802444"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nfunction vim._with(mods, f) end\r\n```\r\n?",
            "commit_id": "b1a39e4d66957fe6ecb4340e32298816a72eded2",
            "created_at": "2024-06-03T17:13:00Z",
            "diff_hunk": "@@ -14,3 +14,23 @@\n --- @param ... any\n --- @return any\n function vim.call(func, ...) end\n+\n+--- @class vim.context.mods\n+--- @field sandbox? boolean\n+--- @field noautocmd? boolean\n+--- @field hide? boolean\n+--- @field horizontal? boolean\n+--- @field keepalt? boolean\n+--- @field keepjumps? boolean\n+--- @field keepmarks? boolean\n+--- @field keeppatterns? boolean\n+--- @field lockmarks? boolean\n+---\n+--- @field buf? integer\n+--- @field win? integer\n+\n+--- @generic R1, R2, R3, R4\n+--- @param mods vim.context.mods\n+--- @param f fun(): R1, R2, R3, R4\n+--- @return R1, R2, R3, R4\n+function vim.__with(mods, f) end",
            "html_url": "https://github.com/neovim/neovim/pull/29168#discussion_r1624802444",
            "id": 1624802444,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5g2ISM",
            "original_commit_id": "35d12388aa46d6d26c40806941216eeb9aa43fc8",
            "original_line": 36,
            "original_position": 23,
            "original_start_line": null,
            "path": "runtime/lua/vim/_meta/misc.lua",
            "position": null,
            "pull_request_review_id": 2094453747,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29168",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1624802444/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-06-03T17:13:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1624802444",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29168#discussion_r1624805333"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29168"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1624805333"
                }
            },
            "author_association": "MEMBER",
            "body": "No, this is the function signature for the `vim.__with` function (that is defined in the C code) that is called in `vim._with` function. In hindsight maybe the naming isn't great lol",
            "commit_id": "b1a39e4d66957fe6ecb4340e32298816a72eded2",
            "created_at": "2024-06-03T17:15:51Z",
            "diff_hunk": "@@ -14,3 +14,23 @@\n --- @param ... any\n --- @return any\n function vim.call(func, ...) end\n+\n+--- @class vim.context.mods\n+--- @field sandbox? boolean\n+--- @field noautocmd? boolean\n+--- @field hide? boolean\n+--- @field horizontal? boolean\n+--- @field keepalt? boolean\n+--- @field keepjumps? boolean\n+--- @field keepmarks? boolean\n+--- @field keeppatterns? boolean\n+--- @field lockmarks? boolean\n+---\n+--- @field buf? integer\n+--- @field win? integer\n+\n+--- @generic R1, R2, R3, R4\n+--- @param mods vim.context.mods\n+--- @param f fun(): R1, R2, R3, R4\n+--- @return R1, R2, R3, R4\n+function vim.__with(mods, f) end",
            "html_url": "https://github.com/neovim/neovim/pull/29168#discussion_r1624805333",
            "id": 1624805333,
            "in_reply_to_id": 1624802444,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5g2I_V",
            "original_commit_id": "35d12388aa46d6d26c40806941216eeb9aa43fc8",
            "original_line": 36,
            "original_position": 23,
            "original_start_line": null,
            "path": "runtime/lua/vim/_meta/misc.lua",
            "position": null,
            "pull_request_review_id": 2094458557,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29168",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1624805333/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-06-03T17:16:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1624805333",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29168#discussion_r1625067687"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29168"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1625067687"
                }
            },
            "author_association": "MEMBER",
            "body": "Nothing that can't be addressed with a comment.",
            "commit_id": "b1a39e4d66957fe6ecb4340e32298816a72eded2",
            "created_at": "2024-06-03T21:25:08Z",
            "diff_hunk": "@@ -14,3 +14,23 @@\n --- @param ... any\n --- @return any\n function vim.call(func, ...) end\n+\n+--- @class vim.context.mods\n+--- @field sandbox? boolean\n+--- @field noautocmd? boolean\n+--- @field hide? boolean\n+--- @field horizontal? boolean\n+--- @field keepalt? boolean\n+--- @field keepjumps? boolean\n+--- @field keepmarks? boolean\n+--- @field keeppatterns? boolean\n+--- @field lockmarks? boolean\n+---\n+--- @field buf? integer\n+--- @field win? integer\n+\n+--- @generic R1, R2, R3, R4\n+--- @param mods vim.context.mods\n+--- @param f fun(): R1, R2, R3, R4\n+--- @return R1, R2, R3, R4\n+function vim.__with(mods, f) end",
            "html_url": "https://github.com/neovim/neovim/pull/29168#discussion_r1625067687",
            "id": 1625067687,
            "in_reply_to_id": 1624802444,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5g3JCn",
            "original_commit_id": "35d12388aa46d6d26c40806941216eeb9aa43fc8",
            "original_line": 36,
            "original_position": 23,
            "original_start_line": null,
            "path": "runtime/lua/vim/_meta/misc.lua",
            "position": null,
            "pull_request_review_id": 2094883312,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29168",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1625067687/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-06-03T21:25:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1625067687",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29168#discussion_r1625073714"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29168"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1625073714"
                }
            },
            "author_association": "MEMBER",
            "body": "I just changed the name to `_with_c` to avoid writing a comment instead",
            "commit_id": "b1a39e4d66957fe6ecb4340e32298816a72eded2",
            "created_at": "2024-06-03T21:32:22Z",
            "diff_hunk": "@@ -14,3 +14,23 @@\n --- @param ... any\n --- @return any\n function vim.call(func, ...) end\n+\n+--- @class vim.context.mods\n+--- @field sandbox? boolean\n+--- @field noautocmd? boolean\n+--- @field hide? boolean\n+--- @field horizontal? boolean\n+--- @field keepalt? boolean\n+--- @field keepjumps? boolean\n+--- @field keepmarks? boolean\n+--- @field keeppatterns? boolean\n+--- @field lockmarks? boolean\n+---\n+--- @field buf? integer\n+--- @field win? integer\n+\n+--- @generic R1, R2, R3, R4\n+--- @param mods vim.context.mods\n+--- @param f fun(): R1, R2, R3, R4\n+--- @return R1, R2, R3, R4\n+function vim.__with(mods, f) end",
            "html_url": "https://github.com/neovim/neovim/pull/29168#discussion_r1625073714",
            "id": 1625073714,
            "in_reply_to_id": 1624802444,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5g3Kgy",
            "original_commit_id": "35d12388aa46d6d26c40806941216eeb9aa43fc8",
            "original_line": 36,
            "original_position": 23,
            "original_start_line": null,
            "path": "runtime/lua/vim/_meta/misc.lua",
            "position": null,
            "pull_request_review_id": 2094893265,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29168",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1625073714/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-06-03T21:32:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1625073714",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29168#discussion_r1625078983"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29168"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1625078983"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n      vim.api.nvim_set_option_value(k, v, { scope = 'local', win = context.win, buf = context.buf })\r\n```\r\n\r\nI think this should take care of setting the properly scoped option values whenever `win/buf/neither` is passed? Same with `nvim_get_option_value`.",
            "commit_id": "b1a39e4d66957fe6ecb4340e32298816a72eded2",
            "created_at": "2024-06-03T21:38:35Z",
            "diff_hunk": "@@ -1139,4 +1139,24 @@ function vim._defer_require(root, mod)\n   })\n end\n \n+--- @private\n+function vim._with(context, f)\n+  -- vim._with({ options = { isfname = vim.o.isfname .. ',@-@' } }, function() end)\n+  local previous_options = {}\n+  if context.options then\n+    for k, v in pairs(context.options) do\n+      previous_options[k] = vim.o[k]\n+      vim.o[k] = v",
            "html_url": "https://github.com/neovim/neovim/pull/29168#discussion_r1625078983",
            "id": 1625078983,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5g3LzH",
            "original_commit_id": "916725adf4162006cb809a7391d87c8d18972266",
            "original_line": 1160,
            "original_position": 11,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": null,
            "pull_request_review_id": 2094901883,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29168",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1625078983/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-06-03T21:38:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1625078983",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/31730729?v=4",
                "events_url": "https://api.github.com/users/luukvbaal/events{/privacy}",
                "followers_url": "https://api.github.com/users/luukvbaal/followers",
                "following_url": "https://api.github.com/users/luukvbaal/following{/other_user}",
                "gists_url": "https://api.github.com/users/luukvbaal/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/luukvbaal",
                "id": 31730729,
                "login": "luukvbaal",
                "node_id": "MDQ6VXNlcjMxNzMwNzI5",
                "organizations_url": "https://api.github.com/users/luukvbaal/orgs",
                "received_events_url": "https://api.github.com/users/luukvbaal/received_events",
                "repos_url": "https://api.github.com/users/luukvbaal/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/luukvbaal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/luukvbaal/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/luukvbaal"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29168#discussion_r1625612923"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29168"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1625612923"
                }
            },
            "author_association": "MEMBER",
            "body": "Minor nit but I would only assign `previous_options` if `context.options` is defined. Then the condition on line 1155 can change to `if previous_options then`.\r\n\r\nThis avoids having to allocate the table if `context.options` isn't passed.",
            "commit_id": "b1a39e4d66957fe6ecb4340e32298816a72eded2",
            "created_at": "2024-06-04T08:44:04Z",
            "diff_hunk": "@@ -1139,4 +1139,24 @@ function vim._defer_require(root, mod)\n   })\n end\n \n+--- @private\n+function vim._with(context, f)\n+  -- vim._with({ options = { isfname = vim.o.isfname .. ',@-@' } }, function() end)\n+  local previous_options = {}\n+  if context.options then",
            "html_url": "https://github.com/neovim/neovim/pull/29168#discussion_r1625612923",
            "id": 1625612923,
            "line": 1199,
            "node_id": "PRRC_kwDOAPphoM5g5OJ7",
            "original_commit_id": "916725adf4162006cb809a7391d87c8d18972266",
            "original_line": 1199,
            "original_position": 8,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": 61,
            "pull_request_review_id": 2095742717,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29168",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1625612923/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-06-04T08:44:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1625612923",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29168#discussion_r1625614899"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29168"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1625614899"
                }
            },
            "author_association": "MEMBER",
            "body": "This is exactly the sort of thing we need to test for. Changing via `vim.o` won't work properly if `buf` or `win` is passed.",
            "commit_id": "b1a39e4d66957fe6ecb4340e32298816a72eded2",
            "created_at": "2024-06-04T08:45:33Z",
            "diff_hunk": "@@ -1139,4 +1139,24 @@ function vim._defer_require(root, mod)\n   })\n end\n \n+--- @private\n+function vim._with(context, f)\n+  -- vim._with({ options = { isfname = vim.o.isfname .. ',@-@' } }, function() end)\n+  local previous_options = {}\n+  if context.options then\n+    for k, v in pairs(context.options) do\n+      previous_options[k] = vim.o[k]\n+      vim.o[k] = v",
            "html_url": "https://github.com/neovim/neovim/pull/29168#discussion_r1625614899",
            "id": 1625614899,
            "in_reply_to_id": 1625078983,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5g5Ooz",
            "original_commit_id": "916725adf4162006cb809a7391d87c8d18972266",
            "original_line": 1160,
            "original_position": 11,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": null,
            "pull_request_review_id": 2095745971,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29168",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1625614899/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-06-04T08:45:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1625614899",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29168#discussion_r1627557627"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29168"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1627557627"
                }
            },
            "author_association": "MEMBER",
            "body": "Unsure what you mean, running\r\n\r\n```lua\r\nvim._with({buf = 1, options = { spelllang = \"fr\" }}, function() end)\r\nvim.cmd[[set spelllang?]]\r\n```\r\n\r\nprints `en` which is the expected value.",
            "commit_id": "b1a39e4d66957fe6ecb4340e32298816a72eded2",
            "created_at": "2024-06-05T11:18:29Z",
            "diff_hunk": "@@ -1139,4 +1139,24 @@ function vim._defer_require(root, mod)\n   })\n end\n \n+--- @private\n+function vim._with(context, f)\n+  -- vim._with({ options = { isfname = vim.o.isfname .. ',@-@' } }, function() end)\n+  local previous_options = {}\n+  if context.options then\n+    for k, v in pairs(context.options) do\n+      previous_options[k] = vim.o[k]\n+      vim.o[k] = v",
            "html_url": "https://github.com/neovim/neovim/pull/29168#discussion_r1627557627",
            "id": 1627557627,
            "in_reply_to_id": 1625078983,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5hAo77",
            "original_commit_id": "916725adf4162006cb809a7391d87c8d18972266",
            "original_line": 1160,
            "original_position": 11,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": null,
            "pull_request_review_id": 2098840055,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29168",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1627557627/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-06-05T11:18:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1627557627",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29168#discussion_r1627559317"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29168"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1627559317"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes, but now try it with a `win` context. (And test whether `fr` is set _only_ for buffer `1`.)",
            "commit_id": "b1a39e4d66957fe6ecb4340e32298816a72eded2",
            "created_at": "2024-06-05T11:19:44Z",
            "diff_hunk": "@@ -1139,4 +1139,24 @@ function vim._defer_require(root, mod)\n   })\n end\n \n+--- @private\n+function vim._with(context, f)\n+  -- vim._with({ options = { isfname = vim.o.isfname .. ',@-@' } }, function() end)\n+  local previous_options = {}\n+  if context.options then\n+    for k, v in pairs(context.options) do\n+      previous_options[k] = vim.o[k]\n+      vim.o[k] = v",
            "html_url": "https://github.com/neovim/neovim/pull/29168#discussion_r1627559317",
            "id": 1627559317,
            "in_reply_to_id": 1625078983,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5hApWV",
            "original_commit_id": "916725adf4162006cb809a7391d87c8d18972266",
            "original_line": 1160,
            "original_position": 11,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": null,
            "pull_request_review_id": 2098842432,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29168",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1627559317/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-06-05T11:20:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1627559317",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29168#discussion_r1627666302"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29168"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1627666302"
                }
            },
            "author_association": "MEMBER",
            "body": "OK, I could recreate the problem. We can't use `scope` together with `buf` though so will need to throw that out.",
            "commit_id": "b1a39e4d66957fe6ecb4340e32298816a72eded2",
            "created_at": "2024-06-05T12:26:46Z",
            "diff_hunk": "@@ -1139,4 +1139,24 @@ function vim._defer_require(root, mod)\n   })\n end\n \n+--- @private\n+function vim._with(context, f)\n+  -- vim._with({ options = { isfname = vim.o.isfname .. ',@-@' } }, function() end)\n+  local previous_options = {}\n+  if context.options then\n+    for k, v in pairs(context.options) do\n+      previous_options[k] = vim.o[k]\n+      vim.o[k] = v",
            "html_url": "https://github.com/neovim/neovim/pull/29168#discussion_r1627666302",
            "id": 1627666302,
            "in_reply_to_id": 1625078983,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5hBDd-",
            "original_commit_id": "916725adf4162006cb809a7391d87c8d18972266",
            "original_line": 1160,
            "original_position": 11,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": null,
            "pull_request_review_id": 2098992278,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29168",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1627666302/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-06-05T12:26:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1627666302",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29168#discussion_r1627775427"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29168"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1627775427"
                }
            },
            "author_association": "MEMBER",
            "body": "Need to check return value",
            "commit_id": "b1a39e4d66957fe6ecb4340e32298816a72eded2",
            "created_at": "2024-06-05T13:21:48Z",
            "diff_hunk": "@@ -568,6 +572,96 @@ static int nlua_foldupdate(lua_State *lstate)\n   return 0;\n }\n \n+static int nlua_with(lua_State *L)\n+{\n+  int flags = 0;\n+  buf_T *buf = NULL;\n+  win_T *win = NULL;\n+\n+#define APPLY_FLAG(key, flag) \\\n+  if (strequal((key), k) && (v)) { \\\n+    flags |= (flag); \\\n+  }\n+\n+  luaL_argcheck(L, lua_istable(L, 1), 1, \"table expected\");\n+  lua_pushnil(L);  // [dict, ..., nil]\n+  while (lua_next(L, 1)) {\n+    // [dict, ..., key, value]\n+    if (lua_type(L, -2) == LUA_TSTRING) {\n+      const char *k = lua_tostring(L, -2);\n+      bool v = lua_toboolean(L, -1);\n+      if (strequal(\"buf\", k)) { \\\n+        buf = handle_get_buffer((int)luaL_checkinteger(L, -1));\n+      } else if (strequal(\"win\", k)) { \\\n+        win = handle_get_window((int)luaL_checkinteger(L, -1));\n+      } else {\n+        APPLY_FLAG(\"sandbox\", CMOD_SANDBOX);\n+        APPLY_FLAG(\"noautocmd\", CMOD_NOAUTOCMD);\n+        APPLY_FLAG(\"hide\", CMOD_HIDE);\n+        APPLY_FLAG(\"keepalt\", CMOD_KEEPALT);\n+        APPLY_FLAG(\"keepjumps\", CMOD_KEEPJUMPS);\n+        APPLY_FLAG(\"keepmarks\", CMOD_KEEPMARKS);\n+        APPLY_FLAG(\"keeppatterns\", CMOD_KEEPPATTERNS);\n+        APPLY_FLAG(\"lockmarks\", CMOD_LOCKMARKS);\n+      }\n+    }\n+    // pop the value; lua_next will pop the key.\n+    lua_pop(L, 1);  // [dict, ..., key]\n+  }\n+\n+  cmdmod_T save_cmdmod = cmdmod;\n+  cmdmod.cmod_flags = flags;\n+  apply_cmdmod(&cmdmod);\n+\n+  if (buf || win) {\n+    try_start();\n+  }\n+\n+  aco_save_T aco;\n+  if (buf) {\n+    aucmd_prepbuf(&aco, buf);\n+  }\n+\n+  win_execute_T win_execute_args;\n+  if (win) {\n+    tabpage_T *tabpage = win_find_tabpage(win);\n+    win_execute_before(&win_execute_args, win, tabpage);",
            "html_url": "https://github.com/neovim/neovim/pull/29168#discussion_r1627775427",
            "id": 1627775427,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5hBeHD",
            "original_commit_id": "18739be8b7d9e23310a9e28e3073e98e1ed4b258",
            "original_line": 628,
            "original_position": 79,
            "original_start_line": null,
            "path": "src/nvim/lua/stdlib.c",
            "position": null,
            "pull_request_review_id": 2099178783,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29168",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1627775427/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-06-05T13:21:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1627775427",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29168#discussion_r1627850261"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29168"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1627850261"
                }
            },
            "author_association": "MEMBER",
            "body": "If `win` is specified, it overrides the effect of `aucmd_prepbuf()`, so it's better not to call `aucmd_prepbuf()` at all. Also, `try_end()` and `undo_cmdmod()` need to be executed when `win_execute_before()` fails, so there should be a `goto` instead of a `return -1`.",
            "commit_id": "b1a39e4d66957fe6ecb4340e32298816a72eded2",
            "created_at": "2024-06-05T14:00:24Z",
            "diff_hunk": "@@ -568,6 +572,98 @@ static int nlua_foldupdate(lua_State *lstate)\n   return 0;\n }\n \n+static int nlua_with(lua_State *L)\n+{\n+  int flags = 0;\n+  buf_T *buf = NULL;\n+  win_T *win = NULL;\n+\n+#define APPLY_FLAG(key, flag) \\\n+  if (strequal((key), k) && (v)) { \\\n+    flags |= (flag); \\\n+  }\n+\n+  luaL_argcheck(L, lua_istable(L, 1), 1, \"table expected\");\n+  lua_pushnil(L);  // [dict, ..., nil]\n+  while (lua_next(L, 1)) {\n+    // [dict, ..., key, value]\n+    if (lua_type(L, -2) == LUA_TSTRING) {\n+      const char *k = lua_tostring(L, -2);\n+      bool v = lua_toboolean(L, -1);\n+      if (strequal(\"buf\", k)) { \\\n+        buf = handle_get_buffer((int)luaL_checkinteger(L, -1));\n+      } else if (strequal(\"win\", k)) { \\\n+        win = handle_get_window((int)luaL_checkinteger(L, -1));\n+      } else {\n+        APPLY_FLAG(\"sandbox\", CMOD_SANDBOX);\n+        APPLY_FLAG(\"noautocmd\", CMOD_NOAUTOCMD);\n+        APPLY_FLAG(\"hide\", CMOD_HIDE);\n+        APPLY_FLAG(\"keepalt\", CMOD_KEEPALT);\n+        APPLY_FLAG(\"keepjumps\", CMOD_KEEPJUMPS);\n+        APPLY_FLAG(\"keepmarks\", CMOD_KEEPMARKS);\n+        APPLY_FLAG(\"keeppatterns\", CMOD_KEEPPATTERNS);\n+        APPLY_FLAG(\"lockmarks\", CMOD_LOCKMARKS);\n+      }\n+    }\n+    // pop the value; lua_next will pop the key.\n+    lua_pop(L, 1);  // [dict, ..., key]\n+  }\n+\n+  cmdmod_T save_cmdmod = cmdmod;\n+  cmdmod.cmod_flags = flags;\n+  apply_cmdmod(&cmdmod);\n+\n+  if (buf || win) {\n+    try_start();\n+  }\n+\n+  aco_save_T aco;\n+  if (buf) {\n+    aucmd_prepbuf(&aco, buf);\n+  }\n+\n+  win_execute_T win_execute_args;\n+  if (win) {\n+    tabpage_T *tabpage = win_find_tabpage(win);\n+    if (!win_execute_before(&win_execute_args, win, tabpage)) {\n+      return -1;\n+    }\n+  }",
            "html_url": "https://github.com/neovim/neovim/pull/29168#discussion_r1627850261",
            "id": 1627850261,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5hBwYV",
            "original_commit_id": "be885b12408dedc27c0e7dfc69a0f22ee65e6512",
            "original_line": 636,
            "original_position": 82,
            "original_start_line": 620,
            "path": "src/nvim/lua/stdlib.c",
            "position": null,
            "pull_request_review_id": 2099310629,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29168",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1627850261/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-06-05T14:00:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1627850261",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29168#discussion_r1627949343"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29168"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1627949343"
                }
            },
            "author_association": "MEMBER",
            "body": "`win` can't be specified together with `buf` anyway as `vim.api.nvim_get_option_value` throws\r\n\r\n> cannot use both 'buf' and 'win'\r\n\r\nThat said I the tests also don't fail if I remove `aucmd_prepbuf` and `aucmd_restbuf` so I guess it's safe to remove them? Let's try it.",
            "commit_id": "b1a39e4d66957fe6ecb4340e32298816a72eded2",
            "created_at": "2024-06-05T14:57:24Z",
            "diff_hunk": "@@ -568,6 +572,98 @@ static int nlua_foldupdate(lua_State *lstate)\n   return 0;\n }\n \n+static int nlua_with(lua_State *L)\n+{\n+  int flags = 0;\n+  buf_T *buf = NULL;\n+  win_T *win = NULL;\n+\n+#define APPLY_FLAG(key, flag) \\\n+  if (strequal((key), k) && (v)) { \\\n+    flags |= (flag); \\\n+  }\n+\n+  luaL_argcheck(L, lua_istable(L, 1), 1, \"table expected\");\n+  lua_pushnil(L);  // [dict, ..., nil]\n+  while (lua_next(L, 1)) {\n+    // [dict, ..., key, value]\n+    if (lua_type(L, -2) == LUA_TSTRING) {\n+      const char *k = lua_tostring(L, -2);\n+      bool v = lua_toboolean(L, -1);\n+      if (strequal(\"buf\", k)) { \\\n+        buf = handle_get_buffer((int)luaL_checkinteger(L, -1));\n+      } else if (strequal(\"win\", k)) { \\\n+        win = handle_get_window((int)luaL_checkinteger(L, -1));\n+      } else {\n+        APPLY_FLAG(\"sandbox\", CMOD_SANDBOX);\n+        APPLY_FLAG(\"noautocmd\", CMOD_NOAUTOCMD);\n+        APPLY_FLAG(\"hide\", CMOD_HIDE);\n+        APPLY_FLAG(\"keepalt\", CMOD_KEEPALT);\n+        APPLY_FLAG(\"keepjumps\", CMOD_KEEPJUMPS);\n+        APPLY_FLAG(\"keepmarks\", CMOD_KEEPMARKS);\n+        APPLY_FLAG(\"keeppatterns\", CMOD_KEEPPATTERNS);\n+        APPLY_FLAG(\"lockmarks\", CMOD_LOCKMARKS);\n+      }\n+    }\n+    // pop the value; lua_next will pop the key.\n+    lua_pop(L, 1);  // [dict, ..., key]\n+  }\n+\n+  cmdmod_T save_cmdmod = cmdmod;\n+  cmdmod.cmod_flags = flags;\n+  apply_cmdmod(&cmdmod);\n+\n+  if (buf || win) {\n+    try_start();\n+  }\n+\n+  aco_save_T aco;\n+  if (buf) {\n+    aucmd_prepbuf(&aco, buf);\n+  }\n+\n+  win_execute_T win_execute_args;\n+  if (win) {\n+    tabpage_T *tabpage = win_find_tabpage(win);\n+    if (!win_execute_before(&win_execute_args, win, tabpage)) {\n+      return -1;\n+    }\n+  }",
            "html_url": "https://github.com/neovim/neovim/pull/29168#discussion_r1627949343",
            "id": 1627949343,
            "in_reply_to_id": 1627850261,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5hCIkf",
            "original_commit_id": "be885b12408dedc27c0e7dfc69a0f22ee65e6512",
            "original_line": 636,
            "original_position": 82,
            "original_start_line": 620,
            "path": "src/nvim/lua/stdlib.c",
            "position": null,
            "pull_request_review_id": 2099474441,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29168",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1627949343/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-06-05T14:57:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1627949343",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29168#discussion_r1627950177"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29168"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1627950177"
                }
            },
            "author_association": "MEMBER",
            "body": "You can use an `} else if (buf) {`",
            "commit_id": "b1a39e4d66957fe6ecb4340e32298816a72eded2",
            "created_at": "2024-06-05T14:57:54Z",
            "diff_hunk": "@@ -568,6 +572,98 @@ static int nlua_foldupdate(lua_State *lstate)\n   return 0;\n }\n \n+static int nlua_with(lua_State *L)\n+{\n+  int flags = 0;\n+  buf_T *buf = NULL;\n+  win_T *win = NULL;\n+\n+#define APPLY_FLAG(key, flag) \\\n+  if (strequal((key), k) && (v)) { \\\n+    flags |= (flag); \\\n+  }\n+\n+  luaL_argcheck(L, lua_istable(L, 1), 1, \"table expected\");\n+  lua_pushnil(L);  // [dict, ..., nil]\n+  while (lua_next(L, 1)) {\n+    // [dict, ..., key, value]\n+    if (lua_type(L, -2) == LUA_TSTRING) {\n+      const char *k = lua_tostring(L, -2);\n+      bool v = lua_toboolean(L, -1);\n+      if (strequal(\"buf\", k)) { \\\n+        buf = handle_get_buffer((int)luaL_checkinteger(L, -1));\n+      } else if (strequal(\"win\", k)) { \\\n+        win = handle_get_window((int)luaL_checkinteger(L, -1));\n+      } else {\n+        APPLY_FLAG(\"sandbox\", CMOD_SANDBOX);\n+        APPLY_FLAG(\"noautocmd\", CMOD_NOAUTOCMD);\n+        APPLY_FLAG(\"hide\", CMOD_HIDE);\n+        APPLY_FLAG(\"keepalt\", CMOD_KEEPALT);\n+        APPLY_FLAG(\"keepjumps\", CMOD_KEEPJUMPS);\n+        APPLY_FLAG(\"keepmarks\", CMOD_KEEPMARKS);\n+        APPLY_FLAG(\"keeppatterns\", CMOD_KEEPPATTERNS);\n+        APPLY_FLAG(\"lockmarks\", CMOD_LOCKMARKS);\n+      }\n+    }\n+    // pop the value; lua_next will pop the key.\n+    lua_pop(L, 1);  // [dict, ..., key]\n+  }\n+\n+  cmdmod_T save_cmdmod = cmdmod;\n+  cmdmod.cmod_flags = flags;\n+  apply_cmdmod(&cmdmod);\n+\n+  if (buf || win) {\n+    try_start();\n+  }\n+\n+  aco_save_T aco;\n+  if (buf) {\n+    aucmd_prepbuf(&aco, buf);\n+  }\n+\n+  win_execute_T win_execute_args;\n+  if (win) {\n+    tabpage_T *tabpage = win_find_tabpage(win);\n+    if (!win_execute_before(&win_execute_args, win, tabpage)) {\n+      return -1;\n+    }\n+  }",
            "html_url": "https://github.com/neovim/neovim/pull/29168#discussion_r1627950177",
            "id": 1627950177,
            "in_reply_to_id": 1627850261,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5hCIxh",
            "original_commit_id": "be885b12408dedc27c0e7dfc69a0f22ee65e6512",
            "original_line": 636,
            "original_position": 82,
            "original_start_line": 620,
            "path": "src/nvim/lua/stdlib.c",
            "position": null,
            "pull_request_review_id": 2099475825,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29168",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1627950177/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-06-05T14:57:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1627950177",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29168#discussion_r1627956451"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29168"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1627956451"
                }
            },
            "author_association": "MEMBER",
            "body": "These two tests only check the `vim._with()` restores original window/buffer. They don't check if the current window/buffer is indeed the given ones when the code is executed.",
            "commit_id": "b1a39e4d66957fe6ecb4340e32298816a72eded2",
            "created_at": "2024-06-05T15:01:41Z",
            "diff_hunk": "@@ -0,0 +1,74 @@\n+local t = require('test.testutil')\n+local n = require('test.functional.testnvim')()\n+\n+local exec_lua = n.exec_lua\n+\n+before_each(function()\n+  n.clear()\n+end)\n+\n+describe('vim._with resets', function()\n+  it('buffer', function()\n+    local ids = exec_lua [[\n+      prev = vim.api.nvim_get_current_buf()\n+      vim.cmd.new()\n+      before = vim.api.nvim_get_current_buf()\n+      vim._with({buf = prev}, function() end)\n+      after = vim.api.nvim_get_current_buf()\n+      return {before, after}\n+    ]]\n+    t.eq(ids[1], ids[2])\n+  end)\n+\n+  it('window', function()\n+    local ids = exec_lua [[\n+      prev = vim.api.nvim_get_current_win()\n+      vim.cmd.new()\n+      before = vim.api.nvim_get_current_win()\n+      vim._with({win = prev}, function() end)\n+      after = vim.api.nvim_get_current_win()\n+      return {before, after}\n+    ]]\n+    t.eq(ids[1], ids[2])\n+  end)",
            "html_url": "https://github.com/neovim/neovim/pull/29168#discussion_r1627956451",
            "id": 1627956451,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5hCKTj",
            "original_commit_id": "25671e2e4eb038c4372dc6631f3cb9a44caaa8e2",
            "original_line": 145,
            "original_position": 33,
            "original_start_line": 11,
            "path": "test/functional/lua/with_spec.lua",
            "position": null,
            "pull_request_review_id": 2099485688,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29168",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1627956451/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-06-05T15:02:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1627956451",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29168#discussion_r1630030899"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29168"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1630030899"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    if not (type(context.buf) == 'number' and vim.api.nvim_buf_is_valid(context.buf)) then\r\n```\r\n\r\nThis will give nicer error messages if `context.buf` is not a number.\r\n\r\nSame for `context.win` check.",
            "commit_id": "b1a39e4d66957fe6ecb4340e32298816a72eded2",
            "created_at": "2024-06-06T18:34:39Z",
            "diff_hunk": "@@ -1139,4 +1139,61 @@ function vim._defer_require(root, mod)\n   })\n end\n \n+--- @nodoc\n+--- @class vim.context.mods\n+--- @field sandbox? boolean\n+--- @field noautocmd? boolean\n+--- @field hide? boolean\n+--- @field horizontal? boolean\n+--- @field keepalt? boolean\n+--- @field keepjumps? boolean\n+--- @field keepmarks? boolean\n+--- @field keeppatterns? boolean\n+--- @field lockmarks? boolean\n+---\n+--- @field buf? integer\n+--- @field win? integer\n+---\n+--- @field options? table<string, any>\n+\n+--- Wrapper over the `vim._with_c` function to restore editor state that is difficult to do from\n+--- the C code.\n+---\n+--- @param context vim.context.mods\n+function vim._with(context, f)\n+  -- Check buffer exists\n+  if context.buf then\n+    if not vim.api.nvim_buf_is_valid(context.buf) then",
            "html_url": "https://github.com/neovim/neovim/pull/29168#discussion_r1630030899",
            "id": 1630030899,
            "line": 1185,
            "node_id": "PRRC_kwDOAPphoM5hKEwz",
            "original_commit_id": "8c97ad4ff73c50b01864101e8695bf67848a3819",
            "original_line": 1185,
            "original_position": 28,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": 47,
            "pull_request_review_id": 2102901633,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29168",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1630030899/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-06-06T18:34:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1630030899",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29168#discussion_r1630063998"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29168"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1630063998"
                }
            },
            "author_association": "MEMBER",
            "body": "This is internal for now so callers are expected to call this with correct argument types. Gating with extra conditions can hide bugs in other code. So check with `vim.validate` or not at all.",
            "commit_id": "b1a39e4d66957fe6ecb4340e32298816a72eded2",
            "created_at": "2024-06-06T18:57:18Z",
            "diff_hunk": "@@ -1139,4 +1139,61 @@ function vim._defer_require(root, mod)\n   })\n end\n \n+--- @nodoc\n+--- @class vim.context.mods\n+--- @field sandbox? boolean\n+--- @field noautocmd? boolean\n+--- @field hide? boolean\n+--- @field horizontal? boolean\n+--- @field keepalt? boolean\n+--- @field keepjumps? boolean\n+--- @field keepmarks? boolean\n+--- @field keeppatterns? boolean\n+--- @field lockmarks? boolean\n+---\n+--- @field buf? integer\n+--- @field win? integer\n+---\n+--- @field options? table<string, any>\n+\n+--- Wrapper over the `vim._with_c` function to restore editor state that is difficult to do from\n+--- the C code.\n+---\n+--- @param context vim.context.mods\n+function vim._with(context, f)\n+  -- Check buffer exists\n+  if context.buf then\n+    if not vim.api.nvim_buf_is_valid(context.buf) then",
            "html_url": "https://github.com/neovim/neovim/pull/29168#discussion_r1630063998",
            "id": 1630063998,
            "in_reply_to_id": 1630030899,
            "line": 1185,
            "node_id": "PRRC_kwDOAPphoM5hKM1-",
            "original_commit_id": "8c97ad4ff73c50b01864101e8695bf67848a3819",
            "original_line": 1185,
            "original_position": 28,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": 47,
            "pull_request_review_id": 2102979965,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29168",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1630063998/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-06-06T18:57:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1630063998",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29168#discussion_r1631626589"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29168"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631626589"
                }
            },
            "author_association": "MEMBER",
            "body": "This case is a very nice improvement compared to the old code!",
            "commit_id": "b1a39e4d66957fe6ecb4340e32298816a72eded2",
            "created_at": "2024-06-07T19:48:18Z",
            "diff_hunk": "@@ -194,14 +194,9 @@ local function toggle_lines(line_start, line_end, ref_position)\n   -- - Debatable for highlighting in text area (like LSP semantic tokens).\n   --   Mostly because it causes flicker as highlighting is preserved during\n   --   comment toggling.\n-  package.loaded['vim._comment']._lines = vim.tbl_map(f, lines)\n-  local lua_cmd = string.format(\n-    'vim.api.nvim_buf_set_lines(0, %d, %d, false, package.loaded[\"vim._comment\"]._lines)',\n-    line_start - 1,\n-    line_end\n-  )\n-  vim.cmd.lua({ lua_cmd, mods = { lockmarks = true } })\n-  package.loaded['vim._comment']._lines = nil\n+  vim._with({ lockmarks = true }, function()\n+    vim.api.nvim_buf_set_lines(0, line_start - 1, line_end, false, vim.tbl_map(f, lines))",
            "html_url": "https://github.com/neovim/neovim/pull/29168#discussion_r1631626589",
            "id": 1631626589,
            "line": 198,
            "node_id": "PRRC_kwDOAPphoM5hQKVd",
            "original_commit_id": "4685e6d73336f80e3c73a085c9b3b8b1433070f1",
            "original_line": 198,
            "original_position": 13,
            "original_start_line": null,
            "path": "runtime/lua/vim/_comment.lua",
            "position": 13,
            "pull_request_review_id": 2105262708,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29168",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631626589/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-06-07T19:48:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631626589",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29168#discussion_r1631630602"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29168"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631630602"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n--- Executes function `f` with the given context specification.\r\n```",
            "commit_id": "b1a39e4d66957fe6ecb4340e32298816a72eded2",
            "created_at": "2024-06-07T19:52:49Z",
            "diff_hunk": "@@ -1139,4 +1139,77 @@ function vim._defer_require(root, mod)\n   })\n end\n \n+--- @nodoc\n+--- @class vim.context.mods\n+--- @field buf? integer\n+--- @field hide? boolean\n+--- @field horizontal? boolean\n+--- @field keepalt? boolean\n+--- @field keepjumps? boolean\n+--- @field keepmarks? boolean\n+--- @field keeppatterns? boolean\n+--- @field lockmarks? boolean\n+--- @field noautocmd? boolean\n+--- @field options? table<string, any>\n+--- @field sandbox? boolean\n+--- @field win? integer\n+\n+--- Wrapper over the `vim._with_c` function to restore editor state that is difficult to do from\n+--- the C code.",
            "html_url": "https://github.com/neovim/neovim/pull/29168#discussion_r1631630602",
            "id": 1631630602,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5hQLUK",
            "original_commit_id": "4685e6d73336f80e3c73a085c9b3b8b1433070f1",
            "original_line": 1158,
            "original_position": 20,
            "original_start_line": 1157,
            "path": "runtime/lua/vim/shared.lua",
            "position": null,
            "pull_request_review_id": 2105269018,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29168",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631630602/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-06-07T19:53:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631630602",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29168#discussion_r1631637335"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29168"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631637335"
                }
            },
            "author_association": "MEMBER",
            "body": "Was given a suggestion to end the function in varargs for the arguments for `f`, similarly to `pcall`, aka\r\n\r\n```\r\nvim._with(context, f, a, b)\r\n```\r\n\r\nwould return the value of `f(a,b)`. Another suggestion if we wanted to avoid varargs would be to add an optional `args` field to `context` that could contain the arguments. I think both sound good, and went with the varargs options for the time being. Since `vim._with` is private for now we can afford to experiment/dogfood and update it if we don't like it.",
            "commit_id": "b1a39e4d66957fe6ecb4340e32298816a72eded2",
            "created_at": "2024-06-07T20:01:22Z",
            "diff_hunk": "@@ -1139,4 +1139,76 @@ function vim._defer_require(root, mod)\n   })\n end\n \n+--- @nodoc\n+--- @class vim.context.mods\n+--- @field buf? integer\n+--- @field hide? boolean\n+--- @field horizontal? boolean\n+--- @field keepalt? boolean\n+--- @field keepjumps? boolean\n+--- @field keepmarks? boolean\n+--- @field keeppatterns? boolean\n+--- @field lockmarks? boolean\n+--- @field noautocmd? boolean\n+--- @field options? table<string, any>\n+--- @field sandbox? boolean\n+--- @field win? integer\n+\n+--- Executes function `f` with the given context specification.\n+---\n+--- @param context vim.context.mods\n+function vim._with(context, f, ...)",
            "html_url": "https://github.com/neovim/neovim/pull/29168#discussion_r1631637335",
            "id": 1631637335,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5hQM9X",
            "original_commit_id": "91bfdb561f205b18cd21e81ec3d21f0977c21c5d",
            "original_line": 1160,
            "original_position": 22,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": null,
            "pull_request_review_id": 2105279816,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29168",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631637335/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-06-07T20:02:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631637335",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29168#discussion_r1631640700"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29168"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631640700"
                }
            },
            "author_association": "MEMBER",
            "body": "It was what motivated the original PR, so not a coincidence ;)",
            "commit_id": "b1a39e4d66957fe6ecb4340e32298816a72eded2",
            "created_at": "2024-06-07T20:05:58Z",
            "diff_hunk": "@@ -194,14 +194,9 @@ local function toggle_lines(line_start, line_end, ref_position)\n   -- - Debatable for highlighting in text area (like LSP semantic tokens).\n   --   Mostly because it causes flicker as highlighting is preserved during\n   --   comment toggling.\n-  package.loaded['vim._comment']._lines = vim.tbl_map(f, lines)\n-  local lua_cmd = string.format(\n-    'vim.api.nvim_buf_set_lines(0, %d, %d, false, package.loaded[\"vim._comment\"]._lines)',\n-    line_start - 1,\n-    line_end\n-  )\n-  vim.cmd.lua({ lua_cmd, mods = { lockmarks = true } })\n-  package.loaded['vim._comment']._lines = nil\n+  vim._with({ lockmarks = true }, function()\n+    vim.api.nvim_buf_set_lines(0, line_start - 1, line_end, false, vim.tbl_map(f, lines))",
            "html_url": "https://github.com/neovim/neovim/pull/29168#discussion_r1631640700",
            "id": 1631640700,
            "in_reply_to_id": 1631626589,
            "line": 198,
            "node_id": "PRRC_kwDOAPphoM5hQNx8",
            "original_commit_id": "4685e6d73336f80e3c73a085c9b3b8b1433070f1",
            "original_line": 198,
            "original_position": 13,
            "original_start_line": null,
            "path": "runtime/lua/vim/_comment.lua",
            "position": 13,
            "pull_request_review_id": 2105285346,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29168",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631640700/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-06-07T20:05:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631640700",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29168#discussion_r1631640928"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29168"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631640928"
                }
            },
            "author_association": "MEMBER",
            "body": "> suggestion to end the function in varargs for the arguments for `f`, similarly to `pcall`\r\n\r\nthat pcall \"feature\" makes it hard add overloads in the future. I think we should avoid that for now. It's a pretty low-value feature that really restricts flexibility in the future.\r\n\r\n> add an optional `args` field to `context` that could contain the arguments\r\n\r\nthat sounds preferrable. varargs is rarely needed. args can be passed as a single table instead.\r\n\r\nbut still I would wait on it. what's wrong with passing a closure?",
            "commit_id": "b1a39e4d66957fe6ecb4340e32298816a72eded2",
            "created_at": "2024-06-07T20:06:18Z",
            "diff_hunk": "@@ -1139,4 +1139,76 @@ function vim._defer_require(root, mod)\n   })\n end\n \n+--- @nodoc\n+--- @class vim.context.mods\n+--- @field buf? integer\n+--- @field hide? boolean\n+--- @field horizontal? boolean\n+--- @field keepalt? boolean\n+--- @field keepjumps? boolean\n+--- @field keepmarks? boolean\n+--- @field keeppatterns? boolean\n+--- @field lockmarks? boolean\n+--- @field noautocmd? boolean\n+--- @field options? table<string, any>\n+--- @field sandbox? boolean\n+--- @field win? integer\n+\n+--- Executes function `f` with the given context specification.\n+---\n+--- @param context vim.context.mods\n+function vim._with(context, f, ...)",
            "html_url": "https://github.com/neovim/neovim/pull/29168#discussion_r1631640928",
            "id": 1631640928,
            "in_reply_to_id": 1631637335,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5hQN1g",
            "original_commit_id": "91bfdb561f205b18cd21e81ec3d21f0977c21c5d",
            "original_line": 1160,
            "original_position": 22,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": null,
            "pull_request_review_id": 2105285689,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29168",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631640928/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-06-07T20:09:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631640928",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29168#discussion_r1631645453"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29168"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631645453"
                }
            },
            "author_association": "MEMBER",
            "body": "I copy pasted the tests for `nvim_buf_call` and `nvim_win_call` and used `vim._with` instead. It's a bit code duplication but it's fine since it's for tests IMO. This means testing for the contexts for `buf`, `win` and `options` are pretty much covered. I threw in a test for `:lockmarks` since it was the original justification for this apparently. I haven't added tests for the 500 other context options but I figure we can work on this in further iterations as to not block this PR.",
            "commit_id": "b1a39e4d66957fe6ecb4340e32298816a72eded2",
            "created_at": "2024-06-07T20:12:05Z",
            "diff_hunk": "@@ -0,0 +1,296 @@\n+local t = require('test.testutil')\n+local n = require('test.functional.testnvim')()\n+local Screen = require('test.functional.ui.screen')\n+\n+local fn = n.fn\n+local api = n.api\n+local command = n.command\n+local eq = t.eq\n+local exec_lua = n.exec_lua\n+local matches = t.matches\n+local pcall_err = t.pcall_err\n+\n+before_each(function()\n+  n.clear()\n+end)\n+\n+describe('vim._with {win = }', function()",
            "html_url": "https://github.com/neovim/neovim/pull/29168#discussion_r1631645453",
            "id": 1631645453,
            "line": 132,
            "node_id": "PRRC_kwDOAPphoM5hQO8N",
            "original_commit_id": "91bfdb561f205b18cd21e81ec3d21f0977c21c5d",
            "original_line": 132,
            "original_position": 17,
            "original_start_line": null,
            "path": "test/functional/lua/with_spec.lua",
            "position": 132,
            "pull_request_review_id": 2105292705,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29168",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631645453/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-06-07T20:13:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631645453",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29168#discussion_r1631645685"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29168"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631645685"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "not sure about the internals\r\nbut do we need this at all?\r\ncouldn't you just do `vim._with(context, function() return f(a,b))`?",
            "commit_id": "b1a39e4d66957fe6ecb4340e32298816a72eded2",
            "created_at": "2024-06-07T20:12:23Z",
            "diff_hunk": "@@ -1139,4 +1139,76 @@ function vim._defer_require(root, mod)\n   })\n end\n \n+--- @nodoc\n+--- @class vim.context.mods\n+--- @field buf? integer\n+--- @field hide? boolean\n+--- @field horizontal? boolean\n+--- @field keepalt? boolean\n+--- @field keepjumps? boolean\n+--- @field keepmarks? boolean\n+--- @field keeppatterns? boolean\n+--- @field lockmarks? boolean\n+--- @field noautocmd? boolean\n+--- @field options? table<string, any>\n+--- @field sandbox? boolean\n+--- @field win? integer\n+\n+--- Executes function `f` with the given context specification.\n+---\n+--- @param context vim.context.mods\n+function vim._with(context, f, ...)",
            "html_url": "https://github.com/neovim/neovim/pull/29168#discussion_r1631645685",
            "id": 1631645685,
            "in_reply_to_id": 1631637335,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5hQO_1",
            "original_commit_id": "91bfdb561f205b18cd21e81ec3d21f0977c21c5d",
            "original_line": 1160,
            "original_position": 22,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": null,
            "pull_request_review_id": 2105293086,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29168",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631645685/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-06-07T20:12:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631645685",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/81827001?v=4",
                "events_url": "https://api.github.com/users/max397574/events{/privacy}",
                "followers_url": "https://api.github.com/users/max397574/followers",
                "following_url": "https://api.github.com/users/max397574/following{/other_user}",
                "gists_url": "https://api.github.com/users/max397574/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/max397574",
                "id": 81827001,
                "login": "max397574",
                "node_id": "MDQ6VXNlcjgxODI3MDAx",
                "organizations_url": "https://api.github.com/users/max397574/orgs",
                "received_events_url": "https://api.github.com/users/max397574/received_events",
                "repos_url": "https://api.github.com/users/max397574/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/max397574/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/max397574/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/max397574"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29168#discussion_r1631649845"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29168"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631649845"
                }
            },
            "author_association": "MEMBER",
            "body": "I noticed :) I think this is the right decision. Hopefully we can deprecate `nvim_buf_call` and `nvim_win_call` soon...",
            "commit_id": "b1a39e4d66957fe6ecb4340e32298816a72eded2",
            "created_at": "2024-06-07T20:17:43Z",
            "diff_hunk": "@@ -0,0 +1,296 @@\n+local t = require('test.testutil')\n+local n = require('test.functional.testnvim')()\n+local Screen = require('test.functional.ui.screen')\n+\n+local fn = n.fn\n+local api = n.api\n+local command = n.command\n+local eq = t.eq\n+local exec_lua = n.exec_lua\n+local matches = t.matches\n+local pcall_err = t.pcall_err\n+\n+before_each(function()\n+  n.clear()\n+end)\n+\n+describe('vim._with {win = }', function()",
            "html_url": "https://github.com/neovim/neovim/pull/29168#discussion_r1631649845",
            "id": 1631649845,
            "in_reply_to_id": 1631645453,
            "line": 132,
            "node_id": "PRRC_kwDOAPphoM5hQQA1",
            "original_commit_id": "91bfdb561f205b18cd21e81ec3d21f0977c21c5d",
            "original_line": 132,
            "original_position": 17,
            "original_start_line": null,
            "path": "test/functional/lua/with_spec.lua",
            "position": 132,
            "pull_request_review_id": 2105300520,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29168",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631649845/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-06-07T20:17:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631649845",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29168#discussion_r1631655544"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29168"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631655544"
                }
            },
            "author_association": "MEMBER",
            "body": "> but still I would wait on it. what's wrong with passing a closure?\r\n\r\nNah, nothing wrong with it. I think it was mostly a nicety thing in case the provided function was external. I'll revert it for now; if we notice we need it we can always introduce it again.",
            "commit_id": "b1a39e4d66957fe6ecb4340e32298816a72eded2",
            "created_at": "2024-06-07T20:25:22Z",
            "diff_hunk": "@@ -1139,4 +1139,76 @@ function vim._defer_require(root, mod)\n   })\n end\n \n+--- @nodoc\n+--- @class vim.context.mods\n+--- @field buf? integer\n+--- @field hide? boolean\n+--- @field horizontal? boolean\n+--- @field keepalt? boolean\n+--- @field keepjumps? boolean\n+--- @field keepmarks? boolean\n+--- @field keeppatterns? boolean\n+--- @field lockmarks? boolean\n+--- @field noautocmd? boolean\n+--- @field options? table<string, any>\n+--- @field sandbox? boolean\n+--- @field win? integer\n+\n+--- Executes function `f` with the given context specification.\n+---\n+--- @param context vim.context.mods\n+function vim._with(context, f, ...)",
            "html_url": "https://github.com/neovim/neovim/pull/29168#discussion_r1631655544",
            "id": 1631655544,
            "in_reply_to_id": 1631637335,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5hQRZ4",
            "original_commit_id": "91bfdb561f205b18cd21e81ec3d21f0977c21c5d",
            "original_line": 1160,
            "original_position": 22,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": null,
            "pull_request_review_id": 2105309439,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29168",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631655544/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-06-07T20:25:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631655544",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29168#discussion_r1631883353"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29168"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631883353"
                }
            },
            "author_association": "MEMBER",
            "body": "> not sure about the internals\n> but do we need this at all?\n> couldn't you just do `vim._with(context, function() return f(a,b))`?\n\nIndeed, this works. At the same time, `vim._with` was written with performance in mind and creating closure can be costly when run too frequently. In which case extra varargs are better (beside nicer looking calls). Though, this design matters only in some extreme and rare cases, so not a huge loss if it is not present.",
            "commit_id": "b1a39e4d66957fe6ecb4340e32298816a72eded2",
            "created_at": "2024-06-08T05:43:02Z",
            "diff_hunk": "@@ -1139,4 +1139,76 @@ function vim._defer_require(root, mod)\n   })\n end\n \n+--- @nodoc\n+--- @class vim.context.mods\n+--- @field buf? integer\n+--- @field hide? boolean\n+--- @field horizontal? boolean\n+--- @field keepalt? boolean\n+--- @field keepjumps? boolean\n+--- @field keepmarks? boolean\n+--- @field keeppatterns? boolean\n+--- @field lockmarks? boolean\n+--- @field noautocmd? boolean\n+--- @field options? table<string, any>\n+--- @field sandbox? boolean\n+--- @field win? integer\n+\n+--- Executes function `f` with the given context specification.\n+---\n+--- @param context vim.context.mods\n+function vim._with(context, f, ...)",
            "html_url": "https://github.com/neovim/neovim/pull/29168#discussion_r1631883353",
            "id": 1631883353,
            "in_reply_to_id": 1631637335,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5hRJBZ",
            "original_commit_id": "91bfdb561f205b18cd21e81ec3d21f0977c21c5d",
            "original_line": 1160,
            "original_position": 22,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": null,
            "pull_request_review_id": 2105747849,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29168",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631883353/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-06-08T05:43:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631883353",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29168#discussion_r1631883935"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29168"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631883935"
                }
            },
            "author_association": "MEMBER",
            "body": "I'd add tests that it doesn't trigger `{Buf,BufWin}{Enter,Leave}` events. Or at least be explicit and conscious about them (but better the former).",
            "commit_id": "b1a39e4d66957fe6ecb4340e32298816a72eded2",
            "created_at": "2024-06-08T05:47:43Z",
            "diff_hunk": "@@ -0,0 +1,296 @@\n+local t = require('test.testutil')\n+local n = require('test.functional.testnvim')()\n+local Screen = require('test.functional.ui.screen')\n+\n+local fn = n.fn\n+local api = n.api\n+local command = n.command\n+local eq = t.eq\n+local exec_lua = n.exec_lua\n+local matches = t.matches\n+local pcall_err = t.pcall_err\n+\n+before_each(function()\n+  n.clear()\n+end)\n+\n+describe('vim._with {win = }', function()\n+  it('can access window options', function()\n+    command('vsplit')\n+    local win1 = api.nvim_get_current_win()\n+    command('wincmd w')\n+    local win2 = exec_lua [[\n+      win2 = vim.api.nvim_get_current_win()\n+      return win2\n+    ]]\n+    command('wincmd p')\n+\n+    eq('', api.nvim_get_option_value('winhighlight', { win = win1 }))\n+    eq('', api.nvim_get_option_value('winhighlight', { win = win2 }))\n+\n+    local val = exec_lua [[\n+      return vim._with({win = win2}, function()\n+        vim.cmd \"setlocal winhighlight=Normal:Normal\"\n+        return vim.api.nvim_get_current_win()\n+      end)\n+    ]]\n+\n+    eq('', api.nvim_get_option_value('winhighlight', { win = win1 }))\n+    eq('Normal:Normal', api.nvim_get_option_value('winhighlight', { win = win2 }))\n+    eq(win1, api.nvim_get_current_win())\n+    eq(win2, val)\n+  end)\n+\n+  it('does not cause ml_get errors with invalid visual selection', function()\n+    -- Add lines to the current buffer and make another window looking into an empty buffer.\n+    exec_lua [[\n+      _G.api = vim.api\n+      _G.t = function(s) return api.nvim_replace_termcodes(s, true, true, true) end\n+      _G.win_lines = api.nvim_get_current_win()\n+      vim.cmd \"new\"\n+      _G.win_empty = api.nvim_get_current_win()\n+      api.nvim_set_current_win(win_lines)\n+      api.nvim_buf_set_lines(0, 0, -1, true, {\"a\", \"b\", \"c\"})\n+    ]]\n+\n+    -- Start Visual in current window, redraw in other window with fewer lines.\n+    -- Should be fixed by vim-patch:8.2.4018.\n+    exec_lua [[\n+      api.nvim_feedkeys(t \"G<C-V>\", \"txn\", false)\n+      vim._with({win = win_empty}, function() vim.cmd \"redraw\" end)\n+    ]]\n+\n+    -- Start Visual in current window, extend it in other window with more lines.\n+    exec_lua [[\n+      api.nvim_feedkeys(t \"<Esc>gg\", \"txn\", false)\n+      api.nvim_set_current_win(win_empty)\n+      api.nvim_feedkeys(t \"gg<C-V>\", \"txn\", false)\n+      vim._with({win = win_lines}, function() api.nvim_feedkeys(t \"G<C-V>\", \"txn\", false) end)\n+      vim.cmd \"redraw\"\n+    ]]\n+  end)\n+\n+  it('updates ruler if cursor moved', function()\n+    local screen = Screen.new(30, 5)\n+    screen:set_default_attr_ids {\n+      [1] = { reverse = true },\n+      [2] = { bold = true, reverse = true },\n+    }\n+    screen:attach()\n+    exec_lua [[\n+      _G.api = vim.api\n+      vim.opt.ruler = true\n+      local lines = {}\n+      for i = 0, 499 do lines[#lines + 1] = tostring(i) end\n+      api.nvim_buf_set_lines(0, 0, -1, true, lines)\n+      api.nvim_win_set_cursor(0, {20, 0})\n+      vim.cmd \"split\"\n+      _G.win = api.nvim_get_current_win()\n+      vim.cmd \"wincmd w | redraw\"\n+    ]]\n+    screen:expect [[\n+      19                            |\n+      {1:[No Name] [+]  20,1         3%}|\n+      ^19                            |\n+      {2:[No Name] [+]  20,1         3%}|\n+                                    |\n+    ]]\n+    exec_lua [[\n+      vim._with({win = win}, function() api.nvim_win_set_cursor(0, {100, 0}) end)\n+      vim.cmd \"redraw\"\n+    ]]\n+    screen:expect [[\n+      99                            |\n+      {1:[No Name] [+]  100,1       19%}|\n+      ^19                            |\n+      {2:[No Name] [+]  20,1         3%}|\n+                                    |\n+    ]]\n+  end)\n+\n+  it('can return values by reference', function()\n+    eq(\n+      { 7, 10 },\n+      exec_lua [[\n+      local val = {4, 10}\n+      local ref = vim._with({win = 0}, function() return val end)\n+      ref[1] = 7\n+      return val\n+    ]]\n+    )\n+  end)\n+\n+  it('layout in current tabpage does not affect windows in others', function()\n+    command('tab split')\n+    local t2_move_win = api.nvim_get_current_win()\n+    command('vsplit')\n+    local t2_other_win = api.nvim_get_current_win()\n+    command('tabprevious')\n+    matches('E36: Not enough room$', pcall_err(command, 'execute \"split|\"->repeat(&lines)'))\n+    command('vsplit')\n+\n+    exec_lua('vim._with({win = ...}, function() vim.cmd.wincmd \"J\" end)', t2_move_win)\n+    eq({ 'col', { { 'leaf', t2_other_win }, { 'leaf', t2_move_win } } }, fn.winlayout(2))\n+  end)\n+end)\n+\n+describe('vim._with {buf = }', function()",
            "html_url": "https://github.com/neovim/neovim/pull/29168#discussion_r1631883935",
            "id": 1631883935,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5hRJKf",
            "original_commit_id": "13a25c57020ea9e4deb7578155138ebfb6627e16",
            "original_line": 137,
            "original_position": 137,
            "original_start_line": null,
            "path": "test/functional/lua/with_spec.lua",
            "position": null,
            "pull_request_review_id": 2105756210,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29168",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631883935/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-06-08T05:51:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631883935",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29168#discussion_r1631884060"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29168"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631884060"
                }
            },
            "author_association": "MEMBER",
            "body": "I'd add tests that it doesn't trigger `Win{Enter,Leave}` events. Or at least be explicit and conscious about them (but better the former).",
            "commit_id": "b1a39e4d66957fe6ecb4340e32298816a72eded2",
            "created_at": "2024-06-08T05:48:47Z",
            "diff_hunk": "@@ -0,0 +1,296 @@\n+local t = require('test.testutil')\n+local n = require('test.functional.testnvim')()\n+local Screen = require('test.functional.ui.screen')\n+\n+local fn = n.fn\n+local api = n.api\n+local command = n.command\n+local eq = t.eq\n+local exec_lua = n.exec_lua\n+local matches = t.matches\n+local pcall_err = t.pcall_err\n+\n+before_each(function()\n+  n.clear()\n+end)\n+\n+describe('vim._with {win = }', function()",
            "html_url": "https://github.com/neovim/neovim/pull/29168#discussion_r1631884060",
            "id": 1631884060,
            "line": 132,
            "node_id": "PRRC_kwDOAPphoM5hRJMc",
            "original_commit_id": "13a25c57020ea9e4deb7578155138ebfb6627e16",
            "original_line": 132,
            "original_position": 17,
            "original_start_line": null,
            "path": "test/functional/lua/with_spec.lua",
            "position": 132,
            "pull_request_review_id": 2105756210,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29168",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631884060/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-06-08T05:51:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631884060",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29168#discussion_r1631884353"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29168"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631884353"
                }
            },
            "author_association": "MEMBER",
            "body": "How about also adding `cursor` possibility as the context? Of course, it can be added later.",
            "commit_id": "b1a39e4d66957fe6ecb4340e32298816a72eded2",
            "created_at": "2024-06-08T05:51:23Z",
            "diff_hunk": "@@ -568,6 +572,96 @@ static int nlua_foldupdate(lua_State *lstate)\n   return 0;\n }\n \n+static int nlua_with(lua_State *L)\n+{\n+  int flags = 0;\n+  buf_T *buf = NULL;\n+  win_T *win = NULL;\n+\n+#define APPLY_FLAG(key, flag) \\\n+  if (strequal((key), k) && (v)) { \\\n+    flags |= (flag); \\\n+  }\n+\n+  luaL_argcheck(L, lua_istable(L, 1), 1, \"table expected\");\n+  lua_pushnil(L);  // [dict, ..., nil]\n+  while (lua_next(L, 1)) {\n+    // [dict, ..., key, value]\n+    if (lua_type(L, -2) == LUA_TSTRING) {\n+      const char *k = lua_tostring(L, -2);\n+      bool v = lua_toboolean(L, -1);\n+      if (strequal(\"buf\", k)) { \\\n+        buf = handle_get_buffer((int)luaL_checkinteger(L, -1));\n+      } else if (strequal(\"win\", k)) { \\\n+        win = handle_get_window((int)luaL_checkinteger(L, -1));\n+      } else {\n+        APPLY_FLAG(\"sandbox\", CMOD_SANDBOX);\n+        APPLY_FLAG(\"noautocmd\", CMOD_NOAUTOCMD);\n+        APPLY_FLAG(\"hide\", CMOD_HIDE);\n+        APPLY_FLAG(\"keepalt\", CMOD_KEEPALT);\n+        APPLY_FLAG(\"keepjumps\", CMOD_KEEPJUMPS);\n+        APPLY_FLAG(\"keepmarks\", CMOD_KEEPMARKS);\n+        APPLY_FLAG(\"keeppatterns\", CMOD_KEEPPATTERNS);\n+        APPLY_FLAG(\"lockmarks\", CMOD_LOCKMARKS);\n+      }\n+    }\n+    // pop the value; lua_next will pop the key.\n+    lua_pop(L, 1);  // [dict, ..., key]\n+  }\n+  int status = 0;\n+  int rets = 0;\n+\n+  cmdmod_T save_cmdmod = cmdmod;\n+  cmdmod.cmod_flags = flags;\n+  apply_cmdmod(&cmdmod);\n+\n+  if (buf || win) {\n+    try_start();\n+  }\n+\n+  aco_save_T aco;\n+  win_execute_T win_execute_args;\n+  Error err = ERROR_INIT;\n+\n+  if (win) {\n+    tabpage_T *tabpage = win_find_tabpage(win);\n+    if (!win_execute_before(&win_execute_args, win, tabpage)) {\n+      goto end;\n+    }\n+  } else if (buf) {\n+    aucmd_prepbuf(&aco, buf);\n+  }",
            "html_url": "https://github.com/neovim/neovim/pull/29168#discussion_r1631884353",
            "id": 1631884353,
            "line": 636,
            "node_id": "PRRC_kwDOAPphoM5hRJRB",
            "original_commit_id": "13a25c57020ea9e4deb7578155138ebfb6627e16",
            "original_line": 636,
            "original_position": 84,
            "original_start_line": 626,
            "path": "src/nvim/lua/stdlib.c",
            "position": 87,
            "pull_request_review_id": 2105756210,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29168",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631884353/reactions"
            },
            "side": "RIGHT",
            "start_line": 629,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-06-08T05:51:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631884353",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29168#discussion_r1631970938"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29168"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631970938"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I think the performance of a closure is really minimal\r\nand imo it's much less readable when using varargs",
            "commit_id": "b1a39e4d66957fe6ecb4340e32298816a72eded2",
            "created_at": "2024-06-08T08:39:57Z",
            "diff_hunk": "@@ -1139,4 +1139,76 @@ function vim._defer_require(root, mod)\n   })\n end\n \n+--- @nodoc\n+--- @class vim.context.mods\n+--- @field buf? integer\n+--- @field hide? boolean\n+--- @field horizontal? boolean\n+--- @field keepalt? boolean\n+--- @field keepjumps? boolean\n+--- @field keepmarks? boolean\n+--- @field keeppatterns? boolean\n+--- @field lockmarks? boolean\n+--- @field noautocmd? boolean\n+--- @field options? table<string, any>\n+--- @field sandbox? boolean\n+--- @field win? integer\n+\n+--- Executes function `f` with the given context specification.\n+---\n+--- @param context vim.context.mods\n+function vim._with(context, f, ...)",
            "html_url": "https://github.com/neovim/neovim/pull/29168#discussion_r1631970938",
            "id": 1631970938,
            "in_reply_to_id": 1631637335,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5hReZ6",
            "original_commit_id": "91bfdb561f205b18cd21e81ec3d21f0977c21c5d",
            "original_line": 1160,
            "original_position": 22,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": null,
            "pull_request_review_id": 2105799553,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29168",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631970938/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-06-08T08:39:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1631970938",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/81827001?v=4",
                "events_url": "https://api.github.com/users/max397574/events{/privacy}",
                "followers_url": "https://api.github.com/users/max397574/followers",
                "following_url": "https://api.github.com/users/max397574/following{/other_user}",
                "gists_url": "https://api.github.com/users/max397574/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/max397574",
                "id": 81827001,
                "login": "max397574",
                "node_id": "MDQ6VXNlcjgxODI3MDAx",
                "organizations_url": "https://api.github.com/users/max397574/orgs",
                "received_events_url": "https://api.github.com/users/max397574/received_events",
                "repos_url": "https://api.github.com/users/max397574/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/max397574/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/max397574/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/max397574"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29168#discussion_r1632022144"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29168"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1632022144"
                }
            },
            "author_association": "MEMBER",
            "body": "Sure. I don't think the current contexts are exhaustive whatsoever, it was more \"these are the contexts neovim currently happens to keep track of\" as I understand it.\r\n\r\nI can't comment on whether `cursor` is a good candidate at the top of my head right now, but definitely open to the idea.",
            "commit_id": "b1a39e4d66957fe6ecb4340e32298816a72eded2",
            "created_at": "2024-06-08T10:46:05Z",
            "diff_hunk": "@@ -568,6 +572,96 @@ static int nlua_foldupdate(lua_State *lstate)\n   return 0;\n }\n \n+static int nlua_with(lua_State *L)\n+{\n+  int flags = 0;\n+  buf_T *buf = NULL;\n+  win_T *win = NULL;\n+\n+#define APPLY_FLAG(key, flag) \\\n+  if (strequal((key), k) && (v)) { \\\n+    flags |= (flag); \\\n+  }\n+\n+  luaL_argcheck(L, lua_istable(L, 1), 1, \"table expected\");\n+  lua_pushnil(L);  // [dict, ..., nil]\n+  while (lua_next(L, 1)) {\n+    // [dict, ..., key, value]\n+    if (lua_type(L, -2) == LUA_TSTRING) {\n+      const char *k = lua_tostring(L, -2);\n+      bool v = lua_toboolean(L, -1);\n+      if (strequal(\"buf\", k)) { \\\n+        buf = handle_get_buffer((int)luaL_checkinteger(L, -1));\n+      } else if (strequal(\"win\", k)) { \\\n+        win = handle_get_window((int)luaL_checkinteger(L, -1));\n+      } else {\n+        APPLY_FLAG(\"sandbox\", CMOD_SANDBOX);\n+        APPLY_FLAG(\"noautocmd\", CMOD_NOAUTOCMD);\n+        APPLY_FLAG(\"hide\", CMOD_HIDE);\n+        APPLY_FLAG(\"keepalt\", CMOD_KEEPALT);\n+        APPLY_FLAG(\"keepjumps\", CMOD_KEEPJUMPS);\n+        APPLY_FLAG(\"keepmarks\", CMOD_KEEPMARKS);\n+        APPLY_FLAG(\"keeppatterns\", CMOD_KEEPPATTERNS);\n+        APPLY_FLAG(\"lockmarks\", CMOD_LOCKMARKS);\n+      }\n+    }\n+    // pop the value; lua_next will pop the key.\n+    lua_pop(L, 1);  // [dict, ..., key]\n+  }\n+  int status = 0;\n+  int rets = 0;\n+\n+  cmdmod_T save_cmdmod = cmdmod;\n+  cmdmod.cmod_flags = flags;\n+  apply_cmdmod(&cmdmod);\n+\n+  if (buf || win) {\n+    try_start();\n+  }\n+\n+  aco_save_T aco;\n+  win_execute_T win_execute_args;\n+  Error err = ERROR_INIT;\n+\n+  if (win) {\n+    tabpage_T *tabpage = win_find_tabpage(win);\n+    if (!win_execute_before(&win_execute_args, win, tabpage)) {\n+      goto end;\n+    }\n+  } else if (buf) {\n+    aucmd_prepbuf(&aco, buf);\n+  }",
            "html_url": "https://github.com/neovim/neovim/pull/29168#discussion_r1632022144",
            "id": 1632022144,
            "in_reply_to_id": 1631884353,
            "line": 636,
            "node_id": "PRRC_kwDOAPphoM5hRq6A",
            "original_commit_id": "13a25c57020ea9e4deb7578155138ebfb6627e16",
            "original_line": 636,
            "original_position": 84,
            "original_start_line": 626,
            "path": "src/nvim/lua/stdlib.c",
            "position": 87,
            "pull_request_review_id": 2105829562,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29168",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1632022144/reactions"
            },
            "side": "RIGHT",
            "start_line": 629,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-06-08T10:46:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1632022144",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29168#discussion_r1632024673"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29168"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1632024673"
                }
            },
            "author_association": "MEMBER",
            "body": "> I think the performance of a closure is really minimal\r\n\r\nAs was said in previous comment: \"... matters only in some extreme and rare cases\". I certainly once had an instance when creating closures was a bottleneck. And it indeed was in a very performance heavy loop (around 300000 times expected to run without visible delay).\r\n\r\nIt only mattered if the overall design is deemed to be acceptable. Otherwise, not a huge loss.",
            "commit_id": "b1a39e4d66957fe6ecb4340e32298816a72eded2",
            "created_at": "2024-06-08T11:05:37Z",
            "diff_hunk": "@@ -1139,4 +1139,76 @@ function vim._defer_require(root, mod)\n   })\n end\n \n+--- @nodoc\n+--- @class vim.context.mods\n+--- @field buf? integer\n+--- @field hide? boolean\n+--- @field horizontal? boolean\n+--- @field keepalt? boolean\n+--- @field keepjumps? boolean\n+--- @field keepmarks? boolean\n+--- @field keeppatterns? boolean\n+--- @field lockmarks? boolean\n+--- @field noautocmd? boolean\n+--- @field options? table<string, any>\n+--- @field sandbox? boolean\n+--- @field win? integer\n+\n+--- Executes function `f` with the given context specification.\n+---\n+--- @param context vim.context.mods\n+function vim._with(context, f, ...)",
            "html_url": "https://github.com/neovim/neovim/pull/29168#discussion_r1632024673",
            "id": 1632024673,
            "in_reply_to_id": 1631637335,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5hRrhh",
            "original_commit_id": "91bfdb561f205b18cd21e81ec3d21f0977c21c5d",
            "original_line": 1160,
            "original_position": 22,
            "original_start_line": null,
            "path": "runtime/lua/vim/shared.lua",
            "position": null,
            "pull_request_review_id": 2105831453,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29168",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1632024673/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-06-08T11:05:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1632024673",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29168#discussion_r1632039370"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29168"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1632039370"
                }
            },
            "author_association": "MEMBER",
            "body": "I'd move this `assert()` inside `vim._with()` callback. To test that events got triggered *exactly* after setting different buffer.\r\n\r\nSame with `win` context.",
            "commit_id": "b1a39e4d66957fe6ecb4340e32298816a72eded2",
            "created_at": "2024-06-08T12:51:40Z",
            "diff_hunk": "@@ -0,0 +1,292 @@\n+local t = require('test.testutil')\n+local n = require('test.functional.testnvim')()\n+local Screen = require('test.functional.ui.screen')\n+\n+local fn = n.fn\n+local api = n.api\n+local command = n.command\n+local eq = t.eq\n+local exec_lua = n.exec_lua\n+local matches = t.matches\n+local pcall_err = t.pcall_err\n+\n+before_each(function()\n+  n.clear()\n+end)\n+\n+describe('vim._with {buf = }', function()\n+  it('does not trigger autocmd', function()\n+    exec_lua [[\n+      local new = vim.api.nvim_create_buf(false, true)\n+      vim.api.nvim_create_autocmd( { 'BufEnter', 'BufLeave', 'BufWinEnter', 'BufWinLeave' }, {\n+        callback = function() _G.n = (_G.n or 0) + 1 end\n+      })\n+      vim._with({buf = new}, function()\n+      end)\n+      assert(_G.n == nil)\n+    ]]\n+  end)\n+\n+  it('trigger autocmd if changed within context', function()\n+    exec_lua [[\n+      local new = vim.api.nvim_create_buf(false, true)\n+      vim.api.nvim_create_autocmd( { 'BufEnter', 'BufLeave', 'BufWinEnter', 'BufWinLeave' }, {\n+        callback = function() _G.n = (_G.n or 0) + 1 end\n+      })\n+      vim._with({}, function()\n+        vim.api.nvim_set_current_buf(new)\n+      end)\n+      assert(_G.n ~= nil)",
            "html_url": "https://github.com/neovim/neovim/pull/29168#discussion_r1632039370",
            "id": 1632039370,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5hRvHK",
            "original_commit_id": "00622ed243132b3c2b5ceb3ea3ec4c1e6552584e",
            "original_line": 39,
            "original_position": 39,
            "original_start_line": null,
            "path": "test/functional/lua/with_spec.lua",
            "position": null,
            "pull_request_review_id": 2105843844,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29168",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1632039370/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-06-08T12:52:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1632039370",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/29168#discussion_r1632039497"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/29168"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1632039497"
                }
            },
            "author_association": "MEMBER",
            "body": "Here testing for `WinEnter` and `WinLeave` is more important. I'd either add those or replace `BufEnter` and `BufLeave`.",
            "commit_id": "b1a39e4d66957fe6ecb4340e32298816a72eded2",
            "created_at": "2024-06-08T12:52:48Z",
            "diff_hunk": "@@ -0,0 +1,292 @@\n+local t = require('test.testutil')\n+local n = require('test.functional.testnvim')()\n+local Screen = require('test.functional.ui.screen')\n+\n+local fn = n.fn\n+local api = n.api\n+local command = n.command\n+local eq = t.eq\n+local exec_lua = n.exec_lua\n+local matches = t.matches\n+local pcall_err = t.pcall_err\n+\n+before_each(function()\n+  n.clear()\n+end)\n+\n+describe('vim._with {buf = }', function()\n+  it('does not trigger autocmd', function()\n+    exec_lua [[\n+      local new = vim.api.nvim_create_buf(false, true)\n+      vim.api.nvim_create_autocmd( { 'BufEnter', 'BufLeave', 'BufWinEnter', 'BufWinLeave' }, {\n+        callback = function() _G.n = (_G.n or 0) + 1 end\n+      })\n+      vim._with({buf = new}, function()\n+      end)\n+      assert(_G.n == nil)\n+    ]]\n+  end)\n+\n+  it('trigger autocmd if changed within context', function()\n+    exec_lua [[\n+      local new = vim.api.nvim_create_buf(false, true)\n+      vim.api.nvim_create_autocmd( { 'BufEnter', 'BufLeave', 'BufWinEnter', 'BufWinLeave' }, {\n+        callback = function() _G.n = (_G.n or 0) + 1 end\n+      })\n+      vim._with({}, function()\n+        vim.api.nvim_set_current_buf(new)\n+      end)\n+      assert(_G.n ~= nil)\n+    ]]\n+  end)\n+\n+  it('can access buf options', function()\n+    local buf1 = api.nvim_get_current_buf()\n+    local buf2 = exec_lua [[\n+      buf2 = vim.api.nvim_create_buf(false, true)\n+      return buf2\n+    ]]\n+\n+    eq(false, api.nvim_get_option_value('autoindent', { buf = buf1 }))\n+    eq(false, api.nvim_get_option_value('autoindent', { buf = buf2 }))\n+\n+    local val = exec_lua [[\n+      return vim._with({buf = buf2}, function()\n+        vim.cmd \"set autoindent\"\n+        return vim.api.nvim_get_current_buf()\n+    end)\n+    ]]\n+\n+    eq(false, api.nvim_get_option_value('autoindent', { buf = buf1 }))\n+    eq(true, api.nvim_get_option_value('autoindent', { buf = buf2 }))\n+    eq(buf1, api.nvim_get_current_buf())\n+    eq(buf2, val)\n+  end)\n+\n+  it('does not cause ml_get errors with invalid visual selection', function()\n+    exec_lua [[\n+      local api = vim.api\n+      local t = function(s) return api.nvim_replace_termcodes(s, true, true, true) end\n+      api.nvim_buf_set_lines(0, 0, -1, true, {\"a\", \"b\", \"c\"})\n+      api.nvim_feedkeys(t \"G<C-V>\", \"txn\", false)\n+      vim._with({buf = api.nvim_create_buf(false, true)}, function() vim.cmd \"redraw\" end)\n+    ]]\n+  end)\n+\n+  it('can be nested crazily with hidden buffers', function()\n+    eq(\n+      true,\n+      exec_lua([[\n+      local function scratch_buf_call(fn)\n+        local buf = vim.api.nvim_create_buf(false, true)\n+        vim.api.nvim_set_option_value('cindent', true, {buf = buf})\n+        return vim._with({buf = buf}, function()\n+          return vim.api.nvim_get_current_buf() == buf\n+            and vim.api.nvim_get_option_value('cindent', {buf = buf})\n+            and fn()\n+      end) and vim.api.nvim_buf_delete(buf, {}) == nil\n+    end\n+\n+    return scratch_buf_call(function()\n+      return scratch_buf_call(function()\n+        return scratch_buf_call(function()\n+          return scratch_buf_call(function()\n+            return scratch_buf_call(function()\n+              return scratch_buf_call(function()\n+                return scratch_buf_call(function()\n+                  return scratch_buf_call(function()\n+                    return scratch_buf_call(function()\n+                      return scratch_buf_call(function()\n+                        return scratch_buf_call(function()\n+                          return scratch_buf_call(function()\n+                            return true\n+                          end)\n+                        end)\n+                      end)\n+                    end)\n+                  end)\n+                end)\n+              end)\n+            end)\n+          end)\n+        end)\n+      end)\n+    end)\n+    ]])\n+    )\n+  end)\n+\n+  it('can return values by reference', function()\n+    eq(\n+      { 4, 7 },\n+      exec_lua [[\n+      local val = {4, 10}\n+      local ref = vim._with({ buf = 0}, function() return val end)\n+      ref[2] = 7\n+      return val\n+    ]]\n+    )\n+  end)\n+end)\n+\n+describe('vim._with {win = }', function()\n+  it('does not trigger autocmd', function()\n+    exec_lua [[\n+      local old = vim.api.nvim_get_current_win()\n+      vim.cmd(\"new\")\n+      local new = vim.api.nvim_get_current_win()\n+      vim.api.nvim_create_autocmd( { 'BufEnter', 'BufLeave', 'BufWinEnter', 'BufWinLeave' }, {\n+        callback = function() _G.n = (_G.n or 0) + 1 end\n+      })\n+      vim._with({win = old}, function()\n+      end)\n+      assert(_G.n == nil)\n+    ]]\n+  end)\n+\n+  it('trigger autocmd if changed within context', function()\n+    exec_lua [[\n+      local old = vim.api.nvim_get_current_win()\n+      vim.cmd(\"new\")\n+      local new = vim.api.nvim_get_current_win()\n+      vim.api.nvim_create_autocmd( { 'BufEnter', 'BufLeave', 'BufWinEnter', 'BufWinLeave' }, {",
            "html_url": "https://github.com/neovim/neovim/pull/29168#discussion_r1632039497",
            "id": 1632039497,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5hRvJJ",
            "original_commit_id": "00622ed243132b3c2b5ceb3ea3ec4c1e6552584e",
            "original_line": 152,
            "original_position": 152,
            "original_start_line": null,
            "path": "test/functional/lua/with_spec.lua",
            "position": null,
            "pull_request_review_id": 2105843844,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/29168",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1632039497/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-06-08T12:52:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1632039497",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/24854248?v=4",
                "events_url": "https://api.github.com/users/echasnovski/events{/privacy}",
                "followers_url": "https://api.github.com/users/echasnovski/followers",
                "following_url": "https://api.github.com/users/echasnovski/following{/other_user}",
                "gists_url": "https://api.github.com/users/echasnovski/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/echasnovski",
                "id": 24854248,
                "login": "echasnovski",
                "node_id": "MDQ6VXNlcjI0ODU0MjQ4",
                "organizations_url": "https://api.github.com/users/echasnovski/orgs",
                "received_events_url": "https://api.github.com/users/echasnovski/received_events",
                "repos_url": "https://api.github.com/users/echasnovski/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/echasnovski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/echasnovski/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/echasnovski"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "All tests for `nvim_buf_call` and `nvim_win_call` pass if we replace it with `vim._with`, so `vim._with` should now be drop-in replacement for them (barring missing edge case in our testing). I think the PR is in a good state now, I wouldn't be dissatisfied if we merged it as is and iterated on it in later PRs. I'll leave this open for a day or two to for reviews and comments.",
            "created_at": "2024-06-07T15:53:36Z",
            "html_url": "https://github.com/neovim/neovim/pull/29168#issuecomment-2155110285",
            "id": 2155110285,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29168",
            "node_id": "IC_kwDOAPphoM6AdF-N",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 2,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2155110285/reactions"
            },
            "updated_at": "2024-06-07T15:53:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2155110285",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/29168/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/29168/commits",
    "created_at": "2024-06-03T17:08:54Z",
    "diff_url": "https://github.com/neovim/neovim/pull/29168.diff",
    "draft": false,
    "head": {
        "label": "dundargoc:feat/with",
        "ref": "feat/with",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/dundargoc/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/dundargoc/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/dundargoc/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/dundargoc/neovim/branches{/branch}",
            "clone_url": "https://github.com/dundargoc/neovim.git",
            "collaborators_url": "https://api.github.com/repos/dundargoc/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/dundargoc/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/dundargoc/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/dundargoc/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/dundargoc/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/dundargoc/neovim/contributors",
            "created_at": "2021-06-20T10:14:48Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/dundargoc/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/dundargoc/neovim/downloads",
            "events_url": "https://api.github.com/repos/dundargoc/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/dundargoc/neovim/forks",
            "full_name": "dundargoc/neovim",
            "git_commits_url": "https://api.github.com/repos/dundargoc/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/dundargoc/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/dundargoc/neovim/git/tags{/sha}",
            "git_url": "git://github.com/dundargoc/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": false,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/dundargoc/neovim/hooks",
            "html_url": "https://github.com/dundargoc/neovim",
            "id": 378614899,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/dundargoc/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/dundargoc/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/dundargoc/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/dundargoc/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/dundargoc/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/dundargoc/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/dundargoc/neovim/merges",
            "milestones_url": "https://api.github.com/repos/dundargoc/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNzg2MTQ4OTk=",
            "notifications_url": "https://api.github.com/repos/dundargoc/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/dundargoc/neovim/pulls{/number}",
            "pushed_at": "2024-06-10T19:43:05Z",
            "releases_url": "https://api.github.com/repos/dundargoc/neovim/releases{/id}",
            "size": 270314,
            "ssh_url": "git@github.com:dundargoc/neovim.git",
            "stargazers_count": 1,
            "stargazers_url": "https://api.github.com/repos/dundargoc/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/dundargoc/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/dundargoc/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/dundargoc/neovim/subscription",
            "svn_url": "https://github.com/dundargoc/neovim",
            "tags_url": "https://api.github.com/repos/dundargoc/neovim/tags",
            "teams_url": "https://api.github.com/repos/dundargoc/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/dundargoc/neovim/git/trees{/sha}",
            "updated_at": "2024-06-10T18:09:39Z",
            "url": "https://api.github.com/repos/dundargoc/neovim",
            "visibility": "public",
            "watchers": 1,
            "watchers_count": 1,
            "web_commit_signoff_required": false
        },
        "sha": "b1a39e4d66957fe6ecb4340e32298816a72eded2",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
            "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
            "followers_url": "https://api.github.com/users/dundargoc/followers",
            "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
            "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/dundargoc",
            "id": 33953936,
            "login": "dundargoc",
            "node_id": "MDQ6VXNlcjMzOTUzOTM2",
            "organizations_url": "https://api.github.com/users/dundargoc/orgs",
            "received_events_url": "https://api.github.com/users/dundargoc/received_events",
            "repos_url": "https://api.github.com/users/dundargoc/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/dundargoc"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/29168",
    "id": 1901313854,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/29168",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 662566370,
            "name": "lsp",
            "node_id": "MDU6TGFiZWw2NjI1NjYzNzA=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lsp"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1799626557,
            "name": "treesitter",
            "node_id": "MDU6TGFiZWwxNzk5NjI2NTU3",
            "url": "https://api.github.com/repos/neovim/neovim/labels/treesitter"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "filetype detection, filetype.lua",
            "id": 3708202139,
            "name": "filetype",
            "node_id": "LA_kwDOAPphoM7dBqyb",
            "url": "https://api.github.com/repos/neovim/neovim/labels/filetype"
        },
        {
            "color": "0052CC",
            "default": false,
            "description": "",
            "id": 6664957181,
            "name": "ci:skip-news",
            "node_id": "LA_kwDOAPphoM8AAAABjUMs_Q",
            "url": "https://api.github.com/repos/neovim/neovim/labels/ci:skip-news"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 7015106619,
            "name": "comment",
            "node_id": "LA_kwDOAPphoM8AAAABoiIIOw",
            "url": "https://api.github.com/repos/neovim/neovim/labels/comment"
        }
    ],
    "locked": false,
    "merge_commit_sha": "9afa1fd35510c5fe485f4a1dfdabf94e5f051a1c",
    "merged_at": "2024-06-08T19:38:07Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5xU78-",
    "number": 29168,
    "patch_url": "https://github.com/neovim/neovim/pull/29168.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/29168/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/b1a39e4d66957fe6ecb4340e32298816a72eded2",
    "title": "feat(lua): add `vim._with`",
    "updated_at": "2024-06-08T19:38:22Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/29168",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
        "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
        "followers_url": "https://api.github.com/users/dundargoc/followers",
        "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
        "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/dundargoc",
        "id": 33953936,
        "login": "dundargoc",
        "node_id": "MDQ6VXNlcjMzOTUzOTM2",
        "organizations_url": "https://api.github.com/users/dundargoc/orgs",
        "received_events_url": "https://api.github.com/users/dundargoc/received_events",
        "repos_url": "https://api.github.com/users/dundargoc/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/dundargoc"
    }
}