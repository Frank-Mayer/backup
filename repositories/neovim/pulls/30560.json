{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/30560/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/30560/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/30560"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/30560"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/30560/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/da10c92d3aa914ef636728351fa10724acdbe8e9"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5605,
            "forks_count": 5605,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1776,
            "open_issues_count": 1776,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-09-30T22:27:30Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 287362,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 82117,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-10-01T02:33:57Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 82117,
            "watchers_count": 82117,
            "web_commit_signoff_required": false
        },
        "sha": "2c88cfcac42d0a4e0b1a1396539b5add807c336c",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "Refactoring to lua of str_byteindex to allow opts to be passed. This will allow `vim.lsp._str_byteindex_enc` to be deprecated.\r\n\r\nquestions:\r\n\r\nwhere should this function live, is _editor the right place?\r\nwhere should the opts class be defined\r\n\r\ndeprectation suggested in #25272",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1779742082"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779742082"
                }
            },
            "author_association": "MEMBER",
            "body": "never need to mention \"helper\" in function names. all functions help, else they should not exist.\r\n```suggestion\r\n-- Decodes a UTF-8 character to a Unicode code point.\r\n```",
            "commit_id": "da10c92d3aa914ef636728351fa10724acdbe8e9",
            "created_at": "2024-09-28T19:30:10Z",
            "diff_hunk": "@@ -627,6 +627,113 @@ function vim.notify(msg, level, opts) -- luacheck: no unused args\n   end\n end\n \n+-- Helper function to decode the UTF-8 character to a Unicode code point",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1779742082",
            "id": 1779742082,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qFLWC",
            "original_commit_id": "4fb536dbd2a0532ec2824935db46543d81ed1d5d",
            "original_line": 630,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2335403032,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779742082/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-28T19:30:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779742082",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1779742186"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779742186"
                }
            },
            "author_association": "MEMBER",
            "body": "even if the interface continues to live on `vim.x()`, perhaps the implementation should live in `runtime/lua/vim/text.lua` ? (as a private/internal function `text.__foo()`)\r\n\r\nCounterpoint: `_editor.lua` is guaranteed to be \"compiled\" in the `nvim` binary as lua byte code. I'm not sure if that applies to text.lua .",
            "commit_id": "da10c92d3aa914ef636728351fa10724acdbe8e9",
            "created_at": "2024-09-28T19:31:05Z",
            "diff_hunk": "@@ -627,6 +627,113 @@ function vim.notify(msg, level, opts) -- luacheck: no unused args\n   end\n end\n \n+-- Helper function to decode the UTF-8 character to a Unicode code point\n+---@private\n+---@param s string\n+---@return integer\n+local function utf_ptr2char(s)\n+  local b1 = s:byte(1)\n+\n+  if b1 < 0x80 then\n+    -- 1-byte sequence (ASCII character)\n+    return b1\n+  elseif b1 < 0xE0 then\n+    -- 2-byte sequence\n+    local b2 = s:byte(2)\n+    return ((b1 % 0x20) * 0x40) + (b2 % 0x40)\n+  elseif b1 < 0xF0 then\n+    -- 3-byte sequence\n+    local b2 = s:byte(2)\n+    local b3 = s:byte(3)\n+    return ((b1 % 0x10) * 0x1000) + ((b2 % 0x40) * 0x40) + (b3 % 0x40)\n+  else\n+    -- 4-byte sequence\n+    local b2 = s:byte(2)\n+    local b3 = s:byte(3)\n+    local b4 = s:byte(4)\n+    return ((b1 % 0x08) * 0x40000) + ((b2 % 0x40) * 0x1000) + ((b3 % 0x40) * 0x40) + (b4 % 0x40)\n+  end\n+end\n+\n+--- Convert UTF-32 or UTF-16 {index} to byte index.\n+--- Opts can be a table containing: a \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+--- It can also be supplied as a boolean, true for utf-16 and false for utf-32.\n+--- If {opts} is not supplied, it defaults to false (UTF-32). Returns the byte index.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param index integer\n+---@param opts boolean|nil| { encoding: \"utf_8\"|\"utf-16\"|\"utf-32\" }\n+---@return integer\n+function vim.str_byteindex(s, index, opts)",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1779742186",
            "id": 1779742186,
            "line": 757,
            "node_id": "PRRC_kwDOAPphoM5qFLXq",
            "original_commit_id": "4fb536dbd2a0532ec2824935db46543d81ed1d5d",
            "original_line": 757,
            "original_position": 44,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": 43,
            "pull_request_review_id": 2335403147,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779742186/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-28T20:00:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779742186",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1779742503"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779742503"
                }
            },
            "author_association": "MEMBER",
            "body": "nit: it's a bit random that the code was added in between vim.notify and vim.notify_once :)\r\n\r\nif possible, it's nice to group families of functions together, or at least alphabetically.",
            "commit_id": "da10c92d3aa914ef636728351fa10724acdbe8e9",
            "created_at": "2024-09-28T19:33:10Z",
            "diff_hunk": "@@ -627,6 +627,113 @@ function vim.notify(msg, level, opts) -- luacheck: no unused args\n   end\n end",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1779742503",
            "id": 1779742503,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qFLcn",
            "original_commit_id": "4fb536dbd2a0532ec2824935db46543d81ed1d5d",
            "original_line": 628,
            "original_position": 2,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2335403414,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779742503/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-28T19:33:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779742503",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1779750632"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779750632"
                }
            },
            "author_association": "MEMBER",
            "body": "I don't think we want do duplicate the UTF-8 implementation in lua. A tight, simple \"inner loop\" like mb_utf_index_to_bytes is the kind of code which makes sense to keep in C.\r\n\r\nDoing the argument parsing and validation in lua makes sense, but then it could shell out to a private, smaller, lua wrapper around `mb_utf_index_to_bytes` .",
            "commit_id": "da10c92d3aa914ef636728351fa10724acdbe8e9",
            "created_at": "2024-09-28T20:29:22Z",
            "diff_hunk": "@@ -715,6 +715,124 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n+-- Decodes a UTF-8 character to a Unicode code point.",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1779750632",
            "id": 1779750632,
            "line": 718,
            "node_id": "PRRC_kwDOAPphoM5qFNbo",
            "original_commit_id": "178bd19009a0c3948ee72caad9ee081035ca9e29",
            "original_line": 718,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": 4,
            "pull_request_review_id": 2335410221,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779750632/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-28T20:29:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779750632",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1779752668"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779752668"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I did look at `vim.text` as a home for this. But didn't want to change the namespace to keep this change non-breaking.\r\n\r\nHappy to move it with a wrapper if you think that is better (and will be bytecode compiled still)",
            "commit_id": "da10c92d3aa914ef636728351fa10724acdbe8e9",
            "created_at": "2024-09-28T20:44:44Z",
            "diff_hunk": "@@ -627,6 +627,113 @@ function vim.notify(msg, level, opts) -- luacheck: no unused args\n   end\n end\n \n+-- Helper function to decode the UTF-8 character to a Unicode code point\n+---@private\n+---@param s string\n+---@return integer\n+local function utf_ptr2char(s)\n+  local b1 = s:byte(1)\n+\n+  if b1 < 0x80 then\n+    -- 1-byte sequence (ASCII character)\n+    return b1\n+  elseif b1 < 0xE0 then\n+    -- 2-byte sequence\n+    local b2 = s:byte(2)\n+    return ((b1 % 0x20) * 0x40) + (b2 % 0x40)\n+  elseif b1 < 0xF0 then\n+    -- 3-byte sequence\n+    local b2 = s:byte(2)\n+    local b3 = s:byte(3)\n+    return ((b1 % 0x10) * 0x1000) + ((b2 % 0x40) * 0x40) + (b3 % 0x40)\n+  else\n+    -- 4-byte sequence\n+    local b2 = s:byte(2)\n+    local b3 = s:byte(3)\n+    local b4 = s:byte(4)\n+    return ((b1 % 0x08) * 0x40000) + ((b2 % 0x40) * 0x1000) + ((b3 % 0x40) * 0x40) + (b4 % 0x40)\n+  end\n+end\n+\n+--- Convert UTF-32 or UTF-16 {index} to byte index.\n+--- Opts can be a table containing: a \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+--- It can also be supplied as a boolean, true for utf-16 and false for utf-32.\n+--- If {opts} is not supplied, it defaults to false (UTF-32). Returns the byte index.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param index integer\n+---@param opts boolean|nil| { encoding: \"utf_8\"|\"utf-16\"|\"utf-32\" }\n+---@return integer\n+function vim.str_byteindex(s, index, opts)",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1779752668",
            "id": 1779752668,
            "in_reply_to_id": 1779742186,
            "line": 757,
            "node_id": "PRRC_kwDOAPphoM5qFN7c",
            "original_commit_id": "4fb536dbd2a0532ec2824935db46543d81ed1d5d",
            "original_line": 757,
            "original_position": 44,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": 43,
            "pull_request_review_id": 2335411677,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779752668/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-28T20:44:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779752668",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1779753153"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779753153"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I did it in Lua as thats what I know and kept the whole implementation more tightly coupled.\r\n\r\nHappy to do as you suggest and reach to C, but I might need some help with how best to action it",
            "commit_id": "da10c92d3aa914ef636728351fa10724acdbe8e9",
            "created_at": "2024-09-28T20:47:49Z",
            "diff_hunk": "@@ -715,6 +715,124 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n+-- Decodes a UTF-8 character to a Unicode code point.",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1779753153",
            "id": 1779753153,
            "in_reply_to_id": 1779750632,
            "line": 718,
            "node_id": "PRRC_kwDOAPphoM5qFODB",
            "original_commit_id": "178bd19009a0c3948ee72caad9ee081035ca9e29",
            "original_line": 718,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": 4,
            "pull_request_review_id": 2335411991,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779753153/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-28T20:47:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779753153",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1779756448"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779756448"
                }
            },
            "author_association": "MEMBER",
            "body": "> `_editor.lua` is guaranteed to be \"compiled\" in the `nvim` binary as lua byte code. I'm not sure if that applies to text.lua .\r\n\r\nfor this reason it should probably stay where you have it.",
            "commit_id": "da10c92d3aa914ef636728351fa10724acdbe8e9",
            "created_at": "2024-09-28T21:10:11Z",
            "diff_hunk": "@@ -627,6 +627,113 @@ function vim.notify(msg, level, opts) -- luacheck: no unused args\n   end\n end\n \n+-- Helper function to decode the UTF-8 character to a Unicode code point\n+---@private\n+---@param s string\n+---@return integer\n+local function utf_ptr2char(s)\n+  local b1 = s:byte(1)\n+\n+  if b1 < 0x80 then\n+    -- 1-byte sequence (ASCII character)\n+    return b1\n+  elseif b1 < 0xE0 then\n+    -- 2-byte sequence\n+    local b2 = s:byte(2)\n+    return ((b1 % 0x20) * 0x40) + (b2 % 0x40)\n+  elseif b1 < 0xF0 then\n+    -- 3-byte sequence\n+    local b2 = s:byte(2)\n+    local b3 = s:byte(3)\n+    return ((b1 % 0x10) * 0x1000) + ((b2 % 0x40) * 0x40) + (b3 % 0x40)\n+  else\n+    -- 4-byte sequence\n+    local b2 = s:byte(2)\n+    local b3 = s:byte(3)\n+    local b4 = s:byte(4)\n+    return ((b1 % 0x08) * 0x40000) + ((b2 % 0x40) * 0x1000) + ((b3 % 0x40) * 0x40) + (b4 % 0x40)\n+  end\n+end\n+\n+--- Convert UTF-32 or UTF-16 {index} to byte index.\n+--- Opts can be a table containing: a \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+--- It can also be supplied as a boolean, true for utf-16 and false for utf-32.\n+--- If {opts} is not supplied, it defaults to false (UTF-32). Returns the byte index.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param index integer\n+---@param opts boolean|nil| { encoding: \"utf_8\"|\"utf-16\"|\"utf-32\" }\n+---@return integer\n+function vim.str_byteindex(s, index, opts)",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1779756448",
            "id": 1779756448,
            "in_reply_to_id": 1779742186,
            "line": 757,
            "node_id": "PRRC_kwDOAPphoM5qFO2g",
            "original_commit_id": "4fb536dbd2a0532ec2824935db46543d81ed1d5d",
            "original_line": 757,
            "original_position": 44,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": 43,
            "pull_request_review_id": 2335414540,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779756448/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-28T21:10:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779756448",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1779756601"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779756601"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    opts = opts and { encoding = 'utf-16' } or { encoding = 'utf-32' }\r\n```\r\n",
            "commit_id": "da10c92d3aa914ef636728351fa10724acdbe8e9",
            "created_at": "2024-09-28T21:11:33Z",
            "diff_hunk": "@@ -715,6 +715,124 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n+-- Decodes a UTF-8 character to a Unicode code point.\n+---@private\n+---@param s string\n+---@return integer\n+local function utf_ptr2char(s)\n+  local b1 = s:byte(1)\n+\n+  if b1 < 0x80 then\n+    -- 1-byte sequence (ASCII character)\n+    return b1\n+  elseif b1 < 0xE0 then\n+    -- 2-byte sequence\n+    local b2 = s:byte(2)\n+    return ((b1 % 0x20) * 0x40) + (b2 % 0x40)\n+  elseif b1 < 0xF0 then\n+    -- 3-byte sequence\n+    local b2 = s:byte(2)\n+    local b3 = s:byte(3)\n+    return ((b1 % 0x10) * 0x1000) + ((b2 % 0x40) * 0x40) + (b3 % 0x40)\n+  else\n+    -- 4-byte sequence\n+    local b2 = s:byte(2)\n+    local b3 = s:byte(3)\n+    local b4 = s:byte(4)\n+    return ((b1 % 0x08) * 0x40000) + ((b2 % 0x40) * 0x1000) + ((b3 % 0x40) * 0x40) + (b4 % 0x40)\n+  end\n+end\n+\n+--- Convert UTF-32 or UTF-16 {index} to byte index.\n+--- {opts} can be a table containing two properties:i\n+--- * an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+--- * an \"error\" property of true or false, if error is false\n+--- then then an out of range index will return byte length\n+--- insert of an error.\n+---\n+--- {opts} can also be supplied as a boolean, true for utf-16 and false for utf-32.\n+--- If {opts} is not supplied, it defaults to false (UTF-32). Returns the byte index.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param index integer\n+---@param opts? boolean|nil| { encoding: \"utf_8\"|\"utf-16\"|\"utf-32\", error?: boolean }\n+---@return integer\n+function vim.str_byteindex(s, index, opts)\n+  local len = #s\n+  if index == 0 then\n+    return 0\n+  end\n+\n+  if index > len then\n+    return len\n+  end\n+\n+  if type(opts) == 'boolean' then\n+    if opts then\n+      opts = { encoding = 'utf-16' }\n+    else\n+      opts = { encoding = 'utf-32' }\n+    end",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1779756601",
            "id": 1779756601,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qFO45",
            "original_commit_id": "178bd19009a0c3948ee72caad9ee081035ca9e29",
            "original_line": 778,
            "original_position": 64,
            "original_start_line": 774,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2335414686,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779756601/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-09-28T21:11:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779756601",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1779920460"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779920460"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "```suggestion\n---@param opts? boolean|nil| { encoding: \"utf-8\"|\"utf-16\"|\"utf-32\", error?: boolean }\n```\n",
            "commit_id": "da10c92d3aa914ef636728351fa10724acdbe8e9",
            "created_at": "2024-09-29T06:25:03Z",
            "diff_hunk": "@@ -715,6 +715,120 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n+-- Decodes a UTF-8 character to a Unicode code point.\n+---@private\n+---@param s string\n+---@return integer\n+local function utf_ptr2char(s)\n+  local b1 = s:byte(1)\n+\n+  if b1 < 0x80 then\n+    -- 1-byte sequence (ASCII character)\n+    return b1\n+  elseif b1 < 0xE0 then\n+    -- 2-byte sequence\n+    local b2 = s:byte(2)\n+    return ((b1 % 0x20) * 0x40) + (b2 % 0x40)\n+  elseif b1 < 0xF0 then\n+    -- 3-byte sequence\n+    local b2 = s:byte(2)\n+    local b3 = s:byte(3)\n+    return ((b1 % 0x10) * 0x1000) + ((b2 % 0x40) * 0x40) + (b3 % 0x40)\n+  else\n+    -- 4-byte sequence\n+    local b2 = s:byte(2)\n+    local b3 = s:byte(3)\n+    local b4 = s:byte(4)\n+    return ((b1 % 0x08) * 0x40000) + ((b2 % 0x40) * 0x1000) + ((b3 % 0x40) * 0x40) + (b4 % 0x40)\n+  end\n+end\n+\n+--- Convert UTF-32 or UTF-16 {index} to byte index.\n+--- {opts} can be a table containing two properties:i\n+--- * an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+--- * an \"error\" property of true or false, if error is false\n+--- then then an out of range index will return byte length\n+--- insert of an error.\n+---\n+--- {opts} can also be supplied as a boolean, true for utf-16 and false for utf-32.\n+--- If {opts} is not supplied, it defaults to false (UTF-32). Returns the byte index.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param index integer\n+---@param opts? boolean|nil| { encoding: \"utf_8\"|\"utf-16\"|\"utf-32\", error?: boolean }",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1779920460",
            "id": 1779920460,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qF25M",
            "original_commit_id": "bc3a7e63ed354bf173695101f7e8f91a1c1bce77",
            "original_line": 761,
            "original_position": 47,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2335706964,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779920460/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-29T06:28:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779920460",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1779921136"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779921136"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I should ```vim.validate()``` here",
            "commit_id": "da10c92d3aa914ef636728351fa10724acdbe8e9",
            "created_at": "2024-09-29T06:28:47Z",
            "diff_hunk": "@@ -715,6 +715,120 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n+-- Decodes a UTF-8 character to a Unicode code point.\n+---@private\n+---@param s string\n+---@return integer\n+local function utf_ptr2char(s)\n+  local b1 = s:byte(1)\n+\n+  if b1 < 0x80 then\n+    -- 1-byte sequence (ASCII character)\n+    return b1\n+  elseif b1 < 0xE0 then\n+    -- 2-byte sequence\n+    local b2 = s:byte(2)\n+    return ((b1 % 0x20) * 0x40) + (b2 % 0x40)\n+  elseif b1 < 0xF0 then\n+    -- 3-byte sequence\n+    local b2 = s:byte(2)\n+    local b3 = s:byte(3)\n+    return ((b1 % 0x10) * 0x1000) + ((b2 % 0x40) * 0x40) + (b3 % 0x40)\n+  else\n+    -- 4-byte sequence\n+    local b2 = s:byte(2)\n+    local b3 = s:byte(3)\n+    local b4 = s:byte(4)\n+    return ((b1 % 0x08) * 0x40000) + ((b2 % 0x40) * 0x1000) + ((b3 % 0x40) * 0x40) + (b4 % 0x40)\n+  end\n+end\n+\n+--- Convert UTF-32 or UTF-16 {index} to byte index.\n+--- {opts} can be a table containing two properties:i\n+--- * an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+--- * an \"error\" property of true or false, if error is false\n+--- then then an out of range index will return byte length\n+--- insert of an error.\n+---\n+--- {opts} can also be supplied as a boolean, true for utf-16 and false for utf-32.\n+--- If {opts} is not supplied, it defaults to false (UTF-32). Returns the byte index.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param index integer\n+---@param opts? boolean|nil| { encoding: \"utf_8\"|\"utf-16\"|\"utf-32\", error?: boolean }\n+---@return integer\n+function vim.str_byteindex(s, index, opts)",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1779921136",
            "id": 1779921136,
            "line": 757,
            "node_id": "PRRC_kwDOAPphoM5qF3Dw",
            "original_commit_id": "bc3a7e63ed354bf173695101f7e8f91a1c1bce77",
            "original_line": 757,
            "original_position": 49,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": 43,
            "pull_request_review_id": 2335706964,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779921136/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-29T06:28:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779921136",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1779923529"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779923529"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  opts = opts or { encoding = 'utf-32', error = true }\r\n  if type(opts) == 'boolean' then\r\n    opts = opts and { encoding = 'utf-16' } or { encoding = 'utf-32' }\r\n  end\r\n\r\n  local encoding = opts.encoding or 'utf-32'\r\n  local valid_encodings = { utf_8 = true, utf_16 = true, utf_32 = true }\r\n  if not valid_encodings[encoding] then\r\n    error('Invalid encoding: ' .. encoding)\r\n  end\r\n```",
            "commit_id": "da10c92d3aa914ef636728351fa10724acdbe8e9",
            "created_at": "2024-09-29T06:42:29Z",
            "diff_hunk": "@@ -715,6 +715,120 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n+-- Decodes a UTF-8 character to a Unicode code point.\n+---@private\n+---@param s string\n+---@return integer\n+local function utf_ptr2char(s)\n+  local b1 = s:byte(1)\n+\n+  if b1 < 0x80 then\n+    -- 1-byte sequence (ASCII character)\n+    return b1\n+  elseif b1 < 0xE0 then\n+    -- 2-byte sequence\n+    local b2 = s:byte(2)\n+    return ((b1 % 0x20) * 0x40) + (b2 % 0x40)\n+  elseif b1 < 0xF0 then\n+    -- 3-byte sequence\n+    local b2 = s:byte(2)\n+    local b3 = s:byte(3)\n+    return ((b1 % 0x10) * 0x1000) + ((b2 % 0x40) * 0x40) + (b3 % 0x40)\n+  else\n+    -- 4-byte sequence\n+    local b2 = s:byte(2)\n+    local b3 = s:byte(3)\n+    local b4 = s:byte(4)\n+    return ((b1 % 0x08) * 0x40000) + ((b2 % 0x40) * 0x1000) + ((b3 % 0x40) * 0x40) + (b4 % 0x40)\n+  end\n+end\n+\n+--- Convert UTF-32 or UTF-16 {index} to byte index.\n+--- {opts} can be a table containing two properties:i\n+--- * an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+--- * an \"error\" property of true or false, if error is false\n+--- then then an out of range index will return byte length\n+--- insert of an error.\n+---\n+--- {opts} can also be supplied as a boolean, true for utf-16 and false for utf-32.\n+--- If {opts} is not supplied, it defaults to false (UTF-32). Returns the byte index.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param index integer\n+---@param opts? boolean|nil| { encoding: \"utf_8\"|\"utf-16\"|\"utf-32\", error?: boolean }\n+---@return integer\n+function vim.str_byteindex(s, index, opts)\n+  local len = #s\n+  if index == 0 then\n+    return 0\n+  end\n+\n+  if index > len then\n+    return len\n+  end\n+\n+  if type(opts) == 'boolean' then\n+    opts = opts and { encoding = 'utf-16' } or { encoding = 'utf-32' }\n+  end\n+\n+  if not opts or not opts.encoding then\n+    opts = { encoding = 'utf-32' }\n+  end\n+\n+  if not opts or not opts.error then\n+    opts.error = true\n+  end\n+\n+  local valid_encodings = { 'utf-8', 'utf-16', 'utf-32' }\n+  if not vim.tbl_contains(valid_encodings, opts.encoding) then\n+    error('Invalid encoding: ' .. opts.encoding)\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1779923529",
            "id": 1779923529,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qF3pJ",
            "original_commit_id": "bc3a7e63ed354bf173695101f7e8f91a1c1bce77",
            "original_line": 781,
            "original_position": 74,
            "original_start_line": 773,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2335710087,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779923529/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-09-29T06:42:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779923529",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1779925960"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779925960"
                }
            },
            "author_association": "MEMBER",
            "body": "why not get them in once `local b1, b2, b3, b4 = s:byte(1, 4)`",
            "commit_id": "da10c92d3aa914ef636728351fa10724acdbe8e9",
            "created_at": "2024-09-29T06:56:12Z",
            "diff_hunk": "@@ -715,6 +715,120 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n+-- Decodes a UTF-8 character to a Unicode code point.\n+---@private\n+---@param s string\n+---@return integer\n+local function utf_ptr2char(s)\n+  local b1 = s:byte(1)",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1779925960",
            "id": 1779925960,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qF4PI",
            "original_commit_id": "bc3a7e63ed354bf173695101f7e8f91a1c1bce77",
            "original_line": 723,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2335712474,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779925960/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-09-29T06:56:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1779925960",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1780014183"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1780014183"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  -- Prepare string by removing NUL characters\r\n  local prepared_string = s:gsub('%z', ' ')\r\n  local strlen = vim.fn.strchars(prepared_string)\r\n  local utf16_ptr, utf16_char = 0, 0\r\n  local utf32_ptr, utf32_char = 0, 0\r\n  local j = 0\r\n\r\n  -- Traverse the string and calculate pointers for UTF-16 and UTF-32\r\n  while j <= strlen do\r\n    j = j + 1\r\n    local char_len = vim.str_utf_end(s, j)\r\n    local c = utf_ptr2char(s:sub(j, j + char_len))\r\n\r\n    if c > 0xFFFF then\r\n      utf16_char = utf16_char + 2\r\n    else\r\n      utf16_char = utf16_char + 1\r\n    end\r\n    utf32_char = utf32_char + 1\r\n\r\n    if encoding == 'utf-16' and utf16_char >= index then\r\n      return utf16_ptr + char_len\r\n    elseif encoding == 'utf-32' and utf32_char >= index then\r\n      return utf32_ptr + char_len\r\n    end\r\n\r\n    utf32_ptr = utf32_ptr + char_len + 1\r\n    utf16_ptr = utf16_ptr + char_len + 1\r\n  end\r\n```",
            "commit_id": "da10c92d3aa914ef636728351fa10724acdbe8e9",
            "created_at": "2024-09-29T10:52:49Z",
            "diff_hunk": "@@ -715,6 +715,107 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n+-- Decodes a UTF-8 character to a Unicode code point.\n+---@private\n+---@param s string\n+---@return integer\n+local function utf_ptr2char(s)\n+  local b1, b2, b3, b4 = s:byte(1, 4)\n+\n+  if b1 < 0x80 then\n+    -- 1-byte sequence (ASCII character)\n+    return b1\n+  elseif b1 < 0xE0 then\n+    -- 2-byte sequence\n+    return ((b1 % 0x20) * 0x40) + (b2 % 0x40)\n+  elseif b1 < 0xF0 then\n+    -- 3-byte sequence\n+    return ((b1 % 0x10) * 0x1000) + ((b2 % 0x40) * 0x40) + (b3 % 0x40)\n+  else\n+    -- 4-byte sequence\n+    return ((b1 % 0x08) * 0x40000) + ((b2 % 0x40) * 0x1000) + ((b3 % 0x40) * 0x40) + (b4 % 0x40)\n+  end\n+end\n+\n+--- Convert UTF-32 or UTF-16 {index} to byte index.\n+--- {opts} can be a table containing two properties:i\n+--- * an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+--- * an \"error\" property of true or false, if error is false\n+--- then then an out of range index will return byte length\n+--- insert of an error.\n+---\n+--- {opts} can also be supplied as a boolean, true for utf-16 and false for utf-32.\n+--- If {opts} is not supplied, it defaults to false (UTF-32). Returns the byte index.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param index integer\n+---@param opts? boolean|nil| { encoding: \"utf-8\"|\"utf-16\"|\"utf-32\", error?: boolean }\n+---@return integer\n+function vim.str_byteindex(s, index, opts)\n+  local len = #s\n+  if index == 0 then\n+    return 0\n+  end\n+\n+  if index > len then\n+    return len\n+  end\n+\n+  opts = opts or { encoding = 'utf-32', error = true }\n+  if type(opts) == 'boolean' then\n+    opts = opts and { encoding = 'utf-16', error = true } or { encoding = 'utf-32', error = true }\n+  end\n+  local encoding = opts.encoding or 'utf-32'\n+  local valid_encodings = { ['utf-8'] = true, ['utf-16'] = true, ['utf-32'] = true }\n+  if not valid_encodings[encoding] then\n+    error('Invalid encoding: ' .. encoding)\n+  end\n+\n+  if opts.encoding == 'utf-8' then\n+    return index\n+  end\n+\n+  local byte_i = vim.str_utf_pos(s:gsub('%z', ' '))\n+  local utf16_ptr = 0\n+  local utf16_char = 0\n+  local utf32_ptr = 0\n+  local utf32_char = 0\n+  -- remove NUL from the string  (UTF-16 and UTF32 both use 4 bytes for NUL)\n+  local strlen = vim.fn.strchars(s:gsub('%z', '0000'))\n+  local j = 0\n+  while j <= strlen do\n+    j = j + 1\n+    local char_len = vim.str_utf_end(s, byte_i[j])\n+    local char = s:sub(byte_i[j], byte_i[j] + char_len) or ''\n+    local c = utf_ptr2char(char)\n+    if c > 0XFFFF then\n+      utf16_char = utf16_char + 2\n+    else\n+      utf16_char = utf16_char + 1\n+    end\n+    utf32_char = utf32_char + 1\n+\n+    utf32_ptr = utf32_ptr + char_len + 1\n+    utf16_ptr = utf16_ptr + char_len + 1\n+\n+    if opts.encoding == 'utf-16' and utf16_char >= index then\n+      return utf16_ptr\n+    end\n+\n+    if opts.encoding == 'utf-32' and utf32_char >= index then\n+      return utf32_ptr\n+    end\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1780014183",
            "id": 1780014183,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qGNxn",
            "original_commit_id": "bba0db901cd38118e7acd980542a2e956367cdab",
            "original_line": 807,
            "original_position": 97,
            "original_start_line": 781,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2335824567,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1780014183/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-09-29T10:52:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1780014183",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1780041108"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1780041108"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I have taken some aspects from this comment to clean the loop up, but I think I need the str_pos() for edge cases around split bytes\n\nI will push a commit a bit later ",
            "commit_id": "da10c92d3aa914ef636728351fa10724acdbe8e9",
            "created_at": "2024-09-29T13:04:22Z",
            "diff_hunk": "@@ -715,6 +715,107 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n+-- Decodes a UTF-8 character to a Unicode code point.\n+---@private\n+---@param s string\n+---@return integer\n+local function utf_ptr2char(s)\n+  local b1, b2, b3, b4 = s:byte(1, 4)\n+\n+  if b1 < 0x80 then\n+    -- 1-byte sequence (ASCII character)\n+    return b1\n+  elseif b1 < 0xE0 then\n+    -- 2-byte sequence\n+    return ((b1 % 0x20) * 0x40) + (b2 % 0x40)\n+  elseif b1 < 0xF0 then\n+    -- 3-byte sequence\n+    return ((b1 % 0x10) * 0x1000) + ((b2 % 0x40) * 0x40) + (b3 % 0x40)\n+  else\n+    -- 4-byte sequence\n+    return ((b1 % 0x08) * 0x40000) + ((b2 % 0x40) * 0x1000) + ((b3 % 0x40) * 0x40) + (b4 % 0x40)\n+  end\n+end\n+\n+--- Convert UTF-32 or UTF-16 {index} to byte index.\n+--- {opts} can be a table containing two properties:i\n+--- * an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+--- * an \"error\" property of true or false, if error is false\n+--- then then an out of range index will return byte length\n+--- insert of an error.\n+---\n+--- {opts} can also be supplied as a boolean, true for utf-16 and false for utf-32.\n+--- If {opts} is not supplied, it defaults to false (UTF-32). Returns the byte index.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param index integer\n+---@param opts? boolean|nil| { encoding: \"utf-8\"|\"utf-16\"|\"utf-32\", error?: boolean }\n+---@return integer\n+function vim.str_byteindex(s, index, opts)\n+  local len = #s\n+  if index == 0 then\n+    return 0\n+  end\n+\n+  if index > len then\n+    return len\n+  end\n+\n+  opts = opts or { encoding = 'utf-32', error = true }\n+  if type(opts) == 'boolean' then\n+    opts = opts and { encoding = 'utf-16', error = true } or { encoding = 'utf-32', error = true }\n+  end\n+  local encoding = opts.encoding or 'utf-32'\n+  local valid_encodings = { ['utf-8'] = true, ['utf-16'] = true, ['utf-32'] = true }\n+  if not valid_encodings[encoding] then\n+    error('Invalid encoding: ' .. encoding)\n+  end\n+\n+  if opts.encoding == 'utf-8' then\n+    return index\n+  end\n+\n+  local byte_i = vim.str_utf_pos(s:gsub('%z', ' '))\n+  local utf16_ptr = 0\n+  local utf16_char = 0\n+  local utf32_ptr = 0\n+  local utf32_char = 0\n+  -- remove NUL from the string  (UTF-16 and UTF32 both use 4 bytes for NUL)\n+  local strlen = vim.fn.strchars(s:gsub('%z', '0000'))\n+  local j = 0\n+  while j <= strlen do\n+    j = j + 1\n+    local char_len = vim.str_utf_end(s, byte_i[j])\n+    local char = s:sub(byte_i[j], byte_i[j] + char_len) or ''\n+    local c = utf_ptr2char(char)\n+    if c > 0XFFFF then\n+      utf16_char = utf16_char + 2\n+    else\n+      utf16_char = utf16_char + 1\n+    end\n+    utf32_char = utf32_char + 1\n+\n+    utf32_ptr = utf32_ptr + char_len + 1\n+    utf16_ptr = utf16_ptr + char_len + 1\n+\n+    if opts.encoding == 'utf-16' and utf16_char >= index then\n+      return utf16_ptr\n+    end\n+\n+    if opts.encoding == 'utf-32' and utf32_char >= index then\n+      return utf32_ptr\n+    end\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1780041108",
            "id": 1780041108,
            "in_reply_to_id": 1780014183,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qGUWU",
            "original_commit_id": "bba0db901cd38118e7acd980542a2e956367cdab",
            "original_line": 807,
            "original_position": 97,
            "original_start_line": 781,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2335851587,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1780041108/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-09-29T13:04:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1780041108",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1780072471"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1780072471"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I have taken a bit of a merged approach, as we did need to track the byte index too for substringing when the byte is split.\r\n\r\nlet me know once you have taken a look @glepnir ",
            "commit_id": "da10c92d3aa914ef636728351fa10724acdbe8e9",
            "created_at": "2024-09-29T15:39:01Z",
            "diff_hunk": "@@ -715,6 +715,107 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n+-- Decodes a UTF-8 character to a Unicode code point.\n+---@private\n+---@param s string\n+---@return integer\n+local function utf_ptr2char(s)\n+  local b1, b2, b3, b4 = s:byte(1, 4)\n+\n+  if b1 < 0x80 then\n+    -- 1-byte sequence (ASCII character)\n+    return b1\n+  elseif b1 < 0xE0 then\n+    -- 2-byte sequence\n+    return ((b1 % 0x20) * 0x40) + (b2 % 0x40)\n+  elseif b1 < 0xF0 then\n+    -- 3-byte sequence\n+    return ((b1 % 0x10) * 0x1000) + ((b2 % 0x40) * 0x40) + (b3 % 0x40)\n+  else\n+    -- 4-byte sequence\n+    return ((b1 % 0x08) * 0x40000) + ((b2 % 0x40) * 0x1000) + ((b3 % 0x40) * 0x40) + (b4 % 0x40)\n+  end\n+end\n+\n+--- Convert UTF-32 or UTF-16 {index} to byte index.\n+--- {opts} can be a table containing two properties:i\n+--- * an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+--- * an \"error\" property of true or false, if error is false\n+--- then then an out of range index will return byte length\n+--- insert of an error.\n+---\n+--- {opts} can also be supplied as a boolean, true for utf-16 and false for utf-32.\n+--- If {opts} is not supplied, it defaults to false (UTF-32). Returns the byte index.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param index integer\n+---@param opts? boolean|nil| { encoding: \"utf-8\"|\"utf-16\"|\"utf-32\", error?: boolean }\n+---@return integer\n+function vim.str_byteindex(s, index, opts)\n+  local len = #s\n+  if index == 0 then\n+    return 0\n+  end\n+\n+  if index > len then\n+    return len\n+  end\n+\n+  opts = opts or { encoding = 'utf-32', error = true }\n+  if type(opts) == 'boolean' then\n+    opts = opts and { encoding = 'utf-16', error = true } or { encoding = 'utf-32', error = true }\n+  end\n+  local encoding = opts.encoding or 'utf-32'\n+  local valid_encodings = { ['utf-8'] = true, ['utf-16'] = true, ['utf-32'] = true }\n+  if not valid_encodings[encoding] then\n+    error('Invalid encoding: ' .. encoding)\n+  end\n+\n+  if opts.encoding == 'utf-8' then\n+    return index\n+  end\n+\n+  local byte_i = vim.str_utf_pos(s:gsub('%z', ' '))\n+  local utf16_ptr = 0\n+  local utf16_char = 0\n+  local utf32_ptr = 0\n+  local utf32_char = 0\n+  -- remove NUL from the string  (UTF-16 and UTF32 both use 4 bytes for NUL)\n+  local strlen = vim.fn.strchars(s:gsub('%z', '0000'))\n+  local j = 0\n+  while j <= strlen do\n+    j = j + 1\n+    local char_len = vim.str_utf_end(s, byte_i[j])\n+    local char = s:sub(byte_i[j], byte_i[j] + char_len) or ''\n+    local c = utf_ptr2char(char)\n+    if c > 0XFFFF then\n+      utf16_char = utf16_char + 2\n+    else\n+      utf16_char = utf16_char + 1\n+    end\n+    utf32_char = utf32_char + 1\n+\n+    utf32_ptr = utf32_ptr + char_len + 1\n+    utf16_ptr = utf16_ptr + char_len + 1\n+\n+    if opts.encoding == 'utf-16' and utf16_char >= index then\n+      return utf16_ptr\n+    end\n+\n+    if opts.encoding == 'utf-32' and utf32_char >= index then\n+      return utf32_ptr\n+    end\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1780072471",
            "id": 1780072471,
            "in_reply_to_id": 1780014183,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qGcAX",
            "original_commit_id": "bba0db901cd38118e7acd980542a2e956367cdab",
            "original_line": 807,
            "original_position": 97,
            "original_start_line": 781,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2335882191,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1780072471/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-09-29T19:30:29Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1780072471",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1780467100"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1780467100"
                }
            },
            "author_association": "MEMBER",
            "body": "most LGTM just one thing shouldn't `if s:find('%z') then` do sub ? sub will have memory allocation to generate a new string.",
            "commit_id": "da10c92d3aa914ef636728351fa10724acdbe8e9",
            "created_at": "2024-09-30T05:44:26Z",
            "diff_hunk": "@@ -715,6 +715,107 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n+-- Decodes a UTF-8 character to a Unicode code point.\n+---@private\n+---@param s string\n+---@return integer\n+local function utf_ptr2char(s)\n+  local b1, b2, b3, b4 = s:byte(1, 4)\n+\n+  if b1 < 0x80 then\n+    -- 1-byte sequence (ASCII character)\n+    return b1\n+  elseif b1 < 0xE0 then\n+    -- 2-byte sequence\n+    return ((b1 % 0x20) * 0x40) + (b2 % 0x40)\n+  elseif b1 < 0xF0 then\n+    -- 3-byte sequence\n+    return ((b1 % 0x10) * 0x1000) + ((b2 % 0x40) * 0x40) + (b3 % 0x40)\n+  else\n+    -- 4-byte sequence\n+    return ((b1 % 0x08) * 0x40000) + ((b2 % 0x40) * 0x1000) + ((b3 % 0x40) * 0x40) + (b4 % 0x40)\n+  end\n+end\n+\n+--- Convert UTF-32 or UTF-16 {index} to byte index.\n+--- {opts} can be a table containing two properties:i\n+--- * an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+--- * an \"error\" property of true or false, if error is false\n+--- then then an out of range index will return byte length\n+--- insert of an error.\n+---\n+--- {opts} can also be supplied as a boolean, true for utf-16 and false for utf-32.\n+--- If {opts} is not supplied, it defaults to false (UTF-32). Returns the byte index.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param index integer\n+---@param opts? boolean|nil| { encoding: \"utf-8\"|\"utf-16\"|\"utf-32\", error?: boolean }\n+---@return integer\n+function vim.str_byteindex(s, index, opts)\n+  local len = #s\n+  if index == 0 then\n+    return 0\n+  end\n+\n+  if index > len then\n+    return len\n+  end\n+\n+  opts = opts or { encoding = 'utf-32', error = true }\n+  if type(opts) == 'boolean' then\n+    opts = opts and { encoding = 'utf-16', error = true } or { encoding = 'utf-32', error = true }\n+  end\n+  local encoding = opts.encoding or 'utf-32'\n+  local valid_encodings = { ['utf-8'] = true, ['utf-16'] = true, ['utf-32'] = true }\n+  if not valid_encodings[encoding] then\n+    error('Invalid encoding: ' .. encoding)\n+  end\n+\n+  if opts.encoding == 'utf-8' then\n+    return index\n+  end\n+\n+  local byte_i = vim.str_utf_pos(s:gsub('%z', ' '))\n+  local utf16_ptr = 0\n+  local utf16_char = 0\n+  local utf32_ptr = 0\n+  local utf32_char = 0\n+  -- remove NUL from the string  (UTF-16 and UTF32 both use 4 bytes for NUL)\n+  local strlen = vim.fn.strchars(s:gsub('%z', '0000'))\n+  local j = 0\n+  while j <= strlen do\n+    j = j + 1\n+    local char_len = vim.str_utf_end(s, byte_i[j])\n+    local char = s:sub(byte_i[j], byte_i[j] + char_len) or ''\n+    local c = utf_ptr2char(char)\n+    if c > 0XFFFF then\n+      utf16_char = utf16_char + 2\n+    else\n+      utf16_char = utf16_char + 1\n+    end\n+    utf32_char = utf32_char + 1\n+\n+    utf32_ptr = utf32_ptr + char_len + 1\n+    utf16_ptr = utf16_ptr + char_len + 1\n+\n+    if opts.encoding == 'utf-16' and utf16_char >= index then\n+      return utf16_ptr\n+    end\n+\n+    if opts.encoding == 'utf-32' and utf32_char >= index then\n+      return utf32_ptr\n+    end\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1780467100",
            "id": 1780467100,
            "in_reply_to_id": 1780014183,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qH8Wc",
            "original_commit_id": "bba0db901cd38118e7acd980542a2e956367cdab",
            "original_line": 807,
            "original_position": 97,
            "original_start_line": 781,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2336437627,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1780467100/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-09-30T05:44:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1780467100",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41671631?v=4",
                "events_url": "https://api.github.com/users/glepnir/events{/privacy}",
                "followers_url": "https://api.github.com/users/glepnir/followers",
                "following_url": "https://api.github.com/users/glepnir/following{/other_user}",
                "gists_url": "https://api.github.com/users/glepnir/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/glepnir",
                "id": 41671631,
                "login": "glepnir",
                "node_id": "MDQ6VXNlcjQxNjcxNjMx",
                "organizations_url": "https://api.github.com/users/glepnir/orgs",
                "received_events_url": "https://api.github.com/users/glepnir/received_events",
                "repos_url": "https://api.github.com/users/glepnir/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/glepnir/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/glepnir/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/glepnir"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30560#discussion_r1781417791"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30560"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1781417791"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "i have added a conditional check, so the sub is only done if a NUL is found",
            "commit_id": "da10c92d3aa914ef636728351fa10724acdbe8e9",
            "created_at": "2024-09-30T16:16:50Z",
            "diff_hunk": "@@ -715,6 +715,107 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n+-- Decodes a UTF-8 character to a Unicode code point.\n+---@private\n+---@param s string\n+---@return integer\n+local function utf_ptr2char(s)\n+  local b1, b2, b3, b4 = s:byte(1, 4)\n+\n+  if b1 < 0x80 then\n+    -- 1-byte sequence (ASCII character)\n+    return b1\n+  elseif b1 < 0xE0 then\n+    -- 2-byte sequence\n+    return ((b1 % 0x20) * 0x40) + (b2 % 0x40)\n+  elseif b1 < 0xF0 then\n+    -- 3-byte sequence\n+    return ((b1 % 0x10) * 0x1000) + ((b2 % 0x40) * 0x40) + (b3 % 0x40)\n+  else\n+    -- 4-byte sequence\n+    return ((b1 % 0x08) * 0x40000) + ((b2 % 0x40) * 0x1000) + ((b3 % 0x40) * 0x40) + (b4 % 0x40)\n+  end\n+end\n+\n+--- Convert UTF-32 or UTF-16 {index} to byte index.\n+--- {opts} can be a table containing two properties:i\n+--- * an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+--- * an \"error\" property of true or false, if error is false\n+--- then then an out of range index will return byte length\n+--- insert of an error.\n+---\n+--- {opts} can also be supplied as a boolean, true for utf-16 and false for utf-32.\n+--- If {opts} is not supplied, it defaults to false (UTF-32). Returns the byte index.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param index integer\n+---@param opts? boolean|nil| { encoding: \"utf-8\"|\"utf-16\"|\"utf-32\", error?: boolean }\n+---@return integer\n+function vim.str_byteindex(s, index, opts)\n+  local len = #s\n+  if index == 0 then\n+    return 0\n+  end\n+\n+  if index > len then\n+    return len\n+  end\n+\n+  opts = opts or { encoding = 'utf-32', error = true }\n+  if type(opts) == 'boolean' then\n+    opts = opts and { encoding = 'utf-16', error = true } or { encoding = 'utf-32', error = true }\n+  end\n+  local encoding = opts.encoding or 'utf-32'\n+  local valid_encodings = { ['utf-8'] = true, ['utf-16'] = true, ['utf-32'] = true }\n+  if not valid_encodings[encoding] then\n+    error('Invalid encoding: ' .. encoding)\n+  end\n+\n+  if opts.encoding == 'utf-8' then\n+    return index\n+  end\n+\n+  local byte_i = vim.str_utf_pos(s:gsub('%z', ' '))\n+  local utf16_ptr = 0\n+  local utf16_char = 0\n+  local utf32_ptr = 0\n+  local utf32_char = 0\n+  -- remove NUL from the string  (UTF-16 and UTF32 both use 4 bytes for NUL)\n+  local strlen = vim.fn.strchars(s:gsub('%z', '0000'))\n+  local j = 0\n+  while j <= strlen do\n+    j = j + 1\n+    local char_len = vim.str_utf_end(s, byte_i[j])\n+    local char = s:sub(byte_i[j], byte_i[j] + char_len) or ''\n+    local c = utf_ptr2char(char)\n+    if c > 0XFFFF then\n+      utf16_char = utf16_char + 2\n+    else\n+      utf16_char = utf16_char + 1\n+    end\n+    utf32_char = utf32_char + 1\n+\n+    utf32_ptr = utf32_ptr + char_len + 1\n+    utf16_ptr = utf16_ptr + char_len + 1\n+\n+    if opts.encoding == 'utf-16' and utf16_char >= index then\n+      return utf16_ptr\n+    end\n+\n+    if opts.encoding == 'utf-32' and utf32_char >= index then\n+      return utf32_ptr\n+    end\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/30560#discussion_r1781417791",
            "id": 1781417791,
            "in_reply_to_id": 1780014183,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5qLkc_",
            "original_commit_id": "bba0db901cd38118e7acd980542a2e956367cdab",
            "original_line": 807,
            "original_position": 97,
            "original_start_line": 781,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2338029284,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1781417791/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-09-30T16:16:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1781417791",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203"
            }
        }
    ],
    "comment_regular_data": [],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/30560/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/30560/commits",
    "created_at": "2024-09-28T19:22:43Z",
    "diff_url": "https://github.com/neovim/neovim/pull/30560.diff",
    "draft": false,
    "head": {
        "label": "tris203:str_byte",
        "ref": "str_byte",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/tris203/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/tris203/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/tris203/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/tris203/neovim/branches{/branch}",
            "clone_url": "https://github.com/tris203/neovim.git",
            "collaborators_url": "https://api.github.com/repos/tris203/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/tris203/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/tris203/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/tris203/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/tris203/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/tris203/neovim/contributors",
            "created_at": "2024-09-01T13:29:52Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/tris203/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/tris203/neovim/downloads",
            "events_url": "https://api.github.com/repos/tris203/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/tris203/neovim/forks",
            "full_name": "tris203/neovim",
            "git_commits_url": "https://api.github.com/repos/tris203/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/tris203/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/tris203/neovim/git/tags{/sha}",
            "git_url": "git://github.com/tris203/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/tris203/neovim/hooks",
            "html_url": "https://github.com/tris203/neovim",
            "id": 850679366,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/tris203/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/tris203/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/tris203/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/tris203/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/tris203/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/tris203/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/tris203/neovim/merges",
            "milestones_url": "https://api.github.com/repos/tris203/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOMrRWRg",
            "notifications_url": "https://api.github.com/repos/tris203/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/tris203/neovim/pulls{/number}",
            "pushed_at": "2024-09-30T19:59:12Z",
            "releases_url": "https://api.github.com/repos/tris203/neovim/releases{/id}",
            "size": 281773,
            "ssh_url": "git@github.com:tris203/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/tris203/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/tris203/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/tris203/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/tris203/neovim/subscription",
            "svn_url": "https://github.com/tris203/neovim",
            "tags_url": "https://api.github.com/repos/tris203/neovim/tags",
            "teams_url": "https://api.github.com/repos/tris203/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/tris203/neovim/git/trees{/sha}",
            "updated_at": "2024-09-29T10:01:41Z",
            "url": "https://api.github.com/repos/tris203/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "da10c92d3aa914ef636728351fa10724acdbe8e9",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
            "events_url": "https://api.github.com/users/tris203/events{/privacy}",
            "followers_url": "https://api.github.com/users/tris203/followers",
            "following_url": "https://api.github.com/users/tris203/following{/other_user}",
            "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/tris203",
            "id": 18444302,
            "login": "tris203",
            "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
            "organizations_url": "https://api.github.com/users/tris203/orgs",
            "received_events_url": "https://api.github.com/users/tris203/received_events",
            "repos_url": "https://api.github.com/users/tris203/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/tris203"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/30560",
    "id": 2097202189,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30560",
    "labels": [
        {
            "color": "C5DEF5",
            "default": false,
            "description": "changes that are not features or bugfixes",
            "id": 106949155,
            "name": "refactor",
            "node_id": "MDU6TGFiZWwxMDY5NDkxNTU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/refactor"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        }
    ],
    "locked": false,
    "merge_commit_sha": "ef93caa01171e87463d9d64c939229c6461404d5",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM59AMQN",
    "number": 30560,
    "patch_url": "https://github.com/neovim/neovim/pull/30560.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/30560/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/da10c92d3aa914ef636728351fa10724acdbe8e9",
    "title": "refactor: convert str_byteindex to lua and extend",
    "updated_at": "2024-09-30T16:16:50Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/30560",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
        "events_url": "https://api.github.com/users/tris203/events{/privacy}",
        "followers_url": "https://api.github.com/users/tris203/followers",
        "following_url": "https://api.github.com/users/tris203/following{/other_user}",
        "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/tris203",
        "id": 18444302,
        "login": "tris203",
        "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
        "organizations_url": "https://api.github.com/users/tris203/orgs",
        "received_events_url": "https://api.github.com/users/tris203/received_events",
        "repos_url": "https://api.github.com/users/tris203/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/tris203"
    }
}