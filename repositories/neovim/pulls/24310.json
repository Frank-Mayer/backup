{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/24310/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/24310/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/24310"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/24310"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/24310/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/24310"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/90fd0864c4794e711cb6c28c41ec05b4d0187954"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 4848,
            "forks_count": 4848,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1676,
            "open_issues_count": 1676,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2023-09-03T01:53:16Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 242246,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 69057,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2023-09-02T23:40:15Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 69057,
            "watchers_count": 69057,
            "web_commit_signoff_required": false
        },
        "sha": "845d5b8b64190e0e09a6a6dd97bdbc0e6f96eb02",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "Continued work on deconstructing the house of cards that it option setting.",
    "closed_at": "2023-09-02T09:37:16Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24310#discussion_r1259468502"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24310"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1259468502"
                }
            },
            "author_association": "MEMBER",
            "body": "Diff is a bit broken, but I've removed a chunk of code with this line.",
            "commit_id": "90fd0864c4794e711cb6c28c41ec05b4d0187954",
            "created_at": "2023-07-11T09:27:20Z",
            "diff_hunk": "@@ -2927,181 +2927,188 @@ static const char *check_num_option_bounds(long *pp, long old_value, long old_Ro\n   return errmsg;\n }\n \n-/// Set the value of a number option, taking care of side effects\n-///\n-/// @param[in]  opt_idx  Option index in options[] table.\n-/// @param[out]  varp  Pointer to the option variable.\n-/// @param[in]  value  New value.\n-/// @param  errbuf  Buffer for error messages.\n-/// @param[in]  errbuflen  Length of `errbuf`.\n-/// @param[in]  opt_flags  OPT_LOCAL, OPT_GLOBAL or OPT_MODELINE.\n-///\n-/// @return NULL on success, error message on error.\n-static const char *set_num_option(int opt_idx, void *varp, long value, char *errbuf,\n-                                  size_t errbuflen, int opt_flags)\n+/// Options that need some validation.\n+static const char *validate_num_option(const long *pp, long value)\n {\n-  const char *errmsg = NULL;\n-  long old_value = *(long *)varp;\n-  long old_global_value = 0;  // only used when setting a local and global option\n-  long old_Rows = Rows;       // remember old Rows\n-  long *pp = (long *)varp;\n-\n-  // Disallow changing some options from secure mode.\n-  if ((secure || sandbox != 0) && (options[opt_idx].flags & P_SECURE)) {\n-    return e_secure;\n-  }\n-\n-  // Save the global value before changing anything. This is needed as for\n-  // a global-only option setting the \"local value\" in fact sets the global\n-  // value (since there is only one value).\n-  if ((opt_flags & (OPT_LOCAL | OPT_GLOBAL)) == 0) {\n-    old_global_value = *(long *)get_varp_scope(&(options[opt_idx]), OPT_GLOBAL);\n-  }\n-\n   // Many number options assume their value is in the signed int range.\n   if (value < INT_MIN || value > INT_MAX) {\n     return e_invarg;\n   }\n \n-  // Options that need some validation.\n   if (pp == &p_wh) {\n     if (value < 1) {\n-      errmsg = e_positive;\n+      return e_positive;\n     } else if (p_wmh > value) {\n-      errmsg = e_winheight;\n+      return e_winheight;\n     }\n   } else if (pp == &p_hh) {\n     if (value < 0) {\n-      errmsg = e_positive;\n+      return e_positive;\n     }\n   } else if (pp == &p_wmh) {\n     if (value < 0) {\n-      errmsg = e_positive;\n+      return e_positive;\n     } else if (value > p_wh) {\n-      errmsg = e_winheight;\n+      return e_winheight;\n     }\n   } else if (pp == &p_wiw) {\n     if (value < 1) {\n-      errmsg = e_positive;\n+      return e_positive;\n     } else if (p_wmw > value) {\n-      errmsg = e_winwidth;\n+      return e_winwidth;\n     }\n   } else if (pp == &p_wmw) {\n     if (value < 0) {\n-      errmsg = e_positive;\n+      return e_positive;\n     } else if (value > p_wiw) {\n-      errmsg = e_winwidth;\n+      return e_winwidth;\n     }\n   } else if (pp == &p_mco) {\n     value = MAX_MCO;\n   } else if (pp == &p_titlelen) {\n     if (value < 0) {\n-      errmsg = e_positive;\n+      return e_positive;\n     }\n   } else if (pp == &p_uc) {\n     if (value < 0) {\n-      errmsg = e_positive;\n+      return e_positive;\n     }\n   } else if (pp == &p_ch) {\n     if (value < 0) {\n-      errmsg = e_positive;\n+      return e_positive;\n     } else {\n       p_ch_was_zero = value == 0;\n     }\n   } else if (pp == &p_tm) {\n     if (value < 0) {\n-      errmsg = e_positive;\n+      return e_positive;\n     }\n   } else if (pp == &p_hi) {\n     if (value < 0) {\n-      errmsg = e_positive;\n+      return e_positive;\n     } else if (value > 10000) {\n-      errmsg = e_invarg;\n+      return e_invarg;\n     }\n   } else if (pp == &p_pyx) {\n     if (value == 0) {\n       value = 3;\n     } else if (value != 3) {\n-      errmsg = e_invarg;\n+      return e_invarg;\n     }\n   } else if (pp == &p_re) {\n     if (value < 0 || value > 2) {\n-      errmsg = e_invarg;\n+      return e_invarg;\n     }\n   } else if (pp == &p_report) {\n     if (value < 0) {\n-      errmsg = e_positive;\n+      return e_positive;\n     }\n   } else if (pp == &p_so) {\n     if (value < 0 && full_screen) {\n-      errmsg = e_positive;\n+      return e_positive;\n     }\n   } else if (pp == &p_siso) {\n     if (value < 0 && full_screen) {\n-      errmsg = e_positive;\n+      return e_positive;\n     }\n   } else if (pp == &p_cwh) {\n     if (value < 1) {\n-      errmsg = e_positive;\n+      return e_positive;\n     }\n   } else if (pp == &p_ut) {\n     if (value < 0) {\n-      errmsg = e_positive;\n+      return e_positive;\n     }\n   } else if (pp == &p_ss) {\n     if (value < 0) {\n-      errmsg = e_positive;\n+      return e_positive;\n     }\n   } else if (pp == &curwin->w_p_fdl || pp == &curwin->w_allbuf_opt.wo_fdl) {\n     if (value < 0) {\n-      errmsg = e_positive;\n+      return e_positive;\n     }\n   } else if (pp == &curwin->w_p_cole || pp == &curwin->w_allbuf_opt.wo_cole) {\n     if (value < 0) {\n-      errmsg = e_positive;\n+      return e_positive;\n     } else if (value > 3) {\n-      errmsg = e_invarg;\n+      return e_invarg;\n     }\n   } else if (pp == &curwin->w_p_nuw || pp == &curwin->w_allbuf_opt.wo_nuw) {\n     if (value < 1) {\n-      errmsg = e_positive;\n+      return e_positive;\n     } else if (value > MAX_NUMBERWIDTH) {\n-      errmsg = e_invarg;\n+      return e_invarg;\n     }\n   } else if (pp == &curbuf->b_p_iminsert || pp == &p_iminsert) {\n     if (value < 0 || value > B_IMODE_LAST) {\n-      errmsg = e_invarg;\n+      return e_invarg;\n     }\n   } else if (pp == &curbuf->b_p_imsearch || pp == &p_imsearch) {\n     if (value < -1 || value > B_IMODE_LAST) {\n-      errmsg = e_invarg;\n+      return e_invarg;\n     }\n   } else if (pp == &curbuf->b_p_channel || pp == &p_channel) {\n-    errmsg = e_invarg;\n+    return e_invarg;\n   } else if (pp == &curbuf->b_p_scbk || pp == &p_scbk) {\n     if (value < -1 || value > SB_MAX) {\n-      errmsg = e_invarg;\n+      return e_invarg;\n     }\n   } else if (pp == &curbuf->b_p_sw || pp == &p_sw) {\n     if (value < 0) {\n-      errmsg = e_positive;\n+      return e_positive;\n     }\n   } else if (pp == &curbuf->b_p_ts || pp == &p_ts) {\n     if (value < 1) {\n-      errmsg = e_positive;\n+      return e_positive;\n     } else if (value > TABSTOP_MAX) {\n-      errmsg = e_invarg;\n+      return e_invarg;\n     }\n   } else if (pp == &curbuf->b_p_tw || pp == &p_tw) {\n     if (value < 0) {\n-      errmsg = e_positive;\n+      return e_positive;\n     }\n   } else if (pp == &p_wd) {\n     if (value < 0) {\n-      errmsg = e_positive;\n+      return e_positive;\n     }\n   }\n \n+  return NULL;\n+}\n+\n+/// Set the value of a number option, taking care of side effects\n+///\n+/// @param[in]  opt_idx  Option index in options[] table.\n+/// @param[out]  varp  Pointer to the option variable.\n+/// @param[in]  value  New value.\n+/// @param  errbuf  Buffer for error messages.\n+/// @param[in]  errbuflen  Length of `errbuf`.\n+/// @param[in]  opt_flags  OPT_LOCAL, OPT_GLOBAL or OPT_MODELINE.\n+///\n+/// @return NULL on success, error message on error.\n+static const char *set_num_option(int opt_idx, void *varp, long value, char *errbuf,\n+                                  size_t errbuflen, int opt_flags)\n+{\n+  const char *errmsg = NULL;\n+  long old_value = *(long *)varp;\n+  long old_global_value = 0;  // only used when setting a local and global option\n+  long old_Rows = Rows;       // remember old Rows\n+  long *pp = (long *)varp;\n+\n+  // Disallow changing some options from secure mode.\n+  if ((secure || sandbox != 0) && (options[opt_idx].flags & P_SECURE)) {\n+    return e_secure;\n+  }\n+\n+  // Save the global value before changing anything. This is needed as for\n+  // a global-only option setting the \"local value\" in fact sets the global\n+  // value (since there is only one value).\n+  if ((opt_flags & (OPT_LOCAL | OPT_GLOBAL)) == 0) {\n+    old_global_value = *(long *)get_varp_scope(&(options[opt_idx]), OPT_GLOBAL);\n+  }\n+\n+  errmsg = validate_num_option(pp, value);",
            "html_url": "https://github.com/neovim/neovim/pull/24310#discussion_r1259468502",
            "id": 1259468502,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5LEfbW",
            "original_commit_id": "72228e2e14ff63fec8129bfe4e8e685c8009cee4",
            "original_line": 3110,
            "original_position": 252,
            "original_start_line": null,
            "path": "src/nvim/option.c",
            "position": null,
            "pull_request_review_id": 1523848292,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24310",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 2,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1259468502/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-11T09:27:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1259468502",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24310#discussion_r1261500724"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24310"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1261500724"
                }
            },
            "author_association": "MEMBER",
            "body": "Maybe add a comment for the `value_checked` param? Also, could this be `bool *`? I only see it (and also `os_value_checked`) only be assigned to `true`/`false`",
            "commit_id": "90fd0864c4794e711cb6c28c41ec05b4d0187954",
            "created_at": "2023-07-12T17:34:47Z",
            "diff_hunk": "@@ -415,7 +415,7 @@ void set_string_option_direct_in_win(win_T *wp, const char *name, int opt_idx, c\n ///\n /// @return NULL on success, an untranslated error message on error.\n const char *set_string_option(const int opt_idx, const char *const value, const int opt_flags,\n-                              char *const errbuf, const size_t errbuflen)\n+                              int *value_checked, char *const errbuf, const size_t errbuflen)",
            "html_url": "https://github.com/neovim/neovim/pull/24310#discussion_r1261500724",
            "id": 1261500724,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5LMPk0",
            "original_commit_id": "865e6f6058db37632832dc7e9f66ca3b19524c1b",
            "original_line": 418,
            "original_position": 5,
            "original_start_line": null,
            "path": "src/nvim/optionstr.c",
            "position": null,
            "pull_request_review_id": 1526871012,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24310",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1261500724/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-12T17:40:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1261500724",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24310#discussion_r1311804734"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24310"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1311804734"
                }
            },
            "author_association": "MEMBER",
            "body": "Do we know why this part was put inside a nested scope? Is it just to isolate one variable or are there other reasons?",
            "commit_id": "90fd0864c4794e711cb6c28c41ec05b4d0187954",
            "created_at": "2023-08-31T15:23:21Z",
            "diff_hunk": "@@ -1110,91 +1111,85 @@ static void do_set_option_string(int opt_idx, int opt_flags, char **argp, int ne\n   // with a local value the local value will be\n   // reset, use the global value here.\n   if ((opt_flags & (OPT_LOCAL | OPT_GLOBAL)) == 0\n-      && ((int)options[opt_idx].indir & PV_BOTH)) {\n-    varp = options[opt_idx].var;\n+      && ((int)opt->indir & PV_BOTH)) {\n+    varp = opt->var;\n   }\n \n   // The old value is kept until we are sure that the new value is valid.\n   char *oldval = *(char **)varp;\n \n   if ((opt_flags & (OPT_LOCAL | OPT_GLOBAL)) == 0) {\n-    origval_l = *(char **)get_varp_scope(&(options[opt_idx]), OPT_LOCAL);\n-    origval_g = *(char **)get_varp_scope(&(options[opt_idx]), OPT_GLOBAL);\n+    origval_l = *(char **)get_varp_scope(opt, OPT_LOCAL);\n+    origval_g = *(char **)get_varp_scope(opt, OPT_GLOBAL);\n \n     // A global-local string option might have an empty option as value to\n     // indicate that the global value should be used.\n-    if (((int)options[opt_idx].indir & PV_BOTH) && origval_l == empty_option) {\n+    if (((int)opt->indir & PV_BOTH) && origval_l == empty_option) {\n       origval_l = origval_g;\n     }\n   }\n \n   char *origval;\n   // When setting the local value of a global option, the old value may be\n   // the global value.\n-  if (((int)options[opt_idx].indir & PV_BOTH) && (opt_flags & OPT_LOCAL)) {\n-    origval = *(char **)get_varp(&options[opt_idx]);\n+  if (((int)opt->indir & PV_BOTH) && (opt_flags & OPT_LOCAL)) {\n+    origval = *(char **)get_varp(opt);\n   } else {\n     origval = oldval;\n   }\n \n   // Get the new value for the option\n-  char *newval = stropt_get_newval(nextchar, opt_idx, &arg, varp, origval, &op, flags);\n+  char *newval = stropt_get_newval(nextchar, opt_idx, argp, varp, origval, &op, flags);\n \n   // Set the new value.\n-  *(char **)(varp) = newval;\n-  if (newval == NULL) {\n-    *(char **)(varp) = empty_option;\n-  }\n+  *(char **)(varp) = newval != NULL ? newval : empty_option;\n \n   // origval may be freed by did_set_string_option(), make a copy.\n-  char *saved_origval = (origval != NULL) ? xstrdup(origval) : NULL;\n-  char *saved_origval_l = (origval_l != NULL) ? xstrdup(origval_l) : NULL;\n-  char *saved_origval_g = (origval_g != NULL) ? xstrdup(origval_g) : NULL;\n+  char *const saved_origval = (origval != NULL) ? xstrdup(origval) : NULL;\n+  char *const saved_origval_l = (origval_l != NULL) ? xstrdup(origval_l) : NULL;\n+  char *const saved_origval_g = (origval_g != NULL) ? xstrdup(origval_g) : NULL;\n \n   // newval (and varp) may become invalid if the buffer is closed by\n   // autocommands.\n-  char *saved_newval = (newval != NULL) ? xstrdup(newval) : NULL;\n+  char *const saved_newval = (newval != NULL) ? xstrdup(newval) : NULL;\n \n-  {\n-    uint32_t *p = insecure_flag(curwin, opt_idx, opt_flags);\n-    const int secure_saved = secure;\n+  uint32_t *p = insecure_flag(curwin, opt_idx, opt_flags);\n+  const int secure_saved = secure;\n \n-    // When an option is set in the sandbox, from a modeline or in secure\n-    // mode, then deal with side effects in secure mode.  Also when the\n-    // value was set with the P_INSECURE flag and is not completely\n-    // replaced.\n-    if ((opt_flags & OPT_MODELINE)\n-        || sandbox != 0\n-        || (op != OP_NONE && (*p & P_INSECURE))) {\n-      secure = 1;\n-    }\n+  // When an option is set in the sandbox, from a modeline or in secure\n+  // mode, then deal with side effects in secure mode.  Also when the\n+  // value was set with the P_INSECURE flag and is not completely\n+  // replaced.\n+  if ((opt_flags & OPT_MODELINE)\n+      || sandbox != 0\n+      || (op != OP_NONE && (*p & P_INSECURE))) {\n+    secure = 1;\n+  }\n \n-    // Handle side effects, and set the global value for \":set\" on local\n-    // options. Note: when setting 'syntax' or 'filetype' autocommands may\n-    // be triggered that can cause havoc.\n-    *errmsg = did_set_string_option(opt_idx, (char **)varp, oldval, newval,\n-                                    errbuf, errbuflen,\n-                                    opt_flags, value_checked);\n+  // Handle side effects, and set the global value for \":set\" on local\n+  // options. Note: when setting 'syntax' or 'filetype' autocommands may\n+  // be triggered that can cause havoc.\n+  *errmsg = did_set_string_option(curbuf, curwin, opt_idx, (char **)varp, oldval,\n+                                  errbuf, errbuflen,\n+                                  opt_flags, value_checked);\n \n-    secure = secure_saved;\n-  }",
            "html_url": "https://github.com/neovim/neovim/pull/24310#discussion_r1311804734",
            "id": 1311804734,
            "line": 1180,
            "node_id": "PRRC_kwDOAPphoM5OMI0-",
            "original_commit_id": "90fd0864c4794e711cb6c28c41ec05b4d0187954",
            "original_line": 1180,
            "original_position": 114,
            "original_start_line": 1158,
            "path": "src/nvim/option.c",
            "position": 114,
            "pull_request_review_id": 1605024218,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24310",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1311804734/reactions"
            },
            "side": "LEFT",
            "start_line": 1158,
            "start_side": "LEFT",
            "subject_type": "line",
            "updated_at": "2023-08-31T15:23:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1311804734",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24310#discussion_r1311806210"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24310"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1311806210"
                }
            },
            "author_association": "MEMBER",
            "body": "I assumed it was to just isolate scope of 2 variables. I don't know what other reasons there could be.",
            "commit_id": "90fd0864c4794e711cb6c28c41ec05b4d0187954",
            "created_at": "2023-08-31T15:24:30Z",
            "diff_hunk": "@@ -1110,91 +1111,85 @@ static void do_set_option_string(int opt_idx, int opt_flags, char **argp, int ne\n   // with a local value the local value will be\n   // reset, use the global value here.\n   if ((opt_flags & (OPT_LOCAL | OPT_GLOBAL)) == 0\n-      && ((int)options[opt_idx].indir & PV_BOTH)) {\n-    varp = options[opt_idx].var;\n+      && ((int)opt->indir & PV_BOTH)) {\n+    varp = opt->var;\n   }\n \n   // The old value is kept until we are sure that the new value is valid.\n   char *oldval = *(char **)varp;\n \n   if ((opt_flags & (OPT_LOCAL | OPT_GLOBAL)) == 0) {\n-    origval_l = *(char **)get_varp_scope(&(options[opt_idx]), OPT_LOCAL);\n-    origval_g = *(char **)get_varp_scope(&(options[opt_idx]), OPT_GLOBAL);\n+    origval_l = *(char **)get_varp_scope(opt, OPT_LOCAL);\n+    origval_g = *(char **)get_varp_scope(opt, OPT_GLOBAL);\n \n     // A global-local string option might have an empty option as value to\n     // indicate that the global value should be used.\n-    if (((int)options[opt_idx].indir & PV_BOTH) && origval_l == empty_option) {\n+    if (((int)opt->indir & PV_BOTH) && origval_l == empty_option) {\n       origval_l = origval_g;\n     }\n   }\n \n   char *origval;\n   // When setting the local value of a global option, the old value may be\n   // the global value.\n-  if (((int)options[opt_idx].indir & PV_BOTH) && (opt_flags & OPT_LOCAL)) {\n-    origval = *(char **)get_varp(&options[opt_idx]);\n+  if (((int)opt->indir & PV_BOTH) && (opt_flags & OPT_LOCAL)) {\n+    origval = *(char **)get_varp(opt);\n   } else {\n     origval = oldval;\n   }\n \n   // Get the new value for the option\n-  char *newval = stropt_get_newval(nextchar, opt_idx, &arg, varp, origval, &op, flags);\n+  char *newval = stropt_get_newval(nextchar, opt_idx, argp, varp, origval, &op, flags);\n \n   // Set the new value.\n-  *(char **)(varp) = newval;\n-  if (newval == NULL) {\n-    *(char **)(varp) = empty_option;\n-  }\n+  *(char **)(varp) = newval != NULL ? newval : empty_option;\n \n   // origval may be freed by did_set_string_option(), make a copy.\n-  char *saved_origval = (origval != NULL) ? xstrdup(origval) : NULL;\n-  char *saved_origval_l = (origval_l != NULL) ? xstrdup(origval_l) : NULL;\n-  char *saved_origval_g = (origval_g != NULL) ? xstrdup(origval_g) : NULL;\n+  char *const saved_origval = (origval != NULL) ? xstrdup(origval) : NULL;\n+  char *const saved_origval_l = (origval_l != NULL) ? xstrdup(origval_l) : NULL;\n+  char *const saved_origval_g = (origval_g != NULL) ? xstrdup(origval_g) : NULL;\n \n   // newval (and varp) may become invalid if the buffer is closed by\n   // autocommands.\n-  char *saved_newval = (newval != NULL) ? xstrdup(newval) : NULL;\n+  char *const saved_newval = (newval != NULL) ? xstrdup(newval) : NULL;\n \n-  {\n-    uint32_t *p = insecure_flag(curwin, opt_idx, opt_flags);\n-    const int secure_saved = secure;\n+  uint32_t *p = insecure_flag(curwin, opt_idx, opt_flags);\n+  const int secure_saved = secure;\n \n-    // When an option is set in the sandbox, from a modeline or in secure\n-    // mode, then deal with side effects in secure mode.  Also when the\n-    // value was set with the P_INSECURE flag and is not completely\n-    // replaced.\n-    if ((opt_flags & OPT_MODELINE)\n-        || sandbox != 0\n-        || (op != OP_NONE && (*p & P_INSECURE))) {\n-      secure = 1;\n-    }\n+  // When an option is set in the sandbox, from a modeline or in secure\n+  // mode, then deal with side effects in secure mode.  Also when the\n+  // value was set with the P_INSECURE flag and is not completely\n+  // replaced.\n+  if ((opt_flags & OPT_MODELINE)\n+      || sandbox != 0\n+      || (op != OP_NONE && (*p & P_INSECURE))) {\n+    secure = 1;\n+  }\n \n-    // Handle side effects, and set the global value for \":set\" on local\n-    // options. Note: when setting 'syntax' or 'filetype' autocommands may\n-    // be triggered that can cause havoc.\n-    *errmsg = did_set_string_option(opt_idx, (char **)varp, oldval, newval,\n-                                    errbuf, errbuflen,\n-                                    opt_flags, value_checked);\n+  // Handle side effects, and set the global value for \":set\" on local\n+  // options. Note: when setting 'syntax' or 'filetype' autocommands may\n+  // be triggered that can cause havoc.\n+  *errmsg = did_set_string_option(curbuf, curwin, opt_idx, (char **)varp, oldval,\n+                                  errbuf, errbuflen,\n+                                  opt_flags, value_checked);\n \n-    secure = secure_saved;\n-  }",
            "html_url": "https://github.com/neovim/neovim/pull/24310#discussion_r1311806210",
            "id": 1311806210,
            "in_reply_to_id": 1311804734,
            "line": 1180,
            "node_id": "PRRC_kwDOAPphoM5OMJMC",
            "original_commit_id": "90fd0864c4794e711cb6c28c41ec05b4d0187954",
            "original_line": 1180,
            "original_position": 114,
            "original_start_line": 1158,
            "path": "src/nvim/option.c",
            "position": 114,
            "pull_request_review_id": 1605026486,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24310",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1311806210/reactions"
            },
            "side": "LEFT",
            "start_line": 1158,
            "start_side": "LEFT",
            "subject_type": "line",
            "updated_at": "2023-08-31T15:24:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1311806210",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24310#discussion_r1311810266"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24310"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1311810266"
                }
            },
            "author_association": "MEMBER",
            "body": "> I assumed it was to just isolate scope of 2 variables. I don't know what other reasons there could be.\r\n\r\nJust appeared really strange to me, which is why I asked. Generally I don't think it's a good idea to remove code without knowing why it was there but in this case it appears harmless",
            "commit_id": "90fd0864c4794e711cb6c28c41ec05b4d0187954",
            "created_at": "2023-08-31T15:26:06Z",
            "diff_hunk": "@@ -1110,91 +1111,85 @@ static void do_set_option_string(int opt_idx, int opt_flags, char **argp, int ne\n   // with a local value the local value will be\n   // reset, use the global value here.\n   if ((opt_flags & (OPT_LOCAL | OPT_GLOBAL)) == 0\n-      && ((int)options[opt_idx].indir & PV_BOTH)) {\n-    varp = options[opt_idx].var;\n+      && ((int)opt->indir & PV_BOTH)) {\n+    varp = opt->var;\n   }\n \n   // The old value is kept until we are sure that the new value is valid.\n   char *oldval = *(char **)varp;\n \n   if ((opt_flags & (OPT_LOCAL | OPT_GLOBAL)) == 0) {\n-    origval_l = *(char **)get_varp_scope(&(options[opt_idx]), OPT_LOCAL);\n-    origval_g = *(char **)get_varp_scope(&(options[opt_idx]), OPT_GLOBAL);\n+    origval_l = *(char **)get_varp_scope(opt, OPT_LOCAL);\n+    origval_g = *(char **)get_varp_scope(opt, OPT_GLOBAL);\n \n     // A global-local string option might have an empty option as value to\n     // indicate that the global value should be used.\n-    if (((int)options[opt_idx].indir & PV_BOTH) && origval_l == empty_option) {\n+    if (((int)opt->indir & PV_BOTH) && origval_l == empty_option) {\n       origval_l = origval_g;\n     }\n   }\n \n   char *origval;\n   // When setting the local value of a global option, the old value may be\n   // the global value.\n-  if (((int)options[opt_idx].indir & PV_BOTH) && (opt_flags & OPT_LOCAL)) {\n-    origval = *(char **)get_varp(&options[opt_idx]);\n+  if (((int)opt->indir & PV_BOTH) && (opt_flags & OPT_LOCAL)) {\n+    origval = *(char **)get_varp(opt);\n   } else {\n     origval = oldval;\n   }\n \n   // Get the new value for the option\n-  char *newval = stropt_get_newval(nextchar, opt_idx, &arg, varp, origval, &op, flags);\n+  char *newval = stropt_get_newval(nextchar, opt_idx, argp, varp, origval, &op, flags);\n \n   // Set the new value.\n-  *(char **)(varp) = newval;\n-  if (newval == NULL) {\n-    *(char **)(varp) = empty_option;\n-  }\n+  *(char **)(varp) = newval != NULL ? newval : empty_option;\n \n   // origval may be freed by did_set_string_option(), make a copy.\n-  char *saved_origval = (origval != NULL) ? xstrdup(origval) : NULL;\n-  char *saved_origval_l = (origval_l != NULL) ? xstrdup(origval_l) : NULL;\n-  char *saved_origval_g = (origval_g != NULL) ? xstrdup(origval_g) : NULL;\n+  char *const saved_origval = (origval != NULL) ? xstrdup(origval) : NULL;\n+  char *const saved_origval_l = (origval_l != NULL) ? xstrdup(origval_l) : NULL;\n+  char *const saved_origval_g = (origval_g != NULL) ? xstrdup(origval_g) : NULL;\n \n   // newval (and varp) may become invalid if the buffer is closed by\n   // autocommands.\n-  char *saved_newval = (newval != NULL) ? xstrdup(newval) : NULL;\n+  char *const saved_newval = (newval != NULL) ? xstrdup(newval) : NULL;\n \n-  {\n-    uint32_t *p = insecure_flag(curwin, opt_idx, opt_flags);\n-    const int secure_saved = secure;\n+  uint32_t *p = insecure_flag(curwin, opt_idx, opt_flags);\n+  const int secure_saved = secure;\n \n-    // When an option is set in the sandbox, from a modeline or in secure\n-    // mode, then deal with side effects in secure mode.  Also when the\n-    // value was set with the P_INSECURE flag and is not completely\n-    // replaced.\n-    if ((opt_flags & OPT_MODELINE)\n-        || sandbox != 0\n-        || (op != OP_NONE && (*p & P_INSECURE))) {\n-      secure = 1;\n-    }\n+  // When an option is set in the sandbox, from a modeline or in secure\n+  // mode, then deal with side effects in secure mode.  Also when the\n+  // value was set with the P_INSECURE flag and is not completely\n+  // replaced.\n+  if ((opt_flags & OPT_MODELINE)\n+      || sandbox != 0\n+      || (op != OP_NONE && (*p & P_INSECURE))) {\n+    secure = 1;\n+  }\n \n-    // Handle side effects, and set the global value for \":set\" on local\n-    // options. Note: when setting 'syntax' or 'filetype' autocommands may\n-    // be triggered that can cause havoc.\n-    *errmsg = did_set_string_option(opt_idx, (char **)varp, oldval, newval,\n-                                    errbuf, errbuflen,\n-                                    opt_flags, value_checked);\n+  // Handle side effects, and set the global value for \":set\" on local\n+  // options. Note: when setting 'syntax' or 'filetype' autocommands may\n+  // be triggered that can cause havoc.\n+  *errmsg = did_set_string_option(curbuf, curwin, opt_idx, (char **)varp, oldval,\n+                                  errbuf, errbuflen,\n+                                  opt_flags, value_checked);\n \n-    secure = secure_saved;\n-  }",
            "html_url": "https://github.com/neovim/neovim/pull/24310#discussion_r1311810266",
            "id": 1311810266,
            "in_reply_to_id": 1311804734,
            "line": 1180,
            "node_id": "PRRC_kwDOAPphoM5OMKLa",
            "original_commit_id": "90fd0864c4794e711cb6c28c41ec05b4d0187954",
            "original_line": 1180,
            "original_position": 114,
            "original_start_line": 1158,
            "path": "src/nvim/option.c",
            "position": 114,
            "pull_request_review_id": 1605032821,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24310",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1311810266/reactions"
            },
            "side": "LEFT",
            "start_line": 1158,
            "start_side": "LEFT",
            "subject_type": "line",
            "updated_at": "2023-08-31T15:26:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1311810266",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "ASAN (build) failure is consistent, but opaque. Maybe just rebase and retrigger?",
            "created_at": "2023-07-27T12:41:02Z",
            "html_url": "https://github.com/neovim/neovim/pull/24310#issuecomment-1653543869",
            "id": 1653543869,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24310",
            "node_id": "IC_kwDOAPphoM5ijxO9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1653543869/reactions"
            },
            "updated_at": "2023-07-27T12:41:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1653543869",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I'm pretty confident it'll be caused by this PR. Would need to bisect.",
            "created_at": "2023-07-27T12:57:05Z",
            "html_url": "https://github.com/neovim/neovim/pull/24310#issuecomment-1653570250",
            "id": 1653570250,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24310",
            "node_id": "IC_kwDOAPphoM5ij3rK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1653570250/reactions"
            },
            "updated_at": "2023-07-27T12:57:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1653570250",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "```\r\n=================================================================\r\n==214072==ERROR: LeakSanitizer: detected memory leaks\r\n\r\nDirect leak of 1 byte(s) in 1 object(s) allocated from:\r\n    #0 0x556eb82c6919 in __interceptor_malloc (**/build/bin/nvim+0xc5e919) (BuildId: 87802768b6d0339f27a2cfa3f07fa629b901150a)\r\n    #1 0x556eb90a4306 in try_malloc **/src/nvim/memory.c:88:15\r\n    #2 0x556eb90a44dc in xmalloc **/src/nvim/memory.c:122:15\r\n    #3 0x556eb934c94a in stropt_copy_value **/src/nvim/option.c:872:18\r\n    #4 0x556eb934c065 in stropt_get_newval **/src/nvim/option.c:1032:14\r\n    #5 0x556eb93441d6 in do_set_option_string **/src/nvim/option.c:1114:18\r\n    #6 0x556eb9341f10 in do_set_option_value **/src/nvim/option.c:1265:5\r\n    #7 0x556eb92eae87 in do_set_option **/src/nvim/option.c:1413:3\r\n    #8 0x556eb92e4e01 in do_set **/src/nvim/option.c:1463:9\r\n    #9 0x556eb92e4280 in ex_set **/src/nvim/option.c:740:9\r\n    #10 0x556eb8beccde in execute_cmd0 **/src/nvim/ex_docmd.c:1634:7\r\n    #11 0x556eb8bc9cd8 in do_one_cmd **/src/nvim/ex_docmd.c:2293:7\r\n    #12 0x556eb8bba56d in do_cmdline **/src/nvim/ex_docmd.c:592:20\r\n    #13 0x556eb8bbf6c0 in do_cmdline_cmd **/src/nvim/ex_docmd.c:291:10\r\n    #14 0x556eb90a7db9 in free_all_mem **/src/nvim/memory.c:726:3\r\n    #15 0x556eb83266be in os_exit **/src/nvim/main.c:678:3\r\n    #16 0x556eb8324c58 in getout **/src/nvim/main.c:802:3\r\n    #17 0x556eb8c21ac0 in ex_quit **/src/nvim/ex_docmd.c:4580:7\r\n    #18 0x556eb8beccde in execute_cmd0 **/src/nvim/ex_docmd.c:1634:7\r\n    #19 0x556eb8bc9cd8 in do_one_cmd **/src/nvim/ex_docmd.c:2293:7\r\n    #20 0x556eb8bba56d in do_cmdline **/src/nvim/ex_docmd.c:592:20\r\n    #21 0x556eb8bbf6c0 in do_cmdline_cmd **/src/nvim/ex_docmd.c:291:10\r\n    #22 0x556eb832a3f2 in exe_commands **/src/nvim/main.c:1907:5\r\n    #23 0x556eb831094c in main **/src/nvim/main.c:579:5\r\n    #24 0x7fd2a5ac284f  (/usr/lib/libc.so.6+0x2384f) (BuildId: 2f005a79cd1a8e385972f5a102f16adba414d75e)\r\n\r\nSUMMARY: AddressSanitizer: 1 byte(s) leaked in 1 allocation(s).\r\n```\r\nApparently it's caused by the last commit, because previous commits don't fail build.",
            "created_at": "2023-07-27T22:16:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/24310#issuecomment-1654655736",
            "id": 1654655736,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24310",
            "node_id": "IC_kwDOAPphoM5ioAr4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1654655736/reactions"
            },
            "updated_at": "2023-07-27T22:16:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1654655736",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/24310/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/24310/commits",
    "created_at": "2023-07-11T09:26:29Z",
    "diff_url": "https://github.com/neovim/neovim/pull/24310.diff",
    "draft": false,
    "head": {
        "label": "lewis6991:refactor/optionvalidate",
        "ref": "refactor/optionvalidate",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/lewis6991/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/lewis6991/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/lewis6991/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/lewis6991/neovim/branches{/branch}",
            "clone_url": "https://github.com/lewis6991/neovim.git",
            "collaborators_url": "https://api.github.com/repos/lewis6991/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/lewis6991/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/lewis6991/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/lewis6991/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/lewis6991/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/lewis6991/neovim/contributors",
            "created_at": "2020-11-24T21:47:43Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/lewis6991/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/lewis6991/neovim/downloads",
            "events_url": "https://api.github.com/repos/lewis6991/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/lewis6991/neovim/forks",
            "full_name": "lewis6991/neovim",
            "git_commits_url": "https://api.github.com/repos/lewis6991/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/lewis6991/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/lewis6991/neovim/git/tags{/sha}",
            "git_url": "git://github.com/lewis6991/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/lewis6991/neovim/hooks",
            "html_url": "https://github.com/lewis6991/neovim",
            "id": 315760150,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/lewis6991/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/lewis6991/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/lewis6991/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/lewis6991/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/lewis6991/neovim/labels{/name}",
            "language": "Vim script",
            "languages_url": "https://api.github.com/repos/lewis6991/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/lewis6991/neovim/merges",
            "milestones_url": "https://api.github.com/repos/lewis6991/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkzMTU3NjAxNTA=",
            "notifications_url": "https://api.github.com/repos/lewis6991/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/lewis6991/neovim/pulls{/number}",
            "pushed_at": "2023-09-02T09:37:26Z",
            "releases_url": "https://api.github.com/repos/lewis6991/neovim/releases{/id}",
            "size": 236764,
            "ssh_url": "git@github.com:lewis6991/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/lewis6991/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/lewis6991/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/lewis6991/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/lewis6991/neovim/subscription",
            "svn_url": "https://github.com/lewis6991/neovim",
            "tags_url": "https://api.github.com/repos/lewis6991/neovim/tags",
            "teams_url": "https://api.github.com/repos/lewis6991/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/lewis6991/neovim/git/trees{/sha}",
            "updated_at": "2023-01-31T18:36:52Z",
            "url": "https://api.github.com/repos/lewis6991/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "90fd0864c4794e711cb6c28c41ec05b4d0187954",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
            "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
            "followers_url": "https://api.github.com/users/lewis6991/followers",
            "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
            "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/lewis6991",
            "id": 7904185,
            "login": "lewis6991",
            "node_id": "MDQ6VXNlcjc5MDQxODU=",
            "organizations_url": "https://api.github.com/users/lewis6991/orgs",
            "received_events_url": "https://api.github.com/users/lewis6991/received_events",
            "repos_url": "https://api.github.com/users/lewis6991/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/lewis6991"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/24310",
    "id": 1429077103,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24310",
    "labels": [
        {
            "color": "C5DEF5",
            "default": false,
            "description": "changes that are not features or bugfixes",
            "id": 106949155,
            "name": "refactor",
            "node_id": "MDU6TGFiZWwxMDY5NDkxNTU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/refactor"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "",
            "id": 4242493821,
            "name": "options",
            "node_id": "LA_kwDOAPphoM7831F9",
            "url": "https://api.github.com/repos/neovim/neovim/labels/options"
        }
    ],
    "locked": false,
    "merge_commit_sha": "bb1df1221d567e3f682a177d55772f49801f5e80",
    "merged_at": "2023-09-02T09:37:16Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5VLfxv",
    "number": 24310,
    "patch_url": "https://github.com/neovim/neovim/pull/24310.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/24310/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/90fd0864c4794e711cb6c28c41ec05b4d0187954",
    "title": "refactor(option.c): misc",
    "updated_at": "2023-09-02T09:37:27Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/24310",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
        "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
        "followers_url": "https://api.github.com/users/lewis6991/followers",
        "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
        "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/lewis6991",
        "id": 7904185,
        "login": "lewis6991",
        "node_id": "MDQ6VXNlcjc5MDQxODU=",
        "organizations_url": "https://api.github.com/users/lewis6991/orgs",
        "received_events_url": "https://api.github.com/users/lewis6991/received_events",
        "repos_url": "https://api.github.com/users/lewis6991/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/lewis6991"
    }
}