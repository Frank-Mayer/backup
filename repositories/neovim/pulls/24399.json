{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/24399/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/24399/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/24399"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/24399"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/24399/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/24399"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/1778b0e479a727c2ed49611728a70b3d2f02cff4"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "FIRST_TIME_CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 4789,
            "forks_count": 4789,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1649,
            "open_issues_count": 1649,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2023-08-04T01:35:30Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 248467,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 67988,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2023-08-04T01:04:48Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 67988,
            "watchers_count": 67988,
            "web_commit_signoff_required": false
        },
        "sha": "2f22ed6a00db10c4852a8fa232b8782f8b6a6646",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "The existing implementation only checks the last frame of the call stack, but the MessagePack-RPC specification does not guarantee the order of messages, so in rare cases message reversals occur and the following error occurs.\r\n\r\n    ch 1 returned a response with an unknown request id. Ensure the\r\n    client is properly synchronized\r\n\r\nTo prevent this, the implementation has been modified to search the entire call stack for the frame corresponding to the message. In order to follow the existing implementation, the call stack is referenced in reverse order.\r\n\r\n## Reproduce\r\n\r\nIt's a bit difficult to reproduce the issue with raw Neovim RPC so we use [denops.vim](https://github.com/vim-denops/denops.vim).\r\n\r\nFirst, clone the following into `/path/to/vim-denops` direcotry\r\n\r\n- https://github.com/vim-denops/denops.vim\r\n- https://github.com/vim-denops/denops-issue268\r\n\r\nThen write vimrc as\r\n\r\n```vim\r\nset rtp+=/path/to/vim-denops/denops.vim\r\nset rtp+=/path/to/vim-denops/denops-issue268\r\n```\r\n\r\nThen start Neovim with `nvim --clean -u vimrc` and call `DenopsIssue268` command.\r\n\r\n##### Before\r\n\r\nhttps://github.com/neovim/neovim/assets/546312/43c33547-2848-4427-8bed-e73cd82cbf7b\r\n\r\n##### After\r\n\r\nhttps://github.com/neovim/neovim/assets/546312/cb499565-5baa-42d0-8a19-62fda2df4b65\r\n\r\n## Related\r\n\r\n- https://github.com/vim-denops/denops.vim/issues/268\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24399#discussion_r1274444847"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1274444847"
                }
            },
            "author_association": "NONE",
            "body": "I think we should just ignore this case while it is likely caused by duplicated messages. What do you think?",
            "commit_id": "1778b0e479a727c2ed49611728a70b3d2f02cff4",
            "created_at": "2023-07-26T06:41:58Z",
            "diff_hunk": "@@ -321,26 +321,31 @@ static void parse_msgpack(Channel *channel)\n       }\n       arena_mem_free(arena_finish(&p->arena));\n     } else if (p->type == kMessageTypeResponse) {\n-      ChannelCallFrame *frame = kv_last(channel->rpc.call_stack);\n-      if (p->request_id != frame->request_id) {\n-        char buf[256];\n-        snprintf(buf, sizeof(buf),\n-                 \"ch %\" PRIu64 \" returned a response with an unknown request \"\n-                 \"id. Ensure the client is properly synchronized\",\n-                 channel->id);\n-        chan_close_with_error(channel, buf, LOGLVL_ERR);\n-      }\n-      frame->returned = true;\n-      frame->errored = (p->error.type != kObjectTypeNil);\n-\n-      if (frame->errored) {\n-        frame->result = p->error;\n-        // TODO(bfredl): p->result should not even be decoded\n-        // api_free_object(p->result);\n-      } else {\n-        frame->result = p->result;\n+      // Find the corresponding frame of the response\n+      for (size_t i = 0; i < kv_size(channel->rpc.call_stack); i++) {\n+        ChannelCallFrame *frame = kv_Z(channel->rpc.call_stack, i);\n+        if (p->request_id != frame->request_id) {\n+          continue;\n+        }\n+        frame->returned = true;\n+        frame->errored = (p->error.type != kObjectTypeNil);\n+        if (frame->errored) {\n+          frame->result = p->error;\n+          // TODO(bfredl): p->result should not even be decoded\n+          // api_free_object(p->result);\n+        } else {\n+          frame->result = p->result;\n+        }\n+        frame->result_mem = arena_finish(&p->arena);\n+        goto end;\n       }\n-      frame->result_mem = arena_finish(&p->arena);\n+      // No corresponding frame found for the response\n+      char buf[256];\n+      snprintf(buf, sizeof(buf),\n+                \"ch %\" PRIu64 \" returned a response with an unknown request \"\n+                \"id %\" PRIu32 \". Ensure the client is properly synchronized\",\n+                channel->id, p->request_id);\n+      chan_close_with_error(channel, buf, LOGLVL_ERR);",
            "html_url": "https://github.com/neovim/neovim/pull/24399#discussion_r1274444847",
            "id": 1274444847,
            "line": 348,
            "node_id": "PRRC_kwDOAPphoM5L9nwv",
            "original_commit_id": "1778b0e479a727c2ed49611728a70b3d2f02cff4",
            "original_line": 348,
            "original_position": 47,
            "original_start_line": 342,
            "path": "src/nvim/msgpack_rpc/channel.c",
            "position": 47,
            "pull_request_review_id": 1546935270,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24399",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1274444847/reactions"
            },
            "side": "RIGHT",
            "start_line": 342,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-07-26T06:42:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1274444847",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/546312?v=4",
                "events_url": "https://api.github.com/users/lambdalisue/events{/privacy}",
                "followers_url": "https://api.github.com/users/lambdalisue/followers",
                "following_url": "https://api.github.com/users/lambdalisue/following{/other_user}",
                "gists_url": "https://api.github.com/users/lambdalisue/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lambdalisue",
                "id": 546312,
                "login": "lambdalisue",
                "node_id": "MDQ6VXNlcjU0NjMxMg==",
                "organizations_url": "https://api.github.com/users/lambdalisue/orgs",
                "received_events_url": "https://api.github.com/users/lambdalisue/received_events",
                "repos_url": "https://api.github.com/users/lambdalisue/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lambdalisue/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lambdalisue/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lambdalisue"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24399#discussion_r1274892253"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1274892253"
                }
            },
            "author_association": "MEMBER",
            "body": "Why are messages being duplicated? Should we not at least _log_ such a case (perhaps at WARN level)? Silently ignoring problems leads to very difficult bugs.",
            "commit_id": "1778b0e479a727c2ed49611728a70b3d2f02cff4",
            "created_at": "2023-07-26T12:35:47Z",
            "diff_hunk": "@@ -321,26 +321,31 @@ static void parse_msgpack(Channel *channel)\n       }\n       arena_mem_free(arena_finish(&p->arena));\n     } else if (p->type == kMessageTypeResponse) {\n-      ChannelCallFrame *frame = kv_last(channel->rpc.call_stack);\n-      if (p->request_id != frame->request_id) {\n-        char buf[256];\n-        snprintf(buf, sizeof(buf),\n-                 \"ch %\" PRIu64 \" returned a response with an unknown request \"\n-                 \"id. Ensure the client is properly synchronized\",\n-                 channel->id);\n-        chan_close_with_error(channel, buf, LOGLVL_ERR);\n-      }\n-      frame->returned = true;\n-      frame->errored = (p->error.type != kObjectTypeNil);\n-\n-      if (frame->errored) {\n-        frame->result = p->error;\n-        // TODO(bfredl): p->result should not even be decoded\n-        // api_free_object(p->result);\n-      } else {\n-        frame->result = p->result;\n+      // Find the corresponding frame of the response\n+      for (size_t i = 0; i < kv_size(channel->rpc.call_stack); i++) {\n+        ChannelCallFrame *frame = kv_Z(channel->rpc.call_stack, i);\n+        if (p->request_id != frame->request_id) {\n+          continue;\n+        }\n+        frame->returned = true;\n+        frame->errored = (p->error.type != kObjectTypeNil);\n+        if (frame->errored) {\n+          frame->result = p->error;\n+          // TODO(bfredl): p->result should not even be decoded\n+          // api_free_object(p->result);\n+        } else {\n+          frame->result = p->result;\n+        }\n+        frame->result_mem = arena_finish(&p->arena);\n+        goto end;\n       }\n-      frame->result_mem = arena_finish(&p->arena);\n+      // No corresponding frame found for the response\n+      char buf[256];\n+      snprintf(buf, sizeof(buf),\n+                \"ch %\" PRIu64 \" returned a response with an unknown request \"\n+                \"id %\" PRIu32 \". Ensure the client is properly synchronized\",\n+                channel->id, p->request_id);\n+      chan_close_with_error(channel, buf, LOGLVL_ERR);",
            "html_url": "https://github.com/neovim/neovim/pull/24399#discussion_r1274892253",
            "id": 1274892253,
            "in_reply_to_id": 1274444847,
            "line": 348,
            "node_id": "PRRC_kwDOAPphoM5L_U_d",
            "original_commit_id": "1778b0e479a727c2ed49611728a70b3d2f02cff4",
            "original_line": 348,
            "original_position": 47,
            "original_start_line": 342,
            "path": "src/nvim/msgpack_rpc/channel.c",
            "position": 47,
            "pull_request_review_id": 1547627908,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24399",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1274892253/reactions"
            },
            "side": "RIGHT",
            "start_line": 342,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-07-26T12:47:30Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1274892253",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24399#discussion_r1274915341"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24399"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1274915341"
                }
            },
            "author_association": "NONE",
            "body": "> Why are messages being duplicated? Should we not at least log such a case (perhaps at WARN level)? Silently ignoring problems leads to very difficult bugs.\r\n\r\nTotally agree. Yes, I said \"just ignore\" but I didn't mean just ignore, of course 🙇 ",
            "commit_id": "1778b0e479a727c2ed49611728a70b3d2f02cff4",
            "created_at": "2023-07-26T12:53:59Z",
            "diff_hunk": "@@ -321,26 +321,31 @@ static void parse_msgpack(Channel *channel)\n       }\n       arena_mem_free(arena_finish(&p->arena));\n     } else if (p->type == kMessageTypeResponse) {\n-      ChannelCallFrame *frame = kv_last(channel->rpc.call_stack);\n-      if (p->request_id != frame->request_id) {\n-        char buf[256];\n-        snprintf(buf, sizeof(buf),\n-                 \"ch %\" PRIu64 \" returned a response with an unknown request \"\n-                 \"id. Ensure the client is properly synchronized\",\n-                 channel->id);\n-        chan_close_with_error(channel, buf, LOGLVL_ERR);\n-      }\n-      frame->returned = true;\n-      frame->errored = (p->error.type != kObjectTypeNil);\n-\n-      if (frame->errored) {\n-        frame->result = p->error;\n-        // TODO(bfredl): p->result should not even be decoded\n-        // api_free_object(p->result);\n-      } else {\n-        frame->result = p->result;\n+      // Find the corresponding frame of the response\n+      for (size_t i = 0; i < kv_size(channel->rpc.call_stack); i++) {\n+        ChannelCallFrame *frame = kv_Z(channel->rpc.call_stack, i);\n+        if (p->request_id != frame->request_id) {\n+          continue;\n+        }\n+        frame->returned = true;\n+        frame->errored = (p->error.type != kObjectTypeNil);\n+        if (frame->errored) {\n+          frame->result = p->error;\n+          // TODO(bfredl): p->result should not even be decoded\n+          // api_free_object(p->result);\n+        } else {\n+          frame->result = p->result;\n+        }\n+        frame->result_mem = arena_finish(&p->arena);\n+        goto end;\n       }\n-      frame->result_mem = arena_finish(&p->arena);\n+      // No corresponding frame found for the response\n+      char buf[256];\n+      snprintf(buf, sizeof(buf),\n+                \"ch %\" PRIu64 \" returned a response with an unknown request \"\n+                \"id %\" PRIu32 \". Ensure the client is properly synchronized\",\n+                channel->id, p->request_id);\n+      chan_close_with_error(channel, buf, LOGLVL_ERR);",
            "html_url": "https://github.com/neovim/neovim/pull/24399#discussion_r1274915341",
            "id": 1274915341,
            "in_reply_to_id": 1274444847,
            "line": 348,
            "node_id": "PRRC_kwDOAPphoM5L_aoN",
            "original_commit_id": "1778b0e479a727c2ed49611728a70b3d2f02cff4",
            "original_line": 348,
            "original_position": 47,
            "original_start_line": 342,
            "path": "src/nvim/msgpack_rpc/channel.c",
            "position": 47,
            "pull_request_review_id": 1547665177,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24399",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1274915341/reactions"
            },
            "side": "RIGHT",
            "start_line": 342,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-07-26T12:54:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1274915341",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/546312?v=4",
                "events_url": "https://api.github.com/users/lambdalisue/events{/privacy}",
                "followers_url": "https://api.github.com/users/lambdalisue/followers",
                "following_url": "https://api.github.com/users/lambdalisue/following{/other_user}",
                "gists_url": "https://api.github.com/users/lambdalisue/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lambdalisue",
                "id": 546312,
                "login": "lambdalisue",
                "node_id": "MDQ6VXNlcjU0NjMxMg==",
                "organizations_url": "https://api.github.com/users/lambdalisue/orgs",
                "received_events_url": "https://api.github.com/users/lambdalisue/received_events",
                "repos_url": "https://api.github.com/users/lambdalisue/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lambdalisue/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lambdalisue/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lambdalisue"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Would be nice to remove that constraint if we can,\r\n\r\nDoes that make sense though? The constraint does not make sense for sequential requests (they must be answered in the same sequence anyways, since neovim blocks on a request, and I don't see this being negotiable), and requests can't \"truly\" overlap (for the same reason), but only nest. And nested requests need to be answered in reverse order to make any sense. But maybe I'm misunderstanding something :)",
            "created_at": "2023-07-20T13:59:08Z",
            "html_url": "https://github.com/neovim/neovim/pull/24399#issuecomment-1643980620",
            "id": 1643980620,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24399",
            "node_id": "IC_kwDOAPphoM5h_SdM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1643980620/reactions"
            },
            "updated_at": "2023-07-20T14:00:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1643980620",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4117685?v=4",
                "events_url": "https://api.github.com/users/KillTheMule/events{/privacy}",
                "followers_url": "https://api.github.com/users/KillTheMule/followers",
                "following_url": "https://api.github.com/users/KillTheMule/following{/other_user}",
                "gists_url": "https://api.github.com/users/KillTheMule/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/KillTheMule",
                "id": 4117685,
                "login": "KillTheMule",
                "node_id": "MDQ6VXNlcjQxMTc2ODU=",
                "organizations_url": "https://api.github.com/users/KillTheMule/orgs",
                "received_events_url": "https://api.github.com/users/KillTheMule/received_events",
                "repos_url": "https://api.github.com/users/KillTheMule/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/KillTheMule/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/KillTheMule/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/KillTheMule"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yes. But does my proposal make sense:\r\n\r\n> Nvim could \"collect\" out-of-order responses and wait for the \"missing\" response, and only then continue.\r\n",
            "created_at": "2023-07-20T14:29:15Z",
            "html_url": "https://github.com/neovim/neovim/pull/24399#issuecomment-1644031086",
            "id": 1644031086,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24399",
            "node_id": "IC_kwDOAPphoM5h_exu",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1644031086/reactions"
            },
            "updated_at": "2023-07-20T14:29:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1644031086",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Yes. But does my proposal make sense:\r\n> \r\n> > Nvim could \"collect\" out-of-order responses and wait for the \"missing\" response, and only then continue.\r\n\r\nA bit, but I have a hard time imagining a properly working plugin that does something like this. I wasn't really able to understand the denops.nvim issue though.",
            "created_at": "2023-07-20T15:19:47Z",
            "html_url": "https://github.com/neovim/neovim/pull/24399#issuecomment-1644122694",
            "id": 1644122694,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24399",
            "node_id": "IC_kwDOAPphoM5h_1JG",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1644122694/reactions"
            },
            "updated_at": "2023-07-20T15:19:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1644122694",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/4117685?v=4",
                "events_url": "https://api.github.com/users/KillTheMule/events{/privacy}",
                "followers_url": "https://api.github.com/users/KillTheMule/followers",
                "following_url": "https://api.github.com/users/KillTheMule/following{/other_user}",
                "gists_url": "https://api.github.com/users/KillTheMule/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/KillTheMule",
                "id": 4117685,
                "login": "KillTheMule",
                "node_id": "MDQ6VXNlcjQxMTc2ODU=",
                "organizations_url": "https://api.github.com/users/KillTheMule/orgs",
                "received_events_url": "https://api.github.com/users/KillTheMule/received_events",
                "repos_url": "https://api.github.com/users/KillTheMule/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/KillTheMule/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/KillTheMule/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/KillTheMule"
            }
        },
        {
            "author_association": "NONE",
            "body": "> But could this break plugins? Nvim's current constraint presumably makes plugins much simpler because they don't have to deal with out-of-order responses.\r\n\r\nI think we will not break it. Because the plugin that changes behavior with this change should now be unusable with the error \"ch * returned a response with an unknown requestid\".\r\n\r\nAlso, you say that the current restrictions are simplifying the plugins, but I feel that they are making it even more difficult, since the plugins rather need to return responses to Neovim in order (since normal msgpack RPC would just return them in the order in which they were processed).\r\n\r\n> Does that make sense though? The constraint does not make sense for sequential requests (they must be answered in the same sequence anyways, since neovim blocks on a request, and I don't see this being negotiable), and requests can't \"truly\" overlap (for the same reason), but only nest. And nested requests need to be answered in reverse order to make any sense. But maybe I'm misunderstanding something :)\r\n\r\nI think it is true that if a Peer calls multiple Neovim processes, they are returned in order. I think it is a little different because the problem in this case is that when Neovim reads multiple processes of Peer, the responses are not returned in the order in which they were read.\r\n\r\nIf Neovim is using msgpack RPC, it should be able to handle the responses even if they are not in order.",
            "created_at": "2023-07-23T16:21:55Z",
            "html_url": "https://github.com/neovim/neovim/pull/24399#issuecomment-1646881267",
            "id": 1646881267,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24399",
            "node_id": "IC_kwDOAPphoM5iKWnz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 4,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 4,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1646881267/reactions"
            },
            "updated_at": "2023-07-23T16:21:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1646881267",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/546312?v=4",
                "events_url": "https://api.github.com/users/lambdalisue/events{/privacy}",
                "followers_url": "https://api.github.com/users/lambdalisue/followers",
                "following_url": "https://api.github.com/users/lambdalisue/following{/other_user}",
                "gists_url": "https://api.github.com/users/lambdalisue/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lambdalisue",
                "id": 546312,
                "login": "lambdalisue",
                "node_id": "MDQ6VXNlcjU0NjMxMg==",
                "organizations_url": "https://api.github.com/users/lambdalisue/orgs",
                "received_events_url": "https://api.github.com/users/lambdalisue/received_events",
                "repos_url": "https://api.github.com/users/lambdalisue/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lambdalisue/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lambdalisue/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lambdalisue"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Current neovim RPC clients(go, python) seems  msgpack RPC incompatible.\r\n\r\nBecause they must support in order the RPC.  It is hard.",
            "created_at": "2023-07-23T23:53:17Z",
            "html_url": "https://github.com/neovim/neovim/pull/24399#issuecomment-1646994275",
            "id": 1646994275,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24399",
            "node_id": "IC_kwDOAPphoM5iKyNj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1646994275/reactions"
            },
            "updated_at": "2023-07-24T04:54:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1646994275",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/41495?v=4",
                "events_url": "https://api.github.com/users/Shougo/events{/privacy}",
                "followers_url": "https://api.github.com/users/Shougo/followers",
                "following_url": "https://api.github.com/users/Shougo/following{/other_user}",
                "gists_url": "https://api.github.com/users/Shougo/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/Shougo",
                "id": 41495,
                "login": "Shougo",
                "node_id": "MDQ6VXNlcjQxNDk1",
                "organizations_url": "https://api.github.com/users/Shougo/orgs",
                "received_events_url": "https://api.github.com/users/Shougo/received_events",
                "repos_url": "https://api.github.com/users/Shougo/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/Shougo/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Shougo/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/Shougo"
            }
        },
        {
            "author_association": "NONE",
            "body": "I'll be trying this patch for a while, as it seems to improve the behavior of the plugins I use 👀 ",
            "created_at": "2023-07-24T06:06:42Z",
            "html_url": "https://github.com/neovim/neovim/pull/24399#issuecomment-1647270796",
            "id": 1647270796,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24399",
            "node_id": "IC_kwDOAPphoM5iL1uM",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1647270796/reactions"
            },
            "updated_at": "2023-07-24T06:06:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1647270796",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33555487?v=4",
                "events_url": "https://api.github.com/users/peacock0803sz/events{/privacy}",
                "followers_url": "https://api.github.com/users/peacock0803sz/followers",
                "following_url": "https://api.github.com/users/peacock0803sz/following{/other_user}",
                "gists_url": "https://api.github.com/users/peacock0803sz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/peacock0803sz",
                "id": 33555487,
                "login": "peacock0803sz",
                "node_id": "MDQ6VXNlcjMzNTU1NDg3",
                "organizations_url": "https://api.github.com/users/peacock0803sz/orgs",
                "received_events_url": "https://api.github.com/users/peacock0803sz/received_events",
                "repos_url": "https://api.github.com/users/peacock0803sz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/peacock0803sz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/peacock0803sz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/peacock0803sz"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "\r\n\r\nDid not see an answer to my suggestion (for this PR), does it make sense or not?:\r\n\r\n> Nvim could \"collect\" out-of-order responses and wait for the \"missing\" response, and only then continue.\r\n",
            "created_at": "2023-07-24T13:45:24Z",
            "html_url": "https://github.com/neovim/neovim/pull/24399#issuecomment-1647946715",
            "id": 1647946715,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24399",
            "node_id": "IC_kwDOAPphoM5iOavb",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1647946715/reactions"
            },
            "updated_at": "2023-07-24T13:45:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1647946715",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Did not see an answer to my suggestion (for this PR), does it make sense or not?:\r\n\r\nI'm a little unsure if I'm understanding the suggestions correctly, so could you be more specific?",
            "created_at": "2023-07-25T04:14:03Z",
            "html_url": "https://github.com/neovim/neovim/pull/24399#issuecomment-1649083813",
            "id": 1649083813,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24399",
            "node_id": "IC_kwDOAPphoM5iSwWl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1649083813/reactions"
            },
            "updated_at": "2023-07-25T04:14:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1649083813",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/546312?v=4",
                "events_url": "https://api.github.com/users/lambdalisue/events{/privacy}",
                "followers_url": "https://api.github.com/users/lambdalisue/followers",
                "following_url": "https://api.github.com/users/lambdalisue/following{/other_user}",
                "gists_url": "https://api.github.com/users/lambdalisue/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lambdalisue",
                "id": 546312,
                "login": "lambdalisue",
                "node_id": "MDQ6VXNlcjU0NjMxMg==",
                "organizations_url": "https://api.github.com/users/lambdalisue/orgs",
                "received_events_url": "https://api.github.com/users/lambdalisue/received_events",
                "repos_url": "https://api.github.com/users/lambdalisue/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lambdalisue/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lambdalisue/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lambdalisue"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Currently this PR just looks for a matching frame and processes it. \r\n\r\nMy suggestion, instead, is to wait for the \"correctly ordered\" response. If any out-of-order responses are received, store them for later; don't process them out-of-order. \r\n\r\nHowever, maybe we should try the \"simple\" way (this PR) first.",
            "created_at": "2023-07-25T12:58:31Z",
            "html_url": "https://github.com/neovim/neovim/pull/24399#issuecomment-1649795967",
            "id": 1649795967,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24399",
            "node_id": "IC_kwDOAPphoM5iVeN_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1649795967/reactions"
            },
            "updated_at": "2023-07-25T12:58:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1649795967",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "NONE",
            "body": "Got it thanks :+1: But I don't understand the motivation of the suggesion...\r\n\r\n> My suggestion, instead, is to wait for the \"correctly ordered\" response. If any out-of-order responses are received, store them for later; don't process them out-of-order.\r\n\r\nThis PR is a change that Neovim supports out-of-order responses, not a change that Neovim returns out-of-order responses. Therefore, I personally don't understand the motivation to reorder out-of-order responses and treat them as in-order responses.\r\n\r\n> However, maybe we should try the \"simple\" way (this PR) first.\r\n\r\nYes, I personally think it would be cost-effective to put it in HEAD once and see if regressions, etc. occur.",
            "created_at": "2023-07-26T02:38:20Z",
            "html_url": "https://github.com/neovim/neovim/pull/24399#issuecomment-1650885363",
            "id": 1650885363,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24399",
            "node_id": "IC_kwDOAPphoM5iZoLz",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1650885363/reactions"
            },
            "updated_at": "2023-07-26T02:38:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1650885363",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/546312?v=4",
                "events_url": "https://api.github.com/users/lambdalisue/events{/privacy}",
                "followers_url": "https://api.github.com/users/lambdalisue/followers",
                "following_url": "https://api.github.com/users/lambdalisue/following{/other_user}",
                "gists_url": "https://api.github.com/users/lambdalisue/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lambdalisue",
                "id": 546312,
                "login": "lambdalisue",
                "node_id": "MDQ6VXNlcjU0NjMxMg==",
                "organizations_url": "https://api.github.com/users/lambdalisue/orgs",
                "received_events_url": "https://api.github.com/users/lambdalisue/received_events",
                "repos_url": "https://api.github.com/users/lambdalisue/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lambdalisue/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lambdalisue/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lambdalisue"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Looking at https://github.com/vim-denops/denops-issue268 , could a test be fashioned by a single-file deno (without denops) script using Promise.all()? That is much better than nothing. In CI we could install `deno`. Maybe later we can find a repro using only Nvim.",
            "created_at": "2023-07-26T12:49:53Z",
            "html_url": "https://github.com/neovim/neovim/pull/24399#issuecomment-1651742778",
            "id": 1651742778,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24399",
            "node_id": "IC_kwDOAPphoM5ic5g6",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1651742778/reactions"
            },
            "updated_at": "2023-07-26T12:50:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1651742778",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Looking at https://github.com/vim-denops/denops-issue268 , could a test be fashioned by a single-file deno (without denops) script using Promise.all()? That is much better than nothing. In CI we could install deno.\r\n\r\nOK, I'll try but it's a bit difficult so I cannot promise to provide such a sample...",
            "created_at": "2023-07-26T12:51:41Z",
            "html_url": "https://github.com/neovim/neovim/pull/24399#issuecomment-1651745556",
            "id": 1651745556,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24399",
            "node_id": "IC_kwDOAPphoM5ic6MU",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1651745556/reactions"
            },
            "updated_at": "2023-07-26T12:51:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1651745556",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/546312?v=4",
                "events_url": "https://api.github.com/users/lambdalisue/events{/privacy}",
                "followers_url": "https://api.github.com/users/lambdalisue/followers",
                "following_url": "https://api.github.com/users/lambdalisue/following{/other_user}",
                "gists_url": "https://api.github.com/users/lambdalisue/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lambdalisue",
                "id": 546312,
                "login": "lambdalisue",
                "node_id": "MDQ6VXNlcjU0NjMxMg==",
                "organizations_url": "https://api.github.com/users/lambdalisue/orgs",
                "received_events_url": "https://api.github.com/users/lambdalisue/received_events",
                "repos_url": "https://api.github.com/users/lambdalisue/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lambdalisue/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lambdalisue/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lambdalisue"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The existing implementation only checks the last frame of the call stack, but the MessagePack-RPC specification does not guarantee the order of messages, so in rare cases message reversals occur and the following error occurs.\r\n\r\nNote that the root issue remains that the RPC model nvim uses is fundamentally different than the one specified in that spec (stacked layered-cake bi-directional requests with precise stack unwinding vs serial uni-directional requests with out-of-order replies).  This change might make it it easier to get started using some pre-exising msgpack-rpc client stack (although lead to different surprises down the way), but this error message has been quite helpful when you are constructing an RPC client which is fully adapted to nvim's model. \r\n\r\nRegardless, the effect is just that these messages are left buffered until the correct reply has been submitted later, as the top frame of the stack is the only one which nvim is actively waiting on being replied to.",
            "created_at": "2023-07-26T17:05:32Z",
            "html_url": "https://github.com/neovim/neovim/pull/24399#issuecomment-1652195479",
            "id": 1652195479,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24399",
            "node_id": "IC_kwDOAPphoM5ieoCX",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1652195479/reactions"
            },
            "updated_at": "2023-07-26T17:05:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1652195479",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Ok, to unblock this: we need a way to configure this per-channel. That could be either\r\n\r\n- a special flag in `nvim_set_client_info()` (I guess a new \"attribute\", or maybe a special \"type\"), or\r\n- introduce `nvim_chan_set({chan_id}, {opt})`\r\n\r\nIn the future we can add other per-channel behaviors, maybe even \"fully msgpack-rpc compliant\" behavior (per-channel).\r\n\r\nThis also means adding a test isn't a blocker for this PR.",
            "created_at": "2023-07-26T20:44:24Z",
            "html_url": "https://github.com/neovim/neovim/pull/24399#issuecomment-1652468078",
            "id": 1652468078,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24399",
            "node_id": "IC_kwDOAPphoM5ifqlu",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1652468078/reactions"
            },
            "updated_at": "2023-07-26T20:45:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1652468078",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "NONE",
            "body": "It would be nice to make it per-channel, but how about introducing `rpcmode({channel}, {mode: 'neovim-rpc' | 'msgpack-rpc'})` or `rpcoptions({channel}, {opt})`? The name `nvim_chan_set` seems too generic for this purpose, since the channel may not be for RPC. Furthermore, we already have `rpcrequest({channel}, ...) ` and `rpcnotify({channel}, ...) `, so `rpcXXXX` would be similar to the existing names and easier to recognize?",
            "created_at": "2023-07-27T03:46:39Z",
            "html_url": "https://github.com/neovim/neovim/pull/24399#issuecomment-1652866469",
            "id": 1652866469,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24399",
            "node_id": "IC_kwDOAPphoM5ihL2l",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1652866469/reactions"
            },
            "updated_at": "2023-07-27T03:46:39Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1652866469",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/546312?v=4",
                "events_url": "https://api.github.com/users/lambdalisue/events{/privacy}",
                "followers_url": "https://api.github.com/users/lambdalisue/followers",
                "following_url": "https://api.github.com/users/lambdalisue/following{/other_user}",
                "gists_url": "https://api.github.com/users/lambdalisue/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lambdalisue",
                "id": 546312,
                "login": "lambdalisue",
                "node_id": "MDQ6VXNlcjU0NjMxMg==",
                "organizations_url": "https://api.github.com/users/lambdalisue/orgs",
                "received_events_url": "https://api.github.com/users/lambdalisue/received_events",
                "repos_url": "https://api.github.com/users/lambdalisue/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lambdalisue/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lambdalisue/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lambdalisue"
            }
        },
        {
            "author_association": "NONE",
            "body": "Note: I'll implement `nvim_set_client_info` with `remote_msgpack`  type on weekend.",
            "created_at": "2023-08-03T20:57:21Z",
            "html_url": "https://github.com/neovim/neovim/pull/24399#issuecomment-1664639051",
            "id": 1664639051,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24399",
            "node_id": "IC_kwDOAPphoM5jOGBL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1664639051/reactions"
            },
            "updated_at": "2023-08-03T20:57:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1664639051",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/546312?v=4",
                "events_url": "https://api.github.com/users/lambdalisue/events{/privacy}",
                "followers_url": "https://api.github.com/users/lambdalisue/followers",
                "following_url": "https://api.github.com/users/lambdalisue/following{/other_user}",
                "gists_url": "https://api.github.com/users/lambdalisue/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lambdalisue",
                "id": 546312,
                "login": "lambdalisue",
                "node_id": "MDQ6VXNlcjU0NjMxMg==",
                "organizations_url": "https://api.github.com/users/lambdalisue/orgs",
                "received_events_url": "https://api.github.com/users/lambdalisue/received_events",
                "repos_url": "https://api.github.com/users/lambdalisue/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lambdalisue/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lambdalisue/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lambdalisue"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/24399/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/24399/commits",
    "created_at": "2023-07-19T15:20:59Z",
    "diff_url": "https://github.com/neovim/neovim/pull/24399.diff",
    "draft": false,
    "head": {
        "label": "lambdalisue:fix-messagepack-rpc",
        "ref": "fix-messagepack-rpc",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/lambdalisue/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/lambdalisue/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/lambdalisue/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/lambdalisue/neovim/branches{/branch}",
            "clone_url": "https://github.com/lambdalisue/neovim.git",
            "collaborators_url": "https://api.github.com/repos/lambdalisue/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/lambdalisue/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/lambdalisue/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/lambdalisue/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/lambdalisue/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/lambdalisue/neovim/contributors",
            "created_at": "2022-11-29T16:55:52Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/lambdalisue/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/lambdalisue/neovim/downloads",
            "events_url": "https://api.github.com/repos/lambdalisue/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/lambdalisue/neovim/forks",
            "full_name": "lambdalisue/neovim",
            "git_commits_url": "https://api.github.com/repos/lambdalisue/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/lambdalisue/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/lambdalisue/neovim/git/tags{/sha}",
            "git_url": "git://github.com/lambdalisue/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/lambdalisue/neovim/hooks",
            "html_url": "https://github.com/lambdalisue/neovim",
            "id": 572150730,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/lambdalisue/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/lambdalisue/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/lambdalisue/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/lambdalisue/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/lambdalisue/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/lambdalisue/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/lambdalisue/neovim/merges",
            "milestones_url": "https://api.github.com/repos/lambdalisue/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOIhpTyg",
            "notifications_url": "https://api.github.com/repos/lambdalisue/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/546312?v=4",
                "events_url": "https://api.github.com/users/lambdalisue/events{/privacy}",
                "followers_url": "https://api.github.com/users/lambdalisue/followers",
                "following_url": "https://api.github.com/users/lambdalisue/following{/other_user}",
                "gists_url": "https://api.github.com/users/lambdalisue/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lambdalisue",
                "id": 546312,
                "login": "lambdalisue",
                "node_id": "MDQ6VXNlcjU0NjMxMg==",
                "organizations_url": "https://api.github.com/users/lambdalisue/orgs",
                "received_events_url": "https://api.github.com/users/lambdalisue/received_events",
                "repos_url": "https://api.github.com/users/lambdalisue/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lambdalisue/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lambdalisue/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lambdalisue"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/lambdalisue/neovim/pulls{/number}",
            "pushed_at": "2023-08-03T05:19:15Z",
            "releases_url": "https://api.github.com/repos/lambdalisue/neovim/releases{/id}",
            "size": 242048,
            "ssh_url": "git@github.com:lambdalisue/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/lambdalisue/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/lambdalisue/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/lambdalisue/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/lambdalisue/neovim/subscription",
            "svn_url": "https://github.com/lambdalisue/neovim",
            "tags_url": "https://api.github.com/repos/lambdalisue/neovim/tags",
            "teams_url": "https://api.github.com/repos/lambdalisue/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/lambdalisue/neovim/git/trees{/sha}",
            "updated_at": "2023-07-19T14:16:38Z",
            "url": "https://api.github.com/repos/lambdalisue/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "1778b0e479a727c2ed49611728a70b3d2f02cff4",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/546312?v=4",
            "events_url": "https://api.github.com/users/lambdalisue/events{/privacy}",
            "followers_url": "https://api.github.com/users/lambdalisue/followers",
            "following_url": "https://api.github.com/users/lambdalisue/following{/other_user}",
            "gists_url": "https://api.github.com/users/lambdalisue/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/lambdalisue",
            "id": 546312,
            "login": "lambdalisue",
            "node_id": "MDQ6VXNlcjU0NjMxMg==",
            "organizations_url": "https://api.github.com/users/lambdalisue/orgs",
            "received_events_url": "https://api.github.com/users/lambdalisue/received_events",
            "repos_url": "https://api.github.com/users/lambdalisue/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/lambdalisue/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lambdalisue/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/lambdalisue"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/24399",
    "id": 1441246830,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24399",
    "labels": [
        {
            "color": "FBCA04",
            "default": false,
            "description": "For PRs that propose significant changes to some part of the architecture or API",
            "id": 212680983,
            "name": "needs:discussion",
            "node_id": "MDU6TGFiZWwyMTI2ODA5ODM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/needs:discussion"
        },
        {
            "color": "c7def8",
            "default": false,
            "description": null,
            "id": 242522707,
            "name": "rpc",
            "node_id": "MDU6TGFiZWwyNDI1MjI3MDc=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/rpc"
        }
    ],
    "locked": false,
    "merge_commit_sha": "6de524131d5ca43fcf56199482f1188e0ad92cc4",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5V565u",
    "number": 24399,
    "patch_url": "https://github.com/neovim/neovim/pull/24399.patch",
    "requested_reviewers": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk"
        }
    ],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/24399/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/1778b0e479a727c2ed49611728a70b3d2f02cff4",
    "title": "fix(msgpack_rpc): \"ch * returned a response with an unknown request id\" error",
    "updated_at": "2023-08-03T20:57:22Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/24399",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/546312?v=4",
        "events_url": "https://api.github.com/users/lambdalisue/events{/privacy}",
        "followers_url": "https://api.github.com/users/lambdalisue/followers",
        "following_url": "https://api.github.com/users/lambdalisue/following{/other_user}",
        "gists_url": "https://api.github.com/users/lambdalisue/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/lambdalisue",
        "id": 546312,
        "login": "lambdalisue",
        "node_id": "MDQ6VXNlcjU0NjMxMg==",
        "organizations_url": "https://api.github.com/users/lambdalisue/orgs",
        "received_events_url": "https://api.github.com/users/lambdalisue/received_events",
        "repos_url": "https://api.github.com/users/lambdalisue/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/lambdalisue/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lambdalisue/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/lambdalisue"
    }
}