{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/25843/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/25843/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/25843"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/25843"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/25843/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/25843"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/e5a086585a822f86846fa4acf4db4728c9e3bcb1"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 4947,
            "forks_count": 4947,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1676,
            "open_issues_count": 1676,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2023-10-31T01:32:21Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 241511,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 70526,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2023-10-31T01:31:48Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 70526,
            "watchers_count": 70526,
            "web_commit_signoff_required": false
        },
        "sha": "788bc12a6f4c5a4627cbc75a2f539bfc622384a2",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "Add base64 encode() and decode() functions to a vim.base64 module.\r\n\r\n---\r\n\r\nAdding this as a prerequisite for a builtin OSC 52 clipboard provider.\r\n\r\nTODO:\r\n\r\n- [x] Documentation\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25843#discussion_r1376677853"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25843"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1376677853"
                }
            },
            "author_association": "MEMBER",
            "body": "as an additional check, I would also `eq([[the base64 data]], encode(v))` at least for the shortest one.",
            "commit_id": "e5a086585a822f86846fa4acf4db4728c9e3bcb1",
            "created_at": "2023-10-30T18:53:41Z",
            "diff_hunk": "@@ -0,0 +1,72 @@\n+local helpers = require('test.functional.helpers')(after_each)\n+local clear = helpers.clear\n+local exec_lua = helpers.exec_lua\n+local eq = helpers.eq\n+local pcall_err = helpers.pcall_err\n+local matches = helpers.matches\n+\n+describe('vim.base64', function()\n+  before_each(clear)\n+\n+  local function encode(s)\n+    return exec_lua([[return vim.base64.encode(...)]], s)\n+  end\n+\n+  local function decode(s)\n+    return exec_lua([[return vim.base64.decode(...)]], s)\n+  end\n+\n+  it('works', function()\n+    local values = {\n+      '',\n+      'Many hands make light work.',\n+      [[\n+        Call me Ishmael. Some years ago—never mind how long precisely—having little or no money in\n+        my purse, and nothing particular to interest me on shore, I thought I would sail about a\n+        little and see the watery part of the world.\n+      ]],\n+      [[\n+        It is a truth universally acknowledged, that a single man in possession of a good fortune,\n+        must be in want of a wife.\n+      ]],\n+      'Happy families are all alike; every unhappy family is unhappy in its own way.',",
            "html_url": "https://github.com/neovim/neovim/pull/25843#discussion_r1376677853",
            "id": 1376677853,
            "line": 32,
            "node_id": "PRRC_kwDOAPphoM5SDm_d",
            "original_commit_id": "094ac18114bba04497a874b2b438c7d0862b1c89",
            "original_line": 32,
            "original_position": 32,
            "original_start_line": null,
            "path": "test/functional/lua/base64_spec.lua",
            "position": 32,
            "pull_request_review_id": 1704867994,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25843",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1376677853/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-30T18:53:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1376677853",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25843#discussion_r1376709262"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25843"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1376709262"
                }
            },
            "author_association": "MEMBER",
            "body": "Added one more test case with an explicit check on the encoded output.",
            "commit_id": "e5a086585a822f86846fa4acf4db4728c9e3bcb1",
            "created_at": "2023-10-30T19:25:41Z",
            "diff_hunk": "@@ -0,0 +1,72 @@\n+local helpers = require('test.functional.helpers')(after_each)\n+local clear = helpers.clear\n+local exec_lua = helpers.exec_lua\n+local eq = helpers.eq\n+local pcall_err = helpers.pcall_err\n+local matches = helpers.matches\n+\n+describe('vim.base64', function()\n+  before_each(clear)\n+\n+  local function encode(s)\n+    return exec_lua([[return vim.base64.encode(...)]], s)\n+  end\n+\n+  local function decode(s)\n+    return exec_lua([[return vim.base64.decode(...)]], s)\n+  end\n+\n+  it('works', function()\n+    local values = {\n+      '',\n+      'Many hands make light work.',\n+      [[\n+        Call me Ishmael. Some years ago—never mind how long precisely—having little or no money in\n+        my purse, and nothing particular to interest me on shore, I thought I would sail about a\n+        little and see the watery part of the world.\n+      ]],\n+      [[\n+        It is a truth universally acknowledged, that a single man in possession of a good fortune,\n+        must be in want of a wife.\n+      ]],\n+      'Happy families are all alike; every unhappy family is unhappy in its own way.',",
            "html_url": "https://github.com/neovim/neovim/pull/25843#discussion_r1376709262",
            "id": 1376709262,
            "in_reply_to_id": 1376677853,
            "line": 32,
            "node_id": "PRRC_kwDOAPphoM5SDuqO",
            "original_commit_id": "094ac18114bba04497a874b2b438c7d0862b1c89",
            "original_line": 32,
            "original_position": 32,
            "original_start_line": null,
            "path": "test/functional/lua/base64_spec.lua",
            "position": 32,
            "pull_request_review_id": 1704919774,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25843",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1376709262/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-30T19:25:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1376709262",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25843#discussion_r1376736937"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25843"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1376736937"
                }
            },
            "author_association": "MEMBER",
            "body": "`c` is already `char`\r\n```suggestion\r\n    const uint8_t d = char_to_index[(uint8_t)c];\r\n```",
            "commit_id": "e5a086585a822f86846fa4acf4db4728c9e3bcb1",
            "created_at": "2023-10-30T19:56:20Z",
            "diff_hunk": "@@ -0,0 +1,257 @@\n+#include <assert.h>\n+#include <lauxlib.h>\n+#include <lua.h>\n+#include <stddef.h>\n+#include <string.h>\n+\n+#include \"nvim/lua/base64.h\"\n+#include \"nvim/memory.h\"\n+\n+#ifdef HAVE_BE64TOH\n+# include ENDIAN_INCLUDE_FILE\n+#endif\n+\n+static const char alphabet[] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n+\n+// Indices are 1-based because we use 0 to indicate a letter that is not part of the alphabet\n+static const uint8_t char_to_index[256] = {\n+  ['A'] = 1,  ['B'] = 2,  ['C'] = 3, ['D'] = 4,  ['E'] = 5,  ['F'] = 6,  ['G'] = 7,  ['H'] = 8,\n+  ['I'] = 9,  ['J'] = 10, ['K'] = 11, ['L'] = 12, ['M'] = 13, ['N'] = 14, ['O'] = 15, ['P'] = 16,\n+  ['Q'] = 17, ['R'] = 18, ['S'] = 19, ['T'] = 20, ['U'] = 21, ['V'] = 22, ['W'] = 23, ['X'] = 24,\n+  ['Y'] = 25, ['Z'] = 26, ['a'] = 27, ['b'] = 28, ['c'] = 29, ['d'] = 30, ['e'] = 31, ['f'] = 32,\n+  ['g'] = 33, ['h'] = 34, ['i'] = 35, ['j'] = 36, ['k'] = 37, ['l'] = 38, ['m'] = 39, ['n'] = 40,\n+  ['o'] = 41, ['p'] = 42, ['q'] = 43, ['r'] = 44, ['s'] = 45, ['t'] = 46, ['u'] = 47, ['v'] = 48,\n+  ['w'] = 49, ['x'] = 50, ['y'] = 51, ['z'] = 52, ['0'] = 53, ['1'] = 54, ['2'] = 55, ['3'] = 56,\n+  ['4'] = 57, ['5'] = 58, ['6'] = 59, ['7'] = 60, ['8'] = 61, ['9'] = 62, ['+'] = 63, ['/'] = 64,\n+};\n+\n+#ifndef HAVE_BE64TOH\n+static inline uint64_t htobe64(uint64_t host_64bits)\n+{\n+# ifdef ORDER_BIG_ENDIAN\n+  return host_64bits;\n+# else\n+  uint8_t *buf = (uint8_t *)&host_64bits;\n+  uint64_t ret = 0;\n+  for (size_t i = 8; i; i--) {\n+    ret |= ((uint64_t)buf[i - 1]) << ((8 - i) * 8);\n+  }\n+  return ret;\n+# endif\n+}\n+\n+static inline uint32_t htobe32(uint32_t host_32bits)\n+{\n+# ifdef ORDER_BIG_ENDIAN\n+  return host_32bits;\n+# else\n+  uint8_t *buf = (uint8_t *)&host_32bits;\n+  uint32_t ret = 0;\n+  for (size_t i = 4; i; i--) {\n+    ret |= ((uint32_t)buf[i - 1]) << ((4 - i) * 8);\n+  }\n+  return ret;\n+# endif\n+}\n+#endif\n+\n+static char *base64_encode(const char *src, size_t src_len)\n+{\n+  assert(src != NULL);\n+\n+  const size_t out_len = ((src_len + 2) / 3) * 4;\n+  char *dest = xmalloc(out_len + 1);\n+\n+  size_t src_i = 0;\n+  size_t out_i = 0;\n+\n+  // Read 8 bytes at a time as much as we can\n+  for (; src_i + 7 < src_len; src_i += 6) {\n+    uint64_t bits_h;\n+    memcpy(&bits_h, &src[src_i], sizeof(uint64_t));\n+    const uint64_t bits_be = htobe64(bits_h);\n+    dest[out_i + 0] = alphabet[(bits_be >> 58) & 0x3F];\n+    dest[out_i + 1] = alphabet[(bits_be >> 52) & 0x3F];\n+    dest[out_i + 2] = alphabet[(bits_be >> 46) & 0x3F];\n+    dest[out_i + 3] = alphabet[(bits_be >> 40) & 0x3F];\n+    dest[out_i + 4] = alphabet[(bits_be >> 34) & 0x3F];\n+    dest[out_i + 5] = alphabet[(bits_be >> 28) & 0x3F];\n+    dest[out_i + 6] = alphabet[(bits_be >> 22) & 0x3F];\n+    dest[out_i + 7] = alphabet[(bits_be >> 16) & 0x3F];\n+    out_i += sizeof(uint64_t);\n+  }\n+\n+  for (; src_i + 3 < src_len; src_i += 3) {\n+    uint32_t bits_h;\n+    memcpy(&bits_h, &src[src_i], sizeof(uint32_t));\n+    const uint32_t bits_be = htobe32(bits_h);\n+    dest[out_i + 0] = alphabet[(bits_be >> 26) & 0x3F];\n+    dest[out_i + 1] = alphabet[(bits_be >> 20) & 0x3F];\n+    dest[out_i + 2] = alphabet[(bits_be >> 14) & 0x3F];\n+    dest[out_i + 3] = alphabet[(bits_be >> 8) & 0x3F];\n+    out_i += sizeof(uint32_t);\n+  }\n+\n+  if (src_i + 2 < src_len) {\n+    dest[out_i + 0] = alphabet[src[src_i] >> 2];\n+    dest[out_i + 1] = alphabet[((src[src_i] & 0x3) << 4) | (src[src_i + 1] >> 4)];\n+    dest[out_i + 2] = alphabet[(src[src_i + 1] & 0xF) << 2 | (src[src_i + 2] >> 6)];\n+    dest[out_i + 3] = alphabet[(src[src_i + 2] & 0x3F)];\n+    out_i += 4;\n+  } else if (src_i + 1 < src_len) {\n+    dest[out_i + 0] = alphabet[src[src_i] >> 2];\n+    dest[out_i + 1] = alphabet[((src[src_i] & 0x3) << 4) | (src[src_i + 1] >> 4)];\n+    dest[out_i + 2] = alphabet[(src[src_i + 1] & 0xF) << 2];\n+    out_i += 3;\n+  } else if (src_i < src_len) {\n+    dest[out_i + 0] = alphabet[src[src_i] >> 2];\n+    dest[out_i + 1] = alphabet[(src[src_i] & 0x3) << 4];\n+    out_i += 2;\n+  }\n+\n+  for (; out_i < out_len; out_i++) {\n+    dest[out_i] = '=';\n+  }\n+\n+  dest[out_len] = '\\0';\n+\n+  return dest;\n+}\n+\n+static char *base64_decode(const char *src, size_t src_len)\n+{\n+  assert(src != NULL);\n+\n+  char *dest = NULL;\n+\n+  if (src_len % 4 != 0) {\n+    goto invalid;\n+  }\n+\n+  size_t out_len = (src_len / 4) * 3;\n+  if (src_len >= 1 && src[src_len - 1] == '=') {\n+    out_len--;\n+  }\n+  if (src_len >= 2 && src[src_len - 2] == '=') {\n+    out_len--;\n+  }\n+\n+  dest = xmalloc(out_len + 1);\n+\n+  int acc = 0;\n+  int acc_len = 0;\n+  size_t out_i = 0;\n+  size_t src_i = 0;\n+  int leftover_i = -1;\n+\n+  for (; src_i < src_len; src_i++) {\n+    const char c = src[src_i];\n+    const uint8_t d = char_to_index[c & 0xFF];",
            "html_url": "https://github.com/neovim/neovim/pull/25843#discussion_r1376736937",
            "id": 1376736937,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5SD1ap",
            "original_commit_id": "6d143b912be2d36f188f0463effefe4b37caacdd",
            "original_line": 149,
            "original_position": 149,
            "original_start_line": null,
            "path": "src/nvim/lua/base64.c",
            "position": null,
            "pull_request_review_id": 1704963790,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25843",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1376736937/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-30T19:56:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1376736937",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/59243201?v=4",
                "events_url": "https://api.github.com/users/ii14/events{/privacy}",
                "followers_url": "https://api.github.com/users/ii14/followers",
                "following_url": "https://api.github.com/users/ii14/following{/other_user}",
                "gists_url": "https://api.github.com/users/ii14/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ii14",
                "id": 59243201,
                "login": "ii14",
                "node_id": "MDQ6VXNlcjU5MjQzMjAx",
                "organizations_url": "https://api.github.com/users/ii14/orgs",
                "received_events_url": "https://api.github.com/users/ii14/received_events",
                "repos_url": "https://api.github.com/users/ii14/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ii14/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ii14/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ii14"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25843#discussion_r1376832344"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25843"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1376832344"
                }
            },
            "author_association": "MEMBER",
            "body": "452da56afa706a8da2f0a2948014c8fb6ebb515d",
            "commit_id": "e5a086585a822f86846fa4acf4db4728c9e3bcb1",
            "created_at": "2023-10-30T21:41:36Z",
            "diff_hunk": "@@ -0,0 +1,257 @@\n+#include <assert.h>\n+#include <lauxlib.h>\n+#include <lua.h>\n+#include <stddef.h>\n+#include <string.h>\n+\n+#include \"nvim/lua/base64.h\"\n+#include \"nvim/memory.h\"\n+\n+#ifdef HAVE_BE64TOH\n+# include ENDIAN_INCLUDE_FILE\n+#endif\n+\n+static const char alphabet[] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n+\n+// Indices are 1-based because we use 0 to indicate a letter that is not part of the alphabet\n+static const uint8_t char_to_index[256] = {\n+  ['A'] = 1,  ['B'] = 2,  ['C'] = 3, ['D'] = 4,  ['E'] = 5,  ['F'] = 6,  ['G'] = 7,  ['H'] = 8,\n+  ['I'] = 9,  ['J'] = 10, ['K'] = 11, ['L'] = 12, ['M'] = 13, ['N'] = 14, ['O'] = 15, ['P'] = 16,\n+  ['Q'] = 17, ['R'] = 18, ['S'] = 19, ['T'] = 20, ['U'] = 21, ['V'] = 22, ['W'] = 23, ['X'] = 24,\n+  ['Y'] = 25, ['Z'] = 26, ['a'] = 27, ['b'] = 28, ['c'] = 29, ['d'] = 30, ['e'] = 31, ['f'] = 32,\n+  ['g'] = 33, ['h'] = 34, ['i'] = 35, ['j'] = 36, ['k'] = 37, ['l'] = 38, ['m'] = 39, ['n'] = 40,\n+  ['o'] = 41, ['p'] = 42, ['q'] = 43, ['r'] = 44, ['s'] = 45, ['t'] = 46, ['u'] = 47, ['v'] = 48,\n+  ['w'] = 49, ['x'] = 50, ['y'] = 51, ['z'] = 52, ['0'] = 53, ['1'] = 54, ['2'] = 55, ['3'] = 56,\n+  ['4'] = 57, ['5'] = 58, ['6'] = 59, ['7'] = 60, ['8'] = 61, ['9'] = 62, ['+'] = 63, ['/'] = 64,\n+};\n+\n+#ifndef HAVE_BE64TOH\n+static inline uint64_t htobe64(uint64_t host_64bits)\n+{\n+# ifdef ORDER_BIG_ENDIAN\n+  return host_64bits;\n+# else\n+  uint8_t *buf = (uint8_t *)&host_64bits;\n+  uint64_t ret = 0;\n+  for (size_t i = 8; i; i--) {\n+    ret |= ((uint64_t)buf[i - 1]) << ((8 - i) * 8);\n+  }\n+  return ret;\n+# endif\n+}\n+\n+static inline uint32_t htobe32(uint32_t host_32bits)\n+{\n+# ifdef ORDER_BIG_ENDIAN\n+  return host_32bits;\n+# else\n+  uint8_t *buf = (uint8_t *)&host_32bits;\n+  uint32_t ret = 0;\n+  for (size_t i = 4; i; i--) {\n+    ret |= ((uint32_t)buf[i - 1]) << ((4 - i) * 8);\n+  }\n+  return ret;\n+# endif\n+}\n+#endif\n+\n+static char *base64_encode(const char *src, size_t src_len)\n+{\n+  assert(src != NULL);\n+\n+  const size_t out_len = ((src_len + 2) / 3) * 4;\n+  char *dest = xmalloc(out_len + 1);\n+\n+  size_t src_i = 0;\n+  size_t out_i = 0;\n+\n+  // Read 8 bytes at a time as much as we can\n+  for (; src_i + 7 < src_len; src_i += 6) {\n+    uint64_t bits_h;\n+    memcpy(&bits_h, &src[src_i], sizeof(uint64_t));\n+    const uint64_t bits_be = htobe64(bits_h);\n+    dest[out_i + 0] = alphabet[(bits_be >> 58) & 0x3F];\n+    dest[out_i + 1] = alphabet[(bits_be >> 52) & 0x3F];\n+    dest[out_i + 2] = alphabet[(bits_be >> 46) & 0x3F];\n+    dest[out_i + 3] = alphabet[(bits_be >> 40) & 0x3F];\n+    dest[out_i + 4] = alphabet[(bits_be >> 34) & 0x3F];\n+    dest[out_i + 5] = alphabet[(bits_be >> 28) & 0x3F];\n+    dest[out_i + 6] = alphabet[(bits_be >> 22) & 0x3F];\n+    dest[out_i + 7] = alphabet[(bits_be >> 16) & 0x3F];\n+    out_i += sizeof(uint64_t);\n+  }\n+\n+  for (; src_i + 3 < src_len; src_i += 3) {\n+    uint32_t bits_h;\n+    memcpy(&bits_h, &src[src_i], sizeof(uint32_t));\n+    const uint32_t bits_be = htobe32(bits_h);\n+    dest[out_i + 0] = alphabet[(bits_be >> 26) & 0x3F];\n+    dest[out_i + 1] = alphabet[(bits_be >> 20) & 0x3F];\n+    dest[out_i + 2] = alphabet[(bits_be >> 14) & 0x3F];\n+    dest[out_i + 3] = alphabet[(bits_be >> 8) & 0x3F];\n+    out_i += sizeof(uint32_t);\n+  }\n+\n+  if (src_i + 2 < src_len) {\n+    dest[out_i + 0] = alphabet[src[src_i] >> 2];\n+    dest[out_i + 1] = alphabet[((src[src_i] & 0x3) << 4) | (src[src_i + 1] >> 4)];\n+    dest[out_i + 2] = alphabet[(src[src_i + 1] & 0xF) << 2 | (src[src_i + 2] >> 6)];\n+    dest[out_i + 3] = alphabet[(src[src_i + 2] & 0x3F)];\n+    out_i += 4;\n+  } else if (src_i + 1 < src_len) {\n+    dest[out_i + 0] = alphabet[src[src_i] >> 2];\n+    dest[out_i + 1] = alphabet[((src[src_i] & 0x3) << 4) | (src[src_i + 1] >> 4)];\n+    dest[out_i + 2] = alphabet[(src[src_i + 1] & 0xF) << 2];\n+    out_i += 3;\n+  } else if (src_i < src_len) {\n+    dest[out_i + 0] = alphabet[src[src_i] >> 2];\n+    dest[out_i + 1] = alphabet[(src[src_i] & 0x3) << 4];\n+    out_i += 2;\n+  }\n+\n+  for (; out_i < out_len; out_i++) {\n+    dest[out_i] = '=';\n+  }\n+\n+  dest[out_len] = '\\0';\n+\n+  return dest;\n+}\n+\n+static char *base64_decode(const char *src, size_t src_len)\n+{\n+  assert(src != NULL);\n+\n+  char *dest = NULL;\n+\n+  if (src_len % 4 != 0) {\n+    goto invalid;\n+  }\n+\n+  size_t out_len = (src_len / 4) * 3;\n+  if (src_len >= 1 && src[src_len - 1] == '=') {\n+    out_len--;\n+  }\n+  if (src_len >= 2 && src[src_len - 2] == '=') {\n+    out_len--;\n+  }\n+\n+  dest = xmalloc(out_len + 1);\n+\n+  int acc = 0;\n+  int acc_len = 0;\n+  size_t out_i = 0;\n+  size_t src_i = 0;\n+  int leftover_i = -1;\n+\n+  for (; src_i < src_len; src_i++) {\n+    const char c = src[src_i];\n+    const uint8_t d = char_to_index[c & 0xFF];",
            "html_url": "https://github.com/neovim/neovim/pull/25843#discussion_r1376832344",
            "id": 1376832344,
            "in_reply_to_id": 1376736937,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5SEMtY",
            "original_commit_id": "6d143b912be2d36f188f0463effefe4b37caacdd",
            "original_line": 149,
            "original_position": 149,
            "original_start_line": null,
            "path": "src/nvim/lua/base64.c",
            "position": null,
            "pull_request_review_id": 1705121064,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25843",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1376832344/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-30T21:41:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1376832344",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        }
    ],
    "comment_regular_data": [],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/25843/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/25843/commits",
    "created_at": "2023-10-30T18:20:05Z",
    "diff_url": "https://github.com/neovim/neovim/pull/25843.diff",
    "draft": false,
    "head": {
        "label": "gpanders:base64",
        "ref": "base64",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/gpanders/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/gpanders/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/gpanders/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/gpanders/neovim/branches{/branch}",
            "clone_url": "https://github.com/gpanders/neovim.git",
            "collaborators_url": "https://api.github.com/repos/gpanders/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/gpanders/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/gpanders/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/gpanders/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/gpanders/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/gpanders/neovim/contributors",
            "created_at": "2021-06-11T03:58:44Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/gpanders/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/gpanders/neovim/downloads",
            "events_url": "https://api.github.com/repos/gpanders/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/gpanders/neovim/forks",
            "full_name": "gpanders/neovim",
            "git_commits_url": "https://api.github.com/repos/gpanders/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/gpanders/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/gpanders/neovim/git/tags{/sha}",
            "git_url": "git://github.com/gpanders/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/gpanders/neovim/hooks",
            "html_url": "https://github.com/gpanders/neovim",
            "id": 375899052,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/gpanders/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/gpanders/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/gpanders/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/gpanders/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/gpanders/neovim/labels{/name}",
            "language": "Vim script",
            "languages_url": "https://api.github.com/repos/gpanders/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/gpanders/neovim/merges",
            "milestones_url": "https://api.github.com/repos/gpanders/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNzU4OTkwNTI=",
            "notifications_url": "https://api.github.com/repos/gpanders/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/gpanders/neovim/pulls{/number}",
            "pushed_at": "2023-10-31T01:32:17Z",
            "releases_url": "https://api.github.com/repos/gpanders/neovim/releases{/id}",
            "size": 236789,
            "ssh_url": "git@github.com:gpanders/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/gpanders/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/gpanders/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/gpanders/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/gpanders/neovim/subscription",
            "svn_url": "https://github.com/gpanders/neovim",
            "tags_url": "https://api.github.com/repos/gpanders/neovim/tags",
            "teams_url": "https://api.github.com/repos/gpanders/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/gpanders/neovim/git/trees{/sha}",
            "updated_at": "2022-01-07T19:38:08Z",
            "url": "https://api.github.com/repos/gpanders/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "e5a086585a822f86846fa4acf4db4728c9e3bcb1",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
            "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
            "followers_url": "https://api.github.com/users/gpanders/followers",
            "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
            "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/gpanders",
            "id": 8965202,
            "login": "gpanders",
            "node_id": "MDQ6VXNlcjg5NjUyMDI=",
            "organizations_url": "https://api.github.com/users/gpanders/orgs",
            "received_events_url": "https://api.github.com/users/gpanders/received_events",
            "repos_url": "https://api.github.com/users/gpanders/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/gpanders"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/25843",
    "id": 1579619990,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25843",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "fa78a2ddbb79071d72e8207842b73327e676871b",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5eJxaW",
    "number": 25843,
    "patch_url": "https://github.com/neovim/neovim/pull/25843.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/25843/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/e5a086585a822f86846fa4acf4db4728c9e3bcb1",
    "title": "feat(stdlib): add vim.base64 module",
    "updated_at": "2023-10-31T01:32:20Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/25843",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
        "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
        "followers_url": "https://api.github.com/users/gpanders/followers",
        "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
        "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/gpanders",
        "id": 8965202,
        "login": "gpanders",
        "node_id": "MDQ6VXNlcjg5NjUyMDI=",
        "organizations_url": "https://api.github.com/users/gpanders/orgs",
        "received_events_url": "https://api.github.com/users/gpanders/received_events",
        "repos_url": "https://api.github.com/users/gpanders/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/gpanders"
    }
}