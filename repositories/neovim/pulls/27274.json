{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/27274/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/27274/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/27274"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/27274"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/27274/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/27274"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/f1734aa02658cbcba58bfbfc7e56e639732f10ce"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5259,
            "forks_count": 5259,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1730,
            "open_issues_count": 1730,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-02-20T01:37:56Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 253965,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 74120,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-02-20T01:31:12Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 74120,
            "watchers_count": 74120,
            "web_commit_signoff_required": false
        },
        "sha": "0a8e66898d73ee90a9c52d0944141f498804c99d",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "Should fix #27239, and fix #23664.\r\n\r\n### Problem\r\n\r\n- When a predicate filters out a match, non-first captures may not be\r\n  correctly excluded (#27239).\r\n- `Query:iter_captures()` does not yield correct a metadata table for\r\n  non-first captures (#23664).\r\n\r\n### Analysis & Solution\r\n\r\nThis PR is still a very early draft and will be rewritten several times.\r\nUntil things are settled down, please refer to the commit message for\r\ndetails and remaining TODOs: \r\n\r\n> \"fix(treesitter): make iter_captures() return a correct match table\"\r\n\r\n### Current Status\r\n\r\n* ~~was blocked by #27194~~: will rebase\r\n* I realized that correctness and identity of `match` table are non-trivial. See https://github.com/neovim/neovim/pull/27274#discussion_r1473335027\r\n\r\n### Related issues\r\n\r\n- #27194 needs to be merged first to avoid a conflict.\r\n\r\n- #17099, #24738: rewrites iter_matches() to correctly handle quantifiers.\r\n  - The scope is different: this PR fixes `iter_captures()` whereas 24738 fixes `iter_matches()`, correcting `match` table to contain a list of `TSNode`s instead of a single `TSNode` (see `set_match()`)\r\n  - But a part 24738 make a similar change: `match` should return a different table for each distinct match.\r\n\r\n- #27132 can also benefit from this fix if it decides to use `iter_captures()` instead of `iter_matches()`.",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27274#discussion_r1473133281"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27274"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1473133281"
                }
            },
            "author_association": "MEMBER",
            "body": "Is this true? The `match` table is still needed for directives, even when there are no predicates.\r\n\r\nBesides, we will want the `match` table for every iteration anyway for https://github.com/neovim/neovim/pull/27132.",
            "commit_id": "f1734aa02658cbcba58bfbfc7e56e639732f10ce",
            "created_at": "2024-01-31T16:39:50Z",
            "diff_hunk": "@@ -1411,26 +1417,44 @@ static int query_next_capture(lua_State *L)\n     push_node(L, capture.node, lua_upvalueindex(2));  // [index, node]\n \n     // Now check if we need to run the predicates\n+    // a predicate is executed only once within the same match.\n     uint32_t n_pred;\n     ts_query_predicates_for_pattern(query, match.pattern_index, &n_pred);\n \n-    if (n_pred > 0 && (ud->max_match_id < (int)match.id)) {\n+    if (n_pred == 0) {\n+      // no predicates. Return without the match table as a small perf optimization,\n+      // because in the iter_captures() method, match table won't be needed.\n+      // [index, node]",
            "html_url": "https://github.com/neovim/neovim/pull/27274#discussion_r1473133281",
            "id": 1473133281,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Xzjrh",
            "original_commit_id": "c19339b79a08a38f8a3346a795e1b075ee0107bc",
            "original_line": 1430,
            "original_position": 60,
            "original_start_line": 1425,
            "path": "src/nvim/lua/treesitter.c",
            "position": null,
            "pull_request_review_id": 1854282769,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27274",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1473133281/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-01-31T16:52:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1473133281",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27274#discussion_r1473150830"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27274"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1473150830"
                }
            },
            "author_association": "MEMBER",
            "body": "~~I think this whole thing can be simplified to always include the `match` table and return 3 arguments unconditionally. The `iter_captures` method in `query.lua` will need to be updated appropriately to avoid re-evaluating predicates and directives multiples times per match, though (see the test case I provided to check for this).~~\r\n\r\n~~The first time a match is visited we set `match.active` to false. I think we can use this in the `iter_captures` implementation to determine when we need to evaluate `match_preds` and `apply_directives`.~~\r\n\r\n@lucario387 mentioned in [another comment](https://github.com/neovim/neovim/pull/27274#discussion_r1473190609) that \"predicates\" in the Tree-sitter library also refers to directives. If that's the case then I agree that we should only return the match table when `npred > 0`.",
            "commit_id": "f1734aa02658cbcba58bfbfc7e56e639732f10ce",
            "created_at": "2024-01-31T16:51:38Z",
            "diff_hunk": "@@ -1411,26 +1417,44 @@ static int query_next_capture(lua_State *L)\n     push_node(L, capture.node, lua_upvalueindex(2));  // [index, node]\n \n     // Now check if we need to run the predicates\n+    // a predicate is executed only once within the same match.\n     uint32_t n_pred;\n     ts_query_predicates_for_pattern(query, match.pattern_index, &n_pred);\n \n-    if (n_pred > 0 && (ud->max_match_id < (int)match.id)) {\n+    if (n_pred == 0) {\n+      // no predicates. Return without the match table as a small perf optimization,\n+      // because in the iter_captures() method, match table won't be needed.\n+      // [index, node]\n+      return 2;\n+    }\n+\n+    if (ud->max_match_id < (int)match.id) {\n       ud->max_match_id = (int)match.id;\n \n-      lua_pushvalue(L, lua_upvalueindex(4));  // [index, node, match]\n+      // Create a new cleared match table\n+      lua_createtable(L, (int)ts_query_capture_count(query), 2);  // [index, node, match]\n+      // match: TSMatch = { [integer]: TSNode, pattern: integer, active: boolean }\n       set_match(L, &match, lua_upvalueindex(2));\n+      // match.pattern\n       lua_pushinteger(L, match.pattern_index + 1);\n       lua_setfield(L, -2, \"pattern\");\n \n+      // Set match.active = false for the next match.\n       if (match.capture_count > 1) {\n         ud->predicated_match = (int)match.id;\n         lua_pushboolean(L, false);\n         lua_setfield(L, -2, \"active\");\n       }\n-      return 3;\n+\n+      // Update the current_match in upvalue with the new match table\n+      lua_replace(L, lua_upvalueindex(4));  // [index, node]\n     }\n-    return 2;\n+\n+    lua_pushvalue(L, lua_upvalueindex(4));  // [index, node, match]\n+    return 3;\n   }\n+\n+  // end of result for the query.",
            "html_url": "https://github.com/neovim/neovim/pull/27274#discussion_r1473150830",
            "id": 1473150830,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Xzn9u",
            "original_commit_id": "c19339b79a08a38f8a3346a795e1b075ee0107bc",
            "original_line": 1460,
            "original_position": 93,
            "original_start_line": 1431,
            "path": "src/nvim/lua/treesitter.c",
            "position": null,
            "pull_request_review_id": 1854282769,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27274",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1473150830/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-01-31T17:29:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1473150830",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27274#discussion_r1473190609"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27274"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1473190609"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "From treesitter's pov, directives and predicates are both predicates. Here is the example of upstream calling `#set!` a predicate. https://tree-sitter.github.io/tree-sitter/syntax-highlighting#unit-testing, a line above that.",
            "commit_id": "f1734aa02658cbcba58bfbfc7e56e639732f10ce",
            "created_at": "2024-01-31T17:24:28Z",
            "diff_hunk": "@@ -1411,26 +1417,44 @@ static int query_next_capture(lua_State *L)\n     push_node(L, capture.node, lua_upvalueindex(2));  // [index, node]\n \n     // Now check if we need to run the predicates\n+    // a predicate is executed only once within the same match.\n     uint32_t n_pred;\n     ts_query_predicates_for_pattern(query, match.pattern_index, &n_pred);\n \n-    if (n_pred > 0 && (ud->max_match_id < (int)match.id)) {\n+    if (n_pred == 0) {\n+      // no predicates. Return without the match table as a small perf optimization,\n+      // because in the iter_captures() method, match table won't be needed.\n+      // [index, node]",
            "html_url": "https://github.com/neovim/neovim/pull/27274#discussion_r1473190609",
            "id": 1473190609,
            "in_reply_to_id": 1473133281,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5XzxrR",
            "original_commit_id": "c19339b79a08a38f8a3346a795e1b075ee0107bc",
            "original_line": 1430,
            "original_position": 60,
            "original_start_line": 1425,
            "path": "src/nvim/lua/treesitter.c",
            "position": null,
            "pull_request_review_id": 1854395198,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27274",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1473190609/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-01-31T17:24:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1473190609",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29790821?v=4",
                "events_url": "https://api.github.com/users/lucario387/events{/privacy}",
                "followers_url": "https://api.github.com/users/lucario387/followers",
                "following_url": "https://api.github.com/users/lucario387/following{/other_user}",
                "gists_url": "https://api.github.com/users/lucario387/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lucario387",
                "id": 29790821,
                "login": "lucario387",
                "node_id": "MDQ6VXNlcjI5NzkwODIx",
                "organizations_url": "https://api.github.com/users/lucario387/orgs",
                "received_events_url": "https://api.github.com/users/lucario387/received_events",
                "repos_url": "https://api.github.com/users/lucario387/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lucario387/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lucario387/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lucario387"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27274#discussion_r1473195236"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27274"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1473195236"
                }
            },
            "author_association": "MEMBER",
            "body": "Ah, thanks for that clarification. If that is indeed the case then I agree we only need to return the match table when `npred > 0`.",
            "commit_id": "f1734aa02658cbcba58bfbfc7e56e639732f10ce",
            "created_at": "2024-01-31T17:28:27Z",
            "diff_hunk": "@@ -1411,26 +1417,44 @@ static int query_next_capture(lua_State *L)\n     push_node(L, capture.node, lua_upvalueindex(2));  // [index, node]\n \n     // Now check if we need to run the predicates\n+    // a predicate is executed only once within the same match.\n     uint32_t n_pred;\n     ts_query_predicates_for_pattern(query, match.pattern_index, &n_pred);\n \n-    if (n_pred > 0 && (ud->max_match_id < (int)match.id)) {\n+    if (n_pred == 0) {\n+      // no predicates. Return without the match table as a small perf optimization,\n+      // because in the iter_captures() method, match table won't be needed.\n+      // [index, node]",
            "html_url": "https://github.com/neovim/neovim/pull/27274#discussion_r1473195236",
            "id": 1473195236,
            "in_reply_to_id": 1473133281,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Xzyzk",
            "original_commit_id": "c19339b79a08a38f8a3346a795e1b075ee0107bc",
            "original_line": 1430,
            "original_position": 60,
            "original_start_line": 1425,
            "path": "src/nvim/lua/treesitter.c",
            "position": null,
            "pull_request_review_id": 1854408483,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27274",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1473195236/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-01-31T17:28:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1473195236",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27274#discussion_r1473315834"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27274"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1473315834"
                }
            },
            "author_association": "MEMBER",
            "body": "Thanks for sharing the test case. I will try to include them -- probably moving query related tests out of `parser_spec` (which is now too long) to a new `queries_spec`.\r\n\r\nYes, in this context predicates includes directives (which is a Nvim-specific term). A clarification would be needed in the docs. While returning only when there is a predicate/directive would be fine, if we later decide to make `iter_capture()` return the fourth return value `match` (for #27132) then this might need to be reconsidered; e.g. via opt-in.",
            "commit_id": "f1734aa02658cbcba58bfbfc7e56e639732f10ce",
            "created_at": "2024-01-31T18:51:57Z",
            "diff_hunk": "@@ -1411,26 +1417,44 @@ static int query_next_capture(lua_State *L)\n     push_node(L, capture.node, lua_upvalueindex(2));  // [index, node]\n \n     // Now check if we need to run the predicates\n+    // a predicate is executed only once within the same match.\n     uint32_t n_pred;\n     ts_query_predicates_for_pattern(query, match.pattern_index, &n_pred);\n \n-    if (n_pred > 0 && (ud->max_match_id < (int)match.id)) {\n+    if (n_pred == 0) {\n+      // no predicates. Return without the match table as a small perf optimization,\n+      // because in the iter_captures() method, match table won't be needed.\n+      // [index, node]\n+      return 2;\n+    }\n+\n+    if (ud->max_match_id < (int)match.id) {\n       ud->max_match_id = (int)match.id;\n \n-      lua_pushvalue(L, lua_upvalueindex(4));  // [index, node, match]\n+      // Create a new cleared match table\n+      lua_createtable(L, (int)ts_query_capture_count(query), 2);  // [index, node, match]\n+      // match: TSMatch = { [integer]: TSNode, pattern: integer, active: boolean }\n       set_match(L, &match, lua_upvalueindex(2));\n+      // match.pattern\n       lua_pushinteger(L, match.pattern_index + 1);\n       lua_setfield(L, -2, \"pattern\");\n \n+      // Set match.active = false for the next match.\n       if (match.capture_count > 1) {\n         ud->predicated_match = (int)match.id;\n         lua_pushboolean(L, false);\n         lua_setfield(L, -2, \"active\");\n       }\n-      return 3;\n+\n+      // Update the current_match in upvalue with the new match table\n+      lua_replace(L, lua_upvalueindex(4));  // [index, node]\n     }\n-    return 2;\n+\n+    lua_pushvalue(L, lua_upvalueindex(4));  // [index, node, match]\n+    return 3;\n   }\n+\n+  // end of result for the query.",
            "html_url": "https://github.com/neovim/neovim/pull/27274#discussion_r1473315834",
            "id": 1473315834,
            "in_reply_to_id": 1473150830,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5X0QP6",
            "original_commit_id": "c19339b79a08a38f8a3346a795e1b075ee0107bc",
            "original_line": 1460,
            "original_position": 93,
            "original_start_line": 1431,
            "path": "src/nvim/lua/treesitter.c",
            "position": null,
            "pull_request_review_id": 1854588122,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27274",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1473315834/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-01-31T18:51:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1473315834",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27274#discussion_r1473320786"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27274"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1473320786"
                }
            },
            "author_association": "MEMBER",
            "body": "For #27312 at least, we only need `match` when there are directives, so this would still be ok.",
            "commit_id": "f1734aa02658cbcba58bfbfc7e56e639732f10ce",
            "created_at": "2024-01-31T18:56:01Z",
            "diff_hunk": "@@ -1411,26 +1417,44 @@ static int query_next_capture(lua_State *L)\n     push_node(L, capture.node, lua_upvalueindex(2));  // [index, node]\n \n     // Now check if we need to run the predicates\n+    // a predicate is executed only once within the same match.\n     uint32_t n_pred;\n     ts_query_predicates_for_pattern(query, match.pattern_index, &n_pred);\n \n-    if (n_pred > 0 && (ud->max_match_id < (int)match.id)) {\n+    if (n_pred == 0) {\n+      // no predicates. Return without the match table as a small perf optimization,\n+      // because in the iter_captures() method, match table won't be needed.\n+      // [index, node]\n+      return 2;\n+    }\n+\n+    if (ud->max_match_id < (int)match.id) {\n       ud->max_match_id = (int)match.id;\n \n-      lua_pushvalue(L, lua_upvalueindex(4));  // [index, node, match]\n+      // Create a new cleared match table\n+      lua_createtable(L, (int)ts_query_capture_count(query), 2);  // [index, node, match]\n+      // match: TSMatch = { [integer]: TSNode, pattern: integer, active: boolean }\n       set_match(L, &match, lua_upvalueindex(2));\n+      // match.pattern\n       lua_pushinteger(L, match.pattern_index + 1);\n       lua_setfield(L, -2, \"pattern\");\n \n+      // Set match.active = false for the next match.\n       if (match.capture_count > 1) {\n         ud->predicated_match = (int)match.id;\n         lua_pushboolean(L, false);\n         lua_setfield(L, -2, \"active\");\n       }\n-      return 3;\n+\n+      // Update the current_match in upvalue with the new match table\n+      lua_replace(L, lua_upvalueindex(4));  // [index, node]\n     }\n-    return 2;\n+\n+    lua_pushvalue(L, lua_upvalueindex(4));  // [index, node, match]\n+    return 3;\n   }\n+\n+  // end of result for the query.",
            "html_url": "https://github.com/neovim/neovim/pull/27274#discussion_r1473320786",
            "id": 1473320786,
            "in_reply_to_id": 1473150830,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5X0RdS",
            "original_commit_id": "c19339b79a08a38f8a3346a795e1b075ee0107bc",
            "original_line": 1460,
            "original_position": 93,
            "original_start_line": 1431,
            "path": "src/nvim/lua/treesitter.c",
            "position": null,
            "pull_request_review_id": 1854595970,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27274",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1473320786/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-01-31T18:56:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1473320786",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27274#discussion_r1473321341"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27274"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1473321341"
                }
            },
            "author_association": "MEMBER",
            "body": "Right. When I wrote this earlier, there was no such need other than *ephemeral* uses for predicates/directives. But if #27132 needs `match`, we can remove this *micro-* optimization. We'd need to do profiling and check how significant this would be, because a majority of patterns will have no predicates. See @bfredl's comment: https://github.com/neovim/neovim/issues/27239#issuecomment-1914247646, suggesting this should be done in an opt-in manner.",
            "commit_id": "f1734aa02658cbcba58bfbfc7e56e639732f10ce",
            "created_at": "2024-01-31T18:56:30Z",
            "diff_hunk": "@@ -1411,26 +1417,44 @@ static int query_next_capture(lua_State *L)\n     push_node(L, capture.node, lua_upvalueindex(2));  // [index, node]\n \n     // Now check if we need to run the predicates\n+    // a predicate is executed only once within the same match.\n     uint32_t n_pred;\n     ts_query_predicates_for_pattern(query, match.pattern_index, &n_pred);\n \n-    if (n_pred > 0 && (ud->max_match_id < (int)match.id)) {\n+    if (n_pred == 0) {\n+      // no predicates. Return without the match table as a small perf optimization,\n+      // because in the iter_captures() method, match table won't be needed.\n+      // [index, node]",
            "html_url": "https://github.com/neovim/neovim/pull/27274#discussion_r1473321341",
            "id": 1473321341,
            "in_reply_to_id": 1473133281,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5X0Rl9",
            "original_commit_id": "c19339b79a08a38f8a3346a795e1b075ee0107bc",
            "original_line": 1430,
            "original_position": 60,
            "original_start_line": 1425,
            "path": "src/nvim/lua/treesitter.c",
            "position": null,
            "pull_request_review_id": 1854596797,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27274",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1473321341/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-01-31T19:54:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1473321341",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27274#discussion_r1473335027"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27274"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1473335027"
                }
            },
            "author_association": "MEMBER",
            "body": "There is one issue here. I understand this logic (`ud->max_match_id`) was introduced to run predicates only once for the match. However, I found that `ts_query_cursor_next_capture` enumerates captures in the order they are found, so actually matches can be *alternating*; and indeed this assertion easily fails although not (yet) covered by tests. Therefore, the current implementation is also potentially buggy because `match` table might contain a wrong information coming from another matches.\r\n\r\nWe can either:\r\n- (1) re-evaluate predicates when match is differs from the last one, i.e. call `set_match` again to reset the table (we no longer have the \"identity\" of table)\r\n- (2) or keep track of a collection of `matches` ...\r\n\r\nbut these can be costly, hurting the performance. It is also [*against* the design of `ts_query_cursor_next_capture`, ](\r\nhttps://github.com/tree-sitter/tree-sitter/blob/v0.20.9/lib/include/tree_sitter/api.h#L931-L934), suggesting that **`iter_matches`** might be a better fit if one needs the `match` table. This also implies that predicates are quite difficult to handle with `iter_captures()` -- I'll need to check how the upstream tree-sitter implements predicates.\r\n\r\nAny thoughts @gpanders @bfredl @lewis6991 @lucario387?",
            "commit_id": "f1734aa02658cbcba58bfbfc7e56e639732f10ce",
            "created_at": "2024-01-31T19:08:52Z",
            "diff_hunk": "@@ -1411,26 +1420,44 @@ static int query_next_capture(lua_State *L)\n     push_node(L, capture.node, lua_upvalueindex(2));  // [index, node]\n \n     // Now check if we need to run the predicates\n+    // a predicate is executed only once within the same match.\n     uint32_t n_pred;\n     ts_query_predicates_for_pattern(query, match.pattern_index, &n_pred);\n \n-    if (n_pred > 0 && (ud->max_match_id < (int)match.id)) {\n+    if (n_pred == 0) {\n+      // No predicates. Return without the match table as a small perf optimization,\n+      // because in the iter_captures() method, match table won't be needed.\n+      // [index, node]\n+      return 2;\n+    }\n+\n+    // A new match is found. the use of `max_match_id` assumed that `ts_query_cursor_next_capture()`\n+    // would enumerate captures in the order that \"match\"es increases monotonoically.\n+    // The `ts_query_cursor_next_capture()` would enumerate captures in the order they are found.\n+    // TODO(wookayin): However, this is not guaranteed, and indeed assertion fails.\n+    // Therefore, when matches are alternating, the information about if predicate is active\n+    // won't be maintained, which can still lead to incorrect behavior of predicates.\n+    assert(ud->max_match_id <= (int)match.id);\n+    if (ud->max_match_id < (int)match.id) {",
            "html_url": "https://github.com/neovim/neovim/pull/27274#discussion_r1473335027",
            "id": 1473335027,
            "line": 1441,
            "node_id": "PRRC_kwDOAPphoM5X0U7z",
            "original_commit_id": "f1734aa02658cbcba58bfbfc7e56e639732f10ce",
            "original_line": 1441,
            "original_position": 81,
            "original_start_line": null,
            "path": "src/nvim/lua/treesitter.c",
            "position": 81,
            "pull_request_review_id": 1854621134,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27274",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1473335027/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-31T19:10:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1473335027",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27274#discussion_r1473353601"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27274"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1473353601"
                }
            },
            "author_association": "MEMBER",
            "body": ">However, I found that ts_query_cursor_next_capture enumerates captures in the order they are found, so actually matches can be alternating; and indeed this assertion easily fails although not (yet) covered by tests.\r\n\r\nCan you provide an example where this fails? I'm not sure I understand in what situation an ordered list of captures would result in alternating matches. The treesitter header you linked says\r\n\r\n>iterate over all of the individual *captures* in the order that they appear\r\n\r\nSo iterating over captures in the \"order that they appear\" implies that matches are also iterated in sequential order. Am I misunderstanding?",
            "commit_id": "f1734aa02658cbcba58bfbfc7e56e639732f10ce",
            "created_at": "2024-01-31T19:18:44Z",
            "diff_hunk": "@@ -1411,26 +1420,44 @@ static int query_next_capture(lua_State *L)\n     push_node(L, capture.node, lua_upvalueindex(2));  // [index, node]\n \n     // Now check if we need to run the predicates\n+    // a predicate is executed only once within the same match.\n     uint32_t n_pred;\n     ts_query_predicates_for_pattern(query, match.pattern_index, &n_pred);\n \n-    if (n_pred > 0 && (ud->max_match_id < (int)match.id)) {\n+    if (n_pred == 0) {\n+      // No predicates. Return without the match table as a small perf optimization,\n+      // because in the iter_captures() method, match table won't be needed.\n+      // [index, node]\n+      return 2;\n+    }\n+\n+    // A new match is found. the use of `max_match_id` assumed that `ts_query_cursor_next_capture()`\n+    // would enumerate captures in the order that \"match\"es increases monotonoically.\n+    // The `ts_query_cursor_next_capture()` would enumerate captures in the order they are found.\n+    // TODO(wookayin): However, this is not guaranteed, and indeed assertion fails.\n+    // Therefore, when matches are alternating, the information about if predicate is active\n+    // won't be maintained, which can still lead to incorrect behavior of predicates.\n+    assert(ud->max_match_id <= (int)match.id);\n+    if (ud->max_match_id < (int)match.id) {",
            "html_url": "https://github.com/neovim/neovim/pull/27274#discussion_r1473353601",
            "id": 1473353601,
            "in_reply_to_id": 1473335027,
            "line": 1441,
            "node_id": "PRRC_kwDOAPphoM5X0ZeB",
            "original_commit_id": "f1734aa02658cbcba58bfbfc7e56e639732f10ce",
            "original_line": 1441,
            "original_position": 81,
            "original_start_line": null,
            "path": "src/nvim/lua/treesitter.c",
            "position": 81,
            "pull_request_review_id": 1854643391,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27274",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1473353601/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-31T19:18:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1473353601",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27274#discussion_r1473390817"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27274"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1473390817"
                }
            },
            "author_association": "MEMBER",
            "body": "That's what I also assumed, but with this assertion included I can consistently crash my built nvim in a real-world use. CI tests are also red. Will have to find a repro and add it to test.\r\n\r\nDocumentation in the header file also mentions:\r\n\r\n> Because multiple patterns can match the same set of nodes, one match may contain captures that appear *before* some of the captures from a previous match\r\n\r\nso I guess this is when, for example, there are multiple (even duplicate) patterns with multiple captures matching on the exact same set of nodes.",
            "commit_id": "f1734aa02658cbcba58bfbfc7e56e639732f10ce",
            "created_at": "2024-01-31T19:53:31Z",
            "diff_hunk": "@@ -1411,26 +1420,44 @@ static int query_next_capture(lua_State *L)\n     push_node(L, capture.node, lua_upvalueindex(2));  // [index, node]\n \n     // Now check if we need to run the predicates\n+    // a predicate is executed only once within the same match.\n     uint32_t n_pred;\n     ts_query_predicates_for_pattern(query, match.pattern_index, &n_pred);\n \n-    if (n_pred > 0 && (ud->max_match_id < (int)match.id)) {\n+    if (n_pred == 0) {\n+      // No predicates. Return without the match table as a small perf optimization,\n+      // because in the iter_captures() method, match table won't be needed.\n+      // [index, node]\n+      return 2;\n+    }\n+\n+    // A new match is found. the use of `max_match_id` assumed that `ts_query_cursor_next_capture()`\n+    // would enumerate captures in the order that \"match\"es increases monotonoically.\n+    // The `ts_query_cursor_next_capture()` would enumerate captures in the order they are found.\n+    // TODO(wookayin): However, this is not guaranteed, and indeed assertion fails.\n+    // Therefore, when matches are alternating, the information about if predicate is active\n+    // won't be maintained, which can still lead to incorrect behavior of predicates.\n+    assert(ud->max_match_id <= (int)match.id);\n+    if (ud->max_match_id < (int)match.id) {",
            "html_url": "https://github.com/neovim/neovim/pull/27274#discussion_r1473390817",
            "id": 1473390817,
            "in_reply_to_id": 1473335027,
            "line": 1441,
            "node_id": "PRRC_kwDOAPphoM5X0ijh",
            "original_commit_id": "f1734aa02658cbcba58bfbfc7e56e639732f10ce",
            "original_line": 1441,
            "original_position": 81,
            "original_start_line": null,
            "path": "src/nvim/lua/treesitter.c",
            "position": 81,
            "pull_request_review_id": 1854708975,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27274",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1473390817/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-31T19:56:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1473390817",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27274#discussion_r1490728343"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27274"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490728343"
                }
            },
            "author_association": "MEMBER",
            "body": "Note for myself: I'm now thinking about a new idea of adding an explicit method to the table `TSMatch` (owned by C code):\r\n\r\n`match:nodes(capture_id) -> TSNode[]`, returns the *list* of captured nodes (#24738) for a capture index.\r\n\r\nI'm not yet sure this would be the best design for this PR and #24738, but some benefit of this would be:\r\n\r\n- We can have backward compatibility without a breaking change in #24738; `match[integer]` can still return the last TSNode (which can eventually be deprecated).\r\n- `set_match()` can be executed lazily: the captured nodes entries could be filled in only when requested, possibly leading to some performance gain. Many of the captures would not have a predicate, in which `match:nodes(...)` or `match[integer]` won't be called.\r\n- Therefore even if matches are alternating, we don't have to call `set_match()` again in most of the cases.\r\n\r\nNote:\r\n\r\n- Might need to define `__pairs` in the metatable to make `for capture_id, node in pairs(match)` work correctly and same as before without breaking change.\r\n- Do not rely on object identity (i.e. whether are same table instance) to test identity of a match. We can add a new field like `match.id`.",
            "commit_id": "f1734aa02658cbcba58bfbfc7e56e639732f10ce",
            "created_at": "2024-02-15T09:51:05Z",
            "diff_hunk": "@@ -1375,13 +1379,17 @@ static int query_next_match(lua_State *L)\n   TSQueryMatch match;\n   if (ts_query_cursor_next_match(cursor, &match)) {\n     lua_pushinteger(L, match.pattern_index + 1);  // [index]\n+    // match: TSMatch = { [integer]: TSNode }",
            "html_url": "https://github.com/neovim/neovim/pull/27274#discussion_r1490728343",
            "id": 1490728343,
            "line": 1382,
            "node_id": "PRRC_kwDOAPphoM5Y2rWX",
            "original_commit_id": "f1734aa02658cbcba58bfbfc7e56e639732f10ce",
            "original_line": 1382,
            "original_position": 36,
            "original_start_line": null,
            "path": "src/nvim/lua/treesitter.c",
            "position": 36,
            "pull_request_review_id": 1882295727,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27274",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490728343/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-15T09:53:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1490728343",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "I have two test cases written while I was working on this, one to address #23664 and one to ensure that predicates are only evaluated once per match (this is an assumption of the implementation now but is not tested anywhere).\r\n\r\n```diff\r\ndiff --git a/test/functional/treesitter/query_spec.lua b/test/functional/treesitter/query_spec.lua\r\nnew file mode 100644\r\nindex 000000000..681538ca8\r\n--- /dev/null\r\n+++ b/test/functional/treesitter/query_spec.lua\r\n@@ -0,0 +1,83 @@\r\n+local helpers = require('test.functional.helpers')(after_each)\r\n+\r\n+local clear = helpers.clear\r\n+local insert = helpers.insert\r\n+local exec_lua = helpers.exec_lua\r\n+local eq = helpers.eq\r\n+\r\n+before_each(clear)\r\n+\r\n+describe('Query:iter_captures', function()\r\n+  it('includes metadata for all captured nodes #23664', function()\r\n+    insert([[\r\n+      const char *sql = \"SELECT * FROM Students WHERE name = 'Robert'); DROP TABLE Students;--\";\r\n+    ]])\r\n+\r\n+    local query = [[\r\n+      (declaration\r\n+        type: (_)\r\n+        declarator: (init_declarator\r\n+          declarator: (pointer_declarator\r\n+            declarator: (identifier)) @_id\r\n+          value: (string_literal\r\n+            (string_content) @injection.content))\r\n+        (#set! injection.language \"sql\")\r\n+        (#contains? @_id \"sql\"))\r\n+    ]]\r\n+\r\n+    local result = exec_lua([[\r\n+      local injections = vim.treesitter.query.parse(\"c\", ...)\r\n+\r\n+      local parser = vim.treesitter.get_parser(0, \"c\")\r\n+      local root = parser:parse()[1]:root()\r\n+\r\n+      local t = {}\r\n+      for id, node, metadata in injections:iter_captures(root, 0) do\r\n+        t[id] = metadata\r\n+      end\r\n+      return t\r\n+    ]], query)\r\n+\r\n+    eq({\r\n+      [1] = { ['injection.language'] = 'sql' },\r\n+      [2] = { ['injection.language'] = 'sql' },\r\n+    }, result)\r\n+  end)\r\n+\r\n+  it('only evaluates predicates once per match', function()\r\n+    insert([[\r\n+      void foo(int x, int y);\r\n+    ]])\r\n+    local query = [[\r\n+      (declaration\r\n+        type: (_)\r\n+        declarator: (function_declarator\r\n+          declarator: (identifier) @function.name\r\n+          parameters: (parameter_list\r\n+            (parameter_declaration\r\n+              type: (_)\r\n+              declarator: (identifier) @argument)))\r\n+        (#eq? @function.name \"foo\"))\r\n+    ]]\r\n+\r\n+    local result = exec_lua([[\r\n+      local query = vim.treesitter.query.parse(\"c\", ...)\r\n+      local match_preds = query.match_preds\r\n+      local called = 0\r\n+      function query:match_preds(...)\r\n+        called = called + 1\r\n+        return match_preds(self, ...)\r\n+      end\r\n+\r\n+      local parser = vim.treesitter.get_parser(0, \"c\")\r\n+      local root = parser:parse()[1]:root()\r\n+      local captures = {}\r\n+      for id, node in query:iter_captures(root, 0) do\r\n+        captures[#captures + 1] = id\r\n+      end\r\n+      return { called, captures }\r\n+    ]], query)\r\n+\r\n+    eq({ 1, { 1, 1, 2, 2 } }, result)\r\n+  end)\r\n+end)\r\n```",
            "created_at": "2024-01-31T16:38:21Z",
            "html_url": "https://github.com/neovim/neovim/pull/27274#issuecomment-1919481066",
            "id": 1919481066,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27274",
            "node_id": "IC_kwDOAPphoM5yaPTq",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1919481066/reactions"
            },
            "updated_at": "2024-01-31T16:38:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1919481066",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/27274/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/27274/commits",
    "created_at": "2024-01-31T06:30:42Z",
    "diff_url": "https://github.com/neovim/neovim/pull/27274.diff",
    "draft": true,
    "head": {
        "label": "wookayin:ts/fix-capture",
        "ref": "ts/fix-capture",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/wookayin/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/wookayin/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/wookayin/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/wookayin/neovim/branches{/branch}",
            "clone_url": "https://github.com/wookayin/neovim.git",
            "collaborators_url": "https://api.github.com/repos/wookayin/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/wookayin/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/wookayin/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/wookayin/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/wookayin/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/wookayin/neovim/contributors",
            "created_at": "2022-10-30T19:40:29Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/wookayin/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/wookayin/neovim/downloads",
            "events_url": "https://api.github.com/repos/wookayin/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/wookayin/neovim/forks",
            "full_name": "wookayin/neovim",
            "git_commits_url": "https://api.github.com/repos/wookayin/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/wookayin/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/wookayin/neovim/git/tags{/sha}",
            "git_url": "git://github.com/wookayin/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/wookayin/neovim/hooks",
            "html_url": "https://github.com/wookayin/neovim",
            "id": 559659867,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/wookayin/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/wookayin/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/wookayin/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/wookayin/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/wookayin/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/wookayin/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/wookayin/neovim/merges",
            "milestones_url": "https://api.github.com/repos/wookayin/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOIVu7Ww",
            "notifications_url": "https://api.github.com/repos/wookayin/neovim/notifications{?since,all,participating}",
            "open_issues": 1,
            "open_issues_count": 1,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/wookayin/neovim/pulls{/number}",
            "pushed_at": "2024-02-19T05:26:14Z",
            "releases_url": "https://api.github.com/repos/wookayin/neovim/releases{/id}",
            "size": 248390,
            "ssh_url": "git@github.com:wookayin/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/wookayin/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/wookayin/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/wookayin/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/wookayin/neovim/subscription",
            "svn_url": "https://github.com/wookayin/neovim",
            "tags_url": "https://api.github.com/repos/wookayin/neovim/tags",
            "teams_url": "https://api.github.com/repos/wookayin/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/wookayin/neovim/git/trees{/sha}",
            "updated_at": "2024-01-25T20:45:40Z",
            "url": "https://api.github.com/repos/wookayin/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "f1734aa02658cbcba58bfbfc7e56e639732f10ce",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
            "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
            "followers_url": "https://api.github.com/users/wookayin/followers",
            "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
            "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/wookayin",
            "id": 1009873,
            "login": "wookayin",
            "node_id": "MDQ6VXNlcjEwMDk4NzM=",
            "organizations_url": "https://api.github.com/users/wookayin/orgs",
            "received_events_url": "https://api.github.com/users/wookayin/received_events",
            "repos_url": "https://api.github.com/users/wookayin/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/wookayin"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/27274",
    "id": 1703437211,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27274",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "",
            "id": 1799626557,
            "name": "treesitter",
            "node_id": "MDU6TGFiZWwxNzk5NjI2NTU3",
            "url": "https://api.github.com/repos/neovim/neovim/labels/treesitter"
        }
    ],
    "locked": false,
    "merge_commit_sha": "9a30005e430229b6bd306a373cae46d2385bc1c8",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5liGOb",
    "number": 27274,
    "patch_url": "https://github.com/neovim/neovim/pull/27274.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/27274/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/f1734aa02658cbcba58bfbfc7e56e639732f10ce",
    "title": "fix(treesitter): make iter_captures() return a correct match table",
    "updated_at": "2024-02-15T09:51:06Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/27274",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
        "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
        "followers_url": "https://api.github.com/users/wookayin/followers",
        "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
        "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/wookayin",
        "id": 1009873,
        "login": "wookayin",
        "node_id": "MDQ6VXNlcjEwMDk4NzM=",
        "organizations_url": "https://api.github.com/users/wookayin/orgs",
        "received_events_url": "https://api.github.com/users/wookayin/received_events",
        "repos_url": "https://api.github.com/users/wookayin/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/wookayin"
    }
}