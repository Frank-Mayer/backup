{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/26917/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/26917/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/26917"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/26917"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/26917/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/26917"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/6a42c92752307c87bf34148b12658743255dc85d"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5503,
            "forks_count": 5503,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1768,
            "open_issues_count": 1768,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-07-22T23:20:44Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 279528,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 80265,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-07-23T01:47:00Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 80265,
            "watchers_count": 80265,
            "web_commit_signoff_required": false
        },
        "sha": "6a264e08974bcb1b91f891eb65ef374f350d2827",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "Problem:\r\n\r\n- `vim.system(...):wait(0)` was simply returning `nil` rather than a\r\n  valid `vim.SystemCompleted` object.\r\n\r\n- Upon timeout after `:wait(timeout)`, SIGKILL (9) would be sent instead\r\n  of SIGTERM (15) as in the case of `vim.system()` with `timeout` being\r\n  set in the `opts` table. It can be confusing to have different\r\n  behaviors (signals) here.\r\n\r\nSolution:\r\n\r\n- Document that `timeout` needs to be >= 1.\r\n\r\n  Even if an invalid timeout is given, wait for at least 1 milliseconds\r\n  so that the asynchronous `on_exit()` callback can be scheduled and\r\n  executed by the uv loop.\r\n\r\n- Always send SIGTERM when the process times out, for both use cases of\r\n  `timeout`.",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26917#discussion_r1443745549"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26917"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1443745549"
                }
            },
            "author_association": "MEMBER",
            "body": "The current behavior can be a bit confusing. Upon timeout w.r.t the `{timeout}` in `:wait(timeout)` signal is SIGKILL (9), and upon timeout w.r.t. the timeout given `opts = { timeout = ... }` signal is SIGKILL (15). Is this by design? How about we use the same signal (SIGTERM)? /cc @lewis6991 ",
            "commit_id": "6a42c92752307c87bf34148b12658743255dc85d",
            "created_at": "2024-01-06T12:36:29Z",
            "diff_hunk": "@@ -106,27 +106,29 @@ vim.log = {\n ---     and closed. Defaults to `false`.\n ---   - stdout: (boolean|function)\n ---     Handle output from stdout. When passed as a function must have the signature `fun(err: string, data: string)`.\n----     Defaults to `true`\n+---     Defaults to `true`.\n ---   - stderr: (boolean|function)\n ---     Handle output from stderr. When passed as a function must have the signature `fun(err: string, data: string)`.\n ---     Defaults to `true`.\n ---   - text: (boolean) Handle stdout and stderr as text. Replaces `\\r\\n` with `\\n`.\n----   - timeout: (integer) Run the command with a time limit. Upon timeout the process is sent the\n----     TERM signal (15) and the exit code is set to 124.\n+---   - timeout: (integer) Run the command with a time limit (given in milliseconds).\n+---     Upon timeout the process is sent the TERM signal (15) and the exit code is set to 124.\n ---   - detach: (boolean) If true, spawn the child process in a detached state - this will make it\n ---     a process group leader, and will effectively enable the child to keep running after the\n ---     parent exits. Note that the child process will still keep the parent's event loop alive\n ---     unless the parent process calls |uv.unref()| on the child's process handle.\n ---\n---- @param on_exit (function|nil) Called when subprocess exits. When provided, the command runs\n----   asynchronously. Receives SystemCompleted object, see return of SystemObj:wait().\n+--- @param on_exit fun(vim.SystemCompleted)|nil Called when subprocess exits. When provided, the\n+---           command runs asynchronously. Receives vim.SystemCompleted object, see return of\n+---           SystemObj:wait().\n ---\n --- @return vim.SystemObj Object with the fields:\n ---   - pid (integer) Process ID\n----   - wait (fun(timeout: integer|nil): SystemCompleted) Wait for the process to complete. Upon\n----     timeout the process is sent the KILL signal (9) and the exit code is set to 124. Cannot\n----     be called in |api-fast|.\n----     - SystemCompleted is an object with the fields:\n+---   - wait (fun(timeout: integer|nil): vim.SystemCompleted) Wait for the process to complete,\n+---     for {timeout} milliseconds (if {timeout} is given) or the timeout specified in {opts}.\n+---     Upon timeout the process is sent the KILL signal (9) and the exit code is set to 124.",
            "html_url": "https://github.com/neovim/neovim/pull/26917#discussion_r1443745549",
            "id": 1443745549,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5WDc8N",
            "original_commit_id": "9489811e1fdb36760d9d7b90d9f593d8dfd15bb6",
            "original_line": 128,
            "original_position": 33,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 1807431905,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26917",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1443745549/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-06T12:38:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1443745549",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26917#discussion_r1443745708"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26917"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1443745708"
                }
            },
            "author_association": "MEMBER",
            "body": "This also means that if SIGKILL didn't work (e.g. zombie process 🧟) `state.result` still can be `nil`. Raising with assert/error is one option to ensure the return type is always non-nil. TODO: decide the behavior on such an exceptional case.",
            "commit_id": "6a42c92752307c87bf34148b12658743255dc85d",
            "created_at": "2024-01-06T12:38:05Z",
            "diff_hunk": "@@ -87,19 +87,24 @@ end\n \n local MAX_TIMEOUT = 2 ^ 31\n \n---- @param timeout? integer\n+--- @param timeout? integer timeout (in milliseconds), must be >= 0.\n --- @return vim.SystemCompleted\n function SystemObj:wait(timeout)\n   local state = self._state\n \n-  local done = vim.wait(timeout or state.timeout or MAX_TIMEOUT, function()\n+  -- If timeout == 0, vim.wait() will return immediately and uv timer won't schedule on_exit()\n+  -- in which state.result will be set\n+  timeout = math.max(1, timeout or state.timeout or MAX_TIMEOUT)\n+\n+  local done = vim.wait(timeout, function()\n     return state.result ~= nil\n   end)\n \n   if not done then\n     -- Send sigkill since this cannot be caught\n     self:_timeout(SIG.KILL)\n-    vim.wait(timeout or state.timeout or MAX_TIMEOUT, function()\n+    -- wait a bit more until state.result is set\n+    vim.wait(timeout, function()\n       return state.result ~= nil\n     end)",
            "html_url": "https://github.com/neovim/neovim/pull/26917#discussion_r1443745708",
            "id": 1443745708,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5WDc-s",
            "original_commit_id": "9489811e1fdb36760d9d7b90d9f593d8dfd15bb6",
            "original_line": 109,
            "original_position": 26,
            "original_start_line": null,
            "path": "runtime/lua/vim/_system.lua",
            "position": null,
            "pull_request_review_id": 1807431905,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26917",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1443745708/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-06T13:22:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1443745708",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26917#discussion_r1458904527"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26917"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458904527"
                }
            },
            "author_association": "MEMBER",
            "body": "I think these might be the wrong way around. The `if not done` block is only there in case the call to `_timeout()` in `run()` is caught for whatever reason. But tbh, we should probably always just send `SIGTERM` on a timeout.\r\n\r\nI really can't remember why I did it this way.",
            "commit_id": "6a42c92752307c87bf34148b12658743255dc85d",
            "created_at": "2024-01-19T12:10:09Z",
            "diff_hunk": "@@ -106,27 +106,29 @@ vim.log = {\n ---     and closed. Defaults to `false`.\n ---   - stdout: (boolean|function)\n ---     Handle output from stdout. When passed as a function must have the signature `fun(err: string, data: string)`.\n----     Defaults to `true`\n+---     Defaults to `true`.\n ---   - stderr: (boolean|function)\n ---     Handle output from stderr. When passed as a function must have the signature `fun(err: string, data: string)`.\n ---     Defaults to `true`.\n ---   - text: (boolean) Handle stdout and stderr as text. Replaces `\\r\\n` with `\\n`.\n----   - timeout: (integer) Run the command with a time limit. Upon timeout the process is sent the\n----     TERM signal (15) and the exit code is set to 124.\n+---   - timeout: (integer) Run the command with a time limit (given in milliseconds).\n+---     Upon timeout the process is sent the TERM signal (15) and the exit code is set to 124.\n ---   - detach: (boolean) If true, spawn the child process in a detached state - this will make it\n ---     a process group leader, and will effectively enable the child to keep running after the\n ---     parent exits. Note that the child process will still keep the parent's event loop alive\n ---     unless the parent process calls |uv.unref()| on the child's process handle.\n ---\n---- @param on_exit (function|nil) Called when subprocess exits. When provided, the command runs\n----   asynchronously. Receives SystemCompleted object, see return of SystemObj:wait().\n+--- @param on_exit fun(vim.SystemCompleted)|nil Called when subprocess exits. When provided, the\n+---           command runs asynchronously. Receives vim.SystemCompleted object, see return of\n+---           SystemObj:wait().\n ---\n --- @return vim.SystemObj Object with the fields:\n ---   - pid (integer) Process ID\n----   - wait (fun(timeout: integer|nil): SystemCompleted) Wait for the process to complete. Upon\n----     timeout the process is sent the KILL signal (9) and the exit code is set to 124. Cannot\n----     be called in |api-fast|.\n----     - SystemCompleted is an object with the fields:\n+---   - wait (fun(timeout: integer|nil): vim.SystemCompleted) Wait for the process to complete,\n+---     for {timeout} milliseconds (if {timeout} is given) or the timeout specified in {opts}.\n+---     Upon timeout the process is sent the KILL signal (9) and the exit code is set to 124.",
            "html_url": "https://github.com/neovim/neovim/pull/26917#discussion_r1458904527",
            "id": 1458904527,
            "in_reply_to_id": 1443745549,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5W9R3P",
            "original_commit_id": "9489811e1fdb36760d9d7b90d9f593d8dfd15bb6",
            "original_line": 128,
            "original_position": 33,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 1832346423,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26917",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 1,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458904527/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-01-19T12:11:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1458904527",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26917#discussion_r1589842245"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26917"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1589842245"
                }
            },
            "author_association": "MEMBER",
            "body": "Since there appears to be no obvious and strong reason to use SIGKILL, I propose we always return `SIGTERM` (as Lewis has agreed) for the sake of consistency. Please see the latest commit.",
            "commit_id": "6a42c92752307c87bf34148b12658743255dc85d",
            "created_at": "2024-05-04T01:02:26Z",
            "diff_hunk": "@@ -106,27 +106,29 @@ vim.log = {\n ---     and closed. Defaults to `false`.\n ---   - stdout: (boolean|function)\n ---     Handle output from stdout. When passed as a function must have the signature `fun(err: string, data: string)`.\n----     Defaults to `true`\n+---     Defaults to `true`.\n ---   - stderr: (boolean|function)\n ---     Handle output from stderr. When passed as a function must have the signature `fun(err: string, data: string)`.\n ---     Defaults to `true`.\n ---   - text: (boolean) Handle stdout and stderr as text. Replaces `\\r\\n` with `\\n`.\n----   - timeout: (integer) Run the command with a time limit. Upon timeout the process is sent the\n----     TERM signal (15) and the exit code is set to 124.\n+---   - timeout: (integer) Run the command with a time limit (given in milliseconds).\n+---     Upon timeout the process is sent the TERM signal (15) and the exit code is set to 124.\n ---   - detach: (boolean) If true, spawn the child process in a detached state - this will make it\n ---     a process group leader, and will effectively enable the child to keep running after the\n ---     parent exits. Note that the child process will still keep the parent's event loop alive\n ---     unless the parent process calls |uv.unref()| on the child's process handle.\n ---\n---- @param on_exit (function|nil) Called when subprocess exits. When provided, the command runs\n----   asynchronously. Receives SystemCompleted object, see return of SystemObj:wait().\n+--- @param on_exit fun(vim.SystemCompleted)|nil Called when subprocess exits. When provided, the\n+---           command runs asynchronously. Receives vim.SystemCompleted object, see return of\n+---           SystemObj:wait().\n ---\n --- @return vim.SystemObj Object with the fields:\n ---   - pid (integer) Process ID\n----   - wait (fun(timeout: integer|nil): SystemCompleted) Wait for the process to complete. Upon\n----     timeout the process is sent the KILL signal (9) and the exit code is set to 124. Cannot\n----     be called in |api-fast|.\n----     - SystemCompleted is an object with the fields:\n+---   - wait (fun(timeout: integer|nil): vim.SystemCompleted) Wait for the process to complete,\n+---     for {timeout} milliseconds (if {timeout} is given) or the timeout specified in {opts}.\n+---     Upon timeout the process is sent the KILL signal (9) and the exit code is set to 124.",
            "html_url": "https://github.com/neovim/neovim/pull/26917#discussion_r1589842245",
            "id": 1589842245,
            "in_reply_to_id": 1443745549,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ewxFF",
            "original_commit_id": "9489811e1fdb36760d9d7b90d9f593d8dfd15bb6",
            "original_line": 128,
            "original_position": 33,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2039181504,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26917",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1589842245/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-04T01:02:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1589842245",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26917#discussion_r1590836086"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26917"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1590836086"
                }
            },
            "author_association": "MEMBER",
            "body": "Off topic, why does it set code=124 on timeout, instead of `-1` (like `jobwait()`)? I assume that `-1` has less chance of conflicting with an exitcode emitted by the child.",
            "commit_id": "6a42c92752307c87bf34148b12658743255dc85d",
            "created_at": "2024-05-06T10:50:31Z",
            "diff_hunk": "@@ -1805,15 +1805,16 @@ vim.system({cmd}, {opts}, {on_exit})                            *vim.system()*\n         (`vim.SystemObj`) Object with the fields:\n         • cmd (string[]) Command name and args\n         • pid (integer) Process ID\n-        • wait (fun(timeout: integer|nil): SystemCompleted) Wait for the\n-          process to complete. Upon timeout the process is sent the KILL\n-          signal (9) and the exit code is set to 124. Cannot be called in\n-          |api-fast|.\n-          • SystemCompleted is an object with the fields:\n-            • code: (integer)\n-            • signal: (integer)\n-            • stdout: (string), nil if stdout argument is passed\n-            • stderr: (string), nil if stderr argument is passed\n+        • wait (fun(timeout: integer|nil): vim.SystemCompleted) Wait for the\n+          process to complete, for {timeout} milliseconds (if {timeout} is\n+          given) or the timeout specified in {opts}. Upon timeout the process\n+          is sent the TERM signal (15) and the exit code is set to 124. Cannot",
            "html_url": "https://github.com/neovim/neovim/pull/26917#discussion_r1590836086",
            "id": 1590836086,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5e0jt2",
            "original_commit_id": "91aa36cf109121cd10b2055812de4d566acee661",
            "original_line": 1811,
            "original_position": 36,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2040485965,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26917",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1590836086/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-06T10:50:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1590836086",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26917#discussion_r1590837170"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26917"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1590837170"
                }
            },
            "author_association": "MEMBER",
            "body": "what happened to the indentation?\r\n```suggestion\r\n          • vim.SystemCompleted is an object with the fields:\r\n            • code: (integer)\r\n```",
            "commit_id": "6a42c92752307c87bf34148b12658743255dc85d",
            "created_at": "2024-05-06T10:51:46Z",
            "diff_hunk": "@@ -1805,15 +1805,16 @@ vim.system({cmd}, {opts}, {on_exit})                            *vim.system()*\n         (`vim.SystemObj`) Object with the fields:\n         • cmd (string[]) Command name and args\n         • pid (integer) Process ID\n-        • wait (fun(timeout: integer|nil): SystemCompleted) Wait for the\n-          process to complete. Upon timeout the process is sent the KILL\n-          signal (9) and the exit code is set to 124. Cannot be called in\n-          |api-fast|.\n-          • SystemCompleted is an object with the fields:\n-            • code: (integer)\n-            • signal: (integer)\n-            • stdout: (string), nil if stdout argument is passed\n-            • stderr: (string), nil if stderr argument is passed\n+        • wait (fun(timeout: integer|nil): vim.SystemCompleted) Wait for the\n+          process to complete, for {timeout} milliseconds (if {timeout} is\n+          given) or the timeout specified in {opts}. Upon timeout the process\n+          is sent the TERM signal (15) and the exit code is set to 124. Cannot\n+          be called in |api-fast|.\n+          • vim.SystemCompleted is an object with the fields:\n+          • code: (integer)",
            "html_url": "https://github.com/neovim/neovim/pull/26917#discussion_r1590837170",
            "id": 1590837170,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5e0j-y",
            "original_commit_id": "91aa36cf109121cd10b2055812de4d566acee661",
            "original_line": 1814,
            "original_position": 39,
            "original_start_line": 1813,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2040487708,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26917",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1590837170/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-05-06T10:51:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1590837170",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26917#discussion_r1590838293"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26917"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1590838293"
                }
            },
            "author_association": "MEMBER",
            "body": "SIGTERM *can* be caught, so the comment needs an update?\r\n\r\nIf the process does not die after TERM, what happens? For `jobwait()`, we send TERM, then wait a few seconds, then send KILL: https://github.com/neovim/neovim/blob/5602f75b49d237fe6396eeee05007c341d74c66c/src/nvim/event/process.c#L250-L265",
            "commit_id": "6a42c92752307c87bf34148b12658743255dc85d",
            "created_at": "2024-05-06T10:53:13Z",
            "diff_hunk": "@@ -90,19 +90,24 @@ end\n \n local MAX_TIMEOUT = 2 ^ 31\n \n---- @param timeout? integer\n+--- @param timeout? integer timeout (in milliseconds), must be >= 0.\n --- @return vim.SystemCompleted\n function SystemObj:wait(timeout)\n   local state = self._state\n \n-  local done = vim.wait(timeout or state.timeout or MAX_TIMEOUT, function()\n+  -- If timeout == 0, vim.wait() will return immediately and uv timer won't schedule on_exit()\n+  -- in which state.result will be set\n+  timeout = math.max(1, timeout or state.timeout or MAX_TIMEOUT)\n+\n+  local done = vim.wait(timeout, function()\n     return state.result ~= nil\n   end, nil, true)\n \n   if not done then\n-    -- Send sigkill since this cannot be caught\n-    self:_timeout(SIG.KILL)\n-    vim.wait(timeout or state.timeout or MAX_TIMEOUT, function()\n+    -- Send SIGTERM since this cannot be caught\n+    self:_timeout(SIG.TERM)",
            "html_url": "https://github.com/neovim/neovim/pull/26917#discussion_r1590838293",
            "id": 1590838293,
            "line": 108,
            "node_id": "PRRC_kwDOAPphoM5e0kQV",
            "original_commit_id": "91aa36cf109121cd10b2055812de4d566acee661",
            "original_line": 108,
            "original_position": 24,
            "original_start_line": null,
            "path": "runtime/lua/vim/_system.lua",
            "position": 33,
            "pull_request_review_id": 2040489705,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26917",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1590838293/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-06T10:55:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1590838293",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26917#discussion_r1590853229"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26917"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1590853229"
                }
            },
            "author_association": "MEMBER",
            "body": "124 is the same exit code used by the `timeout` bash command which I think is a much better choice to `-1`.",
            "commit_id": "6a42c92752307c87bf34148b12658743255dc85d",
            "created_at": "2024-05-06T11:02:15Z",
            "diff_hunk": "@@ -1805,15 +1805,16 @@ vim.system({cmd}, {opts}, {on_exit})                            *vim.system()*\n         (`vim.SystemObj`) Object with the fields:\n         • cmd (string[]) Command name and args\n         • pid (integer) Process ID\n-        • wait (fun(timeout: integer|nil): SystemCompleted) Wait for the\n-          process to complete. Upon timeout the process is sent the KILL\n-          signal (9) and the exit code is set to 124. Cannot be called in\n-          |api-fast|.\n-          • SystemCompleted is an object with the fields:\n-            • code: (integer)\n-            • signal: (integer)\n-            • stdout: (string), nil if stdout argument is passed\n-            • stderr: (string), nil if stderr argument is passed\n+        • wait (fun(timeout: integer|nil): vim.SystemCompleted) Wait for the\n+          process to complete, for {timeout} milliseconds (if {timeout} is\n+          given) or the timeout specified in {opts}. Upon timeout the process\n+          is sent the TERM signal (15) and the exit code is set to 124. Cannot",
            "html_url": "https://github.com/neovim/neovim/pull/26917#discussion_r1590853229",
            "id": 1590853229,
            "in_reply_to_id": 1590836086,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5e0n5t",
            "original_commit_id": "91aa36cf109121cd10b2055812de4d566acee661",
            "original_line": 1811,
            "original_position": 36,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2040512170,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26917",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1590853229/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-06T11:02:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1590853229",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26917#discussion_r1590856410"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26917"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1590856410"
                }
            },
            "author_association": "MEMBER",
            "body": "Ah yes, this is why it was SIGKILL initially.",
            "commit_id": "6a42c92752307c87bf34148b12658743255dc85d",
            "created_at": "2024-05-06T11:03:12Z",
            "diff_hunk": "@@ -90,19 +90,24 @@ end\n \n local MAX_TIMEOUT = 2 ^ 31\n \n---- @param timeout? integer\n+--- @param timeout? integer timeout (in milliseconds), must be >= 0.\n --- @return vim.SystemCompleted\n function SystemObj:wait(timeout)\n   local state = self._state\n \n-  local done = vim.wait(timeout or state.timeout or MAX_TIMEOUT, function()\n+  -- If timeout == 0, vim.wait() will return immediately and uv timer won't schedule on_exit()\n+  -- in which state.result will be set\n+  timeout = math.max(1, timeout or state.timeout or MAX_TIMEOUT)\n+\n+  local done = vim.wait(timeout, function()\n     return state.result ~= nil\n   end, nil, true)\n \n   if not done then\n-    -- Send sigkill since this cannot be caught\n-    self:_timeout(SIG.KILL)\n-    vim.wait(timeout or state.timeout or MAX_TIMEOUT, function()\n+    -- Send SIGTERM since this cannot be caught\n+    self:_timeout(SIG.TERM)",
            "html_url": "https://github.com/neovim/neovim/pull/26917#discussion_r1590856410",
            "id": 1590856410,
            "in_reply_to_id": 1590838293,
            "line": 108,
            "node_id": "PRRC_kwDOAPphoM5e0ora",
            "original_commit_id": "91aa36cf109121cd10b2055812de4d566acee661",
            "original_line": 108,
            "original_position": 24,
            "original_start_line": null,
            "path": "runtime/lua/vim/_system.lua",
            "position": 33,
            "pull_request_review_id": 2040518409,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26917",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1590856410/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-06T11:03:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1590856410",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26917#discussion_r1591440845"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26917"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1591440845"
                }
            },
            "author_association": "MEMBER",
            "body": "Thanks, fixed; it was a mistake during resolving conflicts.",
            "commit_id": "6a42c92752307c87bf34148b12658743255dc85d",
            "created_at": "2024-05-06T19:08:27Z",
            "diff_hunk": "@@ -1805,15 +1805,16 @@ vim.system({cmd}, {opts}, {on_exit})                            *vim.system()*\n         (`vim.SystemObj`) Object with the fields:\n         • cmd (string[]) Command name and args\n         • pid (integer) Process ID\n-        • wait (fun(timeout: integer|nil): SystemCompleted) Wait for the\n-          process to complete. Upon timeout the process is sent the KILL\n-          signal (9) and the exit code is set to 124. Cannot be called in\n-          |api-fast|.\n-          • SystemCompleted is an object with the fields:\n-            • code: (integer)\n-            • signal: (integer)\n-            • stdout: (string), nil if stdout argument is passed\n-            • stderr: (string), nil if stderr argument is passed\n+        • wait (fun(timeout: integer|nil): vim.SystemCompleted) Wait for the\n+          process to complete, for {timeout} milliseconds (if {timeout} is\n+          given) or the timeout specified in {opts}. Upon timeout the process\n+          is sent the TERM signal (15) and the exit code is set to 124. Cannot\n+          be called in |api-fast|.\n+          • vim.SystemCompleted is an object with the fields:\n+          • code: (integer)",
            "html_url": "https://github.com/neovim/neovim/pull/26917#discussion_r1591440845",
            "id": 1591440845,
            "in_reply_to_id": 1590837170,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5e23XN",
            "original_commit_id": "91aa36cf109121cd10b2055812de4d566acee661",
            "original_line": 1814,
            "original_position": 39,
            "original_start_line": 1813,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2041485598,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26917",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1591440845/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-05-12T23:22:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1591440845",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26917#discussion_r1597738380"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26917"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1597738380"
                }
            },
            "author_association": "MEMBER",
            "body": "Updated the comment. It'd be even better if we can do additional check if the process won't terminate after SIGTERM and send SIGKILL, but handling this seems a bit complicated so we could address this in the future. This PR more would aim to make the behavior of `vim.system(cmd, { timeout = ... }):wait()` and `vim.system(...):wait(timeout)` consistent, as well as making it work well with `timeout = 0`.",
            "commit_id": "6a42c92752307c87bf34148b12658743255dc85d",
            "created_at": "2024-05-12T23:22:07Z",
            "diff_hunk": "@@ -90,19 +90,24 @@ end\n \n local MAX_TIMEOUT = 2 ^ 31\n \n---- @param timeout? integer\n+--- @param timeout? integer timeout (in milliseconds), must be >= 0.\n --- @return vim.SystemCompleted\n function SystemObj:wait(timeout)\n   local state = self._state\n \n-  local done = vim.wait(timeout or state.timeout or MAX_TIMEOUT, function()\n+  -- If timeout == 0, vim.wait() will return immediately and uv timer won't schedule on_exit()\n+  -- in which state.result will be set\n+  timeout = math.max(1, timeout or state.timeout or MAX_TIMEOUT)\n+\n+  local done = vim.wait(timeout, function()\n     return state.result ~= nil\n   end, nil, true)\n \n   if not done then\n-    -- Send sigkill since this cannot be caught\n-    self:_timeout(SIG.KILL)\n-    vim.wait(timeout or state.timeout or MAX_TIMEOUT, function()\n+    -- Send SIGTERM since this cannot be caught\n+    self:_timeout(SIG.TERM)",
            "html_url": "https://github.com/neovim/neovim/pull/26917#discussion_r1597738380",
            "id": 1597738380,
            "in_reply_to_id": 1590838293,
            "line": 108,
            "node_id": "PRRC_kwDOAPphoM5fO42M",
            "original_commit_id": "91aa36cf109121cd10b2055812de4d566acee661",
            "original_line": 108,
            "original_position": 24,
            "original_start_line": null,
            "path": "runtime/lua/vim/_system.lua",
            "position": 33,
            "pull_request_review_id": 2041485598,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26917",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1597738380/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-12T23:22:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1597738380",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26917#discussion_r1600072478"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26917"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1600072478"
                }
            },
            "author_association": "MEMBER",
            "body": "Should be strictly greater than 0 right? Since we apply `math.max` just below this, if a user puts `timeout = 0` they will be confused that the actual timeout is `1`, even though the docs say `0` is supported.\r\n\r\n```suggestion\r\n--- @param timeout? integer timeout (in milliseconds), must be > 0.\r\n```",
            "commit_id": "6a42c92752307c87bf34148b12658743255dc85d",
            "created_at": "2024-05-14T13:44:59Z",
            "diff_hunk": "@@ -90,19 +90,23 @@ end\n \n local MAX_TIMEOUT = 2 ^ 31\n \n---- @param timeout? integer\n+--- @param timeout? integer timeout (in milliseconds), must be >= 0.",
            "html_url": "https://github.com/neovim/neovim/pull/26917#discussion_r1600072478",
            "id": 1600072478,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5fXyse",
            "original_commit_id": "566a03cad89a404a404fb6e23ebb083e74a15034",
            "original_line": 93,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/_system.lua",
            "position": null,
            "pull_request_review_id": 2055428965,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26917",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1600072478/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-14T13:44:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1600072478",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26917#discussion_r1600228915"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26917"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1600228915"
                }
            },
            "author_association": "MEMBER",
            "body": "I agree that `wait(0)` or `wait(0.1)` (a possible common mistake) does not do anything useful or semantically meaningful -- it's to immediately terminate a process. Alternatively, we can choose to disallow `timeout < 1` (including values like 0 or 0.5), raising explicit errors.",
            "commit_id": "6a42c92752307c87bf34148b12658743255dc85d",
            "created_at": "2024-05-14T15:17:35Z",
            "diff_hunk": "@@ -90,19 +90,23 @@ end\n \n local MAX_TIMEOUT = 2 ^ 31\n \n---- @param timeout? integer\n+--- @param timeout? integer timeout (in milliseconds), must be >= 0.",
            "html_url": "https://github.com/neovim/neovim/pull/26917#discussion_r1600228915",
            "id": 1600228915,
            "in_reply_to_id": 1600072478,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5fYY4z",
            "original_commit_id": "566a03cad89a404a404fb6e23ebb083e74a15034",
            "original_line": 93,
            "original_position": 5,
            "original_start_line": null,
            "path": "runtime/lua/vim/_system.lua",
            "position": null,
            "pull_request_review_id": 2055724868,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26917",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1600228915/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-14T15:17:35Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1600228915",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26917#discussion_r1600308020"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26917"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1600308020"
                }
            },
            "author_association": "MEMBER",
            "body": "The docs say `timeout` should be `>= 1`, so what is the purpose of having a test for `timeout = 0`? A zero timeout is \"unspecified\" behavior according to our docs, so do we need a test?\r\n\r\nEventually (post 0.10) we may want to add some well-defined behavior for `timeout = 0` in which case this test would test for that specific behavior.",
            "commit_id": "6a42c92752307c87bf34148b12658743255dc85d",
            "created_at": "2024-05-14T16:10:49Z",
            "diff_hunk": "@@ -75,14 +75,38 @@ describe('vim.system', function()\n       it('supports timeout', function()\n         eq({\n           code = 124,\n-          signal = 15,\n+          signal = 15, -- SIGTERM\n           stdout = '',\n           stderr = '',\n         }, system({ 'sleep', '10' }, { timeout = 1000 }))\n       end)\n     end)\n   end\n \n+  it('supports timeout = 0', function()\n+    local ret\n+\n+    ret = exec_lua [[\n+      return vim.system({ 'sleep', '1' }, { timeout = 0 }):wait()\n+    ]] --[[ @as vim.SystemCompleted ]]\n+    eq({\n+      code = 124,\n+      signal = 15, -- SIGTERM\n+      stdout = '',\n+      stderr = '',\n+    }, ret)\n+\n+    ret = exec_lua [[\n+      return vim.system({ 'sleep', '1' }):wait(0)\n+    ]] --[[ @as vim.SystemCompleted ]]\n+    eq({\n+      code = 124,\n+      signal = 15, -- SIGTERM\n+      stdout = '',\n+      stderr = '',\n+    }, ret)\n+  end)\n+",
            "html_url": "https://github.com/neovim/neovim/pull/26917#discussion_r1600308020",
            "id": 1600308020,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5fYsM0",
            "original_commit_id": "0fa72f35dd2415aa8165449dbbd40d5b7e08cf34",
            "original_line": 97,
            "original_position": 36,
            "original_start_line": 86,
            "path": "test/functional/lua/system_spec.lua",
            "position": null,
            "pull_request_review_id": 2055853960,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26917",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1600308020/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-05-14T16:10:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1600308020",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26917#discussion_r1600344280"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26917"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1600344280"
                }
            },
            "author_association": "MEMBER",
            "body": "+1 Removed the test case and left some comment about the 'underspecified' behavior in the implementation.",
            "commit_id": "6a42c92752307c87bf34148b12658743255dc85d",
            "created_at": "2024-05-14T16:35:45Z",
            "diff_hunk": "@@ -75,14 +75,38 @@ describe('vim.system', function()\n       it('supports timeout', function()\n         eq({\n           code = 124,\n-          signal = 15,\n+          signal = 15, -- SIGTERM\n           stdout = '',\n           stderr = '',\n         }, system({ 'sleep', '10' }, { timeout = 1000 }))\n       end)\n     end)\n   end\n \n+  it('supports timeout = 0', function()\n+    local ret\n+\n+    ret = exec_lua [[\n+      return vim.system({ 'sleep', '1' }, { timeout = 0 }):wait()\n+    ]] --[[ @as vim.SystemCompleted ]]\n+    eq({\n+      code = 124,\n+      signal = 15, -- SIGTERM\n+      stdout = '',\n+      stderr = '',\n+    }, ret)\n+\n+    ret = exec_lua [[\n+      return vim.system({ 'sleep', '1' }):wait(0)\n+    ]] --[[ @as vim.SystemCompleted ]]\n+    eq({\n+      code = 124,\n+      signal = 15, -- SIGTERM\n+      stdout = '',\n+      stderr = '',\n+    }, ret)\n+  end)\n+",
            "html_url": "https://github.com/neovim/neovim/pull/26917#discussion_r1600344280",
            "id": 1600344280,
            "in_reply_to_id": 1600308020,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5fY1DY",
            "original_commit_id": "0fa72f35dd2415aa8165449dbbd40d5b7e08cf34",
            "original_line": 97,
            "original_position": 36,
            "original_start_line": 86,
            "path": "test/functional/lua/system_spec.lua",
            "position": null,
            "pull_request_review_id": 2055909726,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26917",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1600344280/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-05-14T16:35:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1600344280",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26917#discussion_r1600346559"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26917"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1600346559"
                }
            },
            "author_association": "MEMBER",
            "body": "Should mention that `timeout` must be `>= 1` here as well.",
            "commit_id": "6a42c92752307c87bf34148b12658743255dc85d",
            "created_at": "2024-05-14T16:37:42Z",
            "diff_hunk": "@@ -1780,15 +1780,15 @@ vim.system({cmd}, {opts}, {on_exit})                            *vim.system()*\n                      will be written to stdin and closed. Defaults to `false`.\n                    • stdout: (boolean|function) Handle output from stdout.\n                      When passed as a function must have the signature\n-                     `fun(err: string, data: string)`. Defaults to `true`\n+                     `fun(err: string, data: string)`. Defaults to `true`.\n                    • stderr: (boolean|function) Handle output from stderr.\n                      When passed as a function must have the signature\n                      `fun(err: string, data: string)`. Defaults to `true`.\n                    • text: (boolean) Handle stdout and stderr as text.\n                      Replaces `\\r\\n` with `\\n`.\n-                   • timeout: (integer) Run the command with a time limit.\n-                     Upon timeout the process is sent the TERM signal (15) and\n-                     the exit code is set to 124.\n+                   • timeout: (integer) Run the command with a time limit\n+                     (given in milliseconds). Upon timeout the process is sent\n+                     the TERM signal (15) and the exit code is set to 124.",
            "html_url": "https://github.com/neovim/neovim/pull/26917#discussion_r1600346559",
            "id": 1600346559,
            "line": 1791,
            "node_id": "PRRC_kwDOAPphoM5fY1m_",
            "original_commit_id": "629d2be2f8676db0dd6d1b76fc055e64392830b9",
            "original_line": 1791,
            "original_position": 16,
            "original_start_line": 1789,
            "path": "runtime/doc/lua.txt",
            "position": 16,
            "pull_request_review_id": 2055913446,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26917",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1600346559/reactions"
            },
            "side": "RIGHT",
            "start_line": 1789,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-05-14T16:37:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1600346559",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26917#discussion_r1600551004"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26917"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1600551004"
                }
            },
            "author_association": "MEMBER",
            "body": "What is needed to resolve this todo? Any reason we can't add `self:_timeout(SIG.KILL)` if the `vim.wait()` statement returns `false`?",
            "commit_id": "6a42c92752307c87bf34148b12658743255dc85d",
            "created_at": "2024-05-14T19:35:27Z",
            "diff_hunk": "@@ -90,21 +90,27 @@ end\n \n local MAX_TIMEOUT = 2 ^ 31\n \n---- @param timeout? integer\n+--- @param timeout? integer timeout (in milliseconds), must be >= 1.\n --- @return vim.SystemCompleted\n function SystemObj:wait(timeout)\n   local state = self._state\n \n-  local done = vim.wait(timeout or state.timeout or MAX_TIMEOUT, function()\n+  -- If timeout < 1, vim.wait() will return immediately and uv timer won't schedule on_exit(),\n+  -- in which state.result will be set. We don't exactly specify the behavior,\n+  -- but just terminate the process immediately for now\n+  timeout = math.max(1, timeout or state.timeout or MAX_TIMEOUT)\n+\n+  local done = vim.wait(timeout, function()\n     return state.result ~= nil\n   end, nil, true)\n \n   if not done then\n-    -- Send sigkill since this cannot be caught\n-    self:_timeout(SIG.KILL)\n-    vim.wait(timeout or state.timeout or MAX_TIMEOUT, function()\n+    self:_timeout(SIG.TERM)\n+    -- Wait a bit more until state.result is set after SIGTERM\n+    vim.wait(timeout, function()\n       return state.result ~= nil\n     end, nil, true)\n+    -- TODO: if the process still does not terminate after SIGTERM, send SIGKILL",
            "html_url": "https://github.com/neovim/neovim/pull/26917#discussion_r1600551004",
            "id": 1600551004,
            "line": 113,
            "node_id": "PRRC_kwDOAPphoM5fZnhc",
            "original_commit_id": "6a42c92752307c87bf34148b12658743255dc85d",
            "original_line": 113,
            "original_position": 38,
            "original_start_line": null,
            "path": "runtime/lua/vim/_system.lua",
            "position": 38,
            "pull_request_review_id": 2056244324,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26917",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1600551004/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-14T19:35:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1600551004",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26917#discussion_r1602429188"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26917"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1602429188"
                }
            },
            "author_association": "MEMBER",
            "body": "Nothing but writing reliable test cases.",
            "commit_id": "6a42c92752307c87bf34148b12658743255dc85d",
            "created_at": "2024-05-16T01:28:16Z",
            "diff_hunk": "@@ -90,21 +90,27 @@ end\n \n local MAX_TIMEOUT = 2 ^ 31\n \n---- @param timeout? integer\n+--- @param timeout? integer timeout (in milliseconds), must be >= 1.\n --- @return vim.SystemCompleted\n function SystemObj:wait(timeout)\n   local state = self._state\n \n-  local done = vim.wait(timeout or state.timeout or MAX_TIMEOUT, function()\n+  -- If timeout < 1, vim.wait() will return immediately and uv timer won't schedule on_exit(),\n+  -- in which state.result will be set. We don't exactly specify the behavior,\n+  -- but just terminate the process immediately for now\n+  timeout = math.max(1, timeout or state.timeout or MAX_TIMEOUT)\n+\n+  local done = vim.wait(timeout, function()\n     return state.result ~= nil\n   end, nil, true)\n \n   if not done then\n-    -- Send sigkill since this cannot be caught\n-    self:_timeout(SIG.KILL)\n-    vim.wait(timeout or state.timeout or MAX_TIMEOUT, function()\n+    self:_timeout(SIG.TERM)\n+    -- Wait a bit more until state.result is set after SIGTERM\n+    vim.wait(timeout, function()\n       return state.result ~= nil\n     end, nil, true)\n+    -- TODO: if the process still does not terminate after SIGTERM, send SIGKILL",
            "html_url": "https://github.com/neovim/neovim/pull/26917#discussion_r1602429188",
            "id": 1602429188,
            "in_reply_to_id": 1600551004,
            "line": 113,
            "node_id": "PRRC_kwDOAPphoM5fgyEE",
            "original_commit_id": "6a42c92752307c87bf34148b12658743255dc85d",
            "original_line": 113,
            "original_position": 38,
            "original_start_line": null,
            "path": "runtime/lua/vim/_system.lua",
            "position": 38,
            "pull_request_review_id": 2059310708,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26917",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1602429188/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-16T01:28:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1602429188",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "Do we still want this for 0.10 ?",
            "created_at": "2024-04-02T08:54:51Z",
            "html_url": "https://github.com/neovim/neovim/pull/26917#issuecomment-2031439411",
            "id": 2031439411,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26917",
            "node_id": "IC_kwDOAPphoM55FU4z",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2031439411/reactions"
            },
            "updated_at": "2024-04-02T08:54:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2031439411",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "It'd be great to include this in NVIM 0.10. I've rebased to the current master and added additional fixes per the discussion.",
            "created_at": "2024-05-04T01:02:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/26917#issuecomment-2093933047",
            "id": 2093933047,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26917",
            "node_id": "IC_kwDOAPphoM58zuH3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2093933047/reactions"
            },
            "updated_at": "2024-05-04T01:02:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2093933047",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@lewis6991 ",
            "created_at": "2024-05-04T08:27:14Z",
            "html_url": "https://github.com/neovim/neovim/pull/26917#issuecomment-2094077186",
            "id": 2094077186,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26917",
            "node_id": "IC_kwDOAPphoM580RUC",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2094077186/reactions"
            },
            "updated_at": "2024-05-04T08:27:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2094077186",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "It is really necessary to use at least 1 millisecond of timeout for both `vim.wait()` calls? Using that only for one of them isn't enough?",
            "created_at": "2024-05-06T09:08:17Z",
            "html_url": "https://github.com/neovim/neovim/pull/26917#issuecomment-2095515627",
            "id": 2095515627,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26917",
            "node_id": "IC_kwDOAPphoM585wfr",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2095515627/reactions"
            },
            "updated_at": "2024-05-06T09:08:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2095515627",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "In response to  @zeertzjq:\r\n\r\n> It is really necessary to use at least 1 millisecond of timeout for both `vim.wait()` calls? Using that only for one of them isn't enough?\r\n\r\nIn my testing, it is needed for both because the callback checks `state.result` but `state.result` changes only through the `_on_exit` handler. I believe losing only 1ms for such a rare case won't be a big deal.\r\n",
            "created_at": "2024-05-12T23:19:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/26917#issuecomment-2106406986",
            "id": 2106406986,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26917",
            "node_id": "IC_kwDOAPphoM59jThK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2106406986/reactions"
            },
            "updated_at": "2024-05-12T23:19:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2106406986",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "@wookayin do you want to add tests here? Would be nice to get it into 0.10.1.",
            "created_at": "2024-07-09T11:23:30Z",
            "html_url": "https://github.com/neovim/neovim/pull/26917#issuecomment-2217394853",
            "id": 2217394853,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26917",
            "node_id": "IC_kwDOAPphoM6EKsKl",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2217394853/reactions"
            },
            "updated_at": "2024-07-09T11:32:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2217394853",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/26917/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/26917/commits",
    "created_at": "2024-01-06T12:32:04Z",
    "diff_url": "https://github.com/neovim/neovim/pull/26917.diff",
    "draft": false,
    "head": {
        "label": "wookayin:system-timeout",
        "ref": "system-timeout",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/wookayin/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/wookayin/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/wookayin/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/wookayin/neovim/branches{/branch}",
            "clone_url": "https://github.com/wookayin/neovim.git",
            "collaborators_url": "https://api.github.com/repos/wookayin/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/wookayin/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/wookayin/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/wookayin/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/wookayin/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/wookayin/neovim/contributors",
            "created_at": "2022-10-30T19:40:29Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/wookayin/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/wookayin/neovim/downloads",
            "events_url": "https://api.github.com/repos/wookayin/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/wookayin/neovim/forks",
            "full_name": "wookayin/neovim",
            "git_commits_url": "https://api.github.com/repos/wookayin/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/wookayin/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/wookayin/neovim/git/tags{/sha}",
            "git_url": "git://github.com/wookayin/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/wookayin/neovim/hooks",
            "html_url": "https://github.com/wookayin/neovim",
            "id": 559659867,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/wookayin/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/wookayin/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/wookayin/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/wookayin/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/wookayin/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/wookayin/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/wookayin/neovim/merges",
            "milestones_url": "https://api.github.com/repos/wookayin/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOIVu7Ww",
            "notifications_url": "https://api.github.com/repos/wookayin/neovim/notifications{?since,all,participating}",
            "open_issues": 2,
            "open_issues_count": 2,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/wookayin/neovim/pulls{/number}",
            "pushed_at": "2024-07-22T05:28:46Z",
            "releases_url": "https://api.github.com/repos/wookayin/neovim/releases{/id}",
            "size": 266939,
            "ssh_url": "git@github.com:wookayin/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/wookayin/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/wookayin/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/wookayin/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/wookayin/neovim/subscription",
            "svn_url": "https://github.com/wookayin/neovim",
            "tags_url": "https://api.github.com/repos/wookayin/neovim/tags",
            "teams_url": "https://api.github.com/repos/wookayin/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/wookayin/neovim/git/trees{/sha}",
            "updated_at": "2024-05-23T03:26:44Z",
            "url": "https://api.github.com/repos/wookayin/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "6a42c92752307c87bf34148b12658743255dc85d",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
            "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
            "followers_url": "https://api.github.com/users/wookayin/followers",
            "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
            "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/wookayin",
            "id": 1009873,
            "login": "wookayin",
            "node_id": "MDQ6VXNlcjEwMDk4NzM=",
            "organizations_url": "https://api.github.com/users/wookayin/orgs",
            "received_events_url": "https://api.github.com/users/wookayin/received_events",
            "repos_url": "https://api.github.com/users/wookayin/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/wookayin"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/26917",
    "id": 1667303450,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26917",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "stdlib",
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        },
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 713599092,
            "name": "system",
            "node_id": "MDU6TGFiZWw3MTM1OTkwOTI=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/system"
        }
    ],
    "locked": false,
    "merge_commit_sha": "9de7362a6f454fc77b032d08b778566370223bd1",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5jYQga",
    "number": 26917,
    "patch_url": "https://github.com/neovim/neovim/pull/26917.patch",
    "requested_reviewers": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
            "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
            "followers_url": "https://api.github.com/users/lewis6991/followers",
            "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
            "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/lewis6991",
            "id": 7904185,
            "login": "lewis6991",
            "node_id": "MDQ6VXNlcjc5MDQxODU=",
            "organizations_url": "https://api.github.com/users/lewis6991/orgs",
            "received_events_url": "https://api.github.com/users/lewis6991/received_events",
            "repos_url": "https://api.github.com/users/lewis6991/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/lewis6991"
        },
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk"
        }
    ],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/26917/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/6a42c92752307c87bf34148b12658743255dc85d",
    "title": "fix(vim.system): wait() timeout, and signal being sent",
    "updated_at": "2024-07-16T08:40:15Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/26917",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
        "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
        "followers_url": "https://api.github.com/users/wookayin/followers",
        "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
        "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/wookayin",
        "id": 1009873,
        "login": "wookayin",
        "node_id": "MDQ6VXNlcjEwMDk4NzM=",
        "organizations_url": "https://api.github.com/users/wookayin/orgs",
        "received_events_url": "https://api.github.com/users/wookayin/received_events",
        "repos_url": "https://api.github.com/users/wookayin/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/wookayin"
    }
}