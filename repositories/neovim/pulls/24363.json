{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/24363/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/24363/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/24363"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/24363"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/24363/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/6e9b204afbe5f16c44a2697aed07aafff36bf856"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 4762,
            "forks_count": 4762,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1673,
            "open_issues_count": 1673,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2023-07-17T22:27:39Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 247442,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 67470,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2023-07-17T23:45:16Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 67470,
            "watchers_count": 67470,
            "web_commit_signoff_required": false
        },
        "sha": "d0d132fbd055834cbecb3d4e3a123a6ea8f099ec",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": null,
    "closed_at": "2023-07-17T16:40:14Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1264561282"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1264561282"
                }
            },
            "author_association": "MEMBER",
            "body": "If the impl is not in Lua we don't really need the separate modules. If we plan to add actual code to these modules then they shouldn't be in `_meta/`, right? \r\n\r\n- Can individual functions be marked `@meta` ?\r\n- I would just put most of these in normal (non-\"_meta\") modules.\r\n- Instead of `builtin.lua` and `misc.lua`, the oddballs could live in `_meta.lua` or `_editor.lua`? Because `builtin.lua` and `misc.lua` don't sound like meaningful names.\r\n\r\n```suggestion\r\n            'runtime/lua/vim/diff.lua',\r\n            'runtime/lua/vim/mpack.lua',\r\n            'runtime/lua/vim/json.lua',\r\n            'runtime/lua/vim/spell.lua',\r\n```",
            "commit_id": "6e9b204afbe5f16c44a2697aed07aafff36bf856",
            "created_at": "2023-07-15T21:09:38Z",
            "diff_hunk": "@@ -169,6 +175,12 @@\n             'runtime/lua/vim/secure.lua',\n             'runtime/lua/vim/version.lua',\n             'runtime/lua/vim/_inspector.lua',\n+            'runtime/lua/vim/_meta/builtin.lua',\n+            'runtime/lua/vim/_meta/diff.lua',\n+            'runtime/lua/vim/_meta/mpack.lua',\n+            'runtime/lua/vim/_meta/json.lua',\n+            'runtime/lua/vim/_meta/misc.lua',\n+            'runtime/lua/vim/_meta/spell.lua',",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1264561282",
            "id": 1264561282,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5LX6yC",
            "original_commit_id": "39dd577d21fa55072613ff915764e97744120a41",
            "original_line": 189,
            "original_position": 22,
            "original_start_line": 178,
            "path": "scripts/gen_vimdoc.py",
            "position": null,
            "pull_request_review_id": 1531618884,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1264561282/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-07-15T21:10:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1264561282",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1264562583"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1264562583"
                }
            },
            "author_association": "MEMBER",
            "body": "These modules are marked with the `@meta` annotation so they shouldn't ever contain any impls. The main motivation is to provide type information for these functions instead of relying on neodev.\n\nI've only put these into separate files as that's the only way I could get the sections in lua.txt, as they were before. Is there another way to achieve this?\n\n> Can individual functions be marked @meta ?\n\nNo. LuaLs only supports it for entire files.\n\n> I would just put most of these in normal (non-\"_meta\") modules.\n\nWhy? They wouldn't serve any purpose. These files only exist to feed tooling and our doc gen. Including them in files that get loaded does come with a cost.\n\n> Instead of builtin.lua and misc.lua, the oddballs could live in _meta.lua or _editor.lua? Because builtin.lua and misc.lua don't sound like meaningful names.\n\nYeah, still working in the specifics of those. gen_vimdoc.py will probably need some changes to get the desired output. There's still quite a bit of massaging  to be done.\n\nThis is only the beginning btw. At some point I also want to add types for vim.api and vim.fn.",
            "commit_id": "6e9b204afbe5f16c44a2697aed07aafff36bf856",
            "created_at": "2023-07-15T21:24:03Z",
            "diff_hunk": "@@ -169,6 +175,12 @@\n             'runtime/lua/vim/secure.lua',\n             'runtime/lua/vim/version.lua',\n             'runtime/lua/vim/_inspector.lua',\n+            'runtime/lua/vim/_meta/builtin.lua',\n+            'runtime/lua/vim/_meta/diff.lua',\n+            'runtime/lua/vim/_meta/mpack.lua',\n+            'runtime/lua/vim/_meta/json.lua',\n+            'runtime/lua/vim/_meta/misc.lua',\n+            'runtime/lua/vim/_meta/spell.lua',",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1264562583",
            "id": 1264562583,
            "in_reply_to_id": 1264561282,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5LX7GX",
            "original_commit_id": "39dd577d21fa55072613ff915764e97744120a41",
            "original_line": 189,
            "original_position": 22,
            "original_start_line": 178,
            "path": "scripts/gen_vimdoc.py",
            "position": null,
            "pull_request_review_id": 1531619765,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1264562583/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-07-15T21:31:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1264562583",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1264575110"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1264575110"
                }
            },
            "author_association": "MEMBER",
            "body": "> I've only put these into separate files as that's the only way I could get the sections in lua.txt, as they were before. Is there another way to achieve this?\r\n\r\nNot really.\r\n\r\n>> I would just put most of these in normal (non-\"_meta\") modules.\r\n> \r\n> Why? ...  Including them in files that get loaded does come with a cost.\r\n\r\nI was thinking we might add Lua impl stuff in some of these files potentially. But, didn't know these meta files are ignored by the loader somewhere.\r\n\r\nNot a blocker anyways, this PR is a nice gain.",
            "commit_id": "6e9b204afbe5f16c44a2697aed07aafff36bf856",
            "created_at": "2023-07-15T21:51:12Z",
            "diff_hunk": "@@ -169,6 +175,12 @@\n             'runtime/lua/vim/secure.lua',\n             'runtime/lua/vim/version.lua',\n             'runtime/lua/vim/_inspector.lua',\n+            'runtime/lua/vim/_meta/builtin.lua',\n+            'runtime/lua/vim/_meta/diff.lua',\n+            'runtime/lua/vim/_meta/mpack.lua',\n+            'runtime/lua/vim/_meta/json.lua',\n+            'runtime/lua/vim/_meta/misc.lua',\n+            'runtime/lua/vim/_meta/spell.lua',",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1264575110",
            "id": 1264575110,
            "in_reply_to_id": 1264561282,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5LX-KG",
            "original_commit_id": "39dd577d21fa55072613ff915764e97744120a41",
            "original_line": 189,
            "original_position": 22,
            "original_start_line": 178,
            "path": "scripts/gen_vimdoc.py",
            "position": null,
            "pull_request_review_id": 1531632037,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1264575110/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-07-15T21:51:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1264575110",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1264653818"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1264653818"
                }
            },
            "author_association": "MEMBER",
            "body": "I think we could drop this by now?",
            "commit_id": "6e9b204afbe5f16c44a2697aed07aafff36bf856",
            "created_at": "2023-07-16T10:09:08Z",
            "diff_hunk": "@@ -2871,6 +2814,72 @@ parents({start})                                            *vim.fs.parents()*\n         (function) Iterator\n \n \n+==============================================================================\n+Lua module: highlight                                          *lua-highlight*\n+\n+\n+Nvim includes a function for highlighting a selection on yank.\n+\n+To enable it, add the following to your `init.vim` : >vim\n+    au TextYankPost * silent! lua vim.highlight.on_yank()\n+<\n+\n+You can customize the highlight group and the duration of the highlight\n+via: >vim\n+    au TextYankPost * silent! lua vim.highlight.on_yank {higroup=\"IncSearch\", timeout=150}\n+<\n+\n+If you want to exclude visual selections from highlighting on yank, use: >vim\n+    au TextYankPost * silent! lua vim.highlight.on_yank {on_visual=false}\n+<\n+\n+See https://github.com/machakann/vim-highlightedyank for example",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1264653818",
            "id": 1264653818,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5LYRX6",
            "original_commit_id": "9215fbec9bda967d3f9f4af8ee74a926d1eeade6",
            "original_line": 2836,
            "original_position": 87,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1531715363,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1264653818/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-16T10:09:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1264653818",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1264653947"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1264653947"
                }
            },
            "author_association": "MEMBER",
            "body": "Thank god, this is a pain to handle in doxygen.",
            "commit_id": "6e9b204afbe5f16c44a2697aed07aafff36bf856",
            "created_at": "2023-07-16T10:09:58Z",
            "diff_hunk": "@@ -2871,6 +2814,72 @@ parents({start})                                            *vim.fs.parents()*\n         (function) Iterator\n \n \n+==============================================================================\n+Lua module: highlight                                          *lua-highlight*\n+\n+\n+Nvim includes a function for highlighting a selection on yank.\n+\n+To enable it, add the following to your `init.vim` : >vim\n+    au TextYankPost * silent! lua vim.highlight.on_yank()\n+<\n+\n+You can customize the highlight group and the duration of the highlight\n+via: >vim\n+    au TextYankPost * silent! lua vim.highlight.on_yank {higroup=\"IncSearch\", timeout=150}\n+<\n+\n+If you want to exclude visual selections from highlighting on yank, use: >vim\n+    au TextYankPost * silent! lua vim.highlight.on_yank {on_visual=false}\n+<\n+\n+See https://github.com/machakann/vim-highlightedyank for example",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1264653947",
            "id": 1264653947,
            "in_reply_to_id": 1264653818,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5LYRZ7",
            "original_commit_id": "9215fbec9bda967d3f9f4af8ee74a926d1eeade6",
            "original_line": 2836,
            "original_position": 87,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 1531715470,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 1,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1264653947/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-16T10:09:58Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1264653947",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1264656214"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1264656214"
                }
            },
            "author_association": "MEMBER",
            "body": "Good change! I think `*vim.foo*` is more discoverable than `*lua-foo*` as well (which to me implies something about the language itself; this means we could repurpose `*lua-foo*` for `luaref.txt`, too, instead of the current `*luaref-foo*`).",
            "commit_id": "6e9b204afbe5f16c44a2697aed07aafff36bf856",
            "created_at": "2023-07-16T10:24:48Z",
            "diff_hunk": "@@ -191,7 +191,7 @@\n         'section_fmt': lambda name: (\n             'Lua module: vim'\n             if name.lower() == '_editor'\n-            else f'Lua module: {name.lower()}'),\n+            else f'Lua module: vim.{name.lower()}'),\n         'helptag_fmt': lambda name: (\n             '*lua-vim*'",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1264656214",
            "id": 1264656214,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5LYR9W",
            "original_commit_id": "efe0d5868d0559906d99563a8efcf2a5d9be60af",
            "original_line": 199,
            "original_position": 7,
            "original_start_line": null,
            "path": "scripts/gen_vimdoc.py",
            "position": null,
            "pull_request_review_id": 1531717759,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1264656214/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-16T10:24:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1264656214",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1265356842"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265356842"
                }
            },
            "author_association": "MEMBER",
            "body": "Not going to make that change?",
            "commit_id": "6e9b204afbe5f16c44a2697aed07aafff36bf856",
            "created_at": "2023-07-17T13:29:46Z",
            "diff_hunk": "@@ -191,7 +191,7 @@\n         'section_fmt': lambda name: (\n             'Lua module: vim'\n             if name.lower() == '_editor'\n-            else f'Lua module: {name.lower()}'),\n+            else f'Lua module: vim.{name.lower()}'),\n         'helptag_fmt': lambda name: (\n             '*lua-vim*'",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1265356842",
            "id": 1265356842,
            "in_reply_to_id": 1264656214,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5La9Aq",
            "original_commit_id": "efe0d5868d0559906d99563a8efcf2a5d9be60af",
            "original_line": 199,
            "original_position": 7,
            "original_start_line": null,
            "path": "scripts/gen_vimdoc.py",
            "position": null,
            "pull_request_review_id": 1532790705,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265356842/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-17T13:29:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265356842",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1265359582"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265359582"
                }
            },
            "author_association": "MEMBER",
            "body": "You mean to change all the tags from `*lua-foo*` to `*vim-foo*`? The change you commented on just changes the headings from `Lua module: foo` to `Lua module: vim.foo`.",
            "commit_id": "6e9b204afbe5f16c44a2697aed07aafff36bf856",
            "created_at": "2023-07-17T13:31:47Z",
            "diff_hunk": "@@ -191,7 +191,7 @@\n         'section_fmt': lambda name: (\n             'Lua module: vim'\n             if name.lower() == '_editor'\n-            else f'Lua module: {name.lower()}'),\n+            else f'Lua module: vim.{name.lower()}'),\n         'helptag_fmt': lambda name: (\n             '*lua-vim*'",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1265359582",
            "id": 1265359582,
            "in_reply_to_id": 1264656214,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5La9re",
            "original_commit_id": "efe0d5868d0559906d99563a8efcf2a5d9be60af",
            "original_line": 199,
            "original_position": 7,
            "original_start_line": null,
            "path": "scripts/gen_vimdoc.py",
            "position": null,
            "pull_request_review_id": 1532795687,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265359582/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-17T13:31:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265359582",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1265364176"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265364176"
                }
            },
            "author_association": "MEMBER",
            "body": "This isn't ideal.\r\n\r\nI tried special casing this so method exclude the `vim.` prefix, but that causes the functions to be moved far away from `vim.ringbuf`. Either:\r\n\r\n- `vim.ringbuf` goes in its own module\r\n- We remove `vim.` from all functions",
            "commit_id": "6e9b204afbe5f16c44a2697aed07aafff36bf856",
            "created_at": "2023-07-17T13:35:15Z",
            "diff_hunk": "@@ -1888,28 +1983,28 @@ ringbuf({size})                                                *vim.ringbuf()*\n     Return: ~\n         (table)\n \n-Ringbuf:clear({self})                                        *Ringbuf:clear()*\n+vim.Ringbuf:clear()                                          *Ringbuf:clear()*",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1265364176",
            "id": 1265364176,
            "line": 1984,
            "node_id": "PRRC_kwDOAPphoM5La-zQ",
            "original_commit_id": "f7ffbcfedb36505f5dbb2c3848a683b8bd9ce304",
            "original_line": 1985,
            "original_position": 1307,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 1307,
            "pull_request_review_id": 1532802743,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265364176/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-17T13:35:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265364176",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1265364781"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265364781"
                }
            },
            "author_association": "MEMBER",
            "body": "Cheap trick to stop gen_vimdoc.py from strip whitespace on sections.",
            "commit_id": "6e9b204afbe5f16c44a2697aed07aafff36bf856",
            "created_at": "2023-07-17T13:35:42Z",
            "diff_hunk": "@@ -1192,13 +1279,10 @@ vim.wo[{winid}][{bufnr}]                                                       *\n         vim.wo[winid][0].spell = false -- like ':setlocal nospell'\n <\n \n-\n-\n-                                                                        *vim.opt_local*\n+` `                                                                       *vim.opt_local*",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1265364781",
            "id": 1265364781,
            "line": 1280,
            "node_id": "PRRC_kwDOAPphoM5La-8t",
            "original_commit_id": "f7ffbcfedb36505f5dbb2c3848a683b8bd9ce304",
            "original_line": 1281,
            "original_position": 907,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 907,
            "pull_request_review_id": 1532803670,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 2,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265364781/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-17T13:35:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265364781",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1265366644"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265366644"
                }
            },
            "author_association": "MEMBER",
            "body": "My comment was actually on line 196 (last line); sorry for not being clear. The suggestion is changing all the tags from `lua-foo` to `vim.foo`.",
            "commit_id": "6e9b204afbe5f16c44a2697aed07aafff36bf856",
            "created_at": "2023-07-17T13:36:54Z",
            "diff_hunk": "@@ -191,7 +191,7 @@\n         'section_fmt': lambda name: (\n             'Lua module: vim'\n             if name.lower() == '_editor'\n-            else f'Lua module: {name.lower()}'),\n+            else f'Lua module: vim.{name.lower()}'),\n         'helptag_fmt': lambda name: (\n             '*lua-vim*'",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1265366644",
            "id": 1265366644,
            "in_reply_to_id": 1264656214,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5La_Z0",
            "original_commit_id": "efe0d5868d0559906d99563a8efcf2a5d9be60af",
            "original_line": 199,
            "original_position": 7,
            "original_start_line": null,
            "path": "scripts/gen_vimdoc.py",
            "position": null,
            "pull_request_review_id": 1532806672,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265366644/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-17T13:36:55Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265366644",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1265395441"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265395441"
                }
            },
            "author_association": "MEMBER",
            "body": "I had a go but I'm having trouble with `@defgroup vim.highlight` working. Doxygen is treating `.` as a special character.",
            "commit_id": "6e9b204afbe5f16c44a2697aed07aafff36bf856",
            "created_at": "2023-07-17T13:51:08Z",
            "diff_hunk": "@@ -191,7 +191,7 @@\n         'section_fmt': lambda name: (\n             'Lua module: vim'\n             if name.lower() == '_editor'\n-            else f'Lua module: {name.lower()}'),\n+            else f'Lua module: vim.{name.lower()}'),\n         'helptag_fmt': lambda name: (\n             '*lua-vim*'",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1265395441",
            "id": 1265395441,
            "in_reply_to_id": 1264656214,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5LbGbx",
            "original_commit_id": "efe0d5868d0559906d99563a8efcf2a5d9be60af",
            "original_line": 199,
            "original_position": 7,
            "original_start_line": null,
            "path": "scripts/gen_vimdoc.py",
            "position": null,
            "pull_request_review_id": 1532849052,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265395441/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-17T13:51:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265395441",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1265397141"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265397141"
                }
            },
            "author_association": "MEMBER",
            "body": "Right. Then `vim-foo` indeed sounds like a good compromise (and doesn't clobber `vim.foo()`).",
            "commit_id": "6e9b204afbe5f16c44a2697aed07aafff36bf856",
            "created_at": "2023-07-17T13:52:25Z",
            "diff_hunk": "@@ -191,7 +191,7 @@\n         'section_fmt': lambda name: (\n             'Lua module: vim'\n             if name.lower() == '_editor'\n-            else f'Lua module: {name.lower()}'),\n+            else f'Lua module: vim.{name.lower()}'),\n         'helptag_fmt': lambda name: (\n             '*lua-vim*'",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1265397141",
            "id": 1265397141,
            "in_reply_to_id": 1264656214,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5LbG2V",
            "original_commit_id": "efe0d5868d0559906d99563a8efcf2a5d9be60af",
            "original_line": 199,
            "original_position": 7,
            "original_start_line": null,
            "path": "scripts/gen_vimdoc.py",
            "position": null,
            "pull_request_review_id": 1532851811,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265397141/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-17T13:52:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265397141",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1265407307"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265407307"
                }
            },
            "author_association": "MEMBER",
            "body": "What about `vim-diff` and `vim_diff`?",
            "commit_id": "6e9b204afbe5f16c44a2697aed07aafff36bf856",
            "created_at": "2023-07-17T13:59:50Z",
            "diff_hunk": "@@ -191,7 +191,7 @@\n         'section_fmt': lambda name: (\n             'Lua module: vim'\n             if name.lower() == '_editor'\n-            else f'Lua module: {name.lower()}'),\n+            else f'Lua module: vim.{name.lower()}'),\n         'helptag_fmt': lambda name: (\n             '*lua-vim*'",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1265407307",
            "id": 1265407307,
            "in_reply_to_id": 1264656214,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5LbJVL",
            "original_commit_id": "efe0d5868d0559906d99563a8efcf2a5d9be60af",
            "original_line": 199,
            "original_position": 7,
            "original_start_line": null,
            "path": "scripts/gen_vimdoc.py",
            "position": null,
            "pull_request_review_id": 1532868060,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265407307/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-17T13:59:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265407307",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1265423636"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265423636"
                }
            },
            "author_association": "MEMBER",
            "body": "Could be acceptable? (It's `vim-differences`, so you just need one character more for the `vim_diff.txt` heading.)",
            "commit_id": "6e9b204afbe5f16c44a2697aed07aafff36bf856",
            "created_at": "2023-07-17T14:07:49Z",
            "diff_hunk": "@@ -191,7 +191,7 @@\n         'section_fmt': lambda name: (\n             'Lua module: vim'\n             if name.lower() == '_editor'\n-            else f'Lua module: {name.lower()}'),\n+            else f'Lua module: vim.{name.lower()}'),\n         'helptag_fmt': lambda name: (\n             '*lua-vim*'",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1265423636",
            "id": 1265423636,
            "in_reply_to_id": 1264656214,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5LbNUU",
            "original_commit_id": "efe0d5868d0559906d99563a8efcf2a5d9be60af",
            "original_line": 199,
            "original_position": 7,
            "original_start_line": null,
            "path": "scripts/gen_vimdoc.py",
            "position": null,
            "pull_request_review_id": 1532895212,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265423636/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-17T14:07:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265423636",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1265427909"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265427909"
                }
            },
            "author_association": "MEMBER",
            "body": "Actually I've figured out the `@defgroup` thing. I mangle `vim.foo` to `vim-dot-foo` in `lua2dox.lua` to workaround doxygen.",
            "commit_id": "6e9b204afbe5f16c44a2697aed07aafff36bf856",
            "created_at": "2023-07-17T14:11:03Z",
            "diff_hunk": "@@ -191,7 +191,7 @@\n         'section_fmt': lambda name: (\n             'Lua module: vim'\n             if name.lower() == '_editor'\n-            else f'Lua module: {name.lower()}'),\n+            else f'Lua module: vim.{name.lower()}'),\n         'helptag_fmt': lambda name: (\n             '*lua-vim*'",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1265427909",
            "id": 1265427909,
            "in_reply_to_id": 1264656214,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5LbOXF",
            "original_commit_id": "efe0d5868d0559906d99563a8efcf2a5d9be60af",
            "original_line": 199,
            "original_position": 7,
            "original_start_line": null,
            "path": "scripts/gen_vimdoc.py",
            "position": null,
            "pull_request_review_id": 1532902047,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265427909/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-17T14:11:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265427909",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1265430228"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265430228"
                }
            },
            "author_association": "MEMBER",
            "body": "*ceterum censeo Doxygen esse delendam.*",
            "commit_id": "6e9b204afbe5f16c44a2697aed07aafff36bf856",
            "created_at": "2023-07-17T14:12:52Z",
            "diff_hunk": "@@ -191,7 +191,7 @@\n         'section_fmt': lambda name: (\n             'Lua module: vim'\n             if name.lower() == '_editor'\n-            else f'Lua module: {name.lower()}'),\n+            else f'Lua module: vim.{name.lower()}'),\n         'helptag_fmt': lambda name: (\n             '*lua-vim*'",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1265430228",
            "id": 1265430228,
            "in_reply_to_id": 1264656214,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5LbO7U",
            "original_commit_id": "efe0d5868d0559906d99563a8efcf2a5d9be60af",
            "original_line": 199,
            "original_position": 7,
            "original_start_line": null,
            "path": "scripts/gen_vimdoc.py",
            "position": null,
            "pull_request_review_id": 1532906162,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265430228/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-17T14:12:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265430228",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1265437953"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265437953"
                }
            },
            "author_association": "MEMBER",
            "body": "(Do you want to make the `luaref-` -> `lua-` change in `luaref.txt` in this PR, too?)",
            "commit_id": "6e9b204afbe5f16c44a2697aed07aafff36bf856",
            "created_at": "2023-07-17T14:17:45Z",
            "diff_hunk": "@@ -191,7 +191,7 @@\n         'section_fmt': lambda name: (\n             'Lua module: vim'\n             if name.lower() == '_editor'\n-            else f'Lua module: {name.lower()}'),\n+            else f'Lua module: vim.{name.lower()}'),\n         'helptag_fmt': lambda name: (\n             '*lua-vim*'",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1265437953",
            "id": 1265437953,
            "in_reply_to_id": 1264656214,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5LbQ0B",
            "original_commit_id": "efe0d5868d0559906d99563a8efcf2a5d9be60af",
            "original_line": 199,
            "original_position": 7,
            "original_start_line": null,
            "path": "scripts/gen_vimdoc.py",
            "position": null,
            "pull_request_review_id": 1532917804,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265437953/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-17T14:17:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265437953",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1265447303"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265447303"
                }
            },
            "author_association": "MEMBER",
            "body": "Ah, `vim.iter`, `vim.json`, and `vim.mpack` already have a manual workaround (tag in the `@brief`; can be removed now).",
            "commit_id": "6e9b204afbe5f16c44a2697aed07aafff36bf856",
            "created_at": "2023-07-17T14:24:21Z",
            "diff_hunk": "@@ -191,7 +191,7 @@\n         'section_fmt': lambda name: (\n             'Lua module: vim'\n             if name.lower() == '_editor'\n-            else f'Lua module: {name.lower()}'),\n+            else f'Lua module: vim.{name.lower()}'),\n         'helptag_fmt': lambda name: (\n             '*lua-vim*'",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1265447303",
            "id": 1265447303,
            "in_reply_to_id": 1264656214,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5LbTGH",
            "original_commit_id": "efe0d5868d0559906d99563a8efcf2a5d9be60af",
            "original_line": 199,
            "original_position": 7,
            "original_start_line": null,
            "path": "scripts/gen_vimdoc.py",
            "position": null,
            "pull_request_review_id": 1532932418,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265447303/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-17T14:24:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265447303",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1265448514"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265448514"
                }
            },
            "author_association": "MEMBER",
            "body": "> (Do you want to make the `luaref-` -> `lua-` change in `luaref.txt` in this PR, too?)\r\n\r\nWould prefer a separate PR unless there is some reason it needs to be entangled here",
            "commit_id": "6e9b204afbe5f16c44a2697aed07aafff36bf856",
            "created_at": "2023-07-17T14:25:14Z",
            "diff_hunk": "@@ -191,7 +191,7 @@\n         'section_fmt': lambda name: (\n             'Lua module: vim'\n             if name.lower() == '_editor'\n-            else f'Lua module: {name.lower()}'),\n+            else f'Lua module: vim.{name.lower()}'),\n         'helptag_fmt': lambda name: (\n             '*lua-vim*'",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1265448514",
            "id": 1265448514,
            "in_reply_to_id": 1264656214,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5LbTZC",
            "original_commit_id": "efe0d5868d0559906d99563a8efcf2a5d9be60af",
            "original_line": 199,
            "original_position": 7,
            "original_start_line": null,
            "path": "scripts/gen_vimdoc.py",
            "position": null,
            "pull_request_review_id": 1532934310,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265448514/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-17T14:25:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265448514",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1265451630"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265451630"
                }
            },
            "author_association": "MEMBER",
            "body": "> Either:\r\n> \r\n> * `vim.ringbuf` goes in its own module\r\n> * We remove `vim.` from all functions\r\n\r\nThe first option sounds much lower cost, for this one case. But does that mean all \"classes\" need to have dedicated modules? I hope not...",
            "commit_id": "6e9b204afbe5f16c44a2697aed07aafff36bf856",
            "created_at": "2023-07-17T14:27:21Z",
            "diff_hunk": "@@ -1888,28 +1983,28 @@ ringbuf({size})                                                *vim.ringbuf()*\n     Return: ~\n         (table)\n \n-Ringbuf:clear({self})                                        *Ringbuf:clear()*\n+vim.Ringbuf:clear()                                          *Ringbuf:clear()*",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1265451630",
            "id": 1265451630,
            "in_reply_to_id": 1265364176,
            "line": 1984,
            "node_id": "PRRC_kwDOAPphoM5LbUJu",
            "original_commit_id": "f7ffbcfedb36505f5dbb2c3848a683b8bd9ce304",
            "original_line": 1985,
            "original_position": 1307,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 1307,
            "pull_request_review_id": 1532939382,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265451630/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-17T14:27:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265451630",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1265452062"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265452062"
                }
            },
            "author_association": "MEMBER",
            "body": "No need, but as these commits won't be squashed completely and the change is quite simple, this ensures we (let's be honest, I) don't forget.",
            "commit_id": "6e9b204afbe5f16c44a2697aed07aafff36bf856",
            "created_at": "2023-07-17T14:27:39Z",
            "diff_hunk": "@@ -191,7 +191,7 @@\n         'section_fmt': lambda name: (\n             'Lua module: vim'\n             if name.lower() == '_editor'\n-            else f'Lua module: {name.lower()}'),\n+            else f'Lua module: vim.{name.lower()}'),\n         'helptag_fmt': lambda name: (\n             '*lua-vim*'",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1265452062",
            "id": 1265452062,
            "in_reply_to_id": 1264656214,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5LbUQe",
            "original_commit_id": "efe0d5868d0559906d99563a8efcf2a5d9be60af",
            "original_line": 199,
            "original_position": 7,
            "original_start_line": null,
            "path": "scripts/gen_vimdoc.py",
            "position": null,
            "pull_request_review_id": 1532940059,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265452062/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-17T14:27:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265452062",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1265476942"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265476942"
                }
            },
            "author_association": "MEMBER",
            "body": "the extra blank lines seem weird but can revisit later",
            "commit_id": "6e9b204afbe5f16c44a2697aed07aafff36bf856",
            "created_at": "2023-07-17T14:44:04Z",
            "diff_hunk": "@@ -621,151 +601,207 @@ vim.highlight.priorities                            *vim.highlight.priorities*\n         • `user`: `200`, used for user-triggered highlights such as LSP document\n           symbols or `on_yank` autocommands\n \n-------------------------------------------------------------------------------\n-VIM.REGEX                                                          *lua-regex*\n+vim.highlight.on_yank({opts})                        *vim.highlight.on_yank()*\n+    Highlight the yanked text\n+\n+    Parameters: ~\n+      • {opts}  (table|nil) Optional parameters\n+                • higroup highlight group for yanked region (default\n+                  \"IncSearch\")\n+                • timeout time in ms before highlight is cleared (default 150)\n+                • on_macro highlight when executing macro (default false)\n+                • on_visual highlight when yanking visual selection (default\n+                  true)\n+                • event event structure (default vim.v.event)\n+                • priority integer priority (default\n+                  |vim.highlight.priorities|`.user`)\n+\n+                                                       *vim.highlight.range()*\n+vim.highlight.range({bufnr}, {ns}, {higroup}, {start}, {finish}, {opts})\n+    Apply highlight group to range of text.\n+\n+    Parameters: ~\n+      • {bufnr}    (integer) Buffer number to apply highlighting to\n+      • {ns}       (integer) Namespace to add highlight to\n+      • {higroup}  (string) Highlight group to use for highlighting\n+      • {start}    integer[]|string Start of region as a (line, column) tuple\n+                   or string accepted by |getpos()|\n+      • {finish}   integer[]|string End of region as a (line, column) tuple or\n+                   string accepted by |getpos()|\n+      • {opts}     (table|nil) Optional parameters\n+                   • regtype type of range (see |setreg()|, default charwise)\n+                   • inclusive boolean indicating whether the range is\n+                     end-inclusive (default false)\n+                   • priority number indicating priority of highlight (default\n+                     priorities.user)\n+\n+\n+==============================================================================\n+VIM.REGEX                                                          *vim.regex*\n+\n \n Vim regexes can be used directly from Lua. Currently they only allow\n matching within a single line.\n \n+",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1265476942",
            "id": 1265476942,
            "line": 646,
            "node_id": "PRRC_kwDOAPphoM5LbaVO",
            "original_commit_id": "8bcd133644a5ec9e814e71e45eff155e25277514",
            "original_line": 646,
            "original_position": 118,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 118,
            "pull_request_review_id": 1532978255,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265476942/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-17T14:44:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265476942",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1265477549"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265477549"
                }
            },
            "author_association": "MEMBER",
            "body": "`vim.x` instead of `lua-x` is definitely a nice improvement.",
            "commit_id": "6e9b204afbe5f16c44a2697aed07aafff36bf856",
            "created_at": "2023-07-17T14:44:31Z",
            "diff_hunk": "@@ -621,151 +601,207 @@ vim.highlight.priorities                            *vim.highlight.priorities*\n         • `user`: `200`, used for user-triggered highlights such as LSP document\n           symbols or `on_yank` autocommands\n \n-------------------------------------------------------------------------------\n-VIM.REGEX                                                          *lua-regex*\n+vim.highlight.on_yank({opts})                        *vim.highlight.on_yank()*\n+    Highlight the yanked text\n+\n+    Parameters: ~\n+      • {opts}  (table|nil) Optional parameters\n+                • higroup highlight group for yanked region (default\n+                  \"IncSearch\")\n+                • timeout time in ms before highlight is cleared (default 150)\n+                • on_macro highlight when executing macro (default false)\n+                • on_visual highlight when yanking visual selection (default\n+                  true)\n+                • event event structure (default vim.v.event)\n+                • priority integer priority (default\n+                  |vim.highlight.priorities|`.user`)\n+\n+                                                       *vim.highlight.range()*\n+vim.highlight.range({bufnr}, {ns}, {higroup}, {start}, {finish}, {opts})\n+    Apply highlight group to range of text.\n+\n+    Parameters: ~\n+      • {bufnr}    (integer) Buffer number to apply highlighting to\n+      • {ns}       (integer) Namespace to add highlight to\n+      • {higroup}  (string) Highlight group to use for highlighting\n+      • {start}    integer[]|string Start of region as a (line, column) tuple\n+                   or string accepted by |getpos()|\n+      • {finish}   integer[]|string End of region as a (line, column) tuple or\n+                   string accepted by |getpos()|\n+      • {opts}     (table|nil) Optional parameters\n+                   • regtype type of range (see |setreg()|, default charwise)\n+                   • inclusive boolean indicating whether the range is\n+                     end-inclusive (default false)\n+                   • priority number indicating priority of highlight (default\n+                     priorities.user)\n+\n+\n+==============================================================================\n+VIM.REGEX                                                          *vim.regex*\n+\n \n Vim regexes can be used directly from Lua. Currently they only allow\n matching within a single line.\n \n+\n vim.regex({re})                                                  *vim.regex()*\n     Parse the Vim regex {re} and return a regex object. Regexes are \"magic\"\n     and case-sensitive by default, regardless of 'magic' and 'ignorecase'.\n     They can be controlled with flags, see |/magic| and |/ignorecase|.\n \n-Methods on the regex object:\n+    Parameters: ~\n+      • {re}  (string)\n \n-regex:match_str({str})                                     *regex:match_str()*\n-    Match the string against the regex. If the string should match the regex\n-    precisely, surround the regex with `^` and `$`. If the was a match, the\n-    byte indices for the beginning and end of the match is returned. When\n-    there is no match, `nil` is returned. As any integer is truth-y,\n-    `regex:match()` can be directly used as a condition in an if-statement.\n+    Return: ~\n+        vim.regex\n \n-regex:match_line({bufnr}, {line_idx} [, {start}, {end}])  *regex:match_line()*\n+                                                          *regex:match_line()*\n+vim.regex:match_line({bufnr}, {line_idx}, {start}, {end_})\n     Match line {line_idx} (zero-based) in buffer {bufnr}. If {start} and {end}\n     are supplied, match only this byte index range. Otherwise see\n     |regex:match_str()|. If {start} is used, then the returned byte indices\n     will be relative {start}.\n \n-------------------------------------------------------------------------------\n-VIM.LPEG                                                            *lua-lpeg*\n+    Parameters: ~\n+      • {bufnr}     (integer)\n+      • {line_idx}  (integer)\n+      • {start}     (integer|nil)\n+      • {end_}      (integer|nil)\n \n-                                                             *vim.lpeg* *vim.re*\n-The Lpeg library for parsing expression grammars is being included as\n-`vim.lpeg` (https://www.inf.puc-rio.br/~roberto/lpeg/). In addition, its regex-like\n-interface is available as `vim.re` (https://www.inf.puc-rio.br/~roberto/lpeg/re.html).\n+vim.regex:match_str({str})                                 *regex:match_str()*\n+    Match the string against the regex. If the string should match the regex\n+    precisely, surround the regex with `^` and `$` . If the was a match, the byte indices for the beginning and end of the\n+    match is returned. When there is no match, `nil` is returned. As any integer is truth-y, `regex:match()` can be directly used as a condition in an if-statement.\n \n-------------------------------------------------------------------------------\n-VIM.DIFF                                                            *lua-diff*\n+    Parameters: ~\n+      • {str}   (string)\n+\n+\n+==============================================================================\n+VIM.DIFF                                                            *vim.diff*",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1265477549",
            "id": 1265477549,
            "line": 681,
            "node_id": "PRRC_kwDOAPphoM5Lbaet",
            "original_commit_id": "8bcd133644a5ec9e814e71e45eff155e25277514",
            "original_line": 681,
            "original_position": 169,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 169,
            "pull_request_review_id": 1532979503,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265477549/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-17T14:44:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265477549",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1265479360"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265479360"
                }
            },
            "author_association": "MEMBER",
            "body": "is the extra indentation intentional or accidental? oh, it's because the old text wasn't auto-generated, right?",
            "commit_id": "6e9b204afbe5f16c44a2697aed07aafff36bf856",
            "created_at": "2023-07-17T14:45:50Z",
            "diff_hunk": "@@ -621,151 +601,207 @@ vim.highlight.priorities                            *vim.highlight.priorities*\n         • `user`: `200`, used for user-triggered highlights such as LSP document\n           symbols or `on_yank` autocommands\n \n-------------------------------------------------------------------------------\n-VIM.REGEX                                                          *lua-regex*\n+vim.highlight.on_yank({opts})                        *vim.highlight.on_yank()*\n+    Highlight the yanked text\n+\n+    Parameters: ~\n+      • {opts}  (table|nil) Optional parameters\n+                • higroup highlight group for yanked region (default\n+                  \"IncSearch\")\n+                • timeout time in ms before highlight is cleared (default 150)\n+                • on_macro highlight when executing macro (default false)\n+                • on_visual highlight when yanking visual selection (default\n+                  true)\n+                • event event structure (default vim.v.event)\n+                • priority integer priority (default\n+                  |vim.highlight.priorities|`.user`)\n+\n+                                                       *vim.highlight.range()*\n+vim.highlight.range({bufnr}, {ns}, {higroup}, {start}, {finish}, {opts})\n+    Apply highlight group to range of text.\n+\n+    Parameters: ~\n+      • {bufnr}    (integer) Buffer number to apply highlighting to\n+      • {ns}       (integer) Namespace to add highlight to\n+      • {higroup}  (string) Highlight group to use for highlighting\n+      • {start}    integer[]|string Start of region as a (line, column) tuple\n+                   or string accepted by |getpos()|\n+      • {finish}   integer[]|string End of region as a (line, column) tuple or\n+                   string accepted by |getpos()|\n+      • {opts}     (table|nil) Optional parameters\n+                   • regtype type of range (see |setreg()|, default charwise)\n+                   • inclusive boolean indicating whether the range is\n+                     end-inclusive (default false)\n+                   • priority number indicating priority of highlight (default\n+                     priorities.user)\n+\n+\n+==============================================================================\n+VIM.REGEX                                                          *vim.regex*\n+\n \n Vim regexes can be used directly from Lua. Currently they only allow\n matching within a single line.\n \n+\n vim.regex({re})                                                  *vim.regex()*\n     Parse the Vim regex {re} and return a regex object. Regexes are \"magic\"\n     and case-sensitive by default, regardless of 'magic' and 'ignorecase'.\n     They can be controlled with flags, see |/magic| and |/ignorecase|.\n \n-Methods on the regex object:\n+    Parameters: ~\n+      • {re}  (string)\n \n-regex:match_str({str})                                     *regex:match_str()*\n-    Match the string against the regex. If the string should match the regex\n-    precisely, surround the regex with `^` and `$`. If the was a match, the\n-    byte indices for the beginning and end of the match is returned. When\n-    there is no match, `nil` is returned. As any integer is truth-y,\n-    `regex:match()` can be directly used as a condition in an if-statement.\n+    Return: ~\n+        vim.regex\n \n-regex:match_line({bufnr}, {line_idx} [, {start}, {end}])  *regex:match_line()*\n+                                                          *regex:match_line()*\n+vim.regex:match_line({bufnr}, {line_idx}, {start}, {end_})\n     Match line {line_idx} (zero-based) in buffer {bufnr}. If {start} and {end}\n     are supplied, match only this byte index range. Otherwise see\n     |regex:match_str()|. If {start} is used, then the returned byte indices\n     will be relative {start}.\n \n-------------------------------------------------------------------------------\n-VIM.LPEG                                                            *lua-lpeg*\n+    Parameters: ~\n+      • {bufnr}     (integer)\n+      • {line_idx}  (integer)\n+      • {start}     (integer|nil)\n+      • {end_}      (integer|nil)\n \n-                                                             *vim.lpeg* *vim.re*\n-The Lpeg library for parsing expression grammars is being included as\n-`vim.lpeg` (https://www.inf.puc-rio.br/~roberto/lpeg/). In addition, its regex-like\n-interface is available as `vim.re` (https://www.inf.puc-rio.br/~roberto/lpeg/re.html).\n+vim.regex:match_str({str})                                 *regex:match_str()*\n+    Match the string against the regex. If the string should match the regex\n+    precisely, surround the regex with `^` and `$` . If the was a match, the byte indices for the beginning and end of the\n+    match is returned. When there is no match, `nil` is returned. As any integer is truth-y, `regex:match()` can be directly used as a condition in an if-statement.\n \n-------------------------------------------------------------------------------\n-VIM.DIFF                                                            *lua-diff*\n+    Parameters: ~\n+      • {str}   (string)\n+\n+\n+==============================================================================\n+VIM.DIFF                                                            *vim.diff*\n \n vim.diff({a}, {b}, {opts})                                        *vim.diff()*\n     Run diff on strings {a} and {b}. Any indices returned by this function,\n     either directly or via callback arguments, are 1-based.\n \n     Examples: >lua\n-        vim.diff('a\\n', 'b\\nc\\n')\n-        -- =>\n-        -- @@ -1 +1,2 @@\n-        -- -a\n-        -- +b\n-        -- +c\n-\n-        vim.diff('a\\n', 'b\\nc\\n', {result_type = 'indices'})\n-        -- =>\n-        -- {\n-        --   {1, 1, 1, 2}\n-        -- }\n-<\n-    Parameters: ~\n-      • {a}      First string to compare\n-      • {b}      Second string to compare\n-      • {opts}   Optional parameters:\n-                 • `on_hunk` (callback):\n-                   Invoked for each hunk in the diff. Return a negative number\n-                   to cancel the callback for any remaining hunks.\n-                   Args:\n-                   • `start_a` (integer): Start line of hunk in {a}.\n-                   • `count_a` (integer): Hunk size in {a}.\n-                   • `start_b` (integer): Start line of hunk in {b}.\n-                   • `count_b` (integer): Hunk size in {b}.\n-                 • `result_type` (string): Form of the returned diff:\n-                   • \"unified\": (default) String in unified format.\n-                   • \"indices\": Array of hunk locations.\n-                   Note: This option is ignored if `on_hunk` is used.\n-                 • `linematch` (boolean|integer): Run linematch on the resulting hunks\n-                   from xdiff. When integer, only hunks upto this size in\n-                   lines are run through linematch. Requires `result_type = indices`,\n-                   ignored otherwise.\n-                 • `algorithm` (string):\n-                   Diff algorithm to use. Values:\n-                   • \"myers\"      the default algorithm\n-                   • \"minimal\"    spend extra time to generate the\n-                                  smallest possible diff\n-                   • \"patience\"   patience diff algorithm\n-                   • \"histogram\"  histogram diff algorithm\n-                 • `ctxlen` (integer): Context length\n-                 • `interhunkctxlen` (integer):\n-                   Inter hunk context length\n-                 • `ignore_whitespace` (boolean):\n-                   Ignore whitespace\n-                 • `ignore_whitespace_change` (boolean):\n-                   Ignore whitespace change\n-                 • `ignore_whitespace_change_at_eol` (boolean)\n-                   Ignore whitespace change at end-of-line.\n-                 • `ignore_cr_at_eol` (boolean)\n-                   Ignore carriage return at end-of-line\n-                 • `ignore_blank_lines` (boolean)\n-                   Ignore blank lines\n-                 • `indent_heuristic` (boolean):\n-                   Use the indent heuristic for the internal\n-                   diff library.\n-\n-    Return: ~\n-        See {opts.result_type}. nil if {opts.on_hunk} is given.\n \n-------------------------------------------------------------------------------\n-VIM.MPACK                                                          *lua-mpack*\n+         vim.diff('a\\n', 'b\\nc\\n')\n+         -- =>\n+         -- @ -1 +1,2 @\n+         -- -a",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1265479360",
            "id": 1265479360,
            "line": 692,
            "node_id": "PRRC_kwDOAPphoM5Lba7A",
            "original_commit_id": "8bcd133644a5ec9e814e71e45eff155e25277514",
            "original_line": 692,
            "original_position": 241,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 241,
            "pull_request_review_id": 1532982333,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265479360/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-17T14:48:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265479360",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1265481310"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265481310"
                }
            },
            "author_association": "MEMBER",
            "body": "Did we lose the old description?\r\n\r\n```\r\nvim.json.encode({obj})                                       *vim.json.encode*\r\n    Encodes (or \"packs\") Lua object {obj} as JSON in a Lua string.\r\n```",
            "commit_id": "6e9b204afbe5f16c44a2697aed07aafff36bf856",
            "created_at": "2023-07-17T14:47:15Z",
            "diff_hunk": "@@ -621,151 +601,207 @@ vim.highlight.priorities                            *vim.highlight.priorities*\n         • `user`: `200`, used for user-triggered highlights such as LSP document\n           symbols or `on_yank` autocommands\n \n-------------------------------------------------------------------------------\n-VIM.REGEX                                                          *lua-regex*\n+vim.highlight.on_yank({opts})                        *vim.highlight.on_yank()*\n+    Highlight the yanked text\n+\n+    Parameters: ~\n+      • {opts}  (table|nil) Optional parameters\n+                • higroup highlight group for yanked region (default\n+                  \"IncSearch\")\n+                • timeout time in ms before highlight is cleared (default 150)\n+                • on_macro highlight when executing macro (default false)\n+                • on_visual highlight when yanking visual selection (default\n+                  true)\n+                • event event structure (default vim.v.event)\n+                • priority integer priority (default\n+                  |vim.highlight.priorities|`.user`)\n+\n+                                                       *vim.highlight.range()*\n+vim.highlight.range({bufnr}, {ns}, {higroup}, {start}, {finish}, {opts})\n+    Apply highlight group to range of text.\n+\n+    Parameters: ~\n+      • {bufnr}    (integer) Buffer number to apply highlighting to\n+      • {ns}       (integer) Namespace to add highlight to\n+      • {higroup}  (string) Highlight group to use for highlighting\n+      • {start}    integer[]|string Start of region as a (line, column) tuple\n+                   or string accepted by |getpos()|\n+      • {finish}   integer[]|string End of region as a (line, column) tuple or\n+                   string accepted by |getpos()|\n+      • {opts}     (table|nil) Optional parameters\n+                   • regtype type of range (see |setreg()|, default charwise)\n+                   • inclusive boolean indicating whether the range is\n+                     end-inclusive (default false)\n+                   • priority number indicating priority of highlight (default\n+                     priorities.user)\n+\n+\n+==============================================================================\n+VIM.REGEX                                                          *vim.regex*\n+\n \n Vim regexes can be used directly from Lua. Currently they only allow\n matching within a single line.\n \n+\n vim.regex({re})                                                  *vim.regex()*\n     Parse the Vim regex {re} and return a regex object. Regexes are \"magic\"\n     and case-sensitive by default, regardless of 'magic' and 'ignorecase'.\n     They can be controlled with flags, see |/magic| and |/ignorecase|.\n \n-Methods on the regex object:\n+    Parameters: ~\n+      • {re}  (string)\n \n-regex:match_str({str})                                     *regex:match_str()*\n-    Match the string against the regex. If the string should match the regex\n-    precisely, surround the regex with `^` and `$`. If the was a match, the\n-    byte indices for the beginning and end of the match is returned. When\n-    there is no match, `nil` is returned. As any integer is truth-y,\n-    `regex:match()` can be directly used as a condition in an if-statement.\n+    Return: ~\n+        vim.regex\n \n-regex:match_line({bufnr}, {line_idx} [, {start}, {end}])  *regex:match_line()*\n+                                                          *regex:match_line()*\n+vim.regex:match_line({bufnr}, {line_idx}, {start}, {end_})\n     Match line {line_idx} (zero-based) in buffer {bufnr}. If {start} and {end}\n     are supplied, match only this byte index range. Otherwise see\n     |regex:match_str()|. If {start} is used, then the returned byte indices\n     will be relative {start}.\n \n-------------------------------------------------------------------------------\n-VIM.LPEG                                                            *lua-lpeg*\n+    Parameters: ~\n+      • {bufnr}     (integer)\n+      • {line_idx}  (integer)\n+      • {start}     (integer|nil)\n+      • {end_}      (integer|nil)\n \n-                                                             *vim.lpeg* *vim.re*\n-The Lpeg library for parsing expression grammars is being included as\n-`vim.lpeg` (https://www.inf.puc-rio.br/~roberto/lpeg/). In addition, its regex-like\n-interface is available as `vim.re` (https://www.inf.puc-rio.br/~roberto/lpeg/re.html).\n+vim.regex:match_str({str})                                 *regex:match_str()*\n+    Match the string against the regex. If the string should match the regex\n+    precisely, surround the regex with `^` and `$` . If the was a match, the byte indices for the beginning and end of the\n+    match is returned. When there is no match, `nil` is returned. As any integer is truth-y, `regex:match()` can be directly used as a condition in an if-statement.\n \n-------------------------------------------------------------------------------\n-VIM.DIFF                                                            *lua-diff*\n+    Parameters: ~\n+      • {str}   (string)\n+\n+\n+==============================================================================\n+VIM.DIFF                                                            *vim.diff*\n \n vim.diff({a}, {b}, {opts})                                        *vim.diff()*\n     Run diff on strings {a} and {b}. Any indices returned by this function,\n     either directly or via callback arguments, are 1-based.\n \n     Examples: >lua\n-        vim.diff('a\\n', 'b\\nc\\n')\n-        -- =>\n-        -- @@ -1 +1,2 @@\n-        -- -a\n-        -- +b\n-        -- +c\n-\n-        vim.diff('a\\n', 'b\\nc\\n', {result_type = 'indices'})\n-        -- =>\n-        -- {\n-        --   {1, 1, 1, 2}\n-        -- }\n-<\n-    Parameters: ~\n-      • {a}      First string to compare\n-      • {b}      Second string to compare\n-      • {opts}   Optional parameters:\n-                 • `on_hunk` (callback):\n-                   Invoked for each hunk in the diff. Return a negative number\n-                   to cancel the callback for any remaining hunks.\n-                   Args:\n-                   • `start_a` (integer): Start line of hunk in {a}.\n-                   • `count_a` (integer): Hunk size in {a}.\n-                   • `start_b` (integer): Start line of hunk in {b}.\n-                   • `count_b` (integer): Hunk size in {b}.\n-                 • `result_type` (string): Form of the returned diff:\n-                   • \"unified\": (default) String in unified format.\n-                   • \"indices\": Array of hunk locations.\n-                   Note: This option is ignored if `on_hunk` is used.\n-                 • `linematch` (boolean|integer): Run linematch on the resulting hunks\n-                   from xdiff. When integer, only hunks upto this size in\n-                   lines are run through linematch. Requires `result_type = indices`,\n-                   ignored otherwise.\n-                 • `algorithm` (string):\n-                   Diff algorithm to use. Values:\n-                   • \"myers\"      the default algorithm\n-                   • \"minimal\"    spend extra time to generate the\n-                                  smallest possible diff\n-                   • \"patience\"   patience diff algorithm\n-                   • \"histogram\"  histogram diff algorithm\n-                 • `ctxlen` (integer): Context length\n-                 • `interhunkctxlen` (integer):\n-                   Inter hunk context length\n-                 • `ignore_whitespace` (boolean):\n-                   Ignore whitespace\n-                 • `ignore_whitespace_change` (boolean):\n-                   Ignore whitespace change\n-                 • `ignore_whitespace_change_at_eol` (boolean)\n-                   Ignore whitespace change at end-of-line.\n-                 • `ignore_cr_at_eol` (boolean)\n-                   Ignore carriage return at end-of-line\n-                 • `ignore_blank_lines` (boolean)\n-                   Ignore blank lines\n-                 • `indent_heuristic` (boolean):\n-                   Use the indent heuristic for the internal\n-                   diff library.\n-\n-    Return: ~\n-        See {opts.result_type}. nil if {opts.on_hunk} is given.\n \n-------------------------------------------------------------------------------\n-VIM.MPACK                                                          *lua-mpack*\n+         vim.diff('a\\n', 'b\\nc\\n')\n+         -- =>\n+         -- @ -1 +1,2 @\n+         -- -a\n+         -- +b\n+         -- +c\n+\n+         vim.diff('a\\n', 'b\\nc\\n', {result_type = 'indices'})\n+         -- =>\n+         -- {\n+         --   {1, 1, 1, 2}\n+         -- }\n+<\n+\n+    Parameters: ~\n+      • {a}     (string) First string to compare\n+      • {b}     (string) Second string to compare\n+      • {opts}  table<string,any> Optional parameters:\n+                • `on_hunk` (callback): Invoked for each hunk in the diff. Return a\n+                  negative number to cancel the callback for any remaining\n+                  hunks. Args:\n+                  • `start_a` (integer): Start line of hunk in {a}.\n+                  • `count_a` (integer): Hunk size in {a}.\n+                  • `start_b` (integer): Start line of hunk in {b}.\n+                  • `count_b` (integer): Hunk size in {b}.\n+\n+                • `result_type` (string): Form of the returned diff:\n+                  • \"unified\": (default) String in unified format.\n+                  • \"indices\": Array of hunk locations. Note: This option is\n+                    ignored if `on_hunk` is used.\n+\n+                • `linematch` (boolean|integer): Run linematch on the\n+                  resulting hunks from xdiff. When integer, only hunks upto\n+                  this size in lines are run through linematch. Requires\n+                  `result_type = indices`, ignored otherwise.\n+                • `algorithm` (string): Diff algorithm to use. Values:\n+                  • \"myers\" the default algorithm\n+                  • \"minimal\" spend extra time to generate the smallest\n+                    possible diff\n+                  • \"patience\" patience diff algorithm\n+                  • \"histogram\" histogram diff algorithm\n+\n+                • `ctxlen` (integer): Context length\n+                • `interhunkctxlen` (integer): Inter hunk context length\n+                • `ignore_whitespace` (boolean): Ignore whitespace\n+                • `ignore_whitespace_change` (boolean): Ignore whitespace\n+                  change\n+                • `ignore_whitespace_change_at_eol` (boolean) Ignore\n+                  whitespace change at end-of-line.\n+                • `ignore_cr_at_eol` (boolean) Ignore carriage return at\n+                  end-of-line\n+                • `ignore_blank_lines` (boolean) Ignore blank lines\n+                • `indent_heuristic` (boolean): Use the indent heuristic for\n+                  the internal diff library.\n+\n+    Return: ~\n+        string|table|nil See {opts.result_type}. `nil` if {opts.on_hunk} is\n+        given.\n \n-The *vim.mpack* module provides encoding and decoding of Lua objects to and\n-from msgpack-encoded strings. Supports |vim.NIL| and |vim.empty_dict()|.\n \n-vim.mpack.encode({obj})                                     *vim.mpack.encode*\n-    Encodes (or \"packs\") Lua object {obj} as msgpack in a Lua string.\n+==============================================================================\n+VIM.MPACK                                                          *vim.mpack*\n+\n \n-vim.mpack.decode({str})                                     *vim.mpack.decode*\n+This module provides encoding and decoding of Lua objects to and from\n+msgpack-encoded strings. Supports |vim.NIL| and |vim.empty_dict()|.\n+\n+vim.mpack.decode({str})                                   *vim.mpack.decode()*\n     Decodes (or \"unpacks\") the msgpack-encoded {str} to a Lua object.\n \n-------------------------------------------------------------------------------\n-VIM.JSON                                                            *lua-json*\n+    Parameters: ~\n+      • {str}  (string)\n+\n+vim.mpack.encode({obj})                                   *vim.mpack.encode()*\n+    Encodes (or \"packs\") Lua object {obj} as msgpack in a Lua string.\n \n-The *vim.json* module provides encoding and decoding of Lua objects to and\n-from JSON-encoded strings. Supports |vim.NIL| and |vim.empty_dict()|.\n \n-vim.json.encode({obj})                                       *vim.json.encode*\n-    Encodes (or \"packs\") Lua object {obj} as JSON in a Lua string.\n+==============================================================================\n+VIM.JSON                                                            *vim.json*\n \n-vim.json.decode({str}[, {opts}])                             *vim.json.decode*\n+\n+This module provides encoding and decoding of Lua objects to and from\n+JSON-encoded strings. Supports |vim.NIL| and |vim.empty_dict()|.\n+\n+vim.json.decode({str}, {opts})                             *vim.json.decode()*\n     Decodes (or \"unpacks\") the JSON-encoded {str} to a Lua object.\n \n-    - Decodes JSON \"null\" as |vim.NIL| (controllable by {opts}, see below).\n-    - Decodes empty object as |vim.empty_dict()|.\n-    - Decodes empty array as `{}` (empty Lua table).\n+    • Decodes JSON \"null\" as |vim.NIL| (controllable by {opts}, see below).\n+    • Decodes empty object as |vim.empty_dict()|.\n+    • Decodes empty array as `{}` (empty Lua table).\n \n     Example: >lua\n-    :lua vim.print(vim.json.decode('{\"bar\":[],\"foo\":{},\"zub\":null}'))\n-    --> { bar = {}, foo = vim.empty_dict(), zub = vim.NIL }\n-<\n+\n+     :lua vim.print(vim.json.decode('{\"bar\":[],\"foo\":{},\"zub\":null}'))\n+     --> { bar = {}, foo = vim.empty_dict(), zub = vim.NIL }\n+\n+    < Parameters: ~ • {str} Stringified JSON data. • {opts} Options map keys: •\n+    luanil: { object: bool, array: bool } • `luanil.object=true` converts `null` in JSON objects to Lua `nil` instead of `vim.NIL` . • `luanil.array=true` converts `null` in JSON arrays to Lua `nil` instead of `vim.NIL` .\n+\n     Parameters: ~\n-      • {str}    Stringified JSON data.\n-      • {opts}   Options map keys:\n-                 • luanil: { object: bool, array: bool }\n-                   • `luanil.object=true` converts `null` in JSON objects to\n-                     Lua `nil` instead of `vim.NIL`.\n-                   • `luanil.array=true` converts `null` in JSON arrays to Lua\n-                     `nil` instead of `vim.NIL`.\n+      • {str}   (string)\n+      • {opts}  table<string,|nil any>\n \n-------------------------------------------------------------------------------\n-VIM.SPELL                                                          *lua-spell*\n+    Return: ~\n+        any\n+\n+vim.json.encode({obj})                                     *vim.json.encode()*\n+    Parameters: ~",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1265481310",
            "id": 1265481310,
            "line": 798,
            "node_id": "PRRC_kwDOAPphoM5LbbZe",
            "original_commit_id": "8bcd133644a5ec9e814e71e45eff155e25277514",
            "original_line": 798,
            "original_position": 372,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 372,
            "pull_request_review_id": 1532985386,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265481310/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-17T14:47:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265481310",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1265483997"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265483997"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n--- Encodes (or \"packs\") Lua object {obj} as JSON in a Lua string.\r\n```",
            "commit_id": "6e9b204afbe5f16c44a2697aed07aafff36bf856",
            "created_at": "2023-07-17T14:49:17Z",
            "diff_hunk": "@@ -0,0 +1,35 @@\n+--- @meta\n+\n+--- @defgroup vim.json\n+---\n+--- This module provides encoding and decoding of Lua objects to and\n+--- from JSON-encoded strings. Supports |vim.NIL| and |vim.empty_dict()|.\n+\n+--- Decodes (or \"unpacks\") the JSON-encoded {str} to a Lua object.\n+---\n+--- - Decodes JSON \"null\" as |vim.NIL| (controllable by {opts}, see below).\n+--- - Decodes empty object as |vim.empty_dict()|.\n+--- - Decodes empty array as `{}` (empty Lua table).\n+---\n+--- Example:\n+--- <pre>lua\n+--- :lua vim.print(vim.json.decode('{\"bar\":[],\"foo\":{},\"zub\":null}'))\n+--- --> { bar = {}, foo = vim.empty_dict(), zub = vim.NIL }\n+--- </pre>\n+--- Parameters: ~\n+---   • {str}    Stringified JSON data.\n+---   • {opts}   Options map keys:\n+---              • luanil: { object: bool, array: bool }\n+---                • `luanil.object=true` converts `null` in JSON objects to\n+---                  Lua `nil` instead of `vim.NIL`.\n+---                • `luanil.array=true` converts `null` in JSON arrays to Lua\n+---                  `nil` instead of `vim.NIL`.\n+--- @param str string\n+--- @param opts? table<string, any>\n+--- @return any\n+function vim.json.decode(str, opts) end\n+\n+-- Encodes (or \"packs\") Lua object {obj} as JSON in a Lua string.",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1265483997",
            "id": 1265483997,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5LbcDd",
            "original_commit_id": "8bcd133644a5ec9e814e71e45eff155e25277514",
            "original_line": 32,
            "original_position": 32,
            "original_start_line": null,
            "path": "runtime/lua/vim/_meta/json.lua",
            "position": null,
            "pull_request_review_id": 1532989489,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265483997/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-17T14:49:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265483997",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1265488653"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265488653"
                }
            },
            "author_association": "MEMBER",
            "body": "This is fine IMO if it's hard to avoid. It might even be an improvement.\r\n\r\nThe only case I'm worried about is when `vim.x` is not actually the correct fully-qualified path to `x`.",
            "commit_id": "6e9b204afbe5f16c44a2697aed07aafff36bf856",
            "created_at": "2023-07-17T14:52:41Z",
            "diff_hunk": "@@ -1302,38 +1392,37 @@ Option:get()\n             print(\"J is enabled!\")\n         end\n <\n-                                                            *vim.opt:append()*\n-Option:append(value)\n-\n-    Append a value to string-style options. See |:set+=|\n \n-    These are equivalent: >lua\n-        vim.opt.formatoptions:append('j')\n-        vim.opt.formatoptions = vim.opt.formatoptions + 'j'\n-<\n-                                                           *vim.opt:prepend()*\n-Option:prepend(value)\n+    Return: ~\n+        string|integer|boolean|nil value of option\n \n+Option:prepend({value})                                    *vim.opt:prepend()*\n     Prepend a value to string-style options. See |:set^=|\n \n     These are equivalent: >lua\n         vim.opt.wildignore:prepend('*.o')\n         vim.opt.wildignore = vim.opt.wildignore ^ '*.o'\n <\n-                                                            *vim.opt:remove()*\n-Option:remove(value)\n \n+    Parameters: ~\n+      • {value}  (string) Value to prepend\n+\n+Option:remove({value})                                      *vim.opt:remove()*\n     Remove a value from string-style options. See |:set-=|\n \n     These are equivalent: >lua\n         vim.opt.wildignore:remove('*.pyc')\n         vim.opt.wildignore = vim.opt.wildignore - '*.pyc'\n <\n \n+    Parameters: ~\n+      • {value}  (string) Value to remove\n+\n+\n ==============================================================================\n Lua module: vim                                                      *lua-vim*\n \n-cmd({command})                                                     *vim.cmd()*\n+vim.cmd({command})                                                 *vim.cmd()*",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1265488653",
            "id": 1265488653,
            "line": 1426,
            "node_id": "PRRC_kwDOAPphoM5LbdMN",
            "original_commit_id": "8bcd133644a5ec9e814e71e45eff155e25277514",
            "original_line": 1427,
            "original_position": 998,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 999,
            "pull_request_review_id": 1532996678,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265488653/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-17T14:53:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265488653",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1265493088"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265493088"
                }
            },
            "author_association": "MEMBER",
            "body": "3 spaces seems weird and not intentional.",
            "commit_id": "6e9b204afbe5f16c44a2697aed07aafff36bf856",
            "created_at": "2023-07-17T14:56:01Z",
            "diff_hunk": "@@ -2864,37 +2958,37 @@ tested against a version, using |vim.version.range()|.\n Supported range specs are shown in the following table. Note: suffixed\n versions (1.2.3-rc1) are not matched. >\n \n-  1.2.3             is 1.2.3\n-  =1.2.3            is 1.2.3\n-  >1.2.3            greater than 1.2.3\n-  <1.2.3            before 1.2.3\n-  >=1.2.3           at least 1.2.3\n-  ~1.2.3            is >=1.2.3 <1.3.0       \"reasonably close to 1.2.3\"\n-  ^1.2.3            is >=1.2.3 <2.0.0       \"compatible with 1.2.3\"\n-  ^0.2.3            is >=0.2.3 <0.3.0       (0.x.x is special)\n-  ^0.0.1            is =0.0.1               (0.0.x is special)\n-  ^1.2              is >=1.2.0 <2.0.0       (like ^1.2.0)\n-  ~1.2              is >=1.2.0 <1.3.0       (like ~1.2.0)\n-  ^1                is >=1.0.0 <2.0.0       \"compatible with 1\"\n-  ~1                same                    \"reasonably close to 1\"\n-  1.x               same\n-  1.*               same\n-  1                 same\n-  *                 any version\n-  x                 same\n-\n-  1.2.3 - 2.3.4     is >=1.2.3 <=2.3.4\n-\n-  Partial right: missing pieces treated as x (2.3 => 2.3.x).\n-  1.2.3 - 2.3       is >=1.2.3 <2.4.0\n-  1.2.3 - 2         is >=1.2.3 <3.0.0\n-\n-  Partial left: missing pieces treated as 0 (1.2 => 1.2.0).\n-  1.2 - 2.3.0       is 1.2.0 - 2.3.0\n-\n-<\n-\n-cmp({v1}, {v2})                                            *vim.version.cmp()*\n+   1.2.3             is 1.2.3\n+   =1.2.3            is 1.2.3",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1265493088",
            "id": 1265493088,
            "line": 2963,
            "node_id": "PRRC_kwDOAPphoM5LbeRg",
            "original_commit_id": "8bcd133644a5ec9e814e71e45eff155e25277514",
            "original_line": 2964,
            "original_position": 1826,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 1827,
            "pull_request_review_id": 1533003811,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265493088/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-17T14:57:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265493088",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1265494682"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265494682"
                }
            },
            "author_association": "MEMBER",
            "body": "so much whitespace 😂 ",
            "commit_id": "6e9b204afbe5f16c44a2697aed07aafff36bf856",
            "created_at": "2023-07-17T14:57:11Z",
            "diff_hunk": "@@ -1056,7 +1051,9 @@ contents.\n To create a LanguageTree (parser object) for a given buffer and language, use:\n \n >lua\n-    local parser = vim.treesitter.get_parser(bufnr, lang)\n+\n+     local parser = vim.treesitter.get_parser(bufnr, lang)\n+",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1265494682",
            "id": 1265494682,
            "line": 1056,
            "node_id": "PRRC_kwDOAPphoM5Lbeqa",
            "original_commit_id": "8bcd133644a5ec9e814e71e45eff155e25277514",
            "original_line": 1056,
            "original_position": 84,
            "original_start_line": null,
            "path": "runtime/doc/treesitter.txt",
            "position": 84,
            "pull_request_review_id": 1533003811,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265494682/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-17T14:57:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265494682",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1265497702"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265497702"
                }
            },
            "author_association": "MEMBER",
            "body": "Nice change. `_meta.lua` was a somewhat opaque name for this. And probably too generic; options is a big enough topic for its own module.",
            "commit_id": "8bcd133644a5ec9e814e71e45eff155e25277514",
            "created_at": "2023-07-17T14:59:23Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1265497702",
            "id": 1265497702,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM5LbfZm",
            "original_commit_id": "8bcd133644a5ec9e814e71e45eff155e25277514",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/lua/vim/_options.lua",
            "position": 1,
            "pull_request_review_id": 1533011723,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265497702/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2023-07-17T15:00:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265497702",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1265498695"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265498695"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "imo it's an improvement if the full paths are shown\r\nan example would be the treesitter function where I always had to scroll up to find the full function signature\r\nbut that might be exactly one of the examples where `vim.x` isn't the full path",
            "commit_id": "6e9b204afbe5f16c44a2697aed07aafff36bf856",
            "created_at": "2023-07-17T14:59:57Z",
            "diff_hunk": "@@ -1302,38 +1392,37 @@ Option:get()\n             print(\"J is enabled!\")\n         end\n <\n-                                                            *vim.opt:append()*\n-Option:append(value)\n-\n-    Append a value to string-style options. See |:set+=|\n \n-    These are equivalent: >lua\n-        vim.opt.formatoptions:append('j')\n-        vim.opt.formatoptions = vim.opt.formatoptions + 'j'\n-<\n-                                                           *vim.opt:prepend()*\n-Option:prepend(value)\n+    Return: ~\n+        string|integer|boolean|nil value of option\n \n+Option:prepend({value})                                    *vim.opt:prepend()*\n     Prepend a value to string-style options. See |:set^=|\n \n     These are equivalent: >lua\n         vim.opt.wildignore:prepend('*.o')\n         vim.opt.wildignore = vim.opt.wildignore ^ '*.o'\n <\n-                                                            *vim.opt:remove()*\n-Option:remove(value)\n \n+    Parameters: ~\n+      • {value}  (string) Value to prepend\n+\n+Option:remove({value})                                      *vim.opt:remove()*\n     Remove a value from string-style options. See |:set-=|\n \n     These are equivalent: >lua\n         vim.opt.wildignore:remove('*.pyc')\n         vim.opt.wildignore = vim.opt.wildignore - '*.pyc'\n <\n \n+    Parameters: ~\n+      • {value}  (string) Value to remove\n+\n+\n ==============================================================================\n Lua module: vim                                                      *lua-vim*\n \n-cmd({command})                                                     *vim.cmd()*\n+vim.cmd({command})                                                 *vim.cmd()*",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1265498695",
            "id": 1265498695,
            "in_reply_to_id": 1265488653,
            "line": 1426,
            "node_id": "PRRC_kwDOAPphoM5LbfpH",
            "original_commit_id": "8bcd133644a5ec9e814e71e45eff155e25277514",
            "original_line": 1427,
            "original_position": 998,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 999,
            "pull_request_review_id": 1533013160,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265498695/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-17T14:59:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265498695",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/81827001?v=4",
                "events_url": "https://api.github.com/users/max397574/events{/privacy}",
                "followers_url": "https://api.github.com/users/max397574/followers",
                "following_url": "https://api.github.com/users/max397574/following{/other_user}",
                "gists_url": "https://api.github.com/users/max397574/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/max397574",
                "id": 81827001,
                "login": "max397574",
                "node_id": "MDQ6VXNlcjgxODI3MDAx",
                "organizations_url": "https://api.github.com/users/max397574/orgs",
                "received_events_url": "https://api.github.com/users/max397574/received_events",
                "repos_url": "https://api.github.com/users/max397574/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/max397574/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/max397574/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/max397574"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1265499296"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265499296"
                }
            },
            "author_association": "MEMBER",
            "body": "yep. I've tried to match indentation where possible, but haven't been exhaustive with it.",
            "commit_id": "6e9b204afbe5f16c44a2697aed07aafff36bf856",
            "created_at": "2023-07-17T15:00:18Z",
            "diff_hunk": "@@ -621,151 +601,207 @@ vim.highlight.priorities                            *vim.highlight.priorities*\n         • `user`: `200`, used for user-triggered highlights such as LSP document\n           symbols or `on_yank` autocommands\n \n-------------------------------------------------------------------------------\n-VIM.REGEX                                                          *lua-regex*\n+vim.highlight.on_yank({opts})                        *vim.highlight.on_yank()*\n+    Highlight the yanked text\n+\n+    Parameters: ~\n+      • {opts}  (table|nil) Optional parameters\n+                • higroup highlight group for yanked region (default\n+                  \"IncSearch\")\n+                • timeout time in ms before highlight is cleared (default 150)\n+                • on_macro highlight when executing macro (default false)\n+                • on_visual highlight when yanking visual selection (default\n+                  true)\n+                • event event structure (default vim.v.event)\n+                • priority integer priority (default\n+                  |vim.highlight.priorities|`.user`)\n+\n+                                                       *vim.highlight.range()*\n+vim.highlight.range({bufnr}, {ns}, {higroup}, {start}, {finish}, {opts})\n+    Apply highlight group to range of text.\n+\n+    Parameters: ~\n+      • {bufnr}    (integer) Buffer number to apply highlighting to\n+      • {ns}       (integer) Namespace to add highlight to\n+      • {higroup}  (string) Highlight group to use for highlighting\n+      • {start}    integer[]|string Start of region as a (line, column) tuple\n+                   or string accepted by |getpos()|\n+      • {finish}   integer[]|string End of region as a (line, column) tuple or\n+                   string accepted by |getpos()|\n+      • {opts}     (table|nil) Optional parameters\n+                   • regtype type of range (see |setreg()|, default charwise)\n+                   • inclusive boolean indicating whether the range is\n+                     end-inclusive (default false)\n+                   • priority number indicating priority of highlight (default\n+                     priorities.user)\n+\n+\n+==============================================================================\n+VIM.REGEX                                                          *vim.regex*\n+\n \n Vim regexes can be used directly from Lua. Currently they only allow\n matching within a single line.\n \n+\n vim.regex({re})                                                  *vim.regex()*\n     Parse the Vim regex {re} and return a regex object. Regexes are \"magic\"\n     and case-sensitive by default, regardless of 'magic' and 'ignorecase'.\n     They can be controlled with flags, see |/magic| and |/ignorecase|.\n \n-Methods on the regex object:\n+    Parameters: ~\n+      • {re}  (string)\n \n-regex:match_str({str})                                     *regex:match_str()*\n-    Match the string against the regex. If the string should match the regex\n-    precisely, surround the regex with `^` and `$`. If the was a match, the\n-    byte indices for the beginning and end of the match is returned. When\n-    there is no match, `nil` is returned. As any integer is truth-y,\n-    `regex:match()` can be directly used as a condition in an if-statement.\n+    Return: ~\n+        vim.regex\n \n-regex:match_line({bufnr}, {line_idx} [, {start}, {end}])  *regex:match_line()*\n+                                                          *regex:match_line()*\n+vim.regex:match_line({bufnr}, {line_idx}, {start}, {end_})\n     Match line {line_idx} (zero-based) in buffer {bufnr}. If {start} and {end}\n     are supplied, match only this byte index range. Otherwise see\n     |regex:match_str()|. If {start} is used, then the returned byte indices\n     will be relative {start}.\n \n-------------------------------------------------------------------------------\n-VIM.LPEG                                                            *lua-lpeg*\n+    Parameters: ~\n+      • {bufnr}     (integer)\n+      • {line_idx}  (integer)\n+      • {start}     (integer|nil)\n+      • {end_}      (integer|nil)\n \n-                                                             *vim.lpeg* *vim.re*\n-The Lpeg library for parsing expression grammars is being included as\n-`vim.lpeg` (https://www.inf.puc-rio.br/~roberto/lpeg/). In addition, its regex-like\n-interface is available as `vim.re` (https://www.inf.puc-rio.br/~roberto/lpeg/re.html).\n+vim.regex:match_str({str})                                 *regex:match_str()*\n+    Match the string against the regex. If the string should match the regex\n+    precisely, surround the regex with `^` and `$` . If the was a match, the byte indices for the beginning and end of the\n+    match is returned. When there is no match, `nil` is returned. As any integer is truth-y, `regex:match()` can be directly used as a condition in an if-statement.\n \n-------------------------------------------------------------------------------\n-VIM.DIFF                                                            *lua-diff*\n+    Parameters: ~\n+      • {str}   (string)\n+\n+\n+==============================================================================\n+VIM.DIFF                                                            *vim.diff*\n \n vim.diff({a}, {b}, {opts})                                        *vim.diff()*\n     Run diff on strings {a} and {b}. Any indices returned by this function,\n     either directly or via callback arguments, are 1-based.\n \n     Examples: >lua\n-        vim.diff('a\\n', 'b\\nc\\n')\n-        -- =>\n-        -- @@ -1 +1,2 @@\n-        -- -a\n-        -- +b\n-        -- +c\n-\n-        vim.diff('a\\n', 'b\\nc\\n', {result_type = 'indices'})\n-        -- =>\n-        -- {\n-        --   {1, 1, 1, 2}\n-        -- }\n-<\n-    Parameters: ~\n-      • {a}      First string to compare\n-      • {b}      Second string to compare\n-      • {opts}   Optional parameters:\n-                 • `on_hunk` (callback):\n-                   Invoked for each hunk in the diff. Return a negative number\n-                   to cancel the callback for any remaining hunks.\n-                   Args:\n-                   • `start_a` (integer): Start line of hunk in {a}.\n-                   • `count_a` (integer): Hunk size in {a}.\n-                   • `start_b` (integer): Start line of hunk in {b}.\n-                   • `count_b` (integer): Hunk size in {b}.\n-                 • `result_type` (string): Form of the returned diff:\n-                   • \"unified\": (default) String in unified format.\n-                   • \"indices\": Array of hunk locations.\n-                   Note: This option is ignored if `on_hunk` is used.\n-                 • `linematch` (boolean|integer): Run linematch on the resulting hunks\n-                   from xdiff. When integer, only hunks upto this size in\n-                   lines are run through linematch. Requires `result_type = indices`,\n-                   ignored otherwise.\n-                 • `algorithm` (string):\n-                   Diff algorithm to use. Values:\n-                   • \"myers\"      the default algorithm\n-                   • \"minimal\"    spend extra time to generate the\n-                                  smallest possible diff\n-                   • \"patience\"   patience diff algorithm\n-                   • \"histogram\"  histogram diff algorithm\n-                 • `ctxlen` (integer): Context length\n-                 • `interhunkctxlen` (integer):\n-                   Inter hunk context length\n-                 • `ignore_whitespace` (boolean):\n-                   Ignore whitespace\n-                 • `ignore_whitespace_change` (boolean):\n-                   Ignore whitespace change\n-                 • `ignore_whitespace_change_at_eol` (boolean)\n-                   Ignore whitespace change at end-of-line.\n-                 • `ignore_cr_at_eol` (boolean)\n-                   Ignore carriage return at end-of-line\n-                 • `ignore_blank_lines` (boolean)\n-                   Ignore blank lines\n-                 • `indent_heuristic` (boolean):\n-                   Use the indent heuristic for the internal\n-                   diff library.\n-\n-    Return: ~\n-        See {opts.result_type}. nil if {opts.on_hunk} is given.\n \n-------------------------------------------------------------------------------\n-VIM.MPACK                                                          *lua-mpack*\n+         vim.diff('a\\n', 'b\\nc\\n')\n+         -- =>\n+         -- @ -1 +1,2 @\n+         -- -a",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1265499296",
            "id": 1265499296,
            "in_reply_to_id": 1265479360,
            "line": 692,
            "node_id": "PRRC_kwDOAPphoM5Lbfyg",
            "original_commit_id": "8bcd133644a5ec9e814e71e45eff155e25277514",
            "original_line": 692,
            "original_position": 241,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 241,
            "pull_request_review_id": 1533014077,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265499296/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-17T15:00:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265499296",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1265503026"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265503026"
                }
            },
            "author_association": "MEMBER",
            "body": "I'm pretty sure it's because `version.lua` has 1 space of padding.",
            "commit_id": "6e9b204afbe5f16c44a2697aed07aafff36bf856",
            "created_at": "2023-07-17T15:01:49Z",
            "diff_hunk": "@@ -2864,37 +2958,37 @@ tested against a version, using |vim.version.range()|.\n Supported range specs are shown in the following table. Note: suffixed\n versions (1.2.3-rc1) are not matched. >\n \n-  1.2.3             is 1.2.3\n-  =1.2.3            is 1.2.3\n-  >1.2.3            greater than 1.2.3\n-  <1.2.3            before 1.2.3\n-  >=1.2.3           at least 1.2.3\n-  ~1.2.3            is >=1.2.3 <1.3.0       \"reasonably close to 1.2.3\"\n-  ^1.2.3            is >=1.2.3 <2.0.0       \"compatible with 1.2.3\"\n-  ^0.2.3            is >=0.2.3 <0.3.0       (0.x.x is special)\n-  ^0.0.1            is =0.0.1               (0.0.x is special)\n-  ^1.2              is >=1.2.0 <2.0.0       (like ^1.2.0)\n-  ~1.2              is >=1.2.0 <1.3.0       (like ~1.2.0)\n-  ^1                is >=1.0.0 <2.0.0       \"compatible with 1\"\n-  ~1                same                    \"reasonably close to 1\"\n-  1.x               same\n-  1.*               same\n-  1                 same\n-  *                 any version\n-  x                 same\n-\n-  1.2.3 - 2.3.4     is >=1.2.3 <=2.3.4\n-\n-  Partial right: missing pieces treated as x (2.3 => 2.3.x).\n-  1.2.3 - 2.3       is >=1.2.3 <2.4.0\n-  1.2.3 - 2         is >=1.2.3 <3.0.0\n-\n-  Partial left: missing pieces treated as 0 (1.2 => 1.2.0).\n-  1.2 - 2.3.0       is 1.2.0 - 2.3.0\n-\n-<\n-\n-cmp({v1}, {v2})                                            *vim.version.cmp()*\n+   1.2.3             is 1.2.3\n+   =1.2.3            is 1.2.3",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1265503026",
            "id": 1265503026,
            "in_reply_to_id": 1265493088,
            "line": 2963,
            "node_id": "PRRC_kwDOAPphoM5Lbgsy",
            "original_commit_id": "8bcd133644a5ec9e814e71e45eff155e25277514",
            "original_line": 2964,
            "original_position": 1826,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 1827,
            "pull_request_review_id": 1533019081,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265503026/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-17T15:01:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265503026",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1265505115"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265505115"
                }
            },
            "author_association": "MEMBER",
            "body": "The doc workflow is a bit of a rube goldberg machine. Changing one thing can have unexpected results somewhere else.",
            "commit_id": "6e9b204afbe5f16c44a2697aed07aafff36bf856",
            "created_at": "2023-07-17T15:03:23Z",
            "diff_hunk": "@@ -1056,7 +1051,9 @@ contents.\n To create a LanguageTree (parser object) for a given buffer and language, use:\n \n >lua\n-    local parser = vim.treesitter.get_parser(bufnr, lang)\n+\n+     local parser = vim.treesitter.get_parser(bufnr, lang)\n+",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1265505115",
            "id": 1265505115,
            "in_reply_to_id": 1265494682,
            "line": 1056,
            "node_id": "PRRC_kwDOAPphoM5LbhNb",
            "original_commit_id": "8bcd133644a5ec9e814e71e45eff155e25277514",
            "original_line": 1056,
            "original_position": 84,
            "original_start_line": null,
            "path": "runtime/doc/treesitter.txt",
            "position": 84,
            "pull_request_review_id": 1533022312,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265505115/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-17T15:03:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265505115",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1265506478"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265506478"
                }
            },
            "author_association": "MEMBER",
            "body": "I was potentially going to follow this up with another rename `vimscript.lua` or `bridge.lua` and pull in all the other bridge components that are scattered about.",
            "commit_id": "8bcd133644a5ec9e814e71e45eff155e25277514",
            "created_at": "2023-07-17T15:04:28Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1265506478",
            "id": 1265506478,
            "in_reply_to_id": 1265497702,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM5Lbhiu",
            "original_commit_id": "8bcd133644a5ec9e814e71e45eff155e25277514",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/lua/vim/_options.lua",
            "position": 1,
            "pull_request_review_id": 1533024467,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265506478/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2023-07-17T15:04:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265506478",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1265513582"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265513582"
                }
            },
            "author_association": "MEMBER",
            "body": "Good idea",
            "commit_id": "8bcd133644a5ec9e814e71e45eff155e25277514",
            "created_at": "2023-07-17T15:08:07Z",
            "diff_hunk": "",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1265513582",
            "id": 1265513582,
            "in_reply_to_id": 1265497702,
            "line": 1,
            "node_id": "PRRC_kwDOAPphoM5LbjRu",
            "original_commit_id": "8bcd133644a5ec9e814e71e45eff155e25277514",
            "original_line": 1,
            "original_position": 1,
            "original_start_line": null,
            "path": "runtime/lua/vim/_options.lua",
            "position": 1,
            "pull_request_review_id": 1533035034,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265513582/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "file",
            "updated_at": "2023-07-17T15:08:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265513582",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/24363#discussion_r1265536456"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/24363"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265536456"
                }
            },
            "author_association": "MEMBER",
            "body": "Depends how smart we can make `gen_vimdoc.py` 😉 \r\n\r\nIt's getting pretty complicated already however.",
            "commit_id": "6e9b204afbe5f16c44a2697aed07aafff36bf856",
            "created_at": "2023-07-17T15:23:42Z",
            "diff_hunk": "@@ -1888,28 +1983,28 @@ ringbuf({size})                                                *vim.ringbuf()*\n     Return: ~\n         (table)\n \n-Ringbuf:clear({self})                                        *Ringbuf:clear()*\n+vim.Ringbuf:clear()                                          *Ringbuf:clear()*",
            "html_url": "https://github.com/neovim/neovim/pull/24363#discussion_r1265536456",
            "id": 1265536456,
            "in_reply_to_id": 1265364176,
            "line": 1984,
            "node_id": "PRRC_kwDOAPphoM5Lbo3I",
            "original_commit_id": "f7ffbcfedb36505f5dbb2c3848a683b8bd9ce304",
            "original_line": 1985,
            "original_position": 1307,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": 1307,
            "pull_request_review_id": 1533070919,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265536456/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-07-17T15:23:42Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1265536456",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "Ok, so the diff on this is now somewhat palatable that it can be reviewed.\r\n\r\nI've added a bunch of special casing in gen_vimdoc.py in order to keep the diff as small as possible.\r\n\r\nOnce we merge this, we can decide what special casing we want to undo.",
            "created_at": "2023-07-17T12:37:08Z",
            "html_url": "https://github.com/neovim/neovim/pull/24363#issuecomment-1638048701",
            "id": 1638048701,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24363",
            "node_id": "IC_kwDOAPphoM5hoqO9",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1638048701/reactions"
            },
            "updated_at": "2023-07-17T12:37:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1638048701",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I'm not sure if I understand this correctly since I'm not good with those things. But afaict this pr would allow to get completion and type checking like neodev.nvim does it at the moment right?\r\nIf so this should perhaps be mentioned in a `news.txt` entry so users who want that could get rid of neodev\r\n\r\nFeel free to hide this comment because it's only semi-related",
            "created_at": "2023-07-17T15:07:36Z",
            "html_url": "https://github.com/neovim/neovim/pull/24363#issuecomment-1638338948",
            "id": 1638338948,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24363",
            "node_id": "IC_kwDOAPphoM5hpxGE",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1638338948/reactions"
            },
            "updated_at": "2023-07-17T15:07:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1638338948",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/81827001?v=4",
                "events_url": "https://api.github.com/users/max397574/events{/privacy}",
                "followers_url": "https://api.github.com/users/max397574/followers",
                "following_url": "https://api.github.com/users/max397574/following{/other_user}",
                "gists_url": "https://api.github.com/users/max397574/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/max397574",
                "id": 81827001,
                "login": "max397574",
                "node_id": "MDQ6VXNlcjgxODI3MDAx",
                "organizations_url": "https://api.github.com/users/max397574/orgs",
                "received_events_url": "https://api.github.com/users/max397574/received_events",
                "repos_url": "https://api.github.com/users/max397574/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/max397574/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/max397574/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/max397574"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "This only partially removes the need for neodev. You still need it for `vim.api.*` and `vim.fn.*`.",
            "created_at": "2023-07-17T15:22:31Z",
            "html_url": "https://github.com/neovim/neovim/pull/24363#issuecomment-1638369031",
            "id": 1638369031,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24363",
            "node_id": "IC_kwDOAPphoM5hp4cH",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1638369031/reactions"
            },
            "updated_at": "2023-07-17T15:22:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1638369031",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/24363/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/24363/commits",
    "created_at": "2023-07-15T17:04:44Z",
    "diff_url": "https://github.com/neovim/neovim/pull/24363.diff",
    "draft": false,
    "head": {
        "label": "lewis6991:docs/luatypes",
        "ref": "docs/luatypes",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/lewis6991/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/lewis6991/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/lewis6991/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/lewis6991/neovim/branches{/branch}",
            "clone_url": "https://github.com/lewis6991/neovim.git",
            "collaborators_url": "https://api.github.com/repos/lewis6991/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/lewis6991/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/lewis6991/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/lewis6991/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/lewis6991/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/lewis6991/neovim/contributors",
            "created_at": "2020-11-24T21:47:43Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/lewis6991/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/lewis6991/neovim/downloads",
            "events_url": "https://api.github.com/repos/lewis6991/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/lewis6991/neovim/forks",
            "full_name": "lewis6991/neovim",
            "git_commits_url": "https://api.github.com/repos/lewis6991/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/lewis6991/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/lewis6991/neovim/git/tags{/sha}",
            "git_url": "git://github.com/lewis6991/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/lewis6991/neovim/hooks",
            "html_url": "https://github.com/lewis6991/neovim",
            "id": 315760150,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/lewis6991/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/lewis6991/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/lewis6991/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/lewis6991/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/lewis6991/neovim/labels{/name}",
            "language": "Vim script",
            "languages_url": "https://api.github.com/repos/lewis6991/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/lewis6991/neovim/merges",
            "milestones_url": "https://api.github.com/repos/lewis6991/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkzMTU3NjAxNTA=",
            "notifications_url": "https://api.github.com/repos/lewis6991/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/lewis6991/neovim/pulls{/number}",
            "pushed_at": "2023-07-17T16:40:16Z",
            "releases_url": "https://api.github.com/repos/lewis6991/neovim/releases{/id}",
            "size": 243037,
            "ssh_url": "git@github.com:lewis6991/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/lewis6991/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/lewis6991/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/lewis6991/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/lewis6991/neovim/subscription",
            "svn_url": "https://github.com/lewis6991/neovim",
            "tags_url": "https://api.github.com/repos/lewis6991/neovim/tags",
            "teams_url": "https://api.github.com/repos/lewis6991/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/lewis6991/neovim/git/trees{/sha}",
            "updated_at": "2023-01-31T18:36:52Z",
            "url": "https://api.github.com/repos/lewis6991/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "6e9b204afbe5f16c44a2697aed07aafff36bf856",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
            "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
            "followers_url": "https://api.github.com/users/lewis6991/followers",
            "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
            "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/lewis6991",
            "id": 7904185,
            "login": "lewis6991",
            "node_id": "MDQ6VXNlcjc5MDQxODU=",
            "organizations_url": "https://api.github.com/users/lewis6991/orgs",
            "received_events_url": "https://api.github.com/users/lewis6991/received_events",
            "repos_url": "https://api.github.com/users/lewis6991/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/lewis6991"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/24363",
    "id": 1435985547,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/24363",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": null,
            "id": 573222693,
            "name": "lua",
            "node_id": "MDU6TGFiZWw1NzMyMjI2OTM=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/lua"
        }
    ],
    "locked": false,
    "merge_commit_sha": "80cf0f3d29fa337d43ec417759cb061bd2798ea8",
    "merged_at": "2023-07-17T16:40:14Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5Vl2aL",
    "number": 24363,
    "patch_url": "https://github.com/neovim/neovim/pull/24363.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/24363/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/6e9b204afbe5f16c44a2697aed07aafff36bf856",
    "title": "docs(lua): move some function docs to lua files",
    "updated_at": "2023-07-17T16:40:28Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/24363",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
        "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
        "followers_url": "https://api.github.com/users/lewis6991/followers",
        "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
        "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/lewis6991",
        "id": 7904185,
        "login": "lewis6991",
        "node_id": "MDQ6VXNlcjc5MDQxODU=",
        "organizations_url": "https://api.github.com/users/lewis6991/orgs",
        "received_events_url": "https://api.github.com/users/lewis6991/received_events",
        "repos_url": "https://api.github.com/users/lewis6991/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/lewis6991"
    }
}