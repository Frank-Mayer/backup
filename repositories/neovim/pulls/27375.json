{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/27375/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/27375/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/27375"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/27375"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/27375/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/27375"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/837a595143ef29327a33296614c9fd8d50a84ff8"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5201,
            "forks_count": 5201,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1728,
            "open_issues_count": 1728,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-02-12T23:38:13Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 252813,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 73720,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-02-13T01:34:21Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 73720,
            "watchers_count": 73720,
            "web_commit_signoff_required": false
        },
        "sha": "cca8a78ea2ac0803d9e97ee761db9d3e31a77aeb",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "This is an extension to the existing `vim.snippet.expand()` api introduced in #25301 (see also: #25696)\r\n\r\nThe idea with this PR is that the caller can specify the values of variables defined in the templates by passing them in a second `options` argument to `vim.snippet.expand()`:\r\n\r\n```lua\r\nvim.snippet.expand(snippet, {\r\n  variables: {\r\n    A = \"value for $A\",\r\n    B = function(name)\r\n      return \"value for $\" .. name\r\n    end\r\n  }\r\n})\r\n```\r\n\r\nThe logic is as follows:\r\n* If the variable is not defined, the variable's default (as defined in the template) is used, falling back to an empty string. **NOTE** This is different to the original behaviour, where an undefined variable would become a tabstop. This seemed awkward, and would override other existing tabstops of the same index. For e.g. `$A` would clobber `$1` if it came first in the template.\r\n* If the variable is a function, the function is called with the variable's name as the first argument. The result is used as the variable's value. If the function returns `nil`, then the variable's default is used, falling back to an empty string.\r\n* If the variable is a string, the string is used as the variable's value, or if `nil` falling back to the variable's default, and then to an empty string.\r\n\r\nOne usecase for this is to implement `TM_SELECTED_TEXT` in userland, the simplest approach being something like:\r\n\r\n```lua\r\nvim.snippet.expand(snippet, {\r\n  variables: {\r\n    TM_SELECTED_TEXT = function(name)\r\n      return vim.fn.getreg('\"')\r\n    end\r\n  }\r\n})\r\n```\r\n\r\n**NOTE**: The use of`vim.fn.getreg('\"')` here is pretty simplistic and has some odd edge cases, but it's good to use as an example here.\r\n\r\n- [ ] test coverage",
    "closed_at": "2024-02-07T20:47:35Z",
    "comment_data": [],
    "comment_regular_data": [
        {
            "author_association": "NONE",
            "body": "CC @MariaSolOs",
            "created_at": "2024-02-07T15:49:40Z",
            "html_url": "https://github.com/neovim/neovim/pull/27375#issuecomment-1932335381",
            "id": 1932335381,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27375",
            "node_id": "IC_kwDOAPphoM5zLRkV",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1932335381/reactions"
            },
            "updated_at": "2024-02-07T15:49:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1932335381",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/123917?v=4",
                "events_url": "https://api.github.com/users/refractalize/events{/privacy}",
                "followers_url": "https://api.github.com/users/refractalize/followers",
                "following_url": "https://api.github.com/users/refractalize/following{/other_user}",
                "gists_url": "https://api.github.com/users/refractalize/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/refractalize",
                "id": 123917,
                "login": "refractalize",
                "node_id": "MDQ6VXNlcjEyMzkxNw==",
                "organizations_url": "https://api.github.com/users/refractalize/orgs",
                "received_events_url": "https://api.github.com/users/refractalize/received_events",
                "repos_url": "https://api.github.com/users/refractalize/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/refractalize/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/refractalize/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/refractalize"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Is this part of the LSP snippet spec? If it isn't, could be a forward-compatibility risk.",
            "created_at": "2024-02-07T19:46:15Z",
            "html_url": "https://github.com/neovim/neovim/pull/27375#issuecomment-1932752566",
            "id": 1932752566,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27375",
            "node_id": "IC_kwDOAPphoM5zM3a2",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1932752566/reactions"
            },
            "updated_at": "2024-02-07T19:46:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1932752566",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I'm not a fan of this feature. The LSP [limits the variables that can be used in snippets](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#snippet_syntax), all of which were handled in the initial PR.\r\n\r\nMoreover, in the case one argues that the spec has room for ambiguity and that extra variables should be supported, even VS Code limits such extra variables from a [predefined list](https://code.visualstudio.com/docs/editor/userdefinedsnippets#_variables). I don't think a minimal LSP snippet implementation should support this kind of dynamically defined snippet specific variables.\r\n\r\nFor the functionality that's appropriate for core, I think we should limit snippet support to what the LSP defines, and leaving this kind of functionality for snippet libraries to build on top of.",
            "created_at": "2024-02-07T20:43:32Z",
            "html_url": "https://github.com/neovim/neovim/pull/27375#issuecomment-1932836529",
            "id": 1932836529,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27375",
            "node_id": "IC_kwDOAPphoM5zNL6x",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1932836529/reactions"
            },
            "updated_at": "2024-02-07T20:43:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1932836529",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Is this part of the LSP snippet spec? If it isn't, could be a forward-compatibility risk.\r\n\r\nThis isn't changing how the snippet template is rendered or interpreted, only that the values of template variables can be passed into `expand()`.\r\n\r\nIt is of course possible that your templates define arbitrary variables not defined in the spec, which would pose a compatibility issue if you wanted to use those templates in other snippet plugins or in different editors, but I don't think this is the responsibility of `vim.snippet` API to police that, and this PR doesn't change it.\r\n\r\nOne thing to mention in particular is `TM_SELECTED_TEXT`, which definitely _is_ in the spec but isn't serviced by the implementation currently in `master`. This work would allow it to be specified by the caller.\r\n\r\nWhat this does change about the existing behaviour is when it turns undefined variables into tabstops. This functionality (AFAIK) is not in the spec, and TBF it's usability isn't ideal. The spec refers to numbered variables being tabstops, not arbitrary undefined variables becoming tabstops.",
            "created_at": "2024-02-07T20:47:43Z",
            "html_url": "https://github.com/neovim/neovim/pull/27375#issuecomment-1932842413",
            "id": 1932842413,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27375",
            "node_id": "IC_kwDOAPphoM5zNNWt",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1932842413/reactions"
            },
            "updated_at": "2024-02-07T20:47:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1932842413",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/123917?v=4",
                "events_url": "https://api.github.com/users/refractalize/events{/privacy}",
                "followers_url": "https://api.github.com/users/refractalize/followers",
                "following_url": "https://api.github.com/users/refractalize/following{/other_user}",
                "gists_url": "https://api.github.com/users/refractalize/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/refractalize",
                "id": 123917,
                "login": "refractalize",
                "node_id": "MDQ6VXNlcjEyMzkxNw==",
                "organizations_url": "https://api.github.com/users/refractalize/orgs",
                "received_events_url": "https://api.github.com/users/refractalize/received_events",
                "repos_url": "https://api.github.com/users/refractalize/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/refractalize/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/refractalize/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/refractalize"
            }
        },
        {
            "author_association": "NONE",
            "body": "> I'm not a fan of this feature. The LSP [limits the variables that can be used in snippets](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#snippet_syntax), all of which were handled in the initial PR.\r\n\r\nExcept `TM_SELECTED_TEXT`...\r\n\r\nWould you prefer that we only allow the value of `TM_SELECTED_TEXT` to be passed in and nothing else?",
            "created_at": "2024-02-07T20:52:06Z",
            "html_url": "https://github.com/neovim/neovim/pull/27375#issuecomment-1932861609",
            "id": 1932861609,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27375",
            "node_id": "IC_kwDOAPphoM5zNSCp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1932861609/reactions"
            },
            "updated_at": "2024-02-07T20:52:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1932861609",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/123917?v=4",
                "events_url": "https://api.github.com/users/refractalize/events{/privacy}",
                "followers_url": "https://api.github.com/users/refractalize/followers",
                "following_url": "https://api.github.com/users/refractalize/following{/other_user}",
                "gists_url": "https://api.github.com/users/refractalize/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/refractalize",
                "id": 123917,
                "login": "refractalize",
                "node_id": "MDQ6VXNlcjEyMzkxNw==",
                "organizations_url": "https://api.github.com/users/refractalize/orgs",
                "received_events_url": "https://api.github.com/users/refractalize/received_events",
                "repos_url": "https://api.github.com/users/refractalize/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/refractalize/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/refractalize/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/refractalize"
            }
        },
        {
            "author_association": "NONE",
            "body": "Alternatively we provide an implementation for `TM_SELECTED_TEXT`, i.e. we grab the previously visual text, or whatever text that was deleted due to a `c` normal command (for e.g.) Frankly there's quite a lot of scope for UX preferences and options that would make this more complicated than simply allowing it to be passed in by the caller.",
            "created_at": "2024-02-07T20:55:24Z",
            "html_url": "https://github.com/neovim/neovim/pull/27375#issuecomment-1932869978",
            "id": 1932869978,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27375",
            "node_id": "IC_kwDOAPphoM5zNUFa",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1932869978/reactions"
            },
            "updated_at": "2024-02-07T20:55:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1932869978",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/123917?v=4",
                "events_url": "https://api.github.com/users/refractalize/events{/privacy}",
                "followers_url": "https://api.github.com/users/refractalize/followers",
                "following_url": "https://api.github.com/users/refractalize/following{/other_user}",
                "gists_url": "https://api.github.com/users/refractalize/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/refractalize",
                "id": 123917,
                "login": "refractalize",
                "node_id": "MDQ6VXNlcjEyMzkxNw==",
                "organizations_url": "https://api.github.com/users/refractalize/orgs",
                "received_events_url": "https://api.github.com/users/refractalize/received_events",
                "repos_url": "https://api.github.com/users/refractalize/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/refractalize/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/refractalize/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/refractalize"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The LSP [limits the variables that can be used in snippets](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#snippet_syntax), all of which were handled in the initial PR.\r\n\r\nIs this different than the `Variable transformations via regexes` item in https://github.com/neovim/neovim/issues/25696 ?",
            "created_at": "2024-02-07T20:59:18Z",
            "html_url": "https://github.com/neovim/neovim/pull/27375#issuecomment-1932880766",
            "id": 1932880766,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27375",
            "node_id": "IC_kwDOAPphoM5zNWt-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1932880766/reactions"
            },
            "updated_at": "2024-02-07T20:59:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1932880766",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Yes, providing a robust implementation of TM_SELECTED_TEXT would be in scope and welcome. But not at the price of adding off-spec features. The point of this API is expanding snippets returned as completion items, and nothing else. ",
            "created_at": "2024-02-07T21:01:13Z",
            "html_url": "https://github.com/neovim/neovim/pull/27375#issuecomment-1932886158",
            "id": 1932886158,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27375",
            "node_id": "IC_kwDOAPphoM5zNYCO",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1932886158/reactions"
            },
            "updated_at": "2024-02-07T21:01:13Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1932886158",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> > I'm not a fan of this feature. The LSP [limits the variables that can be used in snippets](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#snippet_syntax), all of which were handled in the initial PR.\r\n> \r\n> Except `TM_SELECTED_TEXT`...\r\n> \r\n> Would you prefer that we only allow the value of `TM_SELECTED_TEXT` to be passed in and nothing else?\r\n\r\nThis has been brought up in the past. Refer to https://github.com/neovim/neovim/pull/25301#discussion_r1348178743 and https://github.com/neovim/neovim/pull/25301/files#r1360184463.",
            "created_at": "2024-02-07T21:10:07Z",
            "html_url": "https://github.com/neovim/neovim/pull/27375#issuecomment-1932913160",
            "id": 1932913160,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27375",
            "node_id": "IC_kwDOAPphoM5zNeoI",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1932913160/reactions"
            },
            "updated_at": "2024-02-07T21:10:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1932913160",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "NONE",
            "body": "> The point of this API is expanding snippets returned as completion items, and nothing else.\r\n\r\nI didn't realise this when I saw `vim.snippet`, it just looked so useful regardless of LSP. I get where you're all coming from now. Cheers.",
            "created_at": "2024-02-07T21:28:59Z",
            "html_url": "https://github.com/neovim/neovim/pull/27375#issuecomment-1932967971",
            "id": 1932967971,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27375",
            "node_id": "IC_kwDOAPphoM5zNsAj",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1932967971/reactions"
            },
            "updated_at": "2024-02-07T21:28:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1932967971",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/123917?v=4",
                "events_url": "https://api.github.com/users/refractalize/events{/privacy}",
                "followers_url": "https://api.github.com/users/refractalize/followers",
                "following_url": "https://api.github.com/users/refractalize/following{/other_user}",
                "gists_url": "https://api.github.com/users/refractalize/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/refractalize",
                "id": 123917,
                "login": "refractalize",
                "node_id": "MDQ6VXNlcjEyMzkxNw==",
                "organizations_url": "https://api.github.com/users/refractalize/orgs",
                "received_events_url": "https://api.github.com/users/refractalize/received_events",
                "repos_url": "https://api.github.com/users/refractalize/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/refractalize/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/refractalize/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/refractalize"
            }
        },
        {
            "author_association": "NONE",
            "body": "Hi again, before I jump into implementation of `TM_SELECTED_TEXT` I wanted to run a few ideas by you.\r\n\r\nFrom the point of view of UX, we obviously have a few different approaches, getting the visual selection was mentioned in the comments in #25301 - but this issues in that it's not clear how current the visual selection is, it might be several edits out of date by the time the snippet is expanded which could in the very least be quite surprising to the user, not to mention never being able to \"unset\" the visual selection so `TM_SELECTED_TEXT` will never fall back to its default.\r\n\r\nI have experimented with a different approach which is this: If you make a change edit, that is one of `c{motion}` or `{Visual}c` or likewise with it's `s` counterparts, then we can capture the deleted text and use this as the `TM_SELECTED_TEXT`. Now that you're in insert mode, you can invoke the LSP completion and snippet as normal. However, if you simply enter insert mode without deleting text, i.e. with `i`, then `TM_SELECTED_TEXT` would fall back to it's default in the template, or `''`.\r\n\r\nThis is actually very similar to the UX in VS Code. If you highlight some text and start typing the beginning of the snippet and accept the snippet completion, the originally highlighted text (that was effectively deleted when you started typing) is now used as the `TM_SELECTED_TEXT`.\r\n\r\nThis would be implemented as the following:\r\n\r\n```lua\r\nlocal selected_text = nil\r\n\r\nvim.api.nvim_create_autocmd(\"TextYankPost\", {\r\n  pattern = \"*\",\r\n  callback = function(e)\r\n    if vim.v.event.operator == \"c\" then\r\n      selected_text = vim.fn.join(vim.v.event.regcontents, \"\\n\")\r\n    end\r\n  end,\r\n})\r\n\r\nvim.api.nvim_create_autocmd(\"InsertLeave\", {\r\n  pattern = \"*\",\r\n  callback = function(e)\r\n    selected_text = nil\r\n  end,\r\n})\r\n```\r\n\r\nThat is, when we see a yank, but the operator was a change (triggered by `c` or `s` normal commands) then we capture the deleted text until the end of the insert mode. There might be a more elegant way of doing this of course.\r\n\r\nThe other aspect of this is how this behaviour might be configured, or indeed \"started\" if we want to leave it off by default. I'm less sure about this, but I propose one of the following:\r\n\r\n1. We provide a user settable `vim.snippet.get_selected_text` function that would be a user (or plugin) specified implementation for getting the selected text. This approach would leave the implementation to plugins (using perhaps the above approach, or other). `TM_SELECTED_TEXT` would effectively be unset by default.\r\n2. We prefer the above \"c operator\" approach, and ship this as the default. My concern here is that we might be incurring a small performance hit with these autocmds if the feature is never used.\r\n3. We have an explicit opt-in on the \"c operator\" approach which can be turned on with something like `vim.snippet.setup({ capture_selected_text = true })` or similar.\r\n\r\nI have no idea which (or if any) of these approaches are vaguely workable - very happy to discuss.",
            "created_at": "2024-02-08T09:13:32Z",
            "html_url": "https://github.com/neovim/neovim/pull/27375#issuecomment-1933646335",
            "id": 1933646335,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27375",
            "node_id": "IC_kwDOAPphoM5zQRn_",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1933646335/reactions"
            },
            "updated_at": "2024-02-08T09:13:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1933646335",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/123917?v=4",
                "events_url": "https://api.github.com/users/refractalize/events{/privacy}",
                "followers_url": "https://api.github.com/users/refractalize/followers",
                "following_url": "https://api.github.com/users/refractalize/following{/other_user}",
                "gists_url": "https://api.github.com/users/refractalize/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/refractalize",
                "id": 123917,
                "login": "refractalize",
                "node_id": "MDQ6VXNlcjEyMzkxNw==",
                "organizations_url": "https://api.github.com/users/refractalize/orgs",
                "received_events_url": "https://api.github.com/users/refractalize/received_events",
                "repos_url": "https://api.github.com/users/refractalize/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/refractalize/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/refractalize/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/refractalize"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> it's not clear how current the visual selection is, it might be several edits out of date by the time the snippet is expanded which could in the very least be quite surprising to the user, not to mention never being able to \"unset\" the visual selection so `TM_SELECTED_TEXT` will never fall back to its default.\r\n\r\nThis is exactly why we decided not to support this variable. No matter what we do, I feel like someone will find the behaviour unexpected and counterintuitive.\r\n\r\n> I have experimented with a different approach which is this: If you make a change edit, that is one of `c{motion}` or `{Visual}c` or likewise with it's `s` counterparts, then we can capture the deleted text and use this as the `TM_SELECTED_TEXT`. Now that you're in insert mode, you can invoke the LSP completion and snippet as normal. However, if you simply enter insert mode without deleting text, i.e. with `i`, then `TM_SELECTED_TEXT` would fall back to it's default in the template, or `''`.\r\n\r\n> This is actually very similar to the UX in VS Code. If you highlight some text and start typing the beginning of the snippet and accept the snippet completion, the originally highlighted text (that was effectively deleted when you started typing) is now used as the `TM_SELECTED_TEXT`.\r\n\r\nI think this is a good idea and I'm okay with seeing a draft implementation for it. I still think someone won't like this and prefer a different heuristic, so I'm unsure...\r\n\r\nThat being said, I'm unsure of how many LSP servers actually use that variable in their snippets and perhaps we're overthinking the problem. It looks like something a user would include in custom snippets, so one can argue that if someone writes a snippet with that variable, they know how to use it.\r\n\r\n@refractalize I would suggest putting this proposal in a new issue for your ideas not to get lost in the discussion here and for others to weigh in :)",
            "created_at": "2024-02-08T17:24:48Z",
            "html_url": "https://github.com/neovim/neovim/pull/27375#issuecomment-1934605723",
            "id": 1934605723,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27375",
            "node_id": "IC_kwDOAPphoM5zT72b",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1934605723/reactions"
            },
            "updated_at": "2024-02-08T17:24:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1934605723",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "author_association": "NONE",
            "body": "@MariaSolOs thanks for considering all this.\r\n\r\n> That being said, I'm unsure of how many LSP servers actually use that variable in their snippets and perhaps we're overthinking the problem. It looks like something a user would include in custom snippets, so one can argue that if someone writes a snippet with that variable, they know how to use it.\r\n\r\nBTW I think you're right on this.\r\n\r\nMy original intention here was to make the `vim.snippet` API generally useful outside of the scope of LSP, useful as a snippet engine capable of expanding snippets in the way VS Code does (with it's additional variables such as `$UUID` and of course `$TM_SELECTED_TEXT`). I realise there are countless other snippet engines that can do this very thing, but since `vim.snippet` is now in core, it seemed we were only a couple of commits away from Neovim being more or less self sufficient in this regard.\r\n\r\nI realise now that this wasn't the intention for `vim.snippet` (at least for the moment), since it's not 100% clear that any implementation of TM_SELECTED_TEXT would be universally acceptable, and like you say, and since it's not absolutely critical then I'll stop here.\r\n\r\nThanks for your feedback and consideration in any case.",
            "created_at": "2024-02-10T08:21:17Z",
            "html_url": "https://github.com/neovim/neovim/pull/27375#issuecomment-1936929619",
            "id": 1936929619,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27375",
            "node_id": "IC_kwDOAPphoM5zczNT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1936929619/reactions"
            },
            "updated_at": "2024-02-10T08:21:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1936929619",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/123917?v=4",
                "events_url": "https://api.github.com/users/refractalize/events{/privacy}",
                "followers_url": "https://api.github.com/users/refractalize/followers",
                "following_url": "https://api.github.com/users/refractalize/following{/other_user}",
                "gists_url": "https://api.github.com/users/refractalize/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/refractalize",
                "id": 123917,
                "login": "refractalize",
                "node_id": "MDQ6VXNlcjEyMzkxNw==",
                "organizations_url": "https://api.github.com/users/refractalize/orgs",
                "received_events_url": "https://api.github.com/users/refractalize/received_events",
                "repos_url": "https://api.github.com/users/refractalize/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/refractalize/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/refractalize/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/refractalize"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/27375/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/27375/commits",
    "created_at": "2024-02-07T15:47:16Z",
    "diff_url": "https://github.com/neovim/neovim/pull/27375.diff",
    "draft": true,
    "head": {
        "label": "refractalize:snippet-variables",
        "ref": "snippet-variables",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/refractalize/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/refractalize/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/refractalize/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/refractalize/neovim/branches{/branch}",
            "clone_url": "https://github.com/refractalize/neovim.git",
            "collaborators_url": "https://api.github.com/repos/refractalize/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/refractalize/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/refractalize/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/refractalize/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/refractalize/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/refractalize/neovim/contributors",
            "created_at": "2024-02-07T14:58:49Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/refractalize/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/refractalize/neovim/downloads",
            "events_url": "https://api.github.com/repos/refractalize/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/refractalize/neovim/forks",
            "full_name": "refractalize/neovim",
            "git_commits_url": "https://api.github.com/repos/refractalize/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/refractalize/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/refractalize/neovim/git/tags{/sha}",
            "git_url": "git://github.com/refractalize/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/refractalize/neovim/hooks",
            "html_url": "https://github.com/refractalize/neovim",
            "id": 754180313,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/refractalize/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/refractalize/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/refractalize/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/refractalize/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/refractalize/neovim/labels{/name}",
            "language": null,
            "languages_url": "https://api.github.com/repos/refractalize/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/refractalize/neovim/merges",
            "milestones_url": "https://api.github.com/repos/refractalize/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOLPPg2Q",
            "notifications_url": "https://api.github.com/repos/refractalize/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/123917?v=4",
                "events_url": "https://api.github.com/users/refractalize/events{/privacy}",
                "followers_url": "https://api.github.com/users/refractalize/followers",
                "following_url": "https://api.github.com/users/refractalize/following{/other_user}",
                "gists_url": "https://api.github.com/users/refractalize/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/refractalize",
                "id": 123917,
                "login": "refractalize",
                "node_id": "MDQ6VXNlcjEyMzkxNw==",
                "organizations_url": "https://api.github.com/users/refractalize/orgs",
                "received_events_url": "https://api.github.com/users/refractalize/received_events",
                "repos_url": "https://api.github.com/users/refractalize/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/refractalize/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/refractalize/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/refractalize"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/refractalize/neovim/pulls{/number}",
            "pushed_at": "2024-02-10T07:40:55Z",
            "releases_url": "https://api.github.com/repos/refractalize/neovim/releases{/id}",
            "size": 246499,
            "ssh_url": "git@github.com:refractalize/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/refractalize/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/refractalize/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/refractalize/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/refractalize/neovim/subscription",
            "svn_url": "https://github.com/refractalize/neovim",
            "tags_url": "https://api.github.com/repos/refractalize/neovim/tags",
            "teams_url": "https://api.github.com/repos/refractalize/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/refractalize/neovim/git/trees{/sha}",
            "updated_at": "2024-02-07T14:58:49Z",
            "url": "https://api.github.com/repos/refractalize/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "837a595143ef29327a33296614c9fd8d50a84ff8",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/123917?v=4",
            "events_url": "https://api.github.com/users/refractalize/events{/privacy}",
            "followers_url": "https://api.github.com/users/refractalize/followers",
            "following_url": "https://api.github.com/users/refractalize/following{/other_user}",
            "gists_url": "https://api.github.com/users/refractalize/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/refractalize",
            "id": 123917,
            "login": "refractalize",
            "node_id": "MDQ6VXNlcjEyMzkxNw==",
            "organizations_url": "https://api.github.com/users/refractalize/orgs",
            "received_events_url": "https://api.github.com/users/refractalize/received_events",
            "repos_url": "https://api.github.com/users/refractalize/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/refractalize/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/refractalize/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/refractalize"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/27375",
    "id": 1715943337,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27375",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "5da14cf6e3db1176d75106941e7f69fc3e060d98",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5mRzep",
    "number": 27375,
    "patch_url": "https://github.com/neovim/neovim/pull/27375.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/27375/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/837a595143ef29327a33296614c9fd8d50a84ff8",
    "title": "Allow template variable values to be passed to `vim.snippet.expand()`",
    "updated_at": "2024-02-10T08:21:19Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/27375",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/123917?v=4",
        "events_url": "https://api.github.com/users/refractalize/events{/privacy}",
        "followers_url": "https://api.github.com/users/refractalize/followers",
        "following_url": "https://api.github.com/users/refractalize/following{/other_user}",
        "gists_url": "https://api.github.com/users/refractalize/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/refractalize",
        "id": 123917,
        "login": "refractalize",
        "node_id": "MDQ6VXNlcjEyMzkxNw==",
        "organizations_url": "https://api.github.com/users/refractalize/orgs",
        "received_events_url": "https://api.github.com/users/refractalize/received_events",
        "repos_url": "https://api.github.com/users/refractalize/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/refractalize/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/refractalize/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/refractalize"
    }
}