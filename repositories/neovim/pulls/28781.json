{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/28781/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/28781/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/28781"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/28781"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/28781/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/28781"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/ab0ff61b7e5a92bf5e4de780fa04317675bcb9f9"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5383,
            "forks_count": 5383,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1728,
            "open_issues_count": 1728,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-05-20T23:45:59Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 270386,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 77935,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-05-21T02:01:06Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 77935,
            "watchers_count": 77935,
            "web_commit_signoff_required": false
        },
        "sha": "aec4938a21a02d279d13a9eb64ef3b7cc592c374",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "The optimizations that vim.iter uses for array-like tables don't strictly require that the underlying table has no holes. The only thing that needs to change is the determination if a table is \"list-like\": rather than requiring consecutive, integer keys, we can simply test for integer keys only, and remove any holes in the original array when we make a copy for the iterator.\r\n\r\nThis allows `vim.iter(t):flatten():totable()` to work as a proper replacement for `vim.tbl_flatten`.\r\n\r\nFixes #28777.\r\n",
    "closed_at": "2024-05-17T19:17:25Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28781#discussion_r1603773214"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28781"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1603773214"
                }
            },
            "author_association": "MEMBER",
            "body": "A corner case:\r\n```\r\nvim.iter({ { { { nil } } } }):flatten():totable()\r\n```\r\n\r\nshould be `{}`, but is `{ { {} } }`.",
            "commit_id": "ab0ff61b7e5a92bf5e4de780fa04317675bcb9f9",
            "created_at": "2024-05-16T17:33:09Z",
            "diff_hunk": "@@ -482,18 +485,18 @@ describe('vim.iter', function()\n     local m = { a = 1, b = { 2, 3 }, d = { 4 } }\n     local it = vim.iter(m)\n \n-    local flat_err = 'flatten%(%) requires a list%-like table'\n+    local flat_err = 'flatten%(%) requires an array%-like table'\n     matches(flat_err, pcall_err(it.flatten, it))\n \n     -- cases from the documentation\n     local simple_example = { 1, { 2 }, { { 3 } } }\n     eq({ 1, 2, { 3 } }, vim.iter(simple_example):flatten():totable())\n \n-    local not_list_like = vim.iter({ [2] = 2 })\n-    matches(flat_err, pcall_err(not_list_like.flatten, not_list_like))\n+    local not_list_like = { [2] = 2 }\n+    eq({ 2 }, vim.iter(not_list_like):flatten():totable())\n \n-    local also_not_list_like = vim.iter({ nil, 2 })\n-    matches(flat_err, pcall_err(not_list_like.flatten, also_not_list_like))\n+    local also_not_list_like = { nil, 2 }\n+    eq({ 2 }, vim.iter(also_not_list_like):flatten():totable())",
            "html_url": "https://github.com/neovim/neovim/pull/28781#discussion_r1603773214",
            "id": 1603773214,
            "line": 499,
            "node_id": "PRRC_kwDOAPphoM5fl6Me",
            "original_commit_id": "5532a2676bc801440476d1921fabebd07540b6aa",
            "original_line": 499,
            "original_position": 102,
            "original_start_line": null,
            "path": "test/functional/lua/iter_spec.lua",
            "position": 100,
            "pull_request_review_id": 2061454081,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28781",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1603773214/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-16T18:24:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1603773214",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28781#discussion_r1603794416"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28781"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1603794416"
                }
            },
            "author_association": "MEMBER",
            "body": "No I think that's right, the default depth is `1` so tables are not recursively flattened.",
            "commit_id": "ab0ff61b7e5a92bf5e4de780fa04317675bcb9f9",
            "created_at": "2024-05-16T17:51:49Z",
            "diff_hunk": "@@ -482,18 +485,18 @@ describe('vim.iter', function()\n     local m = { a = 1, b = { 2, 3 }, d = { 4 } }\n     local it = vim.iter(m)\n \n-    local flat_err = 'flatten%(%) requires a list%-like table'\n+    local flat_err = 'flatten%(%) requires an array%-like table'\n     matches(flat_err, pcall_err(it.flatten, it))\n \n     -- cases from the documentation\n     local simple_example = { 1, { 2 }, { { 3 } } }\n     eq({ 1, 2, { 3 } }, vim.iter(simple_example):flatten():totable())\n \n-    local not_list_like = vim.iter({ [2] = 2 })\n-    matches(flat_err, pcall_err(not_list_like.flatten, not_list_like))\n+    local not_list_like = { [2] = 2 }\n+    eq({ 2 }, vim.iter(not_list_like):flatten():totable())\n \n-    local also_not_list_like = vim.iter({ nil, 2 })\n-    matches(flat_err, pcall_err(not_list_like.flatten, also_not_list_like))\n+    local also_not_list_like = { nil, 2 }\n+    eq({ 2 }, vim.iter(also_not_list_like):flatten():totable())",
            "html_url": "https://github.com/neovim/neovim/pull/28781#discussion_r1603794416",
            "id": 1603794416,
            "in_reply_to_id": 1603773214,
            "line": 499,
            "node_id": "PRRC_kwDOAPphoM5fl_Xw",
            "original_commit_id": "5532a2676bc801440476d1921fabebd07540b6aa",
            "original_line": 499,
            "original_position": 102,
            "original_start_line": null,
            "path": "test/functional/lua/iter_spec.lua",
            "position": 100,
            "pull_request_review_id": 2061490041,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28781",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 1,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1603794416/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-16T17:51:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1603794416",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28781#discussion_r1603905335"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28781"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1603905335"
                }
            },
            "author_association": "MEMBER",
            "body": "IIUC, the `length` parameter is the key improvement. But it looks like we're also changing `t[k]` to store the original (non-contiguous) number keys; will that cause any problems for `ArrayIter:next()`? \r\n\r\nDo we actually need the original number keys, or would it make sense to store `t` as a 1..n continguous \"list\" (as we did before)? Possibly I'm missing something, and maybe we need the number keys for `get()`-like functionality, or maybe we want to pass the number keys as `k` arg to the pipeline functions.",
            "commit_id": "ab0ff61b7e5a92bf5e4de780fa04317675bcb9f9",
            "created_at": "2024-05-16T19:03:58Z",
            "diff_hunk": "@@ -1030,17 +1031,18 @@ function Iter.new(src, ...)\n \n     local t = {}\n \n-    -- O(n): scan the source table to decide if it is a list (consecutive integer indices 1…n).\n-    local count = 0\n-    for _ in pairs(src) do\n-      count = count + 1\n-      local v = src[count]\n-      if v == nil then\n+    -- O(n): scan the source table to decide if it is an array (only positive integer indices).\n+    local length = 0\n+    for k, v in pairs(src) do\n+      if type(k) ~= 'number' or math.floor(k) ~= k then\n         return Iter.new(pairs(src))\n       end\n-      t[count] = v\n+      if k > length then\n+        length = k\n+      end\n+      t[k] = v\n     end\n-    return ListIter.new(t)\n+    return ArrayIter.new(t, length)",
            "html_url": "https://github.com/neovim/neovim/pull/28781#discussion_r1603905335",
            "id": 1603905335,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5fmac3",
            "original_commit_id": "1f9891f9157295d99df5330e8e8d78159574bca7",
            "original_line": 1045,
            "original_position": 303,
            "original_start_line": null,
            "path": "runtime/lua/vim/iter.lua",
            "position": null,
            "pull_request_review_id": 2061663901,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28781",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1603905335/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-16T19:04:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1603905335",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28781#discussion_r1603934340"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28781"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1603934340"
                }
            },
            "author_association": "MEMBER",
            "body": "I think this could go either way. If we keep the non-contiguous keys in the new array, then we have the property that `vim.iter(t):totable() == t` (holes and all). If we \"strip\" holes implicitly, then `vim.iter(t):totable()` serves the same purpose that people are using `vim.tbl_flatten()` for today in some cases (i.e. removing holes from an array).\r\n\r\nI think I slightly favor stripping holes, if for no other reason than arrays with holes are so fraught in Lua that it's easier to avoid them as much as possible (eliminates all kinds of edge cases).",
            "commit_id": "ab0ff61b7e5a92bf5e4de780fa04317675bcb9f9",
            "created_at": "2024-05-16T19:31:16Z",
            "diff_hunk": "@@ -1030,17 +1031,18 @@ function Iter.new(src, ...)\n \n     local t = {}\n \n-    -- O(n): scan the source table to decide if it is a list (consecutive integer indices 1…n).\n-    local count = 0\n-    for _ in pairs(src) do\n-      count = count + 1\n-      local v = src[count]\n-      if v == nil then\n+    -- O(n): scan the source table to decide if it is an array (only positive integer indices).\n+    local length = 0\n+    for k, v in pairs(src) do\n+      if type(k) ~= 'number' or math.floor(k) ~= k then\n         return Iter.new(pairs(src))\n       end\n-      t[count] = v\n+      if k > length then\n+        length = k\n+      end\n+      t[k] = v\n     end\n-    return ListIter.new(t)\n+    return ArrayIter.new(t, length)",
            "html_url": "https://github.com/neovim/neovim/pull/28781#discussion_r1603934340",
            "id": 1603934340,
            "in_reply_to_id": 1603905335,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5fmhiE",
            "original_commit_id": "1f9891f9157295d99df5330e8e8d78159574bca7",
            "original_line": 1045,
            "original_position": 303,
            "original_start_line": null,
            "path": "runtime/lua/vim/iter.lua",
            "position": null,
            "pull_request_review_id": 2061713003,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28781",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1603934340/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-16T19:31:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1603934340",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28781#discussion_r1603980751"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28781"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1603980751"
                }
            },
            "author_association": "MEMBER",
            "body": "> If we keep the non-contiguous keys in the new array, then we have the property that `vim.iter(t):totable() == t` (holes and all)\r\n\r\nThat seems desirable. OTOH, to preserve the non-contiguous keys the caller also has the option of passing `vim.iter(pairs(t))`, right?",
            "commit_id": "ab0ff61b7e5a92bf5e4de780fa04317675bcb9f9",
            "created_at": "2024-05-16T20:18:18Z",
            "diff_hunk": "@@ -1030,17 +1031,18 @@ function Iter.new(src, ...)\n \n     local t = {}\n \n-    -- O(n): scan the source table to decide if it is a list (consecutive integer indices 1…n).\n-    local count = 0\n-    for _ in pairs(src) do\n-      count = count + 1\n-      local v = src[count]\n-      if v == nil then\n+    -- O(n): scan the source table to decide if it is an array (only positive integer indices).\n+    local length = 0\n+    for k, v in pairs(src) do\n+      if type(k) ~= 'number' or math.floor(k) ~= k then\n         return Iter.new(pairs(src))\n       end\n-      t[count] = v\n+      if k > length then\n+        length = k\n+      end\n+      t[k] = v\n     end\n-    return ListIter.new(t)\n+    return ArrayIter.new(t, length)",
            "html_url": "https://github.com/neovim/neovim/pull/28781#discussion_r1603980751",
            "id": 1603980751,
            "in_reply_to_id": 1603905335,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5fms3P",
            "original_commit_id": "1f9891f9157295d99df5330e8e8d78159574bca7",
            "original_line": 1045,
            "original_position": 303,
            "original_start_line": null,
            "path": "runtime/lua/vim/iter.lua",
            "position": null,
            "pull_request_review_id": 2061790268,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28781",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1603980751/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-16T20:18:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1603980751",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28781#discussion_r1604037934"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28781"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1604037934"
                }
            },
            "author_association": "MEMBER",
            "body": "That's right. Another benefit of stripping holes is that any functions used in the iterator can behave consistently for both arrays and function iterators. A function iterator will never return `nil` (`nil` is the signal that the function iterator is done), so if we strip holes in arrays then we preserve that property.\r\n\r\n```lua\r\nvim.iter(s):filter(function(v)\r\n  -- v can never be nil, regardless of the value of s\r\nend)\r\n```\r\n\r\nI think it also makes the mental model more consistent. Right now if a pipeline stage returns `nil` (e.g. `:map()`) then that acts as removing an item from the iterator (future pipeline stages won't see that value). But if arrays were allowed to have nil values that would be inconsistent.\r\n\r\nThe more I think about it the more I do think that stripping `nil` is the right call, but we can always change it later if I'm wrong.",
            "commit_id": "ab0ff61b7e5a92bf5e4de780fa04317675bcb9f9",
            "created_at": "2024-05-16T21:04:09Z",
            "diff_hunk": "@@ -1030,17 +1031,18 @@ function Iter.new(src, ...)\n \n     local t = {}\n \n-    -- O(n): scan the source table to decide if it is a list (consecutive integer indices 1…n).\n-    local count = 0\n-    for _ in pairs(src) do\n-      count = count + 1\n-      local v = src[count]\n-      if v == nil then\n+    -- O(n): scan the source table to decide if it is an array (only positive integer indices).\n+    local length = 0\n+    for k, v in pairs(src) do\n+      if type(k) ~= 'number' or math.floor(k) ~= k then\n         return Iter.new(pairs(src))\n       end\n-      t[count] = v\n+      if k > length then\n+        length = k\n+      end\n+      t[k] = v\n     end\n-    return ListIter.new(t)\n+    return ArrayIter.new(t, length)",
            "html_url": "https://github.com/neovim/neovim/pull/28781#discussion_r1604037934",
            "id": 1604037934,
            "in_reply_to_id": 1603905335,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5fm60u",
            "original_commit_id": "1f9891f9157295d99df5330e8e8d78159574bca7",
            "original_line": 1045,
            "original_position": 303,
            "original_start_line": null,
            "path": "runtime/lua/vim/iter.lua",
            "position": null,
            "pull_request_review_id": 2061885542,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28781",
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1604037934/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-16T21:04:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1604037934",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28781#discussion_r1604252610"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28781"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1604252610"
                }
            },
            "author_association": "MEMBER",
            "body": "Due to L135:\r\n```\r\n-- short-circuit: this is not a list like table\r\n```\r\n\r\n`flatten()` on lists with hole still might fail:\r\n\r\n```lua\r\nvim.iter({nil, {1, nil, 2}, 3}):flatten(math.huge):totable()\r\n-- ERROR: flatten() requires an array-like table\r\n-- Expected: {1, 2, 3}\r\n-- BTW: vim.tbl_flatten { { 1, nil, 2 }, 3 } == { 1, 3 }. ?!?!??!?!????\r\n```\r\n\r\nFor the following, an expected output could be `{{1, nil, 2}, 3}` instead of an error, according to the array-like semantics:\r\n```\r\nvim.iter({nil, {1, nil, 2}, 3}):flatten():totable()\r\n-- ERROR: flatten() requires an array-like table\r\n```\r\nwhere depth = 1.",
            "commit_id": "ab0ff61b7e5a92bf5e4de780fa04317675bcb9f9",
            "created_at": "2024-05-17T02:04:39Z",
            "diff_hunk": "@@ -247,7 +249,7 @@ function ListIter:flatten(depth)\n \n     -- exit early if we try to flatten a dict-like table\n     if flattened == nil then\n-      error('flatten() requires a list-like table')\n+      error('flatten() requires an array-like table')",
            "html_url": "https://github.com/neovim/neovim/pull/28781#discussion_r1604252610",
            "id": 1604252610,
            "line": 249,
            "node_id": "PRRC_kwDOAPphoM5fnvPC",
            "original_commit_id": "bde66782cd044d48ef748d0be40f8988bb2a6edb",
            "original_line": 252,
            "original_position": 80,
            "original_start_line": null,
            "path": "runtime/lua/vim/iter.lua",
            "position": 102,
            "pull_request_review_id": 2062193449,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28781",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1604252610/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-17T02:18:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1604252610",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28781#discussion_r1605416351"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28781"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1605416351"
                }
            },
            "author_association": "MEMBER",
            "body": "Expected output of `vim.iter({nil, {1, nil, 2}, 3}):flatten():totable()` should be `{1, 2, 3}`.\r\n\r\n`vim.iter({nil, {1, nil, 2}, 3}):totable()` (no flatten) returns `{{1, nil, 2}, 3}`. Calling flatten on that would result in `{1, 2, 3}`.",
            "commit_id": "ab0ff61b7e5a92bf5e4de780fa04317675bcb9f9",
            "created_at": "2024-05-17T18:37:14Z",
            "diff_hunk": "@@ -247,7 +249,7 @@ function ListIter:flatten(depth)\n \n     -- exit early if we try to flatten a dict-like table\n     if flattened == nil then\n-      error('flatten() requires a list-like table')\n+      error('flatten() requires an array-like table')",
            "html_url": "https://github.com/neovim/neovim/pull/28781#discussion_r1605416351",
            "id": 1605416351,
            "in_reply_to_id": 1604252610,
            "line": 249,
            "node_id": "PRRC_kwDOAPphoM5fsLWf",
            "original_commit_id": "bde66782cd044d48ef748d0be40f8988bb2a6edb",
            "original_line": 252,
            "original_position": 80,
            "original_start_line": null,
            "path": "runtime/lua/vim/iter.lua",
            "position": 102,
            "pull_request_review_id": 2064153542,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28781",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1605416351/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-17T18:37:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1605416351",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28781#discussion_r1605446409"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28781"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1605446409"
                }
            },
            "author_association": "MEMBER",
            "body": "Oh that's right. My mistake; I was actually thinking about `vim.iter(**{** {nil, {1, nil, 2}, 3} **}** ):flatten(1):totable()` (one more depth) == `{ {1, nil, 3}, 3 }`. So the current implementation after the update seems correct: no longer errors.",
            "commit_id": "ab0ff61b7e5a92bf5e4de780fa04317675bcb9f9",
            "created_at": "2024-05-17T19:13:45Z",
            "diff_hunk": "@@ -247,7 +249,7 @@ function ListIter:flatten(depth)\n \n     -- exit early if we try to flatten a dict-like table\n     if flattened == nil then\n-      error('flatten() requires a list-like table')\n+      error('flatten() requires an array-like table')",
            "html_url": "https://github.com/neovim/neovim/pull/28781#discussion_r1605446409",
            "id": 1605446409,
            "in_reply_to_id": 1604252610,
            "line": 249,
            "node_id": "PRRC_kwDOAPphoM5fsSsJ",
            "original_commit_id": "bde66782cd044d48ef748d0be40f8988bb2a6edb",
            "original_line": 252,
            "original_position": 80,
            "original_start_line": null,
            "path": "runtime/lua/vim/iter.lua",
            "position": 102,
            "pull_request_review_id": 2064206691,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28781",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1605446409/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-17T19:13:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1605446409",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/28781#discussion_r1605452739"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/28781"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1605452739"
                }
            },
            "author_association": "MEMBER",
            "body": "So the behavior is like the latter, i.e. `vim.iter(t)` always strips holes, NOT `vim.iter(t):totable() == t`; e.g. `vim.iter({nil, 1, 2, nil, 3}):totable() == {1, 2, 3}`.\r\n\r\nWhile I agree that what's proposed makes sense and has many benefits, I'm not 100% convinced whether this is the best choice, because: (1) `vim.iter(t):totable() == t` also sounds sensible; (2) what if one wants to keep `nil` for any reason (instead, use `filter` explicitly to filter `nil`)?",
            "commit_id": "ab0ff61b7e5a92bf5e4de780fa04317675bcb9f9",
            "created_at": "2024-05-17T19:21:06Z",
            "diff_hunk": "@@ -1030,17 +1031,18 @@ function Iter.new(src, ...)\n \n     local t = {}\n \n-    -- O(n): scan the source table to decide if it is a list (consecutive integer indices 1…n).\n-    local count = 0\n-    for _ in pairs(src) do\n-      count = count + 1\n-      local v = src[count]\n-      if v == nil then\n+    -- O(n): scan the source table to decide if it is an array (only positive integer indices).\n+    local length = 0\n+    for k, v in pairs(src) do\n+      if type(k) ~= 'number' or math.floor(k) ~= k then\n         return Iter.new(pairs(src))\n       end\n-      t[count] = v\n+      if k > length then\n+        length = k\n+      end\n+      t[k] = v\n     end\n-    return ListIter.new(t)\n+    return ArrayIter.new(t, length)",
            "html_url": "https://github.com/neovim/neovim/pull/28781#discussion_r1605452739",
            "id": 1605452739,
            "in_reply_to_id": 1603905335,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5fsUPD",
            "original_commit_id": "1f9891f9157295d99df5330e8e8d78159574bca7",
            "original_line": 1045,
            "original_position": 303,
            "original_start_line": null,
            "path": "runtime/lua/vim/iter.lua",
            "position": null,
            "pull_request_review_id": 2064216723,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/28781",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1605452739/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-05-17T19:26:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1605452739",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "> The only thing that needs to change is the determination if a table is \"list-like\": rather than requiring consecutive, integer keys, we can simply test for integer keys only.\r\n\r\nLuckily, we have a function for that as well: `vim.isarray()` :)\r\n\r\n",
            "created_at": "2024-05-16T17:21:18Z",
            "html_url": "https://github.com/neovim/neovim/pull/28781#issuecomment-2115811956",
            "id": 2115811956,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28781",
            "node_id": "IC_kwDOAPphoM5-HLp0",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2115811956/reactions"
            },
            "updated_at": "2024-05-16T17:21:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2115811956",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Does this potentially (in the future) expand the capabilities of pipelines to work on array-like stuff? For reference, currently we have defined `:help list-iterator` and various pipeline operations say that they require that, in their docstrings.\r\n\r\nThis enables the whole vim.iter API to work with \"array like\" tables (i.e. lists with holes). If everything eventually uses vim.iter under the hood we could probably even relax the distinction between \"list\" and \"array\" (since both would be treated the same by the vim.iter API). It's still an important distinction though because Lua itself treats the two differently.",
            "created_at": "2024-05-16T18:29:52Z",
            "html_url": "https://github.com/neovim/neovim/pull/28781#issuecomment-2115936175",
            "id": 2115936175,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28781",
            "node_id": "IC_kwDOAPphoM5-Hp-v",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 1,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2115936175/reactions"
            },
            "updated_at": "2024-05-16T18:29:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2115936175",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Successfully created backport PR for `release-0.10`:\n- #28816",
            "created_at": "2024-05-17T19:17:44Z",
            "html_url": "https://github.com/neovim/neovim/pull/28781#issuecomment-2118234842",
            "id": 2118234842,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28781",
            "node_id": "IC_kwDOAPphoM5-QbLa",
            "performed_via_github_app": {
                "created_at": "2018-07-30T09:30:17Z",
                "description": "Automate your workflow from idea to production",
                "events": [
                    "branch_protection_rule",
                    "check_run",
                    "check_suite",
                    "create",
                    "delete",
                    "deployment",
                    "deployment_status",
                    "discussion",
                    "discussion_comment",
                    "fork",
                    "gollum",
                    "issues",
                    "issue_comment",
                    "label",
                    "merge_group",
                    "milestone",
                    "page_build",
                    "project",
                    "project_card",
                    "project_column",
                    "public",
                    "pull_request",
                    "pull_request_review",
                    "pull_request_review_comment",
                    "push",
                    "registry_package",
                    "release",
                    "repository",
                    "repository_dispatch",
                    "status",
                    "watch",
                    "workflow_dispatch",
                    "workflow_run"
                ],
                "external_url": "https://help.github.com/en/actions",
                "html_url": "https://github.com/apps/github-actions",
                "id": 15368,
                "name": "GitHub Actions",
                "node_id": "MDM6QXBwMTUzNjg=",
                "owner": {
                    "avatar_url": "https://avatars.githubusercontent.com/u/9919?v=4",
                    "events_url": "https://api.github.com/users/github/events{/privacy}",
                    "followers_url": "https://api.github.com/users/github/followers",
                    "following_url": "https://api.github.com/users/github/following{/other_user}",
                    "gists_url": "https://api.github.com/users/github/gists{/gist_id}",
                    "gravatar_id": "",
                    "html_url": "https://github.com/github",
                    "id": 9919,
                    "login": "github",
                    "node_id": "MDEyOk9yZ2FuaXphdGlvbjk5MTk=",
                    "organizations_url": "https://api.github.com/users/github/orgs",
                    "received_events_url": "https://api.github.com/users/github/received_events",
                    "repos_url": "https://api.github.com/users/github/repos",
                    "site_admin": false,
                    "starred_url": "https://api.github.com/users/github/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/github/subscriptions",
                    "type": "Organization",
                    "url": "https://api.github.com/users/github"
                },
                "permissions": {
                    "actions": "write",
                    "administration": "read",
                    "attestations": "write",
                    "checks": "write",
                    "contents": "write",
                    "deployments": "write",
                    "discussions": "write",
                    "issues": "write",
                    "merge_queues": "write",
                    "metadata": "read",
                    "packages": "write",
                    "pages": "write",
                    "pull_requests": "write",
                    "repository_hooks": "write",
                    "repository_projects": "write",
                    "security_events": "write",
                    "statuses": "write",
                    "vulnerability_alerts": "read"
                },
                "slug": "github-actions",
                "updated_at": "2024-04-10T20:33:16Z"
            },
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2118234842/reactions"
            },
            "updated_at": "2024-05-17T19:17:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2118234842",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4",
                "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}",
                "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers",
                "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}",
                "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/apps/github-actions",
                "id": 41898282,
                "login": "github-actions[bot]",
                "node_id": "MDM6Qm90NDE4OTgyODI=",
                "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs",
                "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events",
                "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions",
                "type": "Bot",
                "url": "https://api.github.com/users/github-actions%5Bbot%5D"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/28781/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/28781/commits",
    "created_at": "2024-05-16T16:55:23Z",
    "diff_url": "https://github.com/neovim/neovim/pull/28781.diff",
    "draft": false,
    "head": {
        "label": "gpanders:vim-iter-holes",
        "ref": "vim-iter-holes",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/gpanders/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/gpanders/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/gpanders/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/gpanders/neovim/branches{/branch}",
            "clone_url": "https://github.com/gpanders/neovim.git",
            "collaborators_url": "https://api.github.com/repos/gpanders/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/gpanders/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/gpanders/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/gpanders/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/gpanders/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/gpanders/neovim/contributors",
            "created_at": "2021-06-11T03:58:44Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/gpanders/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/gpanders/neovim/downloads",
            "events_url": "https://api.github.com/repos/gpanders/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/gpanders/neovim/forks",
            "full_name": "gpanders/neovim",
            "git_commits_url": "https://api.github.com/repos/gpanders/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/gpanders/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/gpanders/neovim/git/tags{/sha}",
            "git_url": "git://github.com/gpanders/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/gpanders/neovim/hooks",
            "html_url": "https://github.com/gpanders/neovim",
            "id": 375899052,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/gpanders/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/gpanders/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/gpanders/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/gpanders/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/gpanders/neovim/labels{/name}",
            "language": "Vim script",
            "languages_url": "https://api.github.com/repos/gpanders/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/gpanders/neovim/merges",
            "milestones_url": "https://api.github.com/repos/gpanders/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNzU4OTkwNTI=",
            "notifications_url": "https://api.github.com/repos/gpanders/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
                "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
                "followers_url": "https://api.github.com/users/gpanders/followers",
                "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
                "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gpanders",
                "id": 8965202,
                "login": "gpanders",
                "node_id": "MDQ6VXNlcjg5NjUyMDI=",
                "organizations_url": "https://api.github.com/users/gpanders/orgs",
                "received_events_url": "https://api.github.com/users/gpanders/received_events",
                "repos_url": "https://api.github.com/users/gpanders/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gpanders"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/gpanders/neovim/pulls{/number}",
            "pushed_at": "2024-05-20T16:25:52Z",
            "releases_url": "https://api.github.com/repos/gpanders/neovim/releases{/id}",
            "size": 264303,
            "ssh_url": "git@github.com:gpanders/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/gpanders/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/gpanders/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/gpanders/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/gpanders/neovim/subscription",
            "svn_url": "https://github.com/gpanders/neovim",
            "tags_url": "https://api.github.com/repos/gpanders/neovim/tags",
            "teams_url": "https://api.github.com/repos/gpanders/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/gpanders/neovim/git/trees{/sha}",
            "updated_at": "2022-01-07T19:38:08Z",
            "url": "https://api.github.com/repos/gpanders/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "ab0ff61b7e5a92bf5e4de780fa04317675bcb9f9",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
            "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
            "followers_url": "https://api.github.com/users/gpanders/followers",
            "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
            "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/gpanders",
            "id": 8965202,
            "login": "gpanders",
            "node_id": "MDQ6VXNlcjg5NjUyMDI=",
            "organizations_url": "https://api.github.com/users/gpanders/orgs",
            "received_events_url": "https://api.github.com/users/gpanders/received_events",
            "repos_url": "https://api.github.com/users/gpanders/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/gpanders"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/28781",
    "id": 1873907574,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/28781",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "4c0d18c19773327dcd771d1da7805690e3e41255",
    "merged_at": "2024-05-17T19:17:25Z",
    "milestone": {
        "closed_at": null,
        "closed_issues": 11,
        "created_at": "2023-12-07T23:09:35Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
            "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
            "followers_url": "https://api.github.com/users/justinmk/followers",
            "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
            "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/justinmk",
            "id": 1359421,
            "login": "justinmk",
            "node_id": "MDQ6VXNlcjEzNTk0MjE=",
            "organizations_url": "https://api.github.com/users/justinmk/orgs",
            "received_events_url": "https://api.github.com/users/justinmk/received_events",
            "repos_url": "https://api.github.com/users/justinmk/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/justinmk"
        },
        "description": "",
        "due_on": "2024-10-31T07:00:00Z",
        "html_url": "https://github.com/neovim/neovim/milestone/41",
        "id": 10283236,
        "labels_url": "https://api.github.com/repos/neovim/neovim/milestones/41/labels",
        "node_id": "MI_kwDOAPphoM4AnOjk",
        "number": 41,
        "open_issues": 59,
        "state": "open",
        "title": "0.11",
        "updated_at": "2024-05-19T22:02:51Z",
        "url": "https://api.github.com/repos/neovim/neovim/milestones/41"
    },
    "node_id": "PR_kwDOAPphoM5vsY92",
    "number": 28781,
    "patch_url": "https://github.com/neovim/neovim/pull/28781.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/28781/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/ab0ff61b7e5a92bf5e4de780fa04317675bcb9f9",
    "title": "fix(vim.iter): enable optimizations for arrays (lists with holes)",
    "updated_at": "2024-05-17T21:52:18Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/28781",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/8965202?v=4",
        "events_url": "https://api.github.com/users/gpanders/events{/privacy}",
        "followers_url": "https://api.github.com/users/gpanders/followers",
        "following_url": "https://api.github.com/users/gpanders/following{/other_user}",
        "gists_url": "https://api.github.com/users/gpanders/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/gpanders",
        "id": 8965202,
        "login": "gpanders",
        "node_id": "MDQ6VXNlcjg5NjUyMDI=",
        "organizations_url": "https://api.github.com/users/gpanders/orgs",
        "received_events_url": "https://api.github.com/users/gpanders/received_events",
        "repos_url": "https://api.github.com/users/gpanders/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/gpanders/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gpanders/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/gpanders"
    }
}