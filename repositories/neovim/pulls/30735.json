{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/30735/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/30735/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/30735"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/30735"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/30735/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/30735"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/2acdf7cc948809d209177587f768363da6dc8c0c"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5682,
            "forks_count": 5682,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1804,
            "open_issues_count": 1804,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-10-29T01:08:05Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 291853,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 82872,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-10-29T01:08:09Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 82872,
            "watchers_count": 82872,
            "web_commit_signoff_required": false
        },
        "sha": "e178331488a0fb6a9c48152511a21a3f95d66750",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim",
            "user_view_type": "public"
        }
    },
    "body": "Discussion from #30804",
    "closed_at": "2024-10-23T13:33:57Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30735#discussion_r1793951354"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30735"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1793951354"
                }
            },
            "author_association": "MEMBER",
            "body": "use parens for clarity/explicitness\r\n```suggestion\r\n    return (vim.__str_byteindex(s, index, true) or opts.error) and error('index out of range') or len\r\n```",
            "commit_id": "2acdf7cc948809d209177587f768363da6dc8c0c",
            "created_at": "2024-10-09T18:10:59Z",
            "diff_hunk": "@@ -715,6 +721,57 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n+--- Convert UTF-32 or UTF-16 {index} to byte index.\n+--- {opts} can be a table containing two properties:i\n+--- * an \"encoding\" property of \"utf-8\", \"utf-16\" or \"utf-32\"\n+--- * an \"error\" property of true or false, if error is false\n+--- then then an out of range index will return byte length\n+--- instead of throwing an error.\n+---\n+--- {opts} can also be supplied as a boolean, true for utf-16 and false for utf-32.\n+--- If {opts} is not supplied, it defaults to false (UTF-32). Returns the byte index.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param index integer\n+---@param opts? boolean|nil| { encoding: \"utf-8\"|\"utf-16\"|\"utf-32\", error?: boolean }\n+---@return integer\n+function vim.str_byteindex(s, index, opts)\n+  if type(opts) == 'boolean' or not opts then\n+    return vim.__str_byteindex(s, index, opts) or error('index out of range')\n+  end\n+\n+  vim.validate('s', s, 'string')\n+  vim.validate('index', index, 'number')\n+\n+  local len = #s\n+\n+  if index == 0 or len == 0 then\n+    return 0\n+  end\n+\n+  opts = opts or { encoding = 'utf-32', error = true }\n+  local encoding = opts.encoding or 'utf-32'\n+  if not utfs[encoding] then\n+    error('Invalid encoding: ' .. encoding)\n+  end\n+\n+  if encoding == 'utf-8' then\n+    if index > len then\n+      return opts.error and error('index out of range') or len\n+    end\n+    return index\n+  elseif encoding == 'utf-16' then\n+    return vim.__str_byteindex(s, index, true) or opts.error and error('index out of range') or len",
            "html_url": "https://github.com/neovim/neovim/pull/30735#discussion_r1793951354",
            "id": 1793951354,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5q7YZ6",
            "original_commit_id": "a749e12aeab8dae53f1a706b37fe6b6b0a93030f",
            "original_line": 767,
            "original_position": 60,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2357855556,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30735",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1793951354/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-09T18:11:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1793951354",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30735#discussion_r1808526453"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30735"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1808526453"
                }
            },
            "author_association": "MEMBER",
            "body": "This line isn't necessary. ",
            "commit_id": "2acdf7cc948809d209177587f768363da6dc8c0c",
            "created_at": "2024-10-21T10:42:42Z",
            "diff_hunk": "@@ -715,7 +721,135 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n---- Generates a list of possible completions for the string.\n+--- Convert UTF-32, UTF-16 or UTF-8 {index} to byte index.\n+--- If {no_out_of_range} is true\n+--- then then an out of range index will return byte length\n+--- instead of throwing an error.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param encoding \"utf-8\"|\"utf-16\"|\"utf-32\"\n+---@param index integer\n+---@param no_out_of_range? boolean\n+---@return integer\n+function vim.str_byteindex(s, encoding, index, no_out_of_range)\n+  if type(encoding) == 'number' then\n+    -- Legacy support for old API\n+    -- Parameters: ~\n+    --   • {str}        (`string`)\n+    --   • {index}      (`integer`)\n+    --   • {use_utf16}  (`boolean?`)\n+    local old_index = encoding\n+    local use_utf16 = index or false\n+    return vim.__str_byteindex(s, old_index, use_utf16) or error('index out of range')\n+  end\n+\n+  vim.validate('s', s, 'string')\n+  vim.validate('index', index, 'number')\n+  vim.validate('encoding', encoding, 'string')\n+  vim.validate('no_out_of_range', no_out_of_range, 'boolean', true)\n+\n+  local len = #s\n+\n+  if index == 0 or len == 0 then\n+    return 0\n+  end\n+\n+  no_out_of_range = no_out_of_range or false",
            "html_url": "https://github.com/neovim/neovim/pull/30735#discussion_r1808526453",
            "id": 1808526453,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ry-x1",
            "original_commit_id": "e9b501b07a0a526cdce2616a23c762d3f1a0a523",
            "original_line": 760,
            "original_position": 54,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2381632777,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30735",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1808526453/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-21T10:59:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1808526453",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30735#discussion_r1808527921"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30735"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1808527921"
                }
            },
            "author_association": "MEMBER",
            "body": "This can be combined into line 751. For performance, we can move the vim.validate call here.",
            "commit_id": "2acdf7cc948809d209177587f768363da6dc8c0c",
            "created_at": "2024-10-21T10:43:40Z",
            "diff_hunk": "@@ -715,7 +721,135 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n---- Generates a list of possible completions for the string.\n+--- Convert UTF-32, UTF-16 or UTF-8 {index} to byte index.\n+--- If {no_out_of_range} is true\n+--- then then an out of range index will return byte length\n+--- instead of throwing an error.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param encoding \"utf-8\"|\"utf-16\"|\"utf-32\"\n+---@param index integer\n+---@param no_out_of_range? boolean\n+---@return integer\n+function vim.str_byteindex(s, encoding, index, no_out_of_range)\n+  if type(encoding) == 'number' then\n+    -- Legacy support for old API\n+    -- Parameters: ~\n+    --   • {str}        (`string`)\n+    --   • {index}      (`integer`)\n+    --   • {use_utf16}  (`boolean?`)\n+    local old_index = encoding\n+    local use_utf16 = index or false\n+    return vim.__str_byteindex(s, old_index, use_utf16) or error('index out of range')\n+  end\n+\n+  vim.validate('s', s, 'string')\n+  vim.validate('index', index, 'number')\n+  vim.validate('encoding', encoding, 'string')\n+  vim.validate('no_out_of_range', no_out_of_range, 'boolean', true)\n+\n+  local len = #s\n+\n+  if index == 0 or len == 0 then\n+    return 0\n+  end\n+\n+  no_out_of_range = no_out_of_range or false\n+  if not utfs[encoding] then\n+    error('Invalid encoding: ' .. encoding)\n+  end",
            "html_url": "https://github.com/neovim/neovim/pull/30735#discussion_r1808527921",
            "id": 1808527921,
            "line": 764,
            "node_id": "PRRC_kwDOAPphoM5ry_Ix",
            "original_commit_id": "e9b501b07a0a526cdce2616a23c762d3f1a0a523",
            "original_line": 764,
            "original_position": 57,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": 59,
            "pull_request_review_id": 2381632777,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30735",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1808527921/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-21T10:59:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1808527921",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30735#discussion_r1808530248"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30735"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1808530248"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  end\r\n  \r\n  return vim.__str_byteindex(s, index, encoding == 'utf-16')\r\n    or no_out_of_range and len\r\n    or error('index out of range')\r\n```",
            "commit_id": "2acdf7cc948809d209177587f768363da6dc8c0c",
            "created_at": "2024-10-21T10:45:31Z",
            "diff_hunk": "@@ -715,7 +721,135 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n---- Generates a list of possible completions for the string.\n+--- Convert UTF-32, UTF-16 or UTF-8 {index} to byte index.\n+--- If {no_out_of_range} is true\n+--- then then an out of range index will return byte length\n+--- instead of throwing an error.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param encoding \"utf-8\"|\"utf-16\"|\"utf-32\"\n+---@param index integer\n+---@param no_out_of_range? boolean\n+---@return integer\n+function vim.str_byteindex(s, encoding, index, no_out_of_range)\n+  if type(encoding) == 'number' then\n+    -- Legacy support for old API\n+    -- Parameters: ~\n+    --   • {str}        (`string`)\n+    --   • {index}      (`integer`)\n+    --   • {use_utf16}  (`boolean?`)\n+    local old_index = encoding\n+    local use_utf16 = index or false\n+    return vim.__str_byteindex(s, old_index, use_utf16) or error('index out of range')\n+  end\n+\n+  vim.validate('s', s, 'string')\n+  vim.validate('index', index, 'number')\n+  vim.validate('encoding', encoding, 'string')\n+  vim.validate('no_out_of_range', no_out_of_range, 'boolean', true)\n+\n+  local len = #s\n+\n+  if index == 0 or len == 0 then\n+    return 0\n+  end\n+\n+  no_out_of_range = no_out_of_range or false\n+  if not utfs[encoding] then\n+    error('Invalid encoding: ' .. encoding)\n+  end\n+\n+  if encoding == 'utf-8' then\n+    if index > len then\n+      return no_out_of_range and len or error('index out of range')\n+    end\n+    return index\n+  elseif encoding == 'utf-16' then\n+    return vim.__str_byteindex(s, index, true)\n+      or no_out_of_range and len\n+      or error('index out of range')\n+  elseif encoding == 'utf-32' then\n+    return vim.__str_byteindex(s, index, false)\n+      or no_out_of_range and len\n+      or error('index out of range')\n+  end\n+\n+  return len",
            "html_url": "https://github.com/neovim/neovim/pull/30735#discussion_r1808530248",
            "id": 1808530248,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ry_tI",
            "original_commit_id": "e9b501b07a0a526cdce2616a23c762d3f1a0a523",
            "original_line": 780,
            "original_position": 74,
            "original_start_line": 770,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2381632777,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30735",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1808530248/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-10-21T10:59:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1808530248",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30735#discussion_r1808532214"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30735"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1808532214"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    local old_index = encoding\r\n```",
            "commit_id": "2acdf7cc948809d209177587f768363da6dc8c0c",
            "created_at": "2024-10-21T10:47:09Z",
            "diff_hunk": "@@ -715,7 +721,135 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n---- Generates a list of possible completions for the string.\n+--- Convert UTF-32, UTF-16 or UTF-8 {index} to byte index.\n+--- If {no_out_of_range} is true\n+--- then then an out of range index will return byte length\n+--- instead of throwing an error.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param encoding \"utf-8\"|\"utf-16\"|\"utf-32\"\n+---@param index integer\n+---@param no_out_of_range? boolean\n+---@return integer\n+function vim.str_byteindex(s, encoding, index, no_out_of_range)\n+  if type(encoding) == 'number' then\n+    -- Legacy support for old API\n+    -- Parameters: ~\n+    --   • {str}        (`string`)\n+    --   • {index}      (`integer`)\n+    --   • {use_utf16}  (`boolean?`)\n+    local old_index = encoding\n+    local use_utf16 = index or false\n+    return vim.__str_byteindex(s, old_index, use_utf16) or error('index out of range')\n+  end\n+\n+  vim.validate('s', s, 'string')\n+  vim.validate('index', index, 'number')\n+  vim.validate('encoding', encoding, 'string')\n+  vim.validate('no_out_of_range', no_out_of_range, 'boolean', true)\n+\n+  local len = #s\n+\n+  if index == 0 or len == 0 then\n+    return 0\n+  end\n+\n+  no_out_of_range = no_out_of_range or false\n+  if not utfs[encoding] then\n+    error('Invalid encoding: ' .. encoding)\n+  end\n+\n+  if encoding == 'utf-8' then\n+    if index > len then\n+      return no_out_of_range and len or error('index out of range')\n+    end\n+    return index\n+  elseif encoding == 'utf-16' then\n+    return vim.__str_byteindex(s, index, true)\n+      or no_out_of_range and len\n+      or error('index out of range')\n+  elseif encoding == 'utf-32' then\n+    return vim.__str_byteindex(s, index, false)\n+      or no_out_of_range and len\n+      or error('index out of range')\n+  end\n+\n+  return len\n+end\n+\n+--- Convert byte index to UTF-32, UTF-16 or UTF-8 indices. If {index} is not\n+--- supplied, the length of the string is used. All indices are zero-based.\n+---\n+--- If {no_out_of_range} is true then an out of range index will return string\n+--- length instead of throwing an error.\n+--- Invalid UTF-8 bytes, and embedded surrogates are counted as one code point\n+--- each. An {index} in the middle of a UTF-8 sequence is rounded upwards to the end of\n+--- that sequence.\n+---@param s string\n+---@param encoding \"utf-8\"|\"utf-16\"|\"utf-32\"\n+---@param index integer\n+---@param no_out_of_range? boolean\n+---@return integer\n+function vim.str_utfindex(s, encoding, index, no_out_of_range)\n+  if encoding == nil or type(encoding) == 'number' then\n+    -- Legacy support for old API\n+    -- Parameters: ~\n+    --   • {str}    (`string`)\n+    --   • {index}  (`integer?`)\n+    local old_index = encoding or nil",
            "html_url": "https://github.com/neovim/neovim/pull/30735#discussion_r1808532214",
            "id": 1808532214,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5rzAL2",
            "original_commit_id": "e9b501b07a0a526cdce2616a23c762d3f1a0a523",
            "original_line": 802,
            "original_position": 96,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2381632777,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30735",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1808532214/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-21T10:59:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1808532214",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30735#discussion_r1808533879"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30735"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1808533879"
                }
            },
            "author_association": "MEMBER",
            "body": "Not needed",
            "commit_id": "2acdf7cc948809d209177587f768363da6dc8c0c",
            "created_at": "2024-10-21T10:48:22Z",
            "diff_hunk": "@@ -715,7 +721,135 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n---- Generates a list of possible completions for the string.\n+--- Convert UTF-32, UTF-16 or UTF-8 {index} to byte index.\n+--- If {no_out_of_range} is true\n+--- then then an out of range index will return byte length\n+--- instead of throwing an error.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param encoding \"utf-8\"|\"utf-16\"|\"utf-32\"\n+---@param index integer\n+---@param no_out_of_range? boolean\n+---@return integer\n+function vim.str_byteindex(s, encoding, index, no_out_of_range)\n+  if type(encoding) == 'number' then\n+    -- Legacy support for old API\n+    -- Parameters: ~\n+    --   • {str}        (`string`)\n+    --   • {index}      (`integer`)\n+    --   • {use_utf16}  (`boolean?`)\n+    local old_index = encoding\n+    local use_utf16 = index or false\n+    return vim.__str_byteindex(s, old_index, use_utf16) or error('index out of range')\n+  end\n+\n+  vim.validate('s', s, 'string')\n+  vim.validate('index', index, 'number')\n+  vim.validate('encoding', encoding, 'string')\n+  vim.validate('no_out_of_range', no_out_of_range, 'boolean', true)\n+\n+  local len = #s\n+\n+  if index == 0 or len == 0 then\n+    return 0\n+  end\n+\n+  no_out_of_range = no_out_of_range or false\n+  if not utfs[encoding] then\n+    error('Invalid encoding: ' .. encoding)\n+  end\n+\n+  if encoding == 'utf-8' then\n+    if index > len then\n+      return no_out_of_range and len or error('index out of range')\n+    end\n+    return index\n+  elseif encoding == 'utf-16' then\n+    return vim.__str_byteindex(s, index, true)\n+      or no_out_of_range and len\n+      or error('index out of range')\n+  elseif encoding == 'utf-32' then\n+    return vim.__str_byteindex(s, index, false)\n+      or no_out_of_range and len\n+      or error('index out of range')\n+  end\n+\n+  return len\n+end\n+\n+--- Convert byte index to UTF-32, UTF-16 or UTF-8 indices. If {index} is not\n+--- supplied, the length of the string is used. All indices are zero-based.\n+---\n+--- If {no_out_of_range} is true then an out of range index will return string\n+--- length instead of throwing an error.\n+--- Invalid UTF-8 bytes, and embedded surrogates are counted as one code point\n+--- each. An {index} in the middle of a UTF-8 sequence is rounded upwards to the end of\n+--- that sequence.\n+---@param s string\n+---@param encoding \"utf-8\"|\"utf-16\"|\"utf-32\"\n+---@param index integer\n+---@param no_out_of_range? boolean\n+---@return integer\n+function vim.str_utfindex(s, encoding, index, no_out_of_range)\n+  if encoding == nil or type(encoding) == 'number' then\n+    -- Legacy support for old API\n+    -- Parameters: ~\n+    --   • {str}    (`string`)\n+    --   • {index}  (`integer?`)\n+    local old_index = encoding or nil\n+    local col32, col16 = vim.__str_utfindex(s, old_index) --[[@as integer,integer]]\n+    if not col32 or not col16 then\n+      error('index out of range')\n+    end\n+    -- Return (multiple): ~\n+    --     (`integer`) UTF-32 index\n+    --     (`integer`) UTF-16 index\n+    return col32, col16\n+  end\n+\n+  if index == 0 then\n+    return 0\n+  end\n+  no_out_of_range = no_out_of_range or false",
            "html_url": "https://github.com/neovim/neovim/pull/30735#discussion_r1808533879",
            "id": 1808533879,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5rzAl3",
            "original_commit_id": "e9b501b07a0a526cdce2616a23c762d3f1a0a523",
            "original_line": 816,
            "original_position": 110,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2381632777,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30735",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1808533879/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-21T10:59:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1808533879",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30735#discussion_r1808544057"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30735"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1808544057"
                }
            },
            "author_association": "MEMBER",
            "body": "Assuming that `col16/32` and `max16/32` are `nil` together.\r\n\r\n```suggestion\r\n  local col = encoding == 'utf-16' and col16 or col32\r\n\r\n  if col then\r\n    return col\r\n  end\r\n  if not no_out_of_range then\r\n    error('index out of range')\r\n  end\r\n  local max32, max16 = vim.__str_utfindex(s) --[[@as integer,integer]]\r\n  return encoding == 'utf-16' and max16 or max32\r\n```",
            "commit_id": "2acdf7cc948809d209177587f768363da6dc8c0c",
            "created_at": "2024-10-21T10:54:41Z",
            "diff_hunk": "@@ -715,7 +721,135 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n---- Generates a list of possible completions for the string.\n+--- Convert UTF-32, UTF-16 or UTF-8 {index} to byte index.\n+--- If {no_out_of_range} is true\n+--- then then an out of range index will return byte length\n+--- instead of throwing an error.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param encoding \"utf-8\"|\"utf-16\"|\"utf-32\"\n+---@param index integer\n+---@param no_out_of_range? boolean\n+---@return integer\n+function vim.str_byteindex(s, encoding, index, no_out_of_range)\n+  if type(encoding) == 'number' then\n+    -- Legacy support for old API\n+    -- Parameters: ~\n+    --   • {str}        (`string`)\n+    --   • {index}      (`integer`)\n+    --   • {use_utf16}  (`boolean?`)\n+    local old_index = encoding\n+    local use_utf16 = index or false\n+    return vim.__str_byteindex(s, old_index, use_utf16) or error('index out of range')\n+  end\n+\n+  vim.validate('s', s, 'string')\n+  vim.validate('index', index, 'number')\n+  vim.validate('encoding', encoding, 'string')\n+  vim.validate('no_out_of_range', no_out_of_range, 'boolean', true)\n+\n+  local len = #s\n+\n+  if index == 0 or len == 0 then\n+    return 0\n+  end\n+\n+  no_out_of_range = no_out_of_range or false\n+  if not utfs[encoding] then\n+    error('Invalid encoding: ' .. encoding)\n+  end\n+\n+  if encoding == 'utf-8' then\n+    if index > len then\n+      return no_out_of_range and len or error('index out of range')\n+    end\n+    return index\n+  elseif encoding == 'utf-16' then\n+    return vim.__str_byteindex(s, index, true)\n+      or no_out_of_range and len\n+      or error('index out of range')\n+  elseif encoding == 'utf-32' then\n+    return vim.__str_byteindex(s, index, false)\n+      or no_out_of_range and len\n+      or error('index out of range')\n+  end\n+\n+  return len\n+end\n+\n+--- Convert byte index to UTF-32, UTF-16 or UTF-8 indices. If {index} is not\n+--- supplied, the length of the string is used. All indices are zero-based.\n+---\n+--- If {no_out_of_range} is true then an out of range index will return string\n+--- length instead of throwing an error.\n+--- Invalid UTF-8 bytes, and embedded surrogates are counted as one code point\n+--- each. An {index} in the middle of a UTF-8 sequence is rounded upwards to the end of\n+--- that sequence.\n+---@param s string\n+---@param encoding \"utf-8\"|\"utf-16\"|\"utf-32\"\n+---@param index integer\n+---@param no_out_of_range? boolean\n+---@return integer\n+function vim.str_utfindex(s, encoding, index, no_out_of_range)\n+  if encoding == nil or type(encoding) == 'number' then\n+    -- Legacy support for old API\n+    -- Parameters: ~\n+    --   • {str}    (`string`)\n+    --   • {index}  (`integer?`)\n+    local old_index = encoding or nil\n+    local col32, col16 = vim.__str_utfindex(s, old_index) --[[@as integer,integer]]\n+    if not col32 or not col16 then\n+      error('index out of range')\n+    end\n+    -- Return (multiple): ~\n+    --     (`integer`) UTF-32 index\n+    --     (`integer`) UTF-16 index\n+    return col32, col16\n+  end\n+\n+  if index == 0 then\n+    return 0\n+  end\n+  no_out_of_range = no_out_of_range or false\n+\n+  if not utfs[encoding] then\n+    error('Invalid encoding: ' .. encoding)\n+  end\n+\n+  if encoding == 'utf-8' then\n+    local len = #s\n+    if not index then\n+      return len\n+    end\n+    if index > len then\n+      return no_out_of_range and len or error('index out of range')\n+    end\n+    return index\n+  end\n+  local col32, col16 = vim.__str_utfindex(s, index) --[[@as integer?,integer?]]\n+  local max32, max16 --[[@type integer,integer]]\n+  if no_out_of_range then\n+    max32, max16 = vim.__str_utfindex(s) --[[@as integer,integer]]\n+  end\n+  if encoding == 'utf-16' then\n+    if not col16 then\n+      return no_out_of_range and max16 or error('index out of range')\n+    end\n+    return col16\n+  elseif encoding == 'utf-32' then\n+    if not col32 then\n+      return no_out_of_range and max32 or error('index out of range')\n+    end\n+    return col32\n+  end\n+\n+  error('Invalid encoding: ' .. encoding)",
            "html_url": "https://github.com/neovim/neovim/pull/30735#discussion_r1808544057",
            "id": 1808544057,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5rzDE5",
            "original_commit_id": "e9b501b07a0a526cdce2616a23c762d3f1a0a523",
            "original_line": 849,
            "original_position": 143,
            "original_start_line": 833,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2381632777,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30735",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1808544057/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-10-21T10:59:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1808544057",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30735#discussion_r1808549933"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30735"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1808549933"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n    if index and index > len and not no_out_of_range then\r\n      error('index out of range')\r\n    end\r\n    return len\r\n```",
            "commit_id": "2acdf7cc948809d209177587f768363da6dc8c0c",
            "created_at": "2024-10-21T10:59:02Z",
            "diff_hunk": "@@ -715,7 +721,135 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n---- Generates a list of possible completions for the string.\n+--- Convert UTF-32, UTF-16 or UTF-8 {index} to byte index.\n+--- If {no_out_of_range} is true\n+--- then then an out of range index will return byte length\n+--- instead of throwing an error.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param encoding \"utf-8\"|\"utf-16\"|\"utf-32\"\n+---@param index integer\n+---@param no_out_of_range? boolean\n+---@return integer\n+function vim.str_byteindex(s, encoding, index, no_out_of_range)\n+  if type(encoding) == 'number' then\n+    -- Legacy support for old API\n+    -- Parameters: ~\n+    --   • {str}        (`string`)\n+    --   • {index}      (`integer`)\n+    --   • {use_utf16}  (`boolean?`)\n+    local old_index = encoding\n+    local use_utf16 = index or false\n+    return vim.__str_byteindex(s, old_index, use_utf16) or error('index out of range')\n+  end\n+\n+  vim.validate('s', s, 'string')\n+  vim.validate('index', index, 'number')\n+  vim.validate('encoding', encoding, 'string')\n+  vim.validate('no_out_of_range', no_out_of_range, 'boolean', true)\n+\n+  local len = #s\n+\n+  if index == 0 or len == 0 then\n+    return 0\n+  end\n+\n+  no_out_of_range = no_out_of_range or false\n+  if not utfs[encoding] then\n+    error('Invalid encoding: ' .. encoding)\n+  end\n+\n+  if encoding == 'utf-8' then\n+    if index > len then\n+      return no_out_of_range and len or error('index out of range')\n+    end\n+    return index\n+  elseif encoding == 'utf-16' then\n+    return vim.__str_byteindex(s, index, true)\n+      or no_out_of_range and len\n+      or error('index out of range')\n+  elseif encoding == 'utf-32' then\n+    return vim.__str_byteindex(s, index, false)\n+      or no_out_of_range and len\n+      or error('index out of range')\n+  end\n+\n+  return len\n+end\n+\n+--- Convert byte index to UTF-32, UTF-16 or UTF-8 indices. If {index} is not\n+--- supplied, the length of the string is used. All indices are zero-based.\n+---\n+--- If {no_out_of_range} is true then an out of range index will return string\n+--- length instead of throwing an error.\n+--- Invalid UTF-8 bytes, and embedded surrogates are counted as one code point\n+--- each. An {index} in the middle of a UTF-8 sequence is rounded upwards to the end of\n+--- that sequence.\n+---@param s string\n+---@param encoding \"utf-8\"|\"utf-16\"|\"utf-32\"\n+---@param index integer\n+---@param no_out_of_range? boolean\n+---@return integer\n+function vim.str_utfindex(s, encoding, index, no_out_of_range)\n+  if encoding == nil or type(encoding) == 'number' then\n+    -- Legacy support for old API\n+    -- Parameters: ~\n+    --   • {str}    (`string`)\n+    --   • {index}  (`integer?`)\n+    local old_index = encoding or nil\n+    local col32, col16 = vim.__str_utfindex(s, old_index) --[[@as integer,integer]]\n+    if not col32 or not col16 then\n+      error('index out of range')\n+    end\n+    -- Return (multiple): ~\n+    --     (`integer`) UTF-32 index\n+    --     (`integer`) UTF-16 index\n+    return col32, col16\n+  end\n+\n+  if index == 0 then\n+    return 0\n+  end\n+  no_out_of_range = no_out_of_range or false\n+\n+  if not utfs[encoding] then\n+    error('Invalid encoding: ' .. encoding)\n+  end\n+\n+  if encoding == 'utf-8' then\n+    local len = #s\n+    if not index then\n+      return len\n+    end\n+    if index > len then\n+      return no_out_of_range and len or error('index out of range')\n+    end",
            "html_url": "https://github.com/neovim/neovim/pull/30735#discussion_r1808549933",
            "id": 1808549933,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5rzEgt",
            "original_commit_id": "e9b501b07a0a526cdce2616a23c762d3f1a0a523",
            "original_line": 822,
            "original_position": 123,
            "original_start_line": 824,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2381632777,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30735",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1808549933/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-10-21T10:59:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1808549933",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30735#discussion_r1809463781"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30735"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1809463781"
                }
            },
            "author_association": "MEMBER",
            "body": "I'm not sure use of positional arguments for this kind of boolean flag or options is the best choice. Can we use `opt` table for this?",
            "commit_id": "2acdf7cc948809d209177587f768363da6dc8c0c",
            "created_at": "2024-10-21T20:15:15Z",
            "diff_hunk": "@@ -714,7 +720,119 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n---- Generates a list of possible completions for the string.\n+--- Convert UTF-32, UTF-16 or UTF-8 {index} to byte index.\n+--- If {no_out_of_range} is true\n+--- then then an out of range index will return byte length\n+--- instead of throwing an error.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param encoding \"utf-8\"|\"utf-16\"|\"utf-32\"\n+---@param index integer\n+---@param no_out_of_range? boolean",
            "html_url": "https://github.com/neovim/neovim/pull/30735#discussion_r1809463781",
            "id": 1809463781,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5r2jnl",
            "original_commit_id": "cc7febb02e571ff4a77ebe83cfad3e89bba49111",
            "original_line": 734,
            "original_position": 29,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2383222147,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30735",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1809463781/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-21T20:15:15Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1809463781",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1009873?v=4",
                "events_url": "https://api.github.com/users/wookayin/events{/privacy}",
                "followers_url": "https://api.github.com/users/wookayin/followers",
                "following_url": "https://api.github.com/users/wookayin/following{/other_user}",
                "gists_url": "https://api.github.com/users/wookayin/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/wookayin",
                "id": 1009873,
                "login": "wookayin",
                "node_id": "MDQ6VXNlcjEwMDk4NzM=",
                "organizations_url": "https://api.github.com/users/wookayin/orgs",
                "received_events_url": "https://api.github.com/users/wookayin/received_events",
                "repos_url": "https://api.github.com/users/wookayin/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/wookayin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/wookayin/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/wookayin",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30735#discussion_r1809465833"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30735"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1809465833"
                }
            },
            "author_association": "MEMBER",
            "body": "These types of functions are typically used in hot loops where the table allocation may be significant.\n\nFor most usages, the first 3 arguments are quite necessary. If we ever need to add more options (I doubt we will), then the 4th option _could_ be retrofitted into an opts table.",
            "commit_id": "2acdf7cc948809d209177587f768363da6dc8c0c",
            "created_at": "2024-10-21T20:16:44Z",
            "diff_hunk": "@@ -714,7 +720,119 @@ function vim._on_key(buf, typed_buf)\n   end\n end\n \n---- Generates a list of possible completions for the string.\n+--- Convert UTF-32, UTF-16 or UTF-8 {index} to byte index.\n+--- If {no_out_of_range} is true\n+--- then then an out of range index will return byte length\n+--- instead of throwing an error.\n+---\n+--- Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|.\n+--- An {index} in the middle of a UTF-16 sequence is rounded upwards to\n+--- the end of that sequence.\n+---@param s string\n+---@param encoding \"utf-8\"|\"utf-16\"|\"utf-32\"\n+---@param index integer\n+---@param no_out_of_range? boolean",
            "html_url": "https://github.com/neovim/neovim/pull/30735#discussion_r1809465833",
            "id": 1809465833,
            "in_reply_to_id": 1809463781,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5r2kHp",
            "original_commit_id": "cc7febb02e571ff4a77ebe83cfad3e89bba49111",
            "original_line": 734,
            "original_position": 29,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": null,
            "pull_request_review_id": 2383224678,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30735",
            "reactions": {
                "+1": 3,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 3,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1809465833/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-21T20:17:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1809465833",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30735#discussion_r1809580691"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30735"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1809580691"
                }
            },
            "author_association": "MEMBER",
            "body": "did you generate this with `make doc`? I wonder why it's out of order now. (not a blocker)",
            "commit_id": "2acdf7cc948809d209177587f768363da6dc8c0c",
            "created_at": "2024-10-21T21:49:15Z",
            "diff_hunk": "@@ -1776,6 +1743,44 @@ vim.schedule_wrap({fn})                                  *vim.schedule_wrap()*\n       • |vim.schedule()|\n       • |vim.in_fast_event()|\n \n+                                                         *vim.str_byteindex()*\n+vim.str_byteindex({s}, {encoding}, {index}, {no_out_of_range})",
            "html_url": "https://github.com/neovim/neovim/pull/30735#discussion_r1809580691",
            "id": 1809580691,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5r3AKT",
            "original_commit_id": "cc7febb02e571ff4a77ebe83cfad3e89bba49111",
            "original_line": 1747,
            "original_position": 52,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2383369244,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30735",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1809580691/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-21T21:49:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1809580691",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30735#discussion_r1809583291"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30735"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1809583291"
                }
            },
            "author_association": "MEMBER",
            "body": "would `strict_range` or `strict_indexing` be appropriate? that aligns with existing parameter names, e.g. `:help nvim_buf_get_lines`.\r\n\r\n`no_out_of_range` is ambiguous, it sounds like it is *enabling* strict range behavior, but it apparently disables it?\r\n\r\n```suggestion\r\n      • {strict_range}  (`boolean?`) (default true)\r\n```",
            "commit_id": "2acdf7cc948809d209177587f768363da6dc8c0c",
            "created_at": "2024-10-21T21:51:18Z",
            "diff_hunk": "@@ -1776,6 +1743,44 @@ vim.schedule_wrap({fn})                                  *vim.schedule_wrap()*\n       • |vim.schedule()|\n       • |vim.in_fast_event()|\n \n+                                                         *vim.str_byteindex()*\n+vim.str_byteindex({s}, {encoding}, {index}, {no_out_of_range})\n+    Convert UTF-32, UTF-16 or UTF-8 {index} to byte index. If\n+    {no_out_of_range} is true then then an out of range index will return byte\n+    length instead of throwing an error.\n+\n+    Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|. An {index}\n+    in the middle of a UTF-16 sequence is rounded upwards to the end of that\n+    sequence.\n+\n+    Parameters: ~\n+      • {s}                (`string`)\n+      • {encoding}         (`\"utf-8\"|\"utf-16\"|\"utf-32\"`)\n+      • {index}            (`integer`)\n+      • {no_out_of_range}  (`boolean?`)",
            "html_url": "https://github.com/neovim/neovim/pull/30735#discussion_r1809583291",
            "id": 1809583291,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5r3Ay7",
            "original_commit_id": "cc7febb02e571ff4a77ebe83cfad3e89bba49111",
            "original_line": 1760,
            "original_position": 65,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2383373284,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30735",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1809583291/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-21T22:01:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1809583291",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30735#discussion_r1809583295"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30735"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1809583295"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Yes, I did.",
            "commit_id": "2acdf7cc948809d209177587f768363da6dc8c0c",
            "created_at": "2024-10-21T21:51:18Z",
            "diff_hunk": "@@ -1776,6 +1743,44 @@ vim.schedule_wrap({fn})                                  *vim.schedule_wrap()*\n       • |vim.schedule()|\n       • |vim.in_fast_event()|\n \n+                                                         *vim.str_byteindex()*\n+vim.str_byteindex({s}, {encoding}, {index}, {no_out_of_range})",
            "html_url": "https://github.com/neovim/neovim/pull/30735#discussion_r1809583295",
            "id": 1809583295,
            "in_reply_to_id": 1809580691,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5r3Ay_",
            "original_commit_id": "cc7febb02e571ff4a77ebe83cfad3e89bba49111",
            "original_line": 1747,
            "original_position": 52,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2383373289,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30735",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1809583295/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-21T21:51:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1809583295",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30735#discussion_r1809586128"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30735"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1809586128"
                }
            },
            "author_association": "MEMBER",
            "body": "the old signature started with `s, index`. was that changed intentionally? would it be helpful for migrating to avoid changing the order where possible? (if this was already discussed/resolved, LMK).\r\n\r\n```suggestion\r\nvim.str_utfindex({s}, {index}, {encoding}, {no_out_of_range})\r\n```",
            "commit_id": "2acdf7cc948809d209177587f768363da6dc8c0c",
            "created_at": "2024-10-21T21:54:54Z",
            "diff_hunk": "@@ -1776,6 +1743,44 @@ vim.schedule_wrap({fn})                                  *vim.schedule_wrap()*\n       • |vim.schedule()|\n       • |vim.in_fast_event()|\n \n+                                                         *vim.str_byteindex()*\n+vim.str_byteindex({s}, {encoding}, {index}, {no_out_of_range})\n+    Convert UTF-32, UTF-16 or UTF-8 {index} to byte index. If\n+    {no_out_of_range} is true then then an out of range index will return byte\n+    length instead of throwing an error.\n+\n+    Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|. An {index}\n+    in the middle of a UTF-16 sequence is rounded upwards to the end of that\n+    sequence.\n+\n+    Parameters: ~\n+      • {s}                (`string`)\n+      • {encoding}         (`\"utf-8\"|\"utf-16\"|\"utf-32\"`)\n+      • {index}            (`integer`)\n+      • {no_out_of_range}  (`boolean?`)\n+\n+    Return: ~\n+        (`integer`)\n+\n+                                                          *vim.str_utfindex()*\n+vim.str_utfindex({s}, {encoding}, {index}, {no_out_of_range})",
            "html_url": "https://github.com/neovim/neovim/pull/30735#discussion_r1809586128",
            "id": 1809586128,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5r3BfQ",
            "original_commit_id": "cc7febb02e571ff4a77ebe83cfad3e89bba49111",
            "original_line": 1766,
            "original_position": 71,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2383377375,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30735",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1809586128/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-21T21:54:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1809586128",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30735#discussion_r1809592557"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30735"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1809592557"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "> We can support the old versions by dispatching on  the type of argument 2, and deprecating that form\n\nDiscussed here\nhttps://github.com/neovim/neovim/issues/30804#issuecomment-2411675761",
            "commit_id": "2acdf7cc948809d209177587f768363da6dc8c0c",
            "created_at": "2024-10-21T22:03:05Z",
            "diff_hunk": "@@ -1776,6 +1743,44 @@ vim.schedule_wrap({fn})                                  *vim.schedule_wrap()*\n       • |vim.schedule()|\n       • |vim.in_fast_event()|\n \n+                                                         *vim.str_byteindex()*\n+vim.str_byteindex({s}, {encoding}, {index}, {no_out_of_range})\n+    Convert UTF-32, UTF-16 or UTF-8 {index} to byte index. If\n+    {no_out_of_range} is true then then an out of range index will return byte\n+    length instead of throwing an error.\n+\n+    Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|. An {index}\n+    in the middle of a UTF-16 sequence is rounded upwards to the end of that\n+    sequence.\n+\n+    Parameters: ~\n+      • {s}                (`string`)\n+      • {encoding}         (`\"utf-8\"|\"utf-16\"|\"utf-32\"`)\n+      • {index}            (`integer`)\n+      • {no_out_of_range}  (`boolean?`)\n+\n+    Return: ~\n+        (`integer`)\n+\n+                                                          *vim.str_utfindex()*\n+vim.str_utfindex({s}, {encoding}, {index}, {no_out_of_range})",
            "html_url": "https://github.com/neovim/neovim/pull/30735#discussion_r1809592557",
            "id": 1809592557,
            "in_reply_to_id": 1809586128,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5r3DDt",
            "original_commit_id": "cc7febb02e571ff4a77ebe83cfad3e89bba49111",
            "original_line": 1766,
            "original_position": 71,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2383386615,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30735",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1809592557/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-21T22:03:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1809592557",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30735#discussion_r1809605837"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30735"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1809605837"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I think `strict_indexing` (with a default of true) works well and the terminology makes sense given how it's used elsewhere\n",
            "commit_id": "2acdf7cc948809d209177587f768363da6dc8c0c",
            "created_at": "2024-10-21T22:21:24Z",
            "diff_hunk": "@@ -1776,6 +1743,44 @@ vim.schedule_wrap({fn})                                  *vim.schedule_wrap()*\n       • |vim.schedule()|\n       • |vim.in_fast_event()|\n \n+                                                         *vim.str_byteindex()*\n+vim.str_byteindex({s}, {encoding}, {index}, {no_out_of_range})\n+    Convert UTF-32, UTF-16 or UTF-8 {index} to byte index. If\n+    {no_out_of_range} is true then then an out of range index will return byte\n+    length instead of throwing an error.\n+\n+    Invalid UTF-8 and NUL is treated like in |vim.str_utfindex()|. An {index}\n+    in the middle of a UTF-16 sequence is rounded upwards to the end of that\n+    sequence.\n+\n+    Parameters: ~\n+      • {s}                (`string`)\n+      • {encoding}         (`\"utf-8\"|\"utf-16\"|\"utf-32\"`)\n+      • {index}            (`integer`)\n+      • {no_out_of_range}  (`boolean?`)",
            "html_url": "https://github.com/neovim/neovim/pull/30735#discussion_r1809605837",
            "id": 1809605837,
            "in_reply_to_id": 1809583291,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5r3GTN",
            "original_commit_id": "cc7febb02e571ff4a77ebe83cfad3e89bba49111",
            "original_line": 1760,
            "original_position": 65,
            "original_start_line": null,
            "path": "runtime/doc/lua.txt",
            "position": null,
            "pull_request_review_id": 2383405858,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30735",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1809605837/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-21T22:21:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1809605837",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203",
                "user_view_type": "public"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/30735#discussion_r1812753214"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/30735"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1812753214"
                }
            },
            "author_association": "MEMBER",
            "body": "off topic: I think we should stick with single-underscore for Nvim-owned internal symbols, until (and only if) we decide to do a big switch to double-underscore.\r\n\r\nI'm still not certain we should switch to double-underscore, because that's \"owned\" by Lua itself.",
            "commit_id": "2acdf7cc948809d209177587f768363da6dc8c0c",
            "created_at": "2024-10-23T13:22:35Z",
            "diff_hunk": "@@ -695,10 +699,10 @@ void nlua_state_add_stdlib(lua_State *const lstate, bool is_thread)\n     lua_setfield(lstate, -2, \"stricmp\");\n     // str_utfindex\n     lua_pushcfunction(lstate, &nlua_str_utfindex);\n-    lua_setfield(lstate, -2, \"str_utfindex\");\n+    lua_setfield(lstate, -2, \"__str_utfindex\");",
            "html_url": "https://github.com/neovim/neovim/pull/30735#discussion_r1812753214",
            "id": 1812753214,
            "line": 702,
            "node_id": "PRRC_kwDOAPphoM5sDGs-",
            "original_commit_id": "2acdf7cc948809d209177587f768363da6dc8c0c",
            "original_line": 702,
            "original_position": 36,
            "original_start_line": null,
            "path": "src/nvim/lua/stdlib.c",
            "position": 36,
            "pull_request_review_id": 2388677125,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/30735",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1812753214/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-10-23T13:22:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1812753214",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "This definitely looks like a good starting point, something we can build on. We probably want to avoid the opts.error flag though (or at least wait until a later PR to discuss that).\r\n\r\nWhat are the key differences vs https://github.com/neovim/neovim/pull/30560 ?",
            "created_at": "2024-10-09T18:12:18Z",
            "html_url": "https://github.com/neovim/neovim/pull/30735#issuecomment-2402974595",
            "id": 2402974595,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30735",
            "node_id": "IC_kwDOAPphoM6POnuD",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2402974595/reactions"
            },
            "updated_at": "2024-10-09T18:12:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2402974595",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> This definitely looks like a good starting point, something we can build on. We probably want to avoid the opts.error flag though (or at least wait until a later PR to discuss that).\r\n> \r\n> What are the key differences vs #30560 ?\r\n\r\n#30560 is a pure lua solution, this still uses the C function to calculate the indexes",
            "created_at": "2024-10-09T18:14:06Z",
            "html_url": "https://github.com/neovim/neovim/pull/30735#issuecomment-2402977464",
            "id": 2402977464,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30735",
            "node_id": "IC_kwDOAPphoM6POoa4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2402977464/reactions"
            },
            "updated_at": "2024-10-09T18:14:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2402977464",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "@lewis6991 Does this look something like what you were thinking of?",
            "created_at": "2024-10-17T06:38:57Z",
            "html_url": "https://github.com/neovim/neovim/pull/30735#issuecomment-2418650161",
            "id": 2418650161,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30735",
            "node_id": "IC_kwDOAPphoM6QKawx",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2418650161/reactions"
            },
            "updated_at": "2024-10-17T06:38:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2418650161",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Merged to unblock. Can iterate in another PR. Thanks for your careful attention here!\r\n\r\nI wrote a Problem/Solution in the commit message. Providing that helps get things merged faster, since it makes it clear what the victory condition is :)\r\n\r\nNeeds a news.txt mention also...\r\n\r\nThis closes https://github.com/neovim/neovim/issues/30804 , or what else is needed?",
            "created_at": "2024-10-23T13:36:11Z",
            "html_url": "https://github.com/neovim/neovim/pull/30735#issuecomment-2432219536",
            "id": 2432219536,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30735",
            "node_id": "IC_kwDOAPphoM6Q-LmQ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2432219536/reactions"
            },
            "updated_at": "2024-10-23T13:36:11Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2432219536",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk",
                "user_view_type": "public"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "There is a question of whether we should reimplement `__str_utfindex` in Lua since it has been found to perform well, likely because it can be JIT compiled, or the C version is doing something unecessary.",
            "created_at": "2024-10-23T13:38:12Z",
            "html_url": "https://github.com/neovim/neovim/pull/30735#issuecomment-2432226385",
            "id": 2432226385,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30735",
            "node_id": "IC_kwDOAPphoM6Q-NRR",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2432226385/reactions"
            },
            "updated_at": "2024-10-23T13:38:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/2432226385",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991",
                "user_view_type": "public"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/30735/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/30735/commits",
    "created_at": "2024-10-09T14:14:43Z",
    "diff_url": "https://github.com/neovim/neovim/pull/30735.diff",
    "draft": false,
    "head": {
        "label": "tris203:str_byte_c",
        "ref": "str_byte_c",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/tris203/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/tris203/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/tris203/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/tris203/neovim/branches{/branch}",
            "clone_url": "https://github.com/tris203/neovim.git",
            "collaborators_url": "https://api.github.com/repos/tris203/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/tris203/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/tris203/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/tris203/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/tris203/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/tris203/neovim/contributors",
            "created_at": "2024-09-01T13:29:52Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/tris203/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/tris203/neovim/downloads",
            "events_url": "https://api.github.com/repos/tris203/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/tris203/neovim/forks",
            "full_name": "tris203/neovim",
            "git_commits_url": "https://api.github.com/repos/tris203/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/tris203/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/tris203/neovim/git/tags{/sha}",
            "git_url": "git://github.com/tris203/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/tris203/neovim/hooks",
            "html_url": "https://github.com/tris203/neovim",
            "id": 850679366,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/tris203/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/tris203/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/tris203/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/tris203/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/tris203/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/tris203/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/tris203/neovim/merges",
            "milestones_url": "https://api.github.com/repos/tris203/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOMrRWRg",
            "notifications_url": "https://api.github.com/repos/tris203/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
                "events_url": "https://api.github.com/users/tris203/events{/privacy}",
                "followers_url": "https://api.github.com/users/tris203/followers",
                "following_url": "https://api.github.com/users/tris203/following{/other_user}",
                "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/tris203",
                "id": 18444302,
                "login": "tris203",
                "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
                "organizations_url": "https://api.github.com/users/tris203/orgs",
                "received_events_url": "https://api.github.com/users/tris203/received_events",
                "repos_url": "https://api.github.com/users/tris203/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/tris203",
                "user_view_type": "public"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/tris203/neovim/pulls{/number}",
            "pushed_at": "2024-10-28T17:02:11Z",
            "releases_url": "https://api.github.com/repos/tris203/neovim/releases{/id}",
            "size": 285779,
            "ssh_url": "git@github.com:tris203/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/tris203/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/tris203/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/tris203/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/tris203/neovim/subscription",
            "svn_url": "https://github.com/tris203/neovim",
            "tags_url": "https://api.github.com/repos/tris203/neovim/tags",
            "teams_url": "https://api.github.com/repos/tris203/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/tris203/neovim/git/trees{/sha}",
            "updated_at": "2024-10-28T17:02:17Z",
            "url": "https://api.github.com/repos/tris203/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "2acdf7cc948809d209177587f768363da6dc8c0c",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
            "events_url": "https://api.github.com/users/tris203/events{/privacy}",
            "followers_url": "https://api.github.com/users/tris203/followers",
            "following_url": "https://api.github.com/users/tris203/following{/other_user}",
            "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/tris203",
            "id": 18444302,
            "login": "tris203",
            "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
            "organizations_url": "https://api.github.com/users/tris203/orgs",
            "received_events_url": "https://api.github.com/users/tris203/received_events",
            "repos_url": "https://api.github.com/users/tris203/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/tris203",
            "user_view_type": "public"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/30735",
    "id": 2115417639,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/30735",
    "labels": [
        {
            "color": "C5DEF5",
            "default": false,
            "description": "changes that are not features or bugfixes",
            "id": 106949155,
            "name": "refactor",
            "node_id": "MDU6TGFiZWwxMDY5NDkxNTU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/refactor"
        }
    ],
    "locked": false,
    "merge_commit_sha": "230b0c7f021a57647a658edce27fe115343f083f",
    "merged_at": "2024-10-23T13:33:57Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5-FrYn",
    "number": 30735,
    "patch_url": "https://github.com/neovim/neovim/pull/30735.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/30735/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/2acdf7cc948809d209177587f768363da6dc8c0c",
    "title": "refactor: extend and wrap str_{byte,utf}index",
    "updated_at": "2024-10-23T13:38:14Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/30735",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/18444302?v=4",
        "events_url": "https://api.github.com/users/tris203/events{/privacy}",
        "followers_url": "https://api.github.com/users/tris203/followers",
        "following_url": "https://api.github.com/users/tris203/following{/other_user}",
        "gists_url": "https://api.github.com/users/tris203/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/tris203",
        "id": 18444302,
        "login": "tris203",
        "node_id": "MDQ6VXNlcjE4NDQ0MzAy",
        "organizations_url": "https://api.github.com/users/tris203/orgs",
        "received_events_url": "https://api.github.com/users/tris203/received_events",
        "repos_url": "https://api.github.com/users/tris203/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/tris203/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tris203/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/tris203",
        "user_view_type": "public"
    }
}