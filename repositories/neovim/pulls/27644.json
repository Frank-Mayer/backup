{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/27644/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/27644/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/27644"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/27644"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/27644/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/27644"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/20c9bd43beaefbe1a8192fbef1cb37b84918e987"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5117,
            "forks_count": 5117,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1734,
            "open_issues_count": 1734,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2024-03-04T23:50:59Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 258911,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 74607,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2024-03-05T01:06:33Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 74607,
            "watchers_count": 74607,
            "web_commit_signoff_required": false
        },
        "sha": "b413f5d048ab8676d5a77d0f2b3c20587a270673",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "- Added `@inlinedoc` so single use Lua types can be inlined into the\r\n  functions docs. E.g.\r\n\r\n  ```lua\r\n  --- @class myopts\r\n  --- @inlinedoc\r\n  ---\r\n  --- Documentation for some field\r\n  --- @field somefield integer\r\n\r\n  --- @param opts myOpts\r\n  function foo(opts)\r\n  end\r\n  ```\r\n\r\n  Will be rendered as\r\n\r\n  ```\r\n  foo(opts)\r\n\r\n    Parameters:\r\n      - {opts} (table) Object with the fields:\r\n               - somefield (integer) Documentation\r\n                 for some field\r\n  ```\r\n\r\n- Marked many classes with with `@nodoc` or `(private)`.\r\n  We can eventually introduce these when we want to.\r\n",
    "closed_at": "2024-03-01T23:02:18Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27644#discussion_r1505927727"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27644"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1505927727"
                }
            },
            "author_association": "MEMBER",
            "body": "I'm aware these indentation errors need fixing.",
            "commit_id": "20c9bd43beaefbe1a8192fbef1cb37b84918e987",
            "created_at": "2024-02-28T13:00:42Z",
            "diff_hunk": "@@ -966,6 +966,112 @@ register({lang}, {filetype})              *vim.treesitter.language.register()*\n ==============================================================================\n Lua module: vim.treesitter.query                        *lua-treesitter-query*\n \n+*vim.treesitter.Query*\n+    Parsed query, see |vim.treesitter.query.parse()|\n+\n+    Fields: ~\n+      • {lang}           (`string`) name of the language for this parser\n+      • {captures}       (`string[]`) list of (unique) capture names defined\n+                         in query\n+      • {info}           (`vim.treesitter.QueryInfo`) contains information\n+                         used in the query (e.g. captures, predicates,\n+                         directives)\n+      • {query}          (`TSQuery`) userdata query object\n+      • {iter_captures}  (`fun(self: vim.treesitter.Querynode: TSNodesource:\n+                         integer|stringstart: integer?stop: integer?):\n+                         fun(end_line: integer?): integer, TSNode,\n+                         vim.treesitter.query.TSMetadata`) Iterate over all\n+                         captures from all matches inside {node}\n+\n+ {source} is needed if the query contains predicates;",
            "html_url": "https://github.com/neovim/neovim/pull/27644#discussion_r1505927727",
            "id": 1505927727,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ZwqIv",
            "original_commit_id": "90f9bf3b8cb4d9a343b1d8bced4636e8645aa2e7",
            "original_line": 986,
            "original_position": 90,
            "original_start_line": null,
            "path": "runtime/doc/treesitter.txt",
            "position": null,
            "pull_request_review_id": 1906212540,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27644",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1505927727/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-28T13:00:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1505927727",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27644#discussion_r1506004698"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27644"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1506004698"
                }
            },
            "author_association": "MEMBER",
            "body": "I want to inline this but the issue is that this is used as:\r\n\r\n```\r\n---@param results table<integer, vim.lsp.CodeActionResultEntry>\r\n```\r\n\r\nSo we kind of need to document the class. We could maybe try to inline this documentation a bit differently so the name is preserved?",
            "commit_id": "20c9bd43beaefbe1a8192fbef1cb37b84918e987",
            "created_at": "2024-02-28T13:55:53Z",
            "diff_hunk": "@@ -1109,9 +939,259 @@ with({handler}, {override_config})                            *vim.lsp.with()*\n                            behavior of the {handler}\n \n \n+==============================================================================\n+Lua module: vim.lsp.client                                        *lsp-client*\n+\n+*vim.lsp.Client*\n+\n+    Fields: ~\n+      • {id}                    (`integer`) The id allocated to the client.\n+      • {name}                  (`string`) If a name is specified on creation,\n+                                that will be used. Otherwise it is just the\n+                                client id. This is used for logs and messages.\n+      • {rpc}                   (`vim.lsp.rpc.PublicClient`) RPC client\n+                                object, for low level interaction with the\n+                                client. See |vim.lsp.rpc.start()|.\n+      • {offset_encoding}       (`string`) The encoding used for communicating\n+                                with the server. You can modify this in the\n+                                `config`'s `on_init` method before text is\n+                                sent to the server.\n+      • {handlers}              (`table<string,lsp.Handler>`) The handlers\n+                                used by the client as described in\n+                                |lsp-handler|.\n+      • {requests}              (`table<integer,{ type: string, bufnr:\n+                                integer, method: string}>`) The current\n+                                pending requests in flight to the server.\n+                                Entries are key-value pairs with the key being\n+                                the request ID while the value is a table with\n+                                `type`, `bufnr`, and `method` key-value pairs.\n+                                `type` is either \"pending\" for an active\n+                                request, or \"cancel\" for a cancel request. It\n+                                will be \"complete\" ephemerally while executing\n+                                |LspRequest| autocmds when replies are\n+                                received from the server.\n+      • {config}                (`vim.lsp.ClientConfig`) copy of the table\n+                                that was passed by the user to\n+                                |vim.lsp.start_client()|.\n+      • {server_capabilities}   (`lsp.ServerCapabilities?`) Response from the\n+                                server sent on initialize` describing the\n+                                server's capabilities.\n+      • {progress}              (`vim.lsp.Client.Progress`) A ring buffer\n+                                (|vim.ringbuf()|) containing progress messages\n+                                sent by the server.\n+      • {initialized}           (`true?`)\n+      • {workspace_folders}     (`lsp.WorkspaceFolder[]?`) The workspace\n+                                folders configured in the client when the\n+                                server starts. This property is only available\n+                                if the client supports workspace folders. It\n+                                can be `null` if the client supports workspace\n+                                folders but none are configured.\n+      • {root_dir}              (`string`)\n+      • {attached_buffers}      (`table<integer,true>`)\n+      • {commands}              (`table<string,fun(command: lsp.Command, ctx:\n+                                table)>`) Table of command name to function\n+                                which is called if any LSP action (code\n+                                action, code lenses, ...) triggers the\n+                                command. Client commands take precedence over\n+                                the global command registry.\n+      • {settings}              (`table`)\n+      • {flags}                 (`table`)\n+      • {get_language_id}       (`fun(bufnr: integer, filetype: string): string`)\n+      • {capabilities}          (`lsp.ClientCapabilities`) The capabilities\n+                                provided by the client (editor or tool)\n+      • {dynamic_capabilities}  (`lsp.DynamicCapabilities`)\n+      • {request}               (`fun(method: string, params: table?, handler:\n+                                lsp.Handler?, bufnr: integer): boolean,\n+                                integer?`) Sends a request to the server. This\n+                                is a thin wrapper around {client.rpc.request}\n+                                with some additional checking. If {handler} is\n+                                not specified, If one is not found there, then\n+                                an error will occur. Returns: {status},\n+                                {[client_id]}. {status} is a boolean\n+                                indicating if the notification was successful.\n+                                If it is `false`, then it will always be\n+                                `false` (the client has shutdown). If {status}\n+                                is `true`, the function returns {request_id}\n+                                as the second result. You can use this with\n+                                `client.cancel_request(request_id)` to cancel\n+                                the request.\n+      • {request_sync}          (`fun(method: string, params: table?,\n+                                timeout_ms: integer?, bufnr: integer): {err:\n+                                lsp.ResponseError?, result:any}?, string?`)\n+                                err # a dictionary, where\n+      • {notify}                (`fun(method: string, params: table?):\n+                                boolean`) Sends a notification to an LSP\n+                                server. Returns: a boolean to indicate if the\n+                                notification was successful. If it is false,\n+                                then it will always be false (the client has\n+                                shutdown).\n+      • {cancel_request}        (`fun(id: integer): boolean`) Cancels a\n+                                request with a given request id. Returns: same\n+                                as `notify()`.\n+      • {stop}                  (`fun(force?: boolean)`) Stops a client,\n+                                optionally with force. By default, it will\n+                                just ask the server to shutdown without force.\n+                                If you request to stop a client which has\n+                                previously been requested to shutdown, it will\n+                                automatically escalate and force shutdown.\n+      • {on_attach}             (`fun(bufnr: integer)`) Runs the on_attach\n+                                function from the client's config if it was\n+                                defined. Useful for buffer-local setup.\n+      • {supports_method}       (`fun(method: string, opts?: {bufnr:\n+                                integer?}): boolean`) Checks if a client\n+                                supports a given method. Always returns true\n+                                for unknown off-spec methods. [opts] is a\n+                                optional `{bufnr?: integer}` table. Some\n+                                language server capabilities can be file\n+                                specific.\n+      • {is_stopped}            (`fun(): boolean`) Checks whether a client is\n+                                stopped. Returns: true if the client is fully\n+                                stopped.\n+\n+*vim.lsp.Client.Progress*\n+    Base class `vim.Ringbuf`\n+\n+    Fields: ~\n+      • {pending}  (`table<lsp.ProgressToken,lsp.LSPAny>`)\n+\n+*vim.lsp.ClientConfig*\n+\n+    Fields: ~\n+      • {cmd}                 (`string[]|fun(dispatchers:\n+                              vim.lsp.rpc.Dispatchers):\n+                              vim.lsp.rpc.PublicClient?`) command string[]\n+                              that launches the language server (treated as in\n+                              |jobstart()|, must be absolute or on `$PATH`,\n+                              shell constructs like \"~\" are not expanded), or\n+                              function that creates an RPC client. Function\n+                              receives a `dispatchers` table and returns a\n+                              table with member functions `request`, `notify`,\n+                              `is_closing` and `terminate`. See\n+                              |vim.lsp.rpc.request()|, |vim.lsp.rpc.notify()|.\n+                              For TCP there is a builtin RPC client factory:\n+                              |vim.lsp.rpc.connect()|\n+      • {cmd_cwd?}            (`string`) Directory to launch the `cmd`\n+                              process. Not related to `root_dir`. (default:\n+                              |getcwd()|)\n+      • {cmd_env?}            (`table`) Environment flags to pass to the LSP\n+                              on spawn. Must be specified using a table.\n+                              Non-string values are coerced to string.\n+                              Example: >lua\n+                                  { PORT = 8080; HOST = \"0.0.0.0\"; }\n+<\n+      • {detached?}           (`boolean`) Daemonize the server process so that\n+                              it runs in a separate process group from Nvim.\n+                              Nvim will shutdown the process on exit, but if\n+                              Nvim fails to exit cleanly this could leave\n+                              behind orphaned server processes. (default:\n+                              true)\n+      • {workspace_folders?}  (`lsp.WorkspaceFolder[]`) List of workspace\n+                              folders passed to the language server. For\n+                              backwards compatibility rootUri and rootPath\n+                              will be derived from the first workspace folder\n+                              in this list. See `workspaceFolders` in the LSP\n+                              spec.\n+      • {capabilities?}       (`lsp.ClientCapabilities`) Map overriding the\n+                              default capabilities defined by\n+                              |vim.lsp.protocol.make_client_capabilities()|,\n+                              passed to the language server on initialization.\n+                              Hint: use make_client_capabilities() and modify\n+                              its result.\n+                              • Note: To send an empty dictionary use\n+                                |vim.empty_dict()|, else it will be encoded as\n+                                an array.\n+      • {handlers?}           (`table<string,function>`) Map of language\n+                              server method names to |lsp-handler|\n+      • {settings?}           (`table`) Map with language server specific\n+                              settings. These are returned to the language\n+                              server if requested via\n+                              `workspace/configuration`. Keys are\n+                              case-sensitive.\n+      • {commands?}           (`table<string,fun(command: lsp.Command, ctx:\n+                              table)>`) Table that maps string of clientside\n+                              commands to user-defined functions. Commands\n+                              passed to start_client take precedence over the\n+                              global command registry. Each key must be a\n+                              unique command name, and the value is a function\n+                              which is called if any LSP action (code action,\n+                              code lenses, ...) triggers the command.\n+      • {init_options?}       (`table`) Values to pass in the initialization\n+                              request as `initializationOptions`. See\n+                              `initialize` in the LSP spec.\n+      • {name?}               (`string`) Name in log messages. (default:\n+                              client-id)\n+      • {get_language_id?}    (`fun(bufnr: integer, filetype: string):\n+                              string`) Language ID as string. Defaults to the\n+                              filetype.\n+      • {offset_encoding?}    (`'utf-8'|'utf-16'|'utf-32'`) The encoding that\n+                              the LSP server expects. Client does not verify\n+                              this is correct.\n+      • {on_error?}           (`fun(code: integer, err: string)`) Callback\n+                              invoked when the client operation throws an\n+                              error. `code` is a number describing the error.\n+                              Other arguments may be passed depending on the\n+                              error kind. See `vim.lsp.rpc.client_errors` for\n+                              possible errors. Use\n+                              `vim.lsp.rpc.client_errors[code]` to get\n+                              human-friendly name.\n+      • {before_init?}        (`vim.lsp.client.before_init_cb`) Callback\n+                              invoked before the LSP \"initialize\" phase, where\n+                              `params` contains the parameters being sent to\n+                              the server and `config` is the config that was\n+                              passed to |vim.lsp.start_client()|. You can use\n+                              this to modify parameters before they are sent.\n+      • {on_init?}            (`elem_or_list<vim.lsp.client.on_init_cb>`)\n+                              Callback invoked after LSP \"initialize\", where\n+                              `result` is a table of `capabilities` and\n+                              anything else the server may send. For example,\n+                              clangd sends `initialize_result.offsetEncoding`\n+                              if `capabilities.offsetEncoding` was sent to it.\n+                              You can only modify the `client.offset_encoding`\n+                              here before any notifications are sent.\n+      • {on_exit?}            (`elem_or_list<vim.lsp.client.on_exit_cb>`)\n+                              Callback invoked on client exit.\n+                              • code: exit code of the process\n+                              • signal: number describing the signal used to\n+                                terminate (if any)\n+                              • client_id: client handle\n+      • {on_attach?}          (`elem_or_list<vim.lsp.client.on_attach_cb>`)\n+                              Callback invoked when client attaches to a\n+                              buffer.\n+      • {trace?}              (`'off'|'messages'|'verbose'`) Passed directly\n+                              to the language server in the initialize\n+                              request. Invalid/empty values will (default:\n+                              \"off\")\n+      • {flags?}              (`table`) A table with flags for the client. The\n+                              current (experimental) flags are:\n+                              • allow_incremental_sync (bool, default true):\n+                                Allow using incremental sync for buffer edits\n+                              • debounce_text_changes (number, default 150):\n+                                Debounce didChange notifications to the server\n+                                by the given number in milliseconds. No\n+                                debounce occurs if nil\n+                              • exit_timeout (number|boolean, default false):\n+                                Milliseconds to wait for server to exit\n+                                cleanly after sending the \"shutdown\" request\n+                                before sending kill -15. If set to false, nvim\n+                                exits immediately after sending the \"shutdown\"\n+                                request to the server.\n+      • {root_dir?}           (`string`) Directory where the LSP server will\n+                              base its workspaceFolders, rootUri, and rootPath\n+                              on initialization.\n+\n+\n+\n ==============================================================================\n Lua module: vim.lsp.buf                                              *lsp-buf*\n \n+*vim.lsp.CodeActionResultEntry*",
            "html_url": "https://github.com/neovim/neovim/pull/27644#discussion_r1506004698",
            "id": 1506004698,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Zw87a",
            "original_commit_id": "24bcb3c2bbea6cd51d53c730fe509f911809af86",
            "original_line": 1187,
            "original_position": 499,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 1906335149,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27644",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1506004698/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-28T13:55:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1506004698",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27644#discussion_r1506006219"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27644"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1506006219"
                }
            },
            "author_association": "MEMBER",
            "body": "Same with this. Not super sure how to present this.",
            "commit_id": "20c9bd43beaefbe1a8192fbef1cb37b84918e987",
            "created_at": "2024-02-28T13:56:49Z",
            "diff_hunk": "@@ -1525,10 +1612,9 @@ get({filter})                                       *vim.lsp.inlay_hint.get()*\n       • This API is pre-release (unstable).\n \n     Parameters: ~\n-      • {filter}  (`vim.lsp.inlay_hint.get.filter?`) Optional filters\n-                  |kwargs|:\n-                  • bufnr (integer?): 0 for current buffer\n-                  • range (lsp.Range?)\n+      • {filter}  (`table?`) Optional filters |kwargs|:\n+                  • bufnr (`integer?`)\n+                  • range (`lsp.Range?`)\n \n     Return: ~\n         (`vim.lsp.inlay_hint.get.ret[]`) Each list item is a table with the",
            "html_url": "https://github.com/neovim/neovim/pull/27644#discussion_r1506006219",
            "id": 1506006219,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Zw9TL",
            "original_commit_id": "24bcb3c2bbea6cd51d53c730fe509f911809af86",
            "original_line": 1620,
            "original_position": 552,
            "original_start_line": null,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 1906337373,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27644",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1506006219/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-28T13:56:49Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1506006219",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27644#discussion_r1506150824"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27644"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1506150824"
                }
            },
            "author_association": "MEMBER",
            "body": "👀 \r\n\r\n(The vimdoc parser relies on whitespace for tokenization and so can't handle codespans broken over multiple lines.)",
            "commit_id": "20c9bd43beaefbe1a8192fbef1cb37b84918e987",
            "created_at": "2024-02-28T15:28:38Z",
            "diff_hunk": "@@ -1109,6 +939,248 @@ with({handler}, {override_config})                            *vim.lsp.with()*\n                            behavior of the {handler}\n \n \n+==============================================================================\n+Lua module: vim.lsp.client                                        *lsp-client*\n+\n+*vim.lsp.Client*\n+\n+    Fields: ~\n+      • {id}                    (`integer`) The id allocated to the client.\n+      • {name}                  (`string`) If a name is specified on creation,\n+                                that will be used. Otherwise it is just the\n+                                client id. This is used for logs and messages.\n+      • {rpc}                   (`vim.lsp.rpc.PublicClient`) RPC client\n+                                object, for low level interaction with the\n+                                client. See |vim.lsp.rpc.start()|.\n+      • {offset_encoding}       (`string`) The encoding used for communicating\n+                                with the server. You can modify this in the\n+                                `config`'s `on_init` method before text is\n+                                sent to the server.\n+      • {handlers}              (`table<string,lsp.Handler>`) The handlers\n+                                used by the client as described in\n+                                |lsp-handler|.\n+      • {requests}              (`table<integer,{ type: string, bufnr:\n+                                integer, method: string}>`) The current\n+                                pending requests in flight to the server.\n+                                Entries are key-value pairs with the key being\n+                                the request ID while the value is a table with\n+                                `type`, `bufnr`, and `method` key-value pairs.\n+                                `type` is either \"pending\" for an active\n+                                request, or \"cancel\" for a cancel request. It\n+                                will be \"complete\" ephemerally while executing\n+                                |LspRequest| autocmds when replies are\n+                                received from the server.\n+      • {config}                (`vim.lsp.ClientConfig`) copy of the table\n+                                that was passed by the user to\n+                                |vim.lsp.start_client()|.\n+      • {server_capabilities}   (`lsp.ServerCapabilities?`) Response from the\n+                                server sent on initialize` describing the\n+                                server's capabilities.\n+      • {progress}              (`vim.lsp.Client.Progress`) A ring buffer\n+                                (|vim.ringbuf()|) containing progress messages\n+                                sent by the server.\n+      • {initialized}           (`true?`)\n+      • {workspace_folders}     (`lsp.WorkspaceFolder[]?`) The workspace\n+                                folders configured in the client when the\n+                                server starts. This property is only available\n+                                if the client supports workspace folders. It\n+                                can be `null` if the client supports workspace\n+                                folders but none are configured.\n+      • {root_dir}              (`string`)\n+      • {attached_buffers}      (`table<integer,true>`)\n+      • {commands}              (`table<string,fun(command: lsp.Command, ctx:\n+                                table)>`) Table of command name to function\n+                                which is called if any LSP action (code\n+                                action, code lenses, ...) triggers the\n+                                command. Client commands take precedence over\n+                                the global command registry.\n+      • {settings}              (`table`)\n+      • {flags}                 (`table`)\n+      • {get_language_id}       (`fun(bufnr: integer, filetype: string): string`)\n+      • {capabilities}          (`lsp.ClientCapabilities`) The capabilities\n+                                provided by the client (editor or tool)\n+      • {dynamic_capabilities}  (`lsp.DynamicCapabilities`)\n+      • {request}               (`fun(method: string, params: table?, handler:\n+                                lsp.Handler?, bufnr: integer): boolean,\n+                                integer?`) Sends a request to the server. This\n+                                is a thin wrapper around {client.rpc.request}\n+                                with some additional checking. If {handler} is\n+                                not specified, If one is not found there, then\n+                                an error will occur. Returns: {status},\n+                                {[client_id]}. {status} is a boolean\n+                                indicating if the notification was successful.\n+                                If it is `false`, then it will always be\n+                                `false` (the client has shutdown). If {status}\n+                                is `true`, the function returns {request_id}\n+                                as the second result. You can use this with\n+                                `client.cancel_request(request_id)` to cancel\n+                                the request.\n+      • {request_sync}          (`fun(method: string, params: table?,\n+                                timeout_ms: integer?, bufnr: integer): {err:\n+                                lsp.ResponseError?, result:any}?, string?`)\n+                                err # a dictionary, where",
            "html_url": "https://github.com/neovim/neovim/pull/27644#discussion_r1506150824",
            "id": 1506150824,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5Zxgmo",
            "original_commit_id": "c008fb487da03cdcbbc3b1cbf844d02645424a74",
            "original_line": 992,
            "original_position": 333,
            "original_start_line": 1018,
            "path": "runtime/doc/lsp.txt",
            "position": null,
            "pull_request_review_id": 1906572241,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27644",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1506150824/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2024-02-28T15:36:51Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1506150824",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27644#discussion_r1506182430"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27644"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1506182430"
                }
            },
            "author_association": "MEMBER",
            "body": "Vimception :D ",
            "commit_id": "20c9bd43beaefbe1a8192fbef1cb37b84918e987",
            "created_at": "2024-02-28T15:49:05Z",
            "diff_hunk": "@@ -233,11 +234,33 @@ definitions.  The |lua-vim| :help is generated from the docstrings.\n \n Docstring format:\n - Use LuaCATS annotations: https://luals.github.io/wiki/annotations/\n-- Limited markdown is supported.\n-  - List-items start with `-` (useful to nest or \"indent\")\n+- Markdown is supported.\n - Use ``` for code samples.\n   Code samples can be annotated as `vim` or `lua`\n - Use `@nodoc` to prevent documentation generation.\n+- Use `@inlinedoc` to inline `@class` blocks into `@param` blocks.\n+  E.g. >lua\n+      --- Object with fields:\n+      --- @class myopts\n+      --- @inlinedoc\n+      ---\n+      --- Documentation for some field\n+      --- @field somefield? integer\n+\n+      --- @param opts? myOpts\n+      function foo(opts)\n+      end\n+<\n+\n+  Will be rendered as: >vimdoc",
            "html_url": "https://github.com/neovim/neovim/pull/27644#discussion_r1506182430",
            "id": 1506182430,
            "line": 255,
            "node_id": "PRRC_kwDOAPphoM5ZxoUe",
            "original_commit_id": "67a796208e8899f38b7f29d392624c72702169c3",
            "original_line": 255,
            "original_position": 45,
            "original_start_line": null,
            "path": "runtime/doc/develop.txt",
            "position": 45,
            "pull_request_review_id": 1906621956,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27644",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1506182430/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-28T15:49:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1506182430",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27644#discussion_r1506463914"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27644"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1506463914"
                }
            },
            "author_association": "MEMBER",
            "body": "Is there a difference if the `@inlinedoc` is before the class definition?",
            "commit_id": "20c9bd43beaefbe1a8192fbef1cb37b84918e987",
            "created_at": "2024-02-28T19:16:52Z",
            "diff_hunk": "@@ -233,11 +234,33 @@ definitions.  The |lua-vim| :help is generated from the docstrings.\n \n Docstring format:\n - Use LuaCATS annotations: https://luals.github.io/wiki/annotations/\n-- Limited markdown is supported.\n-  - List-items start with `-` (useful to nest or \"indent\")\n+- Markdown is supported.\n - Use ``` for code samples.\n   Code samples can be annotated as `vim` or `lua`\n - Use `@nodoc` to prevent documentation generation.\n+- Use `@inlinedoc` to inline `@class` blocks into `@param` blocks.\n+  E.g. >lua\n+      --- Object with fields:\n+      --- @class myopts\n+      --- @inlinedoc",
            "html_url": "https://github.com/neovim/neovim/pull/27644#discussion_r1506463914",
            "id": 1506463914,
            "line": 245,
            "node_id": "PRRC_kwDOAPphoM5ZytCq",
            "original_commit_id": "99a498f404da51fc833ec8474d432b35b759388c",
            "original_line": 245,
            "original_position": 35,
            "original_start_line": null,
            "path": "runtime/doc/develop.txt",
            "position": 35,
            "pull_request_review_id": 1907083278,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27644",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1506463914/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-28T19:26:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1506463914",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27644#discussion_r1506471565"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27644"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1506471565"
                }
            },
            "author_association": "MEMBER",
            "body": "Should we maybe add (and is it worth it) a CI check to ensure all Lua types are namespaced correctly?",
            "commit_id": "20c9bd43beaefbe1a8192fbef1cb37b84918e987",
            "created_at": "2024-02-28T19:23:50Z",
            "diff_hunk": "@@ -1048,7 +1049,7 @@ function vim.deprecate(name, alternative, version, plugin, backtrace)\n   -- e.g., when planned to be removed in version = '0.12' (soft-deprecated since 0.10-dev),\n   -- show warnings since 0.11, including 0.11-dev (hard_deprecated_since = 0.11-dev).\n   if plugin == 'Nvim' then\n-    local current_version = vim.version() ---@type Version\n+    local current_version = vim.version() ---@type vim.Version",
            "html_url": "https://github.com/neovim/neovim/pull/27644#discussion_r1506471565",
            "id": 1506471565,
            "line": 1052,
            "node_id": "PRRC_kwDOAPphoM5Zyu6N",
            "original_commit_id": "99a498f404da51fc833ec8474d432b35b759388c",
            "original_line": 1052,
            "original_position": 22,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": 22,
            "pull_request_review_id": 1907083278,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27644",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1506471565/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-28T19:26:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1506471565",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27644#discussion_r1506472508"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27644"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1506472508"
                }
            },
            "author_association": "MEMBER",
            "body": "It seems like this was optional before and now it's not.",
            "commit_id": "20c9bd43beaefbe1a8192fbef1cb37b84918e987",
            "created_at": "2024-02-28T19:24:45Z",
            "diff_hunk": "@@ -56,24 +56,26 @@ function M.require_language(lang, path, silent, symbol_name)\n   return true\n end\n \n----@class vim.treesitter.language.RequireLangOpts\n----@field path? string\n----@field silent? boolean\n+---@class vim.treesitter.language.add.Opts\n+---@inlinedoc\n+---\n+---Default filetype the parser should be associated with.\n+---(Default: {lang})\n ---@field filetype? string|string[]\n+---\n+---Optional path the parser is located at\n+---@field path? string\n+---\n+---Internal symbol name for the language to load\n ---@field symbol_name? string\n \n --- Load parser with name {lang}\n ---\n --- Parsers are searched in the `parser` runtime directory, or the provided {path}\n ---\n ---@param lang string Name of the parser (alphanumerical and `_` only)\n----@param opts (table|nil) Options:\n----                        - filetype (string|string[]) Default filetype the parser should be associated with.\n----                          Defaults to {lang}.\n----                        - path (string|nil) Optional path the parser is located at\n----                        - symbol_name (string|nil) Internal symbol name for the language to load\n+---@param opts vim.treesitter.language.add.Opts Options:",
            "html_url": "https://github.com/neovim/neovim/pull/27644#discussion_r1506472508",
            "id": 1506472508,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ZyvI8",
            "original_commit_id": "99a498f404da51fc833ec8474d432b35b759388c",
            "original_line": 77,
            "original_position": 30,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/language.lua",
            "position": null,
            "pull_request_review_id": 1907083278,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27644",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1506472508/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-28T19:26:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1506472508",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27644#discussion_r1506620451"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27644"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1506620451"
                }
            },
            "author_association": "MEMBER",
            "body": "Shouldn't be. The parser just looks for contiguous blocks of comments, and `@inlinedoc` just sets a flag in the object being built.\n\nI'll add a test for this for good measure.",
            "commit_id": "20c9bd43beaefbe1a8192fbef1cb37b84918e987",
            "created_at": "2024-02-28T20:23:33Z",
            "diff_hunk": "@@ -233,11 +234,33 @@ definitions.  The |lua-vim| :help is generated from the docstrings.\n \n Docstring format:\n - Use LuaCATS annotations: https://luals.github.io/wiki/annotations/\n-- Limited markdown is supported.\n-  - List-items start with `-` (useful to nest or \"indent\")\n+- Markdown is supported.\n - Use ``` for code samples.\n   Code samples can be annotated as `vim` or `lua`\n - Use `@nodoc` to prevent documentation generation.\n+- Use `@inlinedoc` to inline `@class` blocks into `@param` blocks.\n+  E.g. >lua\n+      --- Object with fields:\n+      --- @class myopts\n+      --- @inlinedoc",
            "html_url": "https://github.com/neovim/neovim/pull/27644#discussion_r1506620451",
            "id": 1506620451,
            "in_reply_to_id": 1506463914,
            "line": 245,
            "node_id": "PRRC_kwDOAPphoM5ZzTQj",
            "original_commit_id": "99a498f404da51fc833ec8474d432b35b759388c",
            "original_line": 245,
            "original_position": 35,
            "original_start_line": null,
            "path": "runtime/doc/develop.txt",
            "position": 35,
            "pull_request_review_id": 1907351809,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27644",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1506620451/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-28T20:23:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1506620451",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27644#discussion_r1506624599"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27644"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1506624599"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes, though we can't do that until all the types are correctly named first.",
            "commit_id": "20c9bd43beaefbe1a8192fbef1cb37b84918e987",
            "created_at": "2024-02-28T20:24:59Z",
            "diff_hunk": "@@ -1048,7 +1049,7 @@ function vim.deprecate(name, alternative, version, plugin, backtrace)\n   -- e.g., when planned to be removed in version = '0.12' (soft-deprecated since 0.10-dev),\n   -- show warnings since 0.11, including 0.11-dev (hard_deprecated_since = 0.11-dev).\n   if plugin == 'Nvim' then\n-    local current_version = vim.version() ---@type Version\n+    local current_version = vim.version() ---@type vim.Version",
            "html_url": "https://github.com/neovim/neovim/pull/27644#discussion_r1506624599",
            "id": 1506624599,
            "in_reply_to_id": 1506471565,
            "line": 1052,
            "node_id": "PRRC_kwDOAPphoM5ZzURX",
            "original_commit_id": "99a498f404da51fc833ec8474d432b35b759388c",
            "original_line": 1052,
            "original_position": 22,
            "original_start_line": null,
            "path": "runtime/lua/vim/_editor.lua",
            "position": 22,
            "pull_request_review_id": 1907357703,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27644",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1506624599/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-28T20:24:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1506624599",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27644#discussion_r1506625179"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27644"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1506625179"
                }
            },
            "author_association": "MEMBER",
            "body": "Good catch.",
            "commit_id": "20c9bd43beaefbe1a8192fbef1cb37b84918e987",
            "created_at": "2024-02-28T20:25:12Z",
            "diff_hunk": "@@ -56,24 +56,26 @@ function M.require_language(lang, path, silent, symbol_name)\n   return true\n end\n \n----@class vim.treesitter.language.RequireLangOpts\n----@field path? string\n----@field silent? boolean\n+---@class vim.treesitter.language.add.Opts\n+---@inlinedoc\n+---\n+---Default filetype the parser should be associated with.\n+---(Default: {lang})\n ---@field filetype? string|string[]\n+---\n+---Optional path the parser is located at\n+---@field path? string\n+---\n+---Internal symbol name for the language to load\n ---@field symbol_name? string\n \n --- Load parser with name {lang}\n ---\n --- Parsers are searched in the `parser` runtime directory, or the provided {path}\n ---\n ---@param lang string Name of the parser (alphanumerical and `_` only)\n----@param opts (table|nil) Options:\n----                        - filetype (string|string[]) Default filetype the parser should be associated with.\n----                          Defaults to {lang}.\n----                        - path (string|nil) Optional path the parser is located at\n----                        - symbol_name (string|nil) Internal symbol name for the language to load\n+---@param opts vim.treesitter.language.add.Opts Options:",
            "html_url": "https://github.com/neovim/neovim/pull/27644#discussion_r1506625179",
            "id": 1506625179,
            "in_reply_to_id": 1506472508,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5ZzUab",
            "original_commit_id": "99a498f404da51fc833ec8474d432b35b759388c",
            "original_line": 77,
            "original_position": 30,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter/language.lua",
            "position": null,
            "pull_request_review_id": 1907358461,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27644",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1506625179/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-28T20:25:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1506625179",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27644#discussion_r1507059684"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27644"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1507059684"
                }
            },
            "author_association": "MEMBER",
            "body": "why do these types deviate from the convention of using `vim.*` prefixed names?",
            "commit_id": "20c9bd43beaefbe1a8192fbef1cb37b84918e987",
            "created_at": "2024-02-29T06:09:49Z",
            "diff_hunk": "@@ -372,10 +379,65 @@ local function should_render_param(p)\n   return not p.access and not contains(p.name, { '_', 'self' })\n end\n \n+--- @param ty string\n+--- @param classes? table<string,nvim.luacats.parser.class>",
            "html_url": "https://github.com/neovim/neovim/pull/27644#discussion_r1507059684",
            "id": 1507059684,
            "line": 409,
            "node_id": "PRRC_kwDOAPphoM5Z0-fk",
            "original_commit_id": "99a498f404da51fc833ec8474d432b35b759388c",
            "original_line": 409,
            "original_position": 26,
            "original_start_line": null,
            "path": "scripts/gen_vimdoc.lua",
            "position": 55,
            "pull_request_review_id": 1908039524,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27644",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1507059684/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-29T06:11:27Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1507059684",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27644#discussion_r1507403668"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27644"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1507403668"
                }
            },
            "author_association": "MEMBER",
            "body": "Because these files do not live in `$VIMRUNTIME`.",
            "commit_id": "20c9bd43beaefbe1a8192fbef1cb37b84918e987",
            "created_at": "2024-02-29T11:06:36Z",
            "diff_hunk": "@@ -372,10 +379,65 @@ local function should_render_param(p)\n   return not p.access and not contains(p.name, { '_', 'self' })\n end\n \n+--- @param ty string\n+--- @param classes? table<string,nvim.luacats.parser.class>",
            "html_url": "https://github.com/neovim/neovim/pull/27644#discussion_r1507403668",
            "id": 1507403668,
            "in_reply_to_id": 1507059684,
            "line": 409,
            "node_id": "PRRC_kwDOAPphoM5Z2SeU",
            "original_commit_id": "99a498f404da51fc833ec8474d432b35b759388c",
            "original_line": 409,
            "original_position": 26,
            "original_start_line": null,
            "path": "scripts/gen_vimdoc.lua",
            "position": 55,
            "pull_request_review_id": 1908589653,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27644",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1507403668/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-29T11:06:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1507403668",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27644#discussion_r1508242680"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27644"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1508242680"
                }
            },
            "author_association": "MEMBER",
            "body": "Got it. Is this naming convention documented?",
            "commit_id": "20c9bd43beaefbe1a8192fbef1cb37b84918e987",
            "created_at": "2024-02-29T21:59:46Z",
            "diff_hunk": "@@ -372,10 +379,65 @@ local function should_render_param(p)\n   return not p.access and not contains(p.name, { '_', 'self' })\n end\n \n+--- @param ty string\n+--- @param classes? table<string,nvim.luacats.parser.class>",
            "html_url": "https://github.com/neovim/neovim/pull/27644#discussion_r1508242680",
            "id": 1508242680,
            "in_reply_to_id": 1507059684,
            "line": 409,
            "node_id": "PRRC_kwDOAPphoM5Z5fT4",
            "original_commit_id": "99a498f404da51fc833ec8474d432b35b759388c",
            "original_line": 409,
            "original_position": 26,
            "original_start_line": null,
            "path": "scripts/gen_vimdoc.lua",
            "position": 55,
            "pull_request_review_id": 1909950101,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27644",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1508242680/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-02-29T21:59:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1508242680",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27644#discussion_r1508519871"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27644"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1508519871"
                }
            },
            "author_association": "MEMBER",
            "body": "the casing is different (`myOpts` vs `myopts`)",
            "commit_id": "20c9bd43beaefbe1a8192fbef1cb37b84918e987",
            "created_at": "2024-03-01T06:07:30Z",
            "diff_hunk": "@@ -233,11 +234,33 @@ definitions.  The |lua-vim| :help is generated from the docstrings.\n \n Docstring format:\n - Use LuaCATS annotations: https://luals.github.io/wiki/annotations/\n-- Limited markdown is supported.\n-  - List-items start with `-` (useful to nest or \"indent\")\n+- Markdown is supported.\n - Use ``` for code samples.\n   Code samples can be annotated as `vim` or `lua`\n - Use `@nodoc` to prevent documentation generation.\n+- Use `@inlinedoc` to inline `@class` blocks into `@param` blocks.\n+  E.g. >lua\n+      --- Object with fields:\n+      --- @class myopts\n+      --- @inlinedoc\n+      ---\n+      --- Documentation for some field\n+      --- @field somefield? integer\n+\n+      --- @param opts? myOpts",
            "html_url": "https://github.com/neovim/neovim/pull/27644#discussion_r1508519871",
            "id": 1508519871,
            "line": 250,
            "node_id": "PRRC_kwDOAPphoM5Z6i-_",
            "original_commit_id": "7a058717936317cfab12f0eb962e7bca35a0da4e",
            "original_line": 250,
            "original_position": 40,
            "original_start_line": null,
            "path": "runtime/doc/develop.txt",
            "position": 40,
            "pull_request_review_id": 1910376207,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27644",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1508519871/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-03-01T06:07:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1508519871",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27644#discussion_r1508520064"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27644"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1508520064"
                }
            },
            "author_association": "MEMBER",
            "body": "This is a great improvement!",
            "commit_id": "20c9bd43beaefbe1a8192fbef1cb37b84918e987",
            "created_at": "2024-03-01T06:07:54Z",
            "diff_hunk": "@@ -233,11 +234,33 @@ definitions.  The |lua-vim| :help is generated from the docstrings.\n \n Docstring format:\n - Use LuaCATS annotations: https://luals.github.io/wiki/annotations/\n-- Limited markdown is supported.\n-  - List-items start with `-` (useful to nest or \"indent\")\n+- Markdown is supported.\n - Use ``` for code samples.\n   Code samples can be annotated as `vim` or `lua`\n - Use `@nodoc` to prevent documentation generation.\n+- Use `@inlinedoc` to inline `@class` blocks into `@param` blocks.\n+  E.g. >lua\n+      --- Object with fields:\n+      --- @class myopts\n+      --- @inlinedoc\n+      ---\n+      --- Documentation for some field\n+      --- @field somefield? integer\n+\n+      --- @param opts? myOpts\n+      function foo(opts)\n+      end\n+<\n+\n+  Will be rendered as: >vimdoc\n+\n+      foo({opts})\n+\n+          Parameters:\n+            - {opts}? (table) Object with the fields:\n+                      - {somefield}? (integer) Documentation",
            "html_url": "https://github.com/neovim/neovim/pull/27644#discussion_r1508520064",
            "id": 1508520064,
            "line": 261,
            "node_id": "PRRC_kwDOAPphoM5Z6jCA",
            "original_commit_id": "7a058717936317cfab12f0eb962e7bca35a0da4e",
            "original_line": 261,
            "original_position": 51,
            "original_start_line": null,
            "path": "runtime/doc/develop.txt",
            "position": 51,
            "pull_request_review_id": 1910376545,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27644",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1508520064/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-03-01T06:07:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1508520064",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27644#discussion_r1508527086"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27644"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1508527086"
                }
            },
            "author_association": "MEMBER",
            "body": "Does `@field` require the docstring to live above it, or can it work like `@param` ?",
            "commit_id": "20c9bd43beaefbe1a8192fbef1cb37b84918e987",
            "created_at": "2024-03-01T06:17:51Z",
            "diff_hunk": "@@ -326,10 +326,21 @@ function M.get_captures_at_cursor(winnr)\n   return captures\n end\n \n---- @class vim.treesitter.GetNodeOpts\n+--- Optional keyword arguments:\n+--- @class vim.treesitter.get_node.Opts\n+--- @inlinedoc\n+---\n+--- Buffer number (nil or 0 for current buffer)\n --- @field bufnr integer?\n+---\n+--- 0-indexed (row, col) tuple. Defaults to cursor position in the\n+--- current window. Required if {bufnr} is not the current buffer\n --- @field pos { [1]: integer, [2]: integer }?\n+---\n+--- Parser language. (default: from buffer filetype)\n --- @field lang string?",
            "html_url": "https://github.com/neovim/neovim/pull/27644#discussion_r1508527086",
            "id": 1508527086,
            "line": 341,
            "node_id": "PRRC_kwDOAPphoM5Z6kvu",
            "original_commit_id": "7a058717936317cfab12f0eb962e7bca35a0da4e",
            "original_line": 341,
            "original_position": 61,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter.lua",
            "position": 61,
            "pull_request_review_id": 1910387129,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27644",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1508527086/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-03-01T06:17:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1508527086",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27644#discussion_r1508621199"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27644"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1508621199"
                }
            },
            "author_association": "MEMBER",
            "body": "I believe LuaLS requires it above. Same applies to the `@class` description.",
            "commit_id": "20c9bd43beaefbe1a8192fbef1cb37b84918e987",
            "created_at": "2024-03-01T07:57:24Z",
            "diff_hunk": "@@ -326,10 +326,21 @@ function M.get_captures_at_cursor(winnr)\n   return captures\n end\n \n---- @class vim.treesitter.GetNodeOpts\n+--- Optional keyword arguments:\n+--- @class vim.treesitter.get_node.Opts\n+--- @inlinedoc\n+---\n+--- Buffer number (nil or 0 for current buffer)\n --- @field bufnr integer?\n+---\n+--- 0-indexed (row, col) tuple. Defaults to cursor position in the\n+--- current window. Required if {bufnr} is not the current buffer\n --- @field pos { [1]: integer, [2]: integer }?\n+---\n+--- Parser language. (default: from buffer filetype)\n --- @field lang string?",
            "html_url": "https://github.com/neovim/neovim/pull/27644#discussion_r1508621199",
            "id": 1508621199,
            "in_reply_to_id": 1508527086,
            "line": 341,
            "node_id": "PRRC_kwDOAPphoM5Z67uP",
            "original_commit_id": "7a058717936317cfab12f0eb962e7bca35a0da4e",
            "original_line": 341,
            "original_position": 61,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter.lua",
            "position": 61,
            "pull_request_review_id": 1910530667,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27644",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1508621199/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-03-01T07:57:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1508621199",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27644#discussion_r1508906051"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27644"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1508906051"
                }
            },
            "author_association": "MEMBER",
            "body": "Nope not yet.",
            "commit_id": "20c9bd43beaefbe1a8192fbef1cb37b84918e987",
            "created_at": "2024-03-01T12:15:53Z",
            "diff_hunk": "@@ -372,10 +379,65 @@ local function should_render_param(p)\n   return not p.access and not contains(p.name, { '_', 'self' })\n end\n \n+--- @param ty string\n+--- @param classes? table<string,nvim.luacats.parser.class>",
            "html_url": "https://github.com/neovim/neovim/pull/27644#discussion_r1508906051",
            "id": 1508906051,
            "in_reply_to_id": 1507059684,
            "line": 409,
            "node_id": "PRRC_kwDOAPphoM5Z8BRD",
            "original_commit_id": "99a498f404da51fc833ec8474d432b35b759388c",
            "original_line": 409,
            "original_position": 26,
            "original_start_line": null,
            "path": "scripts/gen_vimdoc.lua",
            "position": 55,
            "pull_request_review_id": 1910996960,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27644",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1508906051/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-03-01T12:15:54Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1508906051",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/27644#discussion_r1508907641"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/27644"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1508907641"
                }
            },
            "author_association": "MEMBER",
            "body": "![image](https://github.com/neovim/neovim/assets/7904185/cdbcd949-7540-4e50-aa56-87258272436f)\r\n",
            "commit_id": "20c9bd43beaefbe1a8192fbef1cb37b84918e987",
            "created_at": "2024-03-01T12:17:37Z",
            "diff_hunk": "@@ -326,10 +326,21 @@ function M.get_captures_at_cursor(winnr)\n   return captures\n end\n \n---- @class vim.treesitter.GetNodeOpts\n+--- Optional keyword arguments:\n+--- @class vim.treesitter.get_node.Opts\n+--- @inlinedoc\n+---\n+--- Buffer number (nil or 0 for current buffer)\n --- @field bufnr integer?\n+---\n+--- 0-indexed (row, col) tuple. Defaults to cursor position in the\n+--- current window. Required if {bufnr} is not the current buffer\n --- @field pos { [1]: integer, [2]: integer }?\n+---\n+--- Parser language. (default: from buffer filetype)\n --- @field lang string?",
            "html_url": "https://github.com/neovim/neovim/pull/27644#discussion_r1508907641",
            "id": 1508907641,
            "in_reply_to_id": 1508527086,
            "line": 341,
            "node_id": "PRRC_kwDOAPphoM5Z8Bp5",
            "original_commit_id": "7a058717936317cfab12f0eb962e7bca35a0da4e",
            "original_line": 341,
            "original_position": 61,
            "original_start_line": null,
            "path": "runtime/lua/vim/treesitter.lua",
            "position": 61,
            "pull_request_review_id": 1910999602,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/27644",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1508907641/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2024-03-01T12:17:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1508907641",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "@wookayin @clason @MariaSolOs would appreciate any feedback on this. ",
            "created_at": "2024-02-28T13:02:21Z",
            "html_url": "https://github.com/neovim/neovim/pull/27644#issuecomment-1968939546",
            "id": 1968939546,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27644",
            "node_id": "IC_kwDOAPphoM51W6Ia",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1968939546/reactions"
            },
            "updated_at": "2024-02-28T13:02:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1968939546",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Hmm... I'm a bit torn. On the one hand, generating these is a big positive; on the other, they do clutter the documentation a lot, to the point of noticeably affecting readability.\r\n\r\nCan we restructure these so the \"option\" classes go to a separate subsection at the end of the corresponding section (as \"endnotes\", if you will)? The top-level classes (especially diagnostics) should stay (near the beginning) in the section, though.",
            "created_at": "2024-02-28T13:06:32Z",
            "html_url": "https://github.com/neovim/neovim/pull/27644#issuecomment-1968946918",
            "id": 1968946918,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27644",
            "node_id": "IC_kwDOAPphoM51W77m",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1968946918/reactions"
            },
            "updated_at": "2024-02-28T13:08:28Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1968946918",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Hmm... I'm a bit torn. On the one hand, generating these is a big positive; on the other, they do clutter the documentation a lot, to the point of noticeably affecting readability.\r\n\r\nThis is all very much tied to the quality of the code annotations we have. For some they are a bit cluttered, and I've already hidden quite a lot of them in this change with `(private)` and `@nodoc`.\r\n\r\nI guess the biggest wins:\r\n- vim.diagnostic structure is better documented\r\n- lsp.txt is much improved IMO\r\n- The reduce duplication in function options.\r\n\r\nWe can continue to hide more of the classes, I just want to be careful that we don't create any dead references.\r\n\r\n> Can we restructure these so the \"option\" classes go to a separate subsection at the end of the corresponding section (as \"endnotes\", if you will)? The top-level classes (especially diagnostics) should stay (near the beginning) in the section, though.\r\n\r\nA large majority of these are inlined, the ones that remain represent a small minority. The troublesome ones are the one from `diagnostic.lua` which I'm not sure how to present well.\r\n\r\nThe vim.lpeg ones can all be hidden.\r\n\r\nThe treesitter ones still need a bit of work.\r\n\r\nI think the classes all need to go at the start **or** the end. If there's too many, then we either hide or inline them.",
            "created_at": "2024-02-28T13:52:23Z",
            "html_url": "https://github.com/neovim/neovim/pull/27644#issuecomment-1969031614",
            "id": 1969031614,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27644",
            "node_id": "IC_kwDOAPphoM51XQm-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1969031614/reactions"
            },
            "updated_at": "2024-02-28T13:52:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1969031614",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> This is all very much tied to the quality of the code annotations we have.\r\n\r\nOh, certainly; and having this tooling will give us _objective_ guidelines for improving that. (This, too, is very welcome.) I guess my question boils down to \"how much of this can be done automatically in the tooling?\"\r\n\r\n> The treesitter ones still need a bit of work.\r\n\r\nA _lot_ of work (in general).\r\n\r\n> I think the classes all need to go at the start or the end.\r\n\r\nHmm; I do think it's useful here to distinguish and treat differently\r\n1. actual classes that describe data structures that users/plugin writers may be expected to handle\r\n2. \"fake\" classes that describe option tables.\r\n\r\nI'd think that 1. should always be included, in the beginning, and 2. _may_ be included, but not in the beginning. (If that is at all feasible, with tooling and/or adapting the annotations.)",
            "created_at": "2024-02-28T13:58:45Z",
            "html_url": "https://github.com/neovim/neovim/pull/27644#issuecomment-1969043531",
            "id": 1969043531,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27644",
            "node_id": "IC_kwDOAPphoM51XThL",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1969043531/reactions"
            },
            "updated_at": "2024-02-28T13:58:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1969043531",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I've inlined a bunch more stuff included return values of the form `mytype[]`.\r\n\r\nDoes that look better?",
            "created_at": "2024-02-28T14:32:17Z",
            "html_url": "https://github.com/neovim/neovim/pull/27644#issuecomment-1969114361",
            "id": 1969114361,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27644",
            "node_id": "IC_kwDOAPphoM51Xkz5",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1969114361/reactions"
            },
            "updated_at": "2024-02-28T14:32:17Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1969114361",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "It does; I did find the `TSQuery` documentation useful, though. But as you say: that help file has bigger problems.",
            "created_at": "2024-02-28T14:33:57Z",
            "html_url": "https://github.com/neovim/neovim/pull/27644#issuecomment-1969117715",
            "id": 1969117715,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27644",
            "node_id": "IC_kwDOAPphoM51XloT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1969117715/reactions"
            },
            "updated_at": "2024-02-28T14:33:57Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1969117715",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Agree. This will need some iteration.",
            "created_at": "2024-02-28T14:34:37Z",
            "html_url": "https://github.com/neovim/neovim/pull/27644#issuecomment-1969119070",
            "id": 1969119070,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27644",
            "node_id": "IC_kwDOAPphoM51Xl9e",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1969119070/reactions"
            },
            "updated_at": "2024-02-28T14:34:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1969119070",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "The inlined docs look good (much better, even)! 👍 ",
            "created_at": "2024-02-28T14:35:24Z",
            "html_url": "https://github.com/neovim/neovim/pull/27644#issuecomment-1969120576",
            "id": 1969120576,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27644",
            "node_id": "IC_kwDOAPphoM51XmVA",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1969120576/reactions"
            },
            "updated_at": "2024-02-28T14:35:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1969120576",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "While we're at it: is it possible to style inlined class fields as `{foo}` instead of plain \"foo\"?",
            "created_at": "2024-02-28T14:36:46Z",
            "html_url": "https://github.com/neovim/neovim/pull/27644#issuecomment-1969123265",
            "id": 1969123265,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27644",
            "node_id": "IC_kwDOAPphoM51Xm_B",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1969123265/reactions"
            },
            "updated_at": "2024-02-28T14:37:26Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1969123265",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Done.",
            "created_at": "2024-02-28T14:47:52Z",
            "html_url": "https://github.com/neovim/neovim/pull/27644#issuecomment-1969145491",
            "id": 1969145491,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27644",
            "node_id": "IC_kwDOAPphoM51XsaT",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 1,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1969145491/reactions"
            },
            "updated_at": "2024-02-28T14:47:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1969145491",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Nice, thanks! Followup question, for the sake of completeness: what would be the best way of styling optional fields?\r\n* `{field?}`\r\n* `{field}?`\r\n* `[{field}]` (which is the vimdoc convention for vimscript)\r\n\r\n(Whichever we pick, I can try adapting the vimdoc parser for; the second option is probably the easiest to handle for me.)",
            "created_at": "2024-02-28T14:52:14Z",
            "html_url": "https://github.com/neovim/neovim/pull/27644#issuecomment-1969154029",
            "id": 1969154029,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27644",
            "node_id": "IC_kwDOAPphoM51Xuft",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1969154029/reactions"
            },
            "updated_at": "2024-02-28T14:52:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1969154029",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "`{field}?` seems like the best option to me.",
            "created_at": "2024-02-28T14:55:24Z",
            "html_url": "https://github.com/neovim/neovim/pull/27644#issuecomment-1969160748",
            "id": 1969160748,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27644",
            "node_id": "IC_kwDOAPphoM51XwIs",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1969160748/reactions"
            },
            "updated_at": "2024-02-28T14:55:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1969160748",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> `{field}?` seems like the best option to me.\r\n\r\nAgreed; pull request for vimdoc parser is ~~ready~~ merged. Could you add this to the developer guidelines? ",
            "created_at": "2024-02-28T15:30:22Z",
            "html_url": "https://github.com/neovim/neovim/pull/27644#issuecomment-1969234250",
            "id": 1969234250,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27644",
            "node_id": "IC_kwDOAPphoM51YCFK",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1969234250/reactions"
            },
            "updated_at": "2024-02-29T12:10:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1969234250",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I think we should also include an entry on `news.txt` for people that have been consuming these types.",
            "created_at": "2024-02-28T19:21:02Z",
            "html_url": "https://github.com/neovim/neovim/pull/27644#issuecomment-1969685728",
            "id": 1969685728,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27644",
            "node_id": "IC_kwDOAPphoM51ZwTg",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1969685728/reactions"
            },
            "updated_at": "2024-02-28T19:21:02Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1969685728",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/27644/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/27644/commits",
    "created_at": "2024-02-27T15:20:56Z",
    "diff_url": "https://github.com/neovim/neovim/pull/27644.diff",
    "draft": false,
    "head": {
        "label": "lewis6991:docclasses4real",
        "ref": "docclasses4real",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/lewis6991/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/lewis6991/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/lewis6991/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/lewis6991/neovim/branches{/branch}",
            "clone_url": "https://github.com/lewis6991/neovim.git",
            "collaborators_url": "https://api.github.com/repos/lewis6991/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/lewis6991/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/lewis6991/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/lewis6991/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/lewis6991/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/lewis6991/neovim/contributors",
            "created_at": "2020-11-24T21:47:43Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/lewis6991/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/lewis6991/neovim/downloads",
            "events_url": "https://api.github.com/repos/lewis6991/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/lewis6991/neovim/forks",
            "full_name": "lewis6991/neovim",
            "git_commits_url": "https://api.github.com/repos/lewis6991/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/lewis6991/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/lewis6991/neovim/git/tags{/sha}",
            "git_url": "git://github.com/lewis6991/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/lewis6991/neovim/hooks",
            "html_url": "https://github.com/lewis6991/neovim",
            "id": 315760150,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/lewis6991/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/lewis6991/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/lewis6991/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/lewis6991/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/lewis6991/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/lewis6991/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/lewis6991/neovim/merges",
            "milestones_url": "https://api.github.com/repos/lewis6991/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkzMTU3NjAxNTA=",
            "notifications_url": "https://api.github.com/repos/lewis6991/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
                "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
                "followers_url": "https://api.github.com/users/lewis6991/followers",
                "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
                "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lewis6991",
                "id": 7904185,
                "login": "lewis6991",
                "node_id": "MDQ6VXNlcjc5MDQxODU=",
                "organizations_url": "https://api.github.com/users/lewis6991/orgs",
                "received_events_url": "https://api.github.com/users/lewis6991/received_events",
                "repos_url": "https://api.github.com/users/lewis6991/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lewis6991"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/lewis6991/neovim/pulls{/number}",
            "pushed_at": "2024-03-04T23:50:57Z",
            "releases_url": "https://api.github.com/repos/lewis6991/neovim/releases{/id}",
            "size": 253187,
            "ssh_url": "git@github.com:lewis6991/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/lewis6991/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/lewis6991/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/lewis6991/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/lewis6991/neovim/subscription",
            "svn_url": "https://github.com/lewis6991/neovim",
            "tags_url": "https://api.github.com/repos/lewis6991/neovim/tags",
            "teams_url": "https://api.github.com/repos/lewis6991/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/lewis6991/neovim/git/trees{/sha}",
            "updated_at": "2024-02-06T12:43:15Z",
            "url": "https://api.github.com/repos/lewis6991/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "20c9bd43beaefbe1a8192fbef1cb37b84918e987",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
            "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
            "followers_url": "https://api.github.com/users/lewis6991/followers",
            "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
            "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/lewis6991",
            "id": 7904185,
            "login": "lewis6991",
            "node_id": "MDQ6VXNlcjc5MDQxODU=",
            "organizations_url": "https://api.github.com/users/lewis6991/orgs",
            "received_events_url": "https://api.github.com/users/lewis6991/received_events",
            "repos_url": "https://api.github.com/users/lewis6991/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/lewis6991"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/27644",
    "id": 1745843349,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/27644",
    "labels": [
        {
            "color": "c5def5",
            "default": true,
            "description": "",
            "id": 84744038,
            "name": "documentation",
            "node_id": "MDU6TGFiZWw4NDc0NDAzOA==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/documentation"
        }
    ],
    "locked": false,
    "merge_commit_sha": "a5fe8f59d98398d04bed8586cee73864bbcdde92",
    "merged_at": "2024-03-01T23:02:18Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5oD3SV",
    "number": 27644,
    "patch_url": "https://github.com/neovim/neovim/pull/27644.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/27644/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/20c9bd43beaefbe1a8192fbef1cb37b84918e987",
    "title": "docs: document Lua objects",
    "updated_at": "2024-03-01T23:11:32Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/27644",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/7904185?v=4",
        "events_url": "https://api.github.com/users/lewis6991/events{/privacy}",
        "followers_url": "https://api.github.com/users/lewis6991/followers",
        "following_url": "https://api.github.com/users/lewis6991/following{/other_user}",
        "gists_url": "https://api.github.com/users/lewis6991/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/lewis6991",
        "id": 7904185,
        "login": "lewis6991",
        "node_id": "MDQ6VXNlcjc5MDQxODU=",
        "organizations_url": "https://api.github.com/users/lewis6991/orgs",
        "received_events_url": "https://api.github.com/users/lewis6991/received_events",
        "repos_url": "https://api.github.com/users/lewis6991/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/lewis6991/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lewis6991/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/lewis6991"
    }
}