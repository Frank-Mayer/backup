{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/25394/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/25394/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/25394"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/25394"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/25394/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/25394"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/237a4b024b494730cd2b9b62f9bc5fbc967248d0"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 4912,
            "forks_count": 4912,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1653,
            "open_issues_count": 1653,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2023-10-10T01:53:17Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 252665,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 70016,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2023-10-10T00:53:55Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 70016,
            "watchers_count": 70016,
            "web_commit_signoff_required": false
        },
        "sha": "307a7abf86c439177910d05003a81ea4a13d2650",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "Problem: There is a separate function for setting an option for each type, which are currently `set_string_option`, `set_num_option` and `set_bool_option`. This leads to a lot of unnecessary code duplication and also vastly reduces maintainability and extensibility.\r\n\r\nSolution: Unify all ways of setting options (`set_num_option`, `set_bool_option`, `set_string_option`) to a single `set_option` function, cleaning up a lot of code duplication and greatly simplifying the options code, thus making it a lot more extensible and making it easier to add more option types.\r\n\r\nBREAKING CHANGE: This breaks the OptionSet autocommand, as the `v:` values associated with it (`v:option_new`, `v:option_old`, `v:option_oldlocal` and `v:option_oldglobal`) are now the same type as the option, instead of all option values being converted to strings.",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25394#discussion_r1346219313"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25394"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1346219313"
                }
            },
            "author_association": "MEMBER",
            "body": "I would rather have two ternaries, inside `.os_oldval` and .os_newval` respectively, so the rest of the code can be shared.",
            "commit_id": "237a4b024b494730cd2b9b62f9bc5fbc967248d0",
            "created_at": "2023-10-04T17:21:10Z",
            "diff_hunk": "@@ -3733,67 +3681,136 @@ int get_option_value_strict(char *name, int64_t *numval, char **stringval, int o\n   return rv;\n }\n \n-// Return information for option at 'opt_idx'\n+/// Return information for option at 'opt_idx'\n vimoption_T *get_option(int opt_idx)\n {\n   return &options[opt_idx];\n }\n \n-/// Clear an option\n-///\n-/// The exact semantics of this depend on the option.\n-static OptVal clear_optval(const char *name, uint32_t flags, void *varp, buf_T *buf, win_T *win)\n+static const char *set_option(int opt_idx, void *varp, OptVal value, int opt_flags, char *errbuf,\n+                              size_t errbuflen)\n {\n-  OptVal v = NIL_OPTVAL;\n+  const char *errmsg = NULL;\n+  bool value_checked = false;\n \n-  // Change the type of the OptVal to the type used by the option so that it can be cleared.\n-  // TODO(famiu): Clean up all of this after set_(num|bool|string)_option() is unified.\n+  // TODO(famiu): Unify set_string_option with set_option.\n+  if (value.type == kOptValTypeString) {\n+    errmsg = set_string_option(opt_idx, varp, value.data.string.data, opt_flags, &value_checked,\n+                               errbuf, errbuflen);\n+    goto end;\n+  }\n \n-  if (flags & P_BOOL) {\n-    v.type = kOptValTypeBoolean;\n-    if ((int *)varp == &buf->b_p_ar) {\n-      // TODO(lewis6991): replace this with a more general condition that\n-      // indicates we are setting the local value of a global-local option\n-      v.data.boolean = kNone;\n-    } else {\n-      v = get_option_value(name, NULL, OPT_GLOBAL, NULL);\n-    }\n-  } else if (flags & P_NUM) {\n-    v.type = kOptValTypeNumber;\n-    if ((OptInt *)varp == &curbuf->b_p_ul) {\n-      // The one true special case\n-      v.data.number = NO_LOCAL_UNDOLEVEL;\n-    } else if ((OptInt *)varp == &win->w_p_so || (OptInt *)varp == &win->w_p_siso) {\n-      // TODO(lewis6991): replace this with a more general condition that\n-      // indicates we are setting the local value of a global-local option\n-      v.data.number = -1;\n-    } else {\n-      v = get_option_value(name, NULL, OPT_GLOBAL, NULL);\n+  OptVal old_value = optval_from_varp(value.type, varp);\n+  OptVal old_global_value = NIL_OPTVAL;\n+\n+  // Disallow changing some options from secure mode.\n+  if ((secure || sandbox != 0) && (options[opt_idx].flags & P_SECURE)) {\n+    return e_secure;\n+  }\n+\n+  // Save the global value before changing anything. This is needed as for\n+  // a global-only option setting the \"local value\" in fact sets the global\n+  // value (since there is only one value).\n+  if ((opt_flags & (OPT_LOCAL | OPT_GLOBAL)) == 0) {\n+    old_global_value =\n+      optval_from_varp(value.type, get_varp_scope(&(options[opt_idx]), OPT_GLOBAL));\n+  }\n+\n+  if (value.type == kOptValTypeNumber) {\n+    errmsg = validate_num_option((OptInt *)varp, &value.data.number);\n+\n+    // Don't change the value and return early if validation failed.\n+    if (errmsg != NULL) {\n+      return errmsg;\n     }\n-  } else if (flags & P_STRING) {\n-    v.type = kOptValTypeString;\n-    v.data.string.data = NULL;\n   }\n \n-  return v;\n-}\n+  // Set the new option value.\n+  set_option_varp(varp, value);\n+  // Remember where the option was set.\n+  set_option_sctx_idx(opt_idx, opt_flags, current_sctx);\n+  // May set global value for local option.\n+  if ((opt_flags & (OPT_LOCAL | OPT_GLOBAL)) == 0) {\n+    set_option_varp(get_varp_scope(&(options[opt_idx]), OPT_GLOBAL), value);\n+  }\n \n-static const char *set_option(int opt_idx, void *varp, OptVal *v, int opt_flags, char *errbuf,\n-                              size_t errbuflen)\n-{\n-  const char *errmsg = NULL;\n+  // Invoke the option specific callback function to validate and apply the new value.\n+  bool doskip = false;\n+  opt_did_set_cb_T did_set_cb;\n \n-  bool value_checked = false;\n+  if ((int *)varp == &p_force_on) {\n+    did_set_cb = did_set_force_on;\n+  } else if ((int *)varp == &p_force_off) {\n+    did_set_cb = did_set_force_off;\n+  } else {\n+    did_set_cb = options[opt_idx].opt_did_set_cb;\n+  }\n+  if (did_set_cb != NULL) {\n+    // TODO(famiu): make os_oldval and os_newval use OptVal.\n+    optset_T did_set_cb_args = (value.type == kOptValTypeNumber)\n+                                 ? (optset_T){ .os_varp = varp,\n+                                               .os_flags = opt_flags,\n+                                               .os_oldval.number = old_value.data.number,\n+                                               .os_newval.number = value.data.number,",
            "html_url": "https://github.com/neovim/neovim/pull/25394#discussion_r1346219313",
            "id": 1346219313,
            "line": 3761,
            "node_id": "PRRC_kwDOAPphoM5QPa0x",
            "original_commit_id": "ee75456fb655ccd3f2f380510879a5bfb606e80b",
            "original_line": 3761,
            "original_position": 578,
            "original_start_line": 3753,
            "path": "src/nvim/option.c",
            "position": 599,
            "pull_request_review_id": 1658136002,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25394",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1346219313/reactions"
            },
            "side": "RIGHT",
            "start_line": 3760,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-10-04T17:21:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1346219313",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25394#discussion_r1346233066"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25394"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1346233066"
                }
            },
            "author_association": "MEMBER",
            "body": "Ah, that would indeed be a much smarter way of doing it",
            "commit_id": "237a4b024b494730cd2b9b62f9bc5fbc967248d0",
            "created_at": "2023-10-04T17:32:04Z",
            "diff_hunk": "@@ -3733,67 +3681,136 @@ int get_option_value_strict(char *name, int64_t *numval, char **stringval, int o\n   return rv;\n }\n \n-// Return information for option at 'opt_idx'\n+/// Return information for option at 'opt_idx'\n vimoption_T *get_option(int opt_idx)\n {\n   return &options[opt_idx];\n }\n \n-/// Clear an option\n-///\n-/// The exact semantics of this depend on the option.\n-static OptVal clear_optval(const char *name, uint32_t flags, void *varp, buf_T *buf, win_T *win)\n+static const char *set_option(int opt_idx, void *varp, OptVal value, int opt_flags, char *errbuf,\n+                              size_t errbuflen)\n {\n-  OptVal v = NIL_OPTVAL;\n+  const char *errmsg = NULL;\n+  bool value_checked = false;\n \n-  // Change the type of the OptVal to the type used by the option so that it can be cleared.\n-  // TODO(famiu): Clean up all of this after set_(num|bool|string)_option() is unified.\n+  // TODO(famiu): Unify set_string_option with set_option.\n+  if (value.type == kOptValTypeString) {\n+    errmsg = set_string_option(opt_idx, varp, value.data.string.data, opt_flags, &value_checked,\n+                               errbuf, errbuflen);\n+    goto end;\n+  }\n \n-  if (flags & P_BOOL) {\n-    v.type = kOptValTypeBoolean;\n-    if ((int *)varp == &buf->b_p_ar) {\n-      // TODO(lewis6991): replace this with a more general condition that\n-      // indicates we are setting the local value of a global-local option\n-      v.data.boolean = kNone;\n-    } else {\n-      v = get_option_value(name, NULL, OPT_GLOBAL, NULL);\n-    }\n-  } else if (flags & P_NUM) {\n-    v.type = kOptValTypeNumber;\n-    if ((OptInt *)varp == &curbuf->b_p_ul) {\n-      // The one true special case\n-      v.data.number = NO_LOCAL_UNDOLEVEL;\n-    } else if ((OptInt *)varp == &win->w_p_so || (OptInt *)varp == &win->w_p_siso) {\n-      // TODO(lewis6991): replace this with a more general condition that\n-      // indicates we are setting the local value of a global-local option\n-      v.data.number = -1;\n-    } else {\n-      v = get_option_value(name, NULL, OPT_GLOBAL, NULL);\n+  OptVal old_value = optval_from_varp(value.type, varp);\n+  OptVal old_global_value = NIL_OPTVAL;\n+\n+  // Disallow changing some options from secure mode.\n+  if ((secure || sandbox != 0) && (options[opt_idx].flags & P_SECURE)) {\n+    return e_secure;\n+  }\n+\n+  // Save the global value before changing anything. This is needed as for\n+  // a global-only option setting the \"local value\" in fact sets the global\n+  // value (since there is only one value).\n+  if ((opt_flags & (OPT_LOCAL | OPT_GLOBAL)) == 0) {\n+    old_global_value =\n+      optval_from_varp(value.type, get_varp_scope(&(options[opt_idx]), OPT_GLOBAL));\n+  }\n+\n+  if (value.type == kOptValTypeNumber) {\n+    errmsg = validate_num_option((OptInt *)varp, &value.data.number);\n+\n+    // Don't change the value and return early if validation failed.\n+    if (errmsg != NULL) {\n+      return errmsg;\n     }\n-  } else if (flags & P_STRING) {\n-    v.type = kOptValTypeString;\n-    v.data.string.data = NULL;\n   }\n \n-  return v;\n-}\n+  // Set the new option value.\n+  set_option_varp(varp, value);\n+  // Remember where the option was set.\n+  set_option_sctx_idx(opt_idx, opt_flags, current_sctx);\n+  // May set global value for local option.\n+  if ((opt_flags & (OPT_LOCAL | OPT_GLOBAL)) == 0) {\n+    set_option_varp(get_varp_scope(&(options[opt_idx]), OPT_GLOBAL), value);\n+  }\n \n-static const char *set_option(int opt_idx, void *varp, OptVal *v, int opt_flags, char *errbuf,\n-                              size_t errbuflen)\n-{\n-  const char *errmsg = NULL;\n+  // Invoke the option specific callback function to validate and apply the new value.\n+  bool doskip = false;\n+  opt_did_set_cb_T did_set_cb;\n \n-  bool value_checked = false;\n+  if ((int *)varp == &p_force_on) {\n+    did_set_cb = did_set_force_on;\n+  } else if ((int *)varp == &p_force_off) {\n+    did_set_cb = did_set_force_off;\n+  } else {\n+    did_set_cb = options[opt_idx].opt_did_set_cb;\n+  }\n+  if (did_set_cb != NULL) {\n+    // TODO(famiu): make os_oldval and os_newval use OptVal.\n+    optset_T did_set_cb_args = (value.type == kOptValTypeNumber)\n+                                 ? (optset_T){ .os_varp = varp,\n+                                               .os_flags = opt_flags,\n+                                               .os_oldval.number = old_value.data.number,\n+                                               .os_newval.number = value.data.number,",
            "html_url": "https://github.com/neovim/neovim/pull/25394#discussion_r1346233066",
            "id": 1346233066,
            "in_reply_to_id": 1346219313,
            "line": 3761,
            "node_id": "PRRC_kwDOAPphoM5QPeLq",
            "original_commit_id": "ee75456fb655ccd3f2f380510879a5bfb606e80b",
            "original_line": 3761,
            "original_position": 578,
            "original_start_line": 3753,
            "path": "src/nvim/option.c",
            "position": 599,
            "pull_request_review_id": 1658157517,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25394",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1346233066/reactions"
            },
            "side": "RIGHT",
            "start_line": 3760,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-10-04T17:32:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1346233066",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        }
    ],
    "comment_regular_data": [],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/25394/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/25394/commits",
    "created_at": "2023-09-27T17:33:12Z",
    "diff_url": "https://github.com/neovim/neovim/pull/25394.diff",
    "draft": true,
    "head": {
        "label": "famiu:refactor/options/set_option",
        "ref": "refactor/options/set_option",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/famiu/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/famiu/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/famiu/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/famiu/neovim/branches{/branch}",
            "clone_url": "https://github.com/famiu/neovim.git",
            "collaborators_url": "https://api.github.com/repos/famiu/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/famiu/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/famiu/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/famiu/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/famiu/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/famiu/neovim/contributors",
            "created_at": "2021-10-11T04:58:58Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/famiu/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/famiu/neovim/downloads",
            "events_url": "https://api.github.com/repos/famiu/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/famiu/neovim/forks",
            "full_name": "famiu/neovim",
            "git_commits_url": "https://api.github.com/repos/famiu/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/famiu/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/famiu/neovim/git/tags{/sha}",
            "git_url": "git://github.com/famiu/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/famiu/neovim/hooks",
            "html_url": "https://github.com/famiu/neovim",
            "id": 415783665,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/famiu/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/famiu/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/famiu/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/famiu/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/famiu/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/famiu/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/famiu/neovim/merges",
            "milestones_url": "https://api.github.com/repos/famiu/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOGMha8Q",
            "notifications_url": "https://api.github.com/repos/famiu/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/famiu/neovim/pulls{/number}",
            "pushed_at": "2023-10-09T13:34:32Z",
            "releases_url": "https://api.github.com/repos/famiu/neovim/releases{/id}",
            "size": 247554,
            "ssh_url": "git@github.com:famiu/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/famiu/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/famiu/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/famiu/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/famiu/neovim/subscription",
            "svn_url": "https://github.com/famiu/neovim",
            "tags_url": "https://api.github.com/repos/famiu/neovim/tags",
            "teams_url": "https://api.github.com/repos/famiu/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/famiu/neovim/git/trees{/sha}",
            "updated_at": "2022-08-29T10:09:33Z",
            "url": "https://api.github.com/repos/famiu/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "237a4b024b494730cd2b9b62f9bc5fbc967248d0",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
            "events_url": "https://api.github.com/users/famiu/events{/privacy}",
            "followers_url": "https://api.github.com/users/famiu/followers",
            "following_url": "https://api.github.com/users/famiu/following{/other_user}",
            "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/famiu",
            "id": 29580810,
            "login": "famiu",
            "node_id": "MDQ6VXNlcjI5NTgwODEw",
            "organizations_url": "https://api.github.com/users/famiu/orgs",
            "received_events_url": "https://api.github.com/users/famiu/received_events",
            "repos_url": "https://api.github.com/users/famiu/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/famiu"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/25394",
    "id": 1532848464,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25394",
    "labels": [
        {
            "color": "C5DEF5",
            "default": false,
            "description": "changes that are not features or bugfixes",
            "id": 106949155,
            "name": "refactor",
            "node_id": "MDU6TGFiZWwxMDY5NDkxNTU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/refactor"
        },
        {
            "color": "F9D0C4",
            "default": false,
            "description": "",
            "id": 3968935075,
            "name": "breaking-change",
            "node_id": "LA_kwDOAPphoM7skSSj",
            "url": "https://api.github.com/repos/neovim/neovim/labels/breaking-change"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "",
            "id": 4242493821,
            "name": "options",
            "node_id": "LA_kwDOAPphoM7831F9",
            "url": "https://api.github.com/repos/neovim/neovim/labels/options"
        }
    ],
    "locked": false,
    "merge_commit_sha": "bfed50dcee6fe6a78b9a907acfe295ef6acdf659",
    "merged_at": null,
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5bXWlQ",
    "number": 25394,
    "patch_url": "https://github.com/neovim/neovim/pull/25394.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/25394/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/237a4b024b494730cd2b9b62f9bc5fbc967248d0",
    "title": "refactor(options)!: unify all interfaces for setting options",
    "updated_at": "2023-10-09T12:28:59Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/25394",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
        "events_url": "https://api.github.com/users/famiu/events{/privacy}",
        "followers_url": "https://api.github.com/users/famiu/followers",
        "following_url": "https://api.github.com/users/famiu/following{/other_user}",
        "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/famiu",
        "id": 29580810,
        "login": "famiu",
        "node_id": "MDQ6VXNlcjI5NTgwODEw",
        "organizations_url": "https://api.github.com/users/famiu/orgs",
        "received_events_url": "https://api.github.com/users/famiu/received_events",
        "repos_url": "https://api.github.com/users/famiu/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/famiu"
    }
}