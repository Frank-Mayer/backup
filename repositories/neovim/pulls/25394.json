{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/25394/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/25394/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/25394"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/25394"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/25394/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/25394"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/3642f2fb44b6a3681e6a637671690258aa83cc62"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 4926,
            "forks_count": 4926,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1658,
            "open_issues_count": 1658,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2023-10-17T01:51:36Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 253933,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 70184,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2023-10-17T01:41:30Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 70184,
            "watchers_count": 70184,
            "web_commit_signoff_required": false
        },
        "sha": "a4c4b39d55db087af19a5ed8b6a1e5ecacb0c615",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": "Problem: There is a separate function for setting an option for each type, which are currently `set_string_option`, `set_num_option`, `set_bool_option`, `do_set_option_value`, `do_set_num_option`, `do_set_bool_option`, `do_set_option_string`. This leads to a lot of unnecessary code duplication and also vastly reduces maintainability and extensibility.\r\n\r\nSolution: Unify most ways of setting options to a single `set_option` function, cleaning up a lot of code duplication and greatly simplifying the options code, thus making it a lot more extensible and making it easier to add more option types. This PR unifies everything besides some functions used for string options (`set_string_option`, `did_set_string_option`, etc.). Unification of the code paths for setting string options and all other options will be done in a follow-up PR.\r\n\r\nBREAKING CHANGE: This breaks the `OptionSet` autocommand, as the `v:` values associated with it (`v:option_new`, `v:option_old`, `v:option_oldlocal` and `v:option_oldglobal`) are now the same type as the option, instead of all option values being converted to strings.",
    "closed_at": "2023-10-16T18:41:36Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25394#discussion_r1346219313"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25394"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1346219313"
                }
            },
            "author_association": "MEMBER",
            "body": "I would rather have two ternaries, inside `.os_oldval` and .os_newval` respectively, so the rest of the code can be shared.",
            "commit_id": "3642f2fb44b6a3681e6a637671690258aa83cc62",
            "created_at": "2023-10-04T17:21:10Z",
            "diff_hunk": "@@ -3733,67 +3681,136 @@ int get_option_value_strict(char *name, int64_t *numval, char **stringval, int o\n   return rv;\n }\n \n-// Return information for option at 'opt_idx'\n+/// Return information for option at 'opt_idx'\n vimoption_T *get_option(int opt_idx)\n {\n   return &options[opt_idx];\n }\n \n-/// Clear an option\n-///\n-/// The exact semantics of this depend on the option.\n-static OptVal clear_optval(const char *name, uint32_t flags, void *varp, buf_T *buf, win_T *win)\n+static const char *set_option(int opt_idx, void *varp, OptVal value, int opt_flags, char *errbuf,\n+                              size_t errbuflen)\n {\n-  OptVal v = NIL_OPTVAL;\n+  const char *errmsg = NULL;\n+  bool value_checked = false;\n \n-  // Change the type of the OptVal to the type used by the option so that it can be cleared.\n-  // TODO(famiu): Clean up all of this after set_(num|bool|string)_option() is unified.\n+  // TODO(famiu): Unify set_string_option with set_option.\n+  if (value.type == kOptValTypeString) {\n+    errmsg = set_string_option(opt_idx, varp, value.data.string.data, opt_flags, &value_checked,\n+                               errbuf, errbuflen);\n+    goto end;\n+  }\n \n-  if (flags & P_BOOL) {\n-    v.type = kOptValTypeBoolean;\n-    if ((int *)varp == &buf->b_p_ar) {\n-      // TODO(lewis6991): replace this with a more general condition that\n-      // indicates we are setting the local value of a global-local option\n-      v.data.boolean = kNone;\n-    } else {\n-      v = get_option_value(name, NULL, OPT_GLOBAL, NULL);\n-    }\n-  } else if (flags & P_NUM) {\n-    v.type = kOptValTypeNumber;\n-    if ((OptInt *)varp == &curbuf->b_p_ul) {\n-      // The one true special case\n-      v.data.number = NO_LOCAL_UNDOLEVEL;\n-    } else if ((OptInt *)varp == &win->w_p_so || (OptInt *)varp == &win->w_p_siso) {\n-      // TODO(lewis6991): replace this with a more general condition that\n-      // indicates we are setting the local value of a global-local option\n-      v.data.number = -1;\n-    } else {\n-      v = get_option_value(name, NULL, OPT_GLOBAL, NULL);\n+  OptVal old_value = optval_from_varp(value.type, varp);\n+  OptVal old_global_value = NIL_OPTVAL;\n+\n+  // Disallow changing some options from secure mode.\n+  if ((secure || sandbox != 0) && (options[opt_idx].flags & P_SECURE)) {\n+    return e_secure;\n+  }\n+\n+  // Save the global value before changing anything. This is needed as for\n+  // a global-only option setting the \"local value\" in fact sets the global\n+  // value (since there is only one value).\n+  if ((opt_flags & (OPT_LOCAL | OPT_GLOBAL)) == 0) {\n+    old_global_value =\n+      optval_from_varp(value.type, get_varp_scope(&(options[opt_idx]), OPT_GLOBAL));\n+  }\n+\n+  if (value.type == kOptValTypeNumber) {\n+    errmsg = validate_num_option((OptInt *)varp, &value.data.number);\n+\n+    // Don't change the value and return early if validation failed.\n+    if (errmsg != NULL) {\n+      return errmsg;\n     }\n-  } else if (flags & P_STRING) {\n-    v.type = kOptValTypeString;\n-    v.data.string.data = NULL;\n   }\n \n-  return v;\n-}\n+  // Set the new option value.\n+  set_option_varp(varp, value);\n+  // Remember where the option was set.\n+  set_option_sctx_idx(opt_idx, opt_flags, current_sctx);\n+  // May set global value for local option.\n+  if ((opt_flags & (OPT_LOCAL | OPT_GLOBAL)) == 0) {\n+    set_option_varp(get_varp_scope(&(options[opt_idx]), OPT_GLOBAL), value);\n+  }\n \n-static const char *set_option(int opt_idx, void *varp, OptVal *v, int opt_flags, char *errbuf,\n-                              size_t errbuflen)\n-{\n-  const char *errmsg = NULL;\n+  // Invoke the option specific callback function to validate and apply the new value.\n+  bool doskip = false;\n+  opt_did_set_cb_T did_set_cb;\n \n-  bool value_checked = false;\n+  if ((int *)varp == &p_force_on) {\n+    did_set_cb = did_set_force_on;\n+  } else if ((int *)varp == &p_force_off) {\n+    did_set_cb = did_set_force_off;\n+  } else {\n+    did_set_cb = options[opt_idx].opt_did_set_cb;\n+  }\n+  if (did_set_cb != NULL) {\n+    // TODO(famiu): make os_oldval and os_newval use OptVal.\n+    optset_T did_set_cb_args = (value.type == kOptValTypeNumber)\n+                                 ? (optset_T){ .os_varp = varp,\n+                                               .os_flags = opt_flags,\n+                                               .os_oldval.number = old_value.data.number,\n+                                               .os_newval.number = value.data.number,",
            "html_url": "https://github.com/neovim/neovim/pull/25394#discussion_r1346219313",
            "id": 1346219313,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5QPa0x",
            "original_commit_id": "ee75456fb655ccd3f2f380510879a5bfb606e80b",
            "original_line": 3689,
            "original_position": 578,
            "original_start_line": 3753,
            "path": "src/nvim/option.c",
            "position": null,
            "pull_request_review_id": 1658136002,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25394",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1346219313/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-10-04T17:21:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1346219313",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25394#discussion_r1346233066"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25394"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1346233066"
                }
            },
            "author_association": "MEMBER",
            "body": "Ah, that would indeed be a much smarter way of doing it",
            "commit_id": "3642f2fb44b6a3681e6a637671690258aa83cc62",
            "created_at": "2023-10-04T17:32:04Z",
            "diff_hunk": "@@ -3733,67 +3681,136 @@ int get_option_value_strict(char *name, int64_t *numval, char **stringval, int o\n   return rv;\n }\n \n-// Return information for option at 'opt_idx'\n+/// Return information for option at 'opt_idx'\n vimoption_T *get_option(int opt_idx)\n {\n   return &options[opt_idx];\n }\n \n-/// Clear an option\n-///\n-/// The exact semantics of this depend on the option.\n-static OptVal clear_optval(const char *name, uint32_t flags, void *varp, buf_T *buf, win_T *win)\n+static const char *set_option(int opt_idx, void *varp, OptVal value, int opt_flags, char *errbuf,\n+                              size_t errbuflen)\n {\n-  OptVal v = NIL_OPTVAL;\n+  const char *errmsg = NULL;\n+  bool value_checked = false;\n \n-  // Change the type of the OptVal to the type used by the option so that it can be cleared.\n-  // TODO(famiu): Clean up all of this after set_(num|bool|string)_option() is unified.\n+  // TODO(famiu): Unify set_string_option with set_option.\n+  if (value.type == kOptValTypeString) {\n+    errmsg = set_string_option(opt_idx, varp, value.data.string.data, opt_flags, &value_checked,\n+                               errbuf, errbuflen);\n+    goto end;\n+  }\n \n-  if (flags & P_BOOL) {\n-    v.type = kOptValTypeBoolean;\n-    if ((int *)varp == &buf->b_p_ar) {\n-      // TODO(lewis6991): replace this with a more general condition that\n-      // indicates we are setting the local value of a global-local option\n-      v.data.boolean = kNone;\n-    } else {\n-      v = get_option_value(name, NULL, OPT_GLOBAL, NULL);\n-    }\n-  } else if (flags & P_NUM) {\n-    v.type = kOptValTypeNumber;\n-    if ((OptInt *)varp == &curbuf->b_p_ul) {\n-      // The one true special case\n-      v.data.number = NO_LOCAL_UNDOLEVEL;\n-    } else if ((OptInt *)varp == &win->w_p_so || (OptInt *)varp == &win->w_p_siso) {\n-      // TODO(lewis6991): replace this with a more general condition that\n-      // indicates we are setting the local value of a global-local option\n-      v.data.number = -1;\n-    } else {\n-      v = get_option_value(name, NULL, OPT_GLOBAL, NULL);\n+  OptVal old_value = optval_from_varp(value.type, varp);\n+  OptVal old_global_value = NIL_OPTVAL;\n+\n+  // Disallow changing some options from secure mode.\n+  if ((secure || sandbox != 0) && (options[opt_idx].flags & P_SECURE)) {\n+    return e_secure;\n+  }\n+\n+  // Save the global value before changing anything. This is needed as for\n+  // a global-only option setting the \"local value\" in fact sets the global\n+  // value (since there is only one value).\n+  if ((opt_flags & (OPT_LOCAL | OPT_GLOBAL)) == 0) {\n+    old_global_value =\n+      optval_from_varp(value.type, get_varp_scope(&(options[opt_idx]), OPT_GLOBAL));\n+  }\n+\n+  if (value.type == kOptValTypeNumber) {\n+    errmsg = validate_num_option((OptInt *)varp, &value.data.number);\n+\n+    // Don't change the value and return early if validation failed.\n+    if (errmsg != NULL) {\n+      return errmsg;\n     }\n-  } else if (flags & P_STRING) {\n-    v.type = kOptValTypeString;\n-    v.data.string.data = NULL;\n   }\n \n-  return v;\n-}\n+  // Set the new option value.\n+  set_option_varp(varp, value);\n+  // Remember where the option was set.\n+  set_option_sctx_idx(opt_idx, opt_flags, current_sctx);\n+  // May set global value for local option.\n+  if ((opt_flags & (OPT_LOCAL | OPT_GLOBAL)) == 0) {\n+    set_option_varp(get_varp_scope(&(options[opt_idx]), OPT_GLOBAL), value);\n+  }\n \n-static const char *set_option(int opt_idx, void *varp, OptVal *v, int opt_flags, char *errbuf,\n-                              size_t errbuflen)\n-{\n-  const char *errmsg = NULL;\n+  // Invoke the option specific callback function to validate and apply the new value.\n+  bool doskip = false;\n+  opt_did_set_cb_T did_set_cb;\n \n-  bool value_checked = false;\n+  if ((int *)varp == &p_force_on) {\n+    did_set_cb = did_set_force_on;\n+  } else if ((int *)varp == &p_force_off) {\n+    did_set_cb = did_set_force_off;\n+  } else {\n+    did_set_cb = options[opt_idx].opt_did_set_cb;\n+  }\n+  if (did_set_cb != NULL) {\n+    // TODO(famiu): make os_oldval and os_newval use OptVal.\n+    optset_T did_set_cb_args = (value.type == kOptValTypeNumber)\n+                                 ? (optset_T){ .os_varp = varp,\n+                                               .os_flags = opt_flags,\n+                                               .os_oldval.number = old_value.data.number,\n+                                               .os_newval.number = value.data.number,",
            "html_url": "https://github.com/neovim/neovim/pull/25394#discussion_r1346233066",
            "id": 1346233066,
            "in_reply_to_id": 1346219313,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5QPeLq",
            "original_commit_id": "ee75456fb655ccd3f2f380510879a5bfb606e80b",
            "original_line": 3689,
            "original_position": 578,
            "original_start_line": 3753,
            "path": "src/nvim/option.c",
            "position": null,
            "pull_request_review_id": 1658157517,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25394",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1346233066/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-10-04T17:32:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1346233066",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25394#discussion_r1359647411"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25394"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1359647411"
                }
            },
            "author_association": "MEMBER",
            "body": "Shouldn't you use `strcmp` here?",
            "commit_id": "3642f2fb44b6a3681e6a637671690258aa83cc62",
            "created_at": "2023-10-14T21:12:32Z",
            "diff_hunk": "@@ -8694,7 +8704,7 @@ char *do_string_sub(char *str, char *pat, char *sub, typval_T *expr, const char\n \n   char *ret = xstrdup(ga.ga_data == NULL ? str : ga.ga_data);\n   ga_clear(&ga);\n-  if (p_cpo == empty_option) {\n+  if (p_cpo == empty_string_option) {",
            "html_url": "https://github.com/neovim/neovim/pull/25394#discussion_r1359647411",
            "id": 1359647411,
            "line": 8713,
            "node_id": "PRRC_kwDOAPphoM5RCpKz",
            "original_commit_id": "c130a22c746ec9d872f3062b618e01168067f1c7",
            "original_line": 8713,
            "original_position": 40,
            "original_start_line": null,
            "path": "src/nvim/eval.c",
            "position": 41,
            "pull_request_review_id": 1678474299,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25394",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1359647411/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-14T21:14:22Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1359647411",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/62502207?v=4",
                "events_url": "https://api.github.com/users/MariaSolOs/events{/privacy}",
                "followers_url": "https://api.github.com/users/MariaSolOs/followers",
                "following_url": "https://api.github.com/users/MariaSolOs/following{/other_user}",
                "gists_url": "https://api.github.com/users/MariaSolOs/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/MariaSolOs",
                "id": 62502207,
                "login": "MariaSolOs",
                "node_id": "MDQ6VXNlcjYyNTAyMjA3",
                "organizations_url": "https://api.github.com/users/MariaSolOs/orgs",
                "received_events_url": "https://api.github.com/users/MariaSolOs/received_events",
                "repos_url": "https://api.github.com/users/MariaSolOs/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/MariaSolOs/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MariaSolOs/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/MariaSolOs"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25394#discussion_r1359647876"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25394"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1359647876"
                }
            },
            "author_association": "MEMBER",
            "body": "Nope, we're comparing the literal addresses here since `empty_string_option` often isn't copied, and that's the precise case we want to handle here.",
            "commit_id": "3642f2fb44b6a3681e6a637671690258aa83cc62",
            "created_at": "2023-10-14T21:15:48Z",
            "diff_hunk": "@@ -8694,7 +8704,7 @@ char *do_string_sub(char *str, char *pat, char *sub, typval_T *expr, const char\n \n   char *ret = xstrdup(ga.ga_data == NULL ? str : ga.ga_data);\n   ga_clear(&ga);\n-  if (p_cpo == empty_option) {\n+  if (p_cpo == empty_string_option) {",
            "html_url": "https://github.com/neovim/neovim/pull/25394#discussion_r1359647876",
            "id": 1359647876,
            "in_reply_to_id": 1359647411,
            "line": 8713,
            "node_id": "PRRC_kwDOAPphoM5RCpSE",
            "original_commit_id": "c130a22c746ec9d872f3062b618e01168067f1c7",
            "original_line": 8713,
            "original_position": 40,
            "original_start_line": null,
            "path": "src/nvim/eval.c",
            "position": 41,
            "pull_request_review_id": 1678474703,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25394",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1359647876/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-14T21:16:18Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1359647876",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25394#discussion_r1360545333"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25394"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360545333"
                }
            },
            "author_association": "MEMBER",
            "body": "Also mention in `vim_diff.txt`?",
            "commit_id": "3642f2fb44b6a3681e6a637671690258aa83cc62",
            "created_at": "2023-10-16T11:56:25Z",
            "diff_hunk": "@@ -71,6 +71,9 @@ The following changes may require adaptations in user config or plugins.\n   defined by LSP, and hence previously parsed snippets might now be considered\n   invalid input.\n \n+• |v:option_new|, |v:option_old|, |v:option_oldlocal|, |v:option_oldglobal|\n+  now have the type of the option instead of always being strings.\n+",
            "html_url": "https://github.com/neovim/neovim/pull/25394#discussion_r1360545333",
            "id": 1360545333,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5RGEY1",
            "original_commit_id": "c352bd470cc87c3545a38485f1dd4525afdd8635",
            "original_line": 77,
            "original_position": 6,
            "original_start_line": 74,
            "path": "runtime/doc/news.txt",
            "position": null,
            "pull_request_review_id": 1679787401,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25394",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360545333/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": "RIGHT",
            "subject_type": "line",
            "updated_at": "2023-10-16T11:56:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360545333",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25394#discussion_r1360554127"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25394"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360554127"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  // `set_option` copies the new option value, so it needs to be freed here.\r\n```",
            "commit_id": "3642f2fb44b6a3681e6a637671690258aa83cc62",
            "created_at": "2023-10-16T12:04:37Z",
            "diff_hunk": "@@ -1486,8 +1402,21 @@ static void do_set_option(int opt_flags, char **argp, bool *did_show, char *errb\n     }\n   }\n \n-  do_set_option_value(opt_idx, opt_flags, argp, prefix, nextchar, op, flags, varp,\n-                      errbuf, errbuflen, errmsg);\n+  // Don't try to change hidden option.\n+  if (varp == NULL) {\n+    return;\n+  }\n+\n+  OptVal newval = get_option_newval(opt_idx, opt_flags, prefix, argp, nextchar, op, flags, varp,\n+                                    errbuf, errbuflen, errmsg);\n+\n+  if (newval.type == kOptValTypeNil || *errmsg != NULL) {\n+    return;\n+  }\n+\n+  *errmsg = set_option(opt_idx, varp, newval, opt_flags, op == OP_NONE, errbuf, errbuflen);\n+  // `set_option` copies the new option value, so it needs to be freed  here.",
            "html_url": "https://github.com/neovim/neovim/pull/25394#discussion_r1360554127",
            "id": 1360554127,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5RGGiP",
            "original_commit_id": "c352bd470cc87c3545a38485f1dd4525afdd8635",
            "original_line": 1418,
            "original_position": 418,
            "original_start_line": null,
            "path": "src/nvim/option.c",
            "position": null,
            "pull_request_review_id": 1679801600,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25394",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360554127/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-16T12:04:37Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360554127",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25394#discussion_r1360560826"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25394"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360560826"
                }
            },
            "author_association": "MEMBER",
            "body": "This triggers the abort:\r\n```vim\r\nsetlocal autoread<\r\nsetlocal autoread!\r\n```",
            "commit_id": "3642f2fb44b6a3681e6a637671690258aa83cc62",
            "created_at": "2023-10-16T12:10:28Z",
            "diff_hunk": "@@ -1258,34 +1134,144 @@ static int validate_opt_idx(win_T *win, int opt_idx, int opt_flags, uint32_t fla\n   return OK;\n }\n \n-static void do_set_option_value(int opt_idx, int opt_flags, char **argp, set_prefix_T prefix,\n+/// Get new option value from argp. Allocated OptVal must be freed by caller.\n+static OptVal get_option_newval(int opt_idx, int opt_flags, set_prefix_T prefix, char **argp,\n                                 int nextchar, set_op_T op, uint32_t flags, void *varp, char *errbuf,\n-                                size_t errbuflen, const char **errmsg)\n+                                const size_t errbuflen, const char **errmsg)\n+  FUNC_ATTR_WARN_UNUSED_RESULT\n {\n-  bool value_checked = false;\n-  if (flags & P_BOOL) {        // boolean\n-    do_set_bool(opt_idx, opt_flags, prefix, nextchar, varp, errmsg);\n-  } else if (flags & P_NUM) {  // numeric\n-    do_set_num(opt_idx, opt_flags, argp, nextchar, op, varp, errbuf, errbuflen, errmsg);\n-  } else if (opt_idx >= 0) {   // string.\n-    do_set_option_string(opt_idx, opt_flags, argp, nextchar, op, flags, varp, errbuf,\n-                         errbuflen, &value_checked, errmsg);\n-  } else {\n-    // key code option(FIXME(tarruda): Show a warning or something\n-    // similar)\n+  assert(varp != NULL);\n+\n+  char *arg = *argp;\n+  OptVal oldval = optval_from_varp_flags(varp, flags);\n+  OptVal newval = NIL_OPTVAL;\n+\n+  switch (oldval.type) {\n+  case kOptValTypeNil:\n+    abort();\n+  case kOptValTypeBoolean: {\n+    TriState newval_bool;\n+\n+    // \":set opt!\": invert\n+    // \":set opt&\": reset to default value\n+    // \":set opt<\": reset to global value\n+    if (nextchar == '!') {\n+      switch (oldval.data.boolean) {\n+      case kNone:\n+        abort();",
            "html_url": "https://github.com/neovim/neovim/pull/25394#discussion_r1360560826",
            "id": 1360560826,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5RGIK6",
            "original_commit_id": "4dcf28928aa29691618d269515d56d6b86913acb",
            "original_line": 1161,
            "original_position": 179,
            "original_start_line": null,
            "path": "src/nvim/option.c",
            "position": null,
            "pull_request_review_id": 1679813132,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25394",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360560826/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-16T12:10:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360560826",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25394#discussion_r1360562591"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25394"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360562591"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n        newval_bool = kNone;\r\n        break;\r\n```",
            "commit_id": "3642f2fb44b6a3681e6a637671690258aa83cc62",
            "created_at": "2023-10-16T12:11:44Z",
            "diff_hunk": "@@ -1258,34 +1134,144 @@ static int validate_opt_idx(win_T *win, int opt_idx, int opt_flags, uint32_t fla\n   return OK;\n }\n \n-static void do_set_option_value(int opt_idx, int opt_flags, char **argp, set_prefix_T prefix,\n+/// Get new option value from argp. Allocated OptVal must be freed by caller.\n+static OptVal get_option_newval(int opt_idx, int opt_flags, set_prefix_T prefix, char **argp,\n                                 int nextchar, set_op_T op, uint32_t flags, void *varp, char *errbuf,\n-                                size_t errbuflen, const char **errmsg)\n+                                const size_t errbuflen, const char **errmsg)\n+  FUNC_ATTR_WARN_UNUSED_RESULT\n {\n-  bool value_checked = false;\n-  if (flags & P_BOOL) {        // boolean\n-    do_set_bool(opt_idx, opt_flags, prefix, nextchar, varp, errmsg);\n-  } else if (flags & P_NUM) {  // numeric\n-    do_set_num(opt_idx, opt_flags, argp, nextchar, op, varp, errbuf, errbuflen, errmsg);\n-  } else if (opt_idx >= 0) {   // string.\n-    do_set_option_string(opt_idx, opt_flags, argp, nextchar, op, flags, varp, errbuf,\n-                         errbuflen, &value_checked, errmsg);\n-  } else {\n-    // key code option(FIXME(tarruda): Show a warning or something\n-    // similar)\n+  assert(varp != NULL);\n+\n+  char *arg = *argp;\n+  OptVal oldval = optval_from_varp_flags(varp, flags);\n+  OptVal newval = NIL_OPTVAL;\n+\n+  switch (oldval.type) {\n+  case kOptValTypeNil:\n+    abort();\n+  case kOptValTypeBoolean: {\n+    TriState newval_bool;\n+\n+    // \":set opt!\": invert\n+    // \":set opt&\": reset to default value\n+    // \":set opt<\": reset to global value\n+    if (nextchar == '!') {\n+      switch (oldval.data.boolean) {\n+      case kNone:\n+        abort();",
            "html_url": "https://github.com/neovim/neovim/pull/25394#discussion_r1360562591",
            "id": 1360562591,
            "in_reply_to_id": 1360560826,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5RGImf",
            "original_commit_id": "4dcf28928aa29691618d269515d56d6b86913acb",
            "original_line": 1161,
            "original_position": 179,
            "original_start_line": null,
            "path": "src/nvim/option.c",
            "position": null,
            "pull_request_review_id": 1679815365,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25394",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360562591/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-16T12:11:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360562591",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25394#discussion_r1360568460"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25394"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360568460"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n      newval_num = (OptInt)(intptr_t)options[opt_idx].def_val;\r\n```",
            "commit_id": "3642f2fb44b6a3681e6a637671690258aa83cc62",
            "created_at": "2023-10-16T12:17:07Z",
            "diff_hunk": "@@ -1328,34 +1134,144 @@ static int validate_opt_idx(win_T *win, int opt_idx, int opt_flags, uint32_t fla\n   return OK;\n }\n \n-static void do_set_option_value(int opt_idx, int opt_flags, char **argp, set_prefix_T prefix,\n+/// Get new option value from argp. Allocated OptVal must be freed by caller.\n+static OptVal get_option_newval(int opt_idx, int opt_flags, set_prefix_T prefix, char **argp,\n                                 int nextchar, set_op_T op, uint32_t flags, void *varp, char *errbuf,\n-                                size_t errbuflen, const char **errmsg)\n+                                const size_t errbuflen, const char **errmsg)\n+  FUNC_ATTR_WARN_UNUSED_RESULT\n {\n-  bool value_checked = false;\n-  if (flags & P_BOOL) {        // boolean\n-    do_set_bool(opt_idx, opt_flags, prefix, nextchar, varp, errmsg);\n-  } else if (flags & P_NUM) {  // numeric\n-    do_set_num(opt_idx, opt_flags, argp, nextchar, op, varp, errbuf, errbuflen, errmsg);\n-  } else if (opt_idx >= 0) {   // string.\n-    do_set_option_string(opt_idx, opt_flags, argp, nextchar, op, flags, varp, errbuf,\n-                         errbuflen, &value_checked, errmsg);\n-  } else {\n-    // key code option(FIXME(tarruda): Show a warning or something\n-    // similar)\n+  assert(varp != NULL);\n+\n+  char *arg = *argp;\n+  OptVal oldval = optval_from_varp_flags(varp, flags);\n+  OptVal newval = NIL_OPTVAL;\n+\n+  switch (oldval.type) {\n+  case kOptValTypeNil:\n+    abort();\n+  case kOptValTypeBoolean: {\n+    TriState newval_bool;\n+\n+    // \":set opt!\": invert\n+    // \":set opt&\": reset to default value\n+    // \":set opt<\": reset to global value\n+    if (nextchar == '!') {\n+      switch (oldval.data.boolean) {\n+      case kNone:\n+        abort();\n+      case kTrue:\n+        newval_bool = kFalse;\n+        break;\n+      case kFalse:\n+        newval_bool = kTrue;\n+        break;\n+      }\n+    } else if (nextchar == '&') {\n+      newval_bool = TRISTATE_FROM_INT((int)(intptr_t)options[opt_idx].def_val);\n+    } else if (nextchar == '<') {\n+      // For 'autoread', kNone means to use global value.\n+      if ((int *)varp == &curbuf->b_p_ar && opt_flags == OPT_LOCAL) {\n+        newval_bool = kNone;\n+      } else {\n+        newval_bool = TRISTATE_FROM_INT(*(int *)get_varp_scope(&(options[opt_idx]), OPT_GLOBAL));\n+      }\n+    } else {\n+      // \":set invopt\": invert\n+      // \":set opt\" or \":set noopt\": set or reset\n+      if (prefix == PREFIX_INV) {\n+        newval_bool = *(int *)varp ^ 1;\n+      } else {\n+        newval_bool = prefix == PREFIX_NO ? 0 : 1;\n+      }\n+    }\n+\n+    newval = BOOLEAN_OPTVAL(newval_bool);\n+    break;\n   }\n+  case kOptValTypeNumber: {\n+    OptInt oldval_num = oldval.data.number;\n+    OptInt newval_num;\n+\n+    // Different ways to set a number option:\n+    // &            set to default value\n+    // <            set to global value\n+    // <xx>         accept special key codes for 'wildchar'\n+    // c            accept any non-digit for 'wildchar'\n+    // [-]0-9       set number\n+    // other        error\n+    arg++;\n+    if (nextchar == '&') {\n+      newval_num = (varnumber_T)options[opt_idx].def_val;",
            "html_url": "https://github.com/neovim/neovim/pull/25394#discussion_r1360568460",
            "id": 1360568460,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5RGKCM",
            "original_commit_id": "c352bd470cc87c3545a38485f1dd4525afdd8635",
            "original_line": 1204,
            "original_position": 319,
            "original_start_line": null,
            "path": "src/nvim/option.c",
            "position": null,
            "pull_request_review_id": 1679824489,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25394",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360568460/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-16T12:17:07Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360568460",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25394#discussion_r1360810928"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25394"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360810928"
                }
            },
            "author_association": "MEMBER",
            "body": "Let's add some extra context \r\n\r\n```suggestion\r\n• OptionSet autocommand args (|v:option_new|, |v:option_old|, |v:option_oldlocal|, |v:option_oldglobal|\r\n```",
            "commit_id": "3642f2fb44b6a3681e6a637671690258aa83cc62",
            "created_at": "2023-10-16T15:01:46Z",
            "diff_hunk": "@@ -71,6 +71,9 @@ The following changes may require adaptations in user config or plugins.\n   defined by LSP, and hence previously parsed snippets might now be considered\n   invalid input.\n \n+• |v:option_new|, |v:option_old|, |v:option_oldlocal|, |v:option_oldglobal|",
            "html_url": "https://github.com/neovim/neovim/pull/25394#discussion_r1360810928",
            "id": 1360810928,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5RHFOw",
            "original_commit_id": "658dda04e29e2792869eb84383836616bb89c150",
            "original_line": 74,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/news.txt",
            "position": null,
            "pull_request_review_id": 1680232055,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25394",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360810928/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-16T15:01:47Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360810928",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25394#discussion_r1360813013"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25394"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360813013"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n  OptionSet autocommand args (|v:option_new|, |v:option_old|, |v:option_oldlocal|, |v:option_oldglobal|\r\n```",
            "commit_id": "3642f2fb44b6a3681e6a637671690258aa83cc62",
            "created_at": "2023-10-16T15:02:44Z",
            "diff_hunk": "@@ -379,6 +379,8 @@ UI/Display:\n Variables:\n   |v:progpath| is always absolute (\"full\")\n   |v:windowid| is always available (for use by external UIs)\n+  |v:option_new|, |v:option_old|, |v:option_oldlocal|, |v:option_oldglobal|",
            "html_url": "https://github.com/neovim/neovim/pull/25394#discussion_r1360813013",
            "id": 1360813013,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5RHFvV",
            "original_commit_id": "658dda04e29e2792869eb84383836616bb89c150",
            "original_line": 382,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/vim_diff.txt",
            "position": null,
            "pull_request_review_id": 1680236571,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25394",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360813013/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-16T15:02:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360813013",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25394#discussion_r1360819322"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25394"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360819322"
                }
            },
            "author_association": "MEMBER",
            "body": "\"consume\" implies that some state is being advanced (e.g. in a stream/queue/etc), is that the case here?",
            "commit_id": "3642f2fb44b6a3681e6a637671690258aa83cc62",
            "created_at": "2023-10-16T15:05:43Z",
            "diff_hunk": "@@ -1897,6 +1897,45 @@ static OptVal tv_to_optval(typval_T *tv, const char *option, uint32_t flags, boo\n   return value;\n }\n \n+/// Consume an option value and convert it to typval.",
            "html_url": "https://github.com/neovim/neovim/pull/25394#discussion_r1360819322",
            "id": 1360819322,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5RHHR6",
            "original_commit_id": "658dda04e29e2792869eb84383836616bb89c150",
            "original_line": 1900,
            "original_position": 31,
            "original_start_line": null,
            "path": "src/nvim/eval/vars.c",
            "position": null,
            "pull_request_review_id": 1680246883,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25394",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360819322/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-16T15:05:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360819322",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25394#discussion_r1360822517"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25394"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360822517"
                }
            },
            "author_association": "MEMBER",
            "body": "This looks a bit weird, I was going to suggest `CSTR_AS_OPTVALDATA` but if it is just these two cases maybe spelling out `.os_oldval.string = CSTR_AS_STRING(oldval)` is just fine for now.",
            "commit_id": "3642f2fb44b6a3681e6a637671690258aa83cc62",
            "created_at": "2023-10-16T15:07:24Z",
            "diff_hunk": "@@ -2757,9 +2744,8 @@ const char *did_set_string_option(buf_T *buf, win_T *win, int opt_idx, char **va\n     .os_varp = varp,\n     .os_idx = opt_idx,\n     .os_flags = opt_flags,\n-    .os_op = op,\n-    .os_oldval.string = oldval,\n-    .os_newval.string = *varp,\n+    .os_oldval = CSTR_AS_OPTVAL(oldval).data,",
            "html_url": "https://github.com/neovim/neovim/pull/25394#discussion_r1360822517",
            "id": 1360822517,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5RHID1",
            "original_commit_id": "658dda04e29e2792869eb84383836616bb89c150",
            "original_line": 2747,
            "original_position": 202,
            "original_start_line": null,
            "path": "src/nvim/optionstr.c",
            "position": null,
            "pull_request_review_id": 1680252108,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25394",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360822517/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-16T15:07:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360822517",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1363104?v=4",
                "events_url": "https://api.github.com/users/bfredl/events{/privacy}",
                "followers_url": "https://api.github.com/users/bfredl/followers",
                "following_url": "https://api.github.com/users/bfredl/following{/other_user}",
                "gists_url": "https://api.github.com/users/bfredl/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/bfredl",
                "id": 1363104,
                "login": "bfredl",
                "node_id": "MDQ6VXNlcjEzNjMxMDQ=",
                "organizations_url": "https://api.github.com/users/bfredl/orgs",
                "received_events_url": "https://api.github.com/users/bfredl/received_events",
                "repos_url": "https://api.github.com/users/bfredl/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/bfredl/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bfredl/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/bfredl"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25394#discussion_r1360822935"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25394"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360822935"
                }
            },
            "author_association": "MEMBER",
            "body": "Potential future improvement: is this OOM even possible in Nvim? Is the OOM being referred-to happening during startup, or could it happen after startup? Does it even matter?",
            "commit_id": "3642f2fb44b6a3681e6a637671690258aa83cc62",
            "created_at": "2023-10-16T15:07:38Z",
            "diff_hunk": "@@ -789,10 +789,9 @@ EXTERN char *escape_chars INIT(= \" \\t\\\\\\\"|\");  // need backslash in cmd line\n \n EXTERN bool keep_help_flag INIT(= false);  // doing :ta from help file\n \n-// When a string option is NULL (which only happens in out-of-memory\n-// situations), it is set to empty_option, to avoid having to check for NULL\n-// everywhere.\n-EXTERN char *empty_option INIT(= \"\");\n+// When a string option is NULL (which only happens in out-of-memory situations), it is set to\n+// empty_string_option, to avoid having to check for NULL everywhere.\n+EXTERN char *empty_string_option INIT(= \"\");",
            "html_url": "https://github.com/neovim/neovim/pull/25394#discussion_r1360822935",
            "id": 1360822935,
            "line": 796,
            "node_id": "PRRC_kwDOAPphoM5RHIKX",
            "original_commit_id": "658dda04e29e2792869eb84383836616bb89c150",
            "original_line": 796,
            "original_position": 10,
            "original_start_line": null,
            "path": "src/nvim/globals.h",
            "position": 12,
            "pull_request_review_id": 1680252817,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25394",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360822935/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-16T15:07:52Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360822935",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25394#discussion_r1360945938"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25394"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360945938"
                }
            },
            "author_association": "MEMBER",
            "body": "\"one options\" as opposed to what? why rename this?",
            "commit_id": "3642f2fb44b6a3681e6a637671690258aa83cc62",
            "created_at": "2023-10-16T16:36:53Z",
            "diff_hunk": "@@ -1328,34 +1134,145 @@ static int validate_opt_idx(win_T *win, int opt_idx, int opt_flags, uint32_t fla\n   return OK;\n }\n \n-static void do_set_option_value(int opt_idx, int opt_flags, char **argp, set_prefix_T prefix,\n+/// Get new option value from argp. Allocated OptVal must be freed by caller.\n+static OptVal get_option_newval(int opt_idx, int opt_flags, set_prefix_T prefix, char **argp,\n                                 int nextchar, set_op_T op, uint32_t flags, void *varp, char *errbuf,\n-                                size_t errbuflen, const char **errmsg)\n+                                const size_t errbuflen, const char **errmsg)\n+  FUNC_ATTR_WARN_UNUSED_RESULT\n {\n-  bool value_checked = false;\n-  if (flags & P_BOOL) {        // boolean\n-    do_set_bool(opt_idx, opt_flags, prefix, nextchar, varp, errmsg);\n-  } else if (flags & P_NUM) {  // numeric\n-    do_set_num(opt_idx, opt_flags, argp, nextchar, op, varp, errbuf, errbuflen, errmsg);\n-  } else if (opt_idx >= 0) {   // string.\n-    do_set_option_string(opt_idx, opt_flags, argp, nextchar, op, flags, varp, errbuf,\n-                         errbuflen, &value_checked, errmsg);\n-  } else {\n-    // key code option(FIXME(tarruda): Show a warning or something\n-    // similar)\n+  assert(varp != NULL);\n+\n+  char *arg = *argp;\n+  OptVal oldval = optval_from_varp_flags(varp, flags);\n+  OptVal newval = NIL_OPTVAL;\n+\n+  switch (oldval.type) {\n+  case kOptValTypeNil:\n+    abort();\n+  case kOptValTypeBoolean: {\n+    TriState newval_bool;\n+\n+    // \":set opt!\": invert\n+    // \":set opt&\": reset to default value\n+    // \":set opt<\": reset to global value\n+    if (nextchar == '!') {\n+      switch (oldval.data.boolean) {\n+      case kNone:\n+        newval_bool = kNone;\n+        break;\n+      case kTrue:\n+        newval_bool = kFalse;\n+        break;\n+      case kFalse:\n+        newval_bool = kTrue;\n+        break;\n+      }\n+    } else if (nextchar == '&') {\n+      newval_bool = TRISTATE_FROM_INT((int)(intptr_t)options[opt_idx].def_val);\n+    } else if (nextchar == '<') {\n+      // For 'autoread', kNone means to use global value.\n+      if ((int *)varp == &curbuf->b_p_ar && opt_flags == OPT_LOCAL) {\n+        newval_bool = kNone;\n+      } else {\n+        newval_bool = TRISTATE_FROM_INT(*(int *)get_varp_scope(&(options[opt_idx]), OPT_GLOBAL));\n+      }\n+    } else {\n+      // \":set invopt\": invert\n+      // \":set opt\" or \":set noopt\": set or reset\n+      if (prefix == PREFIX_INV) {\n+        newval_bool = *(int *)varp ^ 1;\n+      } else {\n+        newval_bool = prefix == PREFIX_NO ? 0 : 1;\n+      }\n+    }\n+\n+    newval = BOOLEAN_OPTVAL(newval_bool);\n+    break;\n   }\n+  case kOptValTypeNumber: {\n+    OptInt oldval_num = oldval.data.number;\n+    OptInt newval_num;\n+\n+    // Different ways to set a number option:\n+    // &            set to default value\n+    // <            set to global value\n+    // <xx>         accept special key codes for 'wildchar'\n+    // c            accept any non-digit for 'wildchar'\n+    // [-]0-9       set number\n+    // other        error\n+    arg++;\n+    if (nextchar == '&') {\n+      newval_num = (OptInt)(intptr_t)options[opt_idx].def_val;\n+    } else if (nextchar == '<') {\n+      if ((OptInt *)varp == &curbuf->b_p_ul && opt_flags == OPT_LOCAL) {\n+        // for 'undolevels' NO_LOCAL_UNDOLEVEL means using the global newval_num\n+        newval_num = NO_LOCAL_UNDOLEVEL;\n+      } else if (opt_flags == OPT_LOCAL\n+                 && ((OptInt *)varp == &curwin->w_p_siso || (OptInt *)varp == &curwin->w_p_so)) {\n+        // for 'scrolloff'/'sidescrolloff' -1 means using the global newval_num\n+        newval_num = -1;\n+      } else {\n+        newval_num = *(OptInt *)get_varp_scope(&(options[opt_idx]), OPT_GLOBAL);\n+      }\n+    } else if (((OptInt *)varp == &p_wc || (OptInt *)varp == &p_wcm)\n+               && (*arg == '<' || *arg == '^'\n+                   || (*arg != NUL && (!arg[1] || ascii_iswhite(arg[1]))\n+                       && !ascii_isdigit(*arg)))) {\n+      newval_num = string_to_key(arg);\n+      if (newval_num == 0 && (OptInt *)varp != &p_wcm) {\n+        *errmsg = e_invarg;\n+        return newval;\n+      }\n+    } else if (*arg == '-' || ascii_isdigit(*arg)) {\n+      int i;\n+      // Allow negative, octal and hex numbers.\n+      vim_str2nr(arg, NULL, &i, STR2NR_ALL, &newval_num, NULL, 0, true, NULL);\n+      if (i == 0 || (arg[i] != NUL && !ascii_iswhite(arg[i]))) {\n+        *errmsg = e_number_required_after_equal;\n+        return newval;\n+      }\n+    } else {\n+      *errmsg = e_number_required_after_equal;\n+      return newval;\n+    }\n \n-  if (*errmsg != NULL) {\n-    return;\n+    if (op == OP_ADDING) {\n+      newval_num = oldval_num + newval_num;\n+    }\n+    if (op == OP_PREPENDING) {\n+      newval_num = oldval_num * newval_num;\n+    }\n+    if (op == OP_REMOVING) {\n+      newval_num = oldval_num - newval_num;\n+    }\n+\n+    newval = NUMBER_OPTVAL(newval_num);\n+    break;\n   }\n+  case kOptValTypeString: {\n+    char *oldval_str;\n+    vimoption_T *opt = get_option(opt_idx);\n \n-  if (opt_idx >= 0) {\n-    did_set_option(opt_idx, opt_flags, op == OP_NONE, value_checked);\n+    // When setting the local value of a global option, the old value may be\n+    // the global value.\n+    if (((int)opt->indir & PV_BOTH) && (opt_flags & OPT_LOCAL)) {\n+      oldval_str = *(char **)get_varp(opt);\n+    } else {\n+      oldval_str = *(char **)varp;\n+    }\n+\n+    // Get the new value for the option\n+    char *newval_str = stropt_get_newval(nextchar, opt_idx, argp, varp, oldval_str, &op, flags);\n+    newval = CSTR_AS_OPTVAL(newval_str);\n+    break;\n+  }\n   }\n+\n+  return newval;\n }\n \n-static void do_set_option(int opt_flags, char **argp, bool *did_show, char *errbuf,\n-                          size_t errbuflen, const char **errmsg)\n+static void do_set_one_option(int opt_flags, char **argp, bool *did_show, char *errbuf,",
            "html_url": "https://github.com/neovim/neovim/pull/25394#discussion_r1360945938",
            "id": 1360945938,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5RHmMS",
            "original_commit_id": "658dda04e29e2792869eb84383836616bb89c150",
            "original_line": 1274,
            "original_position": 395,
            "original_start_line": null,
            "path": "src/nvim/option.c",
            "position": null,
            "pull_request_review_id": 1680497478,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25394",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360945938/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-16T16:36:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360945938",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25394#discussion_r1360950050"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25394"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360950050"
                }
            },
            "author_association": "MEMBER",
            "body": "(off topic for this PR) AFAIR it's very unusual in the codebase to alias a \"pointer type\". I.e. I would expect this to be:\r\n\r\n```suggestion\r\n  OptVal *newval = get_option_newval(opt_idx, opt_flags, prefix, argp, nextchar, op, flags, varp,\r\n```\r\n\r\nIs there a technical reason we didn't do this for `OptVal`?",
            "commit_id": "3642f2fb44b6a3681e6a637671690258aa83cc62",
            "created_at": "2023-10-16T16:40:00Z",
            "diff_hunk": "@@ -1486,8 +1403,21 @@ static void do_set_option(int opt_flags, char **argp, bool *did_show, char *errb\n     }\n   }\n \n-  do_set_option_value(opt_idx, opt_flags, argp, prefix, nextchar, op, flags, varp,\n-                      errbuf, errbuflen, errmsg);\n+  // Don't try to change hidden option.\n+  if (varp == NULL) {\n+    return;\n+  }\n+\n+  OptVal newval = get_option_newval(opt_idx, opt_flags, prefix, argp, nextchar, op, flags, varp,",
            "html_url": "https://github.com/neovim/neovim/pull/25394#discussion_r1360950050",
            "id": 1360950050,
            "line": 1411,
            "node_id": "PRRC_kwDOAPphoM5RHnMi",
            "original_commit_id": "658dda04e29e2792869eb84383836616bb89c150",
            "original_line": 1411,
            "original_position": 411,
            "original_start_line": null,
            "path": "src/nvim/option.c",
            "position": 411,
            "pull_request_review_id": 1680502437,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25394",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360950050/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-16T16:40:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360950050",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25394#discussion_r1360954406"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25394"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360954406"
                }
            },
            "author_association": "MEMBER",
            "body": "this kind of indentation only makes sense if it's aligned with other comments.\r\n```suggestion\r\n  comp_col();  // in case 'columns' or 'ls' changed\r\n```",
            "commit_id": "3642f2fb44b6a3681e6a637671690258aa83cc62",
            "created_at": "2023-10-16T16:43:16Z",
            "diff_hunk": "@@ -3731,69 +3598,148 @@ int get_option_value_strict(char *name, int64_t *numval, char **stringval, int o\n   return rv;\n }\n \n-// Return information for option at 'opt_idx'\n+/// Return information for option at 'opt_idx'\n vimoption_T *get_option(int opt_idx)\n {\n   return &options[opt_idx];\n }\n \n-/// Clear an option\n+/// Set the value of an option using an OptVal.\n ///\n-/// The exact semantics of this depend on the option.\n-static OptVal clear_optval(const char *name, uint32_t flags, void *varp, buf_T *buf, win_T *win)\n+/// @param       opt_idx    Option index. Must be >=0.\n+/// @param[in]   varp       Option variable pointer, cannot be NULL.\n+/// @param       value      New option value.\n+/// @param       opt_flags  Option flags.\n+/// @param       new_value  Whether value was replaced completely.\n+/// @param[out]  errbuf     Buffer for error message.\n+/// @param       errbuflen  Length of error buffer.\n+///\n+/// @return  Error message. NULL if there are no errors.\n+static const char *set_option(const int opt_idx, void *varp, OptVal value, int opt_flags,\n+                              const bool new_value, char *errbuf, size_t errbuflen)\n {\n-  OptVal v = NIL_OPTVAL;\n+  assert(opt_idx >= 0 && varp != NULL);\n \n-  // Change the type of the OptVal to the type used by the option so that it can be cleared.\n-  // TODO(famiu): Clean up all of this after set_(num|bool|string)_option() is unified.\n+  const char *errmsg = NULL;\n+  bool value_checked = false;\n+  vimoption_T *opt = &options[opt_idx];\n \n-  if (flags & P_BOOL) {\n-    v.type = kOptValTypeBoolean;\n-    if ((int *)varp == &buf->b_p_ar) {\n-      // TODO(lewis6991): replace this with a more general condition that\n-      // indicates we are setting the local value of a global-local option\n-      v.data.boolean = kNone;\n-    } else {\n-      v = get_option_value(name, NULL, OPT_GLOBAL, NULL);\n-    }\n-  } else if (flags & P_NUM) {\n-    v.type = kOptValTypeNumber;\n-    if ((OptInt *)varp == &curbuf->b_p_ul) {\n-      // The one true special case\n-      v.data.number = NO_LOCAL_UNDOLEVEL;\n-    } else if ((OptInt *)varp == &win->w_p_so || (OptInt *)varp == &win->w_p_siso) {\n-      // TODO(lewis6991): replace this with a more general condition that\n-      // indicates we are setting the local value of a global-local option\n-      v.data.number = -1;\n-    } else {\n-      v = get_option_value(name, NULL, OPT_GLOBAL, NULL);\n+  // TODO(famiu): Unify set_string_option with set_option.\n+  if (value.type == kOptValTypeString) {\n+    errmsg = set_string_option(opt_idx, varp, value.data.string.data, opt_flags, true,\n+                               &value_checked, errbuf, errbuflen);\n+    goto end;\n+  }\n+\n+  // Disallow changing some options from secure mode.\n+  if ((secure || sandbox != 0) && (options[opt_idx].flags & P_SECURE)) {\n+    return e_secure;\n+  }\n+\n+  OptVal old_value = optval_from_varp(value.type, varp);\n+  OptVal old_global_value = NIL_OPTVAL;\n+  OptVal old_local_value = NIL_OPTVAL;\n+\n+  // Save the local and global values before changing anything. This is needed as for a global-only\n+  // option setting the \"local value\" in fact sets the global value (since there is only one value).\n+  //\n+  // TODO(famiu): This needs to be changed to use the current type of the old value instead of\n+  // value.type, when multi-type options are odded.\n+  if ((opt_flags & (OPT_LOCAL | OPT_GLOBAL)) == 0) {\n+    old_local_value =\n+      optval_from_varp(value.type, get_varp_scope(opt, OPT_LOCAL));\n+    old_global_value =\n+      optval_from_varp(value.type, get_varp_scope(opt, OPT_GLOBAL));\n+  }\n+\n+  if (value.type == kOptValTypeNumber) {\n+    errmsg = validate_num_option((OptInt *)varp, &value.data.number);\n+\n+    // Don't change the value and return early if validation failed.\n+    if (errmsg != NULL) {\n+      return errmsg;\n     }\n-  } else if (flags & P_STRING) {\n-    v.type = kOptValTypeString;\n-    v.data.string.data = NULL;\n   }\n \n-  return v;\n-}\n+  // Set the new option value.\n+  set_option_varp(varp, value);\n+  // Remember where the option was set.\n+  set_option_sctx_idx(opt_idx, opt_flags, current_sctx);\n+  // May set global value for local option.\n+  if ((opt_flags & (OPT_LOCAL | OPT_GLOBAL)) == 0) {\n+    set_option_varp(get_varp_scope(opt, OPT_GLOBAL), value);\n+  }\n \n-static const char *set_option(int opt_idx, void *varp, OptVal *v, int opt_flags, char *errbuf,\n-                              size_t errbuflen)\n-{\n-  const char *errmsg = NULL;\n+  // Invoke the option specific callback function to validate and apply the new value.\n+  bool doskip = false;\n+  opt_did_set_cb_T did_set_cb;\n \n-  bool value_checked = false;\n+  if ((int *)varp == &p_force_on) {\n+    did_set_cb = did_set_force_on;\n+  } else if ((int *)varp == &p_force_off) {\n+    did_set_cb = did_set_force_off;\n+  } else {\n+    did_set_cb = opt->opt_did_set_cb;\n+  }\n+  if (did_set_cb != NULL) {\n+    // TODO(famiu): make os_oldval and os_newval use OptVal.\n+    optset_T did_set_cb_args = {\n+      .os_varp = varp,\n+      .os_flags = opt_flags,\n+      .os_oldval = old_value.data,\n+      .os_newval = value.data,\n+      .os_doskip = false,\n+      .os_errbuf = NULL,\n+      .os_errbuflen = 0,\n+      .os_buf = curbuf,\n+      .os_win = curwin\n+    };\n+\n+    errmsg = did_set_cb(&did_set_cb_args);\n+    doskip = did_set_cb_args.os_doskip;\n+  }\n+  if (doskip) {\n+    return errmsg;\n+  }\n \n-  if (v->type == kOptValTypeBoolean) {\n-    errmsg = set_bool_option(opt_idx, varp, (int)v->data.boolean, opt_flags);\n-  } else if (v->type == kOptValTypeNumber) {\n-    errmsg = set_num_option(opt_idx, varp, v->data.number, errbuf, errbuflen, opt_flags);\n-  } else if (v->type == kOptValTypeString) {\n-    errmsg = set_string_option(opt_idx, varp, v->data.string.data, opt_flags, &value_checked,\n-                               errbuf, errbuflen);\n+  // Check the bound for num options.\n+  if (value.type == kOptValTypeNumber) {\n+    errmsg\n+      = check_num_option_bounds((OptInt *)varp, old_value.data.number, errbuf, errbuflen, errmsg);\n   }\n \n+  apply_optionset_autocmd(opt_idx, opt_flags,\n+                          old_value,\n+                          old_global_value,\n+                          old_local_value,\n+                          value,\n+                          errmsg);\n+\n+  if (opt->flags & P_UI_OPTION) {\n+    OptVal value_copy = optval_copy(optval_from_varp(value.type, varp));\n+    ui_call_option_set(cstr_as_string(opt->fullname),\n+                       optval_as_object(value_copy));\n+  }\n+\n+  comp_col();                       // in case 'columns' or 'ls' changed",
            "html_url": "https://github.com/neovim/neovim/pull/25394#discussion_r1360954406",
            "id": 1360954406,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5RHoQm",
            "original_commit_id": "658dda04e29e2792869eb84383836616bb89c150",
            "original_line": 3724,
            "original_position": 1155,
            "original_start_line": null,
            "path": "src/nvim/option.c",
            "position": null,
            "pull_request_review_id": 1680507640,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25394",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360954406/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-16T16:43:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360954406",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25394#discussion_r1360956872"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25394"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360956872"
                }
            },
            "author_association": "MEMBER",
            "body": "It's mostly meant to be analogous to `do_cmdline` and `do_one_cmd`, where the former operates on the entire cmdline and the latter only does one cmd at a time. `do_set` operates on the entire set statement whereas `do_set_one_option` operates on one option at a time.",
            "commit_id": "3642f2fb44b6a3681e6a637671690258aa83cc62",
            "created_at": "2023-10-16T16:45:05Z",
            "diff_hunk": "@@ -1328,34 +1134,145 @@ static int validate_opt_idx(win_T *win, int opt_idx, int opt_flags, uint32_t fla\n   return OK;\n }\n \n-static void do_set_option_value(int opt_idx, int opt_flags, char **argp, set_prefix_T prefix,\n+/// Get new option value from argp. Allocated OptVal must be freed by caller.\n+static OptVal get_option_newval(int opt_idx, int opt_flags, set_prefix_T prefix, char **argp,\n                                 int nextchar, set_op_T op, uint32_t flags, void *varp, char *errbuf,\n-                                size_t errbuflen, const char **errmsg)\n+                                const size_t errbuflen, const char **errmsg)\n+  FUNC_ATTR_WARN_UNUSED_RESULT\n {\n-  bool value_checked = false;\n-  if (flags & P_BOOL) {        // boolean\n-    do_set_bool(opt_idx, opt_flags, prefix, nextchar, varp, errmsg);\n-  } else if (flags & P_NUM) {  // numeric\n-    do_set_num(opt_idx, opt_flags, argp, nextchar, op, varp, errbuf, errbuflen, errmsg);\n-  } else if (opt_idx >= 0) {   // string.\n-    do_set_option_string(opt_idx, opt_flags, argp, nextchar, op, flags, varp, errbuf,\n-                         errbuflen, &value_checked, errmsg);\n-  } else {\n-    // key code option(FIXME(tarruda): Show a warning or something\n-    // similar)\n+  assert(varp != NULL);\n+\n+  char *arg = *argp;\n+  OptVal oldval = optval_from_varp_flags(varp, flags);\n+  OptVal newval = NIL_OPTVAL;\n+\n+  switch (oldval.type) {\n+  case kOptValTypeNil:\n+    abort();\n+  case kOptValTypeBoolean: {\n+    TriState newval_bool;\n+\n+    // \":set opt!\": invert\n+    // \":set opt&\": reset to default value\n+    // \":set opt<\": reset to global value\n+    if (nextchar == '!') {\n+      switch (oldval.data.boolean) {\n+      case kNone:\n+        newval_bool = kNone;\n+        break;\n+      case kTrue:\n+        newval_bool = kFalse;\n+        break;\n+      case kFalse:\n+        newval_bool = kTrue;\n+        break;\n+      }\n+    } else if (nextchar == '&') {\n+      newval_bool = TRISTATE_FROM_INT((int)(intptr_t)options[opt_idx].def_val);\n+    } else if (nextchar == '<') {\n+      // For 'autoread', kNone means to use global value.\n+      if ((int *)varp == &curbuf->b_p_ar && opt_flags == OPT_LOCAL) {\n+        newval_bool = kNone;\n+      } else {\n+        newval_bool = TRISTATE_FROM_INT(*(int *)get_varp_scope(&(options[opt_idx]), OPT_GLOBAL));\n+      }\n+    } else {\n+      // \":set invopt\": invert\n+      // \":set opt\" or \":set noopt\": set or reset\n+      if (prefix == PREFIX_INV) {\n+        newval_bool = *(int *)varp ^ 1;\n+      } else {\n+        newval_bool = prefix == PREFIX_NO ? 0 : 1;\n+      }\n+    }\n+\n+    newval = BOOLEAN_OPTVAL(newval_bool);\n+    break;\n   }\n+  case kOptValTypeNumber: {\n+    OptInt oldval_num = oldval.data.number;\n+    OptInt newval_num;\n+\n+    // Different ways to set a number option:\n+    // &            set to default value\n+    // <            set to global value\n+    // <xx>         accept special key codes for 'wildchar'\n+    // c            accept any non-digit for 'wildchar'\n+    // [-]0-9       set number\n+    // other        error\n+    arg++;\n+    if (nextchar == '&') {\n+      newval_num = (OptInt)(intptr_t)options[opt_idx].def_val;\n+    } else if (nextchar == '<') {\n+      if ((OptInt *)varp == &curbuf->b_p_ul && opt_flags == OPT_LOCAL) {\n+        // for 'undolevels' NO_LOCAL_UNDOLEVEL means using the global newval_num\n+        newval_num = NO_LOCAL_UNDOLEVEL;\n+      } else if (opt_flags == OPT_LOCAL\n+                 && ((OptInt *)varp == &curwin->w_p_siso || (OptInt *)varp == &curwin->w_p_so)) {\n+        // for 'scrolloff'/'sidescrolloff' -1 means using the global newval_num\n+        newval_num = -1;\n+      } else {\n+        newval_num = *(OptInt *)get_varp_scope(&(options[opt_idx]), OPT_GLOBAL);\n+      }\n+    } else if (((OptInt *)varp == &p_wc || (OptInt *)varp == &p_wcm)\n+               && (*arg == '<' || *arg == '^'\n+                   || (*arg != NUL && (!arg[1] || ascii_iswhite(arg[1]))\n+                       && !ascii_isdigit(*arg)))) {\n+      newval_num = string_to_key(arg);\n+      if (newval_num == 0 && (OptInt *)varp != &p_wcm) {\n+        *errmsg = e_invarg;\n+        return newval;\n+      }\n+    } else if (*arg == '-' || ascii_isdigit(*arg)) {\n+      int i;\n+      // Allow negative, octal and hex numbers.\n+      vim_str2nr(arg, NULL, &i, STR2NR_ALL, &newval_num, NULL, 0, true, NULL);\n+      if (i == 0 || (arg[i] != NUL && !ascii_iswhite(arg[i]))) {\n+        *errmsg = e_number_required_after_equal;\n+        return newval;\n+      }\n+    } else {\n+      *errmsg = e_number_required_after_equal;\n+      return newval;\n+    }\n \n-  if (*errmsg != NULL) {\n-    return;\n+    if (op == OP_ADDING) {\n+      newval_num = oldval_num + newval_num;\n+    }\n+    if (op == OP_PREPENDING) {\n+      newval_num = oldval_num * newval_num;\n+    }\n+    if (op == OP_REMOVING) {\n+      newval_num = oldval_num - newval_num;\n+    }\n+\n+    newval = NUMBER_OPTVAL(newval_num);\n+    break;\n   }\n+  case kOptValTypeString: {\n+    char *oldval_str;\n+    vimoption_T *opt = get_option(opt_idx);\n \n-  if (opt_idx >= 0) {\n-    did_set_option(opt_idx, opt_flags, op == OP_NONE, value_checked);\n+    // When setting the local value of a global option, the old value may be\n+    // the global value.\n+    if (((int)opt->indir & PV_BOTH) && (opt_flags & OPT_LOCAL)) {\n+      oldval_str = *(char **)get_varp(opt);\n+    } else {\n+      oldval_str = *(char **)varp;\n+    }\n+\n+    // Get the new value for the option\n+    char *newval_str = stropt_get_newval(nextchar, opt_idx, argp, varp, oldval_str, &op, flags);\n+    newval = CSTR_AS_OPTVAL(newval_str);\n+    break;\n+  }\n   }\n+\n+  return newval;\n }\n \n-static void do_set_option(int opt_flags, char **argp, bool *did_show, char *errbuf,\n-                          size_t errbuflen, const char **errmsg)\n+static void do_set_one_option(int opt_flags, char **argp, bool *did_show, char *errbuf,",
            "html_url": "https://github.com/neovim/neovim/pull/25394#discussion_r1360956872",
            "id": 1360956872,
            "in_reply_to_id": 1360945938,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5RHo3I",
            "original_commit_id": "658dda04e29e2792869eb84383836616bb89c150",
            "original_line": 1274,
            "original_position": 395,
            "original_start_line": null,
            "path": "src/nvim/option.c",
            "position": null,
            "pull_request_review_id": 1680510412,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25394",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360956872/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-16T16:45:05Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360956872",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25394#discussion_r1360956902"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25394"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360956902"
                }
            },
            "author_association": "MEMBER",
            "body": "typo?\r\n\r\nalso is this TODO tracked somewhere, like in a tracking issue for the planned options-related work?",
            "commit_id": "3642f2fb44b6a3681e6a637671690258aa83cc62",
            "created_at": "2023-10-16T16:45:06Z",
            "diff_hunk": "@@ -3731,69 +3598,148 @@ int get_option_value_strict(char *name, int64_t *numval, char **stringval, int o\n   return rv;\n }\n \n-// Return information for option at 'opt_idx'\n+/// Return information for option at 'opt_idx'\n vimoption_T *get_option(int opt_idx)\n {\n   return &options[opt_idx];\n }\n \n-/// Clear an option\n+/// Set the value of an option using an OptVal.\n ///\n-/// The exact semantics of this depend on the option.\n-static OptVal clear_optval(const char *name, uint32_t flags, void *varp, buf_T *buf, win_T *win)\n+/// @param       opt_idx    Option index. Must be >=0.\n+/// @param[in]   varp       Option variable pointer, cannot be NULL.\n+/// @param       value      New option value.\n+/// @param       opt_flags  Option flags.\n+/// @param       new_value  Whether value was replaced completely.\n+/// @param[out]  errbuf     Buffer for error message.\n+/// @param       errbuflen  Length of error buffer.\n+///\n+/// @return  Error message. NULL if there are no errors.\n+static const char *set_option(const int opt_idx, void *varp, OptVal value, int opt_flags,\n+                              const bool new_value, char *errbuf, size_t errbuflen)\n {\n-  OptVal v = NIL_OPTVAL;\n+  assert(opt_idx >= 0 && varp != NULL);\n \n-  // Change the type of the OptVal to the type used by the option so that it can be cleared.\n-  // TODO(famiu): Clean up all of this after set_(num|bool|string)_option() is unified.\n+  const char *errmsg = NULL;\n+  bool value_checked = false;\n+  vimoption_T *opt = &options[opt_idx];\n \n-  if (flags & P_BOOL) {\n-    v.type = kOptValTypeBoolean;\n-    if ((int *)varp == &buf->b_p_ar) {\n-      // TODO(lewis6991): replace this with a more general condition that\n-      // indicates we are setting the local value of a global-local option\n-      v.data.boolean = kNone;\n-    } else {\n-      v = get_option_value(name, NULL, OPT_GLOBAL, NULL);\n-    }\n-  } else if (flags & P_NUM) {\n-    v.type = kOptValTypeNumber;\n-    if ((OptInt *)varp == &curbuf->b_p_ul) {\n-      // The one true special case\n-      v.data.number = NO_LOCAL_UNDOLEVEL;\n-    } else if ((OptInt *)varp == &win->w_p_so || (OptInt *)varp == &win->w_p_siso) {\n-      // TODO(lewis6991): replace this with a more general condition that\n-      // indicates we are setting the local value of a global-local option\n-      v.data.number = -1;\n-    } else {\n-      v = get_option_value(name, NULL, OPT_GLOBAL, NULL);\n+  // TODO(famiu): Unify set_string_option with set_option.\n+  if (value.type == kOptValTypeString) {\n+    errmsg = set_string_option(opt_idx, varp, value.data.string.data, opt_flags, true,\n+                               &value_checked, errbuf, errbuflen);\n+    goto end;\n+  }\n+\n+  // Disallow changing some options from secure mode.\n+  if ((secure || sandbox != 0) && (options[opt_idx].flags & P_SECURE)) {\n+    return e_secure;\n+  }\n+\n+  OptVal old_value = optval_from_varp(value.type, varp);\n+  OptVal old_global_value = NIL_OPTVAL;\n+  OptVal old_local_value = NIL_OPTVAL;\n+\n+  // Save the local and global values before changing anything. This is needed as for a global-only\n+  // option setting the \"local value\" in fact sets the global value (since there is only one value).\n+  //\n+  // TODO(famiu): This needs to be changed to use the current type of the old value instead of\n+  // value.type, when multi-type options are odded.",
            "html_url": "https://github.com/neovim/neovim/pull/25394#discussion_r1360956902",
            "id": 1360956902,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5RHo3m",
            "original_commit_id": "658dda04e29e2792869eb84383836616bb89c150",
            "original_line": 3647,
            "original_position": 1061,
            "original_start_line": null,
            "path": "src/nvim/option.c",
            "position": null,
            "pull_request_review_id": 1680510450,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25394",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360956902/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-16T16:45:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360956902",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25394#discussion_r1360960295"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25394"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360960295"
                }
            },
            "author_association": "MEMBER",
            "body": "Well, in this case, it just means it doesn't copy the value and instead uses the memory allocated by the OptVal.",
            "commit_id": "3642f2fb44b6a3681e6a637671690258aa83cc62",
            "created_at": "2023-10-16T16:47:42Z",
            "diff_hunk": "@@ -1897,6 +1897,45 @@ static OptVal tv_to_optval(typval_T *tv, const char *option, uint32_t flags, boo\n   return value;\n }\n \n+/// Consume an option value and convert it to typval.",
            "html_url": "https://github.com/neovim/neovim/pull/25394#discussion_r1360960295",
            "id": 1360960295,
            "in_reply_to_id": 1360819322,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5RHpsn",
            "original_commit_id": "658dda04e29e2792869eb84383836616bb89c150",
            "original_line": 1900,
            "original_position": 31,
            "original_start_line": null,
            "path": "src/nvim/eval/vars.c",
            "position": null,
            "pull_request_review_id": 1680514424,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25394",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360960295/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-16T16:47:43Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360960295",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25394#discussion_r1360961474"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25394"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360961474"
                }
            },
            "author_association": "MEMBER",
            "body": "I'm not sure, I would have to look into it. Either way, we could add just ref-counted Strings which removes the need for this",
            "commit_id": "3642f2fb44b6a3681e6a637671690258aa83cc62",
            "created_at": "2023-10-16T16:48:33Z",
            "diff_hunk": "@@ -789,10 +789,9 @@ EXTERN char *escape_chars INIT(= \" \\t\\\\\\\"|\");  // need backslash in cmd line\n \n EXTERN bool keep_help_flag INIT(= false);  // doing :ta from help file\n \n-// When a string option is NULL (which only happens in out-of-memory\n-// situations), it is set to empty_option, to avoid having to check for NULL\n-// everywhere.\n-EXTERN char *empty_option INIT(= \"\");\n+// When a string option is NULL (which only happens in out-of-memory situations), it is set to\n+// empty_string_option, to avoid having to check for NULL everywhere.\n+EXTERN char *empty_string_option INIT(= \"\");",
            "html_url": "https://github.com/neovim/neovim/pull/25394#discussion_r1360961474",
            "id": 1360961474,
            "in_reply_to_id": 1360822935,
            "line": 796,
            "node_id": "PRRC_kwDOAPphoM5RHp_C",
            "original_commit_id": "658dda04e29e2792869eb84383836616bb89c150",
            "original_line": 796,
            "original_position": 10,
            "original_start_line": null,
            "path": "src/nvim/globals.h",
            "position": 12,
            "pull_request_review_id": 1680515801,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25394",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360961474/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-16T16:48:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360961474",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25394#discussion_r1360962027"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25394"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360962027"
                }
            },
            "author_association": "MEMBER",
            "body": "Well, it works similarly to the `Object` struct",
            "commit_id": "3642f2fb44b6a3681e6a637671690258aa83cc62",
            "created_at": "2023-10-16T16:49:00Z",
            "diff_hunk": "@@ -1486,8 +1403,21 @@ static void do_set_option(int opt_flags, char **argp, bool *did_show, char *errb\n     }\n   }\n \n-  do_set_option_value(opt_idx, opt_flags, argp, prefix, nextchar, op, flags, varp,\n-                      errbuf, errbuflen, errmsg);\n+  // Don't try to change hidden option.\n+  if (varp == NULL) {\n+    return;\n+  }\n+\n+  OptVal newval = get_option_newval(opt_idx, opt_flags, prefix, argp, nextchar, op, flags, varp,",
            "html_url": "https://github.com/neovim/neovim/pull/25394#discussion_r1360962027",
            "id": 1360962027,
            "in_reply_to_id": 1360950050,
            "line": 1411,
            "node_id": "PRRC_kwDOAPphoM5RHqHr",
            "original_commit_id": "658dda04e29e2792869eb84383836616bb89c150",
            "original_line": 1411,
            "original_position": 411,
            "original_start_line": null,
            "path": "src/nvim/option.c",
            "position": 411,
            "pull_request_review_id": 1680516469,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25394",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360962027/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-16T16:49:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360962027",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25394#discussion_r1360962419"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25394"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360962419"
                }
            },
            "author_association": "MEMBER",
            "body": "So `do_one_[set_]option`? (assuming the pattern is `do_*` -> `do_one_*`)",
            "commit_id": "3642f2fb44b6a3681e6a637671690258aa83cc62",
            "created_at": "2023-10-16T16:49:19Z",
            "diff_hunk": "@@ -1328,34 +1134,145 @@ static int validate_opt_idx(win_T *win, int opt_idx, int opt_flags, uint32_t fla\n   return OK;\n }\n \n-static void do_set_option_value(int opt_idx, int opt_flags, char **argp, set_prefix_T prefix,\n+/// Get new option value from argp. Allocated OptVal must be freed by caller.\n+static OptVal get_option_newval(int opt_idx, int opt_flags, set_prefix_T prefix, char **argp,\n                                 int nextchar, set_op_T op, uint32_t flags, void *varp, char *errbuf,\n-                                size_t errbuflen, const char **errmsg)\n+                                const size_t errbuflen, const char **errmsg)\n+  FUNC_ATTR_WARN_UNUSED_RESULT\n {\n-  bool value_checked = false;\n-  if (flags & P_BOOL) {        // boolean\n-    do_set_bool(opt_idx, opt_flags, prefix, nextchar, varp, errmsg);\n-  } else if (flags & P_NUM) {  // numeric\n-    do_set_num(opt_idx, opt_flags, argp, nextchar, op, varp, errbuf, errbuflen, errmsg);\n-  } else if (opt_idx >= 0) {   // string.\n-    do_set_option_string(opt_idx, opt_flags, argp, nextchar, op, flags, varp, errbuf,\n-                         errbuflen, &value_checked, errmsg);\n-  } else {\n-    // key code option(FIXME(tarruda): Show a warning or something\n-    // similar)\n+  assert(varp != NULL);\n+\n+  char *arg = *argp;\n+  OptVal oldval = optval_from_varp_flags(varp, flags);\n+  OptVal newval = NIL_OPTVAL;\n+\n+  switch (oldval.type) {\n+  case kOptValTypeNil:\n+    abort();\n+  case kOptValTypeBoolean: {\n+    TriState newval_bool;\n+\n+    // \":set opt!\": invert\n+    // \":set opt&\": reset to default value\n+    // \":set opt<\": reset to global value\n+    if (nextchar == '!') {\n+      switch (oldval.data.boolean) {\n+      case kNone:\n+        newval_bool = kNone;\n+        break;\n+      case kTrue:\n+        newval_bool = kFalse;\n+        break;\n+      case kFalse:\n+        newval_bool = kTrue;\n+        break;\n+      }\n+    } else if (nextchar == '&') {\n+      newval_bool = TRISTATE_FROM_INT((int)(intptr_t)options[opt_idx].def_val);\n+    } else if (nextchar == '<') {\n+      // For 'autoread', kNone means to use global value.\n+      if ((int *)varp == &curbuf->b_p_ar && opt_flags == OPT_LOCAL) {\n+        newval_bool = kNone;\n+      } else {\n+        newval_bool = TRISTATE_FROM_INT(*(int *)get_varp_scope(&(options[opt_idx]), OPT_GLOBAL));\n+      }\n+    } else {\n+      // \":set invopt\": invert\n+      // \":set opt\" or \":set noopt\": set or reset\n+      if (prefix == PREFIX_INV) {\n+        newval_bool = *(int *)varp ^ 1;\n+      } else {\n+        newval_bool = prefix == PREFIX_NO ? 0 : 1;\n+      }\n+    }\n+\n+    newval = BOOLEAN_OPTVAL(newval_bool);\n+    break;\n   }\n+  case kOptValTypeNumber: {\n+    OptInt oldval_num = oldval.data.number;\n+    OptInt newval_num;\n+\n+    // Different ways to set a number option:\n+    // &            set to default value\n+    // <            set to global value\n+    // <xx>         accept special key codes for 'wildchar'\n+    // c            accept any non-digit for 'wildchar'\n+    // [-]0-9       set number\n+    // other        error\n+    arg++;\n+    if (nextchar == '&') {\n+      newval_num = (OptInt)(intptr_t)options[opt_idx].def_val;\n+    } else if (nextchar == '<') {\n+      if ((OptInt *)varp == &curbuf->b_p_ul && opt_flags == OPT_LOCAL) {\n+        // for 'undolevels' NO_LOCAL_UNDOLEVEL means using the global newval_num\n+        newval_num = NO_LOCAL_UNDOLEVEL;\n+      } else if (opt_flags == OPT_LOCAL\n+                 && ((OptInt *)varp == &curwin->w_p_siso || (OptInt *)varp == &curwin->w_p_so)) {\n+        // for 'scrolloff'/'sidescrolloff' -1 means using the global newval_num\n+        newval_num = -1;\n+      } else {\n+        newval_num = *(OptInt *)get_varp_scope(&(options[opt_idx]), OPT_GLOBAL);\n+      }\n+    } else if (((OptInt *)varp == &p_wc || (OptInt *)varp == &p_wcm)\n+               && (*arg == '<' || *arg == '^'\n+                   || (*arg != NUL && (!arg[1] || ascii_iswhite(arg[1]))\n+                       && !ascii_isdigit(*arg)))) {\n+      newval_num = string_to_key(arg);\n+      if (newval_num == 0 && (OptInt *)varp != &p_wcm) {\n+        *errmsg = e_invarg;\n+        return newval;\n+      }\n+    } else if (*arg == '-' || ascii_isdigit(*arg)) {\n+      int i;\n+      // Allow negative, octal and hex numbers.\n+      vim_str2nr(arg, NULL, &i, STR2NR_ALL, &newval_num, NULL, 0, true, NULL);\n+      if (i == 0 || (arg[i] != NUL && !ascii_iswhite(arg[i]))) {\n+        *errmsg = e_number_required_after_equal;\n+        return newval;\n+      }\n+    } else {\n+      *errmsg = e_number_required_after_equal;\n+      return newval;\n+    }\n \n-  if (*errmsg != NULL) {\n-    return;\n+    if (op == OP_ADDING) {\n+      newval_num = oldval_num + newval_num;\n+    }\n+    if (op == OP_PREPENDING) {\n+      newval_num = oldval_num * newval_num;\n+    }\n+    if (op == OP_REMOVING) {\n+      newval_num = oldval_num - newval_num;\n+    }\n+\n+    newval = NUMBER_OPTVAL(newval_num);\n+    break;\n   }\n+  case kOptValTypeString: {\n+    char *oldval_str;\n+    vimoption_T *opt = get_option(opt_idx);\n \n-  if (opt_idx >= 0) {\n-    did_set_option(opt_idx, opt_flags, op == OP_NONE, value_checked);\n+    // When setting the local value of a global option, the old value may be\n+    // the global value.\n+    if (((int)opt->indir & PV_BOTH) && (opt_flags & OPT_LOCAL)) {\n+      oldval_str = *(char **)get_varp(opt);\n+    } else {\n+      oldval_str = *(char **)varp;\n+    }\n+\n+    // Get the new value for the option\n+    char *newval_str = stropt_get_newval(nextchar, opt_idx, argp, varp, oldval_str, &op, flags);\n+    newval = CSTR_AS_OPTVAL(newval_str);\n+    break;\n+  }\n   }\n+\n+  return newval;\n }\n \n-static void do_set_option(int opt_flags, char **argp, bool *did_show, char *errbuf,\n-                          size_t errbuflen, const char **errmsg)\n+static void do_set_one_option(int opt_flags, char **argp, bool *did_show, char *errbuf,",
            "html_url": "https://github.com/neovim/neovim/pull/25394#discussion_r1360962419",
            "id": 1360962419,
            "in_reply_to_id": 1360945938,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5RHqNz",
            "original_commit_id": "658dda04e29e2792869eb84383836616bb89c150",
            "original_line": 1274,
            "original_position": 395,
            "original_start_line": null,
            "path": "src/nvim/option.c",
            "position": null,
            "pull_request_review_id": 1680516907,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25394",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360962419/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-16T16:49:44Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360962419",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25394#discussion_r1360964512"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25394"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360964512"
                }
            },
            "author_association": "MEMBER",
            "body": "Yup, that is a typo. And yes, it is not tracked. Should I make a tracking issue detailing the things I wish to work on?",
            "commit_id": "3642f2fb44b6a3681e6a637671690258aa83cc62",
            "created_at": "2023-10-16T16:50:45Z",
            "diff_hunk": "@@ -3731,69 +3598,148 @@ int get_option_value_strict(char *name, int64_t *numval, char **stringval, int o\n   return rv;\n }\n \n-// Return information for option at 'opt_idx'\n+/// Return information for option at 'opt_idx'\n vimoption_T *get_option(int opt_idx)\n {\n   return &options[opt_idx];\n }\n \n-/// Clear an option\n+/// Set the value of an option using an OptVal.\n ///\n-/// The exact semantics of this depend on the option.\n-static OptVal clear_optval(const char *name, uint32_t flags, void *varp, buf_T *buf, win_T *win)\n+/// @param       opt_idx    Option index. Must be >=0.\n+/// @param[in]   varp       Option variable pointer, cannot be NULL.\n+/// @param       value      New option value.\n+/// @param       opt_flags  Option flags.\n+/// @param       new_value  Whether value was replaced completely.\n+/// @param[out]  errbuf     Buffer for error message.\n+/// @param       errbuflen  Length of error buffer.\n+///\n+/// @return  Error message. NULL if there are no errors.\n+static const char *set_option(const int opt_idx, void *varp, OptVal value, int opt_flags,\n+                              const bool new_value, char *errbuf, size_t errbuflen)\n {\n-  OptVal v = NIL_OPTVAL;\n+  assert(opt_idx >= 0 && varp != NULL);\n \n-  // Change the type of the OptVal to the type used by the option so that it can be cleared.\n-  // TODO(famiu): Clean up all of this after set_(num|bool|string)_option() is unified.\n+  const char *errmsg = NULL;\n+  bool value_checked = false;\n+  vimoption_T *opt = &options[opt_idx];\n \n-  if (flags & P_BOOL) {\n-    v.type = kOptValTypeBoolean;\n-    if ((int *)varp == &buf->b_p_ar) {\n-      // TODO(lewis6991): replace this with a more general condition that\n-      // indicates we are setting the local value of a global-local option\n-      v.data.boolean = kNone;\n-    } else {\n-      v = get_option_value(name, NULL, OPT_GLOBAL, NULL);\n-    }\n-  } else if (flags & P_NUM) {\n-    v.type = kOptValTypeNumber;\n-    if ((OptInt *)varp == &curbuf->b_p_ul) {\n-      // The one true special case\n-      v.data.number = NO_LOCAL_UNDOLEVEL;\n-    } else if ((OptInt *)varp == &win->w_p_so || (OptInt *)varp == &win->w_p_siso) {\n-      // TODO(lewis6991): replace this with a more general condition that\n-      // indicates we are setting the local value of a global-local option\n-      v.data.number = -1;\n-    } else {\n-      v = get_option_value(name, NULL, OPT_GLOBAL, NULL);\n+  // TODO(famiu): Unify set_string_option with set_option.\n+  if (value.type == kOptValTypeString) {\n+    errmsg = set_string_option(opt_idx, varp, value.data.string.data, opt_flags, true,\n+                               &value_checked, errbuf, errbuflen);\n+    goto end;\n+  }\n+\n+  // Disallow changing some options from secure mode.\n+  if ((secure || sandbox != 0) && (options[opt_idx].flags & P_SECURE)) {\n+    return e_secure;\n+  }\n+\n+  OptVal old_value = optval_from_varp(value.type, varp);\n+  OptVal old_global_value = NIL_OPTVAL;\n+  OptVal old_local_value = NIL_OPTVAL;\n+\n+  // Save the local and global values before changing anything. This is needed as for a global-only\n+  // option setting the \"local value\" in fact sets the global value (since there is only one value).\n+  //\n+  // TODO(famiu): This needs to be changed to use the current type of the old value instead of\n+  // value.type, when multi-type options are odded.",
            "html_url": "https://github.com/neovim/neovim/pull/25394#discussion_r1360964512",
            "id": 1360964512,
            "in_reply_to_id": 1360956902,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5RHqug",
            "original_commit_id": "658dda04e29e2792869eb84383836616bb89c150",
            "original_line": 3647,
            "original_position": 1061,
            "original_start_line": null,
            "path": "src/nvim/option.c",
            "position": null,
            "pull_request_review_id": 1680519138,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25394",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360964512/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-16T16:50:45Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360964512",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25394#discussion_r1360965307"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25394"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360965307"
                }
            },
            "author_association": "MEMBER",
            "body": "Oh interesting. I think it's worth adding a one-line docstring to this function that explains the idea. Something like:\r\n\r\n    /// Sets one option (as opposed to many options in one :set call, \":set a=b c=d ...\").",
            "commit_id": "3642f2fb44b6a3681e6a637671690258aa83cc62",
            "created_at": "2023-10-16T16:51:16Z",
            "diff_hunk": "@@ -1328,34 +1134,145 @@ static int validate_opt_idx(win_T *win, int opt_idx, int opt_flags, uint32_t fla\n   return OK;\n }\n \n-static void do_set_option_value(int opt_idx, int opt_flags, char **argp, set_prefix_T prefix,\n+/// Get new option value from argp. Allocated OptVal must be freed by caller.\n+static OptVal get_option_newval(int opt_idx, int opt_flags, set_prefix_T prefix, char **argp,\n                                 int nextchar, set_op_T op, uint32_t flags, void *varp, char *errbuf,\n-                                size_t errbuflen, const char **errmsg)\n+                                const size_t errbuflen, const char **errmsg)\n+  FUNC_ATTR_WARN_UNUSED_RESULT\n {\n-  bool value_checked = false;\n-  if (flags & P_BOOL) {        // boolean\n-    do_set_bool(opt_idx, opt_flags, prefix, nextchar, varp, errmsg);\n-  } else if (flags & P_NUM) {  // numeric\n-    do_set_num(opt_idx, opt_flags, argp, nextchar, op, varp, errbuf, errbuflen, errmsg);\n-  } else if (opt_idx >= 0) {   // string.\n-    do_set_option_string(opt_idx, opt_flags, argp, nextchar, op, flags, varp, errbuf,\n-                         errbuflen, &value_checked, errmsg);\n-  } else {\n-    // key code option(FIXME(tarruda): Show a warning or something\n-    // similar)\n+  assert(varp != NULL);\n+\n+  char *arg = *argp;\n+  OptVal oldval = optval_from_varp_flags(varp, flags);\n+  OptVal newval = NIL_OPTVAL;\n+\n+  switch (oldval.type) {\n+  case kOptValTypeNil:\n+    abort();\n+  case kOptValTypeBoolean: {\n+    TriState newval_bool;\n+\n+    // \":set opt!\": invert\n+    // \":set opt&\": reset to default value\n+    // \":set opt<\": reset to global value\n+    if (nextchar == '!') {\n+      switch (oldval.data.boolean) {\n+      case kNone:\n+        newval_bool = kNone;\n+        break;\n+      case kTrue:\n+        newval_bool = kFalse;\n+        break;\n+      case kFalse:\n+        newval_bool = kTrue;\n+        break;\n+      }\n+    } else if (nextchar == '&') {\n+      newval_bool = TRISTATE_FROM_INT((int)(intptr_t)options[opt_idx].def_val);\n+    } else if (nextchar == '<') {\n+      // For 'autoread', kNone means to use global value.\n+      if ((int *)varp == &curbuf->b_p_ar && opt_flags == OPT_LOCAL) {\n+        newval_bool = kNone;\n+      } else {\n+        newval_bool = TRISTATE_FROM_INT(*(int *)get_varp_scope(&(options[opt_idx]), OPT_GLOBAL));\n+      }\n+    } else {\n+      // \":set invopt\": invert\n+      // \":set opt\" or \":set noopt\": set or reset\n+      if (prefix == PREFIX_INV) {\n+        newval_bool = *(int *)varp ^ 1;\n+      } else {\n+        newval_bool = prefix == PREFIX_NO ? 0 : 1;\n+      }\n+    }\n+\n+    newval = BOOLEAN_OPTVAL(newval_bool);\n+    break;\n   }\n+  case kOptValTypeNumber: {\n+    OptInt oldval_num = oldval.data.number;\n+    OptInt newval_num;\n+\n+    // Different ways to set a number option:\n+    // &            set to default value\n+    // <            set to global value\n+    // <xx>         accept special key codes for 'wildchar'\n+    // c            accept any non-digit for 'wildchar'\n+    // [-]0-9       set number\n+    // other        error\n+    arg++;\n+    if (nextchar == '&') {\n+      newval_num = (OptInt)(intptr_t)options[opt_idx].def_val;\n+    } else if (nextchar == '<') {\n+      if ((OptInt *)varp == &curbuf->b_p_ul && opt_flags == OPT_LOCAL) {\n+        // for 'undolevels' NO_LOCAL_UNDOLEVEL means using the global newval_num\n+        newval_num = NO_LOCAL_UNDOLEVEL;\n+      } else if (opt_flags == OPT_LOCAL\n+                 && ((OptInt *)varp == &curwin->w_p_siso || (OptInt *)varp == &curwin->w_p_so)) {\n+        // for 'scrolloff'/'sidescrolloff' -1 means using the global newval_num\n+        newval_num = -1;\n+      } else {\n+        newval_num = *(OptInt *)get_varp_scope(&(options[opt_idx]), OPT_GLOBAL);\n+      }\n+    } else if (((OptInt *)varp == &p_wc || (OptInt *)varp == &p_wcm)\n+               && (*arg == '<' || *arg == '^'\n+                   || (*arg != NUL && (!arg[1] || ascii_iswhite(arg[1]))\n+                       && !ascii_isdigit(*arg)))) {\n+      newval_num = string_to_key(arg);\n+      if (newval_num == 0 && (OptInt *)varp != &p_wcm) {\n+        *errmsg = e_invarg;\n+        return newval;\n+      }\n+    } else if (*arg == '-' || ascii_isdigit(*arg)) {\n+      int i;\n+      // Allow negative, octal and hex numbers.\n+      vim_str2nr(arg, NULL, &i, STR2NR_ALL, &newval_num, NULL, 0, true, NULL);\n+      if (i == 0 || (arg[i] != NUL && !ascii_iswhite(arg[i]))) {\n+        *errmsg = e_number_required_after_equal;\n+        return newval;\n+      }\n+    } else {\n+      *errmsg = e_number_required_after_equal;\n+      return newval;\n+    }\n \n-  if (*errmsg != NULL) {\n-    return;\n+    if (op == OP_ADDING) {\n+      newval_num = oldval_num + newval_num;\n+    }\n+    if (op == OP_PREPENDING) {\n+      newval_num = oldval_num * newval_num;\n+    }\n+    if (op == OP_REMOVING) {\n+      newval_num = oldval_num - newval_num;\n+    }\n+\n+    newval = NUMBER_OPTVAL(newval_num);\n+    break;\n   }\n+  case kOptValTypeString: {\n+    char *oldval_str;\n+    vimoption_T *opt = get_option(opt_idx);\n \n-  if (opt_idx >= 0) {\n-    did_set_option(opt_idx, opt_flags, op == OP_NONE, value_checked);\n+    // When setting the local value of a global option, the old value may be\n+    // the global value.\n+    if (((int)opt->indir & PV_BOTH) && (opt_flags & OPT_LOCAL)) {\n+      oldval_str = *(char **)get_varp(opt);\n+    } else {\n+      oldval_str = *(char **)varp;\n+    }\n+\n+    // Get the new value for the option\n+    char *newval_str = stropt_get_newval(nextchar, opt_idx, argp, varp, oldval_str, &op, flags);\n+    newval = CSTR_AS_OPTVAL(newval_str);\n+    break;\n+  }\n   }\n+\n+  return newval;\n }\n \n-static void do_set_option(int opt_flags, char **argp, bool *did_show, char *errbuf,\n-                          size_t errbuflen, const char **errmsg)\n+static void do_set_one_option(int opt_flags, char **argp, bool *did_show, char *errbuf,",
            "html_url": "https://github.com/neovim/neovim/pull/25394#discussion_r1360965307",
            "id": 1360965307,
            "in_reply_to_id": 1360945938,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5RHq67",
            "original_commit_id": "658dda04e29e2792869eb84383836616bb89c150",
            "original_line": 1274,
            "original_position": 395,
            "original_start_line": null,
            "path": "src/nvim/option.c",
            "position": null,
            "pull_request_review_id": 1680519893,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25394",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360965307/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-16T16:51:16Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360965307",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25394#discussion_r1360965484"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25394"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360965484"
                }
            },
            "author_association": "MEMBER",
            "body": "sure, that works too",
            "commit_id": "3642f2fb44b6a3681e6a637671690258aa83cc62",
            "created_at": "2023-10-16T16:51:24Z",
            "diff_hunk": "@@ -1328,34 +1134,145 @@ static int validate_opt_idx(win_T *win, int opt_idx, int opt_flags, uint32_t fla\n   return OK;\n }\n \n-static void do_set_option_value(int opt_idx, int opt_flags, char **argp, set_prefix_T prefix,\n+/// Get new option value from argp. Allocated OptVal must be freed by caller.\n+static OptVal get_option_newval(int opt_idx, int opt_flags, set_prefix_T prefix, char **argp,\n                                 int nextchar, set_op_T op, uint32_t flags, void *varp, char *errbuf,\n-                                size_t errbuflen, const char **errmsg)\n+                                const size_t errbuflen, const char **errmsg)\n+  FUNC_ATTR_WARN_UNUSED_RESULT\n {\n-  bool value_checked = false;\n-  if (flags & P_BOOL) {        // boolean\n-    do_set_bool(opt_idx, opt_flags, prefix, nextchar, varp, errmsg);\n-  } else if (flags & P_NUM) {  // numeric\n-    do_set_num(opt_idx, opt_flags, argp, nextchar, op, varp, errbuf, errbuflen, errmsg);\n-  } else if (opt_idx >= 0) {   // string.\n-    do_set_option_string(opt_idx, opt_flags, argp, nextchar, op, flags, varp, errbuf,\n-                         errbuflen, &value_checked, errmsg);\n-  } else {\n-    // key code option(FIXME(tarruda): Show a warning or something\n-    // similar)\n+  assert(varp != NULL);\n+\n+  char *arg = *argp;\n+  OptVal oldval = optval_from_varp_flags(varp, flags);\n+  OptVal newval = NIL_OPTVAL;\n+\n+  switch (oldval.type) {\n+  case kOptValTypeNil:\n+    abort();\n+  case kOptValTypeBoolean: {\n+    TriState newval_bool;\n+\n+    // \":set opt!\": invert\n+    // \":set opt&\": reset to default value\n+    // \":set opt<\": reset to global value\n+    if (nextchar == '!') {\n+      switch (oldval.data.boolean) {\n+      case kNone:\n+        newval_bool = kNone;\n+        break;\n+      case kTrue:\n+        newval_bool = kFalse;\n+        break;\n+      case kFalse:\n+        newval_bool = kTrue;\n+        break;\n+      }\n+    } else if (nextchar == '&') {\n+      newval_bool = TRISTATE_FROM_INT((int)(intptr_t)options[opt_idx].def_val);\n+    } else if (nextchar == '<') {\n+      // For 'autoread', kNone means to use global value.\n+      if ((int *)varp == &curbuf->b_p_ar && opt_flags == OPT_LOCAL) {\n+        newval_bool = kNone;\n+      } else {\n+        newval_bool = TRISTATE_FROM_INT(*(int *)get_varp_scope(&(options[opt_idx]), OPT_GLOBAL));\n+      }\n+    } else {\n+      // \":set invopt\": invert\n+      // \":set opt\" or \":set noopt\": set or reset\n+      if (prefix == PREFIX_INV) {\n+        newval_bool = *(int *)varp ^ 1;\n+      } else {\n+        newval_bool = prefix == PREFIX_NO ? 0 : 1;\n+      }\n+    }\n+\n+    newval = BOOLEAN_OPTVAL(newval_bool);\n+    break;\n   }\n+  case kOptValTypeNumber: {\n+    OptInt oldval_num = oldval.data.number;\n+    OptInt newval_num;\n+\n+    // Different ways to set a number option:\n+    // &            set to default value\n+    // <            set to global value\n+    // <xx>         accept special key codes for 'wildchar'\n+    // c            accept any non-digit for 'wildchar'\n+    // [-]0-9       set number\n+    // other        error\n+    arg++;\n+    if (nextchar == '&') {\n+      newval_num = (OptInt)(intptr_t)options[opt_idx].def_val;\n+    } else if (nextchar == '<') {\n+      if ((OptInt *)varp == &curbuf->b_p_ul && opt_flags == OPT_LOCAL) {\n+        // for 'undolevels' NO_LOCAL_UNDOLEVEL means using the global newval_num\n+        newval_num = NO_LOCAL_UNDOLEVEL;\n+      } else if (opt_flags == OPT_LOCAL\n+                 && ((OptInt *)varp == &curwin->w_p_siso || (OptInt *)varp == &curwin->w_p_so)) {\n+        // for 'scrolloff'/'sidescrolloff' -1 means using the global newval_num\n+        newval_num = -1;\n+      } else {\n+        newval_num = *(OptInt *)get_varp_scope(&(options[opt_idx]), OPT_GLOBAL);\n+      }\n+    } else if (((OptInt *)varp == &p_wc || (OptInt *)varp == &p_wcm)\n+               && (*arg == '<' || *arg == '^'\n+                   || (*arg != NUL && (!arg[1] || ascii_iswhite(arg[1]))\n+                       && !ascii_isdigit(*arg)))) {\n+      newval_num = string_to_key(arg);\n+      if (newval_num == 0 && (OptInt *)varp != &p_wcm) {\n+        *errmsg = e_invarg;\n+        return newval;\n+      }\n+    } else if (*arg == '-' || ascii_isdigit(*arg)) {\n+      int i;\n+      // Allow negative, octal and hex numbers.\n+      vim_str2nr(arg, NULL, &i, STR2NR_ALL, &newval_num, NULL, 0, true, NULL);\n+      if (i == 0 || (arg[i] != NUL && !ascii_iswhite(arg[i]))) {\n+        *errmsg = e_number_required_after_equal;\n+        return newval;\n+      }\n+    } else {\n+      *errmsg = e_number_required_after_equal;\n+      return newval;\n+    }\n \n-  if (*errmsg != NULL) {\n-    return;\n+    if (op == OP_ADDING) {\n+      newval_num = oldval_num + newval_num;\n+    }\n+    if (op == OP_PREPENDING) {\n+      newval_num = oldval_num * newval_num;\n+    }\n+    if (op == OP_REMOVING) {\n+      newval_num = oldval_num - newval_num;\n+    }\n+\n+    newval = NUMBER_OPTVAL(newval_num);\n+    break;\n   }\n+  case kOptValTypeString: {\n+    char *oldval_str;\n+    vimoption_T *opt = get_option(opt_idx);\n \n-  if (opt_idx >= 0) {\n-    did_set_option(opt_idx, opt_flags, op == OP_NONE, value_checked);\n+    // When setting the local value of a global option, the old value may be\n+    // the global value.\n+    if (((int)opt->indir & PV_BOTH) && (opt_flags & OPT_LOCAL)) {\n+      oldval_str = *(char **)get_varp(opt);\n+    } else {\n+      oldval_str = *(char **)varp;\n+    }\n+\n+    // Get the new value for the option\n+    char *newval_str = stropt_get_newval(nextchar, opt_idx, argp, varp, oldval_str, &op, flags);\n+    newval = CSTR_AS_OPTVAL(newval_str);\n+    break;\n+  }\n   }\n+\n+  return newval;\n }\n \n-static void do_set_option(int opt_flags, char **argp, bool *did_show, char *errbuf,\n-                          size_t errbuflen, const char **errmsg)\n+static void do_set_one_option(int opt_flags, char **argp, bool *did_show, char *errbuf,",
            "html_url": "https://github.com/neovim/neovim/pull/25394#discussion_r1360965484",
            "id": 1360965484,
            "in_reply_to_id": 1360945938,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5RHq9s",
            "original_commit_id": "658dda04e29e2792869eb84383836616bb89c150",
            "original_line": 1274,
            "original_position": 395,
            "original_start_line": null,
            "path": "src/nvim/option.c",
            "position": null,
            "pull_request_review_id": 1680520145,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25394",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360965484/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-16T16:51:25Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360965484",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25394#discussion_r1360975382"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25394"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360975382"
                }
            },
            "author_association": "MEMBER",
            "body": "@justinmk So should I keep the name `do_set_one_option` or should I change it to `do_one_set_option` as clason suggested?",
            "commit_id": "3642f2fb44b6a3681e6a637671690258aa83cc62",
            "created_at": "2023-10-16T16:55:18Z",
            "diff_hunk": "@@ -1328,34 +1134,145 @@ static int validate_opt_idx(win_T *win, int opt_idx, int opt_flags, uint32_t fla\n   return OK;\n }\n \n-static void do_set_option_value(int opt_idx, int opt_flags, char **argp, set_prefix_T prefix,\n+/// Get new option value from argp. Allocated OptVal must be freed by caller.\n+static OptVal get_option_newval(int opt_idx, int opt_flags, set_prefix_T prefix, char **argp,\n                                 int nextchar, set_op_T op, uint32_t flags, void *varp, char *errbuf,\n-                                size_t errbuflen, const char **errmsg)\n+                                const size_t errbuflen, const char **errmsg)\n+  FUNC_ATTR_WARN_UNUSED_RESULT\n {\n-  bool value_checked = false;\n-  if (flags & P_BOOL) {        // boolean\n-    do_set_bool(opt_idx, opt_flags, prefix, nextchar, varp, errmsg);\n-  } else if (flags & P_NUM) {  // numeric\n-    do_set_num(opt_idx, opt_flags, argp, nextchar, op, varp, errbuf, errbuflen, errmsg);\n-  } else if (opt_idx >= 0) {   // string.\n-    do_set_option_string(opt_idx, opt_flags, argp, nextchar, op, flags, varp, errbuf,\n-                         errbuflen, &value_checked, errmsg);\n-  } else {\n-    // key code option(FIXME(tarruda): Show a warning or something\n-    // similar)\n+  assert(varp != NULL);\n+\n+  char *arg = *argp;\n+  OptVal oldval = optval_from_varp_flags(varp, flags);\n+  OptVal newval = NIL_OPTVAL;\n+\n+  switch (oldval.type) {\n+  case kOptValTypeNil:\n+    abort();\n+  case kOptValTypeBoolean: {\n+    TriState newval_bool;\n+\n+    // \":set opt!\": invert\n+    // \":set opt&\": reset to default value\n+    // \":set opt<\": reset to global value\n+    if (nextchar == '!') {\n+      switch (oldval.data.boolean) {\n+      case kNone:\n+        newval_bool = kNone;\n+        break;\n+      case kTrue:\n+        newval_bool = kFalse;\n+        break;\n+      case kFalse:\n+        newval_bool = kTrue;\n+        break;\n+      }\n+    } else if (nextchar == '&') {\n+      newval_bool = TRISTATE_FROM_INT((int)(intptr_t)options[opt_idx].def_val);\n+    } else if (nextchar == '<') {\n+      // For 'autoread', kNone means to use global value.\n+      if ((int *)varp == &curbuf->b_p_ar && opt_flags == OPT_LOCAL) {\n+        newval_bool = kNone;\n+      } else {\n+        newval_bool = TRISTATE_FROM_INT(*(int *)get_varp_scope(&(options[opt_idx]), OPT_GLOBAL));\n+      }\n+    } else {\n+      // \":set invopt\": invert\n+      // \":set opt\" or \":set noopt\": set or reset\n+      if (prefix == PREFIX_INV) {\n+        newval_bool = *(int *)varp ^ 1;\n+      } else {\n+        newval_bool = prefix == PREFIX_NO ? 0 : 1;\n+      }\n+    }\n+\n+    newval = BOOLEAN_OPTVAL(newval_bool);\n+    break;\n   }\n+  case kOptValTypeNumber: {\n+    OptInt oldval_num = oldval.data.number;\n+    OptInt newval_num;\n+\n+    // Different ways to set a number option:\n+    // &            set to default value\n+    // <            set to global value\n+    // <xx>         accept special key codes for 'wildchar'\n+    // c            accept any non-digit for 'wildchar'\n+    // [-]0-9       set number\n+    // other        error\n+    arg++;\n+    if (nextchar == '&') {\n+      newval_num = (OptInt)(intptr_t)options[opt_idx].def_val;\n+    } else if (nextchar == '<') {\n+      if ((OptInt *)varp == &curbuf->b_p_ul && opt_flags == OPT_LOCAL) {\n+        // for 'undolevels' NO_LOCAL_UNDOLEVEL means using the global newval_num\n+        newval_num = NO_LOCAL_UNDOLEVEL;\n+      } else if (opt_flags == OPT_LOCAL\n+                 && ((OptInt *)varp == &curwin->w_p_siso || (OptInt *)varp == &curwin->w_p_so)) {\n+        // for 'scrolloff'/'sidescrolloff' -1 means using the global newval_num\n+        newval_num = -1;\n+      } else {\n+        newval_num = *(OptInt *)get_varp_scope(&(options[opt_idx]), OPT_GLOBAL);\n+      }\n+    } else if (((OptInt *)varp == &p_wc || (OptInt *)varp == &p_wcm)\n+               && (*arg == '<' || *arg == '^'\n+                   || (*arg != NUL && (!arg[1] || ascii_iswhite(arg[1]))\n+                       && !ascii_isdigit(*arg)))) {\n+      newval_num = string_to_key(arg);\n+      if (newval_num == 0 && (OptInt *)varp != &p_wcm) {\n+        *errmsg = e_invarg;\n+        return newval;\n+      }\n+    } else if (*arg == '-' || ascii_isdigit(*arg)) {\n+      int i;\n+      // Allow negative, octal and hex numbers.\n+      vim_str2nr(arg, NULL, &i, STR2NR_ALL, &newval_num, NULL, 0, true, NULL);\n+      if (i == 0 || (arg[i] != NUL && !ascii_iswhite(arg[i]))) {\n+        *errmsg = e_number_required_after_equal;\n+        return newval;\n+      }\n+    } else {\n+      *errmsg = e_number_required_after_equal;\n+      return newval;\n+    }\n \n-  if (*errmsg != NULL) {\n-    return;\n+    if (op == OP_ADDING) {\n+      newval_num = oldval_num + newval_num;\n+    }\n+    if (op == OP_PREPENDING) {\n+      newval_num = oldval_num * newval_num;\n+    }\n+    if (op == OP_REMOVING) {\n+      newval_num = oldval_num - newval_num;\n+    }\n+\n+    newval = NUMBER_OPTVAL(newval_num);\n+    break;\n   }\n+  case kOptValTypeString: {\n+    char *oldval_str;\n+    vimoption_T *opt = get_option(opt_idx);\n \n-  if (opt_idx >= 0) {\n-    did_set_option(opt_idx, opt_flags, op == OP_NONE, value_checked);\n+    // When setting the local value of a global option, the old value may be\n+    // the global value.\n+    if (((int)opt->indir & PV_BOTH) && (opt_flags & OPT_LOCAL)) {\n+      oldval_str = *(char **)get_varp(opt);\n+    } else {\n+      oldval_str = *(char **)varp;\n+    }\n+\n+    // Get the new value for the option\n+    char *newval_str = stropt_get_newval(nextchar, opt_idx, argp, varp, oldval_str, &op, flags);\n+    newval = CSTR_AS_OPTVAL(newval_str);\n+    break;\n+  }\n   }\n+\n+  return newval;\n }\n \n-static void do_set_option(int opt_flags, char **argp, bool *did_show, char *errbuf,\n-                          size_t errbuflen, const char **errmsg)\n+static void do_set_one_option(int opt_flags, char **argp, bool *did_show, char *errbuf,",
            "html_url": "https://github.com/neovim/neovim/pull/25394#discussion_r1360975382",
            "id": 1360975382,
            "in_reply_to_id": 1360945938,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5RHtYW",
            "original_commit_id": "658dda04e29e2792869eb84383836616bb89c150",
            "original_line": 1274,
            "original_position": 395,
            "original_start_line": null,
            "path": "src/nvim/option.c",
            "position": null,
            "pull_request_review_id": 1680532323,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25394",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360975382/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-16T16:55:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360975382",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25394#discussion_r1360989041"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25394"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360989041"
                }
            },
            "author_association": "MEMBER",
            "body": "There's also `do_one_arg` in `arglist.c` -- two is coincidence, but three makes a pattern ;)",
            "commit_id": "3642f2fb44b6a3681e6a637671690258aa83cc62",
            "created_at": "2023-10-16T16:59:50Z",
            "diff_hunk": "@@ -1328,34 +1134,145 @@ static int validate_opt_idx(win_T *win, int opt_idx, int opt_flags, uint32_t fla\n   return OK;\n }\n \n-static void do_set_option_value(int opt_idx, int opt_flags, char **argp, set_prefix_T prefix,\n+/// Get new option value from argp. Allocated OptVal must be freed by caller.\n+static OptVal get_option_newval(int opt_idx, int opt_flags, set_prefix_T prefix, char **argp,\n                                 int nextchar, set_op_T op, uint32_t flags, void *varp, char *errbuf,\n-                                size_t errbuflen, const char **errmsg)\n+                                const size_t errbuflen, const char **errmsg)\n+  FUNC_ATTR_WARN_UNUSED_RESULT\n {\n-  bool value_checked = false;\n-  if (flags & P_BOOL) {        // boolean\n-    do_set_bool(opt_idx, opt_flags, prefix, nextchar, varp, errmsg);\n-  } else if (flags & P_NUM) {  // numeric\n-    do_set_num(opt_idx, opt_flags, argp, nextchar, op, varp, errbuf, errbuflen, errmsg);\n-  } else if (opt_idx >= 0) {   // string.\n-    do_set_option_string(opt_idx, opt_flags, argp, nextchar, op, flags, varp, errbuf,\n-                         errbuflen, &value_checked, errmsg);\n-  } else {\n-    // key code option(FIXME(tarruda): Show a warning or something\n-    // similar)\n+  assert(varp != NULL);\n+\n+  char *arg = *argp;\n+  OptVal oldval = optval_from_varp_flags(varp, flags);\n+  OptVal newval = NIL_OPTVAL;\n+\n+  switch (oldval.type) {\n+  case kOptValTypeNil:\n+    abort();\n+  case kOptValTypeBoolean: {\n+    TriState newval_bool;\n+\n+    // \":set opt!\": invert\n+    // \":set opt&\": reset to default value\n+    // \":set opt<\": reset to global value\n+    if (nextchar == '!') {\n+      switch (oldval.data.boolean) {\n+      case kNone:\n+        newval_bool = kNone;\n+        break;\n+      case kTrue:\n+        newval_bool = kFalse;\n+        break;\n+      case kFalse:\n+        newval_bool = kTrue;\n+        break;\n+      }\n+    } else if (nextchar == '&') {\n+      newval_bool = TRISTATE_FROM_INT((int)(intptr_t)options[opt_idx].def_val);\n+    } else if (nextchar == '<') {\n+      // For 'autoread', kNone means to use global value.\n+      if ((int *)varp == &curbuf->b_p_ar && opt_flags == OPT_LOCAL) {\n+        newval_bool = kNone;\n+      } else {\n+        newval_bool = TRISTATE_FROM_INT(*(int *)get_varp_scope(&(options[opt_idx]), OPT_GLOBAL));\n+      }\n+    } else {\n+      // \":set invopt\": invert\n+      // \":set opt\" or \":set noopt\": set or reset\n+      if (prefix == PREFIX_INV) {\n+        newval_bool = *(int *)varp ^ 1;\n+      } else {\n+        newval_bool = prefix == PREFIX_NO ? 0 : 1;\n+      }\n+    }\n+\n+    newval = BOOLEAN_OPTVAL(newval_bool);\n+    break;\n   }\n+  case kOptValTypeNumber: {\n+    OptInt oldval_num = oldval.data.number;\n+    OptInt newval_num;\n+\n+    // Different ways to set a number option:\n+    // &            set to default value\n+    // <            set to global value\n+    // <xx>         accept special key codes for 'wildchar'\n+    // c            accept any non-digit for 'wildchar'\n+    // [-]0-9       set number\n+    // other        error\n+    arg++;\n+    if (nextchar == '&') {\n+      newval_num = (OptInt)(intptr_t)options[opt_idx].def_val;\n+    } else if (nextchar == '<') {\n+      if ((OptInt *)varp == &curbuf->b_p_ul && opt_flags == OPT_LOCAL) {\n+        // for 'undolevels' NO_LOCAL_UNDOLEVEL means using the global newval_num\n+        newval_num = NO_LOCAL_UNDOLEVEL;\n+      } else if (opt_flags == OPT_LOCAL\n+                 && ((OptInt *)varp == &curwin->w_p_siso || (OptInt *)varp == &curwin->w_p_so)) {\n+        // for 'scrolloff'/'sidescrolloff' -1 means using the global newval_num\n+        newval_num = -1;\n+      } else {\n+        newval_num = *(OptInt *)get_varp_scope(&(options[opt_idx]), OPT_GLOBAL);\n+      }\n+    } else if (((OptInt *)varp == &p_wc || (OptInt *)varp == &p_wcm)\n+               && (*arg == '<' || *arg == '^'\n+                   || (*arg != NUL && (!arg[1] || ascii_iswhite(arg[1]))\n+                       && !ascii_isdigit(*arg)))) {\n+      newval_num = string_to_key(arg);\n+      if (newval_num == 0 && (OptInt *)varp != &p_wcm) {\n+        *errmsg = e_invarg;\n+        return newval;\n+      }\n+    } else if (*arg == '-' || ascii_isdigit(*arg)) {\n+      int i;\n+      // Allow negative, octal and hex numbers.\n+      vim_str2nr(arg, NULL, &i, STR2NR_ALL, &newval_num, NULL, 0, true, NULL);\n+      if (i == 0 || (arg[i] != NUL && !ascii_iswhite(arg[i]))) {\n+        *errmsg = e_number_required_after_equal;\n+        return newval;\n+      }\n+    } else {\n+      *errmsg = e_number_required_after_equal;\n+      return newval;\n+    }\n \n-  if (*errmsg != NULL) {\n-    return;\n+    if (op == OP_ADDING) {\n+      newval_num = oldval_num + newval_num;\n+    }\n+    if (op == OP_PREPENDING) {\n+      newval_num = oldval_num * newval_num;\n+    }\n+    if (op == OP_REMOVING) {\n+      newval_num = oldval_num - newval_num;\n+    }\n+\n+    newval = NUMBER_OPTVAL(newval_num);\n+    break;\n   }\n+  case kOptValTypeString: {\n+    char *oldval_str;\n+    vimoption_T *opt = get_option(opt_idx);\n \n-  if (opt_idx >= 0) {\n-    did_set_option(opt_idx, opt_flags, op == OP_NONE, value_checked);\n+    // When setting the local value of a global option, the old value may be\n+    // the global value.\n+    if (((int)opt->indir & PV_BOTH) && (opt_flags & OPT_LOCAL)) {\n+      oldval_str = *(char **)get_varp(opt);\n+    } else {\n+      oldval_str = *(char **)varp;\n+    }\n+\n+    // Get the new value for the option\n+    char *newval_str = stropt_get_newval(nextchar, opt_idx, argp, varp, oldval_str, &op, flags);\n+    newval = CSTR_AS_OPTVAL(newval_str);\n+    break;\n+  }\n   }\n+\n+  return newval;\n }\n \n-static void do_set_option(int opt_flags, char **argp, bool *did_show, char *errbuf,\n-                          size_t errbuflen, const char **errmsg)\n+static void do_set_one_option(int opt_flags, char **argp, bool *did_show, char *errbuf,",
            "html_url": "https://github.com/neovim/neovim/pull/25394#discussion_r1360989041",
            "id": 1360989041,
            "in_reply_to_id": 1360945938,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5RHwtx",
            "original_commit_id": "658dda04e29e2792869eb84383836616bb89c150",
            "original_line": 1274,
            "original_position": 395,
            "original_start_line": null,
            "path": "src/nvim/option.c",
            "position": null,
            "pull_request_review_id": 1680548533,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25394",
            "reactions": {
                "+1": 2,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 2,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360989041/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-16T16:59:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360989041",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25394#discussion_r1360991557"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25394"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360991557"
                }
            },
            "author_association": "MEMBER",
            "body": "Sounds more like \"read\"? Should avoid words that have extra meaning unless the extra meaning is relevant.",
            "commit_id": "3642f2fb44b6a3681e6a637671690258aa83cc62",
            "created_at": "2023-10-16T17:01:41Z",
            "diff_hunk": "@@ -1897,6 +1897,45 @@ static OptVal tv_to_optval(typval_T *tv, const char *option, uint32_t flags, boo\n   return value;\n }\n \n+/// Consume an option value and convert it to typval.",
            "html_url": "https://github.com/neovim/neovim/pull/25394#discussion_r1360991557",
            "id": 1360991557,
            "in_reply_to_id": 1360819322,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5RHxVF",
            "original_commit_id": "658dda04e29e2792869eb84383836616bb89c150",
            "original_line": 1900,
            "original_position": 31,
            "original_start_line": null,
            "path": "src/nvim/eval/vars.c",
            "position": null,
            "pull_request_review_id": 1680551352,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25394",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360991557/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-16T17:01:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360991557",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25394#discussion_r1360993451"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25394"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360993451"
                }
            },
            "author_association": "MEMBER",
            "body": "> Should I make a tracking issue detailing the things I wish to work on?\r\n\r\nThat could be helpful, unless you have them in your head and will address them in a nearby PR :)",
            "commit_id": "3642f2fb44b6a3681e6a637671690258aa83cc62",
            "created_at": "2023-10-16T17:03:05Z",
            "diff_hunk": "@@ -3731,69 +3598,148 @@ int get_option_value_strict(char *name, int64_t *numval, char **stringval, int o\n   return rv;\n }\n \n-// Return information for option at 'opt_idx'\n+/// Return information for option at 'opt_idx'\n vimoption_T *get_option(int opt_idx)\n {\n   return &options[opt_idx];\n }\n \n-/// Clear an option\n+/// Set the value of an option using an OptVal.\n ///\n-/// The exact semantics of this depend on the option.\n-static OptVal clear_optval(const char *name, uint32_t flags, void *varp, buf_T *buf, win_T *win)\n+/// @param       opt_idx    Option index. Must be >=0.\n+/// @param[in]   varp       Option variable pointer, cannot be NULL.\n+/// @param       value      New option value.\n+/// @param       opt_flags  Option flags.\n+/// @param       new_value  Whether value was replaced completely.\n+/// @param[out]  errbuf     Buffer for error message.\n+/// @param       errbuflen  Length of error buffer.\n+///\n+/// @return  Error message. NULL if there are no errors.\n+static const char *set_option(const int opt_idx, void *varp, OptVal value, int opt_flags,\n+                              const bool new_value, char *errbuf, size_t errbuflen)\n {\n-  OptVal v = NIL_OPTVAL;\n+  assert(opt_idx >= 0 && varp != NULL);\n \n-  // Change the type of the OptVal to the type used by the option so that it can be cleared.\n-  // TODO(famiu): Clean up all of this after set_(num|bool|string)_option() is unified.\n+  const char *errmsg = NULL;\n+  bool value_checked = false;\n+  vimoption_T *opt = &options[opt_idx];\n \n-  if (flags & P_BOOL) {\n-    v.type = kOptValTypeBoolean;\n-    if ((int *)varp == &buf->b_p_ar) {\n-      // TODO(lewis6991): replace this with a more general condition that\n-      // indicates we are setting the local value of a global-local option\n-      v.data.boolean = kNone;\n-    } else {\n-      v = get_option_value(name, NULL, OPT_GLOBAL, NULL);\n-    }\n-  } else if (flags & P_NUM) {\n-    v.type = kOptValTypeNumber;\n-    if ((OptInt *)varp == &curbuf->b_p_ul) {\n-      // The one true special case\n-      v.data.number = NO_LOCAL_UNDOLEVEL;\n-    } else if ((OptInt *)varp == &win->w_p_so || (OptInt *)varp == &win->w_p_siso) {\n-      // TODO(lewis6991): replace this with a more general condition that\n-      // indicates we are setting the local value of a global-local option\n-      v.data.number = -1;\n-    } else {\n-      v = get_option_value(name, NULL, OPT_GLOBAL, NULL);\n+  // TODO(famiu): Unify set_string_option with set_option.\n+  if (value.type == kOptValTypeString) {\n+    errmsg = set_string_option(opt_idx, varp, value.data.string.data, opt_flags, true,\n+                               &value_checked, errbuf, errbuflen);\n+    goto end;\n+  }\n+\n+  // Disallow changing some options from secure mode.\n+  if ((secure || sandbox != 0) && (options[opt_idx].flags & P_SECURE)) {\n+    return e_secure;\n+  }\n+\n+  OptVal old_value = optval_from_varp(value.type, varp);\n+  OptVal old_global_value = NIL_OPTVAL;\n+  OptVal old_local_value = NIL_OPTVAL;\n+\n+  // Save the local and global values before changing anything. This is needed as for a global-only\n+  // option setting the \"local value\" in fact sets the global value (since there is only one value).\n+  //\n+  // TODO(famiu): This needs to be changed to use the current type of the old value instead of\n+  // value.type, when multi-type options are odded.",
            "html_url": "https://github.com/neovim/neovim/pull/25394#discussion_r1360993451",
            "id": 1360993451,
            "in_reply_to_id": 1360956902,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5RHxyr",
            "original_commit_id": "658dda04e29e2792869eb84383836616bb89c150",
            "original_line": 3647,
            "original_position": 1061,
            "original_start_line": null,
            "path": "src/nvim/option.c",
            "position": null,
            "pull_request_review_id": 1680553636,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25394",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360993451/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-16T17:03:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360993451",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25394#discussion_r1360994597"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25394"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360994597"
                }
            },
            "author_association": "MEMBER",
            "body": "> Sounds more like \"read\"? Should avoid words that have extra meaning unless the extra meaning is relevant.\r\n\r\nHow about \"convert\"?",
            "commit_id": "3642f2fb44b6a3681e6a637671690258aa83cc62",
            "created_at": "2023-10-16T17:03:53Z",
            "diff_hunk": "@@ -1897,6 +1897,45 @@ static OptVal tv_to_optval(typval_T *tv, const char *option, uint32_t flags, boo\n   return value;\n }\n \n+/// Consume an option value and convert it to typval.",
            "html_url": "https://github.com/neovim/neovim/pull/25394#discussion_r1360994597",
            "id": 1360994597,
            "in_reply_to_id": 1360819322,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5RHyEl",
            "original_commit_id": "658dda04e29e2792869eb84383836616bb89c150",
            "original_line": 1900,
            "original_position": 31,
            "original_start_line": null,
            "path": "src/nvim/eval/vars.c",
            "position": null,
            "pull_request_review_id": 1680554927,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25394",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360994597/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-16T17:04:00Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360994597",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/25394#discussion_r1360998243"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/25394"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360998243"
                }
            },
            "author_association": "MEMBER",
            "body": "I think it's best if I make an issue so I can have a concrete roadmap of things to work on, and others can know what I plan to do with this as well. Will do that in a bit",
            "commit_id": "3642f2fb44b6a3681e6a637671690258aa83cc62",
            "created_at": "2023-10-16T17:07:31Z",
            "diff_hunk": "@@ -3731,69 +3598,148 @@ int get_option_value_strict(char *name, int64_t *numval, char **stringval, int o\n   return rv;\n }\n \n-// Return information for option at 'opt_idx'\n+/// Return information for option at 'opt_idx'\n vimoption_T *get_option(int opt_idx)\n {\n   return &options[opt_idx];\n }\n \n-/// Clear an option\n+/// Set the value of an option using an OptVal.\n ///\n-/// The exact semantics of this depend on the option.\n-static OptVal clear_optval(const char *name, uint32_t flags, void *varp, buf_T *buf, win_T *win)\n+/// @param       opt_idx    Option index. Must be >=0.\n+/// @param[in]   varp       Option variable pointer, cannot be NULL.\n+/// @param       value      New option value.\n+/// @param       opt_flags  Option flags.\n+/// @param       new_value  Whether value was replaced completely.\n+/// @param[out]  errbuf     Buffer for error message.\n+/// @param       errbuflen  Length of error buffer.\n+///\n+/// @return  Error message. NULL if there are no errors.\n+static const char *set_option(const int opt_idx, void *varp, OptVal value, int opt_flags,\n+                              const bool new_value, char *errbuf, size_t errbuflen)\n {\n-  OptVal v = NIL_OPTVAL;\n+  assert(opt_idx >= 0 && varp != NULL);\n \n-  // Change the type of the OptVal to the type used by the option so that it can be cleared.\n-  // TODO(famiu): Clean up all of this after set_(num|bool|string)_option() is unified.\n+  const char *errmsg = NULL;\n+  bool value_checked = false;\n+  vimoption_T *opt = &options[opt_idx];\n \n-  if (flags & P_BOOL) {\n-    v.type = kOptValTypeBoolean;\n-    if ((int *)varp == &buf->b_p_ar) {\n-      // TODO(lewis6991): replace this with a more general condition that\n-      // indicates we are setting the local value of a global-local option\n-      v.data.boolean = kNone;\n-    } else {\n-      v = get_option_value(name, NULL, OPT_GLOBAL, NULL);\n-    }\n-  } else if (flags & P_NUM) {\n-    v.type = kOptValTypeNumber;\n-    if ((OptInt *)varp == &curbuf->b_p_ul) {\n-      // The one true special case\n-      v.data.number = NO_LOCAL_UNDOLEVEL;\n-    } else if ((OptInt *)varp == &win->w_p_so || (OptInt *)varp == &win->w_p_siso) {\n-      // TODO(lewis6991): replace this with a more general condition that\n-      // indicates we are setting the local value of a global-local option\n-      v.data.number = -1;\n-    } else {\n-      v = get_option_value(name, NULL, OPT_GLOBAL, NULL);\n+  // TODO(famiu): Unify set_string_option with set_option.\n+  if (value.type == kOptValTypeString) {\n+    errmsg = set_string_option(opt_idx, varp, value.data.string.data, opt_flags, true,\n+                               &value_checked, errbuf, errbuflen);\n+    goto end;\n+  }\n+\n+  // Disallow changing some options from secure mode.\n+  if ((secure || sandbox != 0) && (options[opt_idx].flags & P_SECURE)) {\n+    return e_secure;\n+  }\n+\n+  OptVal old_value = optval_from_varp(value.type, varp);\n+  OptVal old_global_value = NIL_OPTVAL;\n+  OptVal old_local_value = NIL_OPTVAL;\n+\n+  // Save the local and global values before changing anything. This is needed as for a global-only\n+  // option setting the \"local value\" in fact sets the global value (since there is only one value).\n+  //\n+  // TODO(famiu): This needs to be changed to use the current type of the old value instead of\n+  // value.type, when multi-type options are odded.",
            "html_url": "https://github.com/neovim/neovim/pull/25394#discussion_r1360998243",
            "id": 1360998243,
            "in_reply_to_id": 1360956902,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5RHy9j",
            "original_commit_id": "658dda04e29e2792869eb84383836616bb89c150",
            "original_line": 3647,
            "original_position": 1061,
            "original_start_line": null,
            "path": "src/nvim/option.c",
            "position": null,
            "pull_request_review_id": 1680560303,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/25394",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360998243/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-10-16T17:07:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1360998243",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "Otherwise LGTM",
            "created_at": "2023-10-16T12:27:06Z",
            "html_url": "https://github.com/neovim/neovim/pull/25394#issuecomment-1764366718",
            "id": 1764366718,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25394",
            "node_id": "IC_kwDOAPphoM5pKhl-",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1764366718/reactions"
            },
            "updated_at": "2023-10-16T12:27:06Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1764366718",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/25394/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/25394/commits",
    "created_at": "2023-09-27T17:33:12Z",
    "diff_url": "https://github.com/neovim/neovim/pull/25394.diff",
    "draft": false,
    "head": {
        "label": "famiu:refactor/options/set_option",
        "ref": "refactor/options/set_option",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/famiu/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/famiu/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/famiu/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/famiu/neovim/branches{/branch}",
            "clone_url": "https://github.com/famiu/neovim.git",
            "collaborators_url": "https://api.github.com/repos/famiu/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/famiu/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/famiu/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/famiu/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/famiu/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/famiu/neovim/contributors",
            "created_at": "2021-10-11T04:58:58Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/famiu/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/famiu/neovim/downloads",
            "events_url": "https://api.github.com/repos/famiu/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/famiu/neovim/forks",
            "full_name": "famiu/neovim",
            "git_commits_url": "https://api.github.com/repos/famiu/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/famiu/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/famiu/neovim/git/tags{/sha}",
            "git_url": "git://github.com/famiu/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/famiu/neovim/hooks",
            "html_url": "https://github.com/famiu/neovim",
            "id": 415783665,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/famiu/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/famiu/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/famiu/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/famiu/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/famiu/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/famiu/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/famiu/neovim/merges",
            "milestones_url": "https://api.github.com/repos/famiu/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "R_kgDOGMha8Q",
            "notifications_url": "https://api.github.com/repos/famiu/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
                "events_url": "https://api.github.com/users/famiu/events{/privacy}",
                "followers_url": "https://api.github.com/users/famiu/followers",
                "following_url": "https://api.github.com/users/famiu/following{/other_user}",
                "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/famiu",
                "id": 29580810,
                "login": "famiu",
                "node_id": "MDQ6VXNlcjI5NTgwODEw",
                "organizations_url": "https://api.github.com/users/famiu/orgs",
                "received_events_url": "https://api.github.com/users/famiu/received_events",
                "repos_url": "https://api.github.com/users/famiu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/famiu"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/famiu/neovim/pulls{/number}",
            "pushed_at": "2023-10-16T18:53:50Z",
            "releases_url": "https://api.github.com/repos/famiu/neovim/releases{/id}",
            "size": 249318,
            "ssh_url": "git@github.com:famiu/neovim.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/famiu/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/famiu/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/famiu/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/famiu/neovim/subscription",
            "svn_url": "https://github.com/famiu/neovim",
            "tags_url": "https://api.github.com/repos/famiu/neovim/tags",
            "teams_url": "https://api.github.com/repos/famiu/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/famiu/neovim/git/trees{/sha}",
            "updated_at": "2022-08-29T10:09:33Z",
            "url": "https://api.github.com/repos/famiu/neovim",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "3642f2fb44b6a3681e6a637671690258aa83cc62",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
            "events_url": "https://api.github.com/users/famiu/events{/privacy}",
            "followers_url": "https://api.github.com/users/famiu/followers",
            "following_url": "https://api.github.com/users/famiu/following{/other_user}",
            "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/famiu",
            "id": 29580810,
            "login": "famiu",
            "node_id": "MDQ6VXNlcjI5NTgwODEw",
            "organizations_url": "https://api.github.com/users/famiu/orgs",
            "received_events_url": "https://api.github.com/users/famiu/received_events",
            "repos_url": "https://api.github.com/users/famiu/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/famiu"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/25394",
    "id": 1532848464,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/25394",
    "labels": [
        {
            "color": "C5DEF5",
            "default": false,
            "description": "changes that are not features or bugfixes",
            "id": 106949155,
            "name": "refactor",
            "node_id": "MDU6TGFiZWwxMDY5NDkxNTU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/refactor"
        },
        {
            "color": "F9D0C4",
            "default": false,
            "description": "",
            "id": 3968935075,
            "name": "breaking-change",
            "node_id": "LA_kwDOAPphoM7skSSj",
            "url": "https://api.github.com/repos/neovim/neovim/labels/breaking-change"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "",
            "id": 4242493821,
            "name": "options",
            "node_id": "LA_kwDOAPphoM7831F9",
            "url": "https://api.github.com/repos/neovim/neovim/labels/options"
        }
    ],
    "locked": false,
    "merge_commit_sha": "a63c67005b9ea17214d86391e2fd649658c1bdec",
    "merged_at": "2023-10-16T18:41:36Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5bXWlQ",
    "number": 25394,
    "patch_url": "https://github.com/neovim/neovim/pull/25394.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/25394/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/3642f2fb44b6a3681e6a637671690258aa83cc62",
    "title": "refactor(options)!: unify interfaces for setting options",
    "updated_at": "2023-10-16T18:42:11Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/25394",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/29580810?v=4",
        "events_url": "https://api.github.com/users/famiu/events{/privacy}",
        "followers_url": "https://api.github.com/users/famiu/followers",
        "following_url": "https://api.github.com/users/famiu/following{/other_user}",
        "gists_url": "https://api.github.com/users/famiu/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/famiu",
        "id": 29580810,
        "login": "famiu",
        "node_id": "MDQ6VXNlcjI5NTgwODEw",
        "organizations_url": "https://api.github.com/users/famiu/orgs",
        "received_events_url": "https://api.github.com/users/famiu/received_events",
        "repos_url": "https://api.github.com/users/famiu/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/famiu/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/famiu/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/famiu"
    }
}