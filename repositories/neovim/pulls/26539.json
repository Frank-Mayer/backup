{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/26539/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/26539/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/26539"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/26539"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/26539/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/26539"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/68718a8e164bebbf8752cc44c203d9db78e23b40"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5066,
            "forks_count": 5066,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1721,
            "open_issues_count": 1721,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2023-12-19T00:15:23Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 246400,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 71892,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2023-12-19T01:02:33Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 71892,
            "watchers_count": 71892,
            "web_commit_signoff_required": false
        },
        "sha": "8122470f8310ae34bcd5e436e8474f9255eb16f2",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": null,
    "closed_at": "2023-12-13T16:31:39Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26539#discussion_r1424432824"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26539"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1424432824"
                }
            },
            "author_association": "MEMBER",
            "body": "We need to go through this file and remove the backticks from taglinks. ",
            "commit_id": "68718a8e164bebbf8752cc44c203d9db78e23b40",
            "created_at": "2023-12-12T18:36:50Z",
            "diff_hunk": "@@ -0,0 +1,825 @@\n+*faq.txt*\t\t Frequently Asked Questions\n+\n+                            NVIM REFERENCE MANUAL\n+\n+==============================================================================\n+1. General Questions                                   *faq-general-questions*\n+\n+\n+WHERE SHOULD I PUT MY CONFIG (VIMRC)? ~\n+\n+See |`:help config`|.",
            "html_url": "https://github.com/neovim/neovim/pull/26539#discussion_r1424432824",
            "id": 1424432824,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U5x64",
            "original_commit_id": "0a8e697251e03cd29d0998003309ec0c3e4a8b39",
            "original_line": 11,
            "original_position": 11,
            "original_start_line": null,
            "path": "runtime/doc/faq.txt",
            "position": null,
            "pull_request_review_id": 1778211550,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26539",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1424432824/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-12T18:38:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1424432824",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26539#discussion_r1424433960"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26539"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1424433960"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\n    >vim\n```\nNote to self: check all code blocks. ",
            "commit_id": "68718a8e164bebbf8752cc44c203d9db78e23b40",
            "created_at": "2023-12-12T18:38:10Z",
            "diff_hunk": "@@ -0,0 +1,825 @@\n+*faq.txt*\t\t Frequently Asked Questions\n+\n+                            NVIM REFERENCE MANUAL\n+\n+==============================================================================\n+1. General Questions                                   *faq-general-questions*\n+\n+\n+WHERE SHOULD I PUT MY CONFIG (VIMRC)? ~\n+\n+See |`:help config`|.\n+\n+You can copy your existing vimrc, or symlink to it. |`:help nvim-from-vim`|\n+\n+\n+HOW STABLE IS THE DEVELOPMENT (PRE-RELEASE) VERSION? ~\n+\n+The unstable (pre-release)\n+<https://github.com/neovim/neovim/releases/tag/nightly> version of Neovim\n+(\"HEAD\", i.e. the `master` branch) is used to aggressively stage new features\n+and changes. It's usually stable, but will occasionally break your workflow.\n+We depend on HEAD users to report \"blind spots\" that were not caught by\n+automated tests.\n+\n+Use the stable (release) <https://github.com/neovim/neovim/releases/latest>\n+version for a more predictable experience.\n+\n+\n+CAN I USE RUBY-BASED VIM PLUGINS (E.G. LUSTYEXPLORER)? ~\n+\n+Yes, starting with Neovim 0.1.5 PR #4980\n+<https://github.com/neovim/neovim/pull/4980> the legacy Vim `if_ruby` interface\n+is supported.\n+\n+\n+CAN I USE LUA-BASED VIM PLUGINS (E.G. NEOCOMPLETE)? ~\n+\n+No. Starting with Neovim 0.2 PR #4411\n+<https://github.com/neovim/neovim/pull/4411> Lua is built-in, but the legacy\n+Vim `if_lua` interface is not supported.\n+\n+\n+HOW CAN I USE \"TRUE COLOR\" IN THE TERMINAL? ~\n+\n+Add this to your `init.vim`:\n+\n+>vim\n+    set termguicolors\n+<\n+\n+- See this gist <https://gist.github.com/XVilka/8346728> for more information.\n+- See this thread <https://www.reddit.com/r/neovim/comments/825dj7/the_endless_litany_of_tmux_and_nvim_color_problems/dvc2boh/> for guidance on how to check your system capabilities.\n+\n+\n+NVIM SHOWS WEIRD SYMBOLS (`�[2 q`) WHEN CHANGING MODES ~\n+\n+This is a bug in your terminal emulator. It happens because Nvim sends\n+cursor-shape termcodes by default, if the terminal appears to be\n+xterm-compatible (`TERM=xterm-256color`).\n+\n+To workaround the issue, you can:\n+\n+- Use a different terminal emulator\n+- Disable `guicursor` in your Nvim config:\n+    >",
            "html_url": "https://github.com/neovim/neovim/pull/26539#discussion_r1424433960",
            "id": 1424433960,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U5yMo",
            "original_commit_id": "0a8e697251e03cd29d0998003309ec0c3e4a8b39",
            "original_line": 65,
            "original_position": 65,
            "original_start_line": null,
            "path": "runtime/doc/faq.txt",
            "position": null,
            "pull_request_review_id": 1778211550,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26539",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1424433960/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-12T18:38:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1424433960",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26539#discussion_r1425031023"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26539"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425031023"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "shouldn't this be `>bash`",
            "commit_id": "68718a8e164bebbf8752cc44c203d9db78e23b40",
            "created_at": "2023-12-13T08:48:08Z",
            "diff_hunk": "@@ -0,0 +1,822 @@\n+*faq.txt*\t\t Frequently Asked Questions\n+\n+                            NVIM REFERENCE MANUAL\n+\n+==============================================================================\n+1. General Questions                                 *faq* *faq-general-questions*\n+\n+\n+WHERE SHOULD I PUT MY CONFIG (VIMRC)? ~\n+\n+See |config|.\n+\n+You can copy your existing vimrc, or symlink to it. |nvim-from-vim|\n+\n+\n+HOW STABLE IS THE DEVELOPMENT (PRE-RELEASE) VERSION? ~\n+\n+The unstable (pre-release)\n+https://github.com/neovim/neovim/releases/tag/nightly version of Nvim\n+(\"HEAD\", i.e. the `master` branch) is used to aggressively stage new features\n+and changes. It's usually stable, but will occasionally break your workflow.\n+We depend on HEAD users to report \"blind spots\" that were not caught by\n+automated tests.\n+\n+Use the stable (release) https://github.com/neovim/neovim/releases/latest\n+version for a more predictable experience.\n+\n+\n+CAN I USE RUBY-BASED VIM PLUGINS (E.G. LUSTYEXPLORER)? ~\n+\n+Yes, starting with Nvim 0.1.5 PR #4980\n+https://github.com/neovim/neovim/pull/4980 the legacy Vim `if_ruby` interface\n+is supported.\n+\n+\n+CAN I USE LUA-BASED VIM PLUGINS (E.G. NEOCOMPLETE)? ~\n+\n+No. Starting with Nvim 0.2 PR #4411\n+https://github.com/neovim/neovim/pull/4411 Lua is built-in, but the legacy\n+Vim `if_lua` interface is not supported.\n+\n+\n+HOW CAN I USE \"TRUE COLOR\" IN THE TERMINAL? ~\n+\n+Add this to your `init.vim`:\n+\n+>vim\n+    set termguicolors\n+<\n+\n+- See this gist https://gist.github.com/XVilka/8346728 for more information.\n+- See this thread https://www.reddit.com/r/neovim/comments/825dj7/the_endless_litany_of_tmux_and_nvim_color_problems/dvc2boh/ for guidance on how to check your system capabilities.\n+\n+\n+NVIM SHOWS WEIRD SYMBOLS (`�[2 q`) WHEN CHANGING MODES ~\n+\n+This is a bug in your terminal emulator. It happens because Nvim sends\n+cursor-shape termcodes by default, if the terminal appears to be\n+xterm-compatible (`TERM=xterm-256color`).\n+\n+To workaround the issue, you can:\n+\n+- Use a different terminal emulator\n+- Disable `guicursor` in your Nvim config:\n+\n+>vim\n+    :set guicursor=\n+    \" Workaround some broken plugins which set guicursor indiscriminately.\n+    :autocmd OptionSet guicursor noautocmd set guicursor=\n+<\n+\n+See also |$TERM| for recommended values of `$TERM`.\n+\n+\n+HOW TO CHANGE CURSOR SHAPE IN THE TERMINAL? ~\n+\n+- For Nvim 0.1.7 or older: see the note about `NVIM_TUI_ENABLE_CURSOR_SHAPE` in `man nvim`.\n+- For Nvim 0.2 or newer: cursor styling is controlled by the `guicursor` option.\n+    - To _disable_ cursor-styling, set `guicursor` to empty:\n+        >\n+            :set guicursor=\n+            \" Workaround some broken plugins which set guicursor indiscriminately.\n+            :autocmd OptionSet guicursor noautocmd set guicursor=\n+        <\n+    - If you want a non-blinking cursor, use `blinkon0`. See 'guicursor'.\n+    - `guicursor` is enabled by default, unless Nvim thinks your terminal doesn't\n+        support it. If you're sure that your terminal supports cursor-shaping, set\n+        `guicursor` in your init.vim, as described in 'guicursor'.\n+- The Vim terminal options `t_SI` and `t_EI` are ignored, like all other `t_XX` options.\n+- Old versions of libvte (gnome-terminal, roxterm, terminator, ...) do not support cursor style control codes. #2537 https://github.com/neovim/neovim/issues/2537\n+\n+\n+HOW TO CHANGE CURSOR COLOR IN THE TERMINAL? ~\n+\n+Cursor styling (shape, color, behavior) is controlled by `guicursor`, even in\n+the terminal. Cursor _color_ (as opposed to shape) **only** works if\n+`termguicolors` is set.\n+\n+'guicursor' gives an example, but here's a more complicated example\n+which sets different colors in insert-mode and normal-mode:\n+\n+>vim\n+    :set termguicolors\n+    :hi Cursor guifg=green guibg=green\n+    :hi Cursor2 guifg=red guibg=red\n+    :set guicursor=n-v-c:block-Cursor/lCursor,i-ci-ve:ver25-Cursor2/lCursor2,r-cr:hor20,o:hor50\n+<\n+\n+\n+CURSOR STYLE ISN'T RESTORED AFTER EXITING OR SUSPENDING AND RESUMING NVIM ~\n+\n+Terminals do not provide a way to query the cursor style. Use autocommands to\n+manage the cursor style:\n+\n+>vim\n+    au VimEnter,VimResume * set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50\n+      \\,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor\n+      \\,sm:block-blinkwait175-blinkoff150-blinkon175\n+\n+    au VimLeave,VimSuspend * set guicursor=a:block-blinkon0\n+<\n+\n+\n+CURSOR SHAPE DOESN'T CHANGE IN TMUX ~\n+\n+tmux decides that, not Nvim. See |tui-cursor-shape| for a fix.\n+\n+See #3165 https://github.com/neovim/neovim/pull/3165 for discussion.\n+\n+\n+CURSOR FLICKER IN TMUX? ~\n+\n+If cursor `_` appears and disappears very quickly when opening nvim without a\n+document under tmux, and you set `ctermbg` in `EndOfBuffer` and `Normal`, try\n+setting these to `NONE`:\n+\n+>vim\n+    hi EndOfBuffer ctermbg=NONE ctermfg=200 cterm=NONE\n+    hi Normal ctermbg=NONE ctermfg=200 cterm=NONE\n+<\n+\n+\n+HOW TO USE THE WINDOWS CLIPBOARD FROM WSL? ~\n+\n+**Update:** Try the suggestion given by |clipboard-wsl|:\n+\n+>vim\n+    let g:clipboard = {\n+      \\   'name': 'WslClipboard',\n+      \\   'copy': {\n+      \\      '+': 'clip.exe',\n+      \\      '*': 'clip.exe',\n+      \\    },\n+      \\   'paste': {\n+      \\      '+': 'powershell.exe -c [Console]::Out.Write($(Get-Clipboard -Raw).tostring().replace(\"`r\", \"\"))',\n+      \\      '*': 'powershell.exe -c [Console]::Out.Write($(Get-Clipboard -Raw).tostring().replace(\"`r\", \"\"))',\n+      \\   },\n+      \\   'cache_enabled': 0,\n+      \\ }\n+<\n+\n+\n+OLD INSTRUCTIONS...\n+\n+To use the Windows clipboard from within WSL, `win32yank.exe`\n+https://github.com/equalsraf/win32yank has to be on our `$PATH`.\n+\n+If Nvim is installed on both Windows and within the WSL distribution, the\n+`win32yank.exe` binary provided by the Nvim Windows installation can be\n+symlinked to a directory included in our `$PATH` so it can be found by Nvim\n+on WSL. Replace `$NEOVIM_WIN_DIR` with the path to our Nvim Windows\n+installation, e.g. `/mnt/c/Program Files/Neovim`. The command can then be\n+symlinked using:\n+\n+>vim\n+    sudo ln -s \"$NEOVIM_WIN_DIR/bin/win32yank.exe\" \"/usr/local/bin/win32yank.exe\"\n+<\n+\n+On some versions of Windows, WSL is unable to execute symbolic links to Windows\n+executables (microsoft/WSL#3999\n+https://github.com/microsoft/WSL/issues/3999). In that case, use one of the\n+methods in #12113 (comment)\n+https://github.com/neovim/neovim/issues/12113#issuecomment-612827446.\n+\n+If Nvim is only installed within our WSL distribution, we can just install\n+`win32yank.exe` manually:\n+\n+>vim",
            "html_url": "https://github.com/neovim/neovim/pull/26539#discussion_r1425031023",
            "id": 1425031023,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U8D9v",
            "original_commit_id": "391ae336bf6c0235562c06dcc947a871224bf73b",
            "original_line": 188,
            "original_position": 188,
            "original_start_line": null,
            "path": "runtime/doc/faq.txt",
            "position": null,
            "pull_request_review_id": 1779123321,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26539",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425031023/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T08:48:08Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425031023",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/29790821?v=4",
                "events_url": "https://api.github.com/users/lucario387/events{/privacy}",
                "followers_url": "https://api.github.com/users/lucario387/followers",
                "following_url": "https://api.github.com/users/lucario387/following{/other_user}",
                "gists_url": "https://api.github.com/users/lucario387/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lucario387",
                "id": 29790821,
                "login": "lucario387",
                "node_id": "MDQ6VXNlcjI5NzkwODIx",
                "organizations_url": "https://api.github.com/users/lucario387/orgs",
                "received_events_url": "https://api.github.com/users/lucario387/received_events",
                "repos_url": "https://api.github.com/users/lucario387/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lucario387/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lucario387/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lucario387"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26539#discussion_r1425032822"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26539"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425032822"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes, I plan to go through the document and fix things (and remove outdated information) sometime today.",
            "commit_id": "68718a8e164bebbf8752cc44c203d9db78e23b40",
            "created_at": "2023-12-13T08:49:41Z",
            "diff_hunk": "@@ -0,0 +1,822 @@\n+*faq.txt*\t\t Frequently Asked Questions\n+\n+                            NVIM REFERENCE MANUAL\n+\n+==============================================================================\n+1. General Questions                                 *faq* *faq-general-questions*\n+\n+\n+WHERE SHOULD I PUT MY CONFIG (VIMRC)? ~\n+\n+See |config|.\n+\n+You can copy your existing vimrc, or symlink to it. |nvim-from-vim|\n+\n+\n+HOW STABLE IS THE DEVELOPMENT (PRE-RELEASE) VERSION? ~\n+\n+The unstable (pre-release)\n+https://github.com/neovim/neovim/releases/tag/nightly version of Nvim\n+(\"HEAD\", i.e. the `master` branch) is used to aggressively stage new features\n+and changes. It's usually stable, but will occasionally break your workflow.\n+We depend on HEAD users to report \"blind spots\" that were not caught by\n+automated tests.\n+\n+Use the stable (release) https://github.com/neovim/neovim/releases/latest\n+version for a more predictable experience.\n+\n+\n+CAN I USE RUBY-BASED VIM PLUGINS (E.G. LUSTYEXPLORER)? ~\n+\n+Yes, starting with Nvim 0.1.5 PR #4980\n+https://github.com/neovim/neovim/pull/4980 the legacy Vim `if_ruby` interface\n+is supported.\n+\n+\n+CAN I USE LUA-BASED VIM PLUGINS (E.G. NEOCOMPLETE)? ~\n+\n+No. Starting with Nvim 0.2 PR #4411\n+https://github.com/neovim/neovim/pull/4411 Lua is built-in, but the legacy\n+Vim `if_lua` interface is not supported.\n+\n+\n+HOW CAN I USE \"TRUE COLOR\" IN THE TERMINAL? ~\n+\n+Add this to your `init.vim`:\n+\n+>vim\n+    set termguicolors\n+<\n+\n+- See this gist https://gist.github.com/XVilka/8346728 for more information.\n+- See this thread https://www.reddit.com/r/neovim/comments/825dj7/the_endless_litany_of_tmux_and_nvim_color_problems/dvc2boh/ for guidance on how to check your system capabilities.\n+\n+\n+NVIM SHOWS WEIRD SYMBOLS (`�[2 q`) WHEN CHANGING MODES ~\n+\n+This is a bug in your terminal emulator. It happens because Nvim sends\n+cursor-shape termcodes by default, if the terminal appears to be\n+xterm-compatible (`TERM=xterm-256color`).\n+\n+To workaround the issue, you can:\n+\n+- Use a different terminal emulator\n+- Disable `guicursor` in your Nvim config:\n+\n+>vim\n+    :set guicursor=\n+    \" Workaround some broken plugins which set guicursor indiscriminately.\n+    :autocmd OptionSet guicursor noautocmd set guicursor=\n+<\n+\n+See also |$TERM| for recommended values of `$TERM`.\n+\n+\n+HOW TO CHANGE CURSOR SHAPE IN THE TERMINAL? ~\n+\n+- For Nvim 0.1.7 or older: see the note about `NVIM_TUI_ENABLE_CURSOR_SHAPE` in `man nvim`.\n+- For Nvim 0.2 or newer: cursor styling is controlled by the `guicursor` option.\n+    - To _disable_ cursor-styling, set `guicursor` to empty:\n+        >\n+            :set guicursor=\n+            \" Workaround some broken plugins which set guicursor indiscriminately.\n+            :autocmd OptionSet guicursor noautocmd set guicursor=\n+        <\n+    - If you want a non-blinking cursor, use `blinkon0`. See 'guicursor'.\n+    - `guicursor` is enabled by default, unless Nvim thinks your terminal doesn't\n+        support it. If you're sure that your terminal supports cursor-shaping, set\n+        `guicursor` in your init.vim, as described in 'guicursor'.\n+- The Vim terminal options `t_SI` and `t_EI` are ignored, like all other `t_XX` options.\n+- Old versions of libvte (gnome-terminal, roxterm, terminator, ...) do not support cursor style control codes. #2537 https://github.com/neovim/neovim/issues/2537\n+\n+\n+HOW TO CHANGE CURSOR COLOR IN THE TERMINAL? ~\n+\n+Cursor styling (shape, color, behavior) is controlled by `guicursor`, even in\n+the terminal. Cursor _color_ (as opposed to shape) **only** works if\n+`termguicolors` is set.\n+\n+'guicursor' gives an example, but here's a more complicated example\n+which sets different colors in insert-mode and normal-mode:\n+\n+>vim\n+    :set termguicolors\n+    :hi Cursor guifg=green guibg=green\n+    :hi Cursor2 guifg=red guibg=red\n+    :set guicursor=n-v-c:block-Cursor/lCursor,i-ci-ve:ver25-Cursor2/lCursor2,r-cr:hor20,o:hor50\n+<\n+\n+\n+CURSOR STYLE ISN'T RESTORED AFTER EXITING OR SUSPENDING AND RESUMING NVIM ~\n+\n+Terminals do not provide a way to query the cursor style. Use autocommands to\n+manage the cursor style:\n+\n+>vim\n+    au VimEnter,VimResume * set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50\n+      \\,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor\n+      \\,sm:block-blinkwait175-blinkoff150-blinkon175\n+\n+    au VimLeave,VimSuspend * set guicursor=a:block-blinkon0\n+<\n+\n+\n+CURSOR SHAPE DOESN'T CHANGE IN TMUX ~\n+\n+tmux decides that, not Nvim. See |tui-cursor-shape| for a fix.\n+\n+See #3165 https://github.com/neovim/neovim/pull/3165 for discussion.\n+\n+\n+CURSOR FLICKER IN TMUX? ~\n+\n+If cursor `_` appears and disappears very quickly when opening nvim without a\n+document under tmux, and you set `ctermbg` in `EndOfBuffer` and `Normal`, try\n+setting these to `NONE`:\n+\n+>vim\n+    hi EndOfBuffer ctermbg=NONE ctermfg=200 cterm=NONE\n+    hi Normal ctermbg=NONE ctermfg=200 cterm=NONE\n+<\n+\n+\n+HOW TO USE THE WINDOWS CLIPBOARD FROM WSL? ~\n+\n+**Update:** Try the suggestion given by |clipboard-wsl|:\n+\n+>vim\n+    let g:clipboard = {\n+      \\   'name': 'WslClipboard',\n+      \\   'copy': {\n+      \\      '+': 'clip.exe',\n+      \\      '*': 'clip.exe',\n+      \\    },\n+      \\   'paste': {\n+      \\      '+': 'powershell.exe -c [Console]::Out.Write($(Get-Clipboard -Raw).tostring().replace(\"`r\", \"\"))',\n+      \\      '*': 'powershell.exe -c [Console]::Out.Write($(Get-Clipboard -Raw).tostring().replace(\"`r\", \"\"))',\n+      \\   },\n+      \\   'cache_enabled': 0,\n+      \\ }\n+<\n+\n+\n+OLD INSTRUCTIONS...\n+\n+To use the Windows clipboard from within WSL, `win32yank.exe`\n+https://github.com/equalsraf/win32yank has to be on our `$PATH`.\n+\n+If Nvim is installed on both Windows and within the WSL distribution, the\n+`win32yank.exe` binary provided by the Nvim Windows installation can be\n+symlinked to a directory included in our `$PATH` so it can be found by Nvim\n+on WSL. Replace `$NEOVIM_WIN_DIR` with the path to our Nvim Windows\n+installation, e.g. `/mnt/c/Program Files/Neovim`. The command can then be\n+symlinked using:\n+\n+>vim\n+    sudo ln -s \"$NEOVIM_WIN_DIR/bin/win32yank.exe\" \"/usr/local/bin/win32yank.exe\"\n+<\n+\n+On some versions of Windows, WSL is unable to execute symbolic links to Windows\n+executables (microsoft/WSL#3999\n+https://github.com/microsoft/WSL/issues/3999). In that case, use one of the\n+methods in #12113 (comment)\n+https://github.com/neovim/neovim/issues/12113#issuecomment-612827446.\n+\n+If Nvim is only installed within our WSL distribution, we can just install\n+`win32yank.exe` manually:\n+\n+>vim",
            "html_url": "https://github.com/neovim/neovim/pull/26539#discussion_r1425032822",
            "id": 1425032822,
            "in_reply_to_id": 1425031023,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U8EZ2",
            "original_commit_id": "391ae336bf6c0235562c06dcc947a871224bf73b",
            "original_line": 188,
            "original_position": 188,
            "original_start_line": null,
            "path": "runtime/doc/faq.txt",
            "position": null,
            "pull_request_review_id": 1779125978,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26539",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425032822/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T08:49:41Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425032822",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26539#discussion_r1425206255"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26539"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425206255"
                }
            },
            "author_association": "MEMBER",
            "body": "That whole section probably belongs in CONTRIBUTING.md or MAINTAINING.md (or a new `:h dev_tools` file or somesuch); it's a bit out of place here.",
            "commit_id": "68718a8e164bebbf8752cc44c203d9db78e23b40",
            "created_at": "2023-12-13T11:13:22Z",
            "diff_hunk": "@@ -0,0 +1,701 @@\n+*faq.txt*\t\t Frequently Asked Questions\n+\n+                            NVIM REFERENCE MANUAL\n+\n+==============================================================================\n+1. General Questions                                 *faq* *faq-general-questions*\n+\n+\n+WHERE SHOULD I PUT MY CONFIG (VIMRC)? ~\n+\n+See |config|; you can copy (or symlink) your existing vimrc. |nvim-from-vim|\n+\n+\n+HOW STABLE IS THE DEVELOPMENT (PRE-RELEASE) VERSION? ~\n+\n+The unstable (pre-release)\n+https://github.com/neovim/neovim/releases/tag/nightly version of Nvim\n+(\"HEAD\", i.e. the `master` branch) is used to aggressively stage new features\n+and changes. It's usually stable, but will occasionally break your workflow.\n+We depend on HEAD users to report \"blind spots\" that were not caught by\n+automated tests.\n+\n+Use the stable (release) https://github.com/neovim/neovim/releases/latest\n+version for a more predictable experience.\n+\n+\n+CAN I USE RUBY-BASED VIM PLUGINS (E.G. LUSTYEXPLORER)? ~\n+\n+Yes, starting with Nvim 0.1.5 PR #4980\n+https://github.com/neovim/neovim/pull/4980 the legacy Vim `if_ruby` interface\n+is supported.\n+\n+\n+CAN I USE LUA-BASED VIM PLUGINS (E.G. NEOCOMPLETE)? ~\n+\n+No. Starting with Nvim 0.2 PR #4411\n+https://github.com/neovim/neovim/pull/4411 Lua is built-in, but the legacy\n+Vim `if_lua` interface is not supported.\n+\n+\n+HOW CAN I USE \"TRUE COLOR\" IN THE TERMINAL? ~\n+\n+Truecolor (24bit colors) are enabled by default if a supporting terminal is\n+detected. If your terminal is not detected but you are sure it supports\n+truecolor, add this to your |init.vim|:\n+>vim\n+    set termguicolors\n+<\n+\n+NVIM SHOWS WEIRD SYMBOLS (`�[2 q`) WHEN CHANGING MODES ~\n+\n+This is a bug in your terminal emulator. It happens because Nvim sends\n+cursor-shape termcodes by default, if the terminal appears to be\n+xterm-compatible (`TERM=xterm-256color`).\n+\n+To workaround the issue, you can:\n+\n+- Use a different terminal emulator\n+- Disable |guicursor| in your Nvim config: >vim\n+\n+    :set guicursor=\n+    \" Workaround some broken plugins which set guicursor indiscriminately.\n+    :autocmd OptionSet guicursor noautocmd set guicursor=\n+<\n+See also |$TERM| for recommended values of `$TERM`.\n+\n+\n+HOW TO CHANGE CURSOR SHAPE IN THE TERMINAL? ~\n+\n+- For Nvim 0.1.7 or older: see the note about `NVIM_TUI_ENABLE_CURSOR_SHAPE` in `man nvim`.\n+- For Nvim 0.2 or newer: cursor styling is controlled by the 'guicursor' option.\n+    - To _disable_ cursor-styling, set 'guicursor' to empty: >vim\n+\n+            :set guicursor=\n+            \" Workaround some broken plugins which set guicursor indiscriminately.\n+            :autocmd OptionSet guicursor noautocmd set guicursor=\n+<\n+    - If you want a non-blinking cursor, use `blinkon0`. See 'guicursor'.\n+    - 'guicursor' is enabled by default, unless Nvim thinks your terminal doesn't\n+        support it. If you're sure that your terminal supports cursor-shaping, set\n+        'guicursor' in your |init.vim|, as described in 'guicursor'.\n+- The Vim terminal options `t_SI` and `t_EI` are ignored, like all other `t_XX` options.\n+- Old versions of libvte (gnome-terminal, roxterm, terminator, ...) do not\n+  support cursor style control codes. #2537\n+  https://github.com/neovim/neovim/issues/2537\n+\n+\n+HOW TO CHANGE CURSOR COLOR IN THE TERMINAL? ~\n+\n+Cursor styling (shape, color, behavior) is controlled by 'guicursor', even in\n+the terminal. Cursor color (as opposed to shape) only works if\n+'termguicolors' is set.\n+\n+'guicursor' gives an example, but here's a more complicated example\n+which sets different colors in insert-mode and normal-mode:\n+>vim\n+    :set termguicolors\n+    :hi Cursor guifg=green guibg=green\n+    :hi Cursor2 guifg=red guibg=red\n+    :set guicursor=n-v-c:block-Cursor/lCursor,i-ci-ve:ver25-Cursor2/lCursor2,r-cr:hor20,o:hor50\n+<\n+\n+CURSOR STYLE ISN'T RESTORED AFTER EXITING OR SUSPENDING AND RESUMING NVIM ~\n+\n+Terminals do not provide a way to query the cursor style. Use autocommands to\n+manage the cursor style:\n+>vim\n+    au VimEnter,VimResume * set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50\n+      \\,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor\n+      \\,sm:block-blinkwait175-blinkoff150-blinkon175\n+\n+    au VimLeave,VimSuspend * set guicursor=a:block-blinkon0\n+<\n+\n+CURSOR SHAPE DOESN'T CHANGE IN TMUX ~\n+\n+tmux decides that, not Nvim. See |tui-cursor-shape| for a fix.\n+\n+See #3165 https://github.com/neovim/neovim/pull/3165 for discussion.\n+\n+\n+CURSOR FLICKER IN TMUX? ~\n+\n+If cursor `_` appears and disappears very quickly when opening nvim without a\n+document under tmux, and you set |ctermbg| in |EndOfBuffer| and |Normal|, try\n+setting these to `NONE`:\n+>vim\n+    hi EndOfBuffer ctermbg=NONE ctermfg=200 cterm=NONE\n+    hi Normal ctermbg=NONE ctermfg=200 cterm=NONE\n+<\n+\n+HOW TO USE THE WINDOWS CLIPBOARD FROM WSL? ~\n+\n+Try the suggestion given by |clipboard-wsl|:\n+>vim\n+    let g:clipboard = {\n+      \\   'name': 'WslClipboard',\n+      \\   'copy': {\n+      \\      '+': 'clip.exe',\n+      \\      '*': 'clip.exe',\n+      \\    },\n+      \\   'paste': {\n+      \\      '+': 'powershell.exe -c [Console]::Out.Write($(Get-Clipboard -Raw).tostring().replace(\"`r\", \"\"))',\n+      \\      '*': 'powershell.exe -c [Console]::Out.Write($(Get-Clipboard -Raw).tostring().replace(\"`r\", \"\"))',\n+      \\   },\n+      \\   'cache_enabled': 0,\n+      \\ }\n+<\n+\n+WHAT HAPPENED TO --remote AND FRIENDS? ~\n+\n+|--remote| is partly supported. |clientserver|\n+\n+If you require flags from Vim that are missing in Neovim, you can use\n+https://github.com/mhinz/neovim-remote instead.\n+\n+==============================================================================\n+2. Runtime issues                                         *faq-runtime-issues*\n+\n+\n+COPYING TO X11 PRIMARY SELECTION WITH THE MOUSE DOESN'T WORK ~\n+\n+`clipboard=autoselect` is not implemented yet\n+https://github.com/neovim/neovim/issues/2325. You may find this workaround to\n+be useful:\n+>vim\n+    vnoremap <LeftRelease> \"*ygv\n+    vnoremap <2-LeftRelease> \"*ygv\n+<\n+\n+MY CTRL-H MAPPING DOESN'T WORK ~\n+\n+This was fixed in Nvim 0.2. If you are running Nvim 0.1.7 or older,\n+adjust your terminal's \"kbs\" (key_backspace) terminfo entry:\n+>vim\n+    infocmp $TERM | sed 's/kbs=^[hH]/kbs=\\\\177/' > $TERM.ti\n+    tic $TERM.ti\n+<\n+(Feel free to delete the temporary `*.ti` file created after running the above\n+commands).\n+\n+\n+<HOME> OR SOME OTHER \"SPECIAL\" KEY DOESN'T WORK ~\n+\n+Make sure |$TERM| is set correctly.\n+\n+- For screen or tmux, `$TERM` should be `screen-256color` (not `xterm-256color`!)\n+- In other cases if \"256\" does not appear in the string it's probably wrong.\n+  Try `TERM=xterm-256color`.\n+\n+\n+:! AND SYSTEM() DO WEIRD THINGS WITH INTERACTIVE PROCESSES ~\n+\n+Interactive commands are supported by |:terminal| in Nvim. But |:!| and\n+|system()| do not support interactive commands, primarily because Nvim UIs use\n+stdio for msgpack communication, but also for performance, reliability, and\n+consistency across platforms (see\n+https://vimhelp.org/gui_x11.txt.html#gui-pty).\n+\n+See also #1496 https://github.com/neovim/neovim/issues/1496 and #8217\n+https://github.com/neovim/neovim/issues/8217#issuecomment-402152307.\n+\n+\n+PYTHON SUPPORT ISN'T WORKING ~\n+\n+Run |:checkhealth| in Nvim for automatic diagnosis.\n+\n+Other hints:\n+\n+- The python `neovim` module was renamed to `pynvim` (long ago).\n+- If you're using pyenv or virtualenv for the `pynvim` module\n+    https://pypi.python.org/pypi/pynvim/, you must set `g:python3_host_prog` to\n+    the virtualenv's interpreter path.\n+- Read |provider-python|.\n+- Be sure you have the latest version of the `pynvim` Python module: >bash\n+\n+    python -m pip install setuptools\n+    python -m pip install --upgrade pynvim\n+    python3 -m pip install --upgrade pynvim\n+<\n+- Try with `nvim -u NORC` to make sure your config (|init.vim|) isn't causing a\n+    problem. If you get `E117: Unknown function`, that means there's a runtime\n+    issue: |faq-runtime-issues|.\n+\n+\n+:CHECKHEALTH REPORTS E5009: INVALID $VIMRUNTIME ~\n+\n+This means `health#check()` couldn't load, which suggests that |$VIMRUNTIME|\n+or |&runtimepath| is broken.\n+\n+- |$VIMRUNTIME| must point to Nvim's runtime files, not Vim's.\n+- The |$VIMRUNTIME| directory contents should be readable by the current user.\n+- Verify that `:echo &runtimepath` contains the $VIMRUNTIME path.\n+- Check the output of: >vim\n+\n+    :call health#check()\n+    :verbose func health#check\n+<\n+\n+NEOVIM CAN'T FIND ITS RUNTIME ~\n+\n+This is the case if `:help nvim` shows `E149: Sorry, no help for nvim`.\n+\n+Make sure that |$VIM| and |$VIMRUNTIME| point to Nvim's (as opposed to\n+Vim's) runtime by checking `:echo $VIM` and `:echo $VIMRUNTIME`. This should\n+give something like `/usr/share/nvim` resp. `/usr/share/nvim/runtime`.\n+\n+Also make sure that you don't accidentally overwrite your runtimepath\n+(`:set runtimepath?`), which includes the above |$VIMRUNTIME| by default (see\n+'runtimepath').\n+\n+\n+E518: UNKNOWN OPTION: [OPTION] ~\n+\n+Some very old/unnecessary options have been removed from Nvim. See\n+|nvim-removed| for the complete list.\n+\n+\n+NEOVIM IS SLOW ~\n+\n+\n+USE A FAST TERMINAL EMULATOR\n+\n+- kitty https://github.com/kovidgoyal/kitty\n+- alacritty https://github.com/jwilm/alacritty\n+\n+\n+USE AN OPTIMIZED BUILD\n+\n+`:checkhealth nvim` should report one of these \"build types\":\n+>\n+    Build type: RelWithDebInfo\n+    Build type: MinSizeRel\n+    Build type: Release\n+<\n+If it reports `Build type: Debug` and you're building Nvim from source, see\n+https://github.com/neovim/neovim/wiki/Building-Neovim.\n+\n+\n+COLORS AREN'T DISPLAYED CORRECTLY ~\n+\n+Ensure that |$TERM| is set correctly.\n+\n+From a shell, run `TERM=xterm-256color nvim`. If colors are displayed\n+correctly, then export that value of `TERM` in your user profile (usually\n+`~/.profile`):\n+>bash\n+    export TERM=xterm-256color\n+<\n+If you're using `tmux`, instead add this to your `tmux.conf`:\n+>bash\n+    set -g default-terminal \"tmux-256color\"\n+<\n+\n+For GNU `screen`, configure your `.screenrc`\n+<https://wiki.archlinux.org/index.php/GNU_Screen#Use_256_colors>:\n+>\n+    term screen-256color\n+<\n+\n+NOTE: Nvim ignores `t_Co` and other terminal codes.\n+\n+\n+NEOVIM CAN'T READ UTF-8 CHARACTERS ~\n+\n+Run the following from the command line:\n+>bash\n+    locale | grep -E '(LANG|LC_CTYPE|LC_ALL)=(.*\\.)?(UTF|utf)-?8'\n+<\n+If there's no results, then you might not be using a UTF-8 locale. See the\n+following issues:\n+#1601 https://github.com/neovim/neovim/issues/1601\n+#1858 https://github.com/neovim/neovim/issues/1858\n+#2386 https://github.com/neovim/neovim/issues/2386\n+\n+\n+ESC IN TMUX OR GNU SCREEN IS DELAYED ~\n+\n+This is a common problem\n+https://www.google.com/?q=tmux%20vim%20escape%20delay in `tmux` / `screen`\n+(see also tmux/#131\n+https://github.com/tmux/tmux/issues/131#issuecomment-145853211). The\n+corresponding timeout needs to be tweaked to a low value (10-20ms).\n+\n+`.tmux.conf`:\n+>\n+    set -g escape-time 10\n+    # Or for tmux >= 2.6\n+    set -sg escape-time 10\n+<\n+`.screenrc`:\n+>\n+    maptimeout 10\n+<\n+\n+\"WHY DOESN'T THIS HAPPEN IN VIM?\" ~\n+\n+It does happen (try `vim -N -u NONE`), but if you hit a key quickly after\n+ESC_ then Vim interprets the ESC as ESC instead of ALT (META). You won't\n+notice the delay unless you closely observe the cursor. The tradeoff is that\n+Vim won't understand ALT (META) key-chords, so for example `nnoremap <M-a>`\n+won't work. ALT (META) key-chords always work in Nvim. See also `:help\n+xterm-cursor-keys` in Vim.\n+\n+Nvim 0.3 mimics the Vim behavior while still fully supporting ALT mappings. See\n+|i_ALT|.\n+\n+\n+ESC IN GNU SCREEN IS LOST WHEN MOUSE MODE IS ENABLED ~\n+\n+This happens because of a bug in screen https://savannah.gnu.org/bugs/?60196:\n+in mouse mode, screen assumes that `ESC` is part of a mouse sequence and will\n+wait an unlimited time for the rest of the sequence, regardless of\n+`maptimeout`. Until it's fixed in screen, there's no known workaround for\n+this other than double-pressing escape, which causes a single escape to be\n+passed through to Nvim.\n+\n+\n+CALLING INPUTLIST(), ECHOMSG, ... IN FILETYPE PLUGINS AND AUTOCMD DOES NOT WORK ~\n+\n+#10008 https://github.com/neovim/neovim/issues/10008,\n+#10116 https://github.com/neovim/neovim/issues/10116,\n+#12288 https://github.com/neovim/neovim/issues/12288,\n+# vim/vim#4379 https://github.com/vim/vim/issues/4379.\n+This is because Nvim sets `shortmess+=F` by default. Vim behaves the same way\n+with `set shortmes+=F`. There are plans to improve this, but meanwhile as a\n+workaround, use `set shortmess-=F` or use `unsilent` as follows.\n+>vim\n+    unsilent let var = inputlist(['1. item1', '2. item2'])\n+    autocmd BufNewFile * unsilent echomsg 'The autocmd has been fired.'\n+<\n+\n+G:CLIPBOARD SETTINGS ARE NOT USED. ~\n+\n+If the clipboard provider is already loaded, you will need to reload it after\n+configuration. Use the following configuration.\n+>vim\n+    let g:clipboard = { 'name' : ... }\n+    if exists('g:loaded_clipboard_provider')\n+      unlet g:loaded_clipboard_provider\n+      runtime autoload/provider/clipboard.vim\n+    endif\n+<\n+\n+Or, if you want automatic reloading when assigning to |g:clipboard|, set\n+|init.vim| as follows.\n+>vim\n+    function! s:clipboard_changed(...) abort\n+      if exists('g:loaded_clipboard_provider')\n+        unlet g:loaded_clipboard_provider\n+      endif\n+      runtime autoload/provider/clipboard.vim\n+    endfunction\n+\n+    if !exists('s:loaded\")\n+      call dictwatcheradd(g:, 'clipboard', function('s:clipboard_changed'))\n+    endif\n+    let s:loaded = v:true\n+<\n+\n+==============================================================================\n+3. Installation issues                               *faq-installation-issues*\n+\n+\n+GENERATING HELPTAGS FAILED ~\n+\n+If re-installation fails with \"Generating helptags failed\", try removing the\n+previously installed runtime directory (if `CMAKE_INSTALL_PREFIX` is not set\n+during building, the default is `/usr/local/share/nvim`):\n+>bash\n+    rm -r /usr/local/share/nvim\n+<\n+\n+==============================================================================\n+4. Build issues                                             *faq-build-issues*\n+\n+\n+GENERAL BUILD ISSUES ~\n+\n+Run `make distclean && make` to rule out a stale build environment causing the\n+failure.\n+\n+\n+SETTINGS IN LOCAL.MK DON'T TAKE EFFECT ~\n+\n+CMake caches build settings, so you might need to run `rm -r build && make`\n+after modifying `local.mk`.\n+\n+\n+CMAKE ERRORS ~\n+\n+`configure_file Problem configuring file`\n+\n+This is probably a permissions issue, which can happen if you run `make` as the\n+root user, then later run an unprivileged `make`. To fix this, run `rm -rf\n+build` and try again.\n+\n+\n+ANACONDA ERROR ~\n+\n+Error message: `anaconda3/bin/x86_64-conda_cos6-linux-gnu-cc: not found`\n+\n+Solution: `conda install gxx_linux-64` or `conda deactivate`\n+\n+\n+==============================================================================\n+5. Debug                                                           *faq-debug*",
            "html_url": "https://github.com/neovim/neovim/pull/26539#discussion_r1425206255",
            "id": 1425206255,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U8uvv",
            "original_commit_id": "642311510982cb5affd4c791c0a84ae54c849730",
            "original_line": 447,
            "original_position": 447,
            "original_start_line": null,
            "path": "runtime/doc/faq.txt",
            "position": null,
            "pull_request_review_id": 1779403333,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26539",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425206255/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T11:13:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425206255",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26539#discussion_r1425242190"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26539"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425242190"
                }
            },
            "author_association": "MEMBER",
            "body": "https seems to work for this one: https://seriot.ch/projects/parsing_json.html\r\n",
            "commit_id": "68718a8e164bebbf8752cc44c203d9db78e23b40",
            "created_at": "2023-12-13T11:47:58Z",
            "diff_hunk": "@@ -80,6 +80,9 @@ local exclude_invalid_urls = {\n   ['http://wiki.services.openoffice.org/wiki/Dictionaries'] = 'spell.txt',\n   ['http://www.adapower.com'] = 'ft_ada.txt',\n   ['http://www.jclark.com/'] = 'quickfix.txt',\n+  ['http://oldblog.antirez.com/post/redis-and-scripting.html'] = 'faq.txt',\n+  ['http://seriot.ch/parsing_json.php'] = 'faq.txt',",
            "html_url": "https://github.com/neovim/neovim/pull/26539#discussion_r1425242190",
            "id": 1425242190,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U83hO",
            "original_commit_id": "35654208503fe2d2efdfd09234ef243b27a82807",
            "original_line": 84,
            "original_position": 5,
            "original_start_line": null,
            "path": "scripts/gen_help_html.lua",
            "position": null,
            "pull_request_review_id": 1779461068,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26539",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425242190/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T11:47:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425242190",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26539#discussion_r1425243077"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26539"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425243077"
                }
            },
            "author_association": "MEMBER",
            "body": "I didn't write the url checker",
            "commit_id": "68718a8e164bebbf8752cc44c203d9db78e23b40",
            "created_at": "2023-12-13T11:48:51Z",
            "diff_hunk": "@@ -80,6 +80,9 @@ local exclude_invalid_urls = {\n   ['http://wiki.services.openoffice.org/wiki/Dictionaries'] = 'spell.txt',\n   ['http://www.adapower.com'] = 'ft_ada.txt',\n   ['http://www.jclark.com/'] = 'quickfix.txt',\n+  ['http://oldblog.antirez.com/post/redis-and-scripting.html'] = 'faq.txt',\n+  ['http://seriot.ch/parsing_json.php'] = 'faq.txt',",
            "html_url": "https://github.com/neovim/neovim/pull/26539#discussion_r1425243077",
            "id": 1425243077,
            "in_reply_to_id": 1425242190,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U83vF",
            "original_commit_id": "35654208503fe2d2efdfd09234ef243b27a82807",
            "original_line": 84,
            "original_position": 5,
            "original_start_line": null,
            "path": "scripts/gen_help_html.lua",
            "position": null,
            "pull_request_review_id": 1779462552,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26539",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425243077/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T11:49:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425243077",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26539#discussion_r1425244412"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26539"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425244412"
                }
            },
            "author_association": "MEMBER",
            "body": "Probably worth a pass across the docs to switch to https where possible (separate PR).",
            "commit_id": "68718a8e164bebbf8752cc44c203d9db78e23b40",
            "created_at": "2023-12-13T11:50:08Z",
            "diff_hunk": "@@ -80,6 +80,9 @@ local exclude_invalid_urls = {\n   ['http://wiki.services.openoffice.org/wiki/Dictionaries'] = 'spell.txt',\n   ['http://www.adapower.com'] = 'ft_ada.txt',\n   ['http://www.jclark.com/'] = 'quickfix.txt',\n+  ['http://oldblog.antirez.com/post/redis-and-scripting.html'] = 'faq.txt',\n+  ['http://seriot.ch/parsing_json.php'] = 'faq.txt',",
            "html_url": "https://github.com/neovim/neovim/pull/26539#discussion_r1425244412",
            "id": 1425244412,
            "in_reply_to_id": 1425242190,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U84D8",
            "original_commit_id": "35654208503fe2d2efdfd09234ef243b27a82807",
            "original_line": 84,
            "original_position": 5,
            "original_start_line": null,
            "path": "scripts/gen_help_html.lua",
            "position": null,
            "pull_request_review_id": 1779465973,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26539",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425244412/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T11:50:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425244412",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26539#discussion_r1425249297"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26539"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425249297"
                }
            },
            "author_association": "MEMBER",
            "body": "                                      Type |gO| to see the table of contents.\r\n",
            "commit_id": "68718a8e164bebbf8752cc44c203d9db78e23b40",
            "created_at": "2023-12-13T11:54:20Z",
            "diff_hunk": "@@ -0,0 +1,701 @@\n+*faq.txt*\t\t Frequently Asked Questions\n+\n+                            NVIM REFERENCE MANUAL\n+",
            "html_url": "https://github.com/neovim/neovim/pull/26539#discussion_r1425249297",
            "id": 1425249297,
            "line": 4,
            "node_id": "PRRC_kwDOAPphoM5U85QR",
            "original_commit_id": "35654208503fe2d2efdfd09234ef243b27a82807",
            "original_line": 4,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/faq.txt",
            "position": 4,
            "pull_request_review_id": 1779472847,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26539",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425249297/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T11:54:20Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425249297",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26539#discussion_r1425251283"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26539"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425251283"
                }
            },
            "author_association": "MEMBER",
            "body": "I think we can fix the parser so that UPPERCASE lines support punctuation, then the trailing `~` won't be needed. This is fine for now though.",
            "commit_id": "68718a8e164bebbf8752cc44c203d9db78e23b40",
            "created_at": "2023-12-13T11:56:12Z",
            "diff_hunk": "@@ -0,0 +1,701 @@\n+*faq.txt*\t\t Frequently Asked Questions\n+\n+                            NVIM REFERENCE MANUAL\n+\n+==============================================================================\n+1. General Questions                                 *faq* *faq-general-questions*\n+\n+\n+WHERE SHOULD I PUT MY CONFIG (VIMRC)? ~",
            "html_url": "https://github.com/neovim/neovim/pull/26539#discussion_r1425251283",
            "id": 1425251283,
            "line": 14,
            "node_id": "PRRC_kwDOAPphoM5U85vT",
            "original_commit_id": "35654208503fe2d2efdfd09234ef243b27a82807",
            "original_line": 14,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/doc/faq.txt",
            "position": 14,
            "pull_request_review_id": 1779475891,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26539",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425251283/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T11:56:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425251283",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26539#discussion_r1425254198"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26539"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425254198"
                }
            },
            "author_association": "MEMBER",
            "body": "assuming we still want this faq item, we can just link to `|clipboard-wsl|` and don't need to repeat the code sample here.",
            "commit_id": "68718a8e164bebbf8752cc44c203d9db78e23b40",
            "created_at": "2023-12-13T11:58:56Z",
            "diff_hunk": "@@ -0,0 +1,702 @@\n+*faq.txt*\t\t Frequently Asked Questions\n+\n+                            NVIM REFERENCE MANUAL\n+\n+                                  Type |gO| to see the table of contents.\n+\n+==============================================================================\n+1. General Questions                                 *faq* *faq-general-questions*\n+\n+\n+WHERE SHOULD I PUT MY CONFIG (VIMRC)? ~\n+\n+See |config|; you can copy (or symlink) your existing vimrc. |nvim-from-vim|\n+\n+\n+HOW STABLE IS THE DEVELOPMENT (PRE-RELEASE) VERSION? ~\n+\n+The unstable (pre-release)\n+https://github.com/neovim/neovim/releases/tag/nightly version of Nvim\n+(\"HEAD\", i.e. the `master` branch) is used to aggressively stage new features\n+and changes. It's usually stable, but will occasionally break your workflow.\n+We depend on HEAD users to report \"blind spots\" that were not caught by\n+automated tests.\n+\n+Use the stable (release) https://github.com/neovim/neovim/releases/latest\n+version for a more predictable experience.\n+\n+\n+CAN I USE RUBY-BASED VIM PLUGINS (E.G. LUSTYEXPLORER)? ~\n+\n+Yes, starting with Nvim 0.1.5 PR #4980\n+https://github.com/neovim/neovim/pull/4980 the legacy Vim `if_ruby` interface\n+is supported.\n+\n+\n+CAN I USE LUA-BASED VIM PLUGINS (E.G. NEOCOMPLETE)? ~\n+\n+No. Starting with Nvim 0.2 PR #4411\n+https://github.com/neovim/neovim/pull/4411 Lua is built-in, but the legacy\n+Vim `if_lua` interface is not supported.\n+\n+\n+HOW CAN I USE \"TRUE COLOR\" IN THE TERMINAL? ~\n+\n+Truecolor (24bit colors) are enabled by default if a supporting terminal is\n+detected. If your terminal is not detected but you are sure it supports\n+truecolor, add this to your |init.vim|:\n+>vim\n+    set termguicolors\n+<\n+\n+NVIM SHOWS WEIRD SYMBOLS (`�[2 q`) WHEN CHANGING MODES ~\n+\n+This is a bug in your terminal emulator. It happens because Nvim sends\n+cursor-shape termcodes by default, if the terminal appears to be\n+xterm-compatible (`TERM=xterm-256color`).\n+\n+To workaround the issue, you can:\n+\n+- Use a different terminal emulator\n+- Disable 'guicursor' in your Nvim config: >vim\n+\n+    :set guicursor=\n+    \" Workaround some broken plugins which set guicursor indiscriminately.\n+    :autocmd OptionSet guicursor noautocmd set guicursor=\n+<\n+See also |$TERM| for recommended values of `$TERM`.\n+\n+\n+HOW TO CHANGE CURSOR SHAPE IN THE TERMINAL? ~\n+\n+- For Nvim 0.1.7 or older: see the note about `NVIM_TUI_ENABLE_CURSOR_SHAPE` in `man nvim`.\n+- For Nvim 0.2 or newer: cursor styling is controlled by the 'guicursor' option.\n+    - To _disable_ cursor-styling, set 'guicursor' to empty: >vim\n+\n+            :set guicursor=\n+            \" Workaround some broken plugins which set guicursor indiscriminately.\n+            :autocmd OptionSet guicursor noautocmd set guicursor=\n+<\n+    - If you want a non-blinking cursor, use `blinkon0`. See 'guicursor'.\n+    - 'guicursor' is enabled by default, unless Nvim thinks your terminal doesn't\n+        support it. If you're sure that your terminal supports cursor-shaping, set\n+        'guicursor' in your |init.vim|, as described in 'guicursor'.\n+- The Vim terminal options `t_SI` and `t_EI` are ignored, like all other `t_XX` options.\n+- Old versions of libvte (gnome-terminal, roxterm, terminator, ...) do not\n+  support cursor style control codes. #2537\n+  https://github.com/neovim/neovim/issues/2537\n+\n+\n+HOW TO CHANGE CURSOR COLOR IN THE TERMINAL? ~\n+\n+Cursor styling (shape, color, behavior) is controlled by 'guicursor', even in\n+the terminal. Cursor color (as opposed to shape) only works if\n+'termguicolors' is set.\n+\n+'guicursor' gives an example, but here's a more complicated example\n+which sets different colors in insert-mode and normal-mode:\n+>vim\n+    :set termguicolors\n+    :hi Cursor guifg=green guibg=green\n+    :hi Cursor2 guifg=red guibg=red\n+    :set guicursor=n-v-c:block-Cursor/lCursor,i-ci-ve:ver25-Cursor2/lCursor2,r-cr:hor20,o:hor50\n+<\n+\n+CURSOR STYLE ISN'T RESTORED AFTER EXITING OR SUSPENDING AND RESUMING NVIM ~\n+\n+Terminals do not provide a way to query the cursor style. Use autocommands to\n+manage the cursor style:\n+>vim\n+    au VimEnter,VimResume * set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50\n+      \\,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor\n+      \\,sm:block-blinkwait175-blinkoff150-blinkon175\n+\n+    au VimLeave,VimSuspend * set guicursor=a:block-blinkon0\n+<\n+\n+CURSOR SHAPE DOESN'T CHANGE IN TMUX ~\n+\n+tmux decides that, not Nvim. See |tui-cursor-shape| for a fix.\n+\n+See #3165 https://github.com/neovim/neovim/pull/3165 for discussion.\n+\n+\n+CURSOR FLICKER IN TMUX? ~\n+\n+If cursor `_` appears and disappears very quickly when opening nvim without a\n+document under tmux, and you set |ctermbg| in `EndOfBuffer` and `Normal`, try\n+setting these to `NONE`:\n+>vim\n+    hi EndOfBuffer ctermbg=NONE ctermfg=200 cterm=NONE\n+    hi Normal ctermbg=NONE ctermfg=200 cterm=NONE\n+<\n+\n+HOW TO USE THE WINDOWS CLIPBOARD FROM WSL? ~\n+\n+Try the suggestion given by |clipboard-wsl|:\n+>vim\n+    let g:clipboard = {",
            "html_url": "https://github.com/neovim/neovim/pull/26539#discussion_r1425254198",
            "id": 1425254198,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U86c2",
            "original_commit_id": "76cef6c04ea641f23c290d1ca347dde04aff99f0",
            "original_line": 138,
            "original_position": 138,
            "original_start_line": null,
            "path": "runtime/doc/faq.txt",
            "position": null,
            "pull_request_review_id": 1779480381,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26539",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425254198/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T11:58:56Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425254198",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26539#discussion_r1425256715"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26539"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425256715"
                }
            },
            "author_association": "MEMBER",
            "body": "If in doubt, remove. I've done so for obviously outdated content but erred on the side of caution.",
            "commit_id": "68718a8e164bebbf8752cc44c203d9db78e23b40",
            "created_at": "2023-12-13T12:01:23Z",
            "diff_hunk": "@@ -0,0 +1,702 @@\n+*faq.txt*\t\t Frequently Asked Questions\n+\n+                            NVIM REFERENCE MANUAL\n+\n+                                  Type |gO| to see the table of contents.\n+\n+==============================================================================\n+1. General Questions                                 *faq* *faq-general-questions*\n+\n+\n+WHERE SHOULD I PUT MY CONFIG (VIMRC)? ~\n+\n+See |config|; you can copy (or symlink) your existing vimrc. |nvim-from-vim|\n+\n+\n+HOW STABLE IS THE DEVELOPMENT (PRE-RELEASE) VERSION? ~\n+\n+The unstable (pre-release)\n+https://github.com/neovim/neovim/releases/tag/nightly version of Nvim\n+(\"HEAD\", i.e. the `master` branch) is used to aggressively stage new features\n+and changes. It's usually stable, but will occasionally break your workflow.\n+We depend on HEAD users to report \"blind spots\" that were not caught by\n+automated tests.\n+\n+Use the stable (release) https://github.com/neovim/neovim/releases/latest\n+version for a more predictable experience.\n+\n+\n+CAN I USE RUBY-BASED VIM PLUGINS (E.G. LUSTYEXPLORER)? ~\n+\n+Yes, starting with Nvim 0.1.5 PR #4980\n+https://github.com/neovim/neovim/pull/4980 the legacy Vim `if_ruby` interface\n+is supported.\n+\n+\n+CAN I USE LUA-BASED VIM PLUGINS (E.G. NEOCOMPLETE)? ~\n+\n+No. Starting with Nvim 0.2 PR #4411\n+https://github.com/neovim/neovim/pull/4411 Lua is built-in, but the legacy\n+Vim `if_lua` interface is not supported.\n+\n+\n+HOW CAN I USE \"TRUE COLOR\" IN THE TERMINAL? ~\n+\n+Truecolor (24bit colors) are enabled by default if a supporting terminal is\n+detected. If your terminal is not detected but you are sure it supports\n+truecolor, add this to your |init.vim|:\n+>vim\n+    set termguicolors\n+<\n+\n+NVIM SHOWS WEIRD SYMBOLS (`�[2 q`) WHEN CHANGING MODES ~\n+\n+This is a bug in your terminal emulator. It happens because Nvim sends\n+cursor-shape termcodes by default, if the terminal appears to be\n+xterm-compatible (`TERM=xterm-256color`).\n+\n+To workaround the issue, you can:\n+\n+- Use a different terminal emulator\n+- Disable 'guicursor' in your Nvim config: >vim\n+\n+    :set guicursor=\n+    \" Workaround some broken plugins which set guicursor indiscriminately.\n+    :autocmd OptionSet guicursor noautocmd set guicursor=\n+<\n+See also |$TERM| for recommended values of `$TERM`.\n+\n+\n+HOW TO CHANGE CURSOR SHAPE IN THE TERMINAL? ~\n+\n+- For Nvim 0.1.7 or older: see the note about `NVIM_TUI_ENABLE_CURSOR_SHAPE` in `man nvim`.\n+- For Nvim 0.2 or newer: cursor styling is controlled by the 'guicursor' option.\n+    - To _disable_ cursor-styling, set 'guicursor' to empty: >vim\n+\n+            :set guicursor=\n+            \" Workaround some broken plugins which set guicursor indiscriminately.\n+            :autocmd OptionSet guicursor noautocmd set guicursor=\n+<\n+    - If you want a non-blinking cursor, use `blinkon0`. See 'guicursor'.\n+    - 'guicursor' is enabled by default, unless Nvim thinks your terminal doesn't\n+        support it. If you're sure that your terminal supports cursor-shaping, set\n+        'guicursor' in your |init.vim|, as described in 'guicursor'.\n+- The Vim terminal options `t_SI` and `t_EI` are ignored, like all other `t_XX` options.\n+- Old versions of libvte (gnome-terminal, roxterm, terminator, ...) do not\n+  support cursor style control codes. #2537\n+  https://github.com/neovim/neovim/issues/2537\n+\n+\n+HOW TO CHANGE CURSOR COLOR IN THE TERMINAL? ~\n+\n+Cursor styling (shape, color, behavior) is controlled by 'guicursor', even in\n+the terminal. Cursor color (as opposed to shape) only works if\n+'termguicolors' is set.\n+\n+'guicursor' gives an example, but here's a more complicated example\n+which sets different colors in insert-mode and normal-mode:\n+>vim\n+    :set termguicolors\n+    :hi Cursor guifg=green guibg=green\n+    :hi Cursor2 guifg=red guibg=red\n+    :set guicursor=n-v-c:block-Cursor/lCursor,i-ci-ve:ver25-Cursor2/lCursor2,r-cr:hor20,o:hor50\n+<\n+\n+CURSOR STYLE ISN'T RESTORED AFTER EXITING OR SUSPENDING AND RESUMING NVIM ~\n+\n+Terminals do not provide a way to query the cursor style. Use autocommands to\n+manage the cursor style:\n+>vim\n+    au VimEnter,VimResume * set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50\n+      \\,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor\n+      \\,sm:block-blinkwait175-blinkoff150-blinkon175\n+\n+    au VimLeave,VimSuspend * set guicursor=a:block-blinkon0\n+<\n+\n+CURSOR SHAPE DOESN'T CHANGE IN TMUX ~\n+\n+tmux decides that, not Nvim. See |tui-cursor-shape| for a fix.\n+\n+See #3165 https://github.com/neovim/neovim/pull/3165 for discussion.\n+\n+\n+CURSOR FLICKER IN TMUX? ~\n+\n+If cursor `_` appears and disappears very quickly when opening nvim without a\n+document under tmux, and you set |ctermbg| in `EndOfBuffer` and `Normal`, try\n+setting these to `NONE`:\n+>vim\n+    hi EndOfBuffer ctermbg=NONE ctermfg=200 cterm=NONE\n+    hi Normal ctermbg=NONE ctermfg=200 cterm=NONE\n+<\n+\n+HOW TO USE THE WINDOWS CLIPBOARD FROM WSL? ~\n+\n+Try the suggestion given by |clipboard-wsl|:\n+>vim\n+    let g:clipboard = {",
            "html_url": "https://github.com/neovim/neovim/pull/26539#discussion_r1425256715",
            "id": 1425256715,
            "in_reply_to_id": 1425254198,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U87EL",
            "original_commit_id": "76cef6c04ea641f23c290d1ca347dde04aff99f0",
            "original_line": 138,
            "original_position": 138,
            "original_start_line": null,
            "path": "runtime/doc/faq.txt",
            "position": null,
            "pull_request_review_id": 1779484361,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26539",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425256715/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T12:01:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425256715",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26539#discussion_r1425258856"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26539"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425258856"
                }
            },
            "author_association": "MEMBER",
            "body": "I think we should not number things manually. Let `gO` do that, or just live without it.\r\n```suggestion\r\nGeneral Questions                                 *faq* *faq-general-questions*\r\n```",
            "commit_id": "68718a8e164bebbf8752cc44c203d9db78e23b40",
            "created_at": "2023-12-13T12:03:19Z",
            "diff_hunk": "@@ -0,0 +1,684 @@\n+*faq.txt*\t\t Frequently Asked Questions\n+\n+                            NVIM REFERENCE MANUAL\n+\n+                                  Type |gO| to see the table of contents.\n+\n+==============================================================================\n+1. General Questions                                 *faq* *faq-general-questions*",
            "html_url": "https://github.com/neovim/neovim/pull/26539#discussion_r1425258856",
            "id": 1425258856,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U87lo",
            "original_commit_id": "3480fefa30ed0d32206c2229e8b1aa508043cbb0",
            "original_line": 8,
            "original_position": 8,
            "original_start_line": null,
            "path": "runtime/doc/faq.txt",
            "position": null,
            "pull_request_review_id": 1779487681,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26539",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425258856/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T12:03:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425258856",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26539#discussion_r1425262024"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26539"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425262024"
                }
            },
            "author_association": "MEMBER",
            "body": "should probably move this note to `:help E518`, which currently doesn't say anything on the matter.",
            "commit_id": "68718a8e164bebbf8752cc44c203d9db78e23b40",
            "created_at": "2023-12-13T12:06:18Z",
            "diff_hunk": "@@ -0,0 +1,684 @@\n+*faq.txt*\t\t Frequently Asked Questions\n+\n+                            NVIM REFERENCE MANUAL\n+\n+                                  Type |gO| to see the table of contents.\n+\n+==============================================================================\n+1. General Questions                                 *faq* *faq-general-questions*\n+\n+\n+WHERE SHOULD I PUT MY CONFIG (VIMRC)? ~\n+\n+See |config|; you can copy (or symlink) your existing vimrc. |nvim-from-vim|\n+\n+\n+HOW STABLE IS THE DEVELOPMENT (PRE-RELEASE) VERSION? ~\n+\n+The unstable (pre-release)\n+https://github.com/neovim/neovim/releases/tag/nightly version of Nvim\n+(\"HEAD\", i.e. the `master` branch) is used to aggressively stage new features\n+and changes. It's usually stable, but will occasionally break your workflow.\n+We depend on HEAD users to report \"blind spots\" that were not caught by\n+automated tests.\n+\n+Use the stable (release) https://github.com/neovim/neovim/releases/latest\n+version for a more predictable experience.\n+\n+\n+CAN I USE RUBY-BASED VIM PLUGINS (E.G. LUSTYEXPLORER)? ~\n+\n+Yes, starting with Nvim 0.1.5 PR #4980\n+https://github.com/neovim/neovim/pull/4980 the legacy Vim `if_ruby` interface\n+is supported.\n+\n+\n+CAN I USE LUA-BASED VIM PLUGINS (E.G. NEOCOMPLETE)? ~\n+\n+No. Starting with Nvim 0.2 PR #4411\n+https://github.com/neovim/neovim/pull/4411 Lua is built-in, but the legacy\n+Vim `if_lua` interface is not supported.\n+\n+\n+HOW CAN I USE \"TRUE COLOR\" IN THE TERMINAL? ~\n+\n+Truecolor (24bit colors) are enabled by default if a supporting terminal is\n+detected. If your terminal is not detected but you are sure it supports\n+truecolor, add this to your |init.vim|:\n+>vim\n+    set termguicolors\n+<\n+\n+NVIM SHOWS WEIRD SYMBOLS (`�[2 q`) WHEN CHANGING MODES ~\n+\n+This is a bug in your terminal emulator. It happens because Nvim sends\n+cursor-shape termcodes by default, if the terminal appears to be\n+xterm-compatible (`TERM=xterm-256color`).\n+\n+To workaround the issue, you can:\n+\n+- Use a different terminal emulator\n+- Disable 'guicursor' in your Nvim config: >vim\n+\n+    :set guicursor=\n+    \" Workaround some broken plugins which set guicursor indiscriminately.\n+    :autocmd OptionSet guicursor noautocmd set guicursor=\n+<\n+See also |$TERM| for recommended values of `$TERM`.\n+\n+\n+HOW TO CHANGE CURSOR SHAPE IN THE TERMINAL? ~\n+\n+- For Nvim 0.1.7 or older: see the note about `NVIM_TUI_ENABLE_CURSOR_SHAPE` in `man nvim`.\n+- For Nvim 0.2 or newer: cursor styling is controlled by the 'guicursor' option.\n+    - To _disable_ cursor-styling, set 'guicursor' to empty: >vim\n+\n+            :set guicursor=\n+            \" Workaround some broken plugins which set guicursor indiscriminately.\n+            :autocmd OptionSet guicursor noautocmd set guicursor=\n+<\n+    - If you want a non-blinking cursor, use `blinkon0`. See 'guicursor'.\n+    - 'guicursor' is enabled by default, unless Nvim thinks your terminal doesn't\n+        support it. If you're sure that your terminal supports cursor-shaping, set\n+        'guicursor' in your |init.vim|, as described in 'guicursor'.\n+- The Vim terminal options `t_SI` and `t_EI` are ignored, like all other `t_XX` options.\n+- Old versions of libvte (gnome-terminal, roxterm, terminator, ...) do not\n+  support cursor style control codes. #2537\n+  https://github.com/neovim/neovim/issues/2537\n+\n+\n+HOW TO CHANGE CURSOR COLOR IN THE TERMINAL? ~\n+\n+Cursor styling (shape, color, behavior) is controlled by 'guicursor', even in\n+the terminal. Cursor color (as opposed to shape) only works if\n+'termguicolors' is set.\n+\n+'guicursor' gives an example, but here's a more complicated example\n+which sets different colors in insert-mode and normal-mode:\n+>vim\n+    :set termguicolors\n+    :hi Cursor guifg=green guibg=green\n+    :hi Cursor2 guifg=red guibg=red\n+    :set guicursor=n-v-c:block-Cursor/lCursor,i-ci-ve:ver25-Cursor2/lCursor2,r-cr:hor20,o:hor50\n+<\n+\n+CURSOR STYLE ISN'T RESTORED AFTER EXITING OR SUSPENDING AND RESUMING NVIM ~\n+\n+Terminals do not provide a way to query the cursor style. Use autocommands to\n+manage the cursor style:\n+>vim\n+    au VimEnter,VimResume * set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50\n+      \\,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor\n+      \\,sm:block-blinkwait175-blinkoff150-blinkon175\n+\n+    au VimLeave,VimSuspend * set guicursor=a:block-blinkon0\n+<\n+\n+CURSOR SHAPE DOESN'T CHANGE IN TMUX ~\n+\n+tmux decides that, not Nvim. See |tui-cursor-shape| for a fix.\n+\n+See #3165 https://github.com/neovim/neovim/pull/3165 for discussion.\n+\n+\n+CURSOR FLICKER IN TMUX? ~\n+\n+If cursor `_` appears and disappears very quickly when opening nvim without a\n+document under tmux, and you set |ctermbg| in `EndOfBuffer` and `Normal`, try\n+setting these to `NONE`:\n+>vim\n+    hi EndOfBuffer ctermbg=NONE ctermfg=200 cterm=NONE\n+    hi Normal ctermbg=NONE ctermfg=200 cterm=NONE\n+<\n+\n+WHAT HAPPENED TO --remote AND FRIENDS? ~\n+\n+|--remote| is partly supported. |clientserver|\n+\n+If you require flags from Vim that are missing in Neovim, you can use\n+https://github.com/mhinz/neovim-remote instead.\n+\n+==============================================================================\n+2. Runtime issues                                         *faq-runtime-issues*\n+\n+\n+COPYING TO X11 PRIMARY SELECTION WITH THE MOUSE DOESN'T WORK ~\n+\n+`clipboard=autoselect` is not implemented yet\n+https://github.com/neovim/neovim/issues/2325. You may find this workaround to\n+be useful:\n+>vim\n+    vnoremap <LeftRelease> \"*ygv\n+    vnoremap <2-LeftRelease> \"*ygv\n+<\n+\n+MY CTRL-H MAPPING DOESN'T WORK ~\n+\n+This was fixed in Nvim 0.2. If you are running Nvim 0.1.7 or older,\n+adjust your terminal's \"kbs\" (key_backspace) terminfo entry:\n+>vim\n+    infocmp $TERM | sed 's/kbs=^[hH]/kbs=\\\\177/' > $TERM.ti\n+    tic $TERM.ti\n+<\n+(Feel free to delete the temporary `*.ti` file created after running the above\n+commands).\n+\n+\n+<HOME> OR SOME OTHER \"SPECIAL\" KEY DOESN'T WORK ~\n+\n+Make sure |$TERM| is set correctly.\n+\n+- For screen or tmux, `$TERM` should be `screen-256color` (not `xterm-256color`!)\n+- In other cases if \"256\" does not appear in the string it's probably wrong.\n+  Try `TERM=xterm-256color`.\n+\n+\n+:! AND SYSTEM() DO WEIRD THINGS WITH INTERACTIVE PROCESSES ~\n+\n+Interactive commands are supported by |:terminal| in Nvim. But |:!| and\n+|system()| do not support interactive commands, primarily because Nvim UIs use\n+stdio for msgpack communication, but also for performance, reliability, and\n+consistency across platforms (see\n+https://vimhelp.org/gui_x11.txt.html#gui-pty).\n+\n+See also #1496 https://github.com/neovim/neovim/issues/1496 and #8217\n+https://github.com/neovim/neovim/issues/8217#issuecomment-402152307.\n+\n+\n+PYTHON SUPPORT ISN'T WORKING ~\n+\n+Run |:checkhealth| in Nvim for automatic diagnosis.\n+\n+Other hints:\n+\n+- The python `neovim` module was renamed to `pynvim` (long ago).\n+- If you're using pyenv or virtualenv for the `pynvim` module\n+    https://pypi.python.org/pypi/pynvim/, you must set `g:python3_host_prog` to\n+    the virtualenv's interpreter path.\n+- Read |provider-python|.\n+- Be sure you have the latest version of the `pynvim` Python module: >bash\n+\n+    python -m pip install setuptools\n+    python -m pip install --upgrade pynvim\n+    python3 -m pip install --upgrade pynvim\n+<\n+- Try with `nvim -u NORC` to make sure your config (|init.vim|) isn't causing a\n+    problem. If you get `E117: Unknown function`, that means there's a runtime\n+    issue: |faq-runtime-issues|.\n+\n+\n+:CHECKHEALTH REPORTS E5009: INVALID $VIMRUNTIME ~\n+\n+This means `health#check()` couldn't load, which suggests that |$VIMRUNTIME|\n+or 'runtimepath' is broken.\n+\n+- |$VIMRUNTIME| must point to Nvim's runtime files, not Vim's.\n+- The |$VIMRUNTIME| directory contents should be readable by the current user.\n+- Verify that `:echo &runtimepath` contains the $VIMRUNTIME path.\n+- Check the output of: >vim\n+\n+    :call health#check()\n+    :verbose func health#check\n+<\n+\n+NEOVIM CAN'T FIND ITS RUNTIME ~\n+\n+This is the case if `:help nvim` shows `E149: Sorry, no help for nvim`.\n+\n+Make sure that |$VIM| and |$VIMRUNTIME| point to Nvim's (as opposed to\n+Vim's) runtime by checking `:echo $VIM` and `:echo $VIMRUNTIME`. This should\n+give something like `/usr/share/nvim` resp. `/usr/share/nvim/runtime`.\n+\n+Also make sure that you don't accidentally overwrite your runtimepath\n+(`:set runtimepath?`), which includes the above |$VIMRUNTIME| by default (see\n+'runtimepath').\n+\n+\n+E518: UNKNOWN OPTION: [OPTION] ~\n+\n+Some very old/unnecessary options have been removed from Nvim. See\n+|nvim-removed| for the complete list.",
            "html_url": "https://github.com/neovim/neovim/pull/26539#discussion_r1425262024",
            "id": 1425262024,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U88XI",
            "original_commit_id": "3480fefa30ed0d32206c2229e8b1aa508043cbb0",
            "original_line": 240,
            "original_position": 240,
            "original_start_line": null,
            "path": "runtime/doc/faq.txt",
            "position": null,
            "pull_request_review_id": 1779492640,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26539",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425262024/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T12:06:40Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425262024",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26539#discussion_r1425264003"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26539"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425264003"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nNOTE: Nvim ignores `t_Co` and other |t_xx| terminal codes.\r\n```",
            "commit_id": "68718a8e164bebbf8752cc44c203d9db78e23b40",
            "created_at": "2023-12-13T12:08:13Z",
            "diff_hunk": "@@ -0,0 +1,684 @@\n+*faq.txt*\t\t Frequently Asked Questions\n+\n+                            NVIM REFERENCE MANUAL\n+\n+                                  Type |gO| to see the table of contents.\n+\n+==============================================================================\n+1. General Questions                                 *faq* *faq-general-questions*\n+\n+\n+WHERE SHOULD I PUT MY CONFIG (VIMRC)? ~\n+\n+See |config|; you can copy (or symlink) your existing vimrc. |nvim-from-vim|\n+\n+\n+HOW STABLE IS THE DEVELOPMENT (PRE-RELEASE) VERSION? ~\n+\n+The unstable (pre-release)\n+https://github.com/neovim/neovim/releases/tag/nightly version of Nvim\n+(\"HEAD\", i.e. the `master` branch) is used to aggressively stage new features\n+and changes. It's usually stable, but will occasionally break your workflow.\n+We depend on HEAD users to report \"blind spots\" that were not caught by\n+automated tests.\n+\n+Use the stable (release) https://github.com/neovim/neovim/releases/latest\n+version for a more predictable experience.\n+\n+\n+CAN I USE RUBY-BASED VIM PLUGINS (E.G. LUSTYEXPLORER)? ~\n+\n+Yes, starting with Nvim 0.1.5 PR #4980\n+https://github.com/neovim/neovim/pull/4980 the legacy Vim `if_ruby` interface\n+is supported.\n+\n+\n+CAN I USE LUA-BASED VIM PLUGINS (E.G. NEOCOMPLETE)? ~\n+\n+No. Starting with Nvim 0.2 PR #4411\n+https://github.com/neovim/neovim/pull/4411 Lua is built-in, but the legacy\n+Vim `if_lua` interface is not supported.\n+\n+\n+HOW CAN I USE \"TRUE COLOR\" IN THE TERMINAL? ~\n+\n+Truecolor (24bit colors) are enabled by default if a supporting terminal is\n+detected. If your terminal is not detected but you are sure it supports\n+truecolor, add this to your |init.vim|:\n+>vim\n+    set termguicolors\n+<\n+\n+NVIM SHOWS WEIRD SYMBOLS (`�[2 q`) WHEN CHANGING MODES ~\n+\n+This is a bug in your terminal emulator. It happens because Nvim sends\n+cursor-shape termcodes by default, if the terminal appears to be\n+xterm-compatible (`TERM=xterm-256color`).\n+\n+To workaround the issue, you can:\n+\n+- Use a different terminal emulator\n+- Disable 'guicursor' in your Nvim config: >vim\n+\n+    :set guicursor=\n+    \" Workaround some broken plugins which set guicursor indiscriminately.\n+    :autocmd OptionSet guicursor noautocmd set guicursor=\n+<\n+See also |$TERM| for recommended values of `$TERM`.\n+\n+\n+HOW TO CHANGE CURSOR SHAPE IN THE TERMINAL? ~\n+\n+- For Nvim 0.1.7 or older: see the note about `NVIM_TUI_ENABLE_CURSOR_SHAPE` in `man nvim`.\n+- For Nvim 0.2 or newer: cursor styling is controlled by the 'guicursor' option.\n+    - To _disable_ cursor-styling, set 'guicursor' to empty: >vim\n+\n+            :set guicursor=\n+            \" Workaround some broken plugins which set guicursor indiscriminately.\n+            :autocmd OptionSet guicursor noautocmd set guicursor=\n+<\n+    - If you want a non-blinking cursor, use `blinkon0`. See 'guicursor'.\n+    - 'guicursor' is enabled by default, unless Nvim thinks your terminal doesn't\n+        support it. If you're sure that your terminal supports cursor-shaping, set\n+        'guicursor' in your |init.vim|, as described in 'guicursor'.\n+- The Vim terminal options `t_SI` and `t_EI` are ignored, like all other `t_XX` options.\n+- Old versions of libvte (gnome-terminal, roxterm, terminator, ...) do not\n+  support cursor style control codes. #2537\n+  https://github.com/neovim/neovim/issues/2537\n+\n+\n+HOW TO CHANGE CURSOR COLOR IN THE TERMINAL? ~\n+\n+Cursor styling (shape, color, behavior) is controlled by 'guicursor', even in\n+the terminal. Cursor color (as opposed to shape) only works if\n+'termguicolors' is set.\n+\n+'guicursor' gives an example, but here's a more complicated example\n+which sets different colors in insert-mode and normal-mode:\n+>vim\n+    :set termguicolors\n+    :hi Cursor guifg=green guibg=green\n+    :hi Cursor2 guifg=red guibg=red\n+    :set guicursor=n-v-c:block-Cursor/lCursor,i-ci-ve:ver25-Cursor2/lCursor2,r-cr:hor20,o:hor50\n+<\n+\n+CURSOR STYLE ISN'T RESTORED AFTER EXITING OR SUSPENDING AND RESUMING NVIM ~\n+\n+Terminals do not provide a way to query the cursor style. Use autocommands to\n+manage the cursor style:\n+>vim\n+    au VimEnter,VimResume * set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50\n+      \\,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor\n+      \\,sm:block-blinkwait175-blinkoff150-blinkon175\n+\n+    au VimLeave,VimSuspend * set guicursor=a:block-blinkon0\n+<\n+\n+CURSOR SHAPE DOESN'T CHANGE IN TMUX ~\n+\n+tmux decides that, not Nvim. See |tui-cursor-shape| for a fix.\n+\n+See #3165 https://github.com/neovim/neovim/pull/3165 for discussion.\n+\n+\n+CURSOR FLICKER IN TMUX? ~\n+\n+If cursor `_` appears and disappears very quickly when opening nvim without a\n+document under tmux, and you set |ctermbg| in `EndOfBuffer` and `Normal`, try\n+setting these to `NONE`:\n+>vim\n+    hi EndOfBuffer ctermbg=NONE ctermfg=200 cterm=NONE\n+    hi Normal ctermbg=NONE ctermfg=200 cterm=NONE\n+<\n+\n+WHAT HAPPENED TO --remote AND FRIENDS? ~\n+\n+|--remote| is partly supported. |clientserver|\n+\n+If you require flags from Vim that are missing in Neovim, you can use\n+https://github.com/mhinz/neovim-remote instead.\n+\n+==============================================================================\n+2. Runtime issues                                         *faq-runtime-issues*\n+\n+\n+COPYING TO X11 PRIMARY SELECTION WITH THE MOUSE DOESN'T WORK ~\n+\n+`clipboard=autoselect` is not implemented yet\n+https://github.com/neovim/neovim/issues/2325. You may find this workaround to\n+be useful:\n+>vim\n+    vnoremap <LeftRelease> \"*ygv\n+    vnoremap <2-LeftRelease> \"*ygv\n+<\n+\n+MY CTRL-H MAPPING DOESN'T WORK ~\n+\n+This was fixed in Nvim 0.2. If you are running Nvim 0.1.7 or older,\n+adjust your terminal's \"kbs\" (key_backspace) terminfo entry:\n+>vim\n+    infocmp $TERM | sed 's/kbs=^[hH]/kbs=\\\\177/' > $TERM.ti\n+    tic $TERM.ti\n+<\n+(Feel free to delete the temporary `*.ti` file created after running the above\n+commands).\n+\n+\n+<HOME> OR SOME OTHER \"SPECIAL\" KEY DOESN'T WORK ~\n+\n+Make sure |$TERM| is set correctly.\n+\n+- For screen or tmux, `$TERM` should be `screen-256color` (not `xterm-256color`!)\n+- In other cases if \"256\" does not appear in the string it's probably wrong.\n+  Try `TERM=xterm-256color`.\n+\n+\n+:! AND SYSTEM() DO WEIRD THINGS WITH INTERACTIVE PROCESSES ~\n+\n+Interactive commands are supported by |:terminal| in Nvim. But |:!| and\n+|system()| do not support interactive commands, primarily because Nvim UIs use\n+stdio for msgpack communication, but also for performance, reliability, and\n+consistency across platforms (see\n+https://vimhelp.org/gui_x11.txt.html#gui-pty).\n+\n+See also #1496 https://github.com/neovim/neovim/issues/1496 and #8217\n+https://github.com/neovim/neovim/issues/8217#issuecomment-402152307.\n+\n+\n+PYTHON SUPPORT ISN'T WORKING ~\n+\n+Run |:checkhealth| in Nvim for automatic diagnosis.\n+\n+Other hints:\n+\n+- The python `neovim` module was renamed to `pynvim` (long ago).\n+- If you're using pyenv or virtualenv for the `pynvim` module\n+    https://pypi.python.org/pypi/pynvim/, you must set `g:python3_host_prog` to\n+    the virtualenv's interpreter path.\n+- Read |provider-python|.\n+- Be sure you have the latest version of the `pynvim` Python module: >bash\n+\n+    python -m pip install setuptools\n+    python -m pip install --upgrade pynvim\n+    python3 -m pip install --upgrade pynvim\n+<\n+- Try with `nvim -u NORC` to make sure your config (|init.vim|) isn't causing a\n+    problem. If you get `E117: Unknown function`, that means there's a runtime\n+    issue: |faq-runtime-issues|.\n+\n+\n+:CHECKHEALTH REPORTS E5009: INVALID $VIMRUNTIME ~\n+\n+This means `health#check()` couldn't load, which suggests that |$VIMRUNTIME|\n+or 'runtimepath' is broken.\n+\n+- |$VIMRUNTIME| must point to Nvim's runtime files, not Vim's.\n+- The |$VIMRUNTIME| directory contents should be readable by the current user.\n+- Verify that `:echo &runtimepath` contains the $VIMRUNTIME path.\n+- Check the output of: >vim\n+\n+    :call health#check()\n+    :verbose func health#check\n+<\n+\n+NEOVIM CAN'T FIND ITS RUNTIME ~\n+\n+This is the case if `:help nvim` shows `E149: Sorry, no help for nvim`.\n+\n+Make sure that |$VIM| and |$VIMRUNTIME| point to Nvim's (as opposed to\n+Vim's) runtime by checking `:echo $VIM` and `:echo $VIMRUNTIME`. This should\n+give something like `/usr/share/nvim` resp. `/usr/share/nvim/runtime`.\n+\n+Also make sure that you don't accidentally overwrite your runtimepath\n+(`:set runtimepath?`), which includes the above |$VIMRUNTIME| by default (see\n+'runtimepath').\n+\n+\n+E518: UNKNOWN OPTION: [OPTION] ~\n+\n+Some very old/unnecessary options have been removed from Nvim. See\n+|nvim-removed| for the complete list.\n+\n+\n+NEOVIM IS SLOW ~\n+\n+\n+Use a fast terminal emulator:\n+\n+- kitty https://github.com/kovidgoyal/kitty\n+- alacritty https://github.com/jwilm/alacritty\n+\n+\n+Use an optimized build:\n+\n+`:checkhealth nvim` should report one of these \"build types\":\n+>\n+    Build type: RelWithDebInfo\n+    Build type: MinSizeRel\n+    Build type: Release\n+<\n+If it reports `Build type: Debug` and you're building Nvim from source, see\n+https://github.com/neovim/neovim/wiki/Building-Neovim.\n+\n+\n+COLORS AREN'T DISPLAYED CORRECTLY ~\n+\n+Ensure that |$TERM| is set correctly.\n+\n+From a shell, run `TERM=xterm-256color nvim`. If colors are displayed\n+correctly, then export that value of `TERM` in your user profile (usually\n+`~/.profile`):\n+>bash\n+    export TERM=xterm-256color\n+<\n+If you're using `tmux`, instead add this to your `tmux.conf`:\n+>bash\n+    set -g default-terminal \"tmux-256color\"\n+<\n+\n+For GNU `screen`, configure your `.screenrc`\n+<https://wiki.archlinux.org/index.php/GNU_Screen#Use_256_colors>:\n+>\n+    term screen-256color\n+<\n+\n+NOTE: Nvim ignores `t_Co` and other terminal codes.",
            "html_url": "https://github.com/neovim/neovim/pull/26539#discussion_r1425264003",
            "id": 1425264003,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U882D",
            "original_commit_id": "3480fefa30ed0d32206c2229e8b1aa508043cbb0",
            "original_line": 285,
            "original_position": 285,
            "original_start_line": null,
            "path": "runtime/doc/faq.txt",
            "position": null,
            "pull_request_review_id": 1779495911,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26539",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425264003/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T12:08:14Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425264003",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26539#discussion_r1425266381"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26539"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425266381"
                }
            },
            "author_association": "MEMBER",
            "body": "this could go under \"build issues\"",
            "commit_id": "68718a8e164bebbf8752cc44c203d9db78e23b40",
            "created_at": "2023-12-13T12:10:30Z",
            "diff_hunk": "@@ -0,0 +1,684 @@\n+*faq.txt*\t\t Frequently Asked Questions\n+\n+                            NVIM REFERENCE MANUAL\n+\n+                                  Type |gO| to see the table of contents.\n+\n+==============================================================================\n+1. General Questions                                 *faq* *faq-general-questions*\n+\n+\n+WHERE SHOULD I PUT MY CONFIG (VIMRC)? ~\n+\n+See |config|; you can copy (or symlink) your existing vimrc. |nvim-from-vim|\n+\n+\n+HOW STABLE IS THE DEVELOPMENT (PRE-RELEASE) VERSION? ~\n+\n+The unstable (pre-release)\n+https://github.com/neovim/neovim/releases/tag/nightly version of Nvim\n+(\"HEAD\", i.e. the `master` branch) is used to aggressively stage new features\n+and changes. It's usually stable, but will occasionally break your workflow.\n+We depend on HEAD users to report \"blind spots\" that were not caught by\n+automated tests.\n+\n+Use the stable (release) https://github.com/neovim/neovim/releases/latest\n+version for a more predictable experience.\n+\n+\n+CAN I USE RUBY-BASED VIM PLUGINS (E.G. LUSTYEXPLORER)? ~\n+\n+Yes, starting with Nvim 0.1.5 PR #4980\n+https://github.com/neovim/neovim/pull/4980 the legacy Vim `if_ruby` interface\n+is supported.\n+\n+\n+CAN I USE LUA-BASED VIM PLUGINS (E.G. NEOCOMPLETE)? ~\n+\n+No. Starting with Nvim 0.2 PR #4411\n+https://github.com/neovim/neovim/pull/4411 Lua is built-in, but the legacy\n+Vim `if_lua` interface is not supported.\n+\n+\n+HOW CAN I USE \"TRUE COLOR\" IN THE TERMINAL? ~\n+\n+Truecolor (24bit colors) are enabled by default if a supporting terminal is\n+detected. If your terminal is not detected but you are sure it supports\n+truecolor, add this to your |init.vim|:\n+>vim\n+    set termguicolors\n+<\n+\n+NVIM SHOWS WEIRD SYMBOLS (`�[2 q`) WHEN CHANGING MODES ~\n+\n+This is a bug in your terminal emulator. It happens because Nvim sends\n+cursor-shape termcodes by default, if the terminal appears to be\n+xterm-compatible (`TERM=xterm-256color`).\n+\n+To workaround the issue, you can:\n+\n+- Use a different terminal emulator\n+- Disable 'guicursor' in your Nvim config: >vim\n+\n+    :set guicursor=\n+    \" Workaround some broken plugins which set guicursor indiscriminately.\n+    :autocmd OptionSet guicursor noautocmd set guicursor=\n+<\n+See also |$TERM| for recommended values of `$TERM`.\n+\n+\n+HOW TO CHANGE CURSOR SHAPE IN THE TERMINAL? ~\n+\n+- For Nvim 0.1.7 or older: see the note about `NVIM_TUI_ENABLE_CURSOR_SHAPE` in `man nvim`.\n+- For Nvim 0.2 or newer: cursor styling is controlled by the 'guicursor' option.\n+    - To _disable_ cursor-styling, set 'guicursor' to empty: >vim\n+\n+            :set guicursor=\n+            \" Workaround some broken plugins which set guicursor indiscriminately.\n+            :autocmd OptionSet guicursor noautocmd set guicursor=\n+<\n+    - If you want a non-blinking cursor, use `blinkon0`. See 'guicursor'.\n+    - 'guicursor' is enabled by default, unless Nvim thinks your terminal doesn't\n+        support it. If you're sure that your terminal supports cursor-shaping, set\n+        'guicursor' in your |init.vim|, as described in 'guicursor'.\n+- The Vim terminal options `t_SI` and `t_EI` are ignored, like all other `t_XX` options.\n+- Old versions of libvte (gnome-terminal, roxterm, terminator, ...) do not\n+  support cursor style control codes. #2537\n+  https://github.com/neovim/neovim/issues/2537\n+\n+\n+HOW TO CHANGE CURSOR COLOR IN THE TERMINAL? ~\n+\n+Cursor styling (shape, color, behavior) is controlled by 'guicursor', even in\n+the terminal. Cursor color (as opposed to shape) only works if\n+'termguicolors' is set.\n+\n+'guicursor' gives an example, but here's a more complicated example\n+which sets different colors in insert-mode and normal-mode:\n+>vim\n+    :set termguicolors\n+    :hi Cursor guifg=green guibg=green\n+    :hi Cursor2 guifg=red guibg=red\n+    :set guicursor=n-v-c:block-Cursor/lCursor,i-ci-ve:ver25-Cursor2/lCursor2,r-cr:hor20,o:hor50\n+<\n+\n+CURSOR STYLE ISN'T RESTORED AFTER EXITING OR SUSPENDING AND RESUMING NVIM ~\n+\n+Terminals do not provide a way to query the cursor style. Use autocommands to\n+manage the cursor style:\n+>vim\n+    au VimEnter,VimResume * set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50\n+      \\,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor\n+      \\,sm:block-blinkwait175-blinkoff150-blinkon175\n+\n+    au VimLeave,VimSuspend * set guicursor=a:block-blinkon0\n+<\n+\n+CURSOR SHAPE DOESN'T CHANGE IN TMUX ~\n+\n+tmux decides that, not Nvim. See |tui-cursor-shape| for a fix.\n+\n+See #3165 https://github.com/neovim/neovim/pull/3165 for discussion.\n+\n+\n+CURSOR FLICKER IN TMUX? ~\n+\n+If cursor `_` appears and disappears very quickly when opening nvim without a\n+document under tmux, and you set |ctermbg| in `EndOfBuffer` and `Normal`, try\n+setting these to `NONE`:\n+>vim\n+    hi EndOfBuffer ctermbg=NONE ctermfg=200 cterm=NONE\n+    hi Normal ctermbg=NONE ctermfg=200 cterm=NONE\n+<\n+\n+WHAT HAPPENED TO --remote AND FRIENDS? ~\n+\n+|--remote| is partly supported. |clientserver|\n+\n+If you require flags from Vim that are missing in Neovim, you can use\n+https://github.com/mhinz/neovim-remote instead.\n+\n+==============================================================================\n+2. Runtime issues                                         *faq-runtime-issues*\n+\n+\n+COPYING TO X11 PRIMARY SELECTION WITH THE MOUSE DOESN'T WORK ~\n+\n+`clipboard=autoselect` is not implemented yet\n+https://github.com/neovim/neovim/issues/2325. You may find this workaround to\n+be useful:\n+>vim\n+    vnoremap <LeftRelease> \"*ygv\n+    vnoremap <2-LeftRelease> \"*ygv\n+<\n+\n+MY CTRL-H MAPPING DOESN'T WORK ~\n+\n+This was fixed in Nvim 0.2. If you are running Nvim 0.1.7 or older,\n+adjust your terminal's \"kbs\" (key_backspace) terminfo entry:\n+>vim\n+    infocmp $TERM | sed 's/kbs=^[hH]/kbs=\\\\177/' > $TERM.ti\n+    tic $TERM.ti\n+<\n+(Feel free to delete the temporary `*.ti` file created after running the above\n+commands).\n+\n+\n+<HOME> OR SOME OTHER \"SPECIAL\" KEY DOESN'T WORK ~\n+\n+Make sure |$TERM| is set correctly.\n+\n+- For screen or tmux, `$TERM` should be `screen-256color` (not `xterm-256color`!)\n+- In other cases if \"256\" does not appear in the string it's probably wrong.\n+  Try `TERM=xterm-256color`.\n+\n+\n+:! AND SYSTEM() DO WEIRD THINGS WITH INTERACTIVE PROCESSES ~\n+\n+Interactive commands are supported by |:terminal| in Nvim. But |:!| and\n+|system()| do not support interactive commands, primarily because Nvim UIs use\n+stdio for msgpack communication, but also for performance, reliability, and\n+consistency across platforms (see\n+https://vimhelp.org/gui_x11.txt.html#gui-pty).\n+\n+See also #1496 https://github.com/neovim/neovim/issues/1496 and #8217\n+https://github.com/neovim/neovim/issues/8217#issuecomment-402152307.\n+\n+\n+PYTHON SUPPORT ISN'T WORKING ~\n+\n+Run |:checkhealth| in Nvim for automatic diagnosis.\n+\n+Other hints:\n+\n+- The python `neovim` module was renamed to `pynvim` (long ago).\n+- If you're using pyenv or virtualenv for the `pynvim` module\n+    https://pypi.python.org/pypi/pynvim/, you must set `g:python3_host_prog` to\n+    the virtualenv's interpreter path.\n+- Read |provider-python|.\n+- Be sure you have the latest version of the `pynvim` Python module: >bash\n+\n+    python -m pip install setuptools\n+    python -m pip install --upgrade pynvim\n+    python3 -m pip install --upgrade pynvim\n+<\n+- Try with `nvim -u NORC` to make sure your config (|init.vim|) isn't causing a\n+    problem. If you get `E117: Unknown function`, that means there's a runtime\n+    issue: |faq-runtime-issues|.\n+\n+\n+:CHECKHEALTH REPORTS E5009: INVALID $VIMRUNTIME ~\n+\n+This means `health#check()` couldn't load, which suggests that |$VIMRUNTIME|\n+or 'runtimepath' is broken.\n+\n+- |$VIMRUNTIME| must point to Nvim's runtime files, not Vim's.\n+- The |$VIMRUNTIME| directory contents should be readable by the current user.\n+- Verify that `:echo &runtimepath` contains the $VIMRUNTIME path.\n+- Check the output of: >vim\n+\n+    :call health#check()\n+    :verbose func health#check\n+<\n+\n+NEOVIM CAN'T FIND ITS RUNTIME ~\n+\n+This is the case if `:help nvim` shows `E149: Sorry, no help for nvim`.\n+\n+Make sure that |$VIM| and |$VIMRUNTIME| point to Nvim's (as opposed to\n+Vim's) runtime by checking `:echo $VIM` and `:echo $VIMRUNTIME`. This should\n+give something like `/usr/share/nvim` resp. `/usr/share/nvim/runtime`.\n+\n+Also make sure that you don't accidentally overwrite your runtimepath\n+(`:set runtimepath?`), which includes the above |$VIMRUNTIME| by default (see\n+'runtimepath').\n+\n+\n+E518: UNKNOWN OPTION: [OPTION] ~\n+\n+Some very old/unnecessary options have been removed from Nvim. See\n+|nvim-removed| for the complete list.\n+\n+\n+NEOVIM IS SLOW ~\n+\n+\n+Use a fast terminal emulator:\n+\n+- kitty https://github.com/kovidgoyal/kitty\n+- alacritty https://github.com/jwilm/alacritty\n+\n+\n+Use an optimized build:\n+\n+`:checkhealth nvim` should report one of these \"build types\":\n+>\n+    Build type: RelWithDebInfo\n+    Build type: MinSizeRel\n+    Build type: Release\n+<\n+If it reports `Build type: Debug` and you're building Nvim from source, see\n+https://github.com/neovim/neovim/wiki/Building-Neovim.\n+\n+\n+COLORS AREN'T DISPLAYED CORRECTLY ~\n+\n+Ensure that |$TERM| is set correctly.\n+\n+From a shell, run `TERM=xterm-256color nvim`. If colors are displayed\n+correctly, then export that value of `TERM` in your user profile (usually\n+`~/.profile`):\n+>bash\n+    export TERM=xterm-256color\n+<\n+If you're using `tmux`, instead add this to your `tmux.conf`:\n+>bash\n+    set -g default-terminal \"tmux-256color\"\n+<\n+\n+For GNU `screen`, configure your `.screenrc`\n+<https://wiki.archlinux.org/index.php/GNU_Screen#Use_256_colors>:\n+>\n+    term screen-256color\n+<\n+\n+NOTE: Nvim ignores `t_Co` and other terminal codes.\n+\n+\n+NEOVIM CAN'T READ UTF-8 CHARACTERS ~\n+\n+Run the following from the command line:\n+>bash\n+    locale | grep -E '(LANG|LC_CTYPE|LC_ALL)=(.*\\.)?(UTF|utf)-?8'\n+<\n+If there's no results, then you might not be using a UTF-8 locale. See the\n+following issues:\n+#1601 https://github.com/neovim/neovim/issues/1601\n+#1858 https://github.com/neovim/neovim/issues/1858\n+#2386 https://github.com/neovim/neovim/issues/2386\n+\n+\n+ESC IN TMUX OR GNU SCREEN IS DELAYED ~\n+\n+This is a common problem\n+https://www.google.com/?q=tmux%20vim%20escape%20delay in `tmux` / `screen`\n+(see also tmux/#131\n+https://github.com/tmux/tmux/issues/131#issuecomment-145853211). The\n+corresponding timeout needs to be tweaked to a low value (10-20ms).\n+\n+`.tmux.conf`:\n+>\n+    set -g escape-time 10\n+    # Or for tmux >= 2.6\n+    set -sg escape-time 10\n+<\n+`.screenrc`:\n+>\n+    maptimeout 10\n+<\n+\n+\"WHY DOESN'T THIS HAPPEN IN VIM?\"\n+\n+It does happen (try `vim -N -u NONE`), but if you hit a key quickly after\n+ESC_ then Vim interprets the ESC as ESC instead of ALT (META). You won't\n+notice the delay unless you closely observe the cursor. The tradeoff is that\n+Vim won't understand ALT (META) key-chords, so for example `nnoremap <M-a>`\n+won't work. ALT (META) key-chords always work in Nvim. See also `:help\n+xterm-cursor-keys` in Vim.\n+\n+Nvim 0.3 mimics the Vim behavior while still fully supporting ALT mappings. See\n+|i_ALT|.\n+\n+\n+ESC IN GNU SCREEN IS LOST WHEN MOUSE MODE IS ENABLED ~\n+\n+This happens because of a bug in screen https://savannah.gnu.org/bugs/?60196:\n+in mouse mode, screen assumes that `ESC` is part of a mouse sequence and will\n+wait an unlimited time for the rest of the sequence, regardless of\n+`maptimeout`. Until it's fixed in screen, there's no known workaround for\n+this other than double-pressing escape, which causes a single escape to be\n+passed through to Nvim.\n+\n+\n+CALLING INPUTLIST(), ECHOMSG, ... IN FILETYPE PLUGINS AND AUTOCMD DOES NOT WORK ~\n+\n+#10008 https://github.com/neovim/neovim/issues/10008,\n+#10116 https://github.com/neovim/neovim/issues/10116,\n+#12288 https://github.com/neovim/neovim/issues/12288,\n+# vim/vim#4379 https://github.com/vim/vim/issues/4379.\n+This is because Nvim sets `shortmess+=F` by default. Vim behaves the same way\n+with `set shortmes+=F`. There are plans to improve this, but meanwhile as a\n+workaround, use `set shortmess-=F` or use `unsilent` as follows.\n+>vim\n+    unsilent let var = inputlist(['1. item1', '2. item2'])\n+    autocmd BufNewFile * unsilent echomsg 'The autocmd has been fired.'\n+<\n+\n+G:CLIPBOARD SETTINGS ARE NOT USED. ~\n+\n+If the clipboard provider is already loaded, you will need to reload it after\n+configuration. Use the following configuration.\n+>vim\n+    let g:clipboard = { 'name' : ... }\n+    if exists('g:loaded_clipboard_provider')\n+      unlet g:loaded_clipboard_provider\n+      runtime autoload/provider/clipboard.vim\n+    endif\n+<\n+\n+Or, if you want automatic reloading when assigning to |g:clipboard|, set\n+|init.vim| as follows.\n+>vim\n+    function! s:clipboard_changed(...) abort\n+      if exists('g:loaded_clipboard_provider')\n+        unlet g:loaded_clipboard_provider\n+      endif\n+      runtime autoload/provider/clipboard.vim\n+    endfunction\n+\n+    if !exists('s:loaded\")\n+      call dictwatcheradd(g:, 'clipboard', function('s:clipboard_changed'))\n+    endif\n+    let s:loaded = v:true\n+<\n+\n+==============================================================================\n+3. Installation issues                               *faq-installation-issues*\n+\n+\n+GENERATING HELPTAGS FAILED ~",
            "html_url": "https://github.com/neovim/neovim/pull/26539#discussion_r1425266381",
            "id": 1425266381,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U89bN",
            "original_commit_id": "3480fefa30ed0d32206c2229e8b1aa508043cbb0",
            "original_line": 389,
            "original_position": 389,
            "original_start_line": null,
            "path": "runtime/doc/faq.txt",
            "position": null,
            "pull_request_review_id": 1779499816,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26539",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425266381/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T12:10:31Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425266381",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26539#discussion_r1425266917"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26539"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425266917"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n1. General Questions                                 *faq* *faq-general*\r\n```",
            "commit_id": "68718a8e164bebbf8752cc44c203d9db78e23b40",
            "created_at": "2023-12-13T12:11:03Z",
            "diff_hunk": "@@ -0,0 +1,684 @@\n+*faq.txt*\t\t Frequently Asked Questions\n+\n+                            NVIM REFERENCE MANUAL\n+\n+                                  Type |gO| to see the table of contents.\n+\n+==============================================================================\n+1. General Questions                                 *faq* *faq-general-questions*",
            "html_url": "https://github.com/neovim/neovim/pull/26539#discussion_r1425266917",
            "id": 1425266917,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U89jl",
            "original_commit_id": "3480fefa30ed0d32206c2229e8b1aa508043cbb0",
            "original_line": 8,
            "original_position": 8,
            "original_start_line": null,
            "path": "runtime/doc/faq.txt",
            "position": null,
            "pull_request_review_id": 1779500651,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26539",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425266917/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T12:11:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425266917",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26539#discussion_r1425267236"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26539"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425267236"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n2. Runtime issues                                         *faq-runtime*\r\n```",
            "commit_id": "68718a8e164bebbf8752cc44c203d9db78e23b40",
            "created_at": "2023-12-13T12:11:19Z",
            "diff_hunk": "@@ -0,0 +1,684 @@\n+*faq.txt*\t\t Frequently Asked Questions\n+\n+                            NVIM REFERENCE MANUAL\n+\n+                                  Type |gO| to see the table of contents.\n+\n+==============================================================================\n+1. General Questions                                 *faq* *faq-general-questions*\n+\n+\n+WHERE SHOULD I PUT MY CONFIG (VIMRC)? ~\n+\n+See |config|; you can copy (or symlink) your existing vimrc. |nvim-from-vim|\n+\n+\n+HOW STABLE IS THE DEVELOPMENT (PRE-RELEASE) VERSION? ~\n+\n+The unstable (pre-release)\n+https://github.com/neovim/neovim/releases/tag/nightly version of Nvim\n+(\"HEAD\", i.e. the `master` branch) is used to aggressively stage new features\n+and changes. It's usually stable, but will occasionally break your workflow.\n+We depend on HEAD users to report \"blind spots\" that were not caught by\n+automated tests.\n+\n+Use the stable (release) https://github.com/neovim/neovim/releases/latest\n+version for a more predictable experience.\n+\n+\n+CAN I USE RUBY-BASED VIM PLUGINS (E.G. LUSTYEXPLORER)? ~\n+\n+Yes, starting with Nvim 0.1.5 PR #4980\n+https://github.com/neovim/neovim/pull/4980 the legacy Vim `if_ruby` interface\n+is supported.\n+\n+\n+CAN I USE LUA-BASED VIM PLUGINS (E.G. NEOCOMPLETE)? ~\n+\n+No. Starting with Nvim 0.2 PR #4411\n+https://github.com/neovim/neovim/pull/4411 Lua is built-in, but the legacy\n+Vim `if_lua` interface is not supported.\n+\n+\n+HOW CAN I USE \"TRUE COLOR\" IN THE TERMINAL? ~\n+\n+Truecolor (24bit colors) are enabled by default if a supporting terminal is\n+detected. If your terminal is not detected but you are sure it supports\n+truecolor, add this to your |init.vim|:\n+>vim\n+    set termguicolors\n+<\n+\n+NVIM SHOWS WEIRD SYMBOLS (`�[2 q`) WHEN CHANGING MODES ~\n+\n+This is a bug in your terminal emulator. It happens because Nvim sends\n+cursor-shape termcodes by default, if the terminal appears to be\n+xterm-compatible (`TERM=xterm-256color`).\n+\n+To workaround the issue, you can:\n+\n+- Use a different terminal emulator\n+- Disable 'guicursor' in your Nvim config: >vim\n+\n+    :set guicursor=\n+    \" Workaround some broken plugins which set guicursor indiscriminately.\n+    :autocmd OptionSet guicursor noautocmd set guicursor=\n+<\n+See also |$TERM| for recommended values of `$TERM`.\n+\n+\n+HOW TO CHANGE CURSOR SHAPE IN THE TERMINAL? ~\n+\n+- For Nvim 0.1.7 or older: see the note about `NVIM_TUI_ENABLE_CURSOR_SHAPE` in `man nvim`.\n+- For Nvim 0.2 or newer: cursor styling is controlled by the 'guicursor' option.\n+    - To _disable_ cursor-styling, set 'guicursor' to empty: >vim\n+\n+            :set guicursor=\n+            \" Workaround some broken plugins which set guicursor indiscriminately.\n+            :autocmd OptionSet guicursor noautocmd set guicursor=\n+<\n+    - If you want a non-blinking cursor, use `blinkon0`. See 'guicursor'.\n+    - 'guicursor' is enabled by default, unless Nvim thinks your terminal doesn't\n+        support it. If you're sure that your terminal supports cursor-shaping, set\n+        'guicursor' in your |init.vim|, as described in 'guicursor'.\n+- The Vim terminal options `t_SI` and `t_EI` are ignored, like all other `t_XX` options.\n+- Old versions of libvte (gnome-terminal, roxterm, terminator, ...) do not\n+  support cursor style control codes. #2537\n+  https://github.com/neovim/neovim/issues/2537\n+\n+\n+HOW TO CHANGE CURSOR COLOR IN THE TERMINAL? ~\n+\n+Cursor styling (shape, color, behavior) is controlled by 'guicursor', even in\n+the terminal. Cursor color (as opposed to shape) only works if\n+'termguicolors' is set.\n+\n+'guicursor' gives an example, but here's a more complicated example\n+which sets different colors in insert-mode and normal-mode:\n+>vim\n+    :set termguicolors\n+    :hi Cursor guifg=green guibg=green\n+    :hi Cursor2 guifg=red guibg=red\n+    :set guicursor=n-v-c:block-Cursor/lCursor,i-ci-ve:ver25-Cursor2/lCursor2,r-cr:hor20,o:hor50\n+<\n+\n+CURSOR STYLE ISN'T RESTORED AFTER EXITING OR SUSPENDING AND RESUMING NVIM ~\n+\n+Terminals do not provide a way to query the cursor style. Use autocommands to\n+manage the cursor style:\n+>vim\n+    au VimEnter,VimResume * set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50\n+      \\,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor\n+      \\,sm:block-blinkwait175-blinkoff150-blinkon175\n+\n+    au VimLeave,VimSuspend * set guicursor=a:block-blinkon0\n+<\n+\n+CURSOR SHAPE DOESN'T CHANGE IN TMUX ~\n+\n+tmux decides that, not Nvim. See |tui-cursor-shape| for a fix.\n+\n+See #3165 https://github.com/neovim/neovim/pull/3165 for discussion.\n+\n+\n+CURSOR FLICKER IN TMUX? ~\n+\n+If cursor `_` appears and disappears very quickly when opening nvim without a\n+document under tmux, and you set |ctermbg| in `EndOfBuffer` and `Normal`, try\n+setting these to `NONE`:\n+>vim\n+    hi EndOfBuffer ctermbg=NONE ctermfg=200 cterm=NONE\n+    hi Normal ctermbg=NONE ctermfg=200 cterm=NONE\n+<\n+\n+WHAT HAPPENED TO --remote AND FRIENDS? ~\n+\n+|--remote| is partly supported. |clientserver|\n+\n+If you require flags from Vim that are missing in Neovim, you can use\n+https://github.com/mhinz/neovim-remote instead.\n+\n+==============================================================================\n+2. Runtime issues                                         *faq-runtime-issues*",
            "html_url": "https://github.com/neovim/neovim/pull/26539#discussion_r1425267236",
            "id": 1425267236,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U89ok",
            "original_commit_id": "3480fefa30ed0d32206c2229e8b1aa508043cbb0",
            "original_line": 142,
            "original_position": 142,
            "original_start_line": null,
            "path": "runtime/doc/faq.txt",
            "position": null,
            "pull_request_review_id": 1779501100,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26539",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425267236/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T12:11:19Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425267236",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26539#discussion_r1425267760"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26539"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425267760"
                }
            },
            "author_association": "MEMBER",
            "body": "\r\n\r\n```suggestion\r\n4. Build issues                                             *faq-build*\r\n```",
            "commit_id": "68718a8e164bebbf8752cc44c203d9db78e23b40",
            "created_at": "2023-12-13T12:11:50Z",
            "diff_hunk": "@@ -0,0 +1,684 @@\n+*faq.txt*\t\t Frequently Asked Questions\n+\n+                            NVIM REFERENCE MANUAL\n+\n+                                  Type |gO| to see the table of contents.\n+\n+==============================================================================\n+1. General Questions                                 *faq* *faq-general-questions*\n+\n+\n+WHERE SHOULD I PUT MY CONFIG (VIMRC)? ~\n+\n+See |config|; you can copy (or symlink) your existing vimrc. |nvim-from-vim|\n+\n+\n+HOW STABLE IS THE DEVELOPMENT (PRE-RELEASE) VERSION? ~\n+\n+The unstable (pre-release)\n+https://github.com/neovim/neovim/releases/tag/nightly version of Nvim\n+(\"HEAD\", i.e. the `master` branch) is used to aggressively stage new features\n+and changes. It's usually stable, but will occasionally break your workflow.\n+We depend on HEAD users to report \"blind spots\" that were not caught by\n+automated tests.\n+\n+Use the stable (release) https://github.com/neovim/neovim/releases/latest\n+version for a more predictable experience.\n+\n+\n+CAN I USE RUBY-BASED VIM PLUGINS (E.G. LUSTYEXPLORER)? ~\n+\n+Yes, starting with Nvim 0.1.5 PR #4980\n+https://github.com/neovim/neovim/pull/4980 the legacy Vim `if_ruby` interface\n+is supported.\n+\n+\n+CAN I USE LUA-BASED VIM PLUGINS (E.G. NEOCOMPLETE)? ~\n+\n+No. Starting with Nvim 0.2 PR #4411\n+https://github.com/neovim/neovim/pull/4411 Lua is built-in, but the legacy\n+Vim `if_lua` interface is not supported.\n+\n+\n+HOW CAN I USE \"TRUE COLOR\" IN THE TERMINAL? ~\n+\n+Truecolor (24bit colors) are enabled by default if a supporting terminal is\n+detected. If your terminal is not detected but you are sure it supports\n+truecolor, add this to your |init.vim|:\n+>vim\n+    set termguicolors\n+<\n+\n+NVIM SHOWS WEIRD SYMBOLS (`�[2 q`) WHEN CHANGING MODES ~\n+\n+This is a bug in your terminal emulator. It happens because Nvim sends\n+cursor-shape termcodes by default, if the terminal appears to be\n+xterm-compatible (`TERM=xterm-256color`).\n+\n+To workaround the issue, you can:\n+\n+- Use a different terminal emulator\n+- Disable 'guicursor' in your Nvim config: >vim\n+\n+    :set guicursor=\n+    \" Workaround some broken plugins which set guicursor indiscriminately.\n+    :autocmd OptionSet guicursor noautocmd set guicursor=\n+<\n+See also |$TERM| for recommended values of `$TERM`.\n+\n+\n+HOW TO CHANGE CURSOR SHAPE IN THE TERMINAL? ~\n+\n+- For Nvim 0.1.7 or older: see the note about `NVIM_TUI_ENABLE_CURSOR_SHAPE` in `man nvim`.\n+- For Nvim 0.2 or newer: cursor styling is controlled by the 'guicursor' option.\n+    - To _disable_ cursor-styling, set 'guicursor' to empty: >vim\n+\n+            :set guicursor=\n+            \" Workaround some broken plugins which set guicursor indiscriminately.\n+            :autocmd OptionSet guicursor noautocmd set guicursor=\n+<\n+    - If you want a non-blinking cursor, use `blinkon0`. See 'guicursor'.\n+    - 'guicursor' is enabled by default, unless Nvim thinks your terminal doesn't\n+        support it. If you're sure that your terminal supports cursor-shaping, set\n+        'guicursor' in your |init.vim|, as described in 'guicursor'.\n+- The Vim terminal options `t_SI` and `t_EI` are ignored, like all other `t_XX` options.\n+- Old versions of libvte (gnome-terminal, roxterm, terminator, ...) do not\n+  support cursor style control codes. #2537\n+  https://github.com/neovim/neovim/issues/2537\n+\n+\n+HOW TO CHANGE CURSOR COLOR IN THE TERMINAL? ~\n+\n+Cursor styling (shape, color, behavior) is controlled by 'guicursor', even in\n+the terminal. Cursor color (as opposed to shape) only works if\n+'termguicolors' is set.\n+\n+'guicursor' gives an example, but here's a more complicated example\n+which sets different colors in insert-mode and normal-mode:\n+>vim\n+    :set termguicolors\n+    :hi Cursor guifg=green guibg=green\n+    :hi Cursor2 guifg=red guibg=red\n+    :set guicursor=n-v-c:block-Cursor/lCursor,i-ci-ve:ver25-Cursor2/lCursor2,r-cr:hor20,o:hor50\n+<\n+\n+CURSOR STYLE ISN'T RESTORED AFTER EXITING OR SUSPENDING AND RESUMING NVIM ~\n+\n+Terminals do not provide a way to query the cursor style. Use autocommands to\n+manage the cursor style:\n+>vim\n+    au VimEnter,VimResume * set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50\n+      \\,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor\n+      \\,sm:block-blinkwait175-blinkoff150-blinkon175\n+\n+    au VimLeave,VimSuspend * set guicursor=a:block-blinkon0\n+<\n+\n+CURSOR SHAPE DOESN'T CHANGE IN TMUX ~\n+\n+tmux decides that, not Nvim. See |tui-cursor-shape| for a fix.\n+\n+See #3165 https://github.com/neovim/neovim/pull/3165 for discussion.\n+\n+\n+CURSOR FLICKER IN TMUX? ~\n+\n+If cursor `_` appears and disappears very quickly when opening nvim without a\n+document under tmux, and you set |ctermbg| in `EndOfBuffer` and `Normal`, try\n+setting these to `NONE`:\n+>vim\n+    hi EndOfBuffer ctermbg=NONE ctermfg=200 cterm=NONE\n+    hi Normal ctermbg=NONE ctermfg=200 cterm=NONE\n+<\n+\n+WHAT HAPPENED TO --remote AND FRIENDS? ~\n+\n+|--remote| is partly supported. |clientserver|\n+\n+If you require flags from Vim that are missing in Neovim, you can use\n+https://github.com/mhinz/neovim-remote instead.\n+\n+==============================================================================\n+2. Runtime issues                                         *faq-runtime-issues*\n+\n+\n+COPYING TO X11 PRIMARY SELECTION WITH THE MOUSE DOESN'T WORK ~\n+\n+`clipboard=autoselect` is not implemented yet\n+https://github.com/neovim/neovim/issues/2325. You may find this workaround to\n+be useful:\n+>vim\n+    vnoremap <LeftRelease> \"*ygv\n+    vnoremap <2-LeftRelease> \"*ygv\n+<\n+\n+MY CTRL-H MAPPING DOESN'T WORK ~\n+\n+This was fixed in Nvim 0.2. If you are running Nvim 0.1.7 or older,\n+adjust your terminal's \"kbs\" (key_backspace) terminfo entry:\n+>vim\n+    infocmp $TERM | sed 's/kbs=^[hH]/kbs=\\\\177/' > $TERM.ti\n+    tic $TERM.ti\n+<\n+(Feel free to delete the temporary `*.ti` file created after running the above\n+commands).\n+\n+\n+<HOME> OR SOME OTHER \"SPECIAL\" KEY DOESN'T WORK ~\n+\n+Make sure |$TERM| is set correctly.\n+\n+- For screen or tmux, `$TERM` should be `screen-256color` (not `xterm-256color`!)\n+- In other cases if \"256\" does not appear in the string it's probably wrong.\n+  Try `TERM=xterm-256color`.\n+\n+\n+:! AND SYSTEM() DO WEIRD THINGS WITH INTERACTIVE PROCESSES ~\n+\n+Interactive commands are supported by |:terminal| in Nvim. But |:!| and\n+|system()| do not support interactive commands, primarily because Nvim UIs use\n+stdio for msgpack communication, but also for performance, reliability, and\n+consistency across platforms (see\n+https://vimhelp.org/gui_x11.txt.html#gui-pty).\n+\n+See also #1496 https://github.com/neovim/neovim/issues/1496 and #8217\n+https://github.com/neovim/neovim/issues/8217#issuecomment-402152307.\n+\n+\n+PYTHON SUPPORT ISN'T WORKING ~\n+\n+Run |:checkhealth| in Nvim for automatic diagnosis.\n+\n+Other hints:\n+\n+- The python `neovim` module was renamed to `pynvim` (long ago).\n+- If you're using pyenv or virtualenv for the `pynvim` module\n+    https://pypi.python.org/pypi/pynvim/, you must set `g:python3_host_prog` to\n+    the virtualenv's interpreter path.\n+- Read |provider-python|.\n+- Be sure you have the latest version of the `pynvim` Python module: >bash\n+\n+    python -m pip install setuptools\n+    python -m pip install --upgrade pynvim\n+    python3 -m pip install --upgrade pynvim\n+<\n+- Try with `nvim -u NORC` to make sure your config (|init.vim|) isn't causing a\n+    problem. If you get `E117: Unknown function`, that means there's a runtime\n+    issue: |faq-runtime-issues|.\n+\n+\n+:CHECKHEALTH REPORTS E5009: INVALID $VIMRUNTIME ~\n+\n+This means `health#check()` couldn't load, which suggests that |$VIMRUNTIME|\n+or 'runtimepath' is broken.\n+\n+- |$VIMRUNTIME| must point to Nvim's runtime files, not Vim's.\n+- The |$VIMRUNTIME| directory contents should be readable by the current user.\n+- Verify that `:echo &runtimepath` contains the $VIMRUNTIME path.\n+- Check the output of: >vim\n+\n+    :call health#check()\n+    :verbose func health#check\n+<\n+\n+NEOVIM CAN'T FIND ITS RUNTIME ~\n+\n+This is the case if `:help nvim` shows `E149: Sorry, no help for nvim`.\n+\n+Make sure that |$VIM| and |$VIMRUNTIME| point to Nvim's (as opposed to\n+Vim's) runtime by checking `:echo $VIM` and `:echo $VIMRUNTIME`. This should\n+give something like `/usr/share/nvim` resp. `/usr/share/nvim/runtime`.\n+\n+Also make sure that you don't accidentally overwrite your runtimepath\n+(`:set runtimepath?`), which includes the above |$VIMRUNTIME| by default (see\n+'runtimepath').\n+\n+\n+E518: UNKNOWN OPTION: [OPTION] ~\n+\n+Some very old/unnecessary options have been removed from Nvim. See\n+|nvim-removed| for the complete list.\n+\n+\n+NEOVIM IS SLOW ~\n+\n+\n+Use a fast terminal emulator:\n+\n+- kitty https://github.com/kovidgoyal/kitty\n+- alacritty https://github.com/jwilm/alacritty\n+\n+\n+Use an optimized build:\n+\n+`:checkhealth nvim` should report one of these \"build types\":\n+>\n+    Build type: RelWithDebInfo\n+    Build type: MinSizeRel\n+    Build type: Release\n+<\n+If it reports `Build type: Debug` and you're building Nvim from source, see\n+https://github.com/neovim/neovim/wiki/Building-Neovim.\n+\n+\n+COLORS AREN'T DISPLAYED CORRECTLY ~\n+\n+Ensure that |$TERM| is set correctly.\n+\n+From a shell, run `TERM=xterm-256color nvim`. If colors are displayed\n+correctly, then export that value of `TERM` in your user profile (usually\n+`~/.profile`):\n+>bash\n+    export TERM=xterm-256color\n+<\n+If you're using `tmux`, instead add this to your `tmux.conf`:\n+>bash\n+    set -g default-terminal \"tmux-256color\"\n+<\n+\n+For GNU `screen`, configure your `.screenrc`\n+<https://wiki.archlinux.org/index.php/GNU_Screen#Use_256_colors>:\n+>\n+    term screen-256color\n+<\n+\n+NOTE: Nvim ignores `t_Co` and other terminal codes.\n+\n+\n+NEOVIM CAN'T READ UTF-8 CHARACTERS ~\n+\n+Run the following from the command line:\n+>bash\n+    locale | grep -E '(LANG|LC_CTYPE|LC_ALL)=(.*\\.)?(UTF|utf)-?8'\n+<\n+If there's no results, then you might not be using a UTF-8 locale. See the\n+following issues:\n+#1601 https://github.com/neovim/neovim/issues/1601\n+#1858 https://github.com/neovim/neovim/issues/1858\n+#2386 https://github.com/neovim/neovim/issues/2386\n+\n+\n+ESC IN TMUX OR GNU SCREEN IS DELAYED ~\n+\n+This is a common problem\n+https://www.google.com/?q=tmux%20vim%20escape%20delay in `tmux` / `screen`\n+(see also tmux/#131\n+https://github.com/tmux/tmux/issues/131#issuecomment-145853211). The\n+corresponding timeout needs to be tweaked to a low value (10-20ms).\n+\n+`.tmux.conf`:\n+>\n+    set -g escape-time 10\n+    # Or for tmux >= 2.6\n+    set -sg escape-time 10\n+<\n+`.screenrc`:\n+>\n+    maptimeout 10\n+<\n+\n+\"WHY DOESN'T THIS HAPPEN IN VIM?\"\n+\n+It does happen (try `vim -N -u NONE`), but if you hit a key quickly after\n+ESC_ then Vim interprets the ESC as ESC instead of ALT (META). You won't\n+notice the delay unless you closely observe the cursor. The tradeoff is that\n+Vim won't understand ALT (META) key-chords, so for example `nnoremap <M-a>`\n+won't work. ALT (META) key-chords always work in Nvim. See also `:help\n+xterm-cursor-keys` in Vim.\n+\n+Nvim 0.3 mimics the Vim behavior while still fully supporting ALT mappings. See\n+|i_ALT|.\n+\n+\n+ESC IN GNU SCREEN IS LOST WHEN MOUSE MODE IS ENABLED ~\n+\n+This happens because of a bug in screen https://savannah.gnu.org/bugs/?60196:\n+in mouse mode, screen assumes that `ESC` is part of a mouse sequence and will\n+wait an unlimited time for the rest of the sequence, regardless of\n+`maptimeout`. Until it's fixed in screen, there's no known workaround for\n+this other than double-pressing escape, which causes a single escape to be\n+passed through to Nvim.\n+\n+\n+CALLING INPUTLIST(), ECHOMSG, ... IN FILETYPE PLUGINS AND AUTOCMD DOES NOT WORK ~\n+\n+#10008 https://github.com/neovim/neovim/issues/10008,\n+#10116 https://github.com/neovim/neovim/issues/10116,\n+#12288 https://github.com/neovim/neovim/issues/12288,\n+# vim/vim#4379 https://github.com/vim/vim/issues/4379.\n+This is because Nvim sets `shortmess+=F` by default. Vim behaves the same way\n+with `set shortmes+=F`. There are plans to improve this, but meanwhile as a\n+workaround, use `set shortmess-=F` or use `unsilent` as follows.\n+>vim\n+    unsilent let var = inputlist(['1. item1', '2. item2'])\n+    autocmd BufNewFile * unsilent echomsg 'The autocmd has been fired.'\n+<\n+\n+G:CLIPBOARD SETTINGS ARE NOT USED. ~\n+\n+If the clipboard provider is already loaded, you will need to reload it after\n+configuration. Use the following configuration.\n+>vim\n+    let g:clipboard = { 'name' : ... }\n+    if exists('g:loaded_clipboard_provider')\n+      unlet g:loaded_clipboard_provider\n+      runtime autoload/provider/clipboard.vim\n+    endif\n+<\n+\n+Or, if you want automatic reloading when assigning to |g:clipboard|, set\n+|init.vim| as follows.\n+>vim\n+    function! s:clipboard_changed(...) abort\n+      if exists('g:loaded_clipboard_provider')\n+        unlet g:loaded_clipboard_provider\n+      endif\n+      runtime autoload/provider/clipboard.vim\n+    endfunction\n+\n+    if !exists('s:loaded\")\n+      call dictwatcheradd(g:, 'clipboard', function('s:clipboard_changed'))\n+    endif\n+    let s:loaded = v:true\n+<\n+\n+==============================================================================\n+3. Installation issues                               *faq-installation-issues*\n+\n+\n+GENERATING HELPTAGS FAILED ~\n+\n+If re-installation fails with \"Generating helptags failed\", try removing the\n+previously installed runtime directory (if `CMAKE_INSTALL_PREFIX` is not set\n+during building, the default is `/usr/local/share/nvim`):\n+>bash\n+    rm -r /usr/local/share/nvim\n+<\n+\n+==============================================================================\n+4. Build issues                                             *faq-build-issues*",
            "html_url": "https://github.com/neovim/neovim/pull/26539#discussion_r1425267760",
            "id": 1425267760,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U89ww",
            "original_commit_id": "3480fefa30ed0d32206c2229e8b1aa508043cbb0",
            "original_line": 399,
            "original_position": 399,
            "original_start_line": null,
            "path": "runtime/doc/faq.txt",
            "position": null,
            "pull_request_review_id": 1779501922,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26539",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425267760/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T12:11:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425267760",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26539#discussion_r1425268874"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26539"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425268874"
                }
            },
            "author_association": "MEMBER",
            "body": "(also modelines)",
            "commit_id": "68718a8e164bebbf8752cc44c203d9db78e23b40",
            "created_at": "2023-12-13T12:12:53Z",
            "diff_hunk": "@@ -0,0 +1,701 @@\n+*faq.txt*\t\t Frequently Asked Questions\n+\n+                            NVIM REFERENCE MANUAL\n+\n+==============================================================================\n+1. General Questions                                 *faq* *faq-general-questions*\n+\n+\n+WHERE SHOULD I PUT MY CONFIG (VIMRC)? ~",
            "html_url": "https://github.com/neovim/neovim/pull/26539#discussion_r1425268874",
            "id": 1425268874,
            "in_reply_to_id": 1425251283,
            "line": 14,
            "node_id": "PRRC_kwDOAPphoM5U8-CK",
            "original_commit_id": "35654208503fe2d2efdfd09234ef243b27a82807",
            "original_line": 14,
            "original_position": 9,
            "original_start_line": null,
            "path": "runtime/doc/faq.txt",
            "position": 14,
            "pull_request_review_id": 1779503684,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26539",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425268874/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T12:12:53Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425268874",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26539#discussion_r1425269002"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26539"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425269002"
                }
            },
            "author_association": "MEMBER",
            "body": "`dev_tools.txt` sounds good. Later we can move parts of `src/nvim/README.md` to it",
            "commit_id": "68718a8e164bebbf8752cc44c203d9db78e23b40",
            "created_at": "2023-12-13T12:13:01Z",
            "diff_hunk": "@@ -0,0 +1,701 @@\n+*faq.txt*\t\t Frequently Asked Questions\n+\n+                            NVIM REFERENCE MANUAL\n+\n+==============================================================================\n+1. General Questions                                 *faq* *faq-general-questions*\n+\n+\n+WHERE SHOULD I PUT MY CONFIG (VIMRC)? ~\n+\n+See |config|; you can copy (or symlink) your existing vimrc. |nvim-from-vim|\n+\n+\n+HOW STABLE IS THE DEVELOPMENT (PRE-RELEASE) VERSION? ~\n+\n+The unstable (pre-release)\n+https://github.com/neovim/neovim/releases/tag/nightly version of Nvim\n+(\"HEAD\", i.e. the `master` branch) is used to aggressively stage new features\n+and changes. It's usually stable, but will occasionally break your workflow.\n+We depend on HEAD users to report \"blind spots\" that were not caught by\n+automated tests.\n+\n+Use the stable (release) https://github.com/neovim/neovim/releases/latest\n+version for a more predictable experience.\n+\n+\n+CAN I USE RUBY-BASED VIM PLUGINS (E.G. LUSTYEXPLORER)? ~\n+\n+Yes, starting with Nvim 0.1.5 PR #4980\n+https://github.com/neovim/neovim/pull/4980 the legacy Vim `if_ruby` interface\n+is supported.\n+\n+\n+CAN I USE LUA-BASED VIM PLUGINS (E.G. NEOCOMPLETE)? ~\n+\n+No. Starting with Nvim 0.2 PR #4411\n+https://github.com/neovim/neovim/pull/4411 Lua is built-in, but the legacy\n+Vim `if_lua` interface is not supported.\n+\n+\n+HOW CAN I USE \"TRUE COLOR\" IN THE TERMINAL? ~\n+\n+Truecolor (24bit colors) are enabled by default if a supporting terminal is\n+detected. If your terminal is not detected but you are sure it supports\n+truecolor, add this to your |init.vim|:\n+>vim\n+    set termguicolors\n+<\n+\n+NVIM SHOWS WEIRD SYMBOLS (`�[2 q`) WHEN CHANGING MODES ~\n+\n+This is a bug in your terminal emulator. It happens because Nvim sends\n+cursor-shape termcodes by default, if the terminal appears to be\n+xterm-compatible (`TERM=xterm-256color`).\n+\n+To workaround the issue, you can:\n+\n+- Use a different terminal emulator\n+- Disable |guicursor| in your Nvim config: >vim\n+\n+    :set guicursor=\n+    \" Workaround some broken plugins which set guicursor indiscriminately.\n+    :autocmd OptionSet guicursor noautocmd set guicursor=\n+<\n+See also |$TERM| for recommended values of `$TERM`.\n+\n+\n+HOW TO CHANGE CURSOR SHAPE IN THE TERMINAL? ~\n+\n+- For Nvim 0.1.7 or older: see the note about `NVIM_TUI_ENABLE_CURSOR_SHAPE` in `man nvim`.\n+- For Nvim 0.2 or newer: cursor styling is controlled by the 'guicursor' option.\n+    - To _disable_ cursor-styling, set 'guicursor' to empty: >vim\n+\n+            :set guicursor=\n+            \" Workaround some broken plugins which set guicursor indiscriminately.\n+            :autocmd OptionSet guicursor noautocmd set guicursor=\n+<\n+    - If you want a non-blinking cursor, use `blinkon0`. See 'guicursor'.\n+    - 'guicursor' is enabled by default, unless Nvim thinks your terminal doesn't\n+        support it. If you're sure that your terminal supports cursor-shaping, set\n+        'guicursor' in your |init.vim|, as described in 'guicursor'.\n+- The Vim terminal options `t_SI` and `t_EI` are ignored, like all other `t_XX` options.\n+- Old versions of libvte (gnome-terminal, roxterm, terminator, ...) do not\n+  support cursor style control codes. #2537\n+  https://github.com/neovim/neovim/issues/2537\n+\n+\n+HOW TO CHANGE CURSOR COLOR IN THE TERMINAL? ~\n+\n+Cursor styling (shape, color, behavior) is controlled by 'guicursor', even in\n+the terminal. Cursor color (as opposed to shape) only works if\n+'termguicolors' is set.\n+\n+'guicursor' gives an example, but here's a more complicated example\n+which sets different colors in insert-mode and normal-mode:\n+>vim\n+    :set termguicolors\n+    :hi Cursor guifg=green guibg=green\n+    :hi Cursor2 guifg=red guibg=red\n+    :set guicursor=n-v-c:block-Cursor/lCursor,i-ci-ve:ver25-Cursor2/lCursor2,r-cr:hor20,o:hor50\n+<\n+\n+CURSOR STYLE ISN'T RESTORED AFTER EXITING OR SUSPENDING AND RESUMING NVIM ~\n+\n+Terminals do not provide a way to query the cursor style. Use autocommands to\n+manage the cursor style:\n+>vim\n+    au VimEnter,VimResume * set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50\n+      \\,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor\n+      \\,sm:block-blinkwait175-blinkoff150-blinkon175\n+\n+    au VimLeave,VimSuspend * set guicursor=a:block-blinkon0\n+<\n+\n+CURSOR SHAPE DOESN'T CHANGE IN TMUX ~\n+\n+tmux decides that, not Nvim. See |tui-cursor-shape| for a fix.\n+\n+See #3165 https://github.com/neovim/neovim/pull/3165 for discussion.\n+\n+\n+CURSOR FLICKER IN TMUX? ~\n+\n+If cursor `_` appears and disappears very quickly when opening nvim without a\n+document under tmux, and you set |ctermbg| in |EndOfBuffer| and |Normal|, try\n+setting these to `NONE`:\n+>vim\n+    hi EndOfBuffer ctermbg=NONE ctermfg=200 cterm=NONE\n+    hi Normal ctermbg=NONE ctermfg=200 cterm=NONE\n+<\n+\n+HOW TO USE THE WINDOWS CLIPBOARD FROM WSL? ~\n+\n+Try the suggestion given by |clipboard-wsl|:\n+>vim\n+    let g:clipboard = {\n+      \\   'name': 'WslClipboard',\n+      \\   'copy': {\n+      \\      '+': 'clip.exe',\n+      \\      '*': 'clip.exe',\n+      \\    },\n+      \\   'paste': {\n+      \\      '+': 'powershell.exe -c [Console]::Out.Write($(Get-Clipboard -Raw).tostring().replace(\"`r\", \"\"))',\n+      \\      '*': 'powershell.exe -c [Console]::Out.Write($(Get-Clipboard -Raw).tostring().replace(\"`r\", \"\"))',\n+      \\   },\n+      \\   'cache_enabled': 0,\n+      \\ }\n+<\n+\n+WHAT HAPPENED TO --remote AND FRIENDS? ~\n+\n+|--remote| is partly supported. |clientserver|\n+\n+If you require flags from Vim that are missing in Neovim, you can use\n+https://github.com/mhinz/neovim-remote instead.\n+\n+==============================================================================\n+2. Runtime issues                                         *faq-runtime-issues*\n+\n+\n+COPYING TO X11 PRIMARY SELECTION WITH THE MOUSE DOESN'T WORK ~\n+\n+`clipboard=autoselect` is not implemented yet\n+https://github.com/neovim/neovim/issues/2325. You may find this workaround to\n+be useful:\n+>vim\n+    vnoremap <LeftRelease> \"*ygv\n+    vnoremap <2-LeftRelease> \"*ygv\n+<\n+\n+MY CTRL-H MAPPING DOESN'T WORK ~\n+\n+This was fixed in Nvim 0.2. If you are running Nvim 0.1.7 or older,\n+adjust your terminal's \"kbs\" (key_backspace) terminfo entry:\n+>vim\n+    infocmp $TERM | sed 's/kbs=^[hH]/kbs=\\\\177/' > $TERM.ti\n+    tic $TERM.ti\n+<\n+(Feel free to delete the temporary `*.ti` file created after running the above\n+commands).\n+\n+\n+<HOME> OR SOME OTHER \"SPECIAL\" KEY DOESN'T WORK ~\n+\n+Make sure |$TERM| is set correctly.\n+\n+- For screen or tmux, `$TERM` should be `screen-256color` (not `xterm-256color`!)\n+- In other cases if \"256\" does not appear in the string it's probably wrong.\n+  Try `TERM=xterm-256color`.\n+\n+\n+:! AND SYSTEM() DO WEIRD THINGS WITH INTERACTIVE PROCESSES ~\n+\n+Interactive commands are supported by |:terminal| in Nvim. But |:!| and\n+|system()| do not support interactive commands, primarily because Nvim UIs use\n+stdio for msgpack communication, but also for performance, reliability, and\n+consistency across platforms (see\n+https://vimhelp.org/gui_x11.txt.html#gui-pty).\n+\n+See also #1496 https://github.com/neovim/neovim/issues/1496 and #8217\n+https://github.com/neovim/neovim/issues/8217#issuecomment-402152307.\n+\n+\n+PYTHON SUPPORT ISN'T WORKING ~\n+\n+Run |:checkhealth| in Nvim for automatic diagnosis.\n+\n+Other hints:\n+\n+- The python `neovim` module was renamed to `pynvim` (long ago).\n+- If you're using pyenv or virtualenv for the `pynvim` module\n+    https://pypi.python.org/pypi/pynvim/, you must set `g:python3_host_prog` to\n+    the virtualenv's interpreter path.\n+- Read |provider-python|.\n+- Be sure you have the latest version of the `pynvim` Python module: >bash\n+\n+    python -m pip install setuptools\n+    python -m pip install --upgrade pynvim\n+    python3 -m pip install --upgrade pynvim\n+<\n+- Try with `nvim -u NORC` to make sure your config (|init.vim|) isn't causing a\n+    problem. If you get `E117: Unknown function`, that means there's a runtime\n+    issue: |faq-runtime-issues|.\n+\n+\n+:CHECKHEALTH REPORTS E5009: INVALID $VIMRUNTIME ~\n+\n+This means `health#check()` couldn't load, which suggests that |$VIMRUNTIME|\n+or |&runtimepath| is broken.\n+\n+- |$VIMRUNTIME| must point to Nvim's runtime files, not Vim's.\n+- The |$VIMRUNTIME| directory contents should be readable by the current user.\n+- Verify that `:echo &runtimepath` contains the $VIMRUNTIME path.\n+- Check the output of: >vim\n+\n+    :call health#check()\n+    :verbose func health#check\n+<\n+\n+NEOVIM CAN'T FIND ITS RUNTIME ~\n+\n+This is the case if `:help nvim` shows `E149: Sorry, no help for nvim`.\n+\n+Make sure that |$VIM| and |$VIMRUNTIME| point to Nvim's (as opposed to\n+Vim's) runtime by checking `:echo $VIM` and `:echo $VIMRUNTIME`. This should\n+give something like `/usr/share/nvim` resp. `/usr/share/nvim/runtime`.\n+\n+Also make sure that you don't accidentally overwrite your runtimepath\n+(`:set runtimepath?`), which includes the above |$VIMRUNTIME| by default (see\n+'runtimepath').\n+\n+\n+E518: UNKNOWN OPTION: [OPTION] ~\n+\n+Some very old/unnecessary options have been removed from Nvim. See\n+|nvim-removed| for the complete list.\n+\n+\n+NEOVIM IS SLOW ~\n+\n+\n+USE A FAST TERMINAL EMULATOR\n+\n+- kitty https://github.com/kovidgoyal/kitty\n+- alacritty https://github.com/jwilm/alacritty\n+\n+\n+USE AN OPTIMIZED BUILD\n+\n+`:checkhealth nvim` should report one of these \"build types\":\n+>\n+    Build type: RelWithDebInfo\n+    Build type: MinSizeRel\n+    Build type: Release\n+<\n+If it reports `Build type: Debug` and you're building Nvim from source, see\n+https://github.com/neovim/neovim/wiki/Building-Neovim.\n+\n+\n+COLORS AREN'T DISPLAYED CORRECTLY ~\n+\n+Ensure that |$TERM| is set correctly.\n+\n+From a shell, run `TERM=xterm-256color nvim`. If colors are displayed\n+correctly, then export that value of `TERM` in your user profile (usually\n+`~/.profile`):\n+>bash\n+    export TERM=xterm-256color\n+<\n+If you're using `tmux`, instead add this to your `tmux.conf`:\n+>bash\n+    set -g default-terminal \"tmux-256color\"\n+<\n+\n+For GNU `screen`, configure your `.screenrc`\n+<https://wiki.archlinux.org/index.php/GNU_Screen#Use_256_colors>:\n+>\n+    term screen-256color\n+<\n+\n+NOTE: Nvim ignores `t_Co` and other terminal codes.\n+\n+\n+NEOVIM CAN'T READ UTF-8 CHARACTERS ~\n+\n+Run the following from the command line:\n+>bash\n+    locale | grep -E '(LANG|LC_CTYPE|LC_ALL)=(.*\\.)?(UTF|utf)-?8'\n+<\n+If there's no results, then you might not be using a UTF-8 locale. See the\n+following issues:\n+#1601 https://github.com/neovim/neovim/issues/1601\n+#1858 https://github.com/neovim/neovim/issues/1858\n+#2386 https://github.com/neovim/neovim/issues/2386\n+\n+\n+ESC IN TMUX OR GNU SCREEN IS DELAYED ~\n+\n+This is a common problem\n+https://www.google.com/?q=tmux%20vim%20escape%20delay in `tmux` / `screen`\n+(see also tmux/#131\n+https://github.com/tmux/tmux/issues/131#issuecomment-145853211). The\n+corresponding timeout needs to be tweaked to a low value (10-20ms).\n+\n+`.tmux.conf`:\n+>\n+    set -g escape-time 10\n+    # Or for tmux >= 2.6\n+    set -sg escape-time 10\n+<\n+`.screenrc`:\n+>\n+    maptimeout 10\n+<\n+\n+\"WHY DOESN'T THIS HAPPEN IN VIM?\" ~\n+\n+It does happen (try `vim -N -u NONE`), but if you hit a key quickly after\n+ESC_ then Vim interprets the ESC as ESC instead of ALT (META). You won't\n+notice the delay unless you closely observe the cursor. The tradeoff is that\n+Vim won't understand ALT (META) key-chords, so for example `nnoremap <M-a>`\n+won't work. ALT (META) key-chords always work in Nvim. See also `:help\n+xterm-cursor-keys` in Vim.\n+\n+Nvim 0.3 mimics the Vim behavior while still fully supporting ALT mappings. See\n+|i_ALT|.\n+\n+\n+ESC IN GNU SCREEN IS LOST WHEN MOUSE MODE IS ENABLED ~\n+\n+This happens because of a bug in screen https://savannah.gnu.org/bugs/?60196:\n+in mouse mode, screen assumes that `ESC` is part of a mouse sequence and will\n+wait an unlimited time for the rest of the sequence, regardless of\n+`maptimeout`. Until it's fixed in screen, there's no known workaround for\n+this other than double-pressing escape, which causes a single escape to be\n+passed through to Nvim.\n+\n+\n+CALLING INPUTLIST(), ECHOMSG, ... IN FILETYPE PLUGINS AND AUTOCMD DOES NOT WORK ~\n+\n+#10008 https://github.com/neovim/neovim/issues/10008,\n+#10116 https://github.com/neovim/neovim/issues/10116,\n+#12288 https://github.com/neovim/neovim/issues/12288,\n+# vim/vim#4379 https://github.com/vim/vim/issues/4379.\n+This is because Nvim sets `shortmess+=F` by default. Vim behaves the same way\n+with `set shortmes+=F`. There are plans to improve this, but meanwhile as a\n+workaround, use `set shortmess-=F` or use `unsilent` as follows.\n+>vim\n+    unsilent let var = inputlist(['1. item1', '2. item2'])\n+    autocmd BufNewFile * unsilent echomsg 'The autocmd has been fired.'\n+<\n+\n+G:CLIPBOARD SETTINGS ARE NOT USED. ~\n+\n+If the clipboard provider is already loaded, you will need to reload it after\n+configuration. Use the following configuration.\n+>vim\n+    let g:clipboard = { 'name' : ... }\n+    if exists('g:loaded_clipboard_provider')\n+      unlet g:loaded_clipboard_provider\n+      runtime autoload/provider/clipboard.vim\n+    endif\n+<\n+\n+Or, if you want automatic reloading when assigning to |g:clipboard|, set\n+|init.vim| as follows.\n+>vim\n+    function! s:clipboard_changed(...) abort\n+      if exists('g:loaded_clipboard_provider')\n+        unlet g:loaded_clipboard_provider\n+      endif\n+      runtime autoload/provider/clipboard.vim\n+    endfunction\n+\n+    if !exists('s:loaded\")\n+      call dictwatcheradd(g:, 'clipboard', function('s:clipboard_changed'))\n+    endif\n+    let s:loaded = v:true\n+<\n+\n+==============================================================================\n+3. Installation issues                               *faq-installation-issues*\n+\n+\n+GENERATING HELPTAGS FAILED ~\n+\n+If re-installation fails with \"Generating helptags failed\", try removing the\n+previously installed runtime directory (if `CMAKE_INSTALL_PREFIX` is not set\n+during building, the default is `/usr/local/share/nvim`):\n+>bash\n+    rm -r /usr/local/share/nvim\n+<\n+\n+==============================================================================\n+4. Build issues                                             *faq-build-issues*\n+\n+\n+GENERAL BUILD ISSUES ~\n+\n+Run `make distclean && make` to rule out a stale build environment causing the\n+failure.\n+\n+\n+SETTINGS IN LOCAL.MK DON'T TAKE EFFECT ~\n+\n+CMake caches build settings, so you might need to run `rm -r build && make`\n+after modifying `local.mk`.\n+\n+\n+CMAKE ERRORS ~\n+\n+`configure_file Problem configuring file`\n+\n+This is probably a permissions issue, which can happen if you run `make` as the\n+root user, then later run an unprivileged `make`. To fix this, run `rm -rf\n+build` and try again.\n+\n+\n+ANACONDA ERROR ~\n+\n+Error message: `anaconda3/bin/x86_64-conda_cos6-linux-gnu-cc: not found`\n+\n+Solution: `conda install gxx_linux-64` or `conda deactivate`\n+\n+\n+==============================================================================\n+5. Debug                                                           *faq-debug*",
            "html_url": "https://github.com/neovim/neovim/pull/26539#discussion_r1425269002",
            "id": 1425269002,
            "in_reply_to_id": 1425206255,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U8-EK",
            "original_commit_id": "642311510982cb5affd4c791c0a84ae54c849730",
            "original_line": 447,
            "original_position": 447,
            "original_start_line": null,
            "path": "runtime/doc/faq.txt",
            "position": null,
            "pull_request_review_id": 1779503922,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26539",
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425269002/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T12:13:24Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425269002",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26539#discussion_r1425271528"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26539"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425271528"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\n|faq|\t\t\tFrequently Asked Questions\r\n```",
            "commit_id": "68718a8e164bebbf8752cc44c203d9db78e23b40",
            "created_at": "2023-12-13T12:15:35Z",
            "diff_hunk": "@@ -47,6 +47,7 @@ ABOUT NVIM\t\t\t\t*reference_toc* *doc-file-list* *Q_ct*\n |news|\t\t\tNews since the previous release\n |nvim|\t\t\tTransitioning from Vim\n |vim-differences|\tNvim compared to Vim\n+|faq|\t\t\tFrequently Asked Question",
            "html_url": "https://github.com/neovim/neovim/pull/26539#discussion_r1425271528",
            "id": 1425271528,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U8-ro",
            "original_commit_id": "529bf20284f9b0dfceb41f49c112b21b36a45a31",
            "original_line": 50,
            "original_position": 4,
            "original_start_line": null,
            "path": "runtime/doc/help.txt",
            "position": null,
            "pull_request_review_id": 1779508142,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26539",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425271528/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T12:15:36Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425271528",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26539#discussion_r1425272579"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26539"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425272579"
                }
            },
            "author_association": "MEMBER",
            "body": "the redis post is good, let's keep it",
            "commit_id": "68718a8e164bebbf8752cc44c203d9db78e23b40",
            "created_at": "2023-12-13T12:16:33Z",
            "diff_hunk": "@@ -0,0 +1,684 @@\n+*faq.txt*\t\t Frequently Asked Questions\n+\n+                            NVIM REFERENCE MANUAL\n+\n+                                  Type |gO| to see the table of contents.\n+\n+==============================================================================\n+General Questions                                 *faq* *faq-general-questions*\n+\n+\n+WHERE SHOULD I PUT MY CONFIG (VIMRC)? ~\n+\n+See |config|; you can copy (or symlink) your existing vimrc. |nvim-from-vim|\n+\n+\n+HOW STABLE IS THE DEVELOPMENT (PRE-RELEASE) VERSION? ~\n+\n+The unstable (pre-release)\n+https://github.com/neovim/neovim/releases/tag/nightly version of Nvim\n+(\"HEAD\", i.e. the `master` branch) is used to aggressively stage new features\n+and changes. It's usually stable, but will occasionally break your workflow.\n+We depend on HEAD users to report \"blind spots\" that were not caught by\n+automated tests.\n+\n+Use the stable (release) https://github.com/neovim/neovim/releases/latest\n+version for a more predictable experience.\n+\n+\n+CAN I USE RUBY-BASED VIM PLUGINS (E.G. LUSTYEXPLORER)? ~\n+\n+Yes, starting with Nvim 0.1.5 PR #4980\n+https://github.com/neovim/neovim/pull/4980 the legacy Vim `if_ruby` interface\n+is supported.\n+\n+\n+CAN I USE LUA-BASED VIM PLUGINS (E.G. NEOCOMPLETE)? ~\n+\n+No. Starting with Nvim 0.2 PR #4411\n+https://github.com/neovim/neovim/pull/4411 Lua is built-in, but the legacy\n+Vim `if_lua` interface is not supported.\n+\n+\n+HOW CAN I USE \"TRUE COLOR\" IN THE TERMINAL? ~\n+\n+Truecolor (24bit colors) are enabled by default if a supporting terminal is\n+detected. If your terminal is not detected but you are sure it supports\n+truecolor, add this to your |init.vim|:\n+>vim\n+    set termguicolors\n+<\n+\n+NVIM SHOWS WEIRD SYMBOLS (`�[2 q`) WHEN CHANGING MODES ~\n+\n+This is a bug in your terminal emulator. It happens because Nvim sends\n+cursor-shape termcodes by default, if the terminal appears to be\n+xterm-compatible (`TERM=xterm-256color`).\n+\n+To workaround the issue, you can:\n+\n+- Use a different terminal emulator\n+- Disable 'guicursor' in your Nvim config: >vim\n+\n+    :set guicursor=\n+    \" Workaround some broken plugins which set guicursor indiscriminately.\n+    :autocmd OptionSet guicursor noautocmd set guicursor=\n+<\n+See also |$TERM| for recommended values of `$TERM`.\n+\n+\n+HOW TO CHANGE CURSOR SHAPE IN THE TERMINAL? ~\n+\n+- For Nvim 0.1.7 or older: see the note about `NVIM_TUI_ENABLE_CURSOR_SHAPE` in `man nvim`.\n+- For Nvim 0.2 or newer: cursor styling is controlled by the 'guicursor' option.\n+    - To _disable_ cursor-styling, set 'guicursor' to empty: >vim\n+\n+            :set guicursor=\n+            \" Workaround some broken plugins which set guicursor indiscriminately.\n+            :autocmd OptionSet guicursor noautocmd set guicursor=\n+<\n+    - If you want a non-blinking cursor, use `blinkon0`. See 'guicursor'.\n+    - 'guicursor' is enabled by default, unless Nvim thinks your terminal doesn't\n+        support it. If you're sure that your terminal supports cursor-shaping, set\n+        'guicursor' in your |init.vim|, as described in 'guicursor'.\n+- The Vim terminal options `t_SI` and `t_EI` are ignored, like all other `t_XX` options.\n+- Old versions of libvte (gnome-terminal, roxterm, terminator, ...) do not\n+  support cursor style control codes. #2537\n+  https://github.com/neovim/neovim/issues/2537\n+\n+\n+HOW TO CHANGE CURSOR COLOR IN THE TERMINAL? ~\n+\n+Cursor styling (shape, color, behavior) is controlled by 'guicursor', even in\n+the terminal. Cursor color (as opposed to shape) only works if\n+'termguicolors' is set.\n+\n+'guicursor' gives an example, but here's a more complicated example\n+which sets different colors in insert-mode and normal-mode:\n+>vim\n+    :set termguicolors\n+    :hi Cursor guifg=green guibg=green\n+    :hi Cursor2 guifg=red guibg=red\n+    :set guicursor=n-v-c:block-Cursor/lCursor,i-ci-ve:ver25-Cursor2/lCursor2,r-cr:hor20,o:hor50\n+<\n+\n+CURSOR STYLE ISN'T RESTORED AFTER EXITING OR SUSPENDING AND RESUMING NVIM ~\n+\n+Terminals do not provide a way to query the cursor style. Use autocommands to\n+manage the cursor style:\n+>vim\n+    au VimEnter,VimResume * set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50\n+      \\,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor\n+      \\,sm:block-blinkwait175-blinkoff150-blinkon175\n+\n+    au VimLeave,VimSuspend * set guicursor=a:block-blinkon0\n+<\n+\n+CURSOR SHAPE DOESN'T CHANGE IN TMUX ~\n+\n+tmux decides that, not Nvim. See |tui-cursor-shape| for a fix.\n+\n+See #3165 https://github.com/neovim/neovim/pull/3165 for discussion.\n+\n+\n+CURSOR FLICKER IN TMUX? ~\n+\n+If cursor `_` appears and disappears very quickly when opening nvim without a\n+document under tmux, and you set |ctermbg| in `EndOfBuffer` and `Normal`, try\n+setting these to `NONE`:\n+>vim\n+    hi EndOfBuffer ctermbg=NONE ctermfg=200 cterm=NONE\n+    hi Normal ctermbg=NONE ctermfg=200 cterm=NONE\n+<\n+\n+WHAT HAPPENED TO --remote AND FRIENDS? ~\n+\n+|--remote| is partly supported. |clientserver|\n+\n+If you require flags from Vim that are missing in Neovim, you can use\n+https://github.com/mhinz/neovim-remote instead.\n+\n+==============================================================================\n+Runtime issues                                         *faq-runtime-issues*\n+\n+\n+COPYING TO X11 PRIMARY SELECTION WITH THE MOUSE DOESN'T WORK ~\n+\n+`clipboard=autoselect` is not implemented yet\n+https://github.com/neovim/neovim/issues/2325. You may find this workaround to\n+be useful:\n+>vim\n+    vnoremap <LeftRelease> \"*ygv\n+    vnoremap <2-LeftRelease> \"*ygv\n+<\n+\n+MY CTRL-H MAPPING DOESN'T WORK ~\n+\n+This was fixed in Nvim 0.2. If you are running Nvim 0.1.7 or older,\n+adjust your terminal's \"kbs\" (key_backspace) terminfo entry:\n+>vim\n+    infocmp $TERM | sed 's/kbs=^[hH]/kbs=\\\\177/' > $TERM.ti\n+    tic $TERM.ti\n+<\n+(Feel free to delete the temporary `*.ti` file created after running the above\n+commands).\n+\n+\n+<HOME> OR SOME OTHER \"SPECIAL\" KEY DOESN'T WORK ~\n+\n+Make sure |$TERM| is set correctly.\n+\n+- For screen or tmux, `$TERM` should be `screen-256color` (not `xterm-256color`!)\n+- In other cases if \"256\" does not appear in the string it's probably wrong.\n+  Try `TERM=xterm-256color`.\n+\n+\n+:! AND SYSTEM() DO WEIRD THINGS WITH INTERACTIVE PROCESSES ~\n+\n+Interactive commands are supported by |:terminal| in Nvim. But |:!| and\n+|system()| do not support interactive commands, primarily because Nvim UIs use\n+stdio for msgpack communication, but also for performance, reliability, and\n+consistency across platforms (see\n+https://vimhelp.org/gui_x11.txt.html#gui-pty).\n+\n+See also #1496 https://github.com/neovim/neovim/issues/1496 and #8217\n+https://github.com/neovim/neovim/issues/8217#issuecomment-402152307.\n+\n+\n+PYTHON SUPPORT ISN'T WORKING ~\n+\n+Run |:checkhealth| in Nvim for automatic diagnosis.\n+\n+Other hints:\n+\n+- The python `neovim` module was renamed to `pynvim` (long ago).\n+- If you're using pyenv or virtualenv for the `pynvim` module\n+    https://pypi.python.org/pypi/pynvim/, you must set `g:python3_host_prog` to\n+    the virtualenv's interpreter path.\n+- Read |provider-python|.\n+- Be sure you have the latest version of the `pynvim` Python module: >bash\n+\n+    python -m pip install setuptools\n+    python -m pip install --upgrade pynvim\n+    python3 -m pip install --upgrade pynvim\n+<\n+- Try with `nvim -u NORC` to make sure your config (|init.vim|) isn't causing a\n+    problem. If you get `E117: Unknown function`, that means there's a runtime\n+    issue: |faq-runtime-issues|.\n+\n+\n+:CHECKHEALTH REPORTS E5009: INVALID $VIMRUNTIME ~\n+\n+This means `health#check()` couldn't load, which suggests that |$VIMRUNTIME|\n+or 'runtimepath' is broken.\n+\n+- |$VIMRUNTIME| must point to Nvim's runtime files, not Vim's.\n+- The |$VIMRUNTIME| directory contents should be readable by the current user.\n+- Verify that `:echo &runtimepath` contains the $VIMRUNTIME path.\n+- Check the output of: >vim\n+\n+    :call health#check()\n+    :verbose func health#check\n+<\n+\n+NEOVIM CAN'T FIND ITS RUNTIME ~\n+\n+This is the case if `:help nvim` shows `E149: Sorry, no help for nvim`.\n+\n+Make sure that |$VIM| and |$VIMRUNTIME| point to Nvim's (as opposed to\n+Vim's) runtime by checking `:echo $VIM` and `:echo $VIMRUNTIME`. This should\n+give something like `/usr/share/nvim` resp. `/usr/share/nvim/runtime`.\n+\n+Also make sure that you don't accidentally overwrite your runtimepath\n+(`:set runtimepath?`), which includes the above |$VIMRUNTIME| by default (see\n+'runtimepath').\n+\n+\n+E518: UNKNOWN OPTION: [OPTION] ~\n+\n+Some very old/unnecessary options have been removed from Nvim. See\n+|nvim-removed| for the complete list.\n+\n+\n+NEOVIM IS SLOW ~\n+\n+\n+Use a fast terminal emulator:\n+\n+- kitty https://github.com/kovidgoyal/kitty\n+- alacritty https://github.com/jwilm/alacritty\n+\n+\n+Use an optimized build:\n+\n+`:checkhealth nvim` should report one of these \"build types\":\n+>\n+    Build type: RelWithDebInfo\n+    Build type: MinSizeRel\n+    Build type: Release\n+<\n+If it reports `Build type: Debug` and you're building Nvim from source, see\n+https://github.com/neovim/neovim/wiki/Building-Neovim.\n+\n+\n+COLORS AREN'T DISPLAYED CORRECTLY ~\n+\n+Ensure that |$TERM| is set correctly.\n+\n+From a shell, run `TERM=xterm-256color nvim`. If colors are displayed\n+correctly, then export that value of `TERM` in your user profile (usually\n+`~/.profile`):\n+>bash\n+    export TERM=xterm-256color\n+<\n+If you're using `tmux`, instead add this to your `tmux.conf`:\n+>bash\n+    set -g default-terminal \"tmux-256color\"\n+<\n+\n+For GNU `screen`, configure your `.screenrc`\n+<https://wiki.archlinux.org/index.php/GNU_Screen#Use_256_colors>:\n+>\n+    term screen-256color\n+<\n+\n+NOTE: Nvim ignores `t_Co` and other terminal codes.\n+\n+\n+NEOVIM CAN'T READ UTF-8 CHARACTERS ~\n+\n+Run the following from the command line:\n+>bash\n+    locale | grep -E '(LANG|LC_CTYPE|LC_ALL)=(.*\\.)?(UTF|utf)-?8'\n+<\n+If there's no results, then you might not be using a UTF-8 locale. See the\n+following issues:\n+#1601 https://github.com/neovim/neovim/issues/1601\n+#1858 https://github.com/neovim/neovim/issues/1858\n+#2386 https://github.com/neovim/neovim/issues/2386\n+\n+\n+ESC IN TMUX OR GNU SCREEN IS DELAYED ~\n+\n+This is a common problem\n+https://www.google.com/?q=tmux%20vim%20escape%20delay in `tmux` / `screen`\n+(see also tmux/#131\n+https://github.com/tmux/tmux/issues/131#issuecomment-145853211). The\n+corresponding timeout needs to be tweaked to a low value (10-20ms).\n+\n+`.tmux.conf`:\n+>\n+    set -g escape-time 10\n+    # Or for tmux >= 2.6\n+    set -sg escape-time 10\n+<\n+`.screenrc`:\n+>\n+    maptimeout 10\n+<\n+\n+\"WHY DOESN'T THIS HAPPEN IN VIM?\"\n+\n+It does happen (try `vim -N -u NONE`), but if you hit a key quickly after\n+ESC_ then Vim interprets the ESC as ESC instead of ALT (META). You won't\n+notice the delay unless you closely observe the cursor. The tradeoff is that\n+Vim won't understand ALT (META) key-chords, so for example `nnoremap <M-a>`\n+won't work. ALT (META) key-chords always work in Nvim. See also `:help\n+xterm-cursor-keys` in Vim.\n+\n+Nvim 0.3 mimics the Vim behavior while still fully supporting ALT mappings. See\n+|i_ALT|.\n+\n+\n+ESC IN GNU SCREEN IS LOST WHEN MOUSE MODE IS ENABLED ~\n+\n+This happens because of a bug in screen https://savannah.gnu.org/bugs/?60196:\n+in mouse mode, screen assumes that `ESC` is part of a mouse sequence and will\n+wait an unlimited time for the rest of the sequence, regardless of\n+`maptimeout`. Until it's fixed in screen, there's no known workaround for\n+this other than double-pressing escape, which causes a single escape to be\n+passed through to Nvim.\n+\n+\n+CALLING INPUTLIST(), ECHOMSG, ... IN FILETYPE PLUGINS AND AUTOCMD DOES NOT WORK ~\n+\n+#10008 https://github.com/neovim/neovim/issues/10008,\n+#10116 https://github.com/neovim/neovim/issues/10116,\n+#12288 https://github.com/neovim/neovim/issues/12288,\n+# vim/vim#4379 https://github.com/vim/vim/issues/4379.\n+This is because Nvim sets `shortmess+=F` by default. Vim behaves the same way\n+with `set shortmes+=F`. There are plans to improve this, but meanwhile as a\n+workaround, use `set shortmess-=F` or use `unsilent` as follows.\n+>vim\n+    unsilent let var = inputlist(['1. item1', '2. item2'])\n+    autocmd BufNewFile * unsilent echomsg 'The autocmd has been fired.'\n+<\n+\n+G:CLIPBOARD SETTINGS ARE NOT USED. ~\n+\n+If the clipboard provider is already loaded, you will need to reload it after\n+configuration. Use the following configuration.\n+>vim\n+    let g:clipboard = { 'name' : ... }\n+    if exists('g:loaded_clipboard_provider')\n+      unlet g:loaded_clipboard_provider\n+      runtime autoload/provider/clipboard.vim\n+    endif\n+<\n+\n+Or, if you want automatic reloading when assigning to |g:clipboard|, set\n+|init.vim| as follows.\n+>vim\n+    function! s:clipboard_changed(...) abort\n+      if exists('g:loaded_clipboard_provider')\n+        unlet g:loaded_clipboard_provider\n+      endif\n+      runtime autoload/provider/clipboard.vim\n+    endfunction\n+\n+    if !exists('s:loaded\")\n+      call dictwatcheradd(g:, 'clipboard', function('s:clipboard_changed'))\n+    endif\n+    let s:loaded = v:true\n+<\n+\n+==============================================================================\n+Installation issues                               *faq-installation-issues*\n+\n+\n+GENERATING HELPTAGS FAILED ~\n+\n+If re-installation fails with \"Generating helptags failed\", try removing the\n+previously installed runtime directory (if `CMAKE_INSTALL_PREFIX` is not set\n+during building, the default is `/usr/local/share/nvim`):\n+>bash\n+    rm -r /usr/local/share/nvim\n+<\n+\n+==============================================================================\n+Build issues                                             *faq-build-issues*\n+\n+\n+GENERAL BUILD ISSUES ~\n+\n+Run `make distclean && make` to rule out a stale build environment causing the\n+failure.\n+\n+\n+SETTINGS IN LOCAL.MK DON'T TAKE EFFECT ~\n+\n+CMake caches build settings, so you might need to run `rm -r build && make`\n+after modifying `local.mk`.\n+\n+\n+CMAKE ERRORS ~\n+\n+`configure_file Problem configuring file`\n+\n+This is probably a permissions issue, which can happen if you run `make` as the\n+root user, then later run an unprivileged `make`. To fix this, run `rm -rf\n+build` and try again.\n+\n+\n+ANACONDA ERROR ~\n+\n+Error message: `anaconda3/bin/x86_64-conda_cos6-linux-gnu-cc: not found`\n+\n+Solution: `conda install gxx_linux-64` or `conda deactivate`\n+\n+\n+==============================================================================\n+Debug                                                           *faq-debug*\n+\n+\n+BACKTRACE (LINUX) ~\n+\n+Core dumps are disabled by default on Ubuntu\n+https://stackoverflow.com/a/18368068, CentOS and others. To enable core dumps:\n+>bash\n+    ulimit -c unlimited\n+<\n+On systemd-based systems getting a backtrace is as easy as:\n+>bash\n+    coredumpctl -1 gdb\n+<\n+It's an optional tool, so you may need to install it:\n+>bash\n+    sudo apt install systemd-coredump\n+<\n+\n+The full backtrace is most useful, send us the `bt.txt` file:\n+>bash\n+    2>&1 coredumpctl -1 gdb | tee -a bt.txt\n+    thread apply all bt full\n+<\n+On older systems a `core` file will appear in the current directory. To get\n+a backtrace from the `core` file:\n+>bash\n+    gdb build/bin/nvim core 2>&1 | tee backtrace.txt\n+    thread apply all bt full\n+<\n+\n+BACKTRACE (MACOS / OSX) ~\n+\n+If `nvim` crashes, you can see the backtrace in Console.app (under \"Crash\n+Reports\" or \"User Diagnostic Reports\" for older macOS versions).\n+>bash\n+    open -a Console\n+<\n+You may also want to enable core dumps on macOS. To do this, first make sure\n+the `/cores/` directory exists and is writable:\n+>bash\n+    sudo mkdir /cores\n+    sudo chown root:admin /cores\n+    sudo chmod 1775 /cores\n+<\n+Then set the core size limit to `unlimited`:\n+>bash\n+    ulimit -c unlimited\n+<\n+Note that this is done per shell process. If you want to make this the default\n+for all shells, add the above line to your shell's init file (e.g. `~/.bashrc`\n+or similar).\n+\n+You can then open the core file in `lldb`:\n+>bash\n+    lldb -c /cores/core.12345\n+<\n+Apple's documentation archive has some other useful information\n+https://developer.apple.com/library/archive/technotes/tn2124/_index.html#//apple_ref/doc/uid/DTS10003391-CH1-SECCOREDUMPS,\n+but note that some of the things on this page are out of date (such as enabling\n+core dumps with `/etc/launchd.conf`).\n+\n+\n+USING GDB TO STEP THROUGH FUNCTIONAL TESTS ~\n+\n+Use `TEST_TAG` to run tests matching busted tags (of the form `#foo` e.g.\n+`it(\"test #foo ...\", ...)`):\n+>bash\n+    GDB=1 TEST_TAG=foo make functionaltest\n+<\n+Then, in another terminal:\n+>bash\n+    gdb build/bin/nvim\n+    target remote localhost:7777\n+<\n+- See also test/functional/helpers.lua https://github.com/neovim/neovim/blob/3098b18a2b63a841351f6d5e3697cb69db3035ef/test/functional/helpers.lua#L38-L44.\n+\n+\n+USING LLDB TO STEP THROUGH UNIT TESTS ~\n+\n+>bash\n+    lldb .deps/usr/bin/luajit -- .deps/usr/bin/busted --lpath=\"./build/?.lua\" test/unit/\n+<\n+\n+USING GDB ~\n+\n+To attach to a running `nvim` process with a pid of 1234:\n+>bash\n+    gdb -tui -p 1234 build/bin/nvim\n+<\n+The `gdb` interactive prompt will appear. At any time you can:\n+\n+- `break foo` to set a breakpoint on the `foo()` function\n+- `n` to step over the next statement\n+    - `<Enter>` to repeat the last command\n+- `s` to step into the next statement\n+- `c` to continue\n+- `finish` to step out of the current function\n+- `p zub` to print the value of `zub`\n+- `bt` to see a backtrace (callstack) from the current location\n+- `CTRL-x CTRL-a` or `tui enable` to show a TUI view of the source file in the\n+  current debugging context. This can be extremely useful as it avoids the\n+  need for a gdb \"frontend\".\n+- `<up>` and `<down>` to scroll the source file view\n+\n+\n+GDB \"REVERSE DEBUGGING\" ~\n+\n+- `set record full insn-number-max unlimited`\n+- `continue` for a bit (at least until `main()` is executed\n+- `record`\n+- provoke the bug, then use `revert-next`, `reverse-step`, etc. to rewind the\n+  debugger\n+\n+\n+USING GDBSERVER ~\n+\n+You may want to connect multiple `gdb` clients to the same running `nvim`\n+process, or you may want to connect to a remote `nvim` process with a local\n+`gdb`. Using `gdbserver`, you can attach to a single process and control it\n+from multiple `gdb` clients.\n+\n+Open a terminal and start `gdbserver` attached to `nvim` like this:\n+>bash\n+    gdbserver :6666 build/bin/nvim 2> gdbserver.log\n+<\n+`gdbserver` is now listening on port 6666. You then need to attach to this\n+debugging session in another terminal:\n+>bash\n+    gdb build/bin/nvim\n+<\n+Once you've entered `gdb`, you need to attach to the remote session:\n+>\n+    target remote localhost:6666\n+<\n+In case gdbserver puts the TUI as a background process, the TUI can become\n+unable to read input from pty (and receives SIGTTIN signal) and/or output data\n+(SIGTTOU signal). To force the TUI as the foreground process, you can add\n+>\n+    signal (SIGTTOU, SIG_IGN);\n+    if (!tcsetpgrp(data->input.in_fd, getpid())) {\n+        perror(\"tcsetpgrp failed\");\n+    }\n+<\n+to `tui.c:terminfo_start`.\n+\n+\n+USING GDBSERVER IN TMUX ~\n+\n+Consider using a custom makefile\n+https://github.com/neovim/neovim/wiki/Building-Neovim#custom-makefile to\n+quickly start debugging sessions using the `gdbserver` method mentioned above.\n+This example `local.mk` will create the debugging session when you type\n+`make debug`.\n+>make\n+    .PHONY: dbg-start dbg-attach debug build\n+\n+    build:\n+        @$(MAKE) nvim\n+\n+    dbg-start: build\n+        @tmux new-window -n 'dbg-neovim' 'gdbserver :6666 ./build/bin/nvim -D'\n+\n+    dbg-attach:\n+        @tmux new-window -n 'dbg-cgdb' 'cgdb -x gdb_start.sh ./build/bin/nvim'\n+\n+    debug: dbg-start dbg-attach\n+<\n+Here `gdb_start.sh` includes `gdb` commands to be called when the debugger\n+starts. It needs to attach to the server started by the `dbg-start` rule. For\n+example:\n+>\n+    target remote localhost:6666\n+    br main\n+<\n+\n+LOG FILE LOCATION ~\n+\n+Nvim's low-level logs are written to `$XDG_STATE_HOME/nvim/log` by default\n+(typically `.local/state/nvim/log` on Posix platforms), but you can specify\n+the location with the |$NVIM_LOG_FILE| environment variable. Debug builds\n+write INFO-level messages to this log file. Non-debug builds only log\n+ERROR-level messages.\n+\n+\n+==============================================================================\n+Design                                                         *faq-design*\n+\n+\n+WHY NOT USE JSON FOR RPC? ~\n+\n+- JSON cannot easily/efficiently handle binary data\n+- JSON specification is ambiguous: https://seriot.ch/parsing_json.php\n+\n+\n+WHY EMBED LUA INSTEAD OF X? ~\n+\n+- Lua is a very small language, ideal for embedding. The biggest advantage of\n+  Python/Ruby/etc is their huge collection of libraries, but that isn't\n+  relevant for Nvim, where Nvim is the \"batteries included\" library:\n+  introducing another stdlib would be redundant.\n+- Lua 5.1 is a complete language: the syntax is frozen. This is great for\n+  backwards compatibility.\n+- Nvim also uses Lua internally as an alternative to C. Extra performance is\n+  useful there, as opposed to a slow language like Python or Vim9script.\n+- LuaJIT is one of the fastest runtimes on the planet, 10x faster than Python\n+  and \"Vim9script\" https://vimhelp.org/vim9.txt.html, 100x faster than\n+  Vimscript.\n+- Python/JS cost more than Lua in terms of size and portability, and there are\n+  already numerous Python/JS-based editors. So Python/JS would make Nvim\n+  bigger and less portable, in exchange for a non-differentiating feature.\n+\n+See also:\n+\n+- Why Lua https://web.archive.org/web/20150219224654/https://blog.datamules.com/blog/2012/01/30/why-lua/",
            "html_url": "https://github.com/neovim/neovim/pull/26539#discussion_r1425272579",
            "id": 1425272579,
            "line": 445,
            "node_id": "PRRC_kwDOAPphoM5U8-8D",
            "original_commit_id": "529bf20284f9b0dfceb41f49c112b21b36a45a31",
            "original_line": 445,
            "original_position": 645,
            "original_start_line": null,
            "path": "runtime/doc/faq.txt",
            "position": 445,
            "pull_request_review_id": 1779509817,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26539",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425272579/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T12:16:34Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425272579",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26539#discussion_r1425273607"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26539"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425273607"
                }
            },
            "author_association": "MEMBER",
            "body": "Really? It doesn't really mention Lua in any detail. What's good about it?",
            "commit_id": "68718a8e164bebbf8752cc44c203d9db78e23b40",
            "created_at": "2023-12-13T12:17:32Z",
            "diff_hunk": "@@ -0,0 +1,684 @@\n+*faq.txt*\t\t Frequently Asked Questions\n+\n+                            NVIM REFERENCE MANUAL\n+\n+                                  Type |gO| to see the table of contents.\n+\n+==============================================================================\n+General Questions                                 *faq* *faq-general-questions*\n+\n+\n+WHERE SHOULD I PUT MY CONFIG (VIMRC)? ~\n+\n+See |config|; you can copy (or symlink) your existing vimrc. |nvim-from-vim|\n+\n+\n+HOW STABLE IS THE DEVELOPMENT (PRE-RELEASE) VERSION? ~\n+\n+The unstable (pre-release)\n+https://github.com/neovim/neovim/releases/tag/nightly version of Nvim\n+(\"HEAD\", i.e. the `master` branch) is used to aggressively stage new features\n+and changes. It's usually stable, but will occasionally break your workflow.\n+We depend on HEAD users to report \"blind spots\" that were not caught by\n+automated tests.\n+\n+Use the stable (release) https://github.com/neovim/neovim/releases/latest\n+version for a more predictable experience.\n+\n+\n+CAN I USE RUBY-BASED VIM PLUGINS (E.G. LUSTYEXPLORER)? ~\n+\n+Yes, starting with Nvim 0.1.5 PR #4980\n+https://github.com/neovim/neovim/pull/4980 the legacy Vim `if_ruby` interface\n+is supported.\n+\n+\n+CAN I USE LUA-BASED VIM PLUGINS (E.G. NEOCOMPLETE)? ~\n+\n+No. Starting with Nvim 0.2 PR #4411\n+https://github.com/neovim/neovim/pull/4411 Lua is built-in, but the legacy\n+Vim `if_lua` interface is not supported.\n+\n+\n+HOW CAN I USE \"TRUE COLOR\" IN THE TERMINAL? ~\n+\n+Truecolor (24bit colors) are enabled by default if a supporting terminal is\n+detected. If your terminal is not detected but you are sure it supports\n+truecolor, add this to your |init.vim|:\n+>vim\n+    set termguicolors\n+<\n+\n+NVIM SHOWS WEIRD SYMBOLS (`�[2 q`) WHEN CHANGING MODES ~\n+\n+This is a bug in your terminal emulator. It happens because Nvim sends\n+cursor-shape termcodes by default, if the terminal appears to be\n+xterm-compatible (`TERM=xterm-256color`).\n+\n+To workaround the issue, you can:\n+\n+- Use a different terminal emulator\n+- Disable 'guicursor' in your Nvim config: >vim\n+\n+    :set guicursor=\n+    \" Workaround some broken plugins which set guicursor indiscriminately.\n+    :autocmd OptionSet guicursor noautocmd set guicursor=\n+<\n+See also |$TERM| for recommended values of `$TERM`.\n+\n+\n+HOW TO CHANGE CURSOR SHAPE IN THE TERMINAL? ~\n+\n+- For Nvim 0.1.7 or older: see the note about `NVIM_TUI_ENABLE_CURSOR_SHAPE` in `man nvim`.\n+- For Nvim 0.2 or newer: cursor styling is controlled by the 'guicursor' option.\n+    - To _disable_ cursor-styling, set 'guicursor' to empty: >vim\n+\n+            :set guicursor=\n+            \" Workaround some broken plugins which set guicursor indiscriminately.\n+            :autocmd OptionSet guicursor noautocmd set guicursor=\n+<\n+    - If you want a non-blinking cursor, use `blinkon0`. See 'guicursor'.\n+    - 'guicursor' is enabled by default, unless Nvim thinks your terminal doesn't\n+        support it. If you're sure that your terminal supports cursor-shaping, set\n+        'guicursor' in your |init.vim|, as described in 'guicursor'.\n+- The Vim terminal options `t_SI` and `t_EI` are ignored, like all other `t_XX` options.\n+- Old versions of libvte (gnome-terminal, roxterm, terminator, ...) do not\n+  support cursor style control codes. #2537\n+  https://github.com/neovim/neovim/issues/2537\n+\n+\n+HOW TO CHANGE CURSOR COLOR IN THE TERMINAL? ~\n+\n+Cursor styling (shape, color, behavior) is controlled by 'guicursor', even in\n+the terminal. Cursor color (as opposed to shape) only works if\n+'termguicolors' is set.\n+\n+'guicursor' gives an example, but here's a more complicated example\n+which sets different colors in insert-mode and normal-mode:\n+>vim\n+    :set termguicolors\n+    :hi Cursor guifg=green guibg=green\n+    :hi Cursor2 guifg=red guibg=red\n+    :set guicursor=n-v-c:block-Cursor/lCursor,i-ci-ve:ver25-Cursor2/lCursor2,r-cr:hor20,o:hor50\n+<\n+\n+CURSOR STYLE ISN'T RESTORED AFTER EXITING OR SUSPENDING AND RESUMING NVIM ~\n+\n+Terminals do not provide a way to query the cursor style. Use autocommands to\n+manage the cursor style:\n+>vim\n+    au VimEnter,VimResume * set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50\n+      \\,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor\n+      \\,sm:block-blinkwait175-blinkoff150-blinkon175\n+\n+    au VimLeave,VimSuspend * set guicursor=a:block-blinkon0\n+<\n+\n+CURSOR SHAPE DOESN'T CHANGE IN TMUX ~\n+\n+tmux decides that, not Nvim. See |tui-cursor-shape| for a fix.\n+\n+See #3165 https://github.com/neovim/neovim/pull/3165 for discussion.\n+\n+\n+CURSOR FLICKER IN TMUX? ~\n+\n+If cursor `_` appears and disappears very quickly when opening nvim without a\n+document under tmux, and you set |ctermbg| in `EndOfBuffer` and `Normal`, try\n+setting these to `NONE`:\n+>vim\n+    hi EndOfBuffer ctermbg=NONE ctermfg=200 cterm=NONE\n+    hi Normal ctermbg=NONE ctermfg=200 cterm=NONE\n+<\n+\n+WHAT HAPPENED TO --remote AND FRIENDS? ~\n+\n+|--remote| is partly supported. |clientserver|\n+\n+If you require flags from Vim that are missing in Neovim, you can use\n+https://github.com/mhinz/neovim-remote instead.\n+\n+==============================================================================\n+Runtime issues                                         *faq-runtime-issues*\n+\n+\n+COPYING TO X11 PRIMARY SELECTION WITH THE MOUSE DOESN'T WORK ~\n+\n+`clipboard=autoselect` is not implemented yet\n+https://github.com/neovim/neovim/issues/2325. You may find this workaround to\n+be useful:\n+>vim\n+    vnoremap <LeftRelease> \"*ygv\n+    vnoremap <2-LeftRelease> \"*ygv\n+<\n+\n+MY CTRL-H MAPPING DOESN'T WORK ~\n+\n+This was fixed in Nvim 0.2. If you are running Nvim 0.1.7 or older,\n+adjust your terminal's \"kbs\" (key_backspace) terminfo entry:\n+>vim\n+    infocmp $TERM | sed 's/kbs=^[hH]/kbs=\\\\177/' > $TERM.ti\n+    tic $TERM.ti\n+<\n+(Feel free to delete the temporary `*.ti` file created after running the above\n+commands).\n+\n+\n+<HOME> OR SOME OTHER \"SPECIAL\" KEY DOESN'T WORK ~\n+\n+Make sure |$TERM| is set correctly.\n+\n+- For screen or tmux, `$TERM` should be `screen-256color` (not `xterm-256color`!)\n+- In other cases if \"256\" does not appear in the string it's probably wrong.\n+  Try `TERM=xterm-256color`.\n+\n+\n+:! AND SYSTEM() DO WEIRD THINGS WITH INTERACTIVE PROCESSES ~\n+\n+Interactive commands are supported by |:terminal| in Nvim. But |:!| and\n+|system()| do not support interactive commands, primarily because Nvim UIs use\n+stdio for msgpack communication, but also for performance, reliability, and\n+consistency across platforms (see\n+https://vimhelp.org/gui_x11.txt.html#gui-pty).\n+\n+See also #1496 https://github.com/neovim/neovim/issues/1496 and #8217\n+https://github.com/neovim/neovim/issues/8217#issuecomment-402152307.\n+\n+\n+PYTHON SUPPORT ISN'T WORKING ~\n+\n+Run |:checkhealth| in Nvim for automatic diagnosis.\n+\n+Other hints:\n+\n+- The python `neovim` module was renamed to `pynvim` (long ago).\n+- If you're using pyenv or virtualenv for the `pynvim` module\n+    https://pypi.python.org/pypi/pynvim/, you must set `g:python3_host_prog` to\n+    the virtualenv's interpreter path.\n+- Read |provider-python|.\n+- Be sure you have the latest version of the `pynvim` Python module: >bash\n+\n+    python -m pip install setuptools\n+    python -m pip install --upgrade pynvim\n+    python3 -m pip install --upgrade pynvim\n+<\n+- Try with `nvim -u NORC` to make sure your config (|init.vim|) isn't causing a\n+    problem. If you get `E117: Unknown function`, that means there's a runtime\n+    issue: |faq-runtime-issues|.\n+\n+\n+:CHECKHEALTH REPORTS E5009: INVALID $VIMRUNTIME ~\n+\n+This means `health#check()` couldn't load, which suggests that |$VIMRUNTIME|\n+or 'runtimepath' is broken.\n+\n+- |$VIMRUNTIME| must point to Nvim's runtime files, not Vim's.\n+- The |$VIMRUNTIME| directory contents should be readable by the current user.\n+- Verify that `:echo &runtimepath` contains the $VIMRUNTIME path.\n+- Check the output of: >vim\n+\n+    :call health#check()\n+    :verbose func health#check\n+<\n+\n+NEOVIM CAN'T FIND ITS RUNTIME ~\n+\n+This is the case if `:help nvim` shows `E149: Sorry, no help for nvim`.\n+\n+Make sure that |$VIM| and |$VIMRUNTIME| point to Nvim's (as opposed to\n+Vim's) runtime by checking `:echo $VIM` and `:echo $VIMRUNTIME`. This should\n+give something like `/usr/share/nvim` resp. `/usr/share/nvim/runtime`.\n+\n+Also make sure that you don't accidentally overwrite your runtimepath\n+(`:set runtimepath?`), which includes the above |$VIMRUNTIME| by default (see\n+'runtimepath').\n+\n+\n+E518: UNKNOWN OPTION: [OPTION] ~\n+\n+Some very old/unnecessary options have been removed from Nvim. See\n+|nvim-removed| for the complete list.\n+\n+\n+NEOVIM IS SLOW ~\n+\n+\n+Use a fast terminal emulator:\n+\n+- kitty https://github.com/kovidgoyal/kitty\n+- alacritty https://github.com/jwilm/alacritty\n+\n+\n+Use an optimized build:\n+\n+`:checkhealth nvim` should report one of these \"build types\":\n+>\n+    Build type: RelWithDebInfo\n+    Build type: MinSizeRel\n+    Build type: Release\n+<\n+If it reports `Build type: Debug` and you're building Nvim from source, see\n+https://github.com/neovim/neovim/wiki/Building-Neovim.\n+\n+\n+COLORS AREN'T DISPLAYED CORRECTLY ~\n+\n+Ensure that |$TERM| is set correctly.\n+\n+From a shell, run `TERM=xterm-256color nvim`. If colors are displayed\n+correctly, then export that value of `TERM` in your user profile (usually\n+`~/.profile`):\n+>bash\n+    export TERM=xterm-256color\n+<\n+If you're using `tmux`, instead add this to your `tmux.conf`:\n+>bash\n+    set -g default-terminal \"tmux-256color\"\n+<\n+\n+For GNU `screen`, configure your `.screenrc`\n+<https://wiki.archlinux.org/index.php/GNU_Screen#Use_256_colors>:\n+>\n+    term screen-256color\n+<\n+\n+NOTE: Nvim ignores `t_Co` and other terminal codes.\n+\n+\n+NEOVIM CAN'T READ UTF-8 CHARACTERS ~\n+\n+Run the following from the command line:\n+>bash\n+    locale | grep -E '(LANG|LC_CTYPE|LC_ALL)=(.*\\.)?(UTF|utf)-?8'\n+<\n+If there's no results, then you might not be using a UTF-8 locale. See the\n+following issues:\n+#1601 https://github.com/neovim/neovim/issues/1601\n+#1858 https://github.com/neovim/neovim/issues/1858\n+#2386 https://github.com/neovim/neovim/issues/2386\n+\n+\n+ESC IN TMUX OR GNU SCREEN IS DELAYED ~\n+\n+This is a common problem\n+https://www.google.com/?q=tmux%20vim%20escape%20delay in `tmux` / `screen`\n+(see also tmux/#131\n+https://github.com/tmux/tmux/issues/131#issuecomment-145853211). The\n+corresponding timeout needs to be tweaked to a low value (10-20ms).\n+\n+`.tmux.conf`:\n+>\n+    set -g escape-time 10\n+    # Or for tmux >= 2.6\n+    set -sg escape-time 10\n+<\n+`.screenrc`:\n+>\n+    maptimeout 10\n+<\n+\n+\"WHY DOESN'T THIS HAPPEN IN VIM?\"\n+\n+It does happen (try `vim -N -u NONE`), but if you hit a key quickly after\n+ESC_ then Vim interprets the ESC as ESC instead of ALT (META). You won't\n+notice the delay unless you closely observe the cursor. The tradeoff is that\n+Vim won't understand ALT (META) key-chords, so for example `nnoremap <M-a>`\n+won't work. ALT (META) key-chords always work in Nvim. See also `:help\n+xterm-cursor-keys` in Vim.\n+\n+Nvim 0.3 mimics the Vim behavior while still fully supporting ALT mappings. See\n+|i_ALT|.\n+\n+\n+ESC IN GNU SCREEN IS LOST WHEN MOUSE MODE IS ENABLED ~\n+\n+This happens because of a bug in screen https://savannah.gnu.org/bugs/?60196:\n+in mouse mode, screen assumes that `ESC` is part of a mouse sequence and will\n+wait an unlimited time for the rest of the sequence, regardless of\n+`maptimeout`. Until it's fixed in screen, there's no known workaround for\n+this other than double-pressing escape, which causes a single escape to be\n+passed through to Nvim.\n+\n+\n+CALLING INPUTLIST(), ECHOMSG, ... IN FILETYPE PLUGINS AND AUTOCMD DOES NOT WORK ~\n+\n+#10008 https://github.com/neovim/neovim/issues/10008,\n+#10116 https://github.com/neovim/neovim/issues/10116,\n+#12288 https://github.com/neovim/neovim/issues/12288,\n+# vim/vim#4379 https://github.com/vim/vim/issues/4379.\n+This is because Nvim sets `shortmess+=F` by default. Vim behaves the same way\n+with `set shortmes+=F`. There are plans to improve this, but meanwhile as a\n+workaround, use `set shortmess-=F` or use `unsilent` as follows.\n+>vim\n+    unsilent let var = inputlist(['1. item1', '2. item2'])\n+    autocmd BufNewFile * unsilent echomsg 'The autocmd has been fired.'\n+<\n+\n+G:CLIPBOARD SETTINGS ARE NOT USED. ~\n+\n+If the clipboard provider is already loaded, you will need to reload it after\n+configuration. Use the following configuration.\n+>vim\n+    let g:clipboard = { 'name' : ... }\n+    if exists('g:loaded_clipboard_provider')\n+      unlet g:loaded_clipboard_provider\n+      runtime autoload/provider/clipboard.vim\n+    endif\n+<\n+\n+Or, if you want automatic reloading when assigning to |g:clipboard|, set\n+|init.vim| as follows.\n+>vim\n+    function! s:clipboard_changed(...) abort\n+      if exists('g:loaded_clipboard_provider')\n+        unlet g:loaded_clipboard_provider\n+      endif\n+      runtime autoload/provider/clipboard.vim\n+    endfunction\n+\n+    if !exists('s:loaded\")\n+      call dictwatcheradd(g:, 'clipboard', function('s:clipboard_changed'))\n+    endif\n+    let s:loaded = v:true\n+<\n+\n+==============================================================================\n+Installation issues                               *faq-installation-issues*\n+\n+\n+GENERATING HELPTAGS FAILED ~\n+\n+If re-installation fails with \"Generating helptags failed\", try removing the\n+previously installed runtime directory (if `CMAKE_INSTALL_PREFIX` is not set\n+during building, the default is `/usr/local/share/nvim`):\n+>bash\n+    rm -r /usr/local/share/nvim\n+<\n+\n+==============================================================================\n+Build issues                                             *faq-build-issues*\n+\n+\n+GENERAL BUILD ISSUES ~\n+\n+Run `make distclean && make` to rule out a stale build environment causing the\n+failure.\n+\n+\n+SETTINGS IN LOCAL.MK DON'T TAKE EFFECT ~\n+\n+CMake caches build settings, so you might need to run `rm -r build && make`\n+after modifying `local.mk`.\n+\n+\n+CMAKE ERRORS ~\n+\n+`configure_file Problem configuring file`\n+\n+This is probably a permissions issue, which can happen if you run `make` as the\n+root user, then later run an unprivileged `make`. To fix this, run `rm -rf\n+build` and try again.\n+\n+\n+ANACONDA ERROR ~\n+\n+Error message: `anaconda3/bin/x86_64-conda_cos6-linux-gnu-cc: not found`\n+\n+Solution: `conda install gxx_linux-64` or `conda deactivate`\n+\n+\n+==============================================================================\n+Debug                                                           *faq-debug*\n+\n+\n+BACKTRACE (LINUX) ~\n+\n+Core dumps are disabled by default on Ubuntu\n+https://stackoverflow.com/a/18368068, CentOS and others. To enable core dumps:\n+>bash\n+    ulimit -c unlimited\n+<\n+On systemd-based systems getting a backtrace is as easy as:\n+>bash\n+    coredumpctl -1 gdb\n+<\n+It's an optional tool, so you may need to install it:\n+>bash\n+    sudo apt install systemd-coredump\n+<\n+\n+The full backtrace is most useful, send us the `bt.txt` file:\n+>bash\n+    2>&1 coredumpctl -1 gdb | tee -a bt.txt\n+    thread apply all bt full\n+<\n+On older systems a `core` file will appear in the current directory. To get\n+a backtrace from the `core` file:\n+>bash\n+    gdb build/bin/nvim core 2>&1 | tee backtrace.txt\n+    thread apply all bt full\n+<\n+\n+BACKTRACE (MACOS / OSX) ~\n+\n+If `nvim` crashes, you can see the backtrace in Console.app (under \"Crash\n+Reports\" or \"User Diagnostic Reports\" for older macOS versions).\n+>bash\n+    open -a Console\n+<\n+You may also want to enable core dumps on macOS. To do this, first make sure\n+the `/cores/` directory exists and is writable:\n+>bash\n+    sudo mkdir /cores\n+    sudo chown root:admin /cores\n+    sudo chmod 1775 /cores\n+<\n+Then set the core size limit to `unlimited`:\n+>bash\n+    ulimit -c unlimited\n+<\n+Note that this is done per shell process. If you want to make this the default\n+for all shells, add the above line to your shell's init file (e.g. `~/.bashrc`\n+or similar).\n+\n+You can then open the core file in `lldb`:\n+>bash\n+    lldb -c /cores/core.12345\n+<\n+Apple's documentation archive has some other useful information\n+https://developer.apple.com/library/archive/technotes/tn2124/_index.html#//apple_ref/doc/uid/DTS10003391-CH1-SECCOREDUMPS,\n+but note that some of the things on this page are out of date (such as enabling\n+core dumps with `/etc/launchd.conf`).\n+\n+\n+USING GDB TO STEP THROUGH FUNCTIONAL TESTS ~\n+\n+Use `TEST_TAG` to run tests matching busted tags (of the form `#foo` e.g.\n+`it(\"test #foo ...\", ...)`):\n+>bash\n+    GDB=1 TEST_TAG=foo make functionaltest\n+<\n+Then, in another terminal:\n+>bash\n+    gdb build/bin/nvim\n+    target remote localhost:7777\n+<\n+- See also test/functional/helpers.lua https://github.com/neovim/neovim/blob/3098b18a2b63a841351f6d5e3697cb69db3035ef/test/functional/helpers.lua#L38-L44.\n+\n+\n+USING LLDB TO STEP THROUGH UNIT TESTS ~\n+\n+>bash\n+    lldb .deps/usr/bin/luajit -- .deps/usr/bin/busted --lpath=\"./build/?.lua\" test/unit/\n+<\n+\n+USING GDB ~\n+\n+To attach to a running `nvim` process with a pid of 1234:\n+>bash\n+    gdb -tui -p 1234 build/bin/nvim\n+<\n+The `gdb` interactive prompt will appear. At any time you can:\n+\n+- `break foo` to set a breakpoint on the `foo()` function\n+- `n` to step over the next statement\n+    - `<Enter>` to repeat the last command\n+- `s` to step into the next statement\n+- `c` to continue\n+- `finish` to step out of the current function\n+- `p zub` to print the value of `zub`\n+- `bt` to see a backtrace (callstack) from the current location\n+- `CTRL-x CTRL-a` or `tui enable` to show a TUI view of the source file in the\n+  current debugging context. This can be extremely useful as it avoids the\n+  need for a gdb \"frontend\".\n+- `<up>` and `<down>` to scroll the source file view\n+\n+\n+GDB \"REVERSE DEBUGGING\" ~\n+\n+- `set record full insn-number-max unlimited`\n+- `continue` for a bit (at least until `main()` is executed\n+- `record`\n+- provoke the bug, then use `revert-next`, `reverse-step`, etc. to rewind the\n+  debugger\n+\n+\n+USING GDBSERVER ~\n+\n+You may want to connect multiple `gdb` clients to the same running `nvim`\n+process, or you may want to connect to a remote `nvim` process with a local\n+`gdb`. Using `gdbserver`, you can attach to a single process and control it\n+from multiple `gdb` clients.\n+\n+Open a terminal and start `gdbserver` attached to `nvim` like this:\n+>bash\n+    gdbserver :6666 build/bin/nvim 2> gdbserver.log\n+<\n+`gdbserver` is now listening on port 6666. You then need to attach to this\n+debugging session in another terminal:\n+>bash\n+    gdb build/bin/nvim\n+<\n+Once you've entered `gdb`, you need to attach to the remote session:\n+>\n+    target remote localhost:6666\n+<\n+In case gdbserver puts the TUI as a background process, the TUI can become\n+unable to read input from pty (and receives SIGTTIN signal) and/or output data\n+(SIGTTOU signal). To force the TUI as the foreground process, you can add\n+>\n+    signal (SIGTTOU, SIG_IGN);\n+    if (!tcsetpgrp(data->input.in_fd, getpid())) {\n+        perror(\"tcsetpgrp failed\");\n+    }\n+<\n+to `tui.c:terminfo_start`.\n+\n+\n+USING GDBSERVER IN TMUX ~\n+\n+Consider using a custom makefile\n+https://github.com/neovim/neovim/wiki/Building-Neovim#custom-makefile to\n+quickly start debugging sessions using the `gdbserver` method mentioned above.\n+This example `local.mk` will create the debugging session when you type\n+`make debug`.\n+>make\n+    .PHONY: dbg-start dbg-attach debug build\n+\n+    build:\n+        @$(MAKE) nvim\n+\n+    dbg-start: build\n+        @tmux new-window -n 'dbg-neovim' 'gdbserver :6666 ./build/bin/nvim -D'\n+\n+    dbg-attach:\n+        @tmux new-window -n 'dbg-cgdb' 'cgdb -x gdb_start.sh ./build/bin/nvim'\n+\n+    debug: dbg-start dbg-attach\n+<\n+Here `gdb_start.sh` includes `gdb` commands to be called when the debugger\n+starts. It needs to attach to the server started by the `dbg-start` rule. For\n+example:\n+>\n+    target remote localhost:6666\n+    br main\n+<\n+\n+LOG FILE LOCATION ~\n+\n+Nvim's low-level logs are written to `$XDG_STATE_HOME/nvim/log` by default\n+(typically `.local/state/nvim/log` on Posix platforms), but you can specify\n+the location with the |$NVIM_LOG_FILE| environment variable. Debug builds\n+write INFO-level messages to this log file. Non-debug builds only log\n+ERROR-level messages.\n+\n+\n+==============================================================================\n+Design                                                         *faq-design*\n+\n+\n+WHY NOT USE JSON FOR RPC? ~\n+\n+- JSON cannot easily/efficiently handle binary data\n+- JSON specification is ambiguous: https://seriot.ch/parsing_json.php\n+\n+\n+WHY EMBED LUA INSTEAD OF X? ~\n+\n+- Lua is a very small language, ideal for embedding. The biggest advantage of\n+  Python/Ruby/etc is their huge collection of libraries, but that isn't\n+  relevant for Nvim, where Nvim is the \"batteries included\" library:\n+  introducing another stdlib would be redundant.\n+- Lua 5.1 is a complete language: the syntax is frozen. This is great for\n+  backwards compatibility.\n+- Nvim also uses Lua internally as an alternative to C. Extra performance is\n+  useful there, as opposed to a slow language like Python or Vim9script.\n+- LuaJIT is one of the fastest runtimes on the planet, 10x faster than Python\n+  and \"Vim9script\" https://vimhelp.org/vim9.txt.html, 100x faster than\n+  Vimscript.\n+- Python/JS cost more than Lua in terms of size and portability, and there are\n+  already numerous Python/JS-based editors. So Python/JS would make Nvim\n+  bigger and less portable, in exchange for a non-differentiating feature.\n+\n+See also:\n+\n+- Why Lua https://web.archive.org/web/20150219224654/https://blog.datamules.com/blog/2012/01/30/why-lua/",
            "html_url": "https://github.com/neovim/neovim/pull/26539#discussion_r1425273607",
            "id": 1425273607,
            "in_reply_to_id": 1425272579,
            "line": 445,
            "node_id": "PRRC_kwDOAPphoM5U8_MH",
            "original_commit_id": "529bf20284f9b0dfceb41f49c112b21b36a45a31",
            "original_line": 445,
            "original_position": 645,
            "original_start_line": null,
            "path": "runtime/doc/faq.txt",
            "position": 445,
            "pull_request_review_id": 1779511437,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26539",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425273607/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T12:17:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425273607",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26539#discussion_r1425282791"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26539"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425282791"
                }
            },
            "author_association": "MEMBER",
            "body": "similar architecture as Nvim, similar strategy for batching work and avoiding a big RPC API",
            "commit_id": "68718a8e164bebbf8752cc44c203d9db78e23b40",
            "created_at": "2023-12-13T12:24:47Z",
            "diff_hunk": "@@ -0,0 +1,684 @@\n+*faq.txt*\t\t Frequently Asked Questions\n+\n+                            NVIM REFERENCE MANUAL\n+\n+                                  Type |gO| to see the table of contents.\n+\n+==============================================================================\n+General Questions                                 *faq* *faq-general-questions*\n+\n+\n+WHERE SHOULD I PUT MY CONFIG (VIMRC)? ~\n+\n+See |config|; you can copy (or symlink) your existing vimrc. |nvim-from-vim|\n+\n+\n+HOW STABLE IS THE DEVELOPMENT (PRE-RELEASE) VERSION? ~\n+\n+The unstable (pre-release)\n+https://github.com/neovim/neovim/releases/tag/nightly version of Nvim\n+(\"HEAD\", i.e. the `master` branch) is used to aggressively stage new features\n+and changes. It's usually stable, but will occasionally break your workflow.\n+We depend on HEAD users to report \"blind spots\" that were not caught by\n+automated tests.\n+\n+Use the stable (release) https://github.com/neovim/neovim/releases/latest\n+version for a more predictable experience.\n+\n+\n+CAN I USE RUBY-BASED VIM PLUGINS (E.G. LUSTYEXPLORER)? ~\n+\n+Yes, starting with Nvim 0.1.5 PR #4980\n+https://github.com/neovim/neovim/pull/4980 the legacy Vim `if_ruby` interface\n+is supported.\n+\n+\n+CAN I USE LUA-BASED VIM PLUGINS (E.G. NEOCOMPLETE)? ~\n+\n+No. Starting with Nvim 0.2 PR #4411\n+https://github.com/neovim/neovim/pull/4411 Lua is built-in, but the legacy\n+Vim `if_lua` interface is not supported.\n+\n+\n+HOW CAN I USE \"TRUE COLOR\" IN THE TERMINAL? ~\n+\n+Truecolor (24bit colors) are enabled by default if a supporting terminal is\n+detected. If your terminal is not detected but you are sure it supports\n+truecolor, add this to your |init.vim|:\n+>vim\n+    set termguicolors\n+<\n+\n+NVIM SHOWS WEIRD SYMBOLS (`�[2 q`) WHEN CHANGING MODES ~\n+\n+This is a bug in your terminal emulator. It happens because Nvim sends\n+cursor-shape termcodes by default, if the terminal appears to be\n+xterm-compatible (`TERM=xterm-256color`).\n+\n+To workaround the issue, you can:\n+\n+- Use a different terminal emulator\n+- Disable 'guicursor' in your Nvim config: >vim\n+\n+    :set guicursor=\n+    \" Workaround some broken plugins which set guicursor indiscriminately.\n+    :autocmd OptionSet guicursor noautocmd set guicursor=\n+<\n+See also |$TERM| for recommended values of `$TERM`.\n+\n+\n+HOW TO CHANGE CURSOR SHAPE IN THE TERMINAL? ~\n+\n+- For Nvim 0.1.7 or older: see the note about `NVIM_TUI_ENABLE_CURSOR_SHAPE` in `man nvim`.\n+- For Nvim 0.2 or newer: cursor styling is controlled by the 'guicursor' option.\n+    - To _disable_ cursor-styling, set 'guicursor' to empty: >vim\n+\n+            :set guicursor=\n+            \" Workaround some broken plugins which set guicursor indiscriminately.\n+            :autocmd OptionSet guicursor noautocmd set guicursor=\n+<\n+    - If you want a non-blinking cursor, use `blinkon0`. See 'guicursor'.\n+    - 'guicursor' is enabled by default, unless Nvim thinks your terminal doesn't\n+        support it. If you're sure that your terminal supports cursor-shaping, set\n+        'guicursor' in your |init.vim|, as described in 'guicursor'.\n+- The Vim terminal options `t_SI` and `t_EI` are ignored, like all other `t_XX` options.\n+- Old versions of libvte (gnome-terminal, roxterm, terminator, ...) do not\n+  support cursor style control codes. #2537\n+  https://github.com/neovim/neovim/issues/2537\n+\n+\n+HOW TO CHANGE CURSOR COLOR IN THE TERMINAL? ~\n+\n+Cursor styling (shape, color, behavior) is controlled by 'guicursor', even in\n+the terminal. Cursor color (as opposed to shape) only works if\n+'termguicolors' is set.\n+\n+'guicursor' gives an example, but here's a more complicated example\n+which sets different colors in insert-mode and normal-mode:\n+>vim\n+    :set termguicolors\n+    :hi Cursor guifg=green guibg=green\n+    :hi Cursor2 guifg=red guibg=red\n+    :set guicursor=n-v-c:block-Cursor/lCursor,i-ci-ve:ver25-Cursor2/lCursor2,r-cr:hor20,o:hor50\n+<\n+\n+CURSOR STYLE ISN'T RESTORED AFTER EXITING OR SUSPENDING AND RESUMING NVIM ~\n+\n+Terminals do not provide a way to query the cursor style. Use autocommands to\n+manage the cursor style:\n+>vim\n+    au VimEnter,VimResume * set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50\n+      \\,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor\n+      \\,sm:block-blinkwait175-blinkoff150-blinkon175\n+\n+    au VimLeave,VimSuspend * set guicursor=a:block-blinkon0\n+<\n+\n+CURSOR SHAPE DOESN'T CHANGE IN TMUX ~\n+\n+tmux decides that, not Nvim. See |tui-cursor-shape| for a fix.\n+\n+See #3165 https://github.com/neovim/neovim/pull/3165 for discussion.\n+\n+\n+CURSOR FLICKER IN TMUX? ~\n+\n+If cursor `_` appears and disappears very quickly when opening nvim without a\n+document under tmux, and you set |ctermbg| in `EndOfBuffer` and `Normal`, try\n+setting these to `NONE`:\n+>vim\n+    hi EndOfBuffer ctermbg=NONE ctermfg=200 cterm=NONE\n+    hi Normal ctermbg=NONE ctermfg=200 cterm=NONE\n+<\n+\n+WHAT HAPPENED TO --remote AND FRIENDS? ~\n+\n+|--remote| is partly supported. |clientserver|\n+\n+If you require flags from Vim that are missing in Neovim, you can use\n+https://github.com/mhinz/neovim-remote instead.\n+\n+==============================================================================\n+Runtime issues                                         *faq-runtime-issues*\n+\n+\n+COPYING TO X11 PRIMARY SELECTION WITH THE MOUSE DOESN'T WORK ~\n+\n+`clipboard=autoselect` is not implemented yet\n+https://github.com/neovim/neovim/issues/2325. You may find this workaround to\n+be useful:\n+>vim\n+    vnoremap <LeftRelease> \"*ygv\n+    vnoremap <2-LeftRelease> \"*ygv\n+<\n+\n+MY CTRL-H MAPPING DOESN'T WORK ~\n+\n+This was fixed in Nvim 0.2. If you are running Nvim 0.1.7 or older,\n+adjust your terminal's \"kbs\" (key_backspace) terminfo entry:\n+>vim\n+    infocmp $TERM | sed 's/kbs=^[hH]/kbs=\\\\177/' > $TERM.ti\n+    tic $TERM.ti\n+<\n+(Feel free to delete the temporary `*.ti` file created after running the above\n+commands).\n+\n+\n+<HOME> OR SOME OTHER \"SPECIAL\" KEY DOESN'T WORK ~\n+\n+Make sure |$TERM| is set correctly.\n+\n+- For screen or tmux, `$TERM` should be `screen-256color` (not `xterm-256color`!)\n+- In other cases if \"256\" does not appear in the string it's probably wrong.\n+  Try `TERM=xterm-256color`.\n+\n+\n+:! AND SYSTEM() DO WEIRD THINGS WITH INTERACTIVE PROCESSES ~\n+\n+Interactive commands are supported by |:terminal| in Nvim. But |:!| and\n+|system()| do not support interactive commands, primarily because Nvim UIs use\n+stdio for msgpack communication, but also for performance, reliability, and\n+consistency across platforms (see\n+https://vimhelp.org/gui_x11.txt.html#gui-pty).\n+\n+See also #1496 https://github.com/neovim/neovim/issues/1496 and #8217\n+https://github.com/neovim/neovim/issues/8217#issuecomment-402152307.\n+\n+\n+PYTHON SUPPORT ISN'T WORKING ~\n+\n+Run |:checkhealth| in Nvim for automatic diagnosis.\n+\n+Other hints:\n+\n+- The python `neovim` module was renamed to `pynvim` (long ago).\n+- If you're using pyenv or virtualenv for the `pynvim` module\n+    https://pypi.python.org/pypi/pynvim/, you must set `g:python3_host_prog` to\n+    the virtualenv's interpreter path.\n+- Read |provider-python|.\n+- Be sure you have the latest version of the `pynvim` Python module: >bash\n+\n+    python -m pip install setuptools\n+    python -m pip install --upgrade pynvim\n+    python3 -m pip install --upgrade pynvim\n+<\n+- Try with `nvim -u NORC` to make sure your config (|init.vim|) isn't causing a\n+    problem. If you get `E117: Unknown function`, that means there's a runtime\n+    issue: |faq-runtime-issues|.\n+\n+\n+:CHECKHEALTH REPORTS E5009: INVALID $VIMRUNTIME ~\n+\n+This means `health#check()` couldn't load, which suggests that |$VIMRUNTIME|\n+or 'runtimepath' is broken.\n+\n+- |$VIMRUNTIME| must point to Nvim's runtime files, not Vim's.\n+- The |$VIMRUNTIME| directory contents should be readable by the current user.\n+- Verify that `:echo &runtimepath` contains the $VIMRUNTIME path.\n+- Check the output of: >vim\n+\n+    :call health#check()\n+    :verbose func health#check\n+<\n+\n+NEOVIM CAN'T FIND ITS RUNTIME ~\n+\n+This is the case if `:help nvim` shows `E149: Sorry, no help for nvim`.\n+\n+Make sure that |$VIM| and |$VIMRUNTIME| point to Nvim's (as opposed to\n+Vim's) runtime by checking `:echo $VIM` and `:echo $VIMRUNTIME`. This should\n+give something like `/usr/share/nvim` resp. `/usr/share/nvim/runtime`.\n+\n+Also make sure that you don't accidentally overwrite your runtimepath\n+(`:set runtimepath?`), which includes the above |$VIMRUNTIME| by default (see\n+'runtimepath').\n+\n+\n+E518: UNKNOWN OPTION: [OPTION] ~\n+\n+Some very old/unnecessary options have been removed from Nvim. See\n+|nvim-removed| for the complete list.\n+\n+\n+NEOVIM IS SLOW ~\n+\n+\n+Use a fast terminal emulator:\n+\n+- kitty https://github.com/kovidgoyal/kitty\n+- alacritty https://github.com/jwilm/alacritty\n+\n+\n+Use an optimized build:\n+\n+`:checkhealth nvim` should report one of these \"build types\":\n+>\n+    Build type: RelWithDebInfo\n+    Build type: MinSizeRel\n+    Build type: Release\n+<\n+If it reports `Build type: Debug` and you're building Nvim from source, see\n+https://github.com/neovim/neovim/wiki/Building-Neovim.\n+\n+\n+COLORS AREN'T DISPLAYED CORRECTLY ~\n+\n+Ensure that |$TERM| is set correctly.\n+\n+From a shell, run `TERM=xterm-256color nvim`. If colors are displayed\n+correctly, then export that value of `TERM` in your user profile (usually\n+`~/.profile`):\n+>bash\n+    export TERM=xterm-256color\n+<\n+If you're using `tmux`, instead add this to your `tmux.conf`:\n+>bash\n+    set -g default-terminal \"tmux-256color\"\n+<\n+\n+For GNU `screen`, configure your `.screenrc`\n+<https://wiki.archlinux.org/index.php/GNU_Screen#Use_256_colors>:\n+>\n+    term screen-256color\n+<\n+\n+NOTE: Nvim ignores `t_Co` and other terminal codes.\n+\n+\n+NEOVIM CAN'T READ UTF-8 CHARACTERS ~\n+\n+Run the following from the command line:\n+>bash\n+    locale | grep -E '(LANG|LC_CTYPE|LC_ALL)=(.*\\.)?(UTF|utf)-?8'\n+<\n+If there's no results, then you might not be using a UTF-8 locale. See the\n+following issues:\n+#1601 https://github.com/neovim/neovim/issues/1601\n+#1858 https://github.com/neovim/neovim/issues/1858\n+#2386 https://github.com/neovim/neovim/issues/2386\n+\n+\n+ESC IN TMUX OR GNU SCREEN IS DELAYED ~\n+\n+This is a common problem\n+https://www.google.com/?q=tmux%20vim%20escape%20delay in `tmux` / `screen`\n+(see also tmux/#131\n+https://github.com/tmux/tmux/issues/131#issuecomment-145853211). The\n+corresponding timeout needs to be tweaked to a low value (10-20ms).\n+\n+`.tmux.conf`:\n+>\n+    set -g escape-time 10\n+    # Or for tmux >= 2.6\n+    set -sg escape-time 10\n+<\n+`.screenrc`:\n+>\n+    maptimeout 10\n+<\n+\n+\"WHY DOESN'T THIS HAPPEN IN VIM?\"\n+\n+It does happen (try `vim -N -u NONE`), but if you hit a key quickly after\n+ESC_ then Vim interprets the ESC as ESC instead of ALT (META). You won't\n+notice the delay unless you closely observe the cursor. The tradeoff is that\n+Vim won't understand ALT (META) key-chords, so for example `nnoremap <M-a>`\n+won't work. ALT (META) key-chords always work in Nvim. See also `:help\n+xterm-cursor-keys` in Vim.\n+\n+Nvim 0.3 mimics the Vim behavior while still fully supporting ALT mappings. See\n+|i_ALT|.\n+\n+\n+ESC IN GNU SCREEN IS LOST WHEN MOUSE MODE IS ENABLED ~\n+\n+This happens because of a bug in screen https://savannah.gnu.org/bugs/?60196:\n+in mouse mode, screen assumes that `ESC` is part of a mouse sequence and will\n+wait an unlimited time for the rest of the sequence, regardless of\n+`maptimeout`. Until it's fixed in screen, there's no known workaround for\n+this other than double-pressing escape, which causes a single escape to be\n+passed through to Nvim.\n+\n+\n+CALLING INPUTLIST(), ECHOMSG, ... IN FILETYPE PLUGINS AND AUTOCMD DOES NOT WORK ~\n+\n+#10008 https://github.com/neovim/neovim/issues/10008,\n+#10116 https://github.com/neovim/neovim/issues/10116,\n+#12288 https://github.com/neovim/neovim/issues/12288,\n+# vim/vim#4379 https://github.com/vim/vim/issues/4379.\n+This is because Nvim sets `shortmess+=F` by default. Vim behaves the same way\n+with `set shortmes+=F`. There are plans to improve this, but meanwhile as a\n+workaround, use `set shortmess-=F` or use `unsilent` as follows.\n+>vim\n+    unsilent let var = inputlist(['1. item1', '2. item2'])\n+    autocmd BufNewFile * unsilent echomsg 'The autocmd has been fired.'\n+<\n+\n+G:CLIPBOARD SETTINGS ARE NOT USED. ~\n+\n+If the clipboard provider is already loaded, you will need to reload it after\n+configuration. Use the following configuration.\n+>vim\n+    let g:clipboard = { 'name' : ... }\n+    if exists('g:loaded_clipboard_provider')\n+      unlet g:loaded_clipboard_provider\n+      runtime autoload/provider/clipboard.vim\n+    endif\n+<\n+\n+Or, if you want automatic reloading when assigning to |g:clipboard|, set\n+|init.vim| as follows.\n+>vim\n+    function! s:clipboard_changed(...) abort\n+      if exists('g:loaded_clipboard_provider')\n+        unlet g:loaded_clipboard_provider\n+      endif\n+      runtime autoload/provider/clipboard.vim\n+    endfunction\n+\n+    if !exists('s:loaded\")\n+      call dictwatcheradd(g:, 'clipboard', function('s:clipboard_changed'))\n+    endif\n+    let s:loaded = v:true\n+<\n+\n+==============================================================================\n+Installation issues                               *faq-installation-issues*\n+\n+\n+GENERATING HELPTAGS FAILED ~\n+\n+If re-installation fails with \"Generating helptags failed\", try removing the\n+previously installed runtime directory (if `CMAKE_INSTALL_PREFIX` is not set\n+during building, the default is `/usr/local/share/nvim`):\n+>bash\n+    rm -r /usr/local/share/nvim\n+<\n+\n+==============================================================================\n+Build issues                                             *faq-build-issues*\n+\n+\n+GENERAL BUILD ISSUES ~\n+\n+Run `make distclean && make` to rule out a stale build environment causing the\n+failure.\n+\n+\n+SETTINGS IN LOCAL.MK DON'T TAKE EFFECT ~\n+\n+CMake caches build settings, so you might need to run `rm -r build && make`\n+after modifying `local.mk`.\n+\n+\n+CMAKE ERRORS ~\n+\n+`configure_file Problem configuring file`\n+\n+This is probably a permissions issue, which can happen if you run `make` as the\n+root user, then later run an unprivileged `make`. To fix this, run `rm -rf\n+build` and try again.\n+\n+\n+ANACONDA ERROR ~\n+\n+Error message: `anaconda3/bin/x86_64-conda_cos6-linux-gnu-cc: not found`\n+\n+Solution: `conda install gxx_linux-64` or `conda deactivate`\n+\n+\n+==============================================================================\n+Debug                                                           *faq-debug*\n+\n+\n+BACKTRACE (LINUX) ~\n+\n+Core dumps are disabled by default on Ubuntu\n+https://stackoverflow.com/a/18368068, CentOS and others. To enable core dumps:\n+>bash\n+    ulimit -c unlimited\n+<\n+On systemd-based systems getting a backtrace is as easy as:\n+>bash\n+    coredumpctl -1 gdb\n+<\n+It's an optional tool, so you may need to install it:\n+>bash\n+    sudo apt install systemd-coredump\n+<\n+\n+The full backtrace is most useful, send us the `bt.txt` file:\n+>bash\n+    2>&1 coredumpctl -1 gdb | tee -a bt.txt\n+    thread apply all bt full\n+<\n+On older systems a `core` file will appear in the current directory. To get\n+a backtrace from the `core` file:\n+>bash\n+    gdb build/bin/nvim core 2>&1 | tee backtrace.txt\n+    thread apply all bt full\n+<\n+\n+BACKTRACE (MACOS / OSX) ~\n+\n+If `nvim` crashes, you can see the backtrace in Console.app (under \"Crash\n+Reports\" or \"User Diagnostic Reports\" for older macOS versions).\n+>bash\n+    open -a Console\n+<\n+You may also want to enable core dumps on macOS. To do this, first make sure\n+the `/cores/` directory exists and is writable:\n+>bash\n+    sudo mkdir /cores\n+    sudo chown root:admin /cores\n+    sudo chmod 1775 /cores\n+<\n+Then set the core size limit to `unlimited`:\n+>bash\n+    ulimit -c unlimited\n+<\n+Note that this is done per shell process. If you want to make this the default\n+for all shells, add the above line to your shell's init file (e.g. `~/.bashrc`\n+or similar).\n+\n+You can then open the core file in `lldb`:\n+>bash\n+    lldb -c /cores/core.12345\n+<\n+Apple's documentation archive has some other useful information\n+https://developer.apple.com/library/archive/technotes/tn2124/_index.html#//apple_ref/doc/uid/DTS10003391-CH1-SECCOREDUMPS,\n+but note that some of the things on this page are out of date (such as enabling\n+core dumps with `/etc/launchd.conf`).\n+\n+\n+USING GDB TO STEP THROUGH FUNCTIONAL TESTS ~\n+\n+Use `TEST_TAG` to run tests matching busted tags (of the form `#foo` e.g.\n+`it(\"test #foo ...\", ...)`):\n+>bash\n+    GDB=1 TEST_TAG=foo make functionaltest\n+<\n+Then, in another terminal:\n+>bash\n+    gdb build/bin/nvim\n+    target remote localhost:7777\n+<\n+- See also test/functional/helpers.lua https://github.com/neovim/neovim/blob/3098b18a2b63a841351f6d5e3697cb69db3035ef/test/functional/helpers.lua#L38-L44.\n+\n+\n+USING LLDB TO STEP THROUGH UNIT TESTS ~\n+\n+>bash\n+    lldb .deps/usr/bin/luajit -- .deps/usr/bin/busted --lpath=\"./build/?.lua\" test/unit/\n+<\n+\n+USING GDB ~\n+\n+To attach to a running `nvim` process with a pid of 1234:\n+>bash\n+    gdb -tui -p 1234 build/bin/nvim\n+<\n+The `gdb` interactive prompt will appear. At any time you can:\n+\n+- `break foo` to set a breakpoint on the `foo()` function\n+- `n` to step over the next statement\n+    - `<Enter>` to repeat the last command\n+- `s` to step into the next statement\n+- `c` to continue\n+- `finish` to step out of the current function\n+- `p zub` to print the value of `zub`\n+- `bt` to see a backtrace (callstack) from the current location\n+- `CTRL-x CTRL-a` or `tui enable` to show a TUI view of the source file in the\n+  current debugging context. This can be extremely useful as it avoids the\n+  need for a gdb \"frontend\".\n+- `<up>` and `<down>` to scroll the source file view\n+\n+\n+GDB \"REVERSE DEBUGGING\" ~\n+\n+- `set record full insn-number-max unlimited`\n+- `continue` for a bit (at least until `main()` is executed\n+- `record`\n+- provoke the bug, then use `revert-next`, `reverse-step`, etc. to rewind the\n+  debugger\n+\n+\n+USING GDBSERVER ~\n+\n+You may want to connect multiple `gdb` clients to the same running `nvim`\n+process, or you may want to connect to a remote `nvim` process with a local\n+`gdb`. Using `gdbserver`, you can attach to a single process and control it\n+from multiple `gdb` clients.\n+\n+Open a terminal and start `gdbserver` attached to `nvim` like this:\n+>bash\n+    gdbserver :6666 build/bin/nvim 2> gdbserver.log\n+<\n+`gdbserver` is now listening on port 6666. You then need to attach to this\n+debugging session in another terminal:\n+>bash\n+    gdb build/bin/nvim\n+<\n+Once you've entered `gdb`, you need to attach to the remote session:\n+>\n+    target remote localhost:6666\n+<\n+In case gdbserver puts the TUI as a background process, the TUI can become\n+unable to read input from pty (and receives SIGTTIN signal) and/or output data\n+(SIGTTOU signal). To force the TUI as the foreground process, you can add\n+>\n+    signal (SIGTTOU, SIG_IGN);\n+    if (!tcsetpgrp(data->input.in_fd, getpid())) {\n+        perror(\"tcsetpgrp failed\");\n+    }\n+<\n+to `tui.c:terminfo_start`.\n+\n+\n+USING GDBSERVER IN TMUX ~\n+\n+Consider using a custom makefile\n+https://github.com/neovim/neovim/wiki/Building-Neovim#custom-makefile to\n+quickly start debugging sessions using the `gdbserver` method mentioned above.\n+This example `local.mk` will create the debugging session when you type\n+`make debug`.\n+>make\n+    .PHONY: dbg-start dbg-attach debug build\n+\n+    build:\n+        @$(MAKE) nvim\n+\n+    dbg-start: build\n+        @tmux new-window -n 'dbg-neovim' 'gdbserver :6666 ./build/bin/nvim -D'\n+\n+    dbg-attach:\n+        @tmux new-window -n 'dbg-cgdb' 'cgdb -x gdb_start.sh ./build/bin/nvim'\n+\n+    debug: dbg-start dbg-attach\n+<\n+Here `gdb_start.sh` includes `gdb` commands to be called when the debugger\n+starts. It needs to attach to the server started by the `dbg-start` rule. For\n+example:\n+>\n+    target remote localhost:6666\n+    br main\n+<\n+\n+LOG FILE LOCATION ~\n+\n+Nvim's low-level logs are written to `$XDG_STATE_HOME/nvim/log` by default\n+(typically `.local/state/nvim/log` on Posix platforms), but you can specify\n+the location with the |$NVIM_LOG_FILE| environment variable. Debug builds\n+write INFO-level messages to this log file. Non-debug builds only log\n+ERROR-level messages.\n+\n+\n+==============================================================================\n+Design                                                         *faq-design*\n+\n+\n+WHY NOT USE JSON FOR RPC? ~\n+\n+- JSON cannot easily/efficiently handle binary data\n+- JSON specification is ambiguous: https://seriot.ch/parsing_json.php\n+\n+\n+WHY EMBED LUA INSTEAD OF X? ~\n+\n+- Lua is a very small language, ideal for embedding. The biggest advantage of\n+  Python/Ruby/etc is their huge collection of libraries, but that isn't\n+  relevant for Nvim, where Nvim is the \"batteries included\" library:\n+  introducing another stdlib would be redundant.\n+- Lua 5.1 is a complete language: the syntax is frozen. This is great for\n+  backwards compatibility.\n+- Nvim also uses Lua internally as an alternative to C. Extra performance is\n+  useful there, as opposed to a slow language like Python or Vim9script.\n+- LuaJIT is one of the fastest runtimes on the planet, 10x faster than Python\n+  and \"Vim9script\" https://vimhelp.org/vim9.txt.html, 100x faster than\n+  Vimscript.\n+- Python/JS cost more than Lua in terms of size and portability, and there are\n+  already numerous Python/JS-based editors. So Python/JS would make Nvim\n+  bigger and less portable, in exchange for a non-differentiating feature.\n+\n+See also:\n+\n+- Why Lua https://web.archive.org/web/20150219224654/https://blog.datamules.com/blog/2012/01/30/why-lua/",
            "html_url": "https://github.com/neovim/neovim/pull/26539#discussion_r1425282791",
            "id": 1425282791,
            "in_reply_to_id": 1425272579,
            "line": 445,
            "node_id": "PRRC_kwDOAPphoM5U9Bbn",
            "original_commit_id": "529bf20284f9b0dfceb41f49c112b21b36a45a31",
            "original_line": 445,
            "original_position": 645,
            "original_start_line": null,
            "path": "runtime/doc/faq.txt",
            "position": 445,
            "pull_request_review_id": 1779525797,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26539",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425282791/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T12:24:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425282791",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26539#discussion_r1425286625"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26539"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425286625"
                }
            },
            "author_association": "MEMBER",
            "body": "fine; I don't like http links in this day and age (and I couldn't find any https source), but why not.",
            "commit_id": "68718a8e164bebbf8752cc44c203d9db78e23b40",
            "created_at": "2023-12-13T12:27:59Z",
            "diff_hunk": "@@ -0,0 +1,684 @@\n+*faq.txt*\t\t Frequently Asked Questions\n+\n+                            NVIM REFERENCE MANUAL\n+\n+                                  Type |gO| to see the table of contents.\n+\n+==============================================================================\n+General Questions                                 *faq* *faq-general-questions*\n+\n+\n+WHERE SHOULD I PUT MY CONFIG (VIMRC)? ~\n+\n+See |config|; you can copy (or symlink) your existing vimrc. |nvim-from-vim|\n+\n+\n+HOW STABLE IS THE DEVELOPMENT (PRE-RELEASE) VERSION? ~\n+\n+The unstable (pre-release)\n+https://github.com/neovim/neovim/releases/tag/nightly version of Nvim\n+(\"HEAD\", i.e. the `master` branch) is used to aggressively stage new features\n+and changes. It's usually stable, but will occasionally break your workflow.\n+We depend on HEAD users to report \"blind spots\" that were not caught by\n+automated tests.\n+\n+Use the stable (release) https://github.com/neovim/neovim/releases/latest\n+version for a more predictable experience.\n+\n+\n+CAN I USE RUBY-BASED VIM PLUGINS (E.G. LUSTYEXPLORER)? ~\n+\n+Yes, starting with Nvim 0.1.5 PR #4980\n+https://github.com/neovim/neovim/pull/4980 the legacy Vim `if_ruby` interface\n+is supported.\n+\n+\n+CAN I USE LUA-BASED VIM PLUGINS (E.G. NEOCOMPLETE)? ~\n+\n+No. Starting with Nvim 0.2 PR #4411\n+https://github.com/neovim/neovim/pull/4411 Lua is built-in, but the legacy\n+Vim `if_lua` interface is not supported.\n+\n+\n+HOW CAN I USE \"TRUE COLOR\" IN THE TERMINAL? ~\n+\n+Truecolor (24bit colors) are enabled by default if a supporting terminal is\n+detected. If your terminal is not detected but you are sure it supports\n+truecolor, add this to your |init.vim|:\n+>vim\n+    set termguicolors\n+<\n+\n+NVIM SHOWS WEIRD SYMBOLS (`�[2 q`) WHEN CHANGING MODES ~\n+\n+This is a bug in your terminal emulator. It happens because Nvim sends\n+cursor-shape termcodes by default, if the terminal appears to be\n+xterm-compatible (`TERM=xterm-256color`).\n+\n+To workaround the issue, you can:\n+\n+- Use a different terminal emulator\n+- Disable 'guicursor' in your Nvim config: >vim\n+\n+    :set guicursor=\n+    \" Workaround some broken plugins which set guicursor indiscriminately.\n+    :autocmd OptionSet guicursor noautocmd set guicursor=\n+<\n+See also |$TERM| for recommended values of `$TERM`.\n+\n+\n+HOW TO CHANGE CURSOR SHAPE IN THE TERMINAL? ~\n+\n+- For Nvim 0.1.7 or older: see the note about `NVIM_TUI_ENABLE_CURSOR_SHAPE` in `man nvim`.\n+- For Nvim 0.2 or newer: cursor styling is controlled by the 'guicursor' option.\n+    - To _disable_ cursor-styling, set 'guicursor' to empty: >vim\n+\n+            :set guicursor=\n+            \" Workaround some broken plugins which set guicursor indiscriminately.\n+            :autocmd OptionSet guicursor noautocmd set guicursor=\n+<\n+    - If you want a non-blinking cursor, use `blinkon0`. See 'guicursor'.\n+    - 'guicursor' is enabled by default, unless Nvim thinks your terminal doesn't\n+        support it. If you're sure that your terminal supports cursor-shaping, set\n+        'guicursor' in your |init.vim|, as described in 'guicursor'.\n+- The Vim terminal options `t_SI` and `t_EI` are ignored, like all other `t_XX` options.\n+- Old versions of libvte (gnome-terminal, roxterm, terminator, ...) do not\n+  support cursor style control codes. #2537\n+  https://github.com/neovim/neovim/issues/2537\n+\n+\n+HOW TO CHANGE CURSOR COLOR IN THE TERMINAL? ~\n+\n+Cursor styling (shape, color, behavior) is controlled by 'guicursor', even in\n+the terminal. Cursor color (as opposed to shape) only works if\n+'termguicolors' is set.\n+\n+'guicursor' gives an example, but here's a more complicated example\n+which sets different colors in insert-mode and normal-mode:\n+>vim\n+    :set termguicolors\n+    :hi Cursor guifg=green guibg=green\n+    :hi Cursor2 guifg=red guibg=red\n+    :set guicursor=n-v-c:block-Cursor/lCursor,i-ci-ve:ver25-Cursor2/lCursor2,r-cr:hor20,o:hor50\n+<\n+\n+CURSOR STYLE ISN'T RESTORED AFTER EXITING OR SUSPENDING AND RESUMING NVIM ~\n+\n+Terminals do not provide a way to query the cursor style. Use autocommands to\n+manage the cursor style:\n+>vim\n+    au VimEnter,VimResume * set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50\n+      \\,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor\n+      \\,sm:block-blinkwait175-blinkoff150-blinkon175\n+\n+    au VimLeave,VimSuspend * set guicursor=a:block-blinkon0\n+<\n+\n+CURSOR SHAPE DOESN'T CHANGE IN TMUX ~\n+\n+tmux decides that, not Nvim. See |tui-cursor-shape| for a fix.\n+\n+See #3165 https://github.com/neovim/neovim/pull/3165 for discussion.\n+\n+\n+CURSOR FLICKER IN TMUX? ~\n+\n+If cursor `_` appears and disappears very quickly when opening nvim without a\n+document under tmux, and you set |ctermbg| in `EndOfBuffer` and `Normal`, try\n+setting these to `NONE`:\n+>vim\n+    hi EndOfBuffer ctermbg=NONE ctermfg=200 cterm=NONE\n+    hi Normal ctermbg=NONE ctermfg=200 cterm=NONE\n+<\n+\n+WHAT HAPPENED TO --remote AND FRIENDS? ~\n+\n+|--remote| is partly supported. |clientserver|\n+\n+If you require flags from Vim that are missing in Neovim, you can use\n+https://github.com/mhinz/neovim-remote instead.\n+\n+==============================================================================\n+Runtime issues                                         *faq-runtime-issues*\n+\n+\n+COPYING TO X11 PRIMARY SELECTION WITH THE MOUSE DOESN'T WORK ~\n+\n+`clipboard=autoselect` is not implemented yet\n+https://github.com/neovim/neovim/issues/2325. You may find this workaround to\n+be useful:\n+>vim\n+    vnoremap <LeftRelease> \"*ygv\n+    vnoremap <2-LeftRelease> \"*ygv\n+<\n+\n+MY CTRL-H MAPPING DOESN'T WORK ~\n+\n+This was fixed in Nvim 0.2. If you are running Nvim 0.1.7 or older,\n+adjust your terminal's \"kbs\" (key_backspace) terminfo entry:\n+>vim\n+    infocmp $TERM | sed 's/kbs=^[hH]/kbs=\\\\177/' > $TERM.ti\n+    tic $TERM.ti\n+<\n+(Feel free to delete the temporary `*.ti` file created after running the above\n+commands).\n+\n+\n+<HOME> OR SOME OTHER \"SPECIAL\" KEY DOESN'T WORK ~\n+\n+Make sure |$TERM| is set correctly.\n+\n+- For screen or tmux, `$TERM` should be `screen-256color` (not `xterm-256color`!)\n+- In other cases if \"256\" does not appear in the string it's probably wrong.\n+  Try `TERM=xterm-256color`.\n+\n+\n+:! AND SYSTEM() DO WEIRD THINGS WITH INTERACTIVE PROCESSES ~\n+\n+Interactive commands are supported by |:terminal| in Nvim. But |:!| and\n+|system()| do not support interactive commands, primarily because Nvim UIs use\n+stdio for msgpack communication, but also for performance, reliability, and\n+consistency across platforms (see\n+https://vimhelp.org/gui_x11.txt.html#gui-pty).\n+\n+See also #1496 https://github.com/neovim/neovim/issues/1496 and #8217\n+https://github.com/neovim/neovim/issues/8217#issuecomment-402152307.\n+\n+\n+PYTHON SUPPORT ISN'T WORKING ~\n+\n+Run |:checkhealth| in Nvim for automatic diagnosis.\n+\n+Other hints:\n+\n+- The python `neovim` module was renamed to `pynvim` (long ago).\n+- If you're using pyenv or virtualenv for the `pynvim` module\n+    https://pypi.python.org/pypi/pynvim/, you must set `g:python3_host_prog` to\n+    the virtualenv's interpreter path.\n+- Read |provider-python|.\n+- Be sure you have the latest version of the `pynvim` Python module: >bash\n+\n+    python -m pip install setuptools\n+    python -m pip install --upgrade pynvim\n+    python3 -m pip install --upgrade pynvim\n+<\n+- Try with `nvim -u NORC` to make sure your config (|init.vim|) isn't causing a\n+    problem. If you get `E117: Unknown function`, that means there's a runtime\n+    issue: |faq-runtime-issues|.\n+\n+\n+:CHECKHEALTH REPORTS E5009: INVALID $VIMRUNTIME ~\n+\n+This means `health#check()` couldn't load, which suggests that |$VIMRUNTIME|\n+or 'runtimepath' is broken.\n+\n+- |$VIMRUNTIME| must point to Nvim's runtime files, not Vim's.\n+- The |$VIMRUNTIME| directory contents should be readable by the current user.\n+- Verify that `:echo &runtimepath` contains the $VIMRUNTIME path.\n+- Check the output of: >vim\n+\n+    :call health#check()\n+    :verbose func health#check\n+<\n+\n+NEOVIM CAN'T FIND ITS RUNTIME ~\n+\n+This is the case if `:help nvim` shows `E149: Sorry, no help for nvim`.\n+\n+Make sure that |$VIM| and |$VIMRUNTIME| point to Nvim's (as opposed to\n+Vim's) runtime by checking `:echo $VIM` and `:echo $VIMRUNTIME`. This should\n+give something like `/usr/share/nvim` resp. `/usr/share/nvim/runtime`.\n+\n+Also make sure that you don't accidentally overwrite your runtimepath\n+(`:set runtimepath?`), which includes the above |$VIMRUNTIME| by default (see\n+'runtimepath').\n+\n+\n+E518: UNKNOWN OPTION: [OPTION] ~\n+\n+Some very old/unnecessary options have been removed from Nvim. See\n+|nvim-removed| for the complete list.\n+\n+\n+NEOVIM IS SLOW ~\n+\n+\n+Use a fast terminal emulator:\n+\n+- kitty https://github.com/kovidgoyal/kitty\n+- alacritty https://github.com/jwilm/alacritty\n+\n+\n+Use an optimized build:\n+\n+`:checkhealth nvim` should report one of these \"build types\":\n+>\n+    Build type: RelWithDebInfo\n+    Build type: MinSizeRel\n+    Build type: Release\n+<\n+If it reports `Build type: Debug` and you're building Nvim from source, see\n+https://github.com/neovim/neovim/wiki/Building-Neovim.\n+\n+\n+COLORS AREN'T DISPLAYED CORRECTLY ~\n+\n+Ensure that |$TERM| is set correctly.\n+\n+From a shell, run `TERM=xterm-256color nvim`. If colors are displayed\n+correctly, then export that value of `TERM` in your user profile (usually\n+`~/.profile`):\n+>bash\n+    export TERM=xterm-256color\n+<\n+If you're using `tmux`, instead add this to your `tmux.conf`:\n+>bash\n+    set -g default-terminal \"tmux-256color\"\n+<\n+\n+For GNU `screen`, configure your `.screenrc`\n+<https://wiki.archlinux.org/index.php/GNU_Screen#Use_256_colors>:\n+>\n+    term screen-256color\n+<\n+\n+NOTE: Nvim ignores `t_Co` and other terminal codes.\n+\n+\n+NEOVIM CAN'T READ UTF-8 CHARACTERS ~\n+\n+Run the following from the command line:\n+>bash\n+    locale | grep -E '(LANG|LC_CTYPE|LC_ALL)=(.*\\.)?(UTF|utf)-?8'\n+<\n+If there's no results, then you might not be using a UTF-8 locale. See the\n+following issues:\n+#1601 https://github.com/neovim/neovim/issues/1601\n+#1858 https://github.com/neovim/neovim/issues/1858\n+#2386 https://github.com/neovim/neovim/issues/2386\n+\n+\n+ESC IN TMUX OR GNU SCREEN IS DELAYED ~\n+\n+This is a common problem\n+https://www.google.com/?q=tmux%20vim%20escape%20delay in `tmux` / `screen`\n+(see also tmux/#131\n+https://github.com/tmux/tmux/issues/131#issuecomment-145853211). The\n+corresponding timeout needs to be tweaked to a low value (10-20ms).\n+\n+`.tmux.conf`:\n+>\n+    set -g escape-time 10\n+    # Or for tmux >= 2.6\n+    set -sg escape-time 10\n+<\n+`.screenrc`:\n+>\n+    maptimeout 10\n+<\n+\n+\"WHY DOESN'T THIS HAPPEN IN VIM?\"\n+\n+It does happen (try `vim -N -u NONE`), but if you hit a key quickly after\n+ESC_ then Vim interprets the ESC as ESC instead of ALT (META). You won't\n+notice the delay unless you closely observe the cursor. The tradeoff is that\n+Vim won't understand ALT (META) key-chords, so for example `nnoremap <M-a>`\n+won't work. ALT (META) key-chords always work in Nvim. See also `:help\n+xterm-cursor-keys` in Vim.\n+\n+Nvim 0.3 mimics the Vim behavior while still fully supporting ALT mappings. See\n+|i_ALT|.\n+\n+\n+ESC IN GNU SCREEN IS LOST WHEN MOUSE MODE IS ENABLED ~\n+\n+This happens because of a bug in screen https://savannah.gnu.org/bugs/?60196:\n+in mouse mode, screen assumes that `ESC` is part of a mouse sequence and will\n+wait an unlimited time for the rest of the sequence, regardless of\n+`maptimeout`. Until it's fixed in screen, there's no known workaround for\n+this other than double-pressing escape, which causes a single escape to be\n+passed through to Nvim.\n+\n+\n+CALLING INPUTLIST(), ECHOMSG, ... IN FILETYPE PLUGINS AND AUTOCMD DOES NOT WORK ~\n+\n+#10008 https://github.com/neovim/neovim/issues/10008,\n+#10116 https://github.com/neovim/neovim/issues/10116,\n+#12288 https://github.com/neovim/neovim/issues/12288,\n+# vim/vim#4379 https://github.com/vim/vim/issues/4379.\n+This is because Nvim sets `shortmess+=F` by default. Vim behaves the same way\n+with `set shortmes+=F`. There are plans to improve this, but meanwhile as a\n+workaround, use `set shortmess-=F` or use `unsilent` as follows.\n+>vim\n+    unsilent let var = inputlist(['1. item1', '2. item2'])\n+    autocmd BufNewFile * unsilent echomsg 'The autocmd has been fired.'\n+<\n+\n+G:CLIPBOARD SETTINGS ARE NOT USED. ~\n+\n+If the clipboard provider is already loaded, you will need to reload it after\n+configuration. Use the following configuration.\n+>vim\n+    let g:clipboard = { 'name' : ... }\n+    if exists('g:loaded_clipboard_provider')\n+      unlet g:loaded_clipboard_provider\n+      runtime autoload/provider/clipboard.vim\n+    endif\n+<\n+\n+Or, if you want automatic reloading when assigning to |g:clipboard|, set\n+|init.vim| as follows.\n+>vim\n+    function! s:clipboard_changed(...) abort\n+      if exists('g:loaded_clipboard_provider')\n+        unlet g:loaded_clipboard_provider\n+      endif\n+      runtime autoload/provider/clipboard.vim\n+    endfunction\n+\n+    if !exists('s:loaded\")\n+      call dictwatcheradd(g:, 'clipboard', function('s:clipboard_changed'))\n+    endif\n+    let s:loaded = v:true\n+<\n+\n+==============================================================================\n+Installation issues                               *faq-installation-issues*\n+\n+\n+GENERATING HELPTAGS FAILED ~\n+\n+If re-installation fails with \"Generating helptags failed\", try removing the\n+previously installed runtime directory (if `CMAKE_INSTALL_PREFIX` is not set\n+during building, the default is `/usr/local/share/nvim`):\n+>bash\n+    rm -r /usr/local/share/nvim\n+<\n+\n+==============================================================================\n+Build issues                                             *faq-build-issues*\n+\n+\n+GENERAL BUILD ISSUES ~\n+\n+Run `make distclean && make` to rule out a stale build environment causing the\n+failure.\n+\n+\n+SETTINGS IN LOCAL.MK DON'T TAKE EFFECT ~\n+\n+CMake caches build settings, so you might need to run `rm -r build && make`\n+after modifying `local.mk`.\n+\n+\n+CMAKE ERRORS ~\n+\n+`configure_file Problem configuring file`\n+\n+This is probably a permissions issue, which can happen if you run `make` as the\n+root user, then later run an unprivileged `make`. To fix this, run `rm -rf\n+build` and try again.\n+\n+\n+ANACONDA ERROR ~\n+\n+Error message: `anaconda3/bin/x86_64-conda_cos6-linux-gnu-cc: not found`\n+\n+Solution: `conda install gxx_linux-64` or `conda deactivate`\n+\n+\n+==============================================================================\n+Debug                                                           *faq-debug*\n+\n+\n+BACKTRACE (LINUX) ~\n+\n+Core dumps are disabled by default on Ubuntu\n+https://stackoverflow.com/a/18368068, CentOS and others. To enable core dumps:\n+>bash\n+    ulimit -c unlimited\n+<\n+On systemd-based systems getting a backtrace is as easy as:\n+>bash\n+    coredumpctl -1 gdb\n+<\n+It's an optional tool, so you may need to install it:\n+>bash\n+    sudo apt install systemd-coredump\n+<\n+\n+The full backtrace is most useful, send us the `bt.txt` file:\n+>bash\n+    2>&1 coredumpctl -1 gdb | tee -a bt.txt\n+    thread apply all bt full\n+<\n+On older systems a `core` file will appear in the current directory. To get\n+a backtrace from the `core` file:\n+>bash\n+    gdb build/bin/nvim core 2>&1 | tee backtrace.txt\n+    thread apply all bt full\n+<\n+\n+BACKTRACE (MACOS / OSX) ~\n+\n+If `nvim` crashes, you can see the backtrace in Console.app (under \"Crash\n+Reports\" or \"User Diagnostic Reports\" for older macOS versions).\n+>bash\n+    open -a Console\n+<\n+You may also want to enable core dumps on macOS. To do this, first make sure\n+the `/cores/` directory exists and is writable:\n+>bash\n+    sudo mkdir /cores\n+    sudo chown root:admin /cores\n+    sudo chmod 1775 /cores\n+<\n+Then set the core size limit to `unlimited`:\n+>bash\n+    ulimit -c unlimited\n+<\n+Note that this is done per shell process. If you want to make this the default\n+for all shells, add the above line to your shell's init file (e.g. `~/.bashrc`\n+or similar).\n+\n+You can then open the core file in `lldb`:\n+>bash\n+    lldb -c /cores/core.12345\n+<\n+Apple's documentation archive has some other useful information\n+https://developer.apple.com/library/archive/technotes/tn2124/_index.html#//apple_ref/doc/uid/DTS10003391-CH1-SECCOREDUMPS,\n+but note that some of the things on this page are out of date (such as enabling\n+core dumps with `/etc/launchd.conf`).\n+\n+\n+USING GDB TO STEP THROUGH FUNCTIONAL TESTS ~\n+\n+Use `TEST_TAG` to run tests matching busted tags (of the form `#foo` e.g.\n+`it(\"test #foo ...\", ...)`):\n+>bash\n+    GDB=1 TEST_TAG=foo make functionaltest\n+<\n+Then, in another terminal:\n+>bash\n+    gdb build/bin/nvim\n+    target remote localhost:7777\n+<\n+- See also test/functional/helpers.lua https://github.com/neovim/neovim/blob/3098b18a2b63a841351f6d5e3697cb69db3035ef/test/functional/helpers.lua#L38-L44.\n+\n+\n+USING LLDB TO STEP THROUGH UNIT TESTS ~\n+\n+>bash\n+    lldb .deps/usr/bin/luajit -- .deps/usr/bin/busted --lpath=\"./build/?.lua\" test/unit/\n+<\n+\n+USING GDB ~\n+\n+To attach to a running `nvim` process with a pid of 1234:\n+>bash\n+    gdb -tui -p 1234 build/bin/nvim\n+<\n+The `gdb` interactive prompt will appear. At any time you can:\n+\n+- `break foo` to set a breakpoint on the `foo()` function\n+- `n` to step over the next statement\n+    - `<Enter>` to repeat the last command\n+- `s` to step into the next statement\n+- `c` to continue\n+- `finish` to step out of the current function\n+- `p zub` to print the value of `zub`\n+- `bt` to see a backtrace (callstack) from the current location\n+- `CTRL-x CTRL-a` or `tui enable` to show a TUI view of the source file in the\n+  current debugging context. This can be extremely useful as it avoids the\n+  need for a gdb \"frontend\".\n+- `<up>` and `<down>` to scroll the source file view\n+\n+\n+GDB \"REVERSE DEBUGGING\" ~\n+\n+- `set record full insn-number-max unlimited`\n+- `continue` for a bit (at least until `main()` is executed\n+- `record`\n+- provoke the bug, then use `revert-next`, `reverse-step`, etc. to rewind the\n+  debugger\n+\n+\n+USING GDBSERVER ~\n+\n+You may want to connect multiple `gdb` clients to the same running `nvim`\n+process, or you may want to connect to a remote `nvim` process with a local\n+`gdb`. Using `gdbserver`, you can attach to a single process and control it\n+from multiple `gdb` clients.\n+\n+Open a terminal and start `gdbserver` attached to `nvim` like this:\n+>bash\n+    gdbserver :6666 build/bin/nvim 2> gdbserver.log\n+<\n+`gdbserver` is now listening on port 6666. You then need to attach to this\n+debugging session in another terminal:\n+>bash\n+    gdb build/bin/nvim\n+<\n+Once you've entered `gdb`, you need to attach to the remote session:\n+>\n+    target remote localhost:6666\n+<\n+In case gdbserver puts the TUI as a background process, the TUI can become\n+unable to read input from pty (and receives SIGTTIN signal) and/or output data\n+(SIGTTOU signal). To force the TUI as the foreground process, you can add\n+>\n+    signal (SIGTTOU, SIG_IGN);\n+    if (!tcsetpgrp(data->input.in_fd, getpid())) {\n+        perror(\"tcsetpgrp failed\");\n+    }\n+<\n+to `tui.c:terminfo_start`.\n+\n+\n+USING GDBSERVER IN TMUX ~\n+\n+Consider using a custom makefile\n+https://github.com/neovim/neovim/wiki/Building-Neovim#custom-makefile to\n+quickly start debugging sessions using the `gdbserver` method mentioned above.\n+This example `local.mk` will create the debugging session when you type\n+`make debug`.\n+>make\n+    .PHONY: dbg-start dbg-attach debug build\n+\n+    build:\n+        @$(MAKE) nvim\n+\n+    dbg-start: build\n+        @tmux new-window -n 'dbg-neovim' 'gdbserver :6666 ./build/bin/nvim -D'\n+\n+    dbg-attach:\n+        @tmux new-window -n 'dbg-cgdb' 'cgdb -x gdb_start.sh ./build/bin/nvim'\n+\n+    debug: dbg-start dbg-attach\n+<\n+Here `gdb_start.sh` includes `gdb` commands to be called when the debugger\n+starts. It needs to attach to the server started by the `dbg-start` rule. For\n+example:\n+>\n+    target remote localhost:6666\n+    br main\n+<\n+\n+LOG FILE LOCATION ~\n+\n+Nvim's low-level logs are written to `$XDG_STATE_HOME/nvim/log` by default\n+(typically `.local/state/nvim/log` on Posix platforms), but you can specify\n+the location with the |$NVIM_LOG_FILE| environment variable. Debug builds\n+write INFO-level messages to this log file. Non-debug builds only log\n+ERROR-level messages.\n+\n+\n+==============================================================================\n+Design                                                         *faq-design*\n+\n+\n+WHY NOT USE JSON FOR RPC? ~\n+\n+- JSON cannot easily/efficiently handle binary data\n+- JSON specification is ambiguous: https://seriot.ch/parsing_json.php\n+\n+\n+WHY EMBED LUA INSTEAD OF X? ~\n+\n+- Lua is a very small language, ideal for embedding. The biggest advantage of\n+  Python/Ruby/etc is their huge collection of libraries, but that isn't\n+  relevant for Nvim, where Nvim is the \"batteries included\" library:\n+  introducing another stdlib would be redundant.\n+- Lua 5.1 is a complete language: the syntax is frozen. This is great for\n+  backwards compatibility.\n+- Nvim also uses Lua internally as an alternative to C. Extra performance is\n+  useful there, as opposed to a slow language like Python or Vim9script.\n+- LuaJIT is one of the fastest runtimes on the planet, 10x faster than Python\n+  and \"Vim9script\" https://vimhelp.org/vim9.txt.html, 100x faster than\n+  Vimscript.\n+- Python/JS cost more than Lua in terms of size and portability, and there are\n+  already numerous Python/JS-based editors. So Python/JS would make Nvim\n+  bigger and less portable, in exchange for a non-differentiating feature.\n+\n+See also:\n+\n+- Why Lua https://web.archive.org/web/20150219224654/https://blog.datamules.com/blog/2012/01/30/why-lua/",
            "html_url": "https://github.com/neovim/neovim/pull/26539#discussion_r1425286625",
            "id": 1425286625,
            "in_reply_to_id": 1425272579,
            "line": 445,
            "node_id": "PRRC_kwDOAPphoM5U9CXh",
            "original_commit_id": "529bf20284f9b0dfceb41f49c112b21b36a45a31",
            "original_line": 445,
            "original_position": 645,
            "original_start_line": null,
            "path": "runtime/doc/faq.txt",
            "position": 445,
            "pull_request_review_id": 1779531288,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26539",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425286625/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T12:27:59Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425286625",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26539#discussion_r1425552502"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26539"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425552502"
                }
            },
            "author_association": "MEMBER",
            "body": "```suggestion\r\nTools and techniques for developing Nvim                *dev-tools*\r\n```",
            "commit_id": "68718a8e164bebbf8752cc44c203d9db78e23b40",
            "created_at": "2023-12-13T15:51:13Z",
            "diff_hunk": "@@ -0,0 +1,192 @@\n+*dev_tools.txt*          Nvim\n+\n+\n+                            NVIM REFERENCE MANUAL\n+\n+\n+Nvim style guide                                        *dev-tools*",
            "html_url": "https://github.com/neovim/neovim/pull/26539#discussion_r1425552502",
            "id": 1425552502,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U-DR2",
            "original_commit_id": "ae08ca622462ecf9b067c6094557dccb5627001d",
            "original_line": 7,
            "original_position": 7,
            "original_start_line": null,
            "path": "runtime/doc/dev_tools.txt",
            "position": null,
            "pull_request_review_id": 1779960588,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26539",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425552502/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T15:52:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425552502",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26539#discussion_r1425557982"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26539"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425557982"
                }
            },
            "author_association": "MEMBER",
            "body": "Can revisit later, but just FYI: I see this document as a place where we can document more than just debugger stuff.",
            "commit_id": "68718a8e164bebbf8752cc44c203d9db78e23b40",
            "created_at": "2023-12-13T15:55:03Z",
            "diff_hunk": "@@ -0,0 +1,192 @@\n+*dev_tools.txt*          Nvim\n+\n+\n+                            NVIM REFERENCE MANUAL\n+\n+\n+Nvim style guide                                        *dev-tools*\n+\n+The following advice is helpful when debugging Nvim itself. See also\n+|debug.txt| for advice that applies to Vim.",
            "html_url": "https://github.com/neovim/neovim/pull/26539#discussion_r1425557982",
            "id": 1425557982,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U-Ene",
            "original_commit_id": "ae08ca622462ecf9b067c6094557dccb5627001d",
            "original_line": 10,
            "original_position": 10,
            "original_start_line": null,
            "path": "runtime/doc/dev_tools.txt",
            "position": null,
            "pull_request_review_id": 1779969109,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26539",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425557982/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T15:55:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425557982",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26539#discussion_r1425566316"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26539"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425566316"
                }
            },
            "author_association": "MEMBER",
            "body": "Such as? (I'd be happy to generalize this already if I have some idea.)",
            "commit_id": "68718a8e164bebbf8752cc44c203d9db78e23b40",
            "created_at": "2023-12-13T16:01:04Z",
            "diff_hunk": "@@ -0,0 +1,192 @@\n+*dev_tools.txt*          Nvim\n+\n+\n+                            NVIM REFERENCE MANUAL\n+\n+\n+Nvim style guide                                        *dev-tools*\n+\n+The following advice is helpful when debugging Nvim itself. See also\n+|debug.txt| for advice that applies to Vim.",
            "html_url": "https://github.com/neovim/neovim/pull/26539#discussion_r1425566316",
            "id": 1425566316,
            "in_reply_to_id": 1425557982,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U-Gps",
            "original_commit_id": "ae08ca622462ecf9b067c6094557dccb5627001d",
            "original_line": 10,
            "original_position": 10,
            "original_start_line": null,
            "path": "runtime/doc/dev_tools.txt",
            "position": null,
            "pull_request_review_id": 1779982453,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26539",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425566316/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T16:01:04Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425566316",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26539#discussion_r1425567951"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26539"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425567951"
                }
            },
            "author_association": "MEMBER",
            "body": "whoops...",
            "commit_id": "68718a8e164bebbf8752cc44c203d9db78e23b40",
            "created_at": "2023-12-13T16:02:22Z",
            "diff_hunk": "@@ -0,0 +1,192 @@\n+*dev_tools.txt*          Nvim\n+\n+\n+                            NVIM REFERENCE MANUAL\n+\n+\n+Nvim style guide                                        *dev-tools*",
            "html_url": "https://github.com/neovim/neovim/pull/26539#discussion_r1425567951",
            "id": 1425567951,
            "in_reply_to_id": 1425552502,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U-HDP",
            "original_commit_id": "ae08ca622462ecf9b067c6094557dccb5627001d",
            "original_line": 7,
            "original_position": 7,
            "original_start_line": null,
            "path": "runtime/doc/dev_tools.txt",
            "position": null,
            "pull_request_review_id": 1779985389,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26539",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425567951/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T16:02:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425567951",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26539#discussion_r1425571910"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26539"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425571910"
                }
            },
            "author_association": "MEMBER",
            "body": "I'm just stealing your heading suggestion.",
            "commit_id": "68718a8e164bebbf8752cc44c203d9db78e23b40",
            "created_at": "2023-12-13T16:05:08Z",
            "diff_hunk": "@@ -0,0 +1,192 @@\n+*dev_tools.txt*          Nvim\n+\n+\n+                            NVIM REFERENCE MANUAL\n+\n+\n+Nvim style guide                                        *dev-tools*\n+\n+The following advice is helpful when debugging Nvim itself. See also\n+|debug.txt| for advice that applies to Vim.",
            "html_url": "https://github.com/neovim/neovim/pull/26539#discussion_r1425571910",
            "id": 1425571910,
            "in_reply_to_id": 1425557982,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U-IBG",
            "original_commit_id": "ae08ca622462ecf9b067c6094557dccb5627001d",
            "original_line": 10,
            "original_position": 10,
            "original_start_line": null,
            "path": "runtime/doc/dev_tools.txt",
            "position": null,
            "pull_request_review_id": 1779992004,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26539",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425571910/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T16:05:09Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425571910",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26539#discussion_r1425578591"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26539"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425578591"
                }
            },
            "author_association": "MEMBER",
            "body": "Perhaps some minor hints about development setup / LSP ?, Some parts of `src/nvim/README.md`, such as ASAN, getting a stacktrace, etc.\r\n\r\nFor codebase-related info (data structures, usage of various modules, etc.) we'll probably need a separate `dev_xx.txt` file, or we could put that in here too.",
            "commit_id": "68718a8e164bebbf8752cc44c203d9db78e23b40",
            "created_at": "2023-12-13T16:10:12Z",
            "diff_hunk": "@@ -0,0 +1,192 @@\n+*dev_tools.txt*          Nvim\n+\n+\n+                            NVIM REFERENCE MANUAL\n+\n+\n+Nvim style guide                                        *dev-tools*\n+\n+The following advice is helpful when debugging Nvim itself. See also\n+|debug.txt| for advice that applies to Vim.",
            "html_url": "https://github.com/neovim/neovim/pull/26539#discussion_r1425578591",
            "id": 1425578591,
            "in_reply_to_id": 1425557982,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U-Jpf",
            "original_commit_id": "ae08ca622462ecf9b067c6094557dccb5627001d",
            "original_line": 10,
            "original_position": 10,
            "original_start_line": null,
            "path": "runtime/doc/dev_tools.txt",
            "position": null,
            "pull_request_review_id": 1780002475,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26539",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425578591/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T16:10:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425578591",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26539#discussion_r1425580622"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26539"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425580622"
                }
            },
            "author_association": "MEMBER",
            "body": "Agreed; that is the goal. I've left it at a vague \"working on Nvim and debugging issues\" for now (and updated the description in `:h help`).",
            "commit_id": "68718a8e164bebbf8752cc44c203d9db78e23b40",
            "created_at": "2023-12-13T16:11:46Z",
            "diff_hunk": "@@ -0,0 +1,192 @@\n+*dev_tools.txt*          Nvim\n+\n+\n+                            NVIM REFERENCE MANUAL\n+\n+\n+Nvim style guide                                        *dev-tools*\n+\n+The following advice is helpful when debugging Nvim itself. See also\n+|debug.txt| for advice that applies to Vim.",
            "html_url": "https://github.com/neovim/neovim/pull/26539#discussion_r1425580622",
            "id": 1425580622,
            "in_reply_to_id": 1425557982,
            "line": null,
            "node_id": "PRRC_kwDOAPphoM5U-KJO",
            "original_commit_id": "ae08ca622462ecf9b067c6094557dccb5627001d",
            "original_line": 10,
            "original_position": 10,
            "original_start_line": null,
            "path": "runtime/doc/dev_tools.txt",
            "position": null,
            "pull_request_review_id": 1780005697,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26539",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425580622/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-13T16:11:46Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1425580622",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "@dundargoc you force-pushed over my changes. What did you edit?",
            "created_at": "2023-12-13T11:55:01Z",
            "html_url": "https://github.com/neovim/neovim/pull/26539#issuecomment-1853780208",
            "id": 1853780208,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26539",
            "node_id": "IC_kwDOAPphoM5ufnDw",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1853780208/reactions"
            },
            "updated_at": "2023-12-13T11:55:01Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1853780208",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Sus. I think I just rebased.\r\n\r\nI'll leave this be for now until you're done with it.",
            "created_at": "2023-12-13T11:56:11Z",
            "html_url": "https://github.com/neovim/neovim/pull/26539#issuecomment-1853781769",
            "id": 1853781769,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26539",
            "node_id": "IC_kwDOAPphoM5ufncJ",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1853781769/reactions"
            },
            "updated_at": "2023-12-13T11:56:50Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1853781769",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> The old faq wiki page should point to the new page, since it is the target of many old links.\r\n\r\nNah, let's remove it. Let's fix the old links instead. ",
            "created_at": "2023-12-13T12:30:10Z",
            "html_url": "https://github.com/neovim/neovim/pull/26539#issuecomment-1853831194",
            "id": 1853831194,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26539",
            "node_id": "IC_kwDOAPphoM5ufzga",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 1,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 1,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1853831194/reactions"
            },
            "updated_at": "2023-12-13T12:30:10Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1853831194",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "We'll make a followup PR to neovim.io once we're done cleaning out the Augean Wiki.",
            "created_at": "2023-12-13T12:31:32Z",
            "html_url": "https://github.com/neovim/neovim/pull/26539#issuecomment-1853833208",
            "id": 1853833208,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26539",
            "node_id": "IC_kwDOAPphoM5ufz_4",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1853833208/reactions"
            },
            "updated_at": "2023-12-13T12:31:32Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1853833208",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2361214?v=4",
                "events_url": "https://api.github.com/users/clason/events{/privacy}",
                "followers_url": "https://api.github.com/users/clason/followers",
                "following_url": "https://api.github.com/users/clason/following{/other_user}",
                "gists_url": "https://api.github.com/users/clason/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/clason",
                "id": 2361214,
                "login": "clason",
                "node_id": "MDQ6VXNlcjIzNjEyMTQ=",
                "organizations_url": "https://api.github.com/users/clason/orgs",
                "received_events_url": "https://api.github.com/users/clason/received_events",
                "repos_url": "https://api.github.com/users/clason/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/clason/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/clason/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/clason"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Nah, let's remove it. Let's fix the old links instead.\r\n\r\nYes, but I think many things we don't control link to the faq. E.g. old reddit posts, articles, etc. The FAQ is common enough that keeping a handle around will be helpful. For other less common wiki pages we can just nuke them.",
            "created_at": "2023-12-13T12:44:12Z",
            "html_url": "https://github.com/neovim/neovim/pull/26539#issuecomment-1853851753",
            "id": 1853851753,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26539",
            "node_id": "IC_kwDOAPphoM5uf4hp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1853851753/reactions"
            },
            "updated_at": "2023-12-13T12:44:12Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1853851753",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1359421?v=4",
                "events_url": "https://api.github.com/users/justinmk/events{/privacy}",
                "followers_url": "https://api.github.com/users/justinmk/followers",
                "following_url": "https://api.github.com/users/justinmk/following{/other_user}",
                "gists_url": "https://api.github.com/users/justinmk/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/justinmk",
                "id": 1359421,
                "login": "justinmk",
                "node_id": "MDQ6VXNlcjEzNTk0MjE=",
                "organizations_url": "https://api.github.com/users/justinmk/orgs",
                "received_events_url": "https://api.github.com/users/justinmk/received_events",
                "repos_url": "https://api.github.com/users/justinmk/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/justinmk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/justinmk/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/justinmk"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Aight, let's keep it for now then 👍 ",
            "created_at": "2023-12-13T12:51:23Z",
            "html_url": "https://github.com/neovim/neovim/pull/26539#issuecomment-1853862062",
            "id": 1853862062,
            "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26539",
            "node_id": "IC_kwDOAPphoM5uf7Cu",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1853862062/reactions"
            },
            "updated_at": "2023-12-13T12:51:23Z",
            "url": "https://api.github.com/repos/neovim/neovim/issues/comments/1853862062",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/26539/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/26539/commits",
    "created_at": "2023-12-12T18:26:33Z",
    "diff_url": "https://github.com/neovim/neovim/pull/26539.diff",
    "draft": false,
    "head": {
        "label": "dundargoc:docs/faq",
        "ref": "docs/faq",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/dundargoc/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/dundargoc/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/dundargoc/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/dundargoc/neovim/branches{/branch}",
            "clone_url": "https://github.com/dundargoc/neovim.git",
            "collaborators_url": "https://api.github.com/repos/dundargoc/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/dundargoc/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/dundargoc/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/dundargoc/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/dundargoc/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/dundargoc/neovim/contributors",
            "created_at": "2021-06-20T10:14:48Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/dundargoc/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/dundargoc/neovim/downloads",
            "events_url": "https://api.github.com/repos/dundargoc/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/dundargoc/neovim/forks",
            "full_name": "dundargoc/neovim",
            "git_commits_url": "https://api.github.com/repos/dundargoc/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/dundargoc/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/dundargoc/neovim/git/tags{/sha}",
            "git_url": "git://github.com/dundargoc/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": false,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/dundargoc/neovim/hooks",
            "html_url": "https://github.com/dundargoc/neovim",
            "id": 378614899,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/dundargoc/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/dundargoc/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/dundargoc/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/dundargoc/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/dundargoc/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/dundargoc/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/dundargoc/neovim/merges",
            "milestones_url": "https://api.github.com/repos/dundargoc/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNzg2MTQ4OTk=",
            "notifications_url": "https://api.github.com/repos/dundargoc/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/dundargoc/neovim/pulls{/number}",
            "pushed_at": "2023-12-18T23:31:15Z",
            "releases_url": "https://api.github.com/repos/dundargoc/neovim/releases{/id}",
            "size": 243927,
            "ssh_url": "git@github.com:dundargoc/neovim.git",
            "stargazers_count": 1,
            "stargazers_url": "https://api.github.com/repos/dundargoc/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/dundargoc/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/dundargoc/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/dundargoc/neovim/subscription",
            "svn_url": "https://github.com/dundargoc/neovim",
            "tags_url": "https://api.github.com/repos/dundargoc/neovim/tags",
            "teams_url": "https://api.github.com/repos/dundargoc/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/dundargoc/neovim/git/trees{/sha}",
            "updated_at": "2023-07-31T17:43:26Z",
            "url": "https://api.github.com/repos/dundargoc/neovim",
            "visibility": "public",
            "watchers": 1,
            "watchers_count": 1,
            "web_commit_signoff_required": false
        },
        "sha": "68718a8e164bebbf8752cc44c203d9db78e23b40",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
            "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
            "followers_url": "https://api.github.com/users/dundargoc/followers",
            "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
            "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/dundargoc",
            "id": 33953936,
            "login": "dundargoc",
            "node_id": "MDQ6VXNlcjMzOTUzOTM2",
            "organizations_url": "https://api.github.com/users/dundargoc/orgs",
            "received_events_url": "https://api.github.com/users/dundargoc/received_events",
            "repos_url": "https://api.github.com/users/dundargoc/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/dundargoc"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/26539",
    "id": 1641218254,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26539",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "ef58ee48f4d553d364c4284870b0860f8cc8427b",
    "merged_at": "2023-12-13T16:31:39Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5h0wDO",
    "number": 26539,
    "patch_url": "https://github.com/neovim/neovim/pull/26539.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/26539/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/68718a8e164bebbf8752cc44c203d9db78e23b40",
    "title": "docs: add wiki FAQ to the runtime documentation",
    "updated_at": "2023-12-13T18:10:10Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/26539",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
        "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
        "followers_url": "https://api.github.com/users/dundargoc/followers",
        "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
        "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/dundargoc",
        "id": 33953936,
        "login": "dundargoc",
        "node_id": "MDQ6VXNlcjMzOTUzOTM2",
        "organizations_url": "https://api.github.com/users/dundargoc/orgs",
        "received_events_url": "https://api.github.com/users/dundargoc/received_events",
        "repos_url": "https://api.github.com/users/dundargoc/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/dundargoc"
    }
}