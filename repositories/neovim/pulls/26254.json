{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/26254/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/26254/commits"
        },
        "html": {
            "href": "https://github.com/neovim/neovim/pull/26254"
        },
        "issue": {
            "href": "https://api.github.com/repos/neovim/neovim/issues/26254"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/26254/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/neovim/neovim/pulls/26254"
        },
        "statuses": {
            "href": "https://api.github.com/repos/neovim/neovim/statuses/ff7548d5292baebbe834dc1a16ac5cbfd5ab0dce"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "neovim:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/neovim/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/neovim/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/neovim/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/neovim/neovim/branches{/branch}",
            "clone_url": "https://github.com/neovim/neovim.git",
            "collaborators_url": "https://api.github.com/repos/neovim/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/neovim/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/neovim/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/neovim/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/neovim/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/neovim/neovim/contributors",
            "created_at": "2014-01-31T13:39:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/neovim/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/neovim/neovim/downloads",
            "events_url": "https://api.github.com/repos/neovim/neovim/events",
            "fork": false,
            "forks": 5021,
            "forks_count": 5021,
            "forks_url": "https://api.github.com/repos/neovim/neovim/forks",
            "full_name": "neovim/neovim",
            "git_commits_url": "https://api.github.com/repos/neovim/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/neovim/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/neovim/neovim/git/tags{/sha}",
            "git_url": "git://github.com/neovim/neovim.git",
            "has_discussions": true,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/neovim/neovim/hooks",
            "html_url": "https://github.com/neovim/neovim",
            "id": 16408992,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/neovim/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/neovim/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/neovim/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/neovim/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/neovim/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/neovim/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/neovim/neovim/merges",
            "milestones_url": "https://api.github.com/repos/neovim/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwODk5Mg==",
            "notifications_url": "https://api.github.com/repos/neovim/neovim/notifications{?since,all,participating}",
            "open_issues": 1692,
            "open_issues_count": 1692,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
                "events_url": "https://api.github.com/users/neovim/events{/privacy}",
                "followers_url": "https://api.github.com/users/neovim/followers",
                "following_url": "https://api.github.com/users/neovim/following{/other_user}",
                "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/neovim",
                "id": 6471485,
                "login": "neovim",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
                "organizations_url": "https://api.github.com/users/neovim/orgs",
                "received_events_url": "https://api.github.com/users/neovim/received_events",
                "repos_url": "https://api.github.com/users/neovim/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/neovim"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/neovim/neovim/pulls{/number}",
            "pushed_at": "2023-11-28T00:15:26Z",
            "releases_url": "https://api.github.com/repos/neovim/neovim/releases{/id}",
            "size": 236645,
            "ssh_url": "git@github.com:neovim/neovim.git",
            "stargazers_count": 71282,
            "stargazers_url": "https://api.github.com/repos/neovim/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/neovim/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/neovim/neovim/subscription",
            "svn_url": "https://github.com/neovim/neovim",
            "tags_url": "https://api.github.com/repos/neovim/neovim/tags",
            "teams_url": "https://api.github.com/repos/neovim/neovim/teams",
            "topics": [
                "api",
                "c",
                "lua",
                "neovim",
                "nvim",
                "text-editor",
                "vim"
            ],
            "trees_url": "https://api.github.com/repos/neovim/neovim/git/trees{/sha}",
            "updated_at": "2023-11-28T01:47:09Z",
            "url": "https://api.github.com/repos/neovim/neovim",
            "visibility": "public",
            "watchers": 71282,
            "watchers_count": 71282,
            "web_commit_signoff_required": false
        },
        "sha": "e38a05369293293b5b510b1b0014fcc2e7cb87f4",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/6471485?v=4",
            "events_url": "https://api.github.com/users/neovim/events{/privacy}",
            "followers_url": "https://api.github.com/users/neovim/followers",
            "following_url": "https://api.github.com/users/neovim/following{/other_user}",
            "gists_url": "https://api.github.com/users/neovim/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/neovim",
            "id": 6471485,
            "login": "neovim",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY0NzE0ODU=",
            "organizations_url": "https://api.github.com/users/neovim/orgs",
            "received_events_url": "https://api.github.com/users/neovim/received_events",
            "repos_url": "https://api.github.com/users/neovim/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/neovim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/neovim/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/neovim"
        }
    },
    "body": null,
    "closed_at": "2023-11-27T20:35:22Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26254#discussion_r1406799804"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26254"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1406799804"
                }
            },
            "author_association": "MEMBER",
            "body": "This shouldn't be here.",
            "commit_id": "ff7548d5292baebbe834dc1a16ac5cbfd5ab0dce",
            "created_at": "2023-11-27T21:55:48Z",
            "diff_hunk": "@@ -0,0 +1,112 @@\n+#pragma once\n+\n+#include \"nvim/autocmd_defs.h\"\n+#include \"nvim/eval/typval_defs.h\"\n+#include \"nvim/pos_defs.h\"\n+\n+typedef enum {\n+  ETYPE_TOP,       ///< toplevel\n+  ETYPE_SCRIPT,    ///< sourcing script, use es_info.sctx\n+  ETYPE_UFUNC,     ///< user function, use es_info.ufunc\n+  ETYPE_AUCMD,     ///< autocomand, use es_info.aucmd\n+  ETYPE_MODELINE,  ///< modeline, use es_info.sctx\n+  ETYPE_EXCEPT,    ///< exception, use es_info.exception\n+  ETYPE_ARGS,      ///< command line argument\n+  ETYPE_ENV,       ///< environment variable\n+  ETYPE_INTERNAL,  ///< internal operation\n+  ETYPE_SPELL,     ///< loading spell file\n+} etype_T;\n+\n+/// Entry in the execution stack \"exestack\".\n+typedef struct {\n+  linenr_T es_lnum;     ///< replaces \"sourcing_lnum\"\n+  char *es_name;        ///< replaces \"sourcing_name\"\n+  etype_T es_type;\n+  union {\n+    sctx_T *sctx;       ///< script and modeline info\n+    ufunc_T *ufunc;     ///< function info\n+    AutoPatCmd *aucmd;  ///< autocommand info\n+    except_T *except;   ///< exception info\n+  } es_info;\n+} estack_T;\n+\n+/// Stack of execution contexts.  Each entry is an estack_T.\n+/// Current context is at ga_len - 1.\n+extern garray_T exestack;",
            "html_url": "https://github.com/neovim/neovim/pull/26254#discussion_r1406799804",
            "id": 1406799804,
            "line": 35,
            "node_id": "PRRC_kwDOAPphoM5T2g-8",
            "original_commit_id": "ff7548d5292baebbe834dc1a16ac5cbfd5ab0dce",
            "original_line": 35,
            "original_position": 35,
            "original_start_line": null,
            "path": "src/nvim/runtime_defs.h",
            "position": 35,
            "pull_request_review_id": 1751456238,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26254",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1406799804/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-27T21:55:48Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1406799804",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26254#discussion_r1406802105"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26254"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1406802105"
                }
            },
            "author_association": "MEMBER",
            "body": "Why `export` instead of `keep`?",
            "commit_id": "ff7548d5292baebbe834dc1a16ac5cbfd5ab0dce",
            "created_at": "2023-11-27T21:56:21Z",
            "diff_hunk": "@@ -1,120 +1,7 @@\n #pragma once\n \n-#include <stdbool.h>\n-\n-#include \"klib/kvec.h\"\n-#include \"nvim/autocmd_defs.h\"\n-#include \"nvim/cmdexpand_defs.h\"\n-#include \"nvim/eval/typval_defs.h\"\n-#include \"nvim/ex_cmds_defs.h\"\n-#include \"nvim/ex_eval_defs.h\"\n-#include \"nvim/garray_defs.h\"\n-#include \"nvim/option_defs.h\"\n-#include \"nvim/pos_defs.h\"\n-#include \"nvim/types.h\"\n-\n-typedef enum {\n-  ETYPE_TOP,       ///< toplevel\n-  ETYPE_SCRIPT,    ///< sourcing script, use es_info.sctx\n-  ETYPE_UFUNC,     ///< user function, use es_info.ufunc\n-  ETYPE_AUCMD,     ///< autocomand, use es_info.aucmd\n-  ETYPE_MODELINE,  ///< modeline, use es_info.sctx\n-  ETYPE_EXCEPT,    ///< exception, use es_info.exception\n-  ETYPE_ARGS,      ///< command line argument\n-  ETYPE_ENV,       ///< environment variable\n-  ETYPE_INTERNAL,  ///< internal operation\n-  ETYPE_SPELL,     ///< loading spell file\n-} etype_T;\n-\n-/// Entry in the execution stack \"exestack\".\n-typedef struct {\n-  linenr_T es_lnum;     ///< replaces \"sourcing_lnum\"\n-  char *es_name;        ///< replaces \"sourcing_name\"\n-  etype_T es_type;\n-  union {\n-    sctx_T *sctx;       ///< script and modeline info\n-    ufunc_T *ufunc;     ///< function info\n-    AutoPatCmd *aucmd;  ///< autocommand info\n-    except_T *except;   ///< exception info\n-  } es_info;\n-} estack_T;\n-\n-/// Stack of execution contexts.  Each entry is an estack_T.\n-/// Current context is at ga_len - 1.\n-extern garray_T exestack;\n-/// name of error message source\n-#define SOURCING_NAME (((estack_T *)exestack.ga_data)[exestack.ga_len - 1].es_name)\n-/// line number in the message source or zero\n-#define SOURCING_LNUM (((estack_T *)exestack.ga_data)[exestack.ga_len - 1].es_lnum)\n-\n-/// Argument for estack_sfile().\n-typedef enum {\n-  ESTACK_NONE,\n-  ESTACK_SFILE,\n-  ESTACK_STACK,\n-  ESTACK_SCRIPT,\n-} estack_arg_T;\n-\n-/// Holds the hashtab with variables local to each sourced script.\n-/// Each item holds a variable (nameless) that points to the dict_T.\n-typedef struct {\n-  ScopeDictDictItem sv_var;\n-  dict_T sv_dict;\n-} scriptvar_T;\n-\n-typedef struct {\n-  scriptvar_T *sn_vars;         ///< stores s: variables for this script\n-\n-  char *sn_name;\n-  bool sn_prof_on;              ///< true when script is/was profiled\n-  bool sn_pr_force;             ///< forceit: profile functions in this script\n-  proftime_T sn_pr_child;       ///< time set when going into first child\n-  int sn_pr_nest;               ///< nesting for sn_pr_child\n-  // profiling the script as a whole\n-  int sn_pr_count;              ///< nr of times sourced\n-  proftime_T sn_pr_total;       ///< time spent in script + children\n-  proftime_T sn_pr_self;        ///< time spent in script itself\n-  proftime_T sn_pr_start;       ///< time at script start\n-  proftime_T sn_pr_children;    ///< time in children after script start\n-  // profiling the script per line\n-  garray_T sn_prl_ga;           ///< things stored for every line\n-  proftime_T sn_prl_start;      ///< start time for current line\n-  proftime_T sn_prl_children;   ///< time spent in children for this line\n-  proftime_T sn_prl_wait;       ///< wait start time for current line\n-  linenr_T sn_prl_idx;          ///< index of line being timed; -1 if none\n-  int sn_prl_execed;            ///< line being timed was executed\n-} scriptitem_T;\n-\n-/// Growarray to store info about already sourced scripts.\n-extern garray_T script_items;\n-#define SCRIPT_ITEM(id) (((scriptitem_T **)script_items.ga_data)[(id) - 1])\n-#define SCRIPT_ID_VALID(id) ((id) > 0 && (id) <= script_items.ga_len)\n-\n-typedef bool (*DoInRuntimepathCB)(int, char **, bool, void *);\n-\n-typedef struct {\n-  char *path;\n-  bool after;\n-  TriState has_lua;\n-} SearchPathItem;\n-\n-typedef kvec_t(SearchPathItem) RuntimeSearchPath;\n-typedef kvec_t(char *) CharVec;\n-\n-// last argument for do_source()\n-#define DOSO_NONE       0\n-#define DOSO_VIMRC      1       // loading vimrc file\n-\n-// Used for flags in do_in_path()\n-#define DIP_ALL 0x01    // all matches, not just the first one\n-#define DIP_DIR 0x02    // find directories instead of files\n-#define DIP_ERR 0x04    // give an error message when none found\n-#define DIP_START 0x08  // also use \"start\" directory in 'packpath'\n-#define DIP_OPT 0x10    // also use \"opt\" directory in 'packpath'\n-#define DIP_NORTP 0x20  // do not use 'runtimepath'\n-#define DIP_NOAFTER 0x40  // skip \"after\" directories\n-#define DIP_AFTER   0x80  // only use \"after\" directories\n-#define DIP_DIRFILE 0x200  // find both files and directories\n+#include \"nvim/option_defs.h\"  // IWYU pragma: export",
            "html_url": "https://github.com/neovim/neovim/pull/26254#discussion_r1406802105",
            "id": 1406802105,
            "line": 3,
            "node_id": "PRRC_kwDOAPphoM5T2hi5",
            "original_commit_id": "ff7548d5292baebbe834dc1a16ac5cbfd5ab0dce",
            "original_line": 3,
            "original_position": 118,
            "original_start_line": null,
            "path": "src/nvim/runtime.h",
            "position": 118,
            "pull_request_review_id": 1751458878,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26254",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1406802105/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-27T21:56:21Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1406802105",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/35768171?v=4",
                "events_url": "https://api.github.com/users/zeertzjq/events{/privacy}",
                "followers_url": "https://api.github.com/users/zeertzjq/followers",
                "following_url": "https://api.github.com/users/zeertzjq/following{/other_user}",
                "gists_url": "https://api.github.com/users/zeertzjq/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zeertzjq",
                "id": 35768171,
                "login": "zeertzjq",
                "node_id": "MDQ6VXNlcjM1NzY4MTcx",
                "organizations_url": "https://api.github.com/users/zeertzjq/orgs",
                "received_events_url": "https://api.github.com/users/zeertzjq/received_events",
                "repos_url": "https://api.github.com/users/zeertzjq/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zeertzjq/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zeertzjq/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zeertzjq"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26254#discussion_r1406803556"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26254"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1406803556"
                }
            },
            "author_association": "MEMBER",
            "body": "Just a mistake.",
            "commit_id": "ff7548d5292baebbe834dc1a16ac5cbfd5ab0dce",
            "created_at": "2023-11-27T21:57:33Z",
            "diff_hunk": "@@ -1,120 +1,7 @@\n #pragma once\n \n-#include <stdbool.h>\n-\n-#include \"klib/kvec.h\"\n-#include \"nvim/autocmd_defs.h\"\n-#include \"nvim/cmdexpand_defs.h\"\n-#include \"nvim/eval/typval_defs.h\"\n-#include \"nvim/ex_cmds_defs.h\"\n-#include \"nvim/ex_eval_defs.h\"\n-#include \"nvim/garray_defs.h\"\n-#include \"nvim/option_defs.h\"\n-#include \"nvim/pos_defs.h\"\n-#include \"nvim/types.h\"\n-\n-typedef enum {\n-  ETYPE_TOP,       ///< toplevel\n-  ETYPE_SCRIPT,    ///< sourcing script, use es_info.sctx\n-  ETYPE_UFUNC,     ///< user function, use es_info.ufunc\n-  ETYPE_AUCMD,     ///< autocomand, use es_info.aucmd\n-  ETYPE_MODELINE,  ///< modeline, use es_info.sctx\n-  ETYPE_EXCEPT,    ///< exception, use es_info.exception\n-  ETYPE_ARGS,      ///< command line argument\n-  ETYPE_ENV,       ///< environment variable\n-  ETYPE_INTERNAL,  ///< internal operation\n-  ETYPE_SPELL,     ///< loading spell file\n-} etype_T;\n-\n-/// Entry in the execution stack \"exestack\".\n-typedef struct {\n-  linenr_T es_lnum;     ///< replaces \"sourcing_lnum\"\n-  char *es_name;        ///< replaces \"sourcing_name\"\n-  etype_T es_type;\n-  union {\n-    sctx_T *sctx;       ///< script and modeline info\n-    ufunc_T *ufunc;     ///< function info\n-    AutoPatCmd *aucmd;  ///< autocommand info\n-    except_T *except;   ///< exception info\n-  } es_info;\n-} estack_T;\n-\n-/// Stack of execution contexts.  Each entry is an estack_T.\n-/// Current context is at ga_len - 1.\n-extern garray_T exestack;\n-/// name of error message source\n-#define SOURCING_NAME (((estack_T *)exestack.ga_data)[exestack.ga_len - 1].es_name)\n-/// line number in the message source or zero\n-#define SOURCING_LNUM (((estack_T *)exestack.ga_data)[exestack.ga_len - 1].es_lnum)\n-\n-/// Argument for estack_sfile().\n-typedef enum {\n-  ESTACK_NONE,\n-  ESTACK_SFILE,\n-  ESTACK_STACK,\n-  ESTACK_SCRIPT,\n-} estack_arg_T;\n-\n-/// Holds the hashtab with variables local to each sourced script.\n-/// Each item holds a variable (nameless) that points to the dict_T.\n-typedef struct {\n-  ScopeDictDictItem sv_var;\n-  dict_T sv_dict;\n-} scriptvar_T;\n-\n-typedef struct {\n-  scriptvar_T *sn_vars;         ///< stores s: variables for this script\n-\n-  char *sn_name;\n-  bool sn_prof_on;              ///< true when script is/was profiled\n-  bool sn_pr_force;             ///< forceit: profile functions in this script\n-  proftime_T sn_pr_child;       ///< time set when going into first child\n-  int sn_pr_nest;               ///< nesting for sn_pr_child\n-  // profiling the script as a whole\n-  int sn_pr_count;              ///< nr of times sourced\n-  proftime_T sn_pr_total;       ///< time spent in script + children\n-  proftime_T sn_pr_self;        ///< time spent in script itself\n-  proftime_T sn_pr_start;       ///< time at script start\n-  proftime_T sn_pr_children;    ///< time in children after script start\n-  // profiling the script per line\n-  garray_T sn_prl_ga;           ///< things stored for every line\n-  proftime_T sn_prl_start;      ///< start time for current line\n-  proftime_T sn_prl_children;   ///< time spent in children for this line\n-  proftime_T sn_prl_wait;       ///< wait start time for current line\n-  linenr_T sn_prl_idx;          ///< index of line being timed; -1 if none\n-  int sn_prl_execed;            ///< line being timed was executed\n-} scriptitem_T;\n-\n-/// Growarray to store info about already sourced scripts.\n-extern garray_T script_items;\n-#define SCRIPT_ITEM(id) (((scriptitem_T **)script_items.ga_data)[(id) - 1])\n-#define SCRIPT_ID_VALID(id) ((id) > 0 && (id) <= script_items.ga_len)\n-\n-typedef bool (*DoInRuntimepathCB)(int, char **, bool, void *);\n-\n-typedef struct {\n-  char *path;\n-  bool after;\n-  TriState has_lua;\n-} SearchPathItem;\n-\n-typedef kvec_t(SearchPathItem) RuntimeSearchPath;\n-typedef kvec_t(char *) CharVec;\n-\n-// last argument for do_source()\n-#define DOSO_NONE       0\n-#define DOSO_VIMRC      1       // loading vimrc file\n-\n-// Used for flags in do_in_path()\n-#define DIP_ALL 0x01    // all matches, not just the first one\n-#define DIP_DIR 0x02    // find directories instead of files\n-#define DIP_ERR 0x04    // give an error message when none found\n-#define DIP_START 0x08  // also use \"start\" directory in 'packpath'\n-#define DIP_OPT 0x10    // also use \"opt\" directory in 'packpath'\n-#define DIP_NORTP 0x20  // do not use 'runtimepath'\n-#define DIP_NOAFTER 0x40  // skip \"after\" directories\n-#define DIP_AFTER   0x80  // only use \"after\" directories\n-#define DIP_DIRFILE 0x200  // find both files and directories\n+#include \"nvim/option_defs.h\"  // IWYU pragma: export",
            "html_url": "https://github.com/neovim/neovim/pull/26254#discussion_r1406803556",
            "id": 1406803556,
            "in_reply_to_id": 1406802105,
            "line": 3,
            "node_id": "PRRC_kwDOAPphoM5T2h5k",
            "original_commit_id": "ff7548d5292baebbe834dc1a16ac5cbfd5ab0dce",
            "original_line": 3,
            "original_position": 118,
            "original_start_line": null,
            "path": "src/nvim/runtime.h",
            "position": 118,
            "pull_request_review_id": 1751460767,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26254",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1406803556/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-27T21:57:33Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1406803556",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/neovim/neovim/pull/26254#discussion_r1406803944"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/26254"
                },
                "self": {
                    "href": "https://api.github.com/repos/neovim/neovim/pulls/comments/1406803944"
                }
            },
            "author_association": "MEMBER",
            "body": "Yeah, you're right.",
            "commit_id": "ff7548d5292baebbe834dc1a16ac5cbfd5ab0dce",
            "created_at": "2023-11-27T21:58:02Z",
            "diff_hunk": "@@ -0,0 +1,112 @@\n+#pragma once\n+\n+#include \"nvim/autocmd_defs.h\"\n+#include \"nvim/eval/typval_defs.h\"\n+#include \"nvim/pos_defs.h\"\n+\n+typedef enum {\n+  ETYPE_TOP,       ///< toplevel\n+  ETYPE_SCRIPT,    ///< sourcing script, use es_info.sctx\n+  ETYPE_UFUNC,     ///< user function, use es_info.ufunc\n+  ETYPE_AUCMD,     ///< autocomand, use es_info.aucmd\n+  ETYPE_MODELINE,  ///< modeline, use es_info.sctx\n+  ETYPE_EXCEPT,    ///< exception, use es_info.exception\n+  ETYPE_ARGS,      ///< command line argument\n+  ETYPE_ENV,       ///< environment variable\n+  ETYPE_INTERNAL,  ///< internal operation\n+  ETYPE_SPELL,     ///< loading spell file\n+} etype_T;\n+\n+/// Entry in the execution stack \"exestack\".\n+typedef struct {\n+  linenr_T es_lnum;     ///< replaces \"sourcing_lnum\"\n+  char *es_name;        ///< replaces \"sourcing_name\"\n+  etype_T es_type;\n+  union {\n+    sctx_T *sctx;       ///< script and modeline info\n+    ufunc_T *ufunc;     ///< function info\n+    AutoPatCmd *aucmd;  ///< autocommand info\n+    except_T *except;   ///< exception info\n+  } es_info;\n+} estack_T;\n+\n+/// Stack of execution contexts.  Each entry is an estack_T.\n+/// Current context is at ga_len - 1.\n+extern garray_T exestack;",
            "html_url": "https://github.com/neovim/neovim/pull/26254#discussion_r1406803944",
            "id": 1406803944,
            "in_reply_to_id": 1406799804,
            "line": 35,
            "node_id": "PRRC_kwDOAPphoM5T2h_o",
            "original_commit_id": "ff7548d5292baebbe834dc1a16ac5cbfd5ab0dce",
            "original_line": 35,
            "original_position": 35,
            "original_start_line": null,
            "path": "src/nvim/runtime_defs.h",
            "position": 35,
            "pull_request_review_id": 1751461378,
            "pull_request_url": "https://api.github.com/repos/neovim/neovim/pulls/26254",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1406803944/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-11-27T21:58:03Z",
            "url": "https://api.github.com/repos/neovim/neovim/pulls/comments/1406803944",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            }
        }
    ],
    "comment_regular_data": [],
    "comments_url": "https://api.github.com/repos/neovim/neovim/issues/26254/comments",
    "commits_url": "https://api.github.com/repos/neovim/neovim/pulls/26254/commits",
    "created_at": "2023-11-27T19:03:17Z",
    "diff_url": "https://github.com/neovim/neovim/pull/26254.diff",
    "draft": false,
    "head": {
        "label": "dundargoc:refactor/defs/runtime",
        "ref": "refactor/defs/runtime",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/dundargoc/neovim/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/dundargoc/neovim/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/dundargoc/neovim/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/dundargoc/neovim/branches{/branch}",
            "clone_url": "https://github.com/dundargoc/neovim.git",
            "collaborators_url": "https://api.github.com/repos/dundargoc/neovim/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/dundargoc/neovim/comments{/number}",
            "commits_url": "https://api.github.com/repos/dundargoc/neovim/commits{/sha}",
            "compare_url": "https://api.github.com/repos/dundargoc/neovim/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/dundargoc/neovim/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/dundargoc/neovim/contributors",
            "created_at": "2021-06-20T10:14:48Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/dundargoc/neovim/deployments",
            "description": "Vim-fork focused on extensibility and usability",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/dundargoc/neovim/downloads",
            "events_url": "https://api.github.com/repos/dundargoc/neovim/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/dundargoc/neovim/forks",
            "full_name": "dundargoc/neovim",
            "git_commits_url": "https://api.github.com/repos/dundargoc/neovim/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/dundargoc/neovim/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/dundargoc/neovim/git/tags{/sha}",
            "git_url": "git://github.com/dundargoc/neovim.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": false,
            "homepage": "https://neovim.io",
            "hooks_url": "https://api.github.com/repos/dundargoc/neovim/hooks",
            "html_url": "https://github.com/dundargoc/neovim",
            "id": 378614899,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/dundargoc/neovim/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/dundargoc/neovim/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/dundargoc/neovim/issues{/number}",
            "keys_url": "https://api.github.com/repos/dundargoc/neovim/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/dundargoc/neovim/labels{/name}",
            "language": "Vim Script",
            "languages_url": "https://api.github.com/repos/dundargoc/neovim/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/dundargoc/neovim/merges",
            "milestones_url": "https://api.github.com/repos/dundargoc/neovim/milestones{/number}",
            "mirror_url": null,
            "name": "neovim",
            "node_id": "MDEwOlJlcG9zaXRvcnkzNzg2MTQ4OTk=",
            "notifications_url": "https://api.github.com/repos/dundargoc/neovim/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
                "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
                "followers_url": "https://api.github.com/users/dundargoc/followers",
                "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
                "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dundargoc",
                "id": 33953936,
                "login": "dundargoc",
                "node_id": "MDQ6VXNlcjMzOTUzOTM2",
                "organizations_url": "https://api.github.com/users/dundargoc/orgs",
                "received_events_url": "https://api.github.com/users/dundargoc/received_events",
                "repos_url": "https://api.github.com/users/dundargoc/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dundargoc"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/dundargoc/neovim/pulls{/number}",
            "pushed_at": "2023-11-27T21:21:55Z",
            "releases_url": "https://api.github.com/repos/dundargoc/neovim/releases{/id}",
            "size": 234066,
            "ssh_url": "git@github.com:dundargoc/neovim.git",
            "stargazers_count": 1,
            "stargazers_url": "https://api.github.com/repos/dundargoc/neovim/stargazers",
            "statuses_url": "https://api.github.com/repos/dundargoc/neovim/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/dundargoc/neovim/subscribers",
            "subscription_url": "https://api.github.com/repos/dundargoc/neovim/subscription",
            "svn_url": "https://github.com/dundargoc/neovim",
            "tags_url": "https://api.github.com/repos/dundargoc/neovim/tags",
            "teams_url": "https://api.github.com/repos/dundargoc/neovim/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/dundargoc/neovim/git/trees{/sha}",
            "updated_at": "2023-07-31T17:43:26Z",
            "url": "https://api.github.com/repos/dundargoc/neovim",
            "visibility": "public",
            "watchers": 1,
            "watchers_count": 1,
            "web_commit_signoff_required": false
        },
        "sha": "ff7548d5292baebbe834dc1a16ac5cbfd5ab0dce",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
            "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
            "followers_url": "https://api.github.com/users/dundargoc/followers",
            "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
            "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/dundargoc",
            "id": 33953936,
            "login": "dundargoc",
            "node_id": "MDQ6VXNlcjMzOTUzOTM2",
            "organizations_url": "https://api.github.com/users/dundargoc/orgs",
            "received_events_url": "https://api.github.com/users/dundargoc/received_events",
            "repos_url": "https://api.github.com/users/dundargoc/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/dundargoc"
        }
    },
    "html_url": "https://github.com/neovim/neovim/pull/26254",
    "id": 1618542364,
    "issue_url": "https://api.github.com/repos/neovim/neovim/issues/26254",
    "labels": [
        {
            "color": "c5def5",
            "default": false,
            "description": "building and installing Neovim using the provided scripts",
            "id": 84723321,
            "name": "build",
            "node_id": "MDU6TGFiZWw4NDcyMzMyMQ==",
            "url": "https://api.github.com/repos/neovim/neovim/labels/build"
        },
        {
            "color": "C5DEF5",
            "default": false,
            "description": "changes that are not features or bugfixes",
            "id": 106949155,
            "name": "refactor",
            "node_id": "MDU6TGFiZWwxMDY5NDkxNTU=",
            "url": "https://api.github.com/repos/neovim/neovim/labels/refactor"
        }
    ],
    "locked": false,
    "merge_commit_sha": "ab7c0e9904610a1554af1c34a42bcaa25c847c15",
    "merged_at": "2023-11-27T20:35:22Z",
    "milestone": null,
    "node_id": "PR_kwDOAPphoM5geP8c",
    "number": 26254,
    "patch_url": "https://github.com/neovim/neovim/pull/26254.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/neovim/neovim/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/neovim/neovim/pulls/26254/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/neovim/neovim/statuses/ff7548d5292baebbe834dc1a16ac5cbfd5ab0dce",
    "title": "refactor: create runtime_defs.h",
    "updated_at": "2023-11-27T21:58:03Z",
    "url": "https://api.github.com/repos/neovim/neovim/pulls/26254",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/33953936?v=4",
        "events_url": "https://api.github.com/users/dundargoc/events{/privacy}",
        "followers_url": "https://api.github.com/users/dundargoc/followers",
        "following_url": "https://api.github.com/users/dundargoc/following{/other_user}",
        "gists_url": "https://api.github.com/users/dundargoc/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/dundargoc",
        "id": 33953936,
        "login": "dundargoc",
        "node_id": "MDQ6VXNlcjMzOTUzOTM2",
        "organizations_url": "https://api.github.com/users/dundargoc/orgs",
        "received_events_url": "https://api.github.com/users/dundargoc/received_events",
        "repos_url": "https://api.github.com/users/dundargoc/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/dundargoc/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dundargoc/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/dundargoc"
    }
}